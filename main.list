
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 41 64 00 00 85 64 00 00 85 64 00 00     .P. Ad...d...d..
      10:	85 64 00 00 85 64 00 00 85 64 00 00 00 00 00 00     .d...d...d......
	...
      2c:	ad 59 00 00 85 64 00 00 00 00 00 00 b9 5a 00 00     .Y...d.......Z..
      3c:	f5 5a 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .Z...d...d...d..
      4c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      5c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      6c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      7c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      8c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      9c:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      ac:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      bc:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      cc:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
      dc:	85 64 00 00 85 64 00 00 85 64 00 00 85 64 00 00     .d...d...d...d..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00006568 	.word	0x00006568
     6d0:	20000000 	.word	0x20000000
     6d4:	2000003c 	.word	0x2000003c
     6d8:	20000040 	.word	0x20000040
     6dc:	2004b5a0 	.word	0x2004b5a0

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fba3 	bl	5b44 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 03ac 	movw	r3, #172	; 0xac
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 03ac 	movw	r3, #172	; 0xac
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fce4 	bl	3e18 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fcdf 	bl	3e18 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 03b0 	movw	r3, #176	; 0xb0
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 03b0 	movw	r3, #176	; 0xb0
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 0240 	movw	r2, #64	; 0x40
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fcbf 	bl	3e30 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 03b4 	movw	r3, #180	; 0xb4
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 03ac 	movw	r3, #172	; 0xac
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fcfe 	bl	3ef0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 03ac 	movw	r3, #172	; 0xac
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 03b4 	movw	r3, #180	; 0xb4
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 0394 	movw	r3, #148	; 0x94
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 03ac 	movw	r3, #172	; 0xac
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fca8 	bl	3e80 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 0390 	movw	r3, #144	; 0x90
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 03ac 	movw	r3, #172	; 0xac
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fc98 	bl	3e80 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 03ac 	movw	r3, #172	; 0xac
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fc8b 	bl	3e80 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 0398 	movw	r3, #152	; 0x98
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fcac 	bl	3ef0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fca3 	bl	3ef0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 03b0 	movw	r3, #176	; 0xb0
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 03b0 	movw	r3, #176	; 0xb0
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 0240 	movw	r2, #64	; 0x40
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fc22 	bl	3e30 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 0398 	movw	r3, #152	; 0x98
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fcf1 	bl	4fec <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 03b8 	movw	r3, #184	; 0xb8
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 03bc 	movw	r3, #188	; 0xbc
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 03b4 	movw	r3, #180	; 0xb4
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 03b4 	movw	r3, #180	; 0xb4
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 03bc 	movw	r3, #188	; 0xbc
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 03bc 	movw	r3, #188	; 0xbc
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 03b4 	movw	r3, #180	; 0xb4
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 0390 	movw	r3, #144	; 0x90
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 0394 	movw	r3, #148	; 0x94
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 0390 	movw	r3, #144	; 0x90
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 0394 	movw	r3, #148	; 0x94
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 0390 	movw	r3, #144	; 0x90
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 03b4 	movw	r3, #180	; 0xb4
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc16 	bl	3ef0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc0d 	bl	3ef0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 03b0 	movw	r3, #176	; 0xb0
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 03b0 	movw	r3, #176	; 0xb0
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 0240 	movw	r2, #64	; 0x40
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fb88 	bl	3e30 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 0390 	movw	r3, #144	; 0x90
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 03bc 	movw	r3, #188	; 0xbc
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 03b4 	movw	r3, #180	; 0xb4
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 03b8 	movw	r3, #184	; 0xb8
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 03b0 	movw	r3, #176	; 0xb0
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 03b0 	movw	r3, #176	; 0xb0
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 03b0 	movw	r3, #176	; 0xb0
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 03b0 	movw	r3, #176	; 0xb0
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 0240 	movw	r2, #64	; 0x40
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 03b0 	movw	r3, #176	; 0xb0
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 0240 	movw	r2, #64	; 0x40
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 03ac 	movw	r3, #172	; 0xac
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 03ac 	movw	r3, #172	; 0xac
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 03ac 	movw	r3, #172	; 0xac
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 03ac 	movw	r3, #172	; 0xac
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 0240 	movw	r2, #64	; 0x40
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fabf 	bl	3dd8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 0068 	movw	r0, #104	; 0x68
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fab3 	bl	3dd8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 007c 	movw	r0, #124	; 0x7c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 faad 	bl	3dd8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 0098 	movw	r0, #152	; 0x98
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 faa7 	bl	3dd8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 0390 	movw	r3, #144	; 0x90
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 0268 	movw	r2, #104	; 0x68
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 0394 	movw	r3, #148	; 0x94
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 027c 	movw	r2, #124	; 0x7c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb11 	bl	3ef0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 0098 	movw	r0, #152	; 0x98
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 faa8 	bl	3e30 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 03ac 	movw	r3, #172	; 0xac
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

void vInitialiseEventLists( portBASE_TYPE NumOfEvents)
{
    2908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    290c:	b088      	sub	sp, #32
    290e:	af00      	add	r7, sp, #0
    2910:	6078      	str	r0, [r7, #4]
    2912:	4669      	mov	r1, sp
    2914:	4688      	mov	r8, r1
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NumOfEvents];
    2916:	687e      	ldr	r6, [r7, #4]
    2918:	1e71      	subs	r1, r6, #1
    291a:	61f9      	str	r1, [r7, #28]
    291c:	4631      	mov	r1, r6
    291e:	4608      	mov	r0, r1
    2920:	f04f 0100 	mov.w	r1, #0
    2924:	014d      	lsls	r5, r1, #5
    2926:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    292a:	0144      	lsls	r4, r0, #5
    292c:	4631      	mov	r1, r6
    292e:	4608      	mov	r0, r1
    2930:	f04f 0100 	mov.w	r1, #0
    2934:	014b      	lsls	r3, r1, #5
    2936:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    293a:	0142      	lsls	r2, r0, #5
    293c:	4633      	mov	r3, r6
    293e:	009b      	lsls	r3, r3, #2
    2940:	3303      	adds	r3, #3
    2942:	3307      	adds	r3, #7
    2944:	08db      	lsrs	r3, r3, #3
    2946:	00db      	lsls	r3, r3, #3
    2948:	ebad 0d03 	sub.w	sp, sp, r3
    294c:	466b      	mov	r3, sp
    294e:	3303      	adds	r3, #3
    2950:	089b      	lsrs	r3, r3, #2
    2952:	009b      	lsls	r3, r3, #2
    2954:	61bb      	str	r3, [r7, #24]
    eveECB * pxEndFlagEvent;

    vListInitialise( ( xList * ) &xEventIdleList);
    2956:	f240 00c0 	movw	r0, #192	; 0xc0
    295a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    295e:	f001 fa3b 	bl	3dd8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventPool );
    2962:	f240 00d4 	movw	r0, #212	; 0xd4
    2966:	f2c2 0000 	movt	r0, #8192	; 0x2000
    296a:	f001 fa35 	bl	3dd8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventList );
    296e:	f240 00e8 	movw	r0, #232	; 0xe8
    2972:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2976:	f001 fa2f 	bl	3dd8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    297a:	f240 00fc 	movw	r0, #252	; 0xfc
    297e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2982:	f001 fa29 	bl	3dd8 <vListInitialise>

    for( i = 0; i < NumOfEvents; ++i )
    2986:	2300      	movs	r3, #0
    2988:	60fb      	str	r3, [r7, #12]
    298a:	e023      	b.n	29d4 <vInitialiseEventLists+0xcc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    298c:	68fc      	ldr	r4, [r7, #12]
    298e:	203c      	movs	r0, #60	; 0x3c
    2990:	f003 f8d8 	bl	5b44 <pvPortMalloc>
    2994:	4602      	mov	r2, r0
    2996:	69bb      	ldr	r3, [r7, #24]
    2998:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    299c:	68fa      	ldr	r2, [r7, #12]
    299e:	69bb      	ldr	r3, [r7, #24]
    29a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    29a4:	68f9      	ldr	r1, [r7, #12]
    29a6:	69bb      	ldr	r3, [r7, #24]
    29a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    29ac:	3318      	adds	r3, #24
    29ae:	4610      	mov	r0, r2
    29b0:	4619      	mov	r1, r3
    29b2:	f000 fa01 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    29b6:	68fa      	ldr	r2, [r7, #12]
    29b8:	69bb      	ldr	r3, [r7, #24]
    29ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    29be:	3318      	adds	r3, #24
    29c0:	f240 00c0 	movw	r0, #192	; 0xc0
    29c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29c8:	4619      	mov	r1, r3
    29ca:	f001 fa31 	bl	3e30 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventIdleList);
    vListInitialise( ( xList * ) &xEventPool );
    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    for( i = 0; i < NumOfEvents; ++i )
    29ce:	68fb      	ldr	r3, [r7, #12]
    29d0:	3301      	adds	r3, #1
    29d2:	60fb      	str	r3, [r7, #12]
    29d4:	68fa      	ldr	r2, [r7, #12]
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	429a      	cmp	r2, r3
    29da:	dbd7      	blt.n	298c <vInitialiseEventLists+0x84>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29dc:	2300      	movs	r3, #0
    29de:	613b      	str	r3, [r7, #16]
    29e0:	e00f      	b.n	2a02 <vInitialiseEventLists+0xfa>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    29e2:	693a      	ldr	r2, [r7, #16]
    29e4:	4613      	mov	r3, r2
    29e6:	009b      	lsls	r3, r3, #2
    29e8:	4413      	add	r3, r2
    29ea:	009b      	lsls	r3, r3, #2
    29ec:	f240 1210 	movw	r2, #272	; 0x110
    29f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    29f4:	4413      	add	r3, r2
    29f6:	4618      	mov	r0, r3
    29f8:	f001 f9ee 	bl	3dd8 <vListInitialise>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29fc:	693b      	ldr	r3, [r7, #16]
    29fe:	3301      	adds	r3, #1
    2a00:	613b      	str	r3, [r7, #16]
    2a02:	693b      	ldr	r3, [r7, #16]
    2a04:	2b00      	cmp	r3, #0
    2a06:	ddec      	ble.n	29e2 <vInitialiseEventLists+0xda>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a08:	203c      	movs	r0, #60	; 0x3c
    2a0a:	f003 f89b 	bl	5b44 <pvPortMalloc>
    2a0e:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a10:	697b      	ldr	r3, [r7, #20]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d01e      	beq.n	2a54 <vInitialiseEventLists+0x14c>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a16:	697b      	ldr	r3, [r7, #20]
    2a18:	f04f 32ff 	mov.w	r2, #4294967295
    2a1c:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a1e:	697b      	ldr	r3, [r7, #20]
    2a20:	f04f 32ff 	mov.w	r2, #4294967295
    2a24:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a26:	697b      	ldr	r3, [r7, #20]
    2a28:	f04f 32ff 	mov.w	r2, #4294967295
    2a2c:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a2e:	697b      	ldr	r3, [r7, #20]
    2a30:	f04f 32ff 	mov.w	r2, #4294967295
    2a34:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a36:	697b      	ldr	r3, [r7, #20]
    2a38:	3318      	adds	r3, #24
    2a3a:	6978      	ldr	r0, [r7, #20]
    2a3c:	4619      	mov	r1, r3
    2a3e:	f000 f9bb 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	3318      	adds	r3, #24
    2a46:	f240 00e8 	movw	r0, #232	; 0xe8
    2a4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a4e:	4619      	mov	r1, r3
    2a50:	f001 f9ee 	bl	3e30 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a54:	203c      	movs	r0, #60	; 0x3c
    2a56:	f003 f875 	bl	5b44 <pvPortMalloc>
    2a5a:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a5c:	697b      	ldr	r3, [r7, #20]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d01e      	beq.n	2aa0 <vInitialiseEventLists+0x198>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a62:	697b      	ldr	r3, [r7, #20]
    2a64:	f04f 32ff 	mov.w	r2, #4294967295
    2a68:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a6a:	697b      	ldr	r3, [r7, #20]
    2a6c:	f04f 32ff 	mov.w	r2, #4294967295
    2a70:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a72:	697b      	ldr	r3, [r7, #20]
    2a74:	f04f 32ff 	mov.w	r2, #4294967295
    2a78:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a7a:	697b      	ldr	r3, [r7, #20]
    2a7c:	f04f 32ff 	mov.w	r2, #4294967295
    2a80:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a82:	697b      	ldr	r3, [r7, #20]
    2a84:	3318      	adds	r3, #24
    2a86:	6978      	ldr	r0, [r7, #20]
    2a88:	4619      	mov	r1, r3
    2a8a:	f000 f995 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2a8e:	697b      	ldr	r3, [r7, #20]
    2a90:	3318      	adds	r3, #24
    2a92:	f240 00fc 	movw	r0, #252	; 0xfc
    2a96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9a:	4619      	mov	r1, r3
    2a9c:	f001 f9c8 	bl	3e30 <vListInsertEnd>
    2aa0:	46c5      	mov	sp, r8
    }
}
    2aa2:	3720      	adds	r7, #32
    2aa4:	46bd      	mov	sp, r7
    2aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aaa:	bf00      	nop

00002aac <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    2aac:	b490      	push	{r4, r7}
    2aae:	b084      	sub	sp, #16
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	463c      	mov	r4, r7
    2ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    2ab8:	687a      	ldr	r2, [r7, #4]
    2aba:	69fb      	ldr	r3, [r7, #28]
    2abc:	429a      	cmp	r2, r3
    2abe:	d201      	bcs.n	2ac4 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2ac0:	2301      	movs	r3, #1
    2ac2:	e014      	b.n	2aee <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2ac4:	687a      	ldr	r2, [r7, #4]
    2ac6:	69fb      	ldr	r3, [r7, #28]
    2ac8:	429a      	cmp	r2, r3
    2aca:	d10f      	bne.n	2aec <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2acc:	683a      	ldr	r2, [r7, #0]
    2ace:	69bb      	ldr	r3, [r7, #24]
    2ad0:	429a      	cmp	r2, r3
    2ad2:	d201      	bcs.n	2ad8 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2ad4:	2301      	movs	r3, #1
    2ad6:	e00a      	b.n	2aee <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2ad8:	683a      	ldr	r2, [r7, #0]
    2ada:	69bb      	ldr	r3, [r7, #24]
    2adc:	429a      	cmp	r2, r3
    2ade:	d105      	bne.n	2aec <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2ae0:	68fa      	ldr	r2, [r7, #12]
    2ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae4:	429a      	cmp	r2, r3
    2ae6:	da01      	bge.n	2aec <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2ae8:	2301      	movs	r3, #1
    2aea:	e000      	b.n	2aee <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2aec:	2300      	movs	r3, #0
}
    2aee:	4618      	mov	r0, r3
    2af0:	3710      	adds	r7, #16
    2af2:	46bd      	mov	sp, r7
    2af4:	bc90      	pop	{r4, r7}
    2af6:	4770      	bx	lr

00002af8 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2af8:	b490      	push	{r4, r7}
    2afa:	b084      	sub	sp, #16
    2afc:	af00      	add	r7, sp, #0
    2afe:	463c      	mov	r4, r7
    2b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2b04:	683a      	ldr	r2, [r7, #0]
    2b06:	69bb      	ldr	r3, [r7, #24]
    2b08:	429a      	cmp	r2, r3
    2b0a:	d201      	bcs.n	2b10 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2b0c:	2301      	movs	r3, #1
    2b0e:	e014      	b.n	2b3a <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2b10:	683a      	ldr	r2, [r7, #0]
    2b12:	69bb      	ldr	r3, [r7, #24]
    2b14:	429a      	cmp	r2, r3
    2b16:	d10f      	bne.n	2b38 <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2b18:	687a      	ldr	r2, [r7, #4]
    2b1a:	69fb      	ldr	r3, [r7, #28]
    2b1c:	429a      	cmp	r2, r3
    2b1e:	d201      	bcs.n	2b24 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2b20:	2301      	movs	r3, #1
    2b22:	e00a      	b.n	2b3a <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2b24:	687a      	ldr	r2, [r7, #4]
    2b26:	69fb      	ldr	r3, [r7, #28]
    2b28:	429a      	cmp	r2, r3
    2b2a:	d105      	bne.n	2b38 <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2b2c:	68fa      	ldr	r2, [r7, #12]
    2b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b30:	429a      	cmp	r2, r3
    2b32:	da01      	bge.n	2b38 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2b34:	2301      	movs	r3, #1
    2b36:	e000      	b.n	2b3a <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2b38:	2300      	movs	r3, #0
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3710      	adds	r7, #16
    2b3e:	46bd      	mov	sp, r7
    2b40:	bc90      	pop	{r4, r7}
    2b42:	4770      	bx	lr

00002b44 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2b44:	b480      	push	{r7}
    2b46:	b083      	sub	sp, #12
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	681b      	ldr	r3, [r3, #0]
}
    2b50:	4618      	mov	r0, r3
    2b52:	370c      	adds	r7, #12
    2b54:	46bd      	mov	sp, r7
    2b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b5a:	4770      	bx	lr

00002b5c <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2b5c:	b480      	push	{r7}
    2b5e:	b083      	sub	sp, #12
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2b64:	687b      	ldr	r3, [r7, #4]
    2b66:	685b      	ldr	r3, [r3, #4]
}
    2b68:	4618      	mov	r0, r3
    2b6a:	370c      	adds	r7, #12
    2b6c:	46bd      	mov	sp, r7
    2b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b72:	4770      	bx	lr

00002b74 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2b74:	b490      	push	{r4, r7}
    2b76:	b082      	sub	sp, #8
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
    2b7c:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2b7e:	687a      	ldr	r2, [r7, #4]
    2b80:	683b      	ldr	r3, [r7, #0]
    2b82:	4614      	mov	r4, r2
    2b84:	3308      	adds	r3, #8
    2b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b8c:	6878      	ldr	r0, [r7, #4]
    2b8e:	3708      	adds	r7, #8
    2b90:	46bd      	mov	sp, r7
    2b92:	bc90      	pop	{r4, r7}
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop

00002b98 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2b98:	b490      	push	{r4, r7}
    2b9a:	b082      	sub	sp, #8
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ba2:	687a      	ldr	r2, [r7, #4]
    2ba4:	683b      	ldr	r3, [r7, #0]
    2ba6:	4614      	mov	r4, r2
    2ba8:	332c      	adds	r3, #44	; 0x2c
    2baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2bb0:	6878      	ldr	r0, [r7, #4]
    2bb2:	3708      	adds	r7, #8
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bc90      	pop	{r4, r7}
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop

00002bbc <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2bbc:	b480      	push	{r7}
    2bbe:	b085      	sub	sp, #20
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bcc:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	68ba      	ldr	r2, [r7, #8]
    2bd2:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2bd4:	68fb      	ldr	r3, [r7, #12]
    2bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d103      	bne.n	2be4 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2bdc:	68fb      	ldr	r3, [r7, #12]
    2bde:	68ba      	ldr	r2, [r7, #8]
    2be0:	60da      	str	r2, [r3, #12]
    2be2:	e003      	b.n	2bec <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2be4:	68fb      	ldr	r3, [r7, #12]
    2be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	2200      	movs	r2, #0
    2bf0:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2bf2:	f240 1324 	movw	r3, #292	; 0x124
    2bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	461a      	mov	r2, r3
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2c02:	f240 1324 	movw	r3, #292	; 0x124
    2c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	1c5a      	adds	r2, r3, #1
    2c0e:	f240 1324 	movw	r3, #292	; 0x124
    2c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c16:	601a      	str	r2, [r3, #0]
}
    2c18:	3714      	adds	r7, #20
    2c1a:	46bd      	mov	sp, r7
    2c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop

00002c24 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2c24:	b084      	sub	sp, #16
    2c26:	b490      	push	{r4, r7}
    2c28:	b082      	sub	sp, #8
    2c2a:	af00      	add	r7, sp, #0
    2c2c:	6078      	str	r0, [r7, #4]
    2c2e:	f107 0014 	add.w	r0, r7, #20
    2c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2c3c:	f107 0314 	add.w	r3, r7, #20
    2c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2c46:	3708      	adds	r7, #8
    2c48:	46bd      	mov	sp, r7
    2c4a:	bc90      	pop	{r4, r7}
    2c4c:	b004      	add	sp, #16
    2c4e:	4770      	bx	lr

00002c50 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2c50:	b480      	push	{r7}
    2c52:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2c54:	f240 1310 	movw	r3, #272	; 0x110
    2c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2c5c:	4618      	mov	r0, r3
    2c5e:	46bd      	mov	sp, r7
    2c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop

00002c68 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2c68:	b590      	push	{r4, r7, lr}
    2c6a:	b091      	sub	sp, #68	; 0x44
    2c6c:	af04      	add	r7, sp, #16
    2c6e:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2c70:	f240 03e8 	movw	r3, #232	; 0xe8
    2c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c78:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	68db      	ldr	r3, [r3, #12]
    2c7e:	f107 0208 	add.w	r2, r7, #8
    2c82:	4610      	mov	r0, r2
    2c84:	4619      	mov	r1, r3
    2c86:	f7ff ff75 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c90:	d103      	bne.n	2c9a <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c94:	691b      	ldr	r3, [r3, #16]
    2c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c98:	e021      	b.n	2cde <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c9a:	f002 fedb 	bl	5a54 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ca0:	3308      	adds	r3, #8
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	e002      	b.n	2cac <prvEventListGenericInsert1+0x44>
    2ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca8:	685b      	ldr	r3, [r3, #4]
    2caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cae:	685b      	ldr	r3, [r3, #4]
    2cb0:	68db      	ldr	r3, [r3, #12]
    2cb2:	f107 0218 	add.w	r2, r7, #24
    2cb6:	4610      	mov	r0, r2
    2cb8:	4619      	mov	r1, r3
    2cba:	f7ff ff5b 	bl	2b74 <xEventGetxTimeStamp>
    2cbe:	466c      	mov	r4, sp
    2cc0:	f107 0308 	add.w	r3, r7, #8
    2cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cca:	f107 0318 	add.w	r3, r7, #24
    2cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cd0:	f7ff feec 	bl	2aac <xCompareFunction1>
    2cd4:	4603      	mov	r3, r0
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d1e5      	bne.n	2ca6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cda:	f002 fed1 	bl	5a80 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce0:	685a      	ldr	r2, [r3, #4]
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	685b      	ldr	r3, [r3, #4]
    2cea:	687a      	ldr	r2, [r7, #4]
    2cec:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cf2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cf6:	687a      	ldr	r2, [r7, #4]
    2cf8:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cfe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	1c5a      	adds	r2, r3, #1
    2d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d08:	601a      	str	r2, [r3, #0]
}
    2d0a:	3734      	adds	r7, #52	; 0x34
    2d0c:	46bd      	mov	sp, r7
    2d0e:	bd90      	pop	{r4, r7, pc}

00002d10 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2d10:	b590      	push	{r4, r7, lr}
    2d12:	b091      	sub	sp, #68	; 0x44
    2d14:	af04      	add	r7, sp, #16
    2d16:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2d18:	f240 03fc 	movw	r3, #252	; 0xfc
    2d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d20:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	68db      	ldr	r3, [r3, #12]
    2d26:	f107 0208 	add.w	r2, r7, #8
    2d2a:	4610      	mov	r0, r2
    2d2c:	4619      	mov	r1, r3
    2d2e:	f7ff ff21 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d38:	d103      	bne.n	2d42 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d3c:	691b      	ldr	r3, [r3, #16]
    2d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d40:	e021      	b.n	2d86 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2d42:	f002 fe87 	bl	5a54 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d48:	3308      	adds	r3, #8
    2d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d4c:	e002      	b.n	2d54 <prvEventListGenericInsert2+0x44>
    2d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d50:	685b      	ldr	r3, [r3, #4]
    2d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	68db      	ldr	r3, [r3, #12]
    2d5a:	f107 0218 	add.w	r2, r7, #24
    2d5e:	4610      	mov	r0, r2
    2d60:	4619      	mov	r1, r3
    2d62:	f7ff ff07 	bl	2b74 <xEventGetxTimeStamp>
    2d66:	466c      	mov	r4, sp
    2d68:	f107 0308 	add.w	r3, r7, #8
    2d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d72:	f107 0318 	add.w	r3, r7, #24
    2d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d78:	f7ff febe 	bl	2af8 <xCompareFunction2>
    2d7c:	4603      	mov	r3, r0
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d1e5      	bne.n	2d4e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2d82:	f002 fe7d 	bl	5a80 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	687a      	ldr	r2, [r7, #4]
    2d94:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d9a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d9e:	687a      	ldr	r2, [r7, #4]
    2da0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2da6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	1c5a      	adds	r2, r3, #1
    2dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2db0:	601a      	str	r2, [r3, #0]
}
    2db2:	3734      	adds	r7, #52	; 0x34
    2db4:	46bd      	mov	sp, r7
    2db6:	bd90      	pop	{r4, r7, pc}

00002db8 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2db8:	b480      	push	{r7}
    2dba:	b083      	sub	sp, #12
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	687a      	ldr	r2, [r7, #4]
    2dc6:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2dc8:	370c      	adds	r7, #12
    2dca:	46bd      	mov	sp, r7
    2dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dd0:	4770      	bx	lr
    2dd2:	bf00      	nop

00002dd4 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2dd4:	b084      	sub	sp, #16
    2dd6:	b580      	push	{r7, lr}
    2dd8:	b086      	sub	sp, #24
    2dda:	af02      	add	r7, sp, #8
    2ddc:	6078      	str	r0, [r7, #4]
    2dde:	f107 001c 	add.w	r0, r7, #28
    2de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2de6:	2300      	movs	r3, #0
    2de8:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2dea:	f002 fe33 	bl	5a54 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2dee:	f002 fcc9 	bl	5784 <xTaskGetCurrentTaskHandle>
    2df2:	60b8      	str	r0, [r7, #8]

    // get new idle event 
    if( listCURRENT_LIST_LENGTH(&xEventIdleList) == 0 )
    2df4:	f240 03c0 	movw	r3, #192	; 0xc0
    2df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d106      	bne.n	2e10 <vEventGenericCreate+0x3c>
    {
        vPrintString(" No Idle Events available\n\r");
    2e02:	f246 4088 	movw	r0, #25736	; 0x6488
    2e06:	f2c0 0000 	movt	r0, #0
    2e0a:	f003 f8b9 	bl	5f80 <vPrintString>
        return;
    2e0e:	e039      	b.n	2e84 <vEventGenericCreate+0xb0>
    }

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e10:	f240 03c0 	movw	r3, #192	; 0xc0
    2e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e18:	68db      	ldr	r3, [r3, #12]
    2e1a:	68db      	ldr	r3, [r3, #12]
    2e1c:	60fb      	str	r3, [r7, #12]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	3318      	adds	r3, #24
    2e22:	4618      	mov	r0, r3
    2e24:	f001 f864 	bl	3ef0 <vListRemove>
    if( pxNewEvent == NULL )
    2e28:	68fb      	ldr	r3, [r7, #12]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d105      	bne.n	2e3a <vEventGenericCreate+0x66>
    {
        vPrintString("malloc for event stack failed\n\r");
    2e2e:	f246 40a4 	movw	r0, #25764	; 0x64a4
    2e32:	f2c0 0000 	movt	r0, #0
    2e36:	f003 f8a3 	bl	5f80 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d01f      	beq.n	2e80 <vEventGenericCreate+0xac>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	68ba      	ldr	r2, [r7, #8]
    2e44:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2e46:	68fb      	ldr	r3, [r7, #12]
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e4e:	9300      	str	r3, [sp, #0]
    2e50:	f107 031c 	add.w	r3, r7, #28
    2e54:	cb0e      	ldmia	r3, {r1, r2, r3}
    2e56:	68f8      	ldr	r0, [r7, #12]
    2e58:	f7ff fee4 	bl	2c24 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2e5c:	68f8      	ldr	r0, [r7, #12]
    2e5e:	f7ff fead 	bl	2bbc <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	3318      	adds	r3, #24
    2e66:	68f8      	ldr	r0, [r7, #12]
    2e68:	4619      	mov	r1, r3
    2e6a:	f7ff ffa5 	bl	2db8 <vListIntialiseEventItem>

        // insert the event into eventpool with O(1)
        vListInsertEnd(&xEventPool, (xListItem *)& pxNewEvent->xEventListItem);
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	3318      	adds	r3, #24
    2e72:	f240 00d4 	movw	r0, #212	; 0xd4
    2e76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e7a:	4619      	mov	r1, r3
    2e7c:	f000 ffd8 	bl	3e30 <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    2e80:	f002 fdfe 	bl	5a80 <vPortExitCritical>
}
    2e84:	3710      	adds	r7, #16
    2e86:	46bd      	mov	sp, r7
    2e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2e8c:	b004      	add	sp, #16
    2e8e:	4770      	bx	lr

00002e90 <Is_Executable_Event_Arrive>:

portBASE_TYPE Is_Executable_Event_Arrive()
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b086      	sub	sp, #24
    2e94:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct timeStamp xTimeStamp;
    
    if(listCURRENT_LIST_LENGTH(&xEventList) > 1)
    2e96:	f240 03e8 	movw	r3, #232	; 0xe8
    2e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d915      	bls.n	2ed0 <Is_Executable_Event_Arrive+0x40>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2ea4:	f240 03e8 	movw	r3, #232	; 0xe8
    2ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eac:	68db      	ldr	r3, [r3, #12]
    2eae:	617b      	str	r3, [r7, #20]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2eb0:	697b      	ldr	r3, [r7, #20]
    2eb2:	68db      	ldr	r3, [r3, #12]
    2eb4:	463a      	mov	r2, r7
    2eb6:	4610      	mov	r0, r2
    2eb8:	4619      	mov	r1, r3
    2eba:	f7ff fe5b 	bl	2b74 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2ebe:	f002 f895 	bl	4fec <xTaskGetTickCount>
    2ec2:	6138      	str	r0, [r7, #16]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2ec4:	687a      	ldr	r2, [r7, #4]
    2ec6:	693b      	ldr	r3, [r7, #16]
    2ec8:	429a      	cmp	r2, r3
    2eca:	d801      	bhi.n	2ed0 <Is_Executable_Event_Arrive+0x40>
        {
            return 1;
    2ecc:	2301      	movs	r3, #1
    2ece:	e000      	b.n	2ed2 <Is_Executable_Event_Arrive+0x42>
        }
    }
    return 0;
    2ed0:	2300      	movs	r3, #0
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	3718      	adds	r7, #24
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop

00002edc <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b088      	sub	sp, #32
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
    2ee4:	6039      	str	r1, [r7, #0]
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;

    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2ee6:	e00b      	b.n	2f00 <xEventListGenericTransit+0x24>
    {
        temp_pxEventListItem = (xListItem *) xEventPool.xListEnd.pxNext;    
    2ee8:	f240 03d4 	movw	r3, #212	; 0xd4
    2eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ef0:	68db      	ldr	r3, [r3, #12]
    2ef2:	61fb      	str	r3, [r7, #28]
        vListRemove(temp_pxEventListItem);
    2ef4:	69f8      	ldr	r0, [r7, #28]
    2ef6:	f000 fffb 	bl	3ef0 <vListRemove>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    2efa:	69f8      	ldr	r0, [r7, #28]
    2efc:	f7ff feb4 	bl	2c68 <prvEventListGenericInsert1>
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;

    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2f00:	f240 03d4 	movw	r3, #212	; 0xd4
    2f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d1ec      	bne.n	2ee8 <xEventListGenericTransit+0xc>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2f0e:	e020      	b.n	2f52 <xEventListGenericTransit+0x76>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2f10:	f240 03e8 	movw	r3, #232	; 0xe8
    2f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f18:	68db      	ldr	r3, [r3, #12]
    2f1a:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	68db      	ldr	r3, [r3, #12]
    2f20:	f107 0208 	add.w	r2, r7, #8
    2f24:	4610      	mov	r0, r2
    2f26:	4619      	mov	r1, r3
    2f28:	f7ff fe24 	bl	2b74 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2f2c:	f002 f85e 	bl	4fec <xTaskGetTickCount>
    2f30:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2f32:	68fa      	ldr	r2, [r7, #12]
    2f34:	69bb      	ldr	r3, [r7, #24]
    2f36:	429a      	cmp	r2, r3
    2f38:	d80a      	bhi.n	2f50 <xEventListGenericTransit+0x74>
        {
            taskENTER_CRITICAL();
    2f3a:	f002 fd8b 	bl	5a54 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2f3e:	69f8      	ldr	r0, [r7, #28]
    2f40:	f000 ffd6 	bl	3ef0 <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2f44:	69f8      	ldr	r0, [r7, #28]
    2f46:	f7ff fee3 	bl	2d10 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2f4a:	f002 fd99 	bl	5a80 <vPortExitCritical>
    2f4e:	e000      	b.n	2f52 <xEventListGenericTransit+0x76>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2f50:	e006      	b.n	2f60 <xEventListGenericTransit+0x84>
        //how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2f52:	f240 03e8 	movw	r3, #232	; 0xe8
    2f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d8d7      	bhi.n	2f10 <xEventListGenericTransit+0x34>
           break; 
        }
    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2f60:	f240 03fc 	movw	r3, #252	; 0xfc
    2f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f68:	681b      	ldr	r3, [r3, #0]
    2f6a:	2b01      	cmp	r3, #1
    2f6c:	d107      	bne.n	2f7e <xEventListGenericTransit+0xa2>
    {
        *pxCurrentReadyList = NULL;
    2f6e:	683b      	ldr	r3, [r7, #0]
    2f70:	2200      	movs	r2, #0
    2f72:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2200      	movs	r2, #0
    2f78:	601a      	str	r2, [r3, #0]
        return 0;
    2f7a:	2300      	movs	r3, #0
    2f7c:	e01d      	b.n	2fba <xEventListGenericTransit+0xde>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2f7e:	f7ff fe67 	bl	2c50 <pxGetReadyList>
    2f82:	4602      	mov	r2, r0
    2f84:	683b      	ldr	r3, [r7, #0]
    2f86:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2f88:	f240 03fc 	movw	r3, #252	; 0xfc
    2f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f90:	68da      	ldr	r2, [r3, #12]
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2f96:	f002 fd5d 	bl	5a54 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	4618      	mov	r0, r3
    2fa0:	f000 ffa6 	bl	3ef0 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2fa4:	683b      	ldr	r3, [r7, #0]
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	4610      	mov	r0, r2
    2fae:	4619      	mov	r1, r3
    2fb0:	f000 ff3e 	bl	3e30 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2fb4:	f002 fd64 	bl	5a80 <vPortExitCritical>
    }

    return 1;
    2fb8:	2301      	movs	r3, #1
}
    2fba:	4618      	mov	r0, r3
    2fbc:	3720      	adds	r7, #32
    2fbe:	46bd      	mov	sp, r7
    2fc0:	bd80      	pop	{r7, pc}
    2fc2:	bf00      	nop

00002fc4 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b088      	sub	sp, #32
    2fc8:	af00      	add	r7, sp, #0
    2fca:	60f8      	str	r0, [r7, #12]
    2fcc:	60b9      	str	r1, [r7, #8]
    2fce:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	681b      	ldr	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d103      	bne.n	2fe4 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2fdc:	68fb      	ldr	r3, [r7, #12]
    2fde:	2200      	movs	r2, #0
    2fe0:	601a      	str	r2, [r3, #0]
        return;
    2fe2:	e04d      	b.n	3080 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2fe4:	69bb      	ldr	r3, [r7, #24]
    2fe6:	68db      	ldr	r3, [r3, #12]
    2fe8:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2fea:	f002 fd33 	bl	5a54 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2fee:	f002 fbc9 	bl	5784 <xTaskGetCurrentTaskHandle>
    2ff2:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2ff4:	e01e      	b.n	3034 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2ff6:	69fb      	ldr	r3, [r7, #28]
    2ff8:	68db      	ldr	r3, [r3, #12]
    2ffa:	4618      	mov	r0, r3
    2ffc:	f7ff fda2 	bl	2b44 <xEventGetpxSource>
    3000:	4602      	mov	r2, r0
    3002:	68bb      	ldr	r3, [r7, #8]
    3004:	429a      	cmp	r2, r3
    3006:	d112      	bne.n	302e <vEventGenericReceive+0x6a>
    3008:	69fb      	ldr	r3, [r7, #28]
    300a:	68db      	ldr	r3, [r3, #12]
    300c:	4618      	mov	r0, r3
    300e:	f7ff fda5 	bl	2b5c <xEventGetpxDestination>
    3012:	4602      	mov	r2, r0
    3014:	697b      	ldr	r3, [r7, #20]
    3016:	429a      	cmp	r2, r3
    3018:	d109      	bne.n	302e <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    301a:	69fb      	ldr	r3, [r7, #28]
    301c:	68da      	ldr	r2, [r3, #12]
    301e:	68fb      	ldr	r3, [r7, #12]
    3020:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    3022:	69f8      	ldr	r0, [r7, #28]
    3024:	f000 ff64 	bl	3ef0 <vListRemove>
            taskEXIT_CRITICAL();
    3028:	f002 fd2a 	bl	5a80 <vPortExitCritical>
            return;
    302c:	e028      	b.n	3080 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    302e:	69fb      	ldr	r3, [r7, #28]
    3030:	685b      	ldr	r3, [r3, #4]
    3032:	61fb      	str	r3, [r7, #28]
    3034:	69bb      	ldr	r3, [r7, #24]
    3036:	691a      	ldr	r2, [r3, #16]
    3038:	69fb      	ldr	r3, [r7, #28]
    303a:	429a      	cmp	r2, r3
    303c:	d1db      	bne.n	2ff6 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    303e:	69fb      	ldr	r3, [r7, #28]
    3040:	68db      	ldr	r3, [r3, #12]
    3042:	4618      	mov	r0, r3
    3044:	f7ff fd7e 	bl	2b44 <xEventGetpxSource>
    3048:	4602      	mov	r2, r0
    304a:	68bb      	ldr	r3, [r7, #8]
    304c:	429a      	cmp	r2, r3
    304e:	d112      	bne.n	3076 <vEventGenericReceive+0xb2>
    3050:	69fb      	ldr	r3, [r7, #28]
    3052:	68db      	ldr	r3, [r3, #12]
    3054:	4618      	mov	r0, r3
    3056:	f7ff fd81 	bl	2b5c <xEventGetpxDestination>
    305a:	4602      	mov	r2, r0
    305c:	697b      	ldr	r3, [r7, #20]
    305e:	429a      	cmp	r2, r3
    3060:	d109      	bne.n	3076 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    3062:	69fb      	ldr	r3, [r7, #28]
    3064:	68da      	ldr	r2, [r3, #12]
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    306a:	69f8      	ldr	r0, [r7, #28]
    306c:	f000 ff40 	bl	3ef0 <vListRemove>
        taskEXIT_CRITICAL();
    3070:	f002 fd06 	bl	5a80 <vPortExitCritical>
        return;
    3074:	e004      	b.n	3080 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	2200      	movs	r2, #0
    307a:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    307c:	f002 fd00 	bl	5a80 <vPortExitCritical>
}
    3080:	3720      	adds	r7, #32
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	bf00      	nop

00003088 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3090:	f002 fce0 	bl	5a54 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	3318      	adds	r3, #24
    3098:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    309a:	68f8      	ldr	r0, [r7, #12]
    309c:	f000 ff28 	bl	3ef0 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    30a0:	f240 00c0 	movw	r0, #192	; 0xc0
    30a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    30a8:	68f9      	ldr	r1, [r7, #12]
    30aa:	f000 fec1 	bl	3e30 <vListInsertEnd>

    taskEXIT_CRITICAL();
    30ae:	f002 fce7 	bl	5a80 <vPortExitCritical>
}
    30b2:	3710      	adds	r7, #16
    30b4:	46bd      	mov	sp, r7
    30b6:	bd80      	pop	{r7, pc}

000030b8 <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30be:	2300      	movs	r3, #0
    30c0:	607b      	str	r3, [r7, #4]
    30c2:	e033      	b.n	312c <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    30c4:	2001      	movs	r0, #1
    30c6:	2100      	movs	r1, #0
    30c8:	2203      	movs	r2, #3
    30ca:	f000 ff87 	bl	3fdc <xQueueGenericCreate>
    30ce:	4601      	mov	r1, r0
    30d0:	f240 23e0 	movw	r3, #736	; 0x2e0
    30d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d8:	687a      	ldr	r2, [r7, #4]
    30da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    30de:	f240 23e0 	movw	r3, #736	; 0x2e0
    30e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e6:	687a      	ldr	r2, [r7, #4]
    30e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30ec:	2b00      	cmp	r3, #0
    30ee:	d00c      	beq.n	310a <vSemaphoreInitialise+0x52>
    30f0:	f240 23e0 	movw	r3, #736	; 0x2e0
    30f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30f8:	687a      	ldr	r2, [r7, #4]
    30fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30fe:	4618      	mov	r0, r3
    3100:	2100      	movs	r1, #0
    3102:	2200      	movs	r2, #0
    3104:	2300      	movs	r3, #0
    3106:	f000 fff7 	bl	40f8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    310a:	f240 23e0 	movw	r3, #736	; 0x2e0
    310e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3112:	687a      	ldr	r2, [r7, #4]
    3114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3118:	4618      	mov	r0, r3
    311a:	2100      	movs	r1, #0
    311c:	f04f 32ff 	mov.w	r2, #4294967295
    3120:	2300      	movs	r3, #0
    3122:	f001 f8af 	bl	4284 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	3301      	adds	r3, #1
    312a:	607b      	str	r3, [r7, #4]
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	2b03      	cmp	r3, #3
    3130:	ddc8      	ble.n	30c4 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3132:	3708      	adds	r7, #8
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}

00003138 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    3138:	b480      	push	{r7}
    313a:	b085      	sub	sp, #20
    313c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    313e:	2300      	movs	r3, #0
    3140:	60fb      	str	r3, [r7, #12]
    3142:	e061      	b.n	3208 <vParameterInitialise+0xd0>
    {
        pvParameters[i].xMyFlag = i;
    3144:	f240 1330 	movw	r3, #304	; 0x130
    3148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    314c:	68fa      	ldr	r2, [r7, #12]
    314e:	216c      	movs	r1, #108	; 0x6c
    3150:	fb01 f202 	mul.w	r2, r1, r2
    3154:	4413      	add	r3, r2
    3156:	68fa      	ldr	r2, [r7, #12]
    3158:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    315a:	f240 1330 	movw	r3, #304	; 0x130
    315e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3162:	68fa      	ldr	r2, [r7, #12]
    3164:	216c      	movs	r1, #108	; 0x6c
    3166:	fb01 f202 	mul.w	r2, r1, r2
    316a:	4413      	add	r3, r2
    316c:	3304      	adds	r3, #4
    316e:	2200      	movs	r2, #0
    3170:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3172:	f240 1330 	movw	r3, #304	; 0x130
    3176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    317a:	68fa      	ldr	r2, [r7, #12]
    317c:	216c      	movs	r1, #108	; 0x6c
    317e:	fb01 f202 	mul.w	r2, r1, r2
    3182:	4413      	add	r3, r2
    3184:	3308      	adds	r3, #8
    3186:	2200      	movs	r2, #0
    3188:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    318a:	f240 3304 	movw	r3, #772	; 0x304
    318e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3192:	68fa      	ldr	r2, [r7, #12]
    3194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3198:	f240 1330 	movw	r3, #304	; 0x130
    319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a0:	68f9      	ldr	r1, [r7, #12]
    31a2:	206c      	movs	r0, #108	; 0x6c
    31a4:	fb00 f101 	mul.w	r1, r0, r1
    31a8:	440b      	add	r3, r1
    31aa:	335c      	adds	r3, #92	; 0x5c
    31ac:	601a      	str	r2, [r3, #0]
        //pvParameters[i].xFp = xServantTable[i];
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    31ae:	f240 3314 	movw	r3, #788	; 0x314
    31b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b6:	68fa      	ldr	r2, [r7, #12]
    31b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31bc:	f240 1330 	movw	r3, #304	; 0x130
    31c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31c4:	68f9      	ldr	r1, [r7, #12]
    31c6:	206c      	movs	r0, #108	; 0x6c
    31c8:	fb00 f101 	mul.w	r1, r0, r1
    31cc:	440b      	add	r3, r1
    31ce:	3368      	adds	r3, #104	; 0x68
    31d0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    31d2:	f240 3314 	movw	r3, #788	; 0x314
    31d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31da:	68fa      	ldr	r2, [r7, #12]
    31dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31e0:	f240 3300 	movw	r3, #768	; 0x300
    31e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31ec:	f240 1330 	movw	r3, #304	; 0x130
    31f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31f4:	68f9      	ldr	r1, [r7, #12]
    31f6:	206c      	movs	r0, #108	; 0x6c
    31f8:	fb00 f101 	mul.w	r1, r0, r1
    31fc:	440b      	add	r3, r1
    31fe:	3364      	adds	r3, #100	; 0x64
    3200:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3202:	68fb      	ldr	r3, [r7, #12]
    3204:	3301      	adds	r3, #1
    3206:	60fb      	str	r3, [r7, #12]
    3208:	68fb      	ldr	r3, [r7, #12]
    320a:	2b03      	cmp	r3, #3
    320c:	dd9a      	ble.n	3144 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    320e:	2300      	movs	r3, #0
    3210:	60fb      	str	r3, [r7, #12]
    3212:	e080      	b.n	3316 <vParameterInitialise+0x1de>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3214:	f240 3224 	movw	r2, #804	; 0x324
    3218:	f2c2 0200 	movt	r2, #8192	; 0x2000
    321c:	68f9      	ldr	r1, [r7, #12]
    321e:	460b      	mov	r3, r1
    3220:	005b      	lsls	r3, r3, #1
    3222:	440b      	add	r3, r1
    3224:	009b      	lsls	r3, r3, #2
    3226:	4413      	add	r3, r2
    3228:	3304      	adds	r3, #4
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    322e:	f240 3224 	movw	r2, #804	; 0x324
    3232:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3236:	68f9      	ldr	r1, [r7, #12]
    3238:	460b      	mov	r3, r1
    323a:	005b      	lsls	r3, r3, #1
    323c:	440b      	add	r3, r1
    323e:	009b      	lsls	r3, r3, #2
    3240:	4413      	add	r3, r2
    3242:	3308      	adds	r3, #8
    3244:	681b      	ldr	r3, [r3, #0]
    3246:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3248:	f240 1330 	movw	r3, #304	; 0x130
    324c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3250:	68ba      	ldr	r2, [r7, #8]
    3252:	216c      	movs	r1, #108	; 0x6c
    3254:	fb01 f202 	mul.w	r2, r1, r2
    3258:	4413      	add	r3, r2
    325a:	3308      	adds	r3, #8
    325c:	6818      	ldr	r0, [r3, #0]
    325e:	f240 1230 	movw	r2, #304	; 0x130
    3262:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3266:	68b9      	ldr	r1, [r7, #8]
    3268:	460b      	mov	r3, r1
    326a:	005b      	lsls	r3, r3, #1
    326c:	440b      	add	r3, r1
    326e:	00d9      	lsls	r1, r3, #3
    3270:	440b      	add	r3, r1
    3272:	4403      	add	r3, r0
    3274:	330c      	adds	r3, #12
    3276:	009b      	lsls	r3, r3, #2
    3278:	4413      	add	r3, r2
    327a:	687a      	ldr	r2, [r7, #4]
    327c:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    327e:	f240 1330 	movw	r3, #304	; 0x130
    3282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3286:	68ba      	ldr	r2, [r7, #8]
    3288:	216c      	movs	r1, #108	; 0x6c
    328a:	fb01 f202 	mul.w	r2, r1, r2
    328e:	4413      	add	r3, r2
    3290:	3308      	adds	r3, #8
    3292:	681b      	ldr	r3, [r3, #0]
    3294:	1c5a      	adds	r2, r3, #1
    3296:	f240 1330 	movw	r3, #304	; 0x130
    329a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    329e:	68b9      	ldr	r1, [r7, #8]
    32a0:	206c      	movs	r0, #108	; 0x6c
    32a2:	fb00 f101 	mul.w	r1, r0, r1
    32a6:	440b      	add	r3, r1
    32a8:	3308      	adds	r3, #8
    32aa:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    32ac:	f240 1330 	movw	r3, #304	; 0x130
    32b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b4:	687a      	ldr	r2, [r7, #4]
    32b6:	216c      	movs	r1, #108	; 0x6c
    32b8:	fb01 f202 	mul.w	r2, r1, r2
    32bc:	4413      	add	r3, r2
    32be:	3304      	adds	r3, #4
    32c0:	6818      	ldr	r0, [r3, #0]
    32c2:	f240 1230 	movw	r2, #304	; 0x130
    32c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32ca:	6879      	ldr	r1, [r7, #4]
    32cc:	460b      	mov	r3, r1
    32ce:	005b      	lsls	r3, r3, #1
    32d0:	440b      	add	r3, r1
    32d2:	00d9      	lsls	r1, r3, #3
    32d4:	440b      	add	r3, r1
    32d6:	4403      	add	r3, r0
    32d8:	3302      	adds	r3, #2
    32da:	009b      	lsls	r3, r3, #2
    32dc:	4413      	add	r3, r2
    32de:	68ba      	ldr	r2, [r7, #8]
    32e0:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    32e2:	f240 1330 	movw	r3, #304	; 0x130
    32e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ea:	687a      	ldr	r2, [r7, #4]
    32ec:	216c      	movs	r1, #108	; 0x6c
    32ee:	fb01 f202 	mul.w	r2, r1, r2
    32f2:	4413      	add	r3, r2
    32f4:	3304      	adds	r3, #4
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	1c5a      	adds	r2, r3, #1
    32fa:	f240 1330 	movw	r3, #304	; 0x130
    32fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3302:	6879      	ldr	r1, [r7, #4]
    3304:	206c      	movs	r0, #108	; 0x6c
    3306:	fb00 f101 	mul.w	r1, r0, r1
    330a:	440b      	add	r3, r1
    330c:	3304      	adds	r3, #4
    330e:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3310:	68fb      	ldr	r3, [r7, #12]
    3312:	3301      	adds	r3, #1
    3314:	60fb      	str	r3, [r7, #12]
    3316:	f240 3324 	movw	r3, #804	; 0x324
    331a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331e:	681a      	ldr	r2, [r3, #0]
    3320:	68fb      	ldr	r3, [r7, #12]
    3322:	429a      	cmp	r2, r3
    3324:	f73f af76 	bgt.w	3214 <vParameterInitialise+0xdc>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3328:	3714      	adds	r7, #20
    332a:	46bd      	mov	sp, r7
    332c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3330:	4770      	bx	lr
    3332:	bf00      	nop

00003334 <vTaskDelayLET>:

void vTaskDelayLET()
{
    3334:	b580      	push	{r7, lr}
    3336:	b084      	sub	sp, #16
    3338:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    333a:	f002 fa23 	bl	5784 <xTaskGetCurrentTaskHandle>
    333e:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3340:	68b8      	ldr	r0, [r7, #8]
    3342:	f002 fad5 	bl	58f0 <xTaskGetxStartTime>
    3346:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3348:	68b8      	ldr	r0, [r7, #8]
    334a:	f002 fadd 	bl	5908 <xTaskGetxLet>
    334e:	4602      	mov	r2, r0
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	4413      	add	r3, r2
    3354:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    3356:	f001 fe49 	bl	4fec <xTaskGetTickCount>
    335a:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    335c:	e002      	b.n	3364 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    335e:	f001 fe45 	bl	4fec <xTaskGetTickCount>
    3362:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    3364:	68fa      	ldr	r2, [r7, #12]
    3366:	683b      	ldr	r3, [r7, #0]
    3368:	429a      	cmp	r2, r3
    336a:	d3f8      	bcc.n	335e <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    336c:	3710      	adds	r7, #16
    336e:	46bd      	mov	sp, r7
    3370:	bd80      	pop	{r7, pc}
    3372:	bf00      	nop

00003374 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    3374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3378:	b088      	sub	sp, #32
    337a:	af00      	add	r7, sp, #0
    337c:	6078      	str	r0, [r7, #4]
    337e:	6039      	str	r1, [r7, #0]
    3380:	4669      	mov	r1, sp
    3382:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3384:	6879      	ldr	r1, [r7, #4]
    3386:	6849      	ldr	r1, [r1, #4]
    3388:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    338a:	69be      	ldr	r6, [r7, #24]
    338c:	1e71      	subs	r1, r6, #1
    338e:	6179      	str	r1, [r7, #20]
    3390:	4631      	mov	r1, r6
    3392:	4608      	mov	r0, r1
    3394:	f04f 0100 	mov.w	r1, #0
    3398:	014d      	lsls	r5, r1, #5
    339a:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    339e:	0144      	lsls	r4, r0, #5
    33a0:	4631      	mov	r1, r6
    33a2:	4608      	mov	r0, r1
    33a4:	f04f 0100 	mov.w	r1, #0
    33a8:	014b      	lsls	r3, r1, #5
    33aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33ae:	0142      	lsls	r2, r0, #5
    33b0:	4633      	mov	r3, r6
    33b2:	009b      	lsls	r3, r3, #2
    33b4:	3303      	adds	r3, #3
    33b6:	3307      	adds	r3, #7
    33b8:	08db      	lsrs	r3, r3, #3
    33ba:	00db      	lsls	r3, r3, #3
    33bc:	ebad 0d03 	sub.w	sp, sp, r3
    33c0:	466b      	mov	r3, sp
    33c2:	3303      	adds	r3, #3
    33c4:	089b      	lsrs	r3, r3, #2
    33c6:	009b      	lsls	r3, r3, #2
    33c8:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	681b      	ldr	r3, [r3, #0]
    33ce:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    33d0:	f240 23e0 	movw	r3, #736	; 0x2e0
    33d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d8:	68fa      	ldr	r2, [r7, #12]
    33da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33de:	4618      	mov	r0, r3
    33e0:	2100      	movs	r1, #0
    33e2:	f04f 32ff 	mov.w	r2, #4294967295
    33e6:	2300      	movs	r3, #0
    33e8:	f000 ff4c 	bl	4284 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    33ec:	f001 fdfe 	bl	4fec <xTaskGetTickCount>
    33f0:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    33f2:	f240 23f0 	movw	r3, #752	; 0x2f0
    33f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fa:	68fa      	ldr	r2, [r7, #12]
    33fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3400:	4618      	mov	r0, r3
    3402:	68b9      	ldr	r1, [r7, #8]
    3404:	f002 fa8c 	bl	5920 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3408:	2300      	movs	r3, #0
    340a:	61fb      	str	r3, [r7, #28]
    340c:	e024      	b.n	3458 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    340e:	687a      	ldr	r2, [r7, #4]
    3410:	69fb      	ldr	r3, [r7, #28]
    3412:	3302      	adds	r3, #2
    3414:	009b      	lsls	r3, r3, #2
    3416:	4413      	add	r3, r2
    3418:	6859      	ldr	r1, [r3, #4]
    341a:	693b      	ldr	r3, [r7, #16]
    341c:	69fa      	ldr	r2, [r7, #28]
    341e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    3422:	69fb      	ldr	r3, [r7, #28]
    3424:	009b      	lsls	r3, r3, #2
    3426:	683a      	ldr	r2, [r7, #0]
    3428:	18d1      	adds	r1, r2, r3
    342a:	693b      	ldr	r3, [r7, #16]
    342c:	69fa      	ldr	r2, [r7, #28]
    342e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3432:	f240 23f0 	movw	r3, #752	; 0x2f0
    3436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    343a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    343e:	f240 132c 	movw	r3, #300	; 0x12c
    3442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	4608      	mov	r0, r1
    344a:	4611      	mov	r1, r2
    344c:	461a      	mov	r2, r3
    344e:	f7ff fdb9 	bl	2fc4 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    3452:	69fb      	ldr	r3, [r7, #28]
    3454:	3301      	adds	r3, #1
    3456:	61fb      	str	r3, [r7, #28]
    3458:	69fa      	ldr	r2, [r7, #28]
    345a:	69bb      	ldr	r3, [r7, #24]
    345c:	429a      	cmp	r2, r3
    345e:	dbd6      	blt.n	340e <vEventReceiveAll+0x9a>
    3460:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    3462:	3720      	adds	r7, #32
    3464:	46bd      	mov	sp, r7
    3466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    346a:	bf00      	nop

0000346c <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    346c:	b580      	push	{r7, lr}
    346e:	b084      	sub	sp, #16
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
    3474:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	685b      	ldr	r3, [r3, #4]
    347a:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    347c:	2300      	movs	r3, #0
    347e:	60fb      	str	r3, [r7, #12]
    3480:	e00a      	b.n	3498 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    3482:	68fb      	ldr	r3, [r7, #12]
    3484:	009b      	lsls	r3, r3, #2
    3486:	683a      	ldr	r2, [r7, #0]
    3488:	4413      	add	r3, r2
    348a:	681b      	ldr	r3, [r3, #0]
    348c:	4618      	mov	r0, r3
    348e:	f7ff fdfb 	bl	3088 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    3492:	68fb      	ldr	r3, [r7, #12]
    3494:	3301      	adds	r3, #1
    3496:	60fb      	str	r3, [r7, #12]
    3498:	68fa      	ldr	r2, [r7, #12]
    349a:	68bb      	ldr	r3, [r7, #8]
    349c:	429a      	cmp	r2, r3
    349e:	dbf0      	blt.n	3482 <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    34a0:	3710      	adds	r7, #16
    34a2:	46bd      	mov	sp, r7
    34a4:	bd80      	pop	{r7, pc}
    34a6:	bf00      	nop

000034a8 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    34a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34ac:	b08a      	sub	sp, #40	; 0x28
    34ae:	af02      	add	r7, sp, #8
    34b0:	6078      	str	r0, [r7, #4]
    34b2:	6039      	str	r1, [r7, #0]
    34b4:	4669      	mov	r1, sp
    34b6:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    34b8:	6879      	ldr	r1, [r7, #4]
    34ba:	6889      	ldr	r1, [r1, #8]
    34bc:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    34be:	6879      	ldr	r1, [r7, #4]
    34c0:	6809      	ldr	r1, [r1, #0]
    34c2:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    34c4:	6879      	ldr	r1, [r7, #4]
    34c6:	6e49      	ldr	r1, [r1, #100]	; 0x64
    34c8:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    34ca:	69be      	ldr	r6, [r7, #24]
    34cc:	1e71      	subs	r1, r6, #1
    34ce:	60f9      	str	r1, [r7, #12]
    34d0:	4631      	mov	r1, r6
    34d2:	4608      	mov	r0, r1
    34d4:	f04f 0100 	mov.w	r1, #0
    34d8:	014d      	lsls	r5, r1, #5
    34da:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    34de:	0144      	lsls	r4, r0, #5
    34e0:	4631      	mov	r1, r6
    34e2:	4608      	mov	r0, r1
    34e4:	f04f 0100 	mov.w	r1, #0
    34e8:	014b      	lsls	r3, r1, #5
    34ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    34ee:	0142      	lsls	r2, r0, #5
    34f0:	4633      	mov	r3, r6
    34f2:	009b      	lsls	r3, r3, #2
    34f4:	3303      	adds	r3, #3
    34f6:	3307      	adds	r3, #7
    34f8:	08db      	lsrs	r3, r3, #3
    34fa:	00db      	lsls	r3, r3, #3
    34fc:	ebad 0d03 	sub.w	sp, sp, r3
    3500:	ab02      	add	r3, sp, #8
    3502:	3303      	adds	r3, #3
    3504:	089b      	lsrs	r3, r3, #2
    3506:	009b      	lsls	r3, r3, #2
    3508:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    350a:	2300      	movs	r3, #0
    350c:	61fb      	str	r3, [r7, #28]
    350e:	e033      	b.n	3578 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3510:	687a      	ldr	r2, [r7, #4]
    3512:	69fb      	ldr	r3, [r7, #28]
    3514:	330c      	adds	r3, #12
    3516:	009b      	lsls	r3, r3, #2
    3518:	4413      	add	r3, r2
    351a:	6859      	ldr	r1, [r3, #4]
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	69fa      	ldr	r2, [r7, #28]
    3520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3524:	68bb      	ldr	r3, [r7, #8]
    3526:	69fa      	ldr	r2, [r7, #28]
    3528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    352c:	697b      	ldr	r3, [r7, #20]
    352e:	429a      	cmp	r2, r3
    3530:	dc06      	bgt.n	3540 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    3532:	69fb      	ldr	r3, [r7, #28]
    3534:	011b      	lsls	r3, r3, #4
    3536:	683a      	ldr	r2, [r7, #0]
    3538:	4413      	add	r3, r2
    353a:	2201      	movs	r2, #1
    353c:	609a      	str	r2, [r3, #8]
    353e:	e005      	b.n	354c <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3540:	69fb      	ldr	r3, [r7, #28]
    3542:	011b      	lsls	r3, r3, #4
    3544:	683a      	ldr	r2, [r7, #0]
    3546:	4413      	add	r3, r2
    3548:	2200      	movs	r2, #0
    354a:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    354c:	68bb      	ldr	r3, [r7, #8]
    354e:	69fa      	ldr	r2, [r7, #28]
    3550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3554:	f240 23f0 	movw	r3, #752	; 0x2f0
    3558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    355c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3560:	69fb      	ldr	r3, [r7, #28]
    3562:	011b      	lsls	r3, r3, #4
    3564:	683a      	ldr	r2, [r7, #0]
    3566:	4413      	add	r3, r2
    3568:	68da      	ldr	r2, [r3, #12]
    356a:	9200      	str	r2, [sp, #0]
    356c:	cb0e      	ldmia	r3, {r1, r2, r3}
    356e:	f7ff fc31 	bl	2dd4 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    3572:	69fb      	ldr	r3, [r7, #28]
    3574:	3301      	adds	r3, #1
    3576:	61fb      	str	r3, [r7, #28]
    3578:	69fa      	ldr	r2, [r7, #28]
    357a:	69bb      	ldr	r3, [r7, #24]
    357c:	429a      	cmp	r2, r3
    357e:	dbc7      	blt.n	3510 <vEventCreateAll+0x68>
    3580:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    3582:	3720      	adds	r7, #32
    3584:	46bd      	mov	sp, r7
    3586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    358a:	bf00      	nop

0000358c <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3590:	b095      	sub	sp, #84	; 0x54
    3592:	af00      	add	r7, sp, #0
    3594:	60f8      	str	r0, [r7, #12]
    3596:	466b      	mov	r3, sp
    3598:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    359a:	2301      	movs	r3, #1
    359c:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    359e:	68fb      	ldr	r3, [r7, #12]
    35a0:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    35a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35a4:	689b      	ldr	r3, [r3, #8]
    35a6:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    35a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35aa:	681b      	ldr	r3, [r3, #0]
    35ac:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    35b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    35b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    35b8:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    35ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    35be:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    35c0:	2301      	movs	r3, #1
    35c2:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    35c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    35c8:	fb02 f303 	mul.w	r3, r2, r3
    35cc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35ce:	f240 23f0 	movw	r3, #752	; 0x2f0
    35d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35dc:	4618      	mov	r0, r3
    35de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    35e0:	f002 f9ac 	bl	593c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    35e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    35e6:	1e4b      	subs	r3, r1, #1
    35e8:	623b      	str	r3, [r7, #32]
    35ea:	460b      	mov	r3, r1
    35ec:	461a      	mov	r2, r3
    35ee:	f04f 0300 	mov.w	r3, #0
    35f2:	0158      	lsls	r0, r3, #5
    35f4:	6078      	str	r0, [r7, #4]
    35f6:	6878      	ldr	r0, [r7, #4]
    35f8:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    35fc:	6078      	str	r0, [r7, #4]
    35fe:	0150      	lsls	r0, r2, #5
    3600:	460b      	mov	r3, r1
    3602:	461a      	mov	r2, r3
    3604:	f04f 0300 	mov.w	r3, #0
    3608:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    360c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3610:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3614:	460b      	mov	r3, r1
    3616:	009b      	lsls	r3, r3, #2
    3618:	3303      	adds	r3, #3
    361a:	3307      	adds	r3, #7
    361c:	08db      	lsrs	r3, r3, #3
    361e:	00db      	lsls	r3, r3, #3
    3620:	ebad 0d03 	sub.w	sp, sp, r3
    3624:	466b      	mov	r3, sp
    3626:	3303      	adds	r3, #3
    3628:	089b      	lsrs	r3, r3, #2
    362a:	009b      	lsls	r3, r3, #2
    362c:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    362e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3630:	1e4b      	subs	r3, r1, #1
    3632:	61bb      	str	r3, [r7, #24]
    3634:	460b      	mov	r3, r1
    3636:	461a      	mov	r2, r3
    3638:	f04f 0300 	mov.w	r3, #0
    363c:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3640:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3644:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3648:	460b      	mov	r3, r1
    364a:	461a      	mov	r2, r3
    364c:	f04f 0300 	mov.w	r3, #0
    3650:	01dd      	lsls	r5, r3, #7
    3652:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    3656:	01d4      	lsls	r4, r2, #7
    3658:	460b      	mov	r3, r1
    365a:	011b      	lsls	r3, r3, #4
    365c:	3303      	adds	r3, #3
    365e:	3307      	adds	r3, #7
    3660:	08db      	lsrs	r3, r3, #3
    3662:	00db      	lsls	r3, r3, #3
    3664:	ebad 0d03 	sub.w	sp, sp, r3
    3668:	466b      	mov	r3, sp
    366a:	3303      	adds	r3, #3
    366c:	089b      	lsrs	r3, r3, #2
    366e:	009b      	lsls	r3, r3, #2
    3670:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    3672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3674:	2b01      	cmp	r3, #1
    3676:	d127      	bne.n	36c8 <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    3678:	f240 23e0 	movw	r3, #736	; 0x2e0
    367c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3686:	4618      	mov	r0, r3
    3688:	2100      	movs	r1, #0
    368a:	f04f 32ff 	mov.w	r2, #4294967295
    368e:	2300      	movs	r3, #0
    3690:	f000 fdf8 	bl	4284 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    3694:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3696:	f002 fc8d 	bl	5fb4 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    369a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    369c:	f002 fc8a 	bl	5fb4 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    36a0:	f001 fca4 	bl	4fec <xTaskGetTickCount>
    36a4:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    36a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36a8:	f002 fc84 	bl	5fb4 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36ac:	f240 23f0 	movw	r3, #752	; 0x2f0
    36b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36ba:	4618      	mov	r0, r3
    36bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    36be:	f002 f92f 	bl	5920 <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    36c2:	2300      	movs	r3, #0
    36c4:	647b      	str	r3, [r7, #68]	; 0x44
    36c6:	e020      	b.n	370a <vSensor+0x17e>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    36c8:	69fb      	ldr	r3, [r7, #28]
    36ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    36cc:	4619      	mov	r1, r3
    36ce:	f7ff fe51 	bl	3374 <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    36d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    36d4:	f002 fc6e 	bl	5fb4 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    36d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36da:	f002 fc6b 	bl	5fb4 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    36de:	f001 fc85 	bl	4fec <xTaskGetTickCount>
    36e2:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    36e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36e6:	f002 fc65 	bl	5fb4 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36ea:	f240 23f0 	movw	r3, #752	; 0x2f0
    36ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36f8:	4618      	mov	r0, r3
    36fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    36fc:	f002 f910 	bl	5920 <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3700:	69fb      	ldr	r3, [r7, #28]
    3702:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3704:	4619      	mov	r1, r3
    3706:	f7ff feb1 	bl	346c <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    370c:	3301      	adds	r3, #1
    370e:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3712:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3714:	fb02 f303 	mul.w	r3, r2, r3
    3718:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    371a:	2300      	movs	r3, #0
    371c:	64bb      	str	r3, [r7, #72]	; 0x48
    371e:	e011      	b.n	3744 <vSensor+0x1b8>
        {
            xDatas[i].xNextPeriod = deadline;
    3720:	697a      	ldr	r2, [r7, #20]
    3722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3724:	011b      	lsls	r3, r3, #4
    3726:	4413      	add	r3, r2
    3728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    372a:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    372c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3730:	441a      	add	r2, r3
    3732:	6979      	ldr	r1, [r7, #20]
    3734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3736:	011b      	lsls	r3, r3, #4
    3738:	440b      	add	r3, r1
    373a:	3304      	adds	r3, #4
    373c:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3740:	3301      	adds	r3, #1
    3742:	64bb      	str	r3, [r7, #72]	; 0x48
    3744:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3748:	429a      	cmp	r2, r3
    374a:	dbe9      	blt.n	3720 <vSensor+0x194>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
            //xDatas[i].xTime = deadline -xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    374c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3750:	1ad2      	subs	r2, r2, r3
    3752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3754:	4413      	add	r3, r2
    3756:	461a      	mov	r2, r3
    3758:	f240 1328 	movw	r3, #296	; 0x128
    375c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3760:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3762:	697b      	ldr	r3, [r7, #20]
    3764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3766:	4619      	mov	r1, r3
    3768:	f7ff fe9e 	bl	34a8 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    376c:	697b      	ldr	r3, [r7, #20]
    376e:	681a      	ldr	r2, [r3, #0]
    3770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3772:	429a      	cmp	r2, r3
    3774:	d20a      	bcs.n	378c <vSensor+0x200>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3776:	697b      	ldr	r3, [r7, #20]
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	4618      	mov	r0, r3
    377c:	f002 fc1a 	bl	5fb4 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    3780:	f246 40c4 	movw	r0, #25796	; 0x64c4
    3784:	f2c0 0000 	movt	r0, #0
    3788:	f002 fbfa 	bl	5f80 <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    378c:	f001 fc2e 	bl	4fec <xTaskGetTickCount>
    3790:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    3792:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3794:	f002 fc0e 	bl	5fb4 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    3798:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    379a:	f002 fc0b 	bl	5fb4 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37a0:	f103 020a 	add.w	r2, r3, #10
    37a4:	4613      	mov	r3, r2
    37a6:	005b      	lsls	r3, r3, #1
    37a8:	4413      	add	r3, r2
    37aa:	4618      	mov	r0, r3
    37ac:	f002 fc02 	bl	5fb4 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    37b0:	f001 fc1c 	bl	4fec <xTaskGetTickCount>
    37b4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    37b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    37b8:	f244 2340 	movw	r3, #16960	; 0x4240
    37bc:	f2c0 030f 	movt	r3, #15
    37c0:	429a      	cmp	r2, r3
    37c2:	d900      	bls.n	37c6 <vSensor+0x23a>
        {
            break;
    37c4:	e00b      	b.n	37de <vSensor+0x252>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    37c6:	f240 23e0 	movw	r3, #736	; 0x2e0
    37ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ce:	68db      	ldr	r3, [r3, #12]
    37d0:	4618      	mov	r0, r3
    37d2:	2100      	movs	r1, #0
    37d4:	2200      	movs	r2, #0
    37d6:	2300      	movs	r3, #0
    37d8:	f000 fc8e 	bl	40f8 <xQueueGenericSend>
    }
    37dc:	e749      	b.n	3672 <vSensor+0xe6>
    37de:	46b5      	mov	sp, r6
}
    37e0:	3754      	adds	r7, #84	; 0x54
    37e2:	46bd      	mov	sp, r7
    37e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000037e8 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    37e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37ec:	b097      	sub	sp, #92	; 0x5c
    37ee:	af00      	add	r7, sp, #0
    37f0:	61f8      	str	r0, [r7, #28]
    37f2:	4669      	mov	r1, sp
    37f4:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    37f6:	69f9      	ldr	r1, [r7, #28]
    37f8:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    37fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
    37fc:	6849      	ldr	r1, [r1, #4]
    37fe:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3800:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3802:	6889      	ldr	r1, [r1, #8]
    3804:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3806:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3808:	6809      	ldr	r1, [r1, #0]
    380a:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    380c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    380e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3810:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3812:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3814:	6e09      	ldr	r1, [r1, #96]	; 0x60
    3816:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3818:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    381a:	1e71      	subs	r1, r6, #1
    381c:	63b9      	str	r1, [r7, #56]	; 0x38
    381e:	4631      	mov	r1, r6
    3820:	4608      	mov	r0, r1
    3822:	f04f 0100 	mov.w	r1, #0
    3826:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    382a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    382e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3832:	4631      	mov	r1, r6
    3834:	4608      	mov	r0, r1
    3836:	f04f 0100 	mov.w	r1, #0
    383a:	ea4f 1941 	mov.w	r9, r1, lsl #5
    383e:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3842:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3846:	4631      	mov	r1, r6
    3848:	0089      	lsls	r1, r1, #2
    384a:	3103      	adds	r1, #3
    384c:	3107      	adds	r1, #7
    384e:	08c9      	lsrs	r1, r1, #3
    3850:	00c9      	lsls	r1, r1, #3
    3852:	ebad 0d01 	sub.w	sp, sp, r1
    3856:	4669      	mov	r1, sp
    3858:	3103      	adds	r1, #3
    385a:	0889      	lsrs	r1, r1, #2
    385c:	0089      	lsls	r1, r1, #2
    385e:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3860:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    3862:	1e71      	subs	r1, r6, #1
    3864:	6339      	str	r1, [r7, #48]	; 0x30
    3866:	4631      	mov	r1, r6
    3868:	4608      	mov	r0, r1
    386a:	f04f 0100 	mov.w	r1, #0
    386e:	01cd      	lsls	r5, r1, #7
    3870:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3874:	01c4      	lsls	r4, r0, #7
    3876:	4631      	mov	r1, r6
    3878:	4608      	mov	r0, r1
    387a:	f04f 0100 	mov.w	r1, #0
    387e:	01cb      	lsls	r3, r1, #7
    3880:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3884:	01c2      	lsls	r2, r0, #7
    3886:	4633      	mov	r3, r6
    3888:	011b      	lsls	r3, r3, #4
    388a:	3303      	adds	r3, #3
    388c:	3307      	adds	r3, #7
    388e:	08db      	lsrs	r3, r3, #3
    3890:	00db      	lsls	r3, r3, #3
    3892:	ebad 0d03 	sub.w	sp, sp, r3
    3896:	466b      	mov	r3, sp
    3898:	3303      	adds	r3, #3
    389a:	089b      	lsrs	r3, r3, #2
    389c:	009b      	lsls	r3, r3, #2
    389e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    38a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    38a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    38a6:	f240 23f0 	movw	r3, #752	; 0x2f0
    38aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    38b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38b4:	4618      	mov	r0, r3
    38b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    38b8:	f002 f840 	bl	593c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    38bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38be:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38c0:	4619      	mov	r1, r3
    38c2:	f7ff fd57 	bl	3374 <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    38c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
    38c8:	f002 fb74 	bl	5fb4 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    38cc:	f001 fba0 	bl	5010 <xTaskGetTickCountFromISR>
    38d0:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    38d2:	f240 23f0 	movw	r3, #752	; 0x2f0
    38d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    38dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38e0:	4618      	mov	r0, r3
    38e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    38e4:	f002 f81c 	bl	5920 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    38e8:	2300      	movs	r3, #0
    38ea:	657b      	str	r3, [r7, #84]	; 0x54
    38ec:	e01e      	b.n	392c <vServant+0x144>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    38ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    38f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    38f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    38fa:	0112      	lsls	r2, r2, #4
    38fc:	188c      	adds	r4, r1, r2
    38fe:	f107 0208 	add.w	r2, r7, #8
    3902:	4610      	mov	r0, r2
    3904:	4619      	mov	r1, r3
    3906:	f7ff f947 	bl	2b98 <xEventGetxData>
    390a:	f107 0308 	add.w	r3, r7, #8
    390e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    3914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3918:	441a      	add	r2, r3
    391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    391e:	011b      	lsls	r3, r3, #4
    3920:	440b      	add	r3, r1
    3922:	3304      	adds	r3, #4
    3924:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3928:	3301      	adds	r3, #1
    392a:	657b      	str	r3, [r7, #84]	; 0x54
    392c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3930:	429a      	cmp	r2, r3
    3932:	dbdc      	blt.n	38ee <vServant+0x106>
            //xDatas[i].xTime = xFutureModelTime + xLet;
            //xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    3934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3936:	681a      	ldr	r2, [r3, #0]
    3938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    393a:	1ad3      	subs	r3, r2, r3
    393c:	4618      	mov	r0, r3
    393e:	f002 fb39 	bl	5fb4 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    3942:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3944:	f002 fb36 	bl	5fb4 <vPrintNumber>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    394a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    394c:	4619      	mov	r1, r3
    394e:	f7ff fd8d 	bl	346c <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    3952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3954:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3956:	4619      	mov	r1, r3
    3958:	f7ff fda6 	bl	34a8 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    395e:	681a      	ldr	r2, [r3, #0]
    3960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3962:	429a      	cmp	r2, r3
    3964:	d20a      	bcs.n	397c <vServant+0x194>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	4618      	mov	r0, r3
    396c:	f002 fb22 	bl	5fb4 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    3970:	f246 40e8 	movw	r0, #25832	; 0x64e8
    3974:	f2c0 0000 	movt	r0, #0
    3978:	f002 fb02 	bl	5f80 <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    397c:	f7ff fcda 	bl	3334 <vTaskDelayLET>
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    3980:	f001 fb34 	bl	4fec <xTaskGetTickCount>
    3984:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    3986:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3988:	f002 fb14 	bl	5fb4 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    398e:	681b      	ldr	r3, [r3, #0]
    3990:	4618      	mov	r0, r3
    3992:	f002 fb0f 	bl	5fb4 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    3996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3998:	f103 020a 	add.w	r2, r3, #10
    399c:	4613      	mov	r3, r2
    399e:	005b      	lsls	r3, r3, #1
    39a0:	4413      	add	r3, r2
    39a2:	4618      	mov	r0, r3
    39a4:	f002 fb06 	bl	5fb4 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    39a8:	f001 fb20 	bl	4fec <xTaskGetTickCount>
    39ac:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    39ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39b0:	f244 2340 	movw	r3, #16960	; 0x4240
    39b4:	f2c0 030f 	movt	r3, #15
    39b8:	429a      	cmp	r2, r3
    39ba:	d900      	bls.n	39be <vServant+0x1d6>
        {
            break;
    39bc:	e00b      	b.n	39d6 <vServant+0x1ee>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    39be:	f240 23e0 	movw	r3, #736	; 0x2e0
    39c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39c6:	68db      	ldr	r3, [r3, #12]
    39c8:	4618      	mov	r0, r3
    39ca:	2100      	movs	r1, #0
    39cc:	2200      	movs	r2, #0
    39ce:	2300      	movs	r3, #0
    39d0:	f000 fb92 	bl	40f8 <xQueueGenericSend>
    }
    39d4:	e772      	b.n	38bc <vServant+0xd4>
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	469d      	mov	sp, r3
}
    39da:	375c      	adds	r7, #92	; 0x5c
    39dc:	46bd      	mov	sp, r7
    39de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39e2:	bf00      	nop

000039e4 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    39e4:	b580      	push	{r7, lr}
    39e6:	b090      	sub	sp, #64	; 0x40
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    39f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    39f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    39fa:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    39fc:	f240 23f0 	movw	r3, #752	; 0x2f0
    3a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a0a:	4618      	mov	r0, r3
    3a0c:	6a39      	ldr	r1, [r7, #32]
    3a0e:	f001 ff95 	bl	593c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3a12:	f240 23e0 	movw	r3, #736	; 0x2e0
    3a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a20:	4618      	mov	r0, r3
    3a22:	2100      	movs	r1, #0
    3a24:	f04f 32ff 	mov.w	r2, #4294967295
    3a28:	2300      	movs	r3, #0
    3a2a:	f000 fc2b 	bl	4284 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    3a2e:	f001 fadd 	bl	4fec <xTaskGetTickCount>
    3a32:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3a34:	f240 23f0 	movw	r3, #752	; 0x2f0
    3a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a42:	4618      	mov	r0, r3
    3a44:	69f9      	ldr	r1, [r7, #28]
    3a46:	f001 ff6b 	bl	5920 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3a4a:	2300      	movs	r3, #0
    3a4c:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3a4e:	e08f      	b.n	3b70 <vR_Servant+0x18c>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3a50:	f107 030c 	add.w	r3, r7, #12
    3a54:	4618      	mov	r0, r3
    3a56:	f240 112c 	movw	r1, #300	; 0x12c
    3a5a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3a5e:	f7ff fa3d 	bl	2edc <xEventListGenericTransit>
    3a62:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == 0 )
    3a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a66:	2b00      	cmp	r3, #0
    3a68:	d100      	bne.n	3a6c <vR_Servant+0x88>
            {
                // not time yet
                break;
    3a6a:	e085      	b.n	3b78 <vR_Servant+0x194>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	68db      	ldr	r3, [r3, #12]
    3a70:	4618      	mov	r0, r3
    3a72:	f7ff f873 	bl	2b5c <xEventGetpxDestination>
    3a76:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3a78:	68fb      	ldr	r3, [r7, #12]
    3a7a:	68db      	ldr	r3, [r3, #12]
    3a7c:	4618      	mov	r0, r3
    3a7e:	f7ff f861 	bl	2b44 <xEventGetpxSource>
    3a82:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3a84:	2301      	movs	r3, #1
    3a86:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a88:	2300      	movs	r3, #0
    3a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a8c:	e068      	b.n	3b60 <vR_Servant+0x17c>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3a8e:	f240 3224 	movw	r2, #804	; 0x324
    3a92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a98:	460b      	mov	r3, r1
    3a9a:	005b      	lsls	r3, r3, #1
    3a9c:	440b      	add	r3, r1
    3a9e:	009b      	lsls	r3, r3, #2
    3aa0:	4413      	add	r3, r2
    3aa2:	3304      	adds	r3, #4
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3aa8:	f240 3224 	movw	r2, #804	; 0x324
    3aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3ab2:	460b      	mov	r3, r1
    3ab4:	005b      	lsls	r3, r3, #1
    3ab6:	440b      	add	r3, r1
    3ab8:	009b      	lsls	r3, r3, #2
    3aba:	4413      	add	r3, r2
    3abc:	3308      	adds	r3, #8
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3ac2:	f240 23f0 	movw	r3, #752	; 0x2f0
    3ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aca:	693a      	ldr	r2, [r7, #16]
    3acc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ad2:	429a      	cmp	r2, r3
    3ad4:	d141      	bne.n	3b5a <vR_Servant+0x176>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3ad6:	f240 23f0 	movw	r3, #752	; 0x2f0
    3ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ade:	697a      	ldr	r2, [r7, #20]
    3ae0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ae4:	69bb      	ldr	r3, [r7, #24]
    3ae6:	429a      	cmp	r2, r3
    3ae8:	d127      	bne.n	3b3a <vR_Servant+0x156>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3aea:	f240 3224 	movw	r2, #804	; 0x324
    3aee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3af4:	460b      	mov	r3, r1
    3af6:	005b      	lsls	r3, r3, #1
    3af8:	440b      	add	r3, r1
    3afa:	009b      	lsls	r3, r3, #2
    3afc:	4413      	add	r3, r2
    3afe:	330c      	adds	r3, #12
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	2b02      	cmp	r3, #2
    3b04:	d10b      	bne.n	3b1e <vR_Servant+0x13a>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3b06:	f246 5010 	movw	r0, #25872	; 0x6510
    3b0a:	f2c0 0000 	movt	r0, #0
    3b0e:	f002 fa37 	bl	5f80 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3b12:	68fb      	ldr	r3, [r7, #12]
    3b14:	68db      	ldr	r3, [r3, #12]
    3b16:	4618      	mov	r0, r3
    3b18:	f7ff fab6 	bl	3088 <vEventGenericDelete>
    3b1c:	e01d      	b.n	3b5a <vR_Servant+0x176>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3b1e:	f240 3224 	movw	r2, #804	; 0x324
    3b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b28:	460b      	mov	r3, r1
    3b2a:	005b      	lsls	r3, r3, #1
    3b2c:	440b      	add	r3, r1
    3b2e:	009b      	lsls	r3, r3, #2
    3b30:	4413      	add	r3, r2
    3b32:	330c      	adds	r3, #12
    3b34:	2202      	movs	r2, #2
    3b36:	601a      	str	r2, [r3, #0]
    3b38:	e00f      	b.n	3b5a <vR_Servant+0x176>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3b3a:	f240 3224 	movw	r2, #804	; 0x324
    3b3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b44:	460b      	mov	r3, r1
    3b46:	005b      	lsls	r3, r3, #1
    3b48:	440b      	add	r3, r1
    3b4a:	009b      	lsls	r3, r3, #2
    3b4c:	4413      	add	r3, r2
    3b4e:	330c      	adds	r3, #12
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	2b01      	cmp	r3, #1
    3b54:	d101      	bne.n	3b5a <vR_Servant+0x176>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3b56:	2300      	movs	r3, #0
    3b58:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b5c:	3301      	adds	r3, #1
    3b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b60:	f240 3324 	movw	r3, #804	; 0x324
    3b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b68:	681a      	ldr	r2, [r3, #0]
    3b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b6c:	429a      	cmp	r2, r3
    3b6e:	dc8e      	bgt.n	3a8e <vR_Servant+0xaa>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b72:	2b00      	cmp	r3, #0
    3b74:	f43f af6c 	beq.w	3a50 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if ( xResult == 0 )
    3b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d041      	beq.n	3c02 <vR_Servant+0x21e>
#endif
        }
        else  // triggered specified servant to execute
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3b7e:	2300      	movs	r3, #0
    3b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b82:	e028      	b.n	3bd6 <vR_Servant+0x1f2>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3b84:	f240 3224 	movw	r2, #804	; 0x324
    3b88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b8e:	460b      	mov	r3, r1
    3b90:	005b      	lsls	r3, r3, #1
    3b92:	440b      	add	r3, r1
    3b94:	009b      	lsls	r3, r3, #2
    3b96:	4413      	add	r3, r2
    3b98:	3308      	adds	r3, #8
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3b9e:	f240 23f0 	movw	r3, #752	; 0x2f0
    3ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ba6:	693a      	ldr	r2, [r7, #16]
    3ba8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bae:	429a      	cmp	r2, r3
    3bb0:	d10e      	bne.n	3bd0 <vR_Servant+0x1ec>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3bb2:	f240 3224 	movw	r2, #804	; 0x324
    3bb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3bbc:	460b      	mov	r3, r1
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	440b      	add	r3, r1
    3bc2:	009b      	lsls	r3, r3, #2
    3bc4:	4413      	add	r3, r2
    3bc6:	330c      	adds	r3, #12
    3bc8:	2201      	movs	r2, #1
    3bca:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3bcc:	693b      	ldr	r3, [r7, #16]
    3bce:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
        }
        else  // triggered specified servant to execute
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bd2:	3301      	adds	r3, #1
    3bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    3bd6:	f240 3324 	movw	r3, #804	; 0x324
    3bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bde:	681a      	ldr	r2, [r3, #0]
    3be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3be2:	429a      	cmp	r2, r3
    3be4:	dcce      	bgt.n	3b84 <vR_Servant+0x1a0>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3be6:	f240 23e0 	movw	r3, #736	; 0x2e0
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3bf4:	4618      	mov	r0, r3
    3bf6:	2100      	movs	r1, #0
    3bf8:	2200      	movs	r2, #0
    3bfa:	2300      	movs	r3, #0
    3bfc:	f000 fa7c 	bl	40f8 <xQueueGenericSend>
        }
    }
    3c00:	e707      	b.n	3a12 <vR_Servant+0x2e>
    3c02:	e706      	b.n	3a12 <vR_Servant+0x2e>

00003c04 <vAppInitialise>:


struct xRelationship xRelations;

void vAppInitialise()
{
    3c04:	b480      	push	{r7}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;

    for( i = 0; i < NUMBEROFTASK; ++ i )
    3c0a:	2300      	movs	r3, #0
    3c0c:	607b      	str	r3, [r7, #4]
    3c0e:	e00b      	b.n	3c28 <vAppInitialise+0x24>
    {
        xPeriodOfTask[i] = 400;
    3c10:	f240 3300 	movw	r3, #768	; 0x300
    3c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c18:	687a      	ldr	r2, [r7, #4]
    3c1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    3c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

void vAppInitialise()
{
    portBASE_TYPE i, j;

    for( i = 0; i < NUMBEROFTASK; ++ i )
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	3301      	adds	r3, #1
    3c26:	607b      	str	r3, [r7, #4]
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	ddf0      	ble.n	3c10 <vAppInitialise+0xc>
    {
        xPeriodOfTask[i] = 400;
    }

    /* init the LET of all servants including R-servant */
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3c2e:	2300      	movs	r3, #0
    3c30:	607b      	str	r3, [r7, #4]
    3c32:	e00a      	b.n	3c4a <vAppInitialise+0x46>
    {
        xLetOfServant[i] = 10;
    3c34:	f240 3304 	movw	r3, #772	; 0x304
    3c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	210a      	movs	r1, #10
    3c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    {
        xPeriodOfTask[i] = 400;
    }

    /* init the LET of all servants including R-servant */
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	3301      	adds	r3, #1
    3c48:	607b      	str	r3, [r7, #4]
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	2b03      	cmp	r3, #3
    3c4e:	ddf1      	ble.n	3c34 <vAppInitialise+0x30>
    {
        xLetOfServant[i] = 10;
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3c50:	2300      	movs	r3, #0
    3c52:	607b      	str	r3, [r7, #4]
    3c54:	e018      	b.n	3c88 <vAppInitialise+0x84>
    {
        for( j = 0; j <= xConcurrents; ++ j )
    3c56:	2300      	movs	r3, #0
    3c58:	603b      	str	r3, [r7, #0]
    3c5a:	e00f      	b.n	3c7c <vAppInitialise+0x78>
        {
            xTaskOfServant[i*(xConcurrents + 1)+j] = i;
    3c5c:	687a      	ldr	r2, [r7, #4]
    3c5e:	4613      	mov	r3, r2
    3c60:	005b      	lsls	r3, r3, #1
    3c62:	441a      	add	r2, r3
    3c64:	683b      	ldr	r3, [r7, #0]
    3c66:	441a      	add	r2, r3
    3c68:	f240 3314 	movw	r3, #788	; 0x314
    3c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c70:	6879      	ldr	r1, [r7, #4]
    3c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 0; j <= xConcurrents; ++ j )
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	3301      	adds	r3, #1
    3c7a:	603b      	str	r3, [r7, #0]
    3c7c:	683b      	ldr	r3, [r7, #0]
    3c7e:	2b02      	cmp	r3, #2
    3c80:	ddec      	ble.n	3c5c <vAppInitialise+0x58>
    {
        xLetOfServant[i] = 10;
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	3301      	adds	r3, #1
    3c86:	607b      	str	r3, [r7, #4]
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	dde3      	ble.n	3c56 <vAppInitialise+0x52>
        {
            xTaskOfServant[i*(xConcurrents + 1)+j] = i;
        }
    }

    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor
    3c8e:	f240 3324 	movw	r3, #804	; 0x324
    3c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c96:	2204      	movs	r2, #4
    3c98:	601a      	str	r2, [r3, #0]

    /* from 0 to NUMBEROFTASK*xConcurrents, relationship from sensor to S-Servant */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3c9a:	2300      	movs	r3, #0
    3c9c:	607b      	str	r3, [r7, #4]
    3c9e:	e046      	b.n	3d2e <vAppInitialise+0x12a>
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3ca0:	2301      	movs	r3, #1
    3ca2:	603b      	str	r3, [r7, #0]
    3ca4:	e03d      	b.n	3d22 <vAppInitialise+0x11e>
        {
            xRelations.xRelation[i*(xConcurrents) + j - 1].xInFlag = i*(xConcurrents + 1);
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	005a      	lsls	r2, r3, #1
    3caa:	683b      	ldr	r3, [r7, #0]
    3cac:	4413      	add	r3, r2
    3cae:	1e59      	subs	r1, r3, #1
    3cb0:	687a      	ldr	r2, [r7, #4]
    3cb2:	4613      	mov	r3, r2
    3cb4:	005b      	lsls	r3, r3, #1
    3cb6:	1898      	adds	r0, r3, r2
    3cb8:	f240 3224 	movw	r2, #804	; 0x324
    3cbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3cc0:	460b      	mov	r3, r1
    3cc2:	005b      	lsls	r3, r3, #1
    3cc4:	440b      	add	r3, r1
    3cc6:	009b      	lsls	r3, r3, #2
    3cc8:	4413      	add	r3, r2
    3cca:	3304      	adds	r3, #4
    3ccc:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1].xOutFlag = i*(xConcurrents + 1) + j;
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	005a      	lsls	r2, r3, #1
    3cd2:	683b      	ldr	r3, [r7, #0]
    3cd4:	4413      	add	r3, r2
    3cd6:	1e59      	subs	r1, r3, #1
    3cd8:	687a      	ldr	r2, [r7, #4]
    3cda:	4613      	mov	r3, r2
    3cdc:	005b      	lsls	r3, r3, #1
    3cde:	441a      	add	r2, r3
    3ce0:	683b      	ldr	r3, [r7, #0]
    3ce2:	18d0      	adds	r0, r2, r3
    3ce4:	f240 3224 	movw	r2, #804	; 0x324
    3ce8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3cec:	460b      	mov	r3, r1
    3cee:	005b      	lsls	r3, r3, #1
    3cf0:	440b      	add	r3, r1
    3cf2:	009b      	lsls	r3, r3, #2
    3cf4:	4413      	add	r3, r2
    3cf6:	3308      	adds	r3, #8
    3cf8:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	005a      	lsls	r2, r3, #1
    3cfe:	683b      	ldr	r3, [r7, #0]
    3d00:	4413      	add	r3, r2
    3d02:	1e59      	subs	r1, r3, #1
    3d04:	f240 3224 	movw	r2, #804	; 0x324
    3d08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d0c:	460b      	mov	r3, r1
    3d0e:	005b      	lsls	r3, r3, #1
    3d10:	440b      	add	r3, r1
    3d12:	009b      	lsls	r3, r3, #2
    3d14:	4413      	add	r3, r2
    3d16:	330c      	adds	r3, #12
    3d18:	2201      	movs	r2, #1
    3d1a:	601a      	str	r2, [r3, #0]
    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor

    /* from 0 to NUMBEROFTASK*xConcurrents, relationship from sensor to S-Servant */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3d1c:	683b      	ldr	r3, [r7, #0]
    3d1e:	3301      	adds	r3, #1
    3d20:	603b      	str	r3, [r7, #0]
    3d22:	683b      	ldr	r3, [r7, #0]
    3d24:	2b02      	cmp	r3, #2
    3d26:	ddbe      	ble.n	3ca6 <vAppInitialise+0xa2>
    }

    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor

    /* from 0 to NUMBEROFTASK*xConcurrents, relationship from sensor to S-Servant */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	3301      	adds	r3, #1
    3d2c:	607b      	str	r3, [r7, #4]
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	2b00      	cmp	r3, #0
    3d32:	ddb5      	ble.n	3ca0 <vAppInitialise+0x9c>
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
        }
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents, relationship from S-Servant to sensor */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3d34:	2300      	movs	r3, #0
    3d36:	607b      	str	r3, [r7, #4]
    3d38:	e046      	b.n	3dc8 <vAppInitialise+0x1c4>
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3d3a:	2301      	movs	r3, #1
    3d3c:	603b      	str	r3, [r7, #0]
    3d3e:	e03d      	b.n	3dbc <vAppInitialise+0x1b8>
        {
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xInFlag = i*(xConcurrents + 1) + j;
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	005a      	lsls	r2, r3, #1
    3d44:	683b      	ldr	r3, [r7, #0]
    3d46:	4413      	add	r3, r2
    3d48:	1c59      	adds	r1, r3, #1
    3d4a:	687a      	ldr	r2, [r7, #4]
    3d4c:	4613      	mov	r3, r2
    3d4e:	005b      	lsls	r3, r3, #1
    3d50:	441a      	add	r2, r3
    3d52:	683b      	ldr	r3, [r7, #0]
    3d54:	18d0      	adds	r0, r2, r3
    3d56:	f240 3224 	movw	r2, #804	; 0x324
    3d5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d5e:	460b      	mov	r3, r1
    3d60:	005b      	lsls	r3, r3, #1
    3d62:	440b      	add	r3, r1
    3d64:	009b      	lsls	r3, r3, #2
    3d66:	4413      	add	r3, r2
    3d68:	3304      	adds	r3, #4
    3d6a:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xOutFlag = i*(xConcurrents + 1) ;
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	005a      	lsls	r2, r3, #1
    3d70:	683b      	ldr	r3, [r7, #0]
    3d72:	4413      	add	r3, r2
    3d74:	1c59      	adds	r1, r3, #1
    3d76:	687a      	ldr	r2, [r7, #4]
    3d78:	4613      	mov	r3, r2
    3d7a:	005b      	lsls	r3, r3, #1
    3d7c:	1898      	adds	r0, r3, r2
    3d7e:	f240 3224 	movw	r2, #804	; 0x324
    3d82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d86:	460b      	mov	r3, r1
    3d88:	005b      	lsls	r3, r3, #1
    3d8a:	440b      	add	r3, r1
    3d8c:	009b      	lsls	r3, r3, #2
    3d8e:	4413      	add	r3, r2
    3d90:	3308      	adds	r3, #8
    3d92:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xFlag = 1;
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	005a      	lsls	r2, r3, #1
    3d98:	683b      	ldr	r3, [r7, #0]
    3d9a:	4413      	add	r3, r2
    3d9c:	1c59      	adds	r1, r3, #1
    3d9e:	f240 3224 	movw	r2, #804	; 0x324
    3da2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3da6:	460b      	mov	r3, r1
    3da8:	005b      	lsls	r3, r3, #1
    3daa:	440b      	add	r3, r1
    3dac:	009b      	lsls	r3, r3, #2
    3dae:	4413      	add	r3, r2
    3db0:	330c      	adds	r3, #12
    3db2:	2201      	movs	r2, #1
    3db4:	601a      	str	r2, [r3, #0]
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents, relationship from S-Servant to sensor */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3db6:	683b      	ldr	r3, [r7, #0]
    3db8:	3301      	adds	r3, #1
    3dba:	603b      	str	r3, [r7, #0]
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	2b02      	cmp	r3, #2
    3dc0:	ddbe      	ble.n	3d40 <vAppInitialise+0x13c>
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
        }
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents, relationship from S-Servant to sensor */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	3301      	adds	r3, #1
    3dc6:	607b      	str	r3, [r7, #4]
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	ddb5      	ble.n	3d3a <vAppInitialise+0x136>
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xInFlag = i*(xConcurrents + 1) + j;
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xOutFlag = i*(xConcurrents + 1) ;
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xFlag = 1;
        }
    }
}
    3dce:	370c      	adds	r7, #12
    3dd0:	46bd      	mov	sp, r7
    3dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd6:	4770      	bx	lr

00003dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	f103 0208 	add.w	r2, r3, #8
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	f04f 32ff 	mov.w	r2, #4294967295
    3df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	f103 0208 	add.w	r2, r3, #8
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	f103 0208 	add.w	r2, r3, #8
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	2200      	movs	r2, #0
    3e0a:	601a      	str	r2, [r3, #0]
}
    3e0c:	370c      	adds	r7, #12
    3e0e:	46bd      	mov	sp, r7
    3e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop

00003e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3e18:	b480      	push	{r7}
    3e1a:	b083      	sub	sp, #12
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	2200      	movs	r2, #0
    3e24:	611a      	str	r2, [r3, #16]
}
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3e30:	b480      	push	{r7}
    3e32:	b085      	sub	sp, #20
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	685b      	ldr	r3, [r3, #4]
    3e3e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3e40:	68fb      	ldr	r3, [r7, #12]
    3e42:	685a      	ldr	r2, [r3, #4]
    3e44:	683b      	ldr	r3, [r7, #0]
    3e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	685a      	ldr	r2, [r3, #4]
    3e4c:	683b      	ldr	r3, [r7, #0]
    3e4e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	685b      	ldr	r3, [r3, #4]
    3e54:	683a      	ldr	r2, [r7, #0]
    3e56:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3e58:	68fb      	ldr	r3, [r7, #12]
    3e5a:	683a      	ldr	r2, [r7, #0]
    3e5c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	683a      	ldr	r2, [r7, #0]
    3e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	687a      	ldr	r2, [r7, #4]
    3e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	1c5a      	adds	r2, r3, #1
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	601a      	str	r2, [r3, #0]
}
    3e74:	3714      	adds	r7, #20
    3e76:	46bd      	mov	sp, r7
    3e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop

00003e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3e80:	b480      	push	{r7}
    3e82:	b085      	sub	sp, #20
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
    3e88:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3e8a:	683b      	ldr	r3, [r7, #0]
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3e90:	68bb      	ldr	r3, [r7, #8]
    3e92:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e96:	d103      	bne.n	3ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	691b      	ldr	r3, [r3, #16]
    3e9c:	60fb      	str	r3, [r7, #12]
    3e9e:	e00c      	b.n	3eba <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	3308      	adds	r3, #8
    3ea4:	60fb      	str	r3, [r7, #12]
    3ea6:	e002      	b.n	3eae <vListInsert+0x2e>
    3ea8:	68fb      	ldr	r3, [r7, #12]
    3eaa:	685b      	ldr	r3, [r3, #4]
    3eac:	60fb      	str	r3, [r7, #12]
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	681a      	ldr	r2, [r3, #0]
    3eb4:	68bb      	ldr	r3, [r7, #8]
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d9f6      	bls.n	3ea8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3eba:	68fb      	ldr	r3, [r7, #12]
    3ebc:	685a      	ldr	r2, [r3, #4]
    3ebe:	683b      	ldr	r3, [r7, #0]
    3ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3ec2:	683b      	ldr	r3, [r7, #0]
    3ec4:	685b      	ldr	r3, [r3, #4]
    3ec6:	683a      	ldr	r2, [r7, #0]
    3ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3eca:	683b      	ldr	r3, [r7, #0]
    3ecc:	68fa      	ldr	r2, [r7, #12]
    3ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3ed0:	68fb      	ldr	r3, [r7, #12]
    3ed2:	683a      	ldr	r2, [r7, #0]
    3ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ed6:	683b      	ldr	r3, [r7, #0]
    3ed8:	687a      	ldr	r2, [r7, #4]
    3eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	1c5a      	adds	r2, r3, #1
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	601a      	str	r2, [r3, #0]
}
    3ee6:	3714      	adds	r7, #20
    3ee8:	46bd      	mov	sp, r7
    3eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eee:	4770      	bx	lr

00003ef0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3ef0:	b480      	push	{r7}
    3ef2:	b085      	sub	sp, #20
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	685b      	ldr	r3, [r3, #4]
    3efc:	687a      	ldr	r2, [r7, #4]
    3efe:	6892      	ldr	r2, [r2, #8]
    3f00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	689b      	ldr	r3, [r3, #8]
    3f06:	687a      	ldr	r2, [r7, #4]
    3f08:	6852      	ldr	r2, [r2, #4]
    3f0a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	691b      	ldr	r3, [r3, #16]
    3f10:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3f12:	68fb      	ldr	r3, [r7, #12]
    3f14:	685a      	ldr	r2, [r3, #4]
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	429a      	cmp	r2, r3
    3f1a:	d103      	bne.n	3f24 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	689a      	ldr	r2, [r3, #8]
    3f20:	68fb      	ldr	r3, [r7, #12]
    3f22:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	2200      	movs	r2, #0
    3f28:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3f2a:	68fb      	ldr	r3, [r7, #12]
    3f2c:	681b      	ldr	r3, [r3, #0]
    3f2e:	1e5a      	subs	r2, r3, #1
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	601a      	str	r2, [r3, #0]
}
    3f34:	3714      	adds	r7, #20
    3f36:	46bd      	mov	sp, r7
    3f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop

00003f40 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b084      	sub	sp, #16
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3f4a:	2301      	movs	r3, #1
    3f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3f4e:	683b      	ldr	r3, [r7, #0]
    3f50:	2b01      	cmp	r3, #1
    3f52:	d00b      	beq.n	3f6c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d001      	beq.n	3f60 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3f5c:	2300      	movs	r3, #0
    3f5e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	691b      	ldr	r3, [r3, #16]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d001      	beq.n	3f6c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3f68:	2300      	movs	r3, #0
    3f6a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3f6c:	68fb      	ldr	r3, [r7, #12]
    3f6e:	2b01      	cmp	r3, #1
    3f70:	d12f      	bne.n	3fd2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681a      	ldr	r2, [r3, #0]
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f7a:	6879      	ldr	r1, [r7, #4]
    3f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3f7e:	fb01 f303 	mul.w	r3, r1, r3
    3f82:	441a      	add	r2, r3
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	2200      	movs	r2, #0
    3f8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	681a      	ldr	r2, [r3, #0]
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	681a      	ldr	r2, [r3, #0]
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f9e:	3b01      	subs	r3, #1
    3fa0:	6879      	ldr	r1, [r7, #4]
    3fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3fa4:	fb01 f303 	mul.w	r3, r1, r3
    3fa8:	441a      	add	r2, r3
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	f04f 32ff 	mov.w	r2, #4294967295
    3fb4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	f04f 32ff 	mov.w	r2, #4294967295
    3fbc:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	3310      	adds	r3, #16
    3fc2:	4618      	mov	r0, r3
    3fc4:	f7ff ff08 	bl	3dd8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	3324      	adds	r3, #36	; 0x24
    3fcc:	4618      	mov	r0, r3
    3fce:	f7ff ff03 	bl	3dd8 <vListInitialise>
	}

	return xReturn;
    3fd2:	68fb      	ldr	r3, [r7, #12]
}
    3fd4:	4618      	mov	r0, r3
    3fd6:	3710      	adds	r7, #16
    3fd8:	46bd      	mov	sp, r7
    3fda:	bd80      	pop	{r7, pc}

00003fdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b088      	sub	sp, #32
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	60f8      	str	r0, [r7, #12]
    3fe4:	60b9      	str	r1, [r7, #8]
    3fe6:	4613      	mov	r3, r2
    3fe8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3fea:	2300      	movs	r3, #0
    3fec:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d026      	beq.n	4042 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3ff4:	204c      	movs	r0, #76	; 0x4c
    3ff6:	f001 fda5 	bl	5b44 <pvPortMalloc>
    3ffa:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3ffc:	69bb      	ldr	r3, [r7, #24]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d01f      	beq.n	4042 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4002:	68fb      	ldr	r3, [r7, #12]
    4004:	68ba      	ldr	r2, [r7, #8]
    4006:	fb02 f303 	mul.w	r3, r2, r3
    400a:	3301      	adds	r3, #1
    400c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    400e:	6978      	ldr	r0, [r7, #20]
    4010:	f001 fd98 	bl	5b44 <pvPortMalloc>
    4014:	4602      	mov	r2, r0
    4016:	69bb      	ldr	r3, [r7, #24]
    4018:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    401a:	69bb      	ldr	r3, [r7, #24]
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	2b00      	cmp	r3, #0
    4020:	d00c      	beq.n	403c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4022:	69bb      	ldr	r3, [r7, #24]
    4024:	68fa      	ldr	r2, [r7, #12]
    4026:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4028:	69bb      	ldr	r3, [r7, #24]
    402a:	68ba      	ldr	r2, [r7, #8]
    402c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    402e:	69b8      	ldr	r0, [r7, #24]
    4030:	2101      	movs	r1, #1
    4032:	f7ff ff85 	bl	3f40 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4036:	69bb      	ldr	r3, [r7, #24]
    4038:	61fb      	str	r3, [r7, #28]
    403a:	e002      	b.n	4042 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    403c:	69b8      	ldr	r0, [r7, #24]
    403e:	f001 fe45 	bl	5ccc <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4042:	69fb      	ldr	r3, [r7, #28]
}
    4044:	4618      	mov	r0, r3
    4046:	3720      	adds	r7, #32
    4048:	46bd      	mov	sp, r7
    404a:	bd80      	pop	{r7, pc}

0000404c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    404c:	b580      	push	{r7, lr}
    404e:	b084      	sub	sp, #16
    4050:	af00      	add	r7, sp, #0
    4052:	4603      	mov	r3, r0
    4054:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4056:	204c      	movs	r0, #76	; 0x4c
    4058:	f001 fd74 	bl	5b44 <pvPortMalloc>
    405c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    405e:	68fb      	ldr	r3, [r7, #12]
    4060:	2b00      	cmp	r3, #0
    4062:	d02c      	beq.n	40be <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4064:	68fb      	ldr	r3, [r7, #12]
    4066:	2200      	movs	r2, #0
    4068:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    406a:	68fb      	ldr	r3, [r7, #12]
    406c:	2200      	movs	r2, #0
    406e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	2200      	movs	r2, #0
    4074:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4076:	68fb      	ldr	r3, [r7, #12]
    4078:	2200      	movs	r2, #0
    407a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    407c:	68fb      	ldr	r3, [r7, #12]
    407e:	2200      	movs	r2, #0
    4080:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4082:	68fb      	ldr	r3, [r7, #12]
    4084:	2201      	movs	r2, #1
    4086:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	2200      	movs	r2, #0
    408c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    408e:	68fb      	ldr	r3, [r7, #12]
    4090:	f04f 32ff 	mov.w	r2, #4294967295
    4094:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	f04f 32ff 	mov.w	r2, #4294967295
    409c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    409e:	68fb      	ldr	r3, [r7, #12]
    40a0:	3310      	adds	r3, #16
    40a2:	4618      	mov	r0, r3
    40a4:	f7ff fe98 	bl	3dd8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    40a8:	68fb      	ldr	r3, [r7, #12]
    40aa:	3324      	adds	r3, #36	; 0x24
    40ac:	4618      	mov	r0, r3
    40ae:	f7ff fe93 	bl	3dd8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    40b2:	68f8      	ldr	r0, [r7, #12]
    40b4:	2100      	movs	r1, #0
    40b6:	2200      	movs	r2, #0
    40b8:	2300      	movs	r3, #0
    40ba:	f000 f81d 	bl	40f8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    40be:	68fb      	ldr	r3, [r7, #12]
	}
    40c0:	4618      	mov	r0, r3
    40c2:	3710      	adds	r7, #16
    40c4:	46bd      	mov	sp, r7
    40c6:	bd80      	pop	{r7, pc}

000040c8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    40c8:	b580      	push	{r7, lr}
    40ca:	b084      	sub	sp, #16
    40cc:	af00      	add	r7, sp, #0
    40ce:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    40d0:	f001 fcc0 	bl	5a54 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	2b00      	cmp	r3, #0
    40da:	d103      	bne.n	40e4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    40dc:	687b      	ldr	r3, [r7, #4]
    40de:	685b      	ldr	r3, [r3, #4]
    40e0:	60fb      	str	r3, [r7, #12]
    40e2:	e001      	b.n	40e8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    40e4:	2300      	movs	r3, #0
    40e6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    40e8:	f001 fcca 	bl	5a80 <vPortExitCritical>
		
		return pxReturn;
    40ec:	68fb      	ldr	r3, [r7, #12]
	}
    40ee:	4618      	mov	r0, r3
    40f0:	3710      	adds	r7, #16
    40f2:	46bd      	mov	sp, r7
    40f4:	bd80      	pop	{r7, pc}
    40f6:	bf00      	nop

000040f8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b088      	sub	sp, #32
    40fc:	af00      	add	r7, sp, #0
    40fe:	60f8      	str	r0, [r7, #12]
    4100:	60b9      	str	r1, [r7, #8]
    4102:	607a      	str	r2, [r7, #4]
    4104:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4106:	2300      	movs	r3, #0
    4108:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    410a:	f001 fca3 	bl	5a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4116:	429a      	cmp	r2, r3
    4118:	d216      	bcs.n	4148 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    411a:	68f8      	ldr	r0, [r7, #12]
    411c:	68b9      	ldr	r1, [r7, #8]
    411e:	683a      	ldr	r2, [r7, #0]
    4120:	f000 f9d6 	bl	44d0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4128:	2b00      	cmp	r3, #0
    412a:	d009      	beq.n	4140 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    412c:	68fb      	ldr	r3, [r7, #12]
    412e:	3324      	adds	r3, #36	; 0x24
    4130:	4618      	mov	r0, r3
    4132:	f001 f905 	bl	5340 <xTaskRemoveFromEventList>
    4136:	4603      	mov	r3, r0
    4138:	2b01      	cmp	r3, #1
    413a:	d101      	bne.n	4140 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    413c:	f001 fc7c 	bl	5a38 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4140:	f001 fc9e 	bl	5a80 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4144:	2301      	movs	r3, #1
    4146:	e059      	b.n	41fc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	2b00      	cmp	r3, #0
    414c:	d103      	bne.n	4156 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    414e:	f001 fc97 	bl	5a80 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4152:	2300      	movs	r3, #0
    4154:	e052      	b.n	41fc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4156:	69fb      	ldr	r3, [r7, #28]
    4158:	2b00      	cmp	r3, #0
    415a:	d106      	bne.n	416a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    415c:	f107 0314 	add.w	r3, r7, #20
    4160:	4618      	mov	r0, r3
    4162:	f001 f945 	bl	53f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4166:	2301      	movs	r3, #1
    4168:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    416a:	f001 fc89 	bl	5a80 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    416e:	f000 fe93 	bl	4e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4172:	f001 fc6f 	bl	5a54 <vPortEnterCritical>
    4176:	68fb      	ldr	r3, [r7, #12]
    4178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    417a:	f1b3 3fff 	cmp.w	r3, #4294967295
    417e:	d102      	bne.n	4186 <xQueueGenericSend+0x8e>
    4180:	68fb      	ldr	r3, [r7, #12]
    4182:	2200      	movs	r2, #0
    4184:	645a      	str	r2, [r3, #68]	; 0x44
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    418a:	f1b3 3fff 	cmp.w	r3, #4294967295
    418e:	d102      	bne.n	4196 <xQueueGenericSend+0x9e>
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	2200      	movs	r2, #0
    4194:	649a      	str	r2, [r3, #72]	; 0x48
    4196:	f001 fc73 	bl	5a80 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    419a:	f107 0214 	add.w	r2, r7, #20
    419e:	1d3b      	adds	r3, r7, #4
    41a0:	4610      	mov	r0, r2
    41a2:	4619      	mov	r1, r3
    41a4:	f001 f93c 	bl	5420 <xTaskCheckForTimeOut>
    41a8:	4603      	mov	r3, r0
    41aa:	2b00      	cmp	r3, #0
    41ac:	d11e      	bne.n	41ec <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    41ae:	68f8      	ldr	r0, [r7, #12]
    41b0:	f000 fa86 	bl	46c0 <prvIsQueueFull>
    41b4:	4603      	mov	r3, r0
    41b6:	2b00      	cmp	r3, #0
    41b8:	d012      	beq.n	41e0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	f103 0210 	add.w	r2, r3, #16
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	4610      	mov	r0, r2
    41c4:	4619      	mov	r1, r3
    41c6:	f001 f883 	bl	52d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    41ca:	68f8      	ldr	r0, [r7, #12]
    41cc:	f000 fa02 	bl	45d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    41d0:	f000 fe74 	bl	4ebc <xTaskResumeAll>
    41d4:	4603      	mov	r3, r0
    41d6:	2b00      	cmp	r3, #0
    41d8:	d10f      	bne.n	41fa <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    41da:	f001 fc2d 	bl	5a38 <vPortYieldFromISR>
    41de:	e00c      	b.n	41fa <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    41e0:	68f8      	ldr	r0, [r7, #12]
    41e2:	f000 f9f7 	bl	45d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    41e6:	f000 fe69 	bl	4ebc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    41ea:	e78e      	b.n	410a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    41ec:	68f8      	ldr	r0, [r7, #12]
    41ee:	f000 f9f1 	bl	45d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    41f2:	f000 fe63 	bl	4ebc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    41f6:	2300      	movs	r3, #0
    41f8:	e000      	b.n	41fc <xQueueGenericSend+0x104>
		}
	}
    41fa:	e786      	b.n	410a <xQueueGenericSend+0x12>
}
    41fc:	4618      	mov	r0, r3
    41fe:	3720      	adds	r7, #32
    4200:	46bd      	mov	sp, r7
    4202:	bd80      	pop	{r7, pc}

00004204 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4204:	b580      	push	{r7, lr}
    4206:	b086      	sub	sp, #24
    4208:	af00      	add	r7, sp, #0
    420a:	60f8      	str	r0, [r7, #12]
    420c:	60b9      	str	r1, [r7, #8]
    420e:	607a      	str	r2, [r7, #4]
    4210:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4212:	2300      	movs	r3, #0
    4214:	613b      	str	r3, [r7, #16]
    4216:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    421a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    421e:	68fb      	ldr	r3, [r7, #12]
    4220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4222:	68fb      	ldr	r3, [r7, #12]
    4224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4226:	429a      	cmp	r2, r3
    4228:	d221      	bcs.n	426e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    422a:	68f8      	ldr	r0, [r7, #12]
    422c:	68b9      	ldr	r1, [r7, #8]
    422e:	683a      	ldr	r2, [r7, #0]
    4230:	f000 f94e 	bl	44d0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4234:	68fb      	ldr	r3, [r7, #12]
    4236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4238:	f1b3 3fff 	cmp.w	r3, #4294967295
    423c:	d10f      	bne.n	425e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    423e:	68fb      	ldr	r3, [r7, #12]
    4240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4242:	2b00      	cmp	r3, #0
    4244:	d010      	beq.n	4268 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4246:	68fb      	ldr	r3, [r7, #12]
    4248:	3324      	adds	r3, #36	; 0x24
    424a:	4618      	mov	r0, r3
    424c:	f001 f878 	bl	5340 <xTaskRemoveFromEventList>
    4250:	4603      	mov	r3, r0
    4252:	2b00      	cmp	r3, #0
    4254:	d008      	beq.n	4268 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	2201      	movs	r2, #1
    425a:	601a      	str	r2, [r3, #0]
    425c:	e004      	b.n	4268 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    425e:	68fb      	ldr	r3, [r7, #12]
    4260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4262:	1c5a      	adds	r2, r3, #1
    4264:	68fb      	ldr	r3, [r7, #12]
    4266:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4268:	2301      	movs	r3, #1
    426a:	617b      	str	r3, [r7, #20]
    426c:	e001      	b.n	4272 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    426e:	2300      	movs	r3, #0
    4270:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4272:	f04f 0000 	mov.w	r0, #0
    4276:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    427a:	697b      	ldr	r3, [r7, #20]
}
    427c:	4618      	mov	r0, r3
    427e:	3718      	adds	r7, #24
    4280:	46bd      	mov	sp, r7
    4282:	bd80      	pop	{r7, pc}

00004284 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4284:	b580      	push	{r7, lr}
    4286:	b088      	sub	sp, #32
    4288:	af00      	add	r7, sp, #0
    428a:	60f8      	str	r0, [r7, #12]
    428c:	60b9      	str	r1, [r7, #8]
    428e:	607a      	str	r2, [r7, #4]
    4290:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4292:	2300      	movs	r3, #0
    4294:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4296:	f001 fbdd 	bl	5a54 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    429a:	68fb      	ldr	r3, [r7, #12]
    429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    429e:	2b00      	cmp	r3, #0
    42a0:	d03b      	beq.n	431a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	68db      	ldr	r3, [r3, #12]
    42a6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    42a8:	68f8      	ldr	r0, [r7, #12]
    42aa:	68b9      	ldr	r1, [r7, #8]
    42ac:	f000 f96c 	bl	4588 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    42b0:	683b      	ldr	r3, [r7, #0]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d11c      	bne.n	42f0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    42b6:	68fb      	ldr	r3, [r7, #12]
    42b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42ba:	1e5a      	subs	r2, r3, #1
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    42c0:	68fb      	ldr	r3, [r7, #12]
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d104      	bne.n	42d2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    42c8:	f001 fa5c 	bl	5784 <xTaskGetCurrentTaskHandle>
    42cc:	4602      	mov	r2, r0
    42ce:	68fb      	ldr	r3, [r7, #12]
    42d0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42d2:	68fb      	ldr	r3, [r7, #12]
    42d4:	691b      	ldr	r3, [r3, #16]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d01b      	beq.n	4312 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    42da:	68fb      	ldr	r3, [r7, #12]
    42dc:	3310      	adds	r3, #16
    42de:	4618      	mov	r0, r3
    42e0:	f001 f82e 	bl	5340 <xTaskRemoveFromEventList>
    42e4:	4603      	mov	r3, r0
    42e6:	2b01      	cmp	r3, #1
    42e8:	d113      	bne.n	4312 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    42ea:	f001 fba5 	bl	5a38 <vPortYieldFromISR>
    42ee:	e010      	b.n	4312 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	69ba      	ldr	r2, [r7, #24]
    42f4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42f6:	68fb      	ldr	r3, [r7, #12]
    42f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42fa:	2b00      	cmp	r3, #0
    42fc:	d009      	beq.n	4312 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42fe:	68fb      	ldr	r3, [r7, #12]
    4300:	3324      	adds	r3, #36	; 0x24
    4302:	4618      	mov	r0, r3
    4304:	f001 f81c 	bl	5340 <xTaskRemoveFromEventList>
    4308:	4603      	mov	r3, r0
    430a:	2b00      	cmp	r3, #0
    430c:	d001      	beq.n	4312 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    430e:	f001 fb93 	bl	5a38 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4312:	f001 fbb5 	bl	5a80 <vPortExitCritical>
				return pdPASS;
    4316:	2301      	movs	r3, #1
    4318:	e066      	b.n	43e8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	2b00      	cmp	r3, #0
    431e:	d103      	bne.n	4328 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4320:	f001 fbae 	bl	5a80 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4324:	2300      	movs	r3, #0
    4326:	e05f      	b.n	43e8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4328:	69fb      	ldr	r3, [r7, #28]
    432a:	2b00      	cmp	r3, #0
    432c:	d106      	bne.n	433c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    432e:	f107 0310 	add.w	r3, r7, #16
    4332:	4618      	mov	r0, r3
    4334:	f001 f85c 	bl	53f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4338:	2301      	movs	r3, #1
    433a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    433c:	f001 fba0 	bl	5a80 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4340:	f000 fdaa 	bl	4e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4344:	f001 fb86 	bl	5a54 <vPortEnterCritical>
    4348:	68fb      	ldr	r3, [r7, #12]
    434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    434c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4350:	d102      	bne.n	4358 <xQueueGenericReceive+0xd4>
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	2200      	movs	r2, #0
    4356:	645a      	str	r2, [r3, #68]	; 0x44
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    435c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4360:	d102      	bne.n	4368 <xQueueGenericReceive+0xe4>
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	2200      	movs	r2, #0
    4366:	649a      	str	r2, [r3, #72]	; 0x48
    4368:	f001 fb8a 	bl	5a80 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    436c:	f107 0210 	add.w	r2, r7, #16
    4370:	1d3b      	adds	r3, r7, #4
    4372:	4610      	mov	r0, r2
    4374:	4619      	mov	r1, r3
    4376:	f001 f853 	bl	5420 <xTaskCheckForTimeOut>
    437a:	4603      	mov	r3, r0
    437c:	2b00      	cmp	r3, #0
    437e:	d12b      	bne.n	43d8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4380:	68f8      	ldr	r0, [r7, #12]
    4382:	f000 f973 	bl	466c <prvIsQueueEmpty>
    4386:	4603      	mov	r3, r0
    4388:	2b00      	cmp	r3, #0
    438a:	d01f      	beq.n	43cc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	d108      	bne.n	43a6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4394:	f001 fb5e 	bl	5a54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	685b      	ldr	r3, [r3, #4]
    439c:	4618      	mov	r0, r3
    439e:	f001 fa01 	bl	57a4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    43a2:	f001 fb6d 	bl	5a80 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	4610      	mov	r0, r2
    43b0:	4619      	mov	r1, r3
    43b2:	f000 ff8d 	bl	52d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    43b6:	68f8      	ldr	r0, [r7, #12]
    43b8:	f000 f90c 	bl	45d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    43bc:	f000 fd7e 	bl	4ebc <xTaskResumeAll>
    43c0:	4603      	mov	r3, r0
    43c2:	2b00      	cmp	r3, #0
    43c4:	d10f      	bne.n	43e6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    43c6:	f001 fb37 	bl	5a38 <vPortYieldFromISR>
    43ca:	e00c      	b.n	43e6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    43cc:	68f8      	ldr	r0, [r7, #12]
    43ce:	f000 f901 	bl	45d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    43d2:	f000 fd73 	bl	4ebc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    43d6:	e75e      	b.n	4296 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    43d8:	68f8      	ldr	r0, [r7, #12]
    43da:	f000 f8fb 	bl	45d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    43de:	f000 fd6d 	bl	4ebc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    43e2:	2300      	movs	r3, #0
    43e4:	e000      	b.n	43e8 <xQueueGenericReceive+0x164>
		}
	}
    43e6:	e756      	b.n	4296 <xQueueGenericReceive+0x12>
}
    43e8:	4618      	mov	r0, r3
    43ea:	3720      	adds	r7, #32
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}

000043f0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    43f0:	b580      	push	{r7, lr}
    43f2:	b086      	sub	sp, #24
    43f4:	af00      	add	r7, sp, #0
    43f6:	60f8      	str	r0, [r7, #12]
    43f8:	60b9      	str	r1, [r7, #8]
    43fa:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    43fc:	2300      	movs	r3, #0
    43fe:	613b      	str	r3, [r7, #16]
    4400:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4404:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    440c:	2b00      	cmp	r3, #0
    440e:	d025      	beq.n	445c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4410:	68f8      	ldr	r0, [r7, #12]
    4412:	68b9      	ldr	r1, [r7, #8]
    4414:	f000 f8b8 	bl	4588 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    441c:	1e5a      	subs	r2, r3, #1
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4422:	68fb      	ldr	r3, [r7, #12]
    4424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4426:	f1b3 3fff 	cmp.w	r3, #4294967295
    442a:	d10f      	bne.n	444c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	691b      	ldr	r3, [r3, #16]
    4430:	2b00      	cmp	r3, #0
    4432:	d010      	beq.n	4456 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	3310      	adds	r3, #16
    4438:	4618      	mov	r0, r3
    443a:	f000 ff81 	bl	5340 <xTaskRemoveFromEventList>
    443e:	4603      	mov	r3, r0
    4440:	2b00      	cmp	r3, #0
    4442:	d008      	beq.n	4456 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	2201      	movs	r2, #1
    4448:	601a      	str	r2, [r3, #0]
    444a:	e004      	b.n	4456 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4450:	1c5a      	adds	r2, r3, #1
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4456:	2301      	movs	r3, #1
    4458:	617b      	str	r3, [r7, #20]
    445a:	e001      	b.n	4460 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    445c:	2300      	movs	r3, #0
    445e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4460:	f04f 0000 	mov.w	r0, #0
    4464:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4468:	697b      	ldr	r3, [r7, #20]
}
    446a:	4618      	mov	r0, r3
    446c:	3718      	adds	r7, #24
    446e:	46bd      	mov	sp, r7
    4470:	bd80      	pop	{r7, pc}
    4472:	bf00      	nop

00004474 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4474:	b580      	push	{r7, lr}
    4476:	b084      	sub	sp, #16
    4478:	af00      	add	r7, sp, #0
    447a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    447c:	f001 faea 	bl	5a54 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4484:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4486:	f001 fafb 	bl	5a80 <vPortExitCritical>

	return uxReturn;
    448a:	68fb      	ldr	r3, [r7, #12]
}
    448c:	4618      	mov	r0, r3
    448e:	3710      	adds	r7, #16
    4490:	46bd      	mov	sp, r7
    4492:	bd80      	pop	{r7, pc}

00004494 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4494:	b480      	push	{r7}
    4496:	b085      	sub	sp, #20
    4498:	af00      	add	r7, sp, #0
    449a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44a0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    44a2:	68fb      	ldr	r3, [r7, #12]
}
    44a4:	4618      	mov	r0, r3
    44a6:	3714      	adds	r7, #20
    44a8:	46bd      	mov	sp, r7
    44aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ae:	4770      	bx	lr

000044b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	4618      	mov	r0, r3
    44be:	f001 fc05 	bl	5ccc <vPortFree>
	vPortFree( pxQueue );
    44c2:	6878      	ldr	r0, [r7, #4]
    44c4:	f001 fc02 	bl	5ccc <vPortFree>
}
    44c8:	3708      	adds	r7, #8
    44ca:	46bd      	mov	sp, r7
    44cc:	bd80      	pop	{r7, pc}
    44ce:	bf00      	nop

000044d0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    44d0:	b580      	push	{r7, lr}
    44d2:	b084      	sub	sp, #16
    44d4:	af00      	add	r7, sp, #0
    44d6:	60f8      	str	r0, [r7, #12]
    44d8:	60b9      	str	r1, [r7, #8]
    44da:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44e0:	2b00      	cmp	r3, #0
    44e2:	d10c      	bne.n	44fe <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    44e4:	68fb      	ldr	r3, [r7, #12]
    44e6:	681b      	ldr	r3, [r3, #0]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d145      	bne.n	4578 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    44ec:	68fb      	ldr	r3, [r7, #12]
    44ee:	685b      	ldr	r3, [r3, #4]
    44f0:	4618      	mov	r0, r3
    44f2:	f001 f9bb 	bl	586c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    44f6:	68fb      	ldr	r3, [r7, #12]
    44f8:	2200      	movs	r2, #0
    44fa:	605a      	str	r2, [r3, #4]
    44fc:	e03c      	b.n	4578 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	2b00      	cmp	r3, #0
    4502:	d11a      	bne.n	453a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	689a      	ldr	r2, [r3, #8]
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    450c:	4610      	mov	r0, r2
    450e:	68b9      	ldr	r1, [r7, #8]
    4510:	461a      	mov	r2, r3
    4512:	f001 febd 	bl	6290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4516:	68fb      	ldr	r3, [r7, #12]
    4518:	689a      	ldr	r2, [r3, #8]
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    451e:	441a      	add	r2, r3
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	689a      	ldr	r2, [r3, #8]
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	685b      	ldr	r3, [r3, #4]
    452c:	429a      	cmp	r2, r3
    452e:	d323      	bcc.n	4578 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4530:	68fb      	ldr	r3, [r7, #12]
    4532:	681a      	ldr	r2, [r3, #0]
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	609a      	str	r2, [r3, #8]
    4538:	e01e      	b.n	4578 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	68da      	ldr	r2, [r3, #12]
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4542:	4610      	mov	r0, r2
    4544:	68b9      	ldr	r1, [r7, #8]
    4546:	461a      	mov	r2, r3
    4548:	f001 fea2 	bl	6290 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	68da      	ldr	r2, [r3, #12]
    4550:	68fb      	ldr	r3, [r7, #12]
    4552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4554:	425b      	negs	r3, r3
    4556:	441a      	add	r2, r3
    4558:	68fb      	ldr	r3, [r7, #12]
    455a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    455c:	68fb      	ldr	r3, [r7, #12]
    455e:	68da      	ldr	r2, [r3, #12]
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	429a      	cmp	r2, r3
    4566:	d207      	bcs.n	4578 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4568:	68fb      	ldr	r3, [r7, #12]
    456a:	685a      	ldr	r2, [r3, #4]
    456c:	68fb      	ldr	r3, [r7, #12]
    456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4570:	425b      	negs	r3, r3
    4572:	441a      	add	r2, r3
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    457c:	1c5a      	adds	r2, r3, #1
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	639a      	str	r2, [r3, #56]	; 0x38
}
    4582:	3710      	adds	r7, #16
    4584:	46bd      	mov	sp, r7
    4586:	bd80      	pop	{r7, pc}

00004588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
    458e:	6078      	str	r0, [r7, #4]
    4590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	2b00      	cmp	r3, #0
    4598:	d019      	beq.n	45ce <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	68da      	ldr	r2, [r3, #12]
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45a2:	441a      	add	r2, r3
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	68da      	ldr	r2, [r3, #12]
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	685b      	ldr	r3, [r3, #4]
    45b0:	429a      	cmp	r2, r3
    45b2:	d303      	bcc.n	45bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	681a      	ldr	r2, [r3, #0]
    45b8:	687b      	ldr	r3, [r7, #4]
    45ba:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	68da      	ldr	r2, [r3, #12]
    45c0:	687b      	ldr	r3, [r7, #4]
    45c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45c4:	6838      	ldr	r0, [r7, #0]
    45c6:	4611      	mov	r1, r2
    45c8:	461a      	mov	r2, r3
    45ca:	f001 fe61 	bl	6290 <memcpy>
	}
}
    45ce:	3708      	adds	r7, #8
    45d0:	46bd      	mov	sp, r7
    45d2:	bd80      	pop	{r7, pc}

000045d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    45d4:	b580      	push	{r7, lr}
    45d6:	b082      	sub	sp, #8
    45d8:	af00      	add	r7, sp, #0
    45da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    45dc:	f001 fa3a 	bl	5a54 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    45e0:	e014      	b.n	460c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45e6:	2b00      	cmp	r3, #0
    45e8:	d00f      	beq.n	460a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	3324      	adds	r3, #36	; 0x24
    45ee:	4618      	mov	r0, r3
    45f0:	f000 fea6 	bl	5340 <xTaskRemoveFromEventList>
    45f4:	4603      	mov	r3, r0
    45f6:	2b00      	cmp	r3, #0
    45f8:	d001      	beq.n	45fe <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    45fa:	f000 ff5d 	bl	54b8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4602:	1e5a      	subs	r2, r3, #1
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	649a      	str	r2, [r3, #72]	; 0x48
    4608:	e000      	b.n	460c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    460a:	e003      	b.n	4614 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4610:	2b00      	cmp	r3, #0
    4612:	dce6      	bgt.n	45e2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4614:	687b      	ldr	r3, [r7, #4]
    4616:	f04f 32ff 	mov.w	r2, #4294967295
    461a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    461c:	f001 fa30 	bl	5a80 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4620:	f001 fa18 	bl	5a54 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4624:	e014      	b.n	4650 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	691b      	ldr	r3, [r3, #16]
    462a:	2b00      	cmp	r3, #0
    462c:	d00f      	beq.n	464e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	3310      	adds	r3, #16
    4632:	4618      	mov	r0, r3
    4634:	f000 fe84 	bl	5340 <xTaskRemoveFromEventList>
    4638:	4603      	mov	r3, r0
    463a:	2b00      	cmp	r3, #0
    463c:	d001      	beq.n	4642 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    463e:	f000 ff3b 	bl	54b8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4646:	1e5a      	subs	r2, r3, #1
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	645a      	str	r2, [r3, #68]	; 0x44
    464c:	e000      	b.n	4650 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    464e:	e003      	b.n	4658 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4650:	687b      	ldr	r3, [r7, #4]
    4652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4654:	2b00      	cmp	r3, #0
    4656:	dce6      	bgt.n	4626 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	f04f 32ff 	mov.w	r2, #4294967295
    465e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4660:	f001 fa0e 	bl	5a80 <vPortExitCritical>
}
    4664:	3708      	adds	r7, #8
    4666:	46bd      	mov	sp, r7
    4668:	bd80      	pop	{r7, pc}
    466a:	bf00      	nop

0000466c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    466c:	b580      	push	{r7, lr}
    466e:	b084      	sub	sp, #16
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4674:	f001 f9ee 	bl	5a54 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    467c:	2b00      	cmp	r3, #0
    467e:	bf14      	ite	ne
    4680:	2300      	movne	r3, #0
    4682:	2301      	moveq	r3, #1
    4684:	b2db      	uxtb	r3, r3
    4686:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4688:	f001 f9fa 	bl	5a80 <vPortExitCritical>

	return xReturn;
    468c:	68fb      	ldr	r3, [r7, #12]
}
    468e:	4618      	mov	r0, r3
    4690:	3710      	adds	r7, #16
    4692:	46bd      	mov	sp, r7
    4694:	bd80      	pop	{r7, pc}
    4696:	bf00      	nop

00004698 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4698:	b480      	push	{r7}
    469a:	b085      	sub	sp, #20
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46a4:	2b00      	cmp	r3, #0
    46a6:	bf14      	ite	ne
    46a8:	2300      	movne	r3, #0
    46aa:	2301      	moveq	r3, #1
    46ac:	b2db      	uxtb	r3, r3
    46ae:	60fb      	str	r3, [r7, #12]

	return xReturn;
    46b0:	68fb      	ldr	r3, [r7, #12]
}
    46b2:	4618      	mov	r0, r3
    46b4:	3714      	adds	r7, #20
    46b6:	46bd      	mov	sp, r7
    46b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46bc:	4770      	bx	lr
    46be:	bf00      	nop

000046c0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b084      	sub	sp, #16
    46c4:	af00      	add	r7, sp, #0
    46c6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    46c8:	f001 f9c4 	bl	5a54 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    46d4:	429a      	cmp	r2, r3
    46d6:	bf14      	ite	ne
    46d8:	2300      	movne	r3, #0
    46da:	2301      	moveq	r3, #1
    46dc:	b2db      	uxtb	r3, r3
    46de:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    46e0:	f001 f9ce 	bl	5a80 <vPortExitCritical>

	return xReturn;
    46e4:	68fb      	ldr	r3, [r7, #12]
}
    46e6:	4618      	mov	r0, r3
    46e8:	3710      	adds	r7, #16
    46ea:	46bd      	mov	sp, r7
    46ec:	bd80      	pop	{r7, pc}
    46ee:	bf00      	nop

000046f0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    46f0:	b480      	push	{r7}
    46f2:	b085      	sub	sp, #20
    46f4:	af00      	add	r7, sp, #0
    46f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4700:	429a      	cmp	r2, r3
    4702:	bf14      	ite	ne
    4704:	2300      	movne	r3, #0
    4706:	2301      	moveq	r3, #1
    4708:	b2db      	uxtb	r3, r3
    470a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    470c:	68fb      	ldr	r3, [r7, #12]
}
    470e:	4618      	mov	r0, r3
    4710:	3714      	adds	r7, #20
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr
    471a:	bf00      	nop

0000471c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    471c:	b580      	push	{r7, lr}
    471e:	b08a      	sub	sp, #40	; 0x28
    4720:	af02      	add	r7, sp, #8
    4722:	60f8      	str	r0, [r7, #12]
    4724:	60b9      	str	r1, [r7, #8]
    4726:	603b      	str	r3, [r7, #0]
    4728:	4613      	mov	r3, r2
    472a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    472c:	88fb      	ldrh	r3, [r7, #6]
    472e:	4618      	mov	r0, r3
    4730:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4732:	f000 ffe5 	bl	5700 <prvAllocateTCBAndStack>
    4736:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4738:	69bb      	ldr	r3, [r7, #24]
    473a:	2b00      	cmp	r3, #0
    473c:	f000 80a1 	beq.w	4882 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4740:	69bb      	ldr	r3, [r7, #24]
    4742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4744:	88fb      	ldrh	r3, [r7, #6]
    4746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    474a:	3b01      	subs	r3, #1
    474c:	009b      	lsls	r3, r3, #2
    474e:	4413      	add	r3, r2
    4750:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4752:	697b      	ldr	r3, [r7, #20]
    4754:	f023 0307 	bic.w	r3, r3, #7
    4758:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    475a:	88fb      	ldrh	r3, [r7, #6]
    475c:	9300      	str	r3, [sp, #0]
    475e:	69b8      	ldr	r0, [r7, #24]
    4760:	68b9      	ldr	r1, [r7, #8]
    4762:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4766:	f000 febd 	bl	54e4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    476a:	6978      	ldr	r0, [r7, #20]
    476c:	68f9      	ldr	r1, [r7, #12]
    476e:	683a      	ldr	r2, [r7, #0]
    4770:	f001 f8f2 	bl	5958 <pxPortInitialiseStack>
    4774:	4602      	mov	r2, r0
    4776:	69bb      	ldr	r3, [r7, #24]
    4778:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    477c:	2b00      	cmp	r3, #0
    477e:	d002      	beq.n	4786 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4782:	69ba      	ldr	r2, [r7, #24]
    4784:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4786:	f001 f965 	bl	5a54 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    478a:	f240 535c 	movw	r3, #1372	; 0x55c
    478e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	1c5a      	adds	r2, r3, #1
    4796:	f240 535c 	movw	r3, #1372	; 0x55c
    479a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    47a0:	f240 3358 	movw	r3, #856	; 0x358
    47a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a8:	681b      	ldr	r3, [r3, #0]
    47aa:	2b00      	cmp	r3, #0
    47ac:	d10f      	bne.n	47ce <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    47ae:	f240 3358 	movw	r3, #856	; 0x358
    47b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47b6:	69ba      	ldr	r2, [r7, #24]
    47b8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    47ba:	f240 535c 	movw	r3, #1372	; 0x55c
    47be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	2b01      	cmp	r3, #1
    47c6:	d118      	bne.n	47fa <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    47c8:	f000 fec2 	bl	5550 <prvInitialiseTaskLists>
    47cc:	e015      	b.n	47fa <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    47ce:	f240 536c 	movw	r3, #1388	; 0x56c
    47d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d6:	681b      	ldr	r3, [r3, #0]
    47d8:	2b00      	cmp	r3, #0
    47da:	d10e      	bne.n	47fa <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    47dc:	f240 3358 	movw	r3, #856	; 0x358
    47e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e4:	681b      	ldr	r3, [r3, #0]
    47e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47ea:	429a      	cmp	r2, r3
    47ec:	d805      	bhi.n	47fa <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    47ee:	f240 3358 	movw	r3, #856	; 0x358
    47f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47f6:	69ba      	ldr	r2, [r7, #24]
    47f8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    47fa:	69bb      	ldr	r3, [r7, #24]
    47fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47fe:	f240 5364 	movw	r3, #1380	; 0x564
    4802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	429a      	cmp	r2, r3
    480a:	d906      	bls.n	481a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    480c:	69bb      	ldr	r3, [r7, #24]
    480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4810:	f240 5364 	movw	r3, #1380	; 0x564
    4814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4818:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    481a:	f240 5380 	movw	r3, #1408	; 0x580
    481e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4822:	681b      	ldr	r3, [r3, #0]
    4824:	1c5a      	adds	r2, r3, #1
    4826:	f240 5380 	movw	r3, #1408	; 0x580
    482a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    482e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4830:	69bb      	ldr	r3, [r7, #24]
    4832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4834:	f240 5368 	movw	r3, #1384	; 0x568
    4838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483c:	681b      	ldr	r3, [r3, #0]
    483e:	429a      	cmp	r2, r3
    4840:	d906      	bls.n	4850 <xTaskGenericCreate+0x134>
    4842:	69bb      	ldr	r3, [r7, #24]
    4844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4846:	f240 5368 	movw	r3, #1384	; 0x568
    484a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484e:	601a      	str	r2, [r3, #0]
    4850:	69bb      	ldr	r3, [r7, #24]
    4852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4854:	4613      	mov	r3, r2
    4856:	009b      	lsls	r3, r3, #2
    4858:	4413      	add	r3, r2
    485a:	009b      	lsls	r3, r3, #2
    485c:	f240 325c 	movw	r2, #860	; 0x35c
    4860:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4864:	441a      	add	r2, r3
    4866:	69bb      	ldr	r3, [r7, #24]
    4868:	3304      	adds	r3, #4
    486a:	4610      	mov	r0, r2
    486c:	4619      	mov	r1, r3
    486e:	f7ff fadf 	bl	3e30 <vListInsertEnd>

			xReturn = pdPASS;
    4872:	2301      	movs	r3, #1
    4874:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4876:	69b8      	ldr	r0, [r7, #24]
    4878:	f001 fcb6 	bl	61e8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    487c:	f001 f900 	bl	5a80 <vPortExitCritical>
    4880:	e002      	b.n	4888 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4882:	f04f 33ff 	mov.w	r3, #4294967295
    4886:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4888:	69fb      	ldr	r3, [r7, #28]
    488a:	2b01      	cmp	r3, #1
    488c:	d111      	bne.n	48b2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    488e:	f240 536c 	movw	r3, #1388	; 0x56c
    4892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	2b00      	cmp	r3, #0
    489a:	d00a      	beq.n	48b2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    489c:	f240 3358 	movw	r3, #856	; 0x358
    48a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48aa:	429a      	cmp	r2, r3
    48ac:	d201      	bcs.n	48b2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    48ae:	f001 f8c3 	bl	5a38 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    48b2:	69fb      	ldr	r3, [r7, #28]
}
    48b4:	4618      	mov	r0, r3
    48b6:	3720      	adds	r7, #32
    48b8:	46bd      	mov	sp, r7
    48ba:	bd80      	pop	{r7, pc}

000048bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    48bc:	b580      	push	{r7, lr}
    48be:	b084      	sub	sp, #16
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    48c4:	f001 f8c6 	bl	5a54 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    48c8:	f240 3358 	movw	r3, #856	; 0x358
    48cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	687a      	ldr	r2, [r7, #4]
    48d4:	429a      	cmp	r2, r3
    48d6:	d101      	bne.n	48dc <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    48d8:	2300      	movs	r3, #0
    48da:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	2b00      	cmp	r3, #0
    48e0:	d105      	bne.n	48ee <vTaskDelete+0x32>
    48e2:	f240 3358 	movw	r3, #856	; 0x358
    48e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	e000      	b.n	48f0 <vTaskDelete+0x34>
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    48f2:	68fb      	ldr	r3, [r7, #12]
    48f4:	3304      	adds	r3, #4
    48f6:	4618      	mov	r0, r3
    48f8:	f7ff fafa 	bl	3ef0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    48fc:	68fb      	ldr	r3, [r7, #12]
    48fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4900:	2b00      	cmp	r3, #0
    4902:	d004      	beq.n	490e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4904:	68fb      	ldr	r3, [r7, #12]
    4906:	3318      	adds	r3, #24
    4908:	4618      	mov	r0, r3
    490a:	f7ff faf1 	bl	3ef0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    490e:	68fb      	ldr	r3, [r7, #12]
    4910:	3304      	adds	r3, #4
    4912:	f240 5030 	movw	r0, #1328	; 0x530
    4916:	f2c2 0000 	movt	r0, #8192	; 0x2000
    491a:	4619      	mov	r1, r3
    491c:	f7ff fa88 	bl	3e30 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4920:	f240 5344 	movw	r3, #1348	; 0x544
    4924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	1c5a      	adds	r2, r3, #1
    492c:	f240 5344 	movw	r3, #1348	; 0x544
    4930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4934:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4936:	f240 5380 	movw	r3, #1408	; 0x580
    493a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	1c5a      	adds	r2, r3, #1
    4942:	f240 5380 	movw	r3, #1408	; 0x580
    4946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    494c:	f001 f898 	bl	5a80 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4950:	f240 536c 	movw	r3, #1388	; 0x56c
    4954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	2b00      	cmp	r3, #0
    495c:	d004      	beq.n	4968 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	2b00      	cmp	r3, #0
    4962:	d101      	bne.n	4968 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4964:	f001 f868 	bl	5a38 <vPortYieldFromISR>
			}
		}
	}
    4968:	3710      	adds	r7, #16
    496a:	46bd      	mov	sp, r7
    496c:	bd80      	pop	{r7, pc}
    496e:	bf00      	nop

00004970 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4970:	b580      	push	{r7, lr}
    4972:	b086      	sub	sp, #24
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    497a:	2300      	movs	r3, #0
    497c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    497e:	f000 fa8b 	bl	4e98 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	681a      	ldr	r2, [r3, #0]
    4986:	683b      	ldr	r3, [r7, #0]
    4988:	4413      	add	r3, r2
    498a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	681a      	ldr	r2, [r3, #0]
    4990:	f240 5360 	movw	r3, #1376	; 0x560
    4994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	429a      	cmp	r2, r3
    499c:	d90f      	bls.n	49be <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	681a      	ldr	r2, [r3, #0]
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	429a      	cmp	r2, r3
    49a6:	d919      	bls.n	49dc <vTaskDelayUntil+0x6c>
    49a8:	f240 5360 	movw	r3, #1376	; 0x560
    49ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	693a      	ldr	r2, [r7, #16]
    49b4:	429a      	cmp	r2, r3
    49b6:	d911      	bls.n	49dc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    49b8:	2301      	movs	r3, #1
    49ba:	617b      	str	r3, [r7, #20]
    49bc:	e00e      	b.n	49dc <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    49be:	687b      	ldr	r3, [r7, #4]
    49c0:	681a      	ldr	r2, [r3, #0]
    49c2:	693b      	ldr	r3, [r7, #16]
    49c4:	429a      	cmp	r2, r3
    49c6:	d807      	bhi.n	49d8 <vTaskDelayUntil+0x68>
    49c8:	f240 5360 	movw	r3, #1376	; 0x560
    49cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	693a      	ldr	r2, [r7, #16]
    49d4:	429a      	cmp	r2, r3
    49d6:	d901      	bls.n	49dc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    49d8:	2301      	movs	r3, #1
    49da:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	693a      	ldr	r2, [r7, #16]
    49e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    49e2:	697b      	ldr	r3, [r7, #20]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d00b      	beq.n	4a00 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    49e8:	f240 3358 	movw	r3, #856	; 0x358
    49ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	3304      	adds	r3, #4
    49f4:	4618      	mov	r0, r3
    49f6:	f7ff fa7b 	bl	3ef0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    49fa:	6938      	ldr	r0, [r7, #16]
    49fc:	f000 fe3c 	bl	5678 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4a00:	f000 fa5c 	bl	4ebc <xTaskResumeAll>
    4a04:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4a06:	68fb      	ldr	r3, [r7, #12]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d101      	bne.n	4a10 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4a0c:	f001 f814 	bl	5a38 <vPortYieldFromISR>
		}
	}
    4a10:	3718      	adds	r7, #24
    4a12:	46bd      	mov	sp, r7
    4a14:	bd80      	pop	{r7, pc}
    4a16:	bf00      	nop

00004a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b084      	sub	sp, #16
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4a20:	2300      	movs	r3, #0
    4a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d018      	beq.n	4a5c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4a2a:	f000 fa35 	bl	4e98 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4a2e:	f240 5360 	movw	r3, #1376	; 0x560
    4a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a36:	681a      	ldr	r2, [r3, #0]
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	4413      	add	r3, r2
    4a3c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4a3e:	f240 3358 	movw	r3, #856	; 0x358
    4a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	3304      	adds	r3, #4
    4a4a:	4618      	mov	r0, r3
    4a4c:	f7ff fa50 	bl	3ef0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4a50:	68b8      	ldr	r0, [r7, #8]
    4a52:	f000 fe11 	bl	5678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4a56:	f000 fa31 	bl	4ebc <xTaskResumeAll>
    4a5a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4a5c:	68fb      	ldr	r3, [r7, #12]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d101      	bne.n	4a66 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4a62:	f000 ffe9 	bl	5a38 <vPortYieldFromISR>
		}
	}
    4a66:	3710      	adds	r7, #16
    4a68:	46bd      	mov	sp, r7
    4a6a:	bd80      	pop	{r7, pc}

00004a6c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b084      	sub	sp, #16
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4a74:	f000 ffee 	bl	5a54 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4a78:	687b      	ldr	r3, [r7, #4]
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d105      	bne.n	4a8a <uxTaskPriorityGet+0x1e>
    4a7e:	f240 3358 	movw	r3, #856	; 0x358
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	e000      	b.n	4a8c <uxTaskPriorityGet+0x20>
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a92:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4a94:	f000 fff4 	bl	5a80 <vPortExitCritical>

		return uxReturn;
    4a98:	68bb      	ldr	r3, [r7, #8]
	}
    4a9a:	4618      	mov	r0, r3
    4a9c:	3710      	adds	r7, #16
    4a9e:	46bd      	mov	sp, r7
    4aa0:	bd80      	pop	{r7, pc}
    4aa2:	bf00      	nop

00004aa4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b086      	sub	sp, #24
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	6078      	str	r0, [r7, #4]
    4aac:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4aae:	2300      	movs	r3, #0
    4ab0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4ab2:	683b      	ldr	r3, [r7, #0]
    4ab4:	2b13      	cmp	r3, #19
    4ab6:	d901      	bls.n	4abc <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4ab8:	2313      	movs	r3, #19
    4aba:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4abc:	f000 ffca 	bl	5a54 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4ac0:	f240 3358 	movw	r3, #856	; 0x358
    4ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	687a      	ldr	r2, [r7, #4]
    4acc:	429a      	cmp	r2, r3
    4ace:	d101      	bne.n	4ad4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4ad0:	2300      	movs	r3, #0
    4ad2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d105      	bne.n	4ae6 <vTaskPrioritySet+0x42>
    4ada:	f240 3358 	movw	r3, #856	; 0x358
    4ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	e000      	b.n	4ae8 <vTaskPrioritySet+0x44>
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4aee:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	683b      	ldr	r3, [r7, #0]
    4af4:	429a      	cmp	r2, r3
    4af6:	d058      	beq.n	4baa <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4af8:	683a      	ldr	r2, [r7, #0]
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	429a      	cmp	r2, r3
    4afe:	d905      	bls.n	4b0c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d007      	beq.n	4b16 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4b06:	2301      	movs	r3, #1
    4b08:	617b      	str	r3, [r7, #20]
    4b0a:	e004      	b.n	4b16 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d101      	bne.n	4b16 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4b12:	2301      	movs	r3, #1
    4b14:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4b16:	693b      	ldr	r3, [r7, #16]
    4b18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4b1a:	693b      	ldr	r3, [r7, #16]
    4b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b1e:	429a      	cmp	r2, r3
    4b20:	d102      	bne.n	4b28 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4b22:	693b      	ldr	r3, [r7, #16]
    4b24:	683a      	ldr	r2, [r7, #0]
    4b26:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4b28:	693b      	ldr	r3, [r7, #16]
    4b2a:	683a      	ldr	r2, [r7, #0]
    4b2c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4b2e:	683b      	ldr	r3, [r7, #0]
    4b30:	f1c3 0214 	rsb	r2, r3, #20
    4b34:	693b      	ldr	r3, [r7, #16]
    4b36:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4b38:	693b      	ldr	r3, [r7, #16]
    4b3a:	6959      	ldr	r1, [r3, #20]
    4b3c:	68fa      	ldr	r2, [r7, #12]
    4b3e:	4613      	mov	r3, r2
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	4413      	add	r3, r2
    4b44:	009b      	lsls	r3, r3, #2
    4b46:	f240 325c 	movw	r2, #860	; 0x35c
    4b4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b4e:	4413      	add	r3, r2
    4b50:	4299      	cmp	r1, r3
    4b52:	d125      	bne.n	4ba0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4b54:	693b      	ldr	r3, [r7, #16]
    4b56:	3304      	adds	r3, #4
    4b58:	4618      	mov	r0, r3
    4b5a:	f7ff f9c9 	bl	3ef0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4b5e:	693b      	ldr	r3, [r7, #16]
    4b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b62:	f240 5368 	movw	r3, #1384	; 0x568
    4b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	429a      	cmp	r2, r3
    4b6e:	d906      	bls.n	4b7e <vTaskPrioritySet+0xda>
    4b70:	693b      	ldr	r3, [r7, #16]
    4b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b74:	f240 5368 	movw	r3, #1384	; 0x568
    4b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7c:	601a      	str	r2, [r3, #0]
    4b7e:	693b      	ldr	r3, [r7, #16]
    4b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b82:	4613      	mov	r3, r2
    4b84:	009b      	lsls	r3, r3, #2
    4b86:	4413      	add	r3, r2
    4b88:	009b      	lsls	r3, r3, #2
    4b8a:	f240 325c 	movw	r2, #860	; 0x35c
    4b8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b92:	441a      	add	r2, r3
    4b94:	693b      	ldr	r3, [r7, #16]
    4b96:	3304      	adds	r3, #4
    4b98:	4610      	mov	r0, r2
    4b9a:	4619      	mov	r1, r3
    4b9c:	f7ff f948 	bl	3e30 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4ba0:	697b      	ldr	r3, [r7, #20]
    4ba2:	2b01      	cmp	r3, #1
    4ba4:	d101      	bne.n	4baa <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4ba6:	f000 ff47 	bl	5a38 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4baa:	f000 ff69 	bl	5a80 <vPortExitCritical>
	}
    4bae:	3718      	adds	r7, #24
    4bb0:	46bd      	mov	sp, r7
    4bb2:	bd80      	pop	{r7, pc}

00004bb4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4bb4:	b580      	push	{r7, lr}
    4bb6:	b084      	sub	sp, #16
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bbc:	f000 ff4a 	bl	5a54 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4bc0:	f240 3358 	movw	r3, #856	; 0x358
    4bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	687a      	ldr	r2, [r7, #4]
    4bcc:	429a      	cmp	r2, r3
    4bce:	d101      	bne.n	4bd4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4bd0:	2300      	movs	r3, #0
    4bd2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d105      	bne.n	4be6 <vTaskSuspend+0x32>
    4bda:	f240 3358 	movw	r3, #856	; 0x358
    4bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	e000      	b.n	4be8 <vTaskSuspend+0x34>
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bea:	68fb      	ldr	r3, [r7, #12]
    4bec:	3304      	adds	r3, #4
    4bee:	4618      	mov	r0, r3
    4bf0:	f7ff f97e 	bl	3ef0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4bf4:	68fb      	ldr	r3, [r7, #12]
    4bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d004      	beq.n	4c06 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4bfc:	68fb      	ldr	r3, [r7, #12]
    4bfe:	3318      	adds	r3, #24
    4c00:	4618      	mov	r0, r3
    4c02:	f7ff f975 	bl	3ef0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	3304      	adds	r3, #4
    4c0a:	f240 5048 	movw	r0, #1352	; 0x548
    4c0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c12:	4619      	mov	r1, r3
    4c14:	f7ff f90c 	bl	3e30 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4c18:	f000 ff32 	bl	5a80 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d11e      	bne.n	4c60 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4c22:	f240 536c 	movw	r3, #1388	; 0x56c
    4c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d002      	beq.n	4c36 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4c30:	f000 ff02 	bl	5a38 <vPortYieldFromISR>
    4c34:	e014      	b.n	4c60 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4c36:	f240 5348 	movw	r3, #1352	; 0x548
    4c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c3e:	681a      	ldr	r2, [r3, #0]
    4c40:	f240 535c 	movw	r3, #1372	; 0x55c
    4c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	429a      	cmp	r2, r3
    4c4c:	d106      	bne.n	4c5c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4c4e:	f240 3358 	movw	r3, #856	; 0x358
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	2200      	movs	r2, #0
    4c58:	601a      	str	r2, [r3, #0]
    4c5a:	e001      	b.n	4c60 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4c5c:	f000 fadc 	bl	5218 <vTaskSwitchContext>
				}
			}
		}
	}
    4c60:	3710      	adds	r7, #16
    4c62:	46bd      	mov	sp, r7
    4c64:	bd80      	pop	{r7, pc}
    4c66:	bf00      	nop

00004c68 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4c68:	b480      	push	{r7}
    4c6a:	b085      	sub	sp, #20
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4c70:	2300      	movs	r3, #0
    4c72:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4c78:	68bb      	ldr	r3, [r7, #8]
    4c7a:	695a      	ldr	r2, [r3, #20]
    4c7c:	f240 5348 	movw	r3, #1352	; 0x548
    4c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c84:	429a      	cmp	r2, r3
    4c86:	d10d      	bne.n	4ca4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4c88:	68bb      	ldr	r3, [r7, #8]
    4c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c8c:	f240 531c 	movw	r3, #1308	; 0x51c
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	429a      	cmp	r2, r3
    4c96:	d005      	beq.n	4ca4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4c98:	68bb      	ldr	r3, [r7, #8]
    4c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d101      	bne.n	4ca4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4ca0:	2301      	movs	r3, #1
    4ca2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4ca4:	68fb      	ldr	r3, [r7, #12]
	}
    4ca6:	4618      	mov	r0, r3
    4ca8:	3714      	adds	r7, #20
    4caa:	46bd      	mov	sp, r7
    4cac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb0:	4770      	bx	lr
    4cb2:	bf00      	nop

00004cb4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b084      	sub	sp, #16
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4cc0:	68fb      	ldr	r3, [r7, #12]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d043      	beq.n	4d4e <vTaskResume+0x9a>
    4cc6:	f240 3358 	movw	r3, #856	; 0x358
    4cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cce:	681b      	ldr	r3, [r3, #0]
    4cd0:	68fa      	ldr	r2, [r7, #12]
    4cd2:	429a      	cmp	r2, r3
    4cd4:	d03b      	beq.n	4d4e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4cd6:	f000 febd 	bl	5a54 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4cda:	68f8      	ldr	r0, [r7, #12]
    4cdc:	f7ff ffc4 	bl	4c68 <xTaskIsTaskSuspended>
    4ce0:	4603      	mov	r3, r0
    4ce2:	2b01      	cmp	r3, #1
    4ce4:	d131      	bne.n	4d4a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ce6:	68fb      	ldr	r3, [r7, #12]
    4ce8:	3304      	adds	r3, #4
    4cea:	4618      	mov	r0, r3
    4cec:	f7ff f900 	bl	3ef0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cf4:	f240 5368 	movw	r3, #1384	; 0x568
    4cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	429a      	cmp	r2, r3
    4d00:	d906      	bls.n	4d10 <vTaskResume+0x5c>
    4d02:	68fb      	ldr	r3, [r7, #12]
    4d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d06:	f240 5368 	movw	r3, #1384	; 0x568
    4d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0e:	601a      	str	r2, [r3, #0]
    4d10:	68fb      	ldr	r3, [r7, #12]
    4d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d14:	4613      	mov	r3, r2
    4d16:	009b      	lsls	r3, r3, #2
    4d18:	4413      	add	r3, r2
    4d1a:	009b      	lsls	r3, r3, #2
    4d1c:	f240 325c 	movw	r2, #860	; 0x35c
    4d20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d24:	441a      	add	r2, r3
    4d26:	68fb      	ldr	r3, [r7, #12]
    4d28:	3304      	adds	r3, #4
    4d2a:	4610      	mov	r0, r2
    4d2c:	4619      	mov	r1, r3
    4d2e:	f7ff f87f 	bl	3e30 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d36:	f240 3358 	movw	r3, #856	; 0x358
    4d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d42:	429a      	cmp	r2, r3
    4d44:	d301      	bcc.n	4d4a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4d46:	f000 fe77 	bl	5a38 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4d4a:	f000 fe99 	bl	5a80 <vPortExitCritical>
		}
	}
    4d4e:	3710      	adds	r7, #16
    4d50:	46bd      	mov	sp, r7
    4d52:	bd80      	pop	{r7, pc}

00004d54 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4d54:	b580      	push	{r7, lr}
    4d56:	b086      	sub	sp, #24
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d5c:	2300      	movs	r3, #0
    4d5e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d64:	2300      	movs	r3, #0
    4d66:	60fb      	str	r3, [r7, #12]
    4d68:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d6c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4d70:	6938      	ldr	r0, [r7, #16]
    4d72:	f7ff ff79 	bl	4c68 <xTaskIsTaskSuspended>
    4d76:	4603      	mov	r3, r0
    4d78:	2b01      	cmp	r3, #1
    4d7a:	d144      	bne.n	4e06 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4d7c:	f240 5370 	movw	r3, #1392	; 0x570
    4d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d84:	681b      	ldr	r3, [r3, #0]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d134      	bne.n	4df4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4d8a:	693b      	ldr	r3, [r7, #16]
    4d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d8e:	f240 3358 	movw	r3, #856	; 0x358
    4d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d9a:	429a      	cmp	r2, r3
    4d9c:	bf34      	ite	cc
    4d9e:	2300      	movcc	r3, #0
    4da0:	2301      	movcs	r3, #1
    4da2:	b2db      	uxtb	r3, r3
    4da4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4da6:	693b      	ldr	r3, [r7, #16]
    4da8:	3304      	adds	r3, #4
    4daa:	4618      	mov	r0, r3
    4dac:	f7ff f8a0 	bl	3ef0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4db0:	693b      	ldr	r3, [r7, #16]
    4db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4db4:	f240 5368 	movw	r3, #1384	; 0x568
    4db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	429a      	cmp	r2, r3
    4dc0:	d906      	bls.n	4dd0 <xTaskResumeFromISR+0x7c>
    4dc2:	693b      	ldr	r3, [r7, #16]
    4dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dc6:	f240 5368 	movw	r3, #1384	; 0x568
    4dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dce:	601a      	str	r2, [r3, #0]
    4dd0:	693b      	ldr	r3, [r7, #16]
    4dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dd4:	4613      	mov	r3, r2
    4dd6:	009b      	lsls	r3, r3, #2
    4dd8:	4413      	add	r3, r2
    4dda:	009b      	lsls	r3, r3, #2
    4ddc:	f240 325c 	movw	r2, #860	; 0x35c
    4de0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4de4:	441a      	add	r2, r3
    4de6:	693b      	ldr	r3, [r7, #16]
    4de8:	3304      	adds	r3, #4
    4dea:	4610      	mov	r0, r2
    4dec:	4619      	mov	r1, r3
    4dee:	f7ff f81f 	bl	3e30 <vListInsertEnd>
    4df2:	e008      	b.n	4e06 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4df4:	693b      	ldr	r3, [r7, #16]
    4df6:	3318      	adds	r3, #24
    4df8:	f240 501c 	movw	r0, #1308	; 0x51c
    4dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4e00:	4619      	mov	r1, r3
    4e02:	f7ff f815 	bl	3e30 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4e06:	f04f 0000 	mov.w	r0, #0
    4e0a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4e0e:	697b      	ldr	r3, [r7, #20]
	}
    4e10:	4618      	mov	r0, r3
    4e12:	3718      	adds	r7, #24
    4e14:	46bd      	mov	sp, r7
    4e16:	bd80      	pop	{r7, pc}

00004e18 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4e18:	b580      	push	{r7, lr}
    4e1a:	b086      	sub	sp, #24
    4e1c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4e1e:	2300      	movs	r3, #0
    4e20:	9300      	str	r3, [sp, #0]
    4e22:	2300      	movs	r3, #0
    4e24:	9301      	str	r3, [sp, #4]
    4e26:	2300      	movs	r3, #0
    4e28:	9302      	str	r3, [sp, #8]
    4e2a:	2300      	movs	r3, #0
    4e2c:	9303      	str	r3, [sp, #12]
    4e2e:	f245 40d1 	movw	r0, #21713	; 0x54d1
    4e32:	f2c0 0000 	movt	r0, #0
    4e36:	f246 5134 	movw	r1, #25908	; 0x6534
    4e3a:	f2c0 0100 	movt	r1, #0
    4e3e:	2280      	movs	r2, #128	; 0x80
    4e40:	2300      	movs	r3, #0
    4e42:	f7ff fc6b 	bl	471c <xTaskGenericCreate>
    4e46:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	2b01      	cmp	r3, #1
    4e4c:	d111      	bne.n	4e72 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4e4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e52:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4e56:	f240 536c 	movw	r3, #1388	; 0x56c
    4e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e5e:	2201      	movs	r2, #1
    4e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4e62:	f240 5360 	movw	r3, #1376	; 0x560
    4e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e6a:	2200      	movs	r2, #0
    4e6c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4e6e:	f000 fdb5 	bl	59dc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4e72:	3708      	adds	r7, #8
    4e74:	46bd      	mov	sp, r7
    4e76:	bd80      	pop	{r7, pc}

00004e78 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4e7c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e80:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4e84:	f240 536c 	movw	r3, #1388	; 0x56c
    4e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e8c:	2200      	movs	r2, #0
    4e8e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4e90:	f000 fdcc 	bl	5a2c <vPortEndScheduler>
}
    4e94:	bd80      	pop	{r7, pc}
    4e96:	bf00      	nop

00004e98 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4e98:	b480      	push	{r7}
    4e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4e9c:	f240 5370 	movw	r3, #1392	; 0x570
    4ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	1c5a      	adds	r2, r3, #1
    4ea8:	f240 5370 	movw	r3, #1392	; 0x570
    4eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb0:	601a      	str	r2, [r3, #0]
}
    4eb2:	46bd      	mov	sp, r7
    4eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb8:	4770      	bx	lr
    4eba:	bf00      	nop

00004ebc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4ebc:	b590      	push	{r4, r7, lr}
    4ebe:	b083      	sub	sp, #12
    4ec0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4ec2:	2300      	movs	r3, #0
    4ec4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4ec6:	f000 fdc5 	bl	5a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4eca:	f240 5370 	movw	r3, #1392	; 0x570
    4ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	1e5a      	subs	r2, r3, #1
    4ed6:	f240 5370 	movw	r3, #1392	; 0x570
    4eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ede:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4ee0:	f240 5370 	movw	r3, #1392	; 0x570
    4ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee8:	681b      	ldr	r3, [r3, #0]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d177      	bne.n	4fde <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4eee:	f240 535c 	movw	r3, #1372	; 0x55c
    4ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef6:	681b      	ldr	r3, [r3, #0]
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d070      	beq.n	4fde <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4efc:	2300      	movs	r3, #0
    4efe:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4f00:	e036      	b.n	4f70 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4f02:	f240 531c 	movw	r3, #1308	; 0x51c
    4f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0a:	68db      	ldr	r3, [r3, #12]
    4f0c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4f0e:	f104 0318 	add.w	r3, r4, #24
    4f12:	4618      	mov	r0, r3
    4f14:	f7fe ffec 	bl	3ef0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f18:	1d23      	adds	r3, r4, #4
    4f1a:	4618      	mov	r0, r3
    4f1c:	f7fe ffe8 	bl	3ef0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f22:	f240 5368 	movw	r3, #1384	; 0x568
    4f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d905      	bls.n	4f3c <xTaskResumeAll+0x80>
    4f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f32:	f240 5368 	movw	r3, #1384	; 0x568
    4f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3a:	601a      	str	r2, [r3, #0]
    4f3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f3e:	4613      	mov	r3, r2
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	4413      	add	r3, r2
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	f240 325c 	movw	r2, #860	; 0x35c
    4f4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f4e:	441a      	add	r2, r3
    4f50:	1d23      	adds	r3, r4, #4
    4f52:	4610      	mov	r0, r2
    4f54:	4619      	mov	r1, r3
    4f56:	f7fe ff6b 	bl	3e30 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f5c:	f240 3358 	movw	r3, #856	; 0x358
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f68:	429a      	cmp	r2, r3
    4f6a:	d301      	bcc.n	4f70 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4f6c:	2301      	movs	r3, #1
    4f6e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4f70:	f240 531c 	movw	r3, #1308	; 0x51c
    4f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d1c1      	bne.n	4f02 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4f7e:	f240 5374 	movw	r3, #1396	; 0x574
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d014      	beq.n	4fb6 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4f8c:	e00c      	b.n	4fa8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4f8e:	f000 f865 	bl	505c <vTaskIncrementTick>
						--uxMissedTicks;
    4f92:	f240 5374 	movw	r3, #1396	; 0x574
    4f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9a:	681b      	ldr	r3, [r3, #0]
    4f9c:	1e5a      	subs	r2, r3, #1
    4f9e:	f240 5374 	movw	r3, #1396	; 0x574
    4fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4fa8:	f240 5374 	movw	r3, #1396	; 0x574
    4fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d1eb      	bne.n	4f8e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4fb6:	683b      	ldr	r3, [r7, #0]
    4fb8:	2b01      	cmp	r3, #1
    4fba:	d006      	beq.n	4fca <xTaskResumeAll+0x10e>
    4fbc:	f240 5378 	movw	r3, #1400	; 0x578
    4fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	2b01      	cmp	r3, #1
    4fc8:	d109      	bne.n	4fde <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4fca:	2301      	movs	r3, #1
    4fcc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4fce:	f240 5378 	movw	r3, #1400	; 0x578
    4fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd6:	2200      	movs	r2, #0
    4fd8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4fda:	f000 fd2d 	bl	5a38 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4fde:	f000 fd4f 	bl	5a80 <vPortExitCritical>

	return xAlreadyYielded;
    4fe2:	687b      	ldr	r3, [r7, #4]
}
    4fe4:	4618      	mov	r0, r3
    4fe6:	370c      	adds	r7, #12
    4fe8:	46bd      	mov	sp, r7
    4fea:	bd90      	pop	{r4, r7, pc}

00004fec <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4ff2:	f000 fd2f 	bl	5a54 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4ff6:	f240 5360 	movw	r3, #1376	; 0x560
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	681b      	ldr	r3, [r3, #0]
    5000:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5002:	f000 fd3d 	bl	5a80 <vPortExitCritical>

	return xTicks;
    5006:	687b      	ldr	r3, [r7, #4]
}
    5008:	4618      	mov	r0, r3
    500a:	3708      	adds	r7, #8
    500c:	46bd      	mov	sp, r7
    500e:	bd80      	pop	{r7, pc}

00005010 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5010:	b480      	push	{r7}
    5012:	b083      	sub	sp, #12
    5014:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5016:	2300      	movs	r3, #0
    5018:	607b      	str	r3, [r7, #4]
    501a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    501e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5022:	f240 5360 	movw	r3, #1376	; 0x560
    5026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    502e:	f04f 0000 	mov.w	r0, #0
    5032:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5036:	683b      	ldr	r3, [r7, #0]
}
    5038:	4618      	mov	r0, r3
    503a:	370c      	adds	r7, #12
    503c:	46bd      	mov	sp, r7
    503e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5042:	4770      	bx	lr

00005044 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5044:	b480      	push	{r7}
    5046:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5048:	f240 535c 	movw	r3, #1372	; 0x55c
    504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5050:	681b      	ldr	r3, [r3, #0]
}
    5052:	4618      	mov	r0, r3
    5054:	46bd      	mov	sp, r7
    5056:	f85d 7b04 	ldr.w	r7, [sp], #4
    505a:	4770      	bx	lr

0000505c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    505c:	b580      	push	{r7, lr}
    505e:	b084      	sub	sp, #16
    5060:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5062:	f240 5370 	movw	r3, #1392	; 0x570
    5066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506a:	681b      	ldr	r3, [r3, #0]
    506c:	2b00      	cmp	r3, #0
    506e:	f040 80b9 	bne.w	51e4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5072:	f240 5360 	movw	r3, #1376	; 0x560
    5076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	1c5a      	adds	r2, r3, #1
    507e:	f240 5360 	movw	r3, #1376	; 0x560
    5082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5086:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5088:	f240 5360 	movw	r3, #1376	; 0x560
    508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5090:	681b      	ldr	r3, [r3, #0]
    5092:	2b00      	cmp	r3, #0
    5094:	d13f      	bne.n	5116 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5096:	f240 5314 	movw	r3, #1300	; 0x514
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    50a2:	f240 5318 	movw	r3, #1304	; 0x518
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	681a      	ldr	r2, [r3, #0]
    50ac:	f240 5314 	movw	r3, #1300	; 0x514
    50b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    50b6:	f240 5318 	movw	r3, #1304	; 0x518
    50ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50be:	68fa      	ldr	r2, [r7, #12]
    50c0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    50c2:	f240 537c 	movw	r3, #1404	; 0x57c
    50c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ca:	681b      	ldr	r3, [r3, #0]
    50cc:	1c5a      	adds	r2, r3, #1
    50ce:	f240 537c 	movw	r3, #1404	; 0x57c
    50d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    50d8:	f240 5314 	movw	r3, #1300	; 0x514
    50dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	681b      	ldr	r3, [r3, #0]
    50e4:	2b00      	cmp	r3, #0
    50e6:	d107      	bne.n	50f8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    50e8:	f240 032c 	movw	r3, #44	; 0x2c
    50ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f0:	f04f 32ff 	mov.w	r2, #4294967295
    50f4:	601a      	str	r2, [r3, #0]
    50f6:	e00e      	b.n	5116 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    50f8:	f240 5314 	movw	r3, #1300	; 0x514
    50fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	68db      	ldr	r3, [r3, #12]
    5104:	68db      	ldr	r3, [r3, #12]
    5106:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5108:	68bb      	ldr	r3, [r7, #8]
    510a:	685a      	ldr	r2, [r3, #4]
    510c:	f240 032c 	movw	r3, #44	; 0x2c
    5110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5114:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5116:	f240 5360 	movw	r3, #1376	; 0x560
    511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511e:	681a      	ldr	r2, [r3, #0]
    5120:	f240 032c 	movw	r3, #44	; 0x2c
    5124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	429a      	cmp	r2, r3
    512c:	d359      	bcc.n	51e2 <vTaskIncrementTick+0x186>
    512e:	f240 5314 	movw	r3, #1300	; 0x514
    5132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	2b00      	cmp	r3, #0
    513c:	d107      	bne.n	514e <vTaskIncrementTick+0xf2>
    513e:	f240 032c 	movw	r3, #44	; 0x2c
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	f04f 32ff 	mov.w	r2, #4294967295
    514a:	601a      	str	r2, [r3, #0]
    514c:	e049      	b.n	51e2 <vTaskIncrementTick+0x186>
    514e:	f240 5314 	movw	r3, #1300	; 0x514
    5152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	68db      	ldr	r3, [r3, #12]
    515a:	68db      	ldr	r3, [r3, #12]
    515c:	60bb      	str	r3, [r7, #8]
    515e:	68bb      	ldr	r3, [r7, #8]
    5160:	685b      	ldr	r3, [r3, #4]
    5162:	607b      	str	r3, [r7, #4]
    5164:	f240 5360 	movw	r3, #1376	; 0x560
    5168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516c:	681a      	ldr	r2, [r3, #0]
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	429a      	cmp	r2, r3
    5172:	d206      	bcs.n	5182 <vTaskIncrementTick+0x126>
    5174:	f240 032c 	movw	r3, #44	; 0x2c
    5178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517c:	687a      	ldr	r2, [r7, #4]
    517e:	601a      	str	r2, [r3, #0]
    5180:	e02f      	b.n	51e2 <vTaskIncrementTick+0x186>
    5182:	68bb      	ldr	r3, [r7, #8]
    5184:	3304      	adds	r3, #4
    5186:	4618      	mov	r0, r3
    5188:	f7fe feb2 	bl	3ef0 <vListRemove>
    518c:	68bb      	ldr	r3, [r7, #8]
    518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5190:	2b00      	cmp	r3, #0
    5192:	d004      	beq.n	519e <vTaskIncrementTick+0x142>
    5194:	68bb      	ldr	r3, [r7, #8]
    5196:	3318      	adds	r3, #24
    5198:	4618      	mov	r0, r3
    519a:	f7fe fea9 	bl	3ef0 <vListRemove>
    519e:	68bb      	ldr	r3, [r7, #8]
    51a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51a2:	f240 5368 	movw	r3, #1384	; 0x568
    51a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	429a      	cmp	r2, r3
    51ae:	d906      	bls.n	51be <vTaskIncrementTick+0x162>
    51b0:	68bb      	ldr	r3, [r7, #8]
    51b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51b4:	f240 5368 	movw	r3, #1384	; 0x568
    51b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51bc:	601a      	str	r2, [r3, #0]
    51be:	68bb      	ldr	r3, [r7, #8]
    51c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51c2:	4613      	mov	r3, r2
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4413      	add	r3, r2
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	f240 325c 	movw	r2, #860	; 0x35c
    51ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51d2:	441a      	add	r2, r3
    51d4:	68bb      	ldr	r3, [r7, #8]
    51d6:	3304      	adds	r3, #4
    51d8:	4610      	mov	r0, r2
    51da:	4619      	mov	r1, r3
    51dc:	f7fe fe28 	bl	3e30 <vListInsertEnd>
    51e0:	e7a5      	b.n	512e <vTaskIncrementTick+0xd2>
    51e2:	e00c      	b.n	51fe <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    51e4:	f240 5374 	movw	r3, #1396	; 0x574
    51e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	1c5a      	adds	r2, r3, #1
    51f0:	f240 5374 	movw	r3, #1396	; 0x574
    51f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    51fa:	f001 f807 	bl	620c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    51fe:	f240 5374 	movw	r3, #1396	; 0x574
    5202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5206:	681b      	ldr	r3, [r3, #0]
    5208:	2b00      	cmp	r3, #0
    520a:	d101      	bne.n	5210 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    520c:	f000 fffe 	bl	620c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5210:	3710      	adds	r7, #16
    5212:	46bd      	mov	sp, r7
    5214:	bd80      	pop	{r7, pc}
    5216:	bf00      	nop

00005218 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5218:	b580      	push	{r7, lr}
    521a:	b082      	sub	sp, #8
    521c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    521e:	f240 5370 	movw	r3, #1392	; 0x570
    5222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5226:	681b      	ldr	r3, [r3, #0]
    5228:	2b00      	cmp	r3, #0
    522a:	d006      	beq.n	523a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    522c:	f240 5378 	movw	r3, #1400	; 0x578
    5230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5234:	2201      	movs	r2, #1
    5236:	601a      	str	r2, [r3, #0]
    5238:	e047      	b.n	52ca <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    523a:	f000 ffe1 	bl	6200 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    523e:	e00a      	b.n	5256 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5240:	f240 5368 	movw	r3, #1384	; 0x568
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	1e5a      	subs	r2, r3, #1
    524c:	f240 5368 	movw	r3, #1384	; 0x568
    5250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5254:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5256:	f240 5368 	movw	r3, #1384	; 0x568
    525a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525e:	6819      	ldr	r1, [r3, #0]
    5260:	f240 325c 	movw	r2, #860	; 0x35c
    5264:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5268:	460b      	mov	r3, r1
    526a:	009b      	lsls	r3, r3, #2
    526c:	440b      	add	r3, r1
    526e:	009b      	lsls	r3, r3, #2
    5270:	4413      	add	r3, r2
    5272:	681b      	ldr	r3, [r3, #0]
    5274:	2b00      	cmp	r3, #0
    5276:	d0e3      	beq.n	5240 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5278:	f240 5368 	movw	r3, #1384	; 0x568
    527c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5280:	681a      	ldr	r2, [r3, #0]
    5282:	4613      	mov	r3, r2
    5284:	009b      	lsls	r3, r3, #2
    5286:	4413      	add	r3, r2
    5288:	009b      	lsls	r3, r3, #2
    528a:	f240 325c 	movw	r2, #860	; 0x35c
    528e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5292:	4413      	add	r3, r2
    5294:	607b      	str	r3, [r7, #4]
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	685b      	ldr	r3, [r3, #4]
    529a:	685a      	ldr	r2, [r3, #4]
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	605a      	str	r2, [r3, #4]
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	685a      	ldr	r2, [r3, #4]
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	3308      	adds	r3, #8
    52a8:	429a      	cmp	r2, r3
    52aa:	d104      	bne.n	52b6 <vTaskSwitchContext+0x9e>
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	685b      	ldr	r3, [r3, #4]
    52b0:	685a      	ldr	r2, [r3, #4]
    52b2:	687b      	ldr	r3, [r7, #4]
    52b4:	605a      	str	r2, [r3, #4]
    52b6:	687b      	ldr	r3, [r7, #4]
    52b8:	685b      	ldr	r3, [r3, #4]
    52ba:	68da      	ldr	r2, [r3, #12]
    52bc:	f240 3358 	movw	r3, #856	; 0x358
    52c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    52c6:	f000 ff95 	bl	61f4 <myTraceSwitchedIn>
	}
}
    52ca:	3708      	adds	r7, #8
    52cc:	46bd      	mov	sp, r7
    52ce:	bd80      	pop	{r7, pc}

000052d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    52d0:	b580      	push	{r7, lr}
    52d2:	b084      	sub	sp, #16
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    52d8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    52da:	f240 3358 	movw	r3, #856	; 0x358
    52de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e2:	681b      	ldr	r3, [r3, #0]
    52e4:	3318      	adds	r3, #24
    52e6:	6878      	ldr	r0, [r7, #4]
    52e8:	4619      	mov	r1, r3
    52ea:	f7fe fdc9 	bl	3e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    52ee:	f240 3358 	movw	r3, #856	; 0x358
    52f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f6:	681b      	ldr	r3, [r3, #0]
    52f8:	3304      	adds	r3, #4
    52fa:	4618      	mov	r0, r3
    52fc:	f7fe fdf8 	bl	3ef0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5300:	683b      	ldr	r3, [r7, #0]
    5302:	f1b3 3fff 	cmp.w	r3, #4294967295
    5306:	d10d      	bne.n	5324 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5308:	f240 3358 	movw	r3, #856	; 0x358
    530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	3304      	adds	r3, #4
    5314:	f240 5048 	movw	r0, #1352	; 0x548
    5318:	f2c2 0000 	movt	r0, #8192	; 0x2000
    531c:	4619      	mov	r1, r3
    531e:	f7fe fd87 	bl	3e30 <vListInsertEnd>
    5322:	e00a      	b.n	533a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5324:	f240 5360 	movw	r3, #1376	; 0x560
    5328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532c:	681a      	ldr	r2, [r3, #0]
    532e:	683b      	ldr	r3, [r7, #0]
    5330:	4413      	add	r3, r2
    5332:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5334:	68f8      	ldr	r0, [r7, #12]
    5336:	f000 f99f 	bl	5678 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    533a:	3710      	adds	r7, #16
    533c:	46bd      	mov	sp, r7
    533e:	bd80      	pop	{r7, pc}

00005340 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5340:	b580      	push	{r7, lr}
    5342:	b084      	sub	sp, #16
    5344:	af00      	add	r7, sp, #0
    5346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	68db      	ldr	r3, [r3, #12]
    534c:	68db      	ldr	r3, [r3, #12]
    534e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5350:	68bb      	ldr	r3, [r7, #8]
    5352:	3318      	adds	r3, #24
    5354:	4618      	mov	r0, r3
    5356:	f7fe fdcb 	bl	3ef0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    535a:	f240 5370 	movw	r3, #1392	; 0x570
    535e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	2b00      	cmp	r3, #0
    5366:	d126      	bne.n	53b6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5368:	68bb      	ldr	r3, [r7, #8]
    536a:	3304      	adds	r3, #4
    536c:	4618      	mov	r0, r3
    536e:	f7fe fdbf 	bl	3ef0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5372:	68bb      	ldr	r3, [r7, #8]
    5374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5376:	f240 5368 	movw	r3, #1384	; 0x568
    537a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537e:	681b      	ldr	r3, [r3, #0]
    5380:	429a      	cmp	r2, r3
    5382:	d906      	bls.n	5392 <xTaskRemoveFromEventList+0x52>
    5384:	68bb      	ldr	r3, [r7, #8]
    5386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5388:	f240 5368 	movw	r3, #1384	; 0x568
    538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5390:	601a      	str	r2, [r3, #0]
    5392:	68bb      	ldr	r3, [r7, #8]
    5394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5396:	4613      	mov	r3, r2
    5398:	009b      	lsls	r3, r3, #2
    539a:	4413      	add	r3, r2
    539c:	009b      	lsls	r3, r3, #2
    539e:	f240 325c 	movw	r2, #860	; 0x35c
    53a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53a6:	441a      	add	r2, r3
    53a8:	68bb      	ldr	r3, [r7, #8]
    53aa:	3304      	adds	r3, #4
    53ac:	4610      	mov	r0, r2
    53ae:	4619      	mov	r1, r3
    53b0:	f7fe fd3e 	bl	3e30 <vListInsertEnd>
    53b4:	e008      	b.n	53c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    53b6:	68bb      	ldr	r3, [r7, #8]
    53b8:	3318      	adds	r3, #24
    53ba:	f240 501c 	movw	r0, #1308	; 0x51c
    53be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53c2:	4619      	mov	r1, r3
    53c4:	f7fe fd34 	bl	3e30 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    53c8:	68bb      	ldr	r3, [r7, #8]
    53ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53cc:	f240 3358 	movw	r3, #856	; 0x358
    53d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d4:	681b      	ldr	r3, [r3, #0]
    53d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53d8:	429a      	cmp	r2, r3
    53da:	d302      	bcc.n	53e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    53dc:	2301      	movs	r3, #1
    53de:	60fb      	str	r3, [r7, #12]
    53e0:	e001      	b.n	53e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    53e2:	2300      	movs	r3, #0
    53e4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    53e6:	68fb      	ldr	r3, [r7, #12]
}
    53e8:	4618      	mov	r0, r3
    53ea:	3710      	adds	r7, #16
    53ec:	46bd      	mov	sp, r7
    53ee:	bd80      	pop	{r7, pc}

000053f0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    53f0:	b480      	push	{r7}
    53f2:	b083      	sub	sp, #12
    53f4:	af00      	add	r7, sp, #0
    53f6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    53f8:	f240 537c 	movw	r3, #1404	; 0x57c
    53fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5400:	681a      	ldr	r2, [r3, #0]
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5406:	f240 5360 	movw	r3, #1376	; 0x560
    540a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540e:	681a      	ldr	r2, [r3, #0]
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	605a      	str	r2, [r3, #4]
}
    5414:	370c      	adds	r7, #12
    5416:	46bd      	mov	sp, r7
    5418:	f85d 7b04 	ldr.w	r7, [sp], #4
    541c:	4770      	bx	lr
    541e:	bf00      	nop

00005420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5420:	b580      	push	{r7, lr}
    5422:	b084      	sub	sp, #16
    5424:	af00      	add	r7, sp, #0
    5426:	6078      	str	r0, [r7, #4]
    5428:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    542a:	f000 fb13 	bl	5a54 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    542e:	683b      	ldr	r3, [r7, #0]
    5430:	681b      	ldr	r3, [r3, #0]
    5432:	f1b3 3fff 	cmp.w	r3, #4294967295
    5436:	d102      	bne.n	543e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5438:	2300      	movs	r3, #0
    543a:	60fb      	str	r3, [r7, #12]
    543c:	e035      	b.n	54aa <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	681a      	ldr	r2, [r3, #0]
    5442:	f240 537c 	movw	r3, #1404	; 0x57c
    5446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	429a      	cmp	r2, r3
    544e:	d00b      	beq.n	5468 <xTaskCheckForTimeOut+0x48>
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	685a      	ldr	r2, [r3, #4]
    5454:	f240 5360 	movw	r3, #1376	; 0x560
    5458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545c:	681b      	ldr	r3, [r3, #0]
    545e:	429a      	cmp	r2, r3
    5460:	d802      	bhi.n	5468 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5462:	2301      	movs	r3, #1
    5464:	60fb      	str	r3, [r7, #12]
    5466:	e020      	b.n	54aa <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5468:	f240 5360 	movw	r3, #1376	; 0x560
    546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5470:	681a      	ldr	r2, [r3, #0]
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	685b      	ldr	r3, [r3, #4]
    5476:	1ad2      	subs	r2, r2, r3
    5478:	683b      	ldr	r3, [r7, #0]
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	429a      	cmp	r2, r3
    547e:	d212      	bcs.n	54a6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5480:	683b      	ldr	r3, [r7, #0]
    5482:	681a      	ldr	r2, [r3, #0]
    5484:	687b      	ldr	r3, [r7, #4]
    5486:	6859      	ldr	r1, [r3, #4]
    5488:	f240 5360 	movw	r3, #1376	; 0x560
    548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	1acb      	subs	r3, r1, r3
    5494:	441a      	add	r2, r3
    5496:	683b      	ldr	r3, [r7, #0]
    5498:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    549a:	6878      	ldr	r0, [r7, #4]
    549c:	f7ff ffa8 	bl	53f0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    54a0:	2300      	movs	r3, #0
    54a2:	60fb      	str	r3, [r7, #12]
    54a4:	e001      	b.n	54aa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    54a6:	2301      	movs	r3, #1
    54a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    54aa:	f000 fae9 	bl	5a80 <vPortExitCritical>

	return xReturn;
    54ae:	68fb      	ldr	r3, [r7, #12]
}
    54b0:	4618      	mov	r0, r3
    54b2:	3710      	adds	r7, #16
    54b4:	46bd      	mov	sp, r7
    54b6:	bd80      	pop	{r7, pc}

000054b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    54b8:	b480      	push	{r7}
    54ba:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    54bc:	f240 5378 	movw	r3, #1400	; 0x578
    54c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c4:	2201      	movs	r2, #1
    54c6:	601a      	str	r2, [r3, #0]
}
    54c8:	46bd      	mov	sp, r7
    54ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ce:	4770      	bx	lr

000054d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b082      	sub	sp, #8
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    54d8:	f000 f886 	bl	55e8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    54dc:	f000 faac 	bl	5a38 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    54e0:	e7fa      	b.n	54d8 <prvIdleTask+0x8>
    54e2:	bf00      	nop

000054e4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    54e4:	b580      	push	{r7, lr}
    54e6:	b084      	sub	sp, #16
    54e8:	af00      	add	r7, sp, #0
    54ea:	60f8      	str	r0, [r7, #12]
    54ec:	60b9      	str	r1, [r7, #8]
    54ee:	607a      	str	r2, [r7, #4]
    54f0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    54f2:	68fb      	ldr	r3, [r7, #12]
    54f4:	3334      	adds	r3, #52	; 0x34
    54f6:	4618      	mov	r0, r3
    54f8:	68b9      	ldr	r1, [r7, #8]
    54fa:	2210      	movs	r2, #16
    54fc:	f000 ff6c 	bl	63d8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5500:	68fb      	ldr	r3, [r7, #12]
    5502:	2200      	movs	r2, #0
    5504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	2b13      	cmp	r3, #19
    550c:	d901      	bls.n	5512 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    550e:	2313      	movs	r3, #19
    5510:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	687a      	ldr	r2, [r7, #4]
    5516:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5518:	68fb      	ldr	r3, [r7, #12]
    551a:	687a      	ldr	r2, [r7, #4]
    551c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	3304      	adds	r3, #4
    5522:	4618      	mov	r0, r3
    5524:	f7fe fc78 	bl	3e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5528:	68fb      	ldr	r3, [r7, #12]
    552a:	3318      	adds	r3, #24
    552c:	4618      	mov	r0, r3
    552e:	f7fe fc73 	bl	3e18 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5532:	68fb      	ldr	r3, [r7, #12]
    5534:	68fa      	ldr	r2, [r7, #12]
    5536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	f1c3 0214 	rsb	r2, r3, #20
    553e:	68fb      	ldr	r3, [r7, #12]
    5540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5542:	68fb      	ldr	r3, [r7, #12]
    5544:	68fa      	ldr	r2, [r7, #12]
    5546:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5548:	3710      	adds	r7, #16
    554a:	46bd      	mov	sp, r7
    554c:	bd80      	pop	{r7, pc}
    554e:	bf00      	nop

00005550 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5550:	b580      	push	{r7, lr}
    5552:	b082      	sub	sp, #8
    5554:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5556:	2300      	movs	r3, #0
    5558:	607b      	str	r3, [r7, #4]
    555a:	e00f      	b.n	557c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    555c:	687a      	ldr	r2, [r7, #4]
    555e:	4613      	mov	r3, r2
    5560:	009b      	lsls	r3, r3, #2
    5562:	4413      	add	r3, r2
    5564:	009b      	lsls	r3, r3, #2
    5566:	f240 325c 	movw	r2, #860	; 0x35c
    556a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    556e:	4413      	add	r3, r2
    5570:	4618      	mov	r0, r3
    5572:	f7fe fc31 	bl	3dd8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	3301      	adds	r3, #1
    557a:	607b      	str	r3, [r7, #4]
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	2b13      	cmp	r3, #19
    5580:	d9ec      	bls.n	555c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5582:	f240 40ec 	movw	r0, #1260	; 0x4ec
    5586:	f2c2 0000 	movt	r0, #8192	; 0x2000
    558a:	f7fe fc25 	bl	3dd8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    558e:	f240 5000 	movw	r0, #1280	; 0x500
    5592:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5596:	f7fe fc1f 	bl	3dd8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    559a:	f240 501c 	movw	r0, #1308	; 0x51c
    559e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55a2:	f7fe fc19 	bl	3dd8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    55a6:	f240 5030 	movw	r0, #1328	; 0x530
    55aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55ae:	f7fe fc13 	bl	3dd8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    55b2:	f240 5048 	movw	r0, #1352	; 0x548
    55b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55ba:	f7fe fc0d 	bl	3dd8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    55be:	f240 5314 	movw	r3, #1300	; 0x514
    55c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c6:	f240 42ec 	movw	r2, #1260	; 0x4ec
    55ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    55d0:	f240 5318 	movw	r3, #1304	; 0x518
    55d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d8:	f240 5200 	movw	r2, #1280	; 0x500
    55dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55e0:	601a      	str	r2, [r3, #0]
}
    55e2:	3708      	adds	r7, #8
    55e4:	46bd      	mov	sp, r7
    55e6:	bd80      	pop	{r7, pc}

000055e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    55e8:	b580      	push	{r7, lr}
    55ea:	b082      	sub	sp, #8
    55ec:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    55ee:	f240 5344 	movw	r3, #1348	; 0x544
    55f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f6:	681b      	ldr	r3, [r3, #0]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d03a      	beq.n	5672 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    55fc:	f7ff fc4c 	bl	4e98 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5600:	f240 5330 	movw	r3, #1328	; 0x530
    5604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	2b00      	cmp	r3, #0
    560c:	bf14      	ite	ne
    560e:	2300      	movne	r3, #0
    5610:	2301      	moveq	r3, #1
    5612:	b2db      	uxtb	r3, r3
    5614:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5616:	f7ff fc51 	bl	4ebc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	2b00      	cmp	r3, #0
    561e:	d128      	bne.n	5672 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5620:	f000 fa18 	bl	5a54 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5624:	f240 5330 	movw	r3, #1328	; 0x530
    5628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562c:	68db      	ldr	r3, [r3, #12]
    562e:	68db      	ldr	r3, [r3, #12]
    5630:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5632:	683b      	ldr	r3, [r7, #0]
    5634:	3304      	adds	r3, #4
    5636:	4618      	mov	r0, r3
    5638:	f7fe fc5a 	bl	3ef0 <vListRemove>
					--uxCurrentNumberOfTasks;
    563c:	f240 535c 	movw	r3, #1372	; 0x55c
    5640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	1e5a      	subs	r2, r3, #1
    5648:	f240 535c 	movw	r3, #1372	; 0x55c
    564c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5650:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5652:	f240 5344 	movw	r3, #1348	; 0x544
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	1e5a      	subs	r2, r3, #1
    565e:	f240 5344 	movw	r3, #1348	; 0x544
    5662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5666:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5668:	f000 fa0a 	bl	5a80 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    566c:	6838      	ldr	r0, [r7, #0]
    566e:	f000 f879 	bl	5764 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5672:	3708      	adds	r7, #8
    5674:	46bd      	mov	sp, r7
    5676:	bd80      	pop	{r7, pc}

00005678 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5678:	b580      	push	{r7, lr}
    567a:	b082      	sub	sp, #8
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5680:	f240 3358 	movw	r3, #856	; 0x358
    5684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5688:	681b      	ldr	r3, [r3, #0]
    568a:	687a      	ldr	r2, [r7, #4]
    568c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    568e:	f240 5360 	movw	r3, #1376	; 0x560
    5692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	687a      	ldr	r2, [r7, #4]
    569a:	429a      	cmp	r2, r3
    569c:	d20f      	bcs.n	56be <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    569e:	f240 5318 	movw	r3, #1304	; 0x518
    56a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a6:	681a      	ldr	r2, [r3, #0]
    56a8:	f240 3358 	movw	r3, #856	; 0x358
    56ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	3304      	adds	r3, #4
    56b4:	4610      	mov	r0, r2
    56b6:	4619      	mov	r1, r3
    56b8:	f7fe fbe2 	bl	3e80 <vListInsert>
    56bc:	e01c      	b.n	56f8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56be:	f240 5314 	movw	r3, #1300	; 0x514
    56c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c6:	681a      	ldr	r2, [r3, #0]
    56c8:	f240 3358 	movw	r3, #856	; 0x358
    56cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	3304      	adds	r3, #4
    56d4:	4610      	mov	r0, r2
    56d6:	4619      	mov	r1, r3
    56d8:	f7fe fbd2 	bl	3e80 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    56dc:	f240 032c 	movw	r3, #44	; 0x2c
    56e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	687a      	ldr	r2, [r7, #4]
    56e8:	429a      	cmp	r2, r3
    56ea:	d205      	bcs.n	56f8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    56ec:	f240 032c 	movw	r3, #44	; 0x2c
    56f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f4:	687a      	ldr	r2, [r7, #4]
    56f6:	601a      	str	r2, [r3, #0]
		}
	}
}
    56f8:	3708      	adds	r7, #8
    56fa:	46bd      	mov	sp, r7
    56fc:	bd80      	pop	{r7, pc}
    56fe:	bf00      	nop

00005700 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5700:	b580      	push	{r7, lr}
    5702:	b084      	sub	sp, #16
    5704:	af00      	add	r7, sp, #0
    5706:	4603      	mov	r3, r0
    5708:	6039      	str	r1, [r7, #0]
    570a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    570c:	2050      	movs	r0, #80	; 0x50
    570e:	f000 fa19 	bl	5b44 <pvPortMalloc>
    5712:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5714:	68fb      	ldr	r3, [r7, #12]
    5716:	2b00      	cmp	r3, #0
    5718:	d01f      	beq.n	575a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    571a:	683b      	ldr	r3, [r7, #0]
    571c:	2b00      	cmp	r3, #0
    571e:	d106      	bne.n	572e <prvAllocateTCBAndStack+0x2e>
    5720:	88fb      	ldrh	r3, [r7, #6]
    5722:	009b      	lsls	r3, r3, #2
    5724:	4618      	mov	r0, r3
    5726:	f000 fa0d 	bl	5b44 <pvPortMalloc>
    572a:	4603      	mov	r3, r0
    572c:	e000      	b.n	5730 <prvAllocateTCBAndStack+0x30>
    572e:	683b      	ldr	r3, [r7, #0]
    5730:	68fa      	ldr	r2, [r7, #12]
    5732:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5734:	68fb      	ldr	r3, [r7, #12]
    5736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5738:	2b00      	cmp	r3, #0
    573a:	d105      	bne.n	5748 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    573c:	68f8      	ldr	r0, [r7, #12]
    573e:	f000 fac5 	bl	5ccc <vPortFree>
			pxNewTCB = NULL;
    5742:	2300      	movs	r3, #0
    5744:	60fb      	str	r3, [r7, #12]
    5746:	e008      	b.n	575a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5748:	68fb      	ldr	r3, [r7, #12]
    574a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    574c:	88fb      	ldrh	r3, [r7, #6]
    574e:	009b      	lsls	r3, r3, #2
    5750:	4610      	mov	r0, r2
    5752:	21a5      	movs	r1, #165	; 0xa5
    5754:	461a      	mov	r2, r3
    5756:	f000 fdef 	bl	6338 <memset>
		}
	}

	return pxNewTCB;
    575a:	68fb      	ldr	r3, [r7, #12]
}
    575c:	4618      	mov	r0, r3
    575e:	3710      	adds	r7, #16
    5760:	46bd      	mov	sp, r7
    5762:	bd80      	pop	{r7, pc}

00005764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5770:	4618      	mov	r0, r3
    5772:	f000 faab 	bl	5ccc <vPortFree>
		vPortFree( pxTCB );
    5776:	6878      	ldr	r0, [r7, #4]
    5778:	f000 faa8 	bl	5ccc <vPortFree>
	}
    577c:	3708      	adds	r7, #8
    577e:	46bd      	mov	sp, r7
    5780:	bd80      	pop	{r7, pc}
    5782:	bf00      	nop

00005784 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5784:	b480      	push	{r7}
    5786:	b083      	sub	sp, #12
    5788:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    578a:	f240 3358 	movw	r3, #856	; 0x358
    578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	607b      	str	r3, [r7, #4]

		return xReturn;
    5796:	687b      	ldr	r3, [r7, #4]
	}
    5798:	4618      	mov	r0, r3
    579a:	370c      	adds	r7, #12
    579c:	46bd      	mov	sp, r7
    579e:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a2:	4770      	bx	lr

000057a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    57a4:	b580      	push	{r7, lr}
    57a6:	b084      	sub	sp, #16
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    57ac:	687b      	ldr	r3, [r7, #4]
    57ae:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    57b0:	68fb      	ldr	r3, [r7, #12]
    57b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57b4:	f240 3358 	movw	r3, #856	; 0x358
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    57c0:	429a      	cmp	r2, r3
    57c2:	d24f      	bcs.n	5864 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    57c4:	f240 3358 	movw	r3, #856	; 0x358
    57c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57cc:	681b      	ldr	r3, [r3, #0]
    57ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    57d0:	f1c3 0214 	rsb	r2, r3, #20
    57d4:	68fb      	ldr	r3, [r7, #12]
    57d6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    57d8:	68fb      	ldr	r3, [r7, #12]
    57da:	6959      	ldr	r1, [r3, #20]
    57dc:	68fb      	ldr	r3, [r7, #12]
    57de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57e0:	4613      	mov	r3, r2
    57e2:	009b      	lsls	r3, r3, #2
    57e4:	4413      	add	r3, r2
    57e6:	009b      	lsls	r3, r3, #2
    57e8:	f240 325c 	movw	r2, #860	; 0x35c
    57ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57f0:	4413      	add	r3, r2
    57f2:	4299      	cmp	r1, r3
    57f4:	d12e      	bne.n	5854 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    57f6:	68fb      	ldr	r3, [r7, #12]
    57f8:	3304      	adds	r3, #4
    57fa:	4618      	mov	r0, r3
    57fc:	f7fe fb78 	bl	3ef0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5800:	f240 3358 	movw	r3, #856	; 0x358
    5804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5814:	f240 5368 	movw	r3, #1384	; 0x568
    5818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581c:	681b      	ldr	r3, [r3, #0]
    581e:	429a      	cmp	r2, r3
    5820:	d906      	bls.n	5830 <vTaskPriorityInherit+0x8c>
    5822:	68fb      	ldr	r3, [r7, #12]
    5824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5826:	f240 5368 	movw	r3, #1384	; 0x568
    582a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    582e:	601a      	str	r2, [r3, #0]
    5830:	68fb      	ldr	r3, [r7, #12]
    5832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5834:	4613      	mov	r3, r2
    5836:	009b      	lsls	r3, r3, #2
    5838:	4413      	add	r3, r2
    583a:	009b      	lsls	r3, r3, #2
    583c:	f240 325c 	movw	r2, #860	; 0x35c
    5840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5844:	441a      	add	r2, r3
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	3304      	adds	r3, #4
    584a:	4610      	mov	r0, r2
    584c:	4619      	mov	r1, r3
    584e:	f7fe faef 	bl	3e30 <vListInsertEnd>
    5852:	e007      	b.n	5864 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5854:	f240 3358 	movw	r3, #856	; 0x358
    5858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5864:	3710      	adds	r7, #16
    5866:	46bd      	mov	sp, r7
    5868:	bd80      	pop	{r7, pc}
    586a:	bf00      	nop

0000586c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    586c:	b580      	push	{r7, lr}
    586e:	b084      	sub	sp, #16
    5870:	af00      	add	r7, sp, #0
    5872:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5874:	687b      	ldr	r3, [r7, #4]
    5876:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5878:	687b      	ldr	r3, [r7, #4]
    587a:	2b00      	cmp	r3, #0
    587c:	d035      	beq.n	58ea <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    587e:	68fb      	ldr	r3, [r7, #12]
    5880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5886:	429a      	cmp	r2, r3
    5888:	d02f      	beq.n	58ea <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    588a:	68fb      	ldr	r3, [r7, #12]
    588c:	3304      	adds	r3, #4
    588e:	4618      	mov	r0, r3
    5890:	f7fe fb2e 	bl	3ef0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5894:	68fb      	ldr	r3, [r7, #12]
    5896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5898:	68fb      	ldr	r3, [r7, #12]
    589a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    589c:	68fb      	ldr	r3, [r7, #12]
    589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58a0:	f1c3 0214 	rsb	r2, r3, #20
    58a4:	68fb      	ldr	r3, [r7, #12]
    58a6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ac:	f240 5368 	movw	r3, #1384	; 0x568
    58b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	429a      	cmp	r2, r3
    58b8:	d906      	bls.n	58c8 <vTaskPriorityDisinherit+0x5c>
    58ba:	68fb      	ldr	r3, [r7, #12]
    58bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58be:	f240 5368 	movw	r3, #1384	; 0x568
    58c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c6:	601a      	str	r2, [r3, #0]
    58c8:	68fb      	ldr	r3, [r7, #12]
    58ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58cc:	4613      	mov	r3, r2
    58ce:	009b      	lsls	r3, r3, #2
    58d0:	4413      	add	r3, r2
    58d2:	009b      	lsls	r3, r3, #2
    58d4:	f240 325c 	movw	r2, #860	; 0x35c
    58d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58dc:	441a      	add	r2, r3
    58de:	68fb      	ldr	r3, [r7, #12]
    58e0:	3304      	adds	r3, #4
    58e2:	4610      	mov	r0, r2
    58e4:	4619      	mov	r1, r3
    58e6:	f7fe faa3 	bl	3e30 <vListInsertEnd>
			}
		}
	}
    58ea:	3710      	adds	r7, #16
    58ec:	46bd      	mov	sp, r7
    58ee:	bd80      	pop	{r7, pc}

000058f0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    58f0:	b480      	push	{r7}
    58f2:	b083      	sub	sp, #12
    58f4:	af00      	add	r7, sp, #0
    58f6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    58fc:	4618      	mov	r0, r3
    58fe:	370c      	adds	r7, #12
    5900:	46bd      	mov	sp, r7
    5902:	f85d 7b04 	ldr.w	r7, [sp], #4
    5906:	4770      	bx	lr

00005908 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5908:	b480      	push	{r7}
    590a:	b083      	sub	sp, #12
    590c:	af00      	add	r7, sp, #0
    590e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5914:	4618      	mov	r0, r3
    5916:	370c      	adds	r7, #12
    5918:	46bd      	mov	sp, r7
    591a:	f85d 7b04 	ldr.w	r7, [sp], #4
    591e:	4770      	bx	lr

00005920 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5920:	b480      	push	{r7}
    5922:	b083      	sub	sp, #12
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
    5928:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	683a      	ldr	r2, [r7, #0]
    592e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5930:	370c      	adds	r7, #12
    5932:	46bd      	mov	sp, r7
    5934:	f85d 7b04 	ldr.w	r7, [sp], #4
    5938:	4770      	bx	lr
    593a:	bf00      	nop

0000593c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    593c:	b480      	push	{r7}
    593e:	b083      	sub	sp, #12
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
    5944:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	683a      	ldr	r2, [r7, #0]
    594a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    594c:	370c      	adds	r7, #12
    594e:	46bd      	mov	sp, r7
    5950:	f85d 7b04 	ldr.w	r7, [sp], #4
    5954:	4770      	bx	lr
    5956:	bf00      	nop

00005958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5958:	b480      	push	{r7}
    595a:	b085      	sub	sp, #20
    595c:	af00      	add	r7, sp, #0
    595e:	60f8      	str	r0, [r7, #12]
    5960:	60b9      	str	r1, [r7, #8]
    5962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5964:	68fb      	ldr	r3, [r7, #12]
    5966:	3b04      	subs	r3, #4
    5968:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    596a:	68fb      	ldr	r3, [r7, #12]
    596c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5972:	68fb      	ldr	r3, [r7, #12]
    5974:	3b04      	subs	r3, #4
    5976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5978:	68ba      	ldr	r2, [r7, #8]
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	3b04      	subs	r3, #4
    5982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5984:	68fb      	ldr	r3, [r7, #12]
    5986:	2200      	movs	r2, #0
    5988:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    598a:	68fb      	ldr	r3, [r7, #12]
    598c:	3b14      	subs	r3, #20
    598e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5990:	687a      	ldr	r2, [r7, #4]
    5992:	68fb      	ldr	r3, [r7, #12]
    5994:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	3b20      	subs	r3, #32
    599a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    599c:	68fb      	ldr	r3, [r7, #12]
}
    599e:	4618      	mov	r0, r3
    59a0:	3714      	adds	r7, #20
    59a2:	46bd      	mov	sp, r7
    59a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a8:	4770      	bx	lr
    59aa:	bf00      	nop

000059ac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    59ac:	4b06      	ldr	r3, [pc, #24]	; (59c8 <pxCurrentTCBConst2>)
    59ae:	6819      	ldr	r1, [r3, #0]
    59b0:	6808      	ldr	r0, [r1, #0]
    59b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    59b6:	f380 8809 	msr	PSP, r0
    59ba:	f04f 0000 	mov.w	r0, #0
    59be:	f380 8811 	msr	BASEPRI, r0
    59c2:	f04e 0e0d 	orr.w	lr, lr, #13
    59c6:	4770      	bx	lr

000059c8 <pxCurrentTCBConst2>:
    59c8:	20000358 	.word	0x20000358

000059cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    59cc:	485c      	ldr	r0, [pc, #368]	; (5b40 <prvSetupTimerInterrupt+0x28>)
    59ce:	6800      	ldr	r0, [r0, #0]
    59d0:	6800      	ldr	r0, [r0, #0]
    59d2:	f380 8808 	msr	MSP, r0
    59d6:	b662      	cpsie	i
    59d8:	df00      	svc	0
    59da:	bf00      	nop

000059dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    59dc:	b580      	push	{r7, lr}
    59de:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    59e0:	f64e 5320 	movw	r3, #60704	; 0xed20
    59e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59e8:	f64e 5220 	movw	r2, #60704	; 0xed20
    59ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    59f0:	6812      	ldr	r2, [r2, #0]
    59f2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    59f6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    59f8:	f64e 5320 	movw	r3, #60704	; 0xed20
    59fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a00:	f64e 5220 	movw	r2, #60704	; 0xed20
    5a04:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a08:	6812      	ldr	r2, [r2, #0]
    5a0a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5a0e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5a10:	f000 f882 	bl	5b18 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5a14:	f240 0330 	movw	r3, #48	; 0x30
    5a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a1c:	2200      	movs	r2, #0
    5a1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5a20:	f7ff ffd4 	bl	59cc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5a24:	2300      	movs	r3, #0
}
    5a26:	4618      	mov	r0, r3
    5a28:	bd80      	pop	{r7, pc}
    5a2a:	bf00      	nop

00005a2c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5a2c:	b480      	push	{r7}
    5a2e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5a30:	46bd      	mov	sp, r7
    5a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a36:	4770      	bx	lr

00005a38 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5a38:	b480      	push	{r7}
    5a3a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5a3c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5a40:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a48:	601a      	str	r2, [r3, #0]
}
    5a4a:	46bd      	mov	sp, r7
    5a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5a54:	b480      	push	{r7}
    5a56:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5a58:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5a5c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5a60:	f240 0330 	movw	r3, #48	; 0x30
    5a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	1c5a      	adds	r2, r3, #1
    5a6c:	f240 0330 	movw	r3, #48	; 0x30
    5a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a74:	601a      	str	r2, [r3, #0]
}
    5a76:	46bd      	mov	sp, r7
    5a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a7c:	4770      	bx	lr
    5a7e:	bf00      	nop

00005a80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5a80:	b480      	push	{r7}
    5a82:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5a84:	f240 0330 	movw	r3, #48	; 0x30
    5a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	1e5a      	subs	r2, r3, #1
    5a90:	f240 0330 	movw	r3, #48	; 0x30
    5a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a98:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5a9a:	f240 0330 	movw	r3, #48	; 0x30
    5a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d103      	bne.n	5ab0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5aa8:	f04f 0000 	mov.w	r0, #0
    5aac:	f380 8811 	msr	BASEPRI, r0
	}
}
    5ab0:	46bd      	mov	sp, r7
    5ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ab6:	4770      	bx	lr

00005ab8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5ab8:	f3ef 8009 	mrs	r0, PSP
    5abc:	4b0c      	ldr	r3, [pc, #48]	; (5af0 <pxCurrentTCBConst>)
    5abe:	681a      	ldr	r2, [r3, #0]
    5ac0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ac4:	6010      	str	r0, [r2, #0]
    5ac6:	e92d 4008 	stmdb	sp!, {r3, lr}
    5aca:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ace:	f380 8811 	msr	BASEPRI, r0
    5ad2:	f7ff fba1 	bl	5218 <vTaskSwitchContext>
    5ad6:	f04f 0000 	mov.w	r0, #0
    5ada:	f380 8811 	msr	BASEPRI, r0
    5ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5ae2:	6819      	ldr	r1, [r3, #0]
    5ae4:	6808      	ldr	r0, [r1, #0]
    5ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5aea:	f380 8809 	msr	PSP, r0
    5aee:	4770      	bx	lr

00005af0 <pxCurrentTCBConst>:
    5af0:	20000358 	.word	0x20000358

00005af4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b082      	sub	sp, #8
    5af8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5afa:	2300      	movs	r3, #0
    5afc:	607b      	str	r3, [r7, #4]
    5afe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b02:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5b06:	f7ff faa9 	bl	505c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5b0a:	f04f 0000 	mov.w	r0, #0
    5b0e:	f380 8811 	msr	BASEPRI, r0
}
    5b12:	3708      	adds	r7, #8
    5b14:	46bd      	mov	sp, r7
    5b16:	bd80      	pop	{r7, pc}

00005b18 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5b18:	b480      	push	{r7}
    5b1a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5b1c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5b20:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b24:	f245 425f 	movw	r2, #21599	; 0x545f
    5b28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5b2a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5b2e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b32:	2207      	movs	r2, #7
    5b34:	601a      	str	r2, [r3, #0]
}
    5b36:	46bd      	mov	sp, r7
    5b38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b3c:	4770      	bx	lr
    5b3e:	0000      	.short	0x0000
    5b40:	e000ed08 	.word	0xe000ed08

00005b44 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b08a      	sub	sp, #40	; 0x28
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5b4c:	2300      	movs	r3, #0
    5b4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5b50:	f7ff f9a2 	bl	4e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5b54:	f24b 5398 	movw	r3, #46488	; 0xb598
    5b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d130      	bne.n	5bc4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5b62:	f24b 5388 	movw	r3, #46472	; 0xb588
    5b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b6a:	f240 5288 	movw	r2, #1416	; 0x588
    5b6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b72:	601a      	str	r2, [r3, #0]
    5b74:	f24b 5388 	movw	r3, #46472	; 0xb588
    5b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b7c:	2200      	movs	r2, #0
    5b7e:	605a      	str	r2, [r3, #4]
    5b80:	f24b 5390 	movw	r3, #46480	; 0xb590
    5b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b88:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5b8c:	605a      	str	r2, [r3, #4]
    5b8e:	f24b 5390 	movw	r3, #46480	; 0xb590
    5b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5b96:	2200      	movs	r2, #0
    5b98:	601a      	str	r2, [r3, #0]
    5b9a:	f240 5388 	movw	r3, #1416	; 0x588
    5b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba2:	617b      	str	r3, [r7, #20]
    5ba4:	697b      	ldr	r3, [r7, #20]
    5ba6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5baa:	605a      	str	r2, [r3, #4]
    5bac:	697a      	ldr	r2, [r7, #20]
    5bae:	f24b 5390 	movw	r3, #46480	; 0xb590
    5bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bb6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5bb8:	f24b 5398 	movw	r3, #46488	; 0xb598
    5bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bc0:	2201      	movs	r2, #1
    5bc2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d00d      	beq.n	5be6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5bca:	2310      	movs	r3, #16
    5bcc:	687a      	ldr	r2, [r7, #4]
    5bce:	4413      	add	r3, r2
    5bd0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	f003 0307 	and.w	r3, r3, #7
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d004      	beq.n	5be6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5bdc:	687b      	ldr	r3, [r7, #4]
    5bde:	f023 0307 	bic.w	r3, r3, #7
    5be2:	3308      	adds	r3, #8
    5be4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2b00      	cmp	r3, #0
    5bea:	d068      	beq.n	5cbe <pvPortMalloc+0x17a>
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5bf2:	d264      	bcs.n	5cbe <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5bf4:	f24b 5388 	movw	r3, #46472	; 0xb588
    5bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5bfc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5bfe:	f24b 5388 	movw	r3, #46472	; 0xb588
    5c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5c0a:	e004      	b.n	5c16 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c0e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c18:	685a      	ldr	r2, [r3, #4]
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	429a      	cmp	r2, r3
    5c1e:	d203      	bcs.n	5c28 <pvPortMalloc+0xe4>
    5c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	2b00      	cmp	r3, #0
    5c26:	d1f1      	bne.n	5c0c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c2a:	f24b 5390 	movw	r3, #46480	; 0xb590
    5c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c32:	429a      	cmp	r2, r3
    5c34:	d043      	beq.n	5cbe <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5c36:	6a3b      	ldr	r3, [r7, #32]
    5c38:	681a      	ldr	r2, [r3, #0]
    5c3a:	2310      	movs	r3, #16
    5c3c:	4413      	add	r3, r2
    5c3e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c42:	681a      	ldr	r2, [r3, #0]
    5c44:	6a3b      	ldr	r3, [r7, #32]
    5c46:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c4a:	685a      	ldr	r2, [r3, #4]
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	1ad2      	subs	r2, r2, r3
    5c50:	2310      	movs	r3, #16
    5c52:	005b      	lsls	r3, r3, #1
    5c54:	429a      	cmp	r2, r3
    5c56:	d925      	bls.n	5ca4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	4413      	add	r3, r2
    5c5e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c62:	685a      	ldr	r2, [r3, #4]
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	1ad2      	subs	r2, r2, r3
    5c68:	693b      	ldr	r3, [r7, #16]
    5c6a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c6e:	687a      	ldr	r2, [r7, #4]
    5c70:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5c72:	693b      	ldr	r3, [r7, #16]
    5c74:	685b      	ldr	r3, [r3, #4]
    5c76:	60fb      	str	r3, [r7, #12]
    5c78:	f24b 5388 	movw	r3, #46472	; 0xb588
    5c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c80:	61bb      	str	r3, [r7, #24]
    5c82:	e002      	b.n	5c8a <pvPortMalloc+0x146>
    5c84:	69bb      	ldr	r3, [r7, #24]
    5c86:	681b      	ldr	r3, [r3, #0]
    5c88:	61bb      	str	r3, [r7, #24]
    5c8a:	69bb      	ldr	r3, [r7, #24]
    5c8c:	681b      	ldr	r3, [r3, #0]
    5c8e:	685a      	ldr	r2, [r3, #4]
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	429a      	cmp	r2, r3
    5c94:	d3f6      	bcc.n	5c84 <pvPortMalloc+0x140>
    5c96:	69bb      	ldr	r3, [r7, #24]
    5c98:	681a      	ldr	r2, [r3, #0]
    5c9a:	693b      	ldr	r3, [r7, #16]
    5c9c:	601a      	str	r2, [r3, #0]
    5c9e:	69bb      	ldr	r3, [r7, #24]
    5ca0:	693a      	ldr	r2, [r7, #16]
    5ca2:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5ca4:	f240 0334 	movw	r3, #52	; 0x34
    5ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cac:	681a      	ldr	r2, [r3, #0]
    5cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cb0:	685b      	ldr	r3, [r3, #4]
    5cb2:	1ad2      	subs	r2, r2, r3
    5cb4:	f240 0334 	movw	r3, #52	; 0x34
    5cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cbc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5cbe:	f7ff f8fd 	bl	4ebc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5cc2:	69fb      	ldr	r3, [r7, #28]
}
    5cc4:	4618      	mov	r0, r3
    5cc6:	3728      	adds	r7, #40	; 0x28
    5cc8:	46bd      	mov	sp, r7
    5cca:	bd80      	pop	{r7, pc}

00005ccc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5ccc:	b580      	push	{r7, lr}
    5cce:	b086      	sub	sp, #24
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d030      	beq.n	5d40 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5cde:	2310      	movs	r3, #16
    5ce0:	425b      	negs	r3, r3
    5ce2:	693a      	ldr	r2, [r7, #16]
    5ce4:	4413      	add	r3, r2
    5ce6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ce8:	693b      	ldr	r3, [r7, #16]
    5cea:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5cec:	f7ff f8d4 	bl	4e98 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5cf0:	68fb      	ldr	r3, [r7, #12]
    5cf2:	685b      	ldr	r3, [r3, #4]
    5cf4:	60bb      	str	r3, [r7, #8]
    5cf6:	f24b 5388 	movw	r3, #46472	; 0xb588
    5cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cfe:	617b      	str	r3, [r7, #20]
    5d00:	e002      	b.n	5d08 <vPortFree+0x3c>
    5d02:	697b      	ldr	r3, [r7, #20]
    5d04:	681b      	ldr	r3, [r3, #0]
    5d06:	617b      	str	r3, [r7, #20]
    5d08:	697b      	ldr	r3, [r7, #20]
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	685a      	ldr	r2, [r3, #4]
    5d0e:	68bb      	ldr	r3, [r7, #8]
    5d10:	429a      	cmp	r2, r3
    5d12:	d3f6      	bcc.n	5d02 <vPortFree+0x36>
    5d14:	697b      	ldr	r3, [r7, #20]
    5d16:	681a      	ldr	r2, [r3, #0]
    5d18:	68fb      	ldr	r3, [r7, #12]
    5d1a:	601a      	str	r2, [r3, #0]
    5d1c:	697b      	ldr	r3, [r7, #20]
    5d1e:	68fa      	ldr	r2, [r7, #12]
    5d20:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5d22:	68fb      	ldr	r3, [r7, #12]
    5d24:	685a      	ldr	r2, [r3, #4]
    5d26:	f240 0334 	movw	r3, #52	; 0x34
    5d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d2e:	681b      	ldr	r3, [r3, #0]
    5d30:	441a      	add	r2, r3
    5d32:	f240 0334 	movw	r3, #52	; 0x34
    5d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5d3c:	f7ff f8be 	bl	4ebc <xTaskResumeAll>
	}
}
    5d40:	3718      	adds	r7, #24
    5d42:	46bd      	mov	sp, r7
    5d44:	bd80      	pop	{r7, pc}
    5d46:	bf00      	nop

00005d48 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5d48:	b480      	push	{r7}
    5d4a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5d4c:	f240 0334 	movw	r3, #52	; 0x34
    5d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d54:	681b      	ldr	r3, [r3, #0]
}
    5d56:	4618      	mov	r0, r3
    5d58:	46bd      	mov	sp, r7
    5d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d5e:	4770      	bx	lr

00005d60 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5d60:	b480      	push	{r7}
    5d62:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5d64:	46bd      	mov	sp, r7
    5d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6a:	4770      	bx	lr

00005d6c <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	b082      	sub	sp, #8
    5d70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    5d72:	2010      	movs	r0, #16
    5d74:	2101      	movs	r1, #1
    5d76:	f7fb f823 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    5d7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5d7e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5d86:	2201      	movs	r2, #1
    5d88:	f7fb fb2a 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    5d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5d90:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    5d92:	2310      	movs	r3, #16
    5d94:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5d96:	2303      	movs	r3, #3
    5d98:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5d9a:	1d3b      	adds	r3, r7, #4
    5d9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5da0:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5da4:	4619      	mov	r1, r3
    5da6:	f7fb f9df 	bl	1168 <GPIO_Init>
}
    5daa:	3708      	adds	r7, #8
    5dac:	46bd      	mov	sp, r7
    5dae:	bd80      	pop	{r7, pc}

00005db0 <init_button>:

void init_button(void)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b082      	sub	sp, #8
    5db4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    5db6:	2004      	movs	r0, #4
    5db8:	2101      	movs	r1, #1
    5dba:	f7fb f801 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    5dbe:	2301      	movs	r3, #1
    5dc0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5dc2:	2304      	movs	r3, #4
    5dc4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5dc6:	2303      	movs	r3, #3
    5dc8:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5dca:	1d3b      	adds	r3, r7, #4
    5dcc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5dd0:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5dd4:	4619      	mov	r1, r3
    5dd6:	f7fb f9c7 	bl	1168 <GPIO_Init>
}
    5dda:	3708      	adds	r7, #8
    5ddc:	46bd      	mov	sp, r7
    5dde:	bd80      	pop	{r7, pc}

00005de0 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    5de6:	2001      	movs	r0, #1
    5de8:	2101      	movs	r1, #1
    5dea:	f7fa ffe9 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    5dee:	2000      	movs	r0, #0
    5df0:	2100      	movs	r1, #0
    5df2:	f7fb fbed 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    5df6:	2301      	movs	r3, #1
    5df8:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    5dfa:	2300      	movs	r3, #0
    5dfc:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    5dfe:	2308      	movs	r3, #8
    5e00:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    5e02:	2301      	movs	r3, #1
    5e04:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    5e06:	f107 0308 	add.w	r3, r7, #8
    5e0a:	4618      	mov	r0, r3
    5e0c:	f7fc f8e6 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    5e10:	2306      	movs	r3, #6
    5e12:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    5e14:	230f      	movs	r3, #15
    5e16:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    5e18:	230f      	movs	r3, #15
    5e1a:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5e1c:	2301      	movs	r3, #1
    5e1e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5e20:	1d3b      	adds	r3, r7, #4
    5e22:	4618      	mov	r0, r3
    5e24:	f7fc fa14 	bl	2250 <NVIC_Init>
}
    5e28:	3710      	adds	r7, #16
    5e2a:	46bd      	mov	sp, r7
    5e2c:	bd80      	pop	{r7, pc}
    5e2e:	bf00      	nop

00005e30 <init_rs232>:

void init_rs232(void)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b086      	sub	sp, #24
    5e34:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    5e36:	2005      	movs	r0, #5
    5e38:	2101      	movs	r1, #1
    5e3a:	f7fa ffc1 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    5e3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    5e42:	2101      	movs	r1, #1
    5e44:	f7fa ffe4 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    5e48:	2308      	movs	r3, #8
    5e4a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5e4c:	2304      	movs	r3, #4
    5e4e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5e50:	1d3b      	adds	r3, r7, #4
    5e52:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5e56:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5e5a:	4619      	mov	r1, r3
    5e5c:	f7fb f984 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    5e60:	2304      	movs	r3, #4
    5e62:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5e64:	2303      	movs	r3, #3
    5e66:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    5e68:	2318      	movs	r3, #24
    5e6a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5e6c:	1d3b      	adds	r3, r7, #4
    5e6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5e72:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5e76:	4619      	mov	r1, r3
    5e78:	f7fb f976 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    5e7c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    5e80:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    5e82:	2300      	movs	r3, #0
    5e84:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    5e86:	2300      	movs	r3, #0
    5e88:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    5e8a:	2300      	movs	r3, #0
    5e8c:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    5e8e:	2300      	movs	r3, #0
    5e90:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    5e92:	230c      	movs	r3, #12
    5e94:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    5e96:	f107 0308 	add.w	r3, r7, #8
    5e9a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5e9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5ea2:	4619      	mov	r1, r3
    5ea4:	f7fb fc48 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    5ea8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5eac:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5eb0:	2101      	movs	r1, #1
    5eb2:	f7fb fd5f 	bl	1974 <USART_Cmd>
}
    5eb6:	3718      	adds	r7, #24
    5eb8:	46bd      	mov	sp, r7
    5eba:	bd80      	pop	{r7, pc}

00005ebc <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    5ebc:	b580      	push	{r7, lr}
    5ebe:	b082      	sub	sp, #8
    5ec0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    5ec2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5ec6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5eca:	f240 7127 	movw	r1, #1831	; 0x727
    5ece:	2200      	movs	r2, #0
    5ed0:	f7fb fd70 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    5ed4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5ed8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5edc:	f240 5125 	movw	r1, #1317	; 0x525
    5ee0:	2201      	movs	r2, #1
    5ee2:	f7fb fd67 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    5ee6:	2326      	movs	r3, #38	; 0x26
    5ee8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    5eea:	2300      	movs	r3, #0
    5eec:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5eee:	2301      	movs	r3, #1
    5ef0:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5ef2:	1d3b      	adds	r3, r7, #4
    5ef4:	4618      	mov	r0, r3
    5ef6:	f7fc f9ab 	bl	2250 <NVIC_Init>
}
    5efa:	3708      	adds	r7, #8
    5efc:	46bd      	mov	sp, r7
    5efe:	bd80      	pop	{r7, pc}

00005f00 <enable_rs232>:

void enable_rs232(void)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    5f04:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5f08:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f0c:	2101      	movs	r1, #1
    5f0e:	f7fb fd31 	bl	1974 <USART_Cmd>
}
    5f12:	bd80      	pop	{r7, pc}

00005f14 <send_byte>:

void send_byte(uint8_t b)
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b082      	sub	sp, #8
    5f18:	af00      	add	r7, sp, #0
    5f1a:	4603      	mov	r3, r0
    5f1c:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    5f1e:	bf00      	nop
    5f20:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5f24:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f28:	2180      	movs	r1, #128	; 0x80
    5f2a:	f7fb ff8f 	bl	1e4c <USART_GetFlagStatus>
    5f2e:	4603      	mov	r3, r0
    5f30:	2b00      	cmp	r3, #0
    5f32:	d0f5      	beq.n	5f20 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
    5f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5f38:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5f40:	f2c4 0201 	movt	r2, #16385	; 0x4001
    5f44:	68d2      	ldr	r2, [r2, #12]
    5f46:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    5f4a:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
    5f4c:	79fb      	ldrb	r3, [r7, #7]
    5f4e:	b29b      	uxth	r3, r3
    5f50:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5f54:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f58:	4619      	mov	r1, r3
    5f5a:	f7fb fe2b 	bl	1bb4 <USART_SendData>
}
    5f5e:	3708      	adds	r7, #8
    5f60:	46bd      	mov	sp, r7
    5f62:	bd80      	pop	{r7, pc}

00005f64 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b082      	sub	sp, #8
    5f68:	af00      	add	r7, sp, #0
    5f6a:	4603      	mov	r3, r0
    5f6c:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
    5f6e:	79fb      	ldrb	r3, [r7, #7]
    5f70:	3330      	adds	r3, #48	; 0x30
    5f72:	b2db      	uxtb	r3, r3
    5f74:	4618      	mov	r0, r3
    5f76:	f7ff ffcd 	bl	5f14 <send_byte>
}
    5f7a:	3708      	adds	r7, #8
    5f7c:	46bd      	mov	sp, r7
    5f7e:	bd80      	pop	{r7, pc}

00005f80 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b084      	sub	sp, #16
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
    int i = 0;
    5f88:	2300      	movs	r3, #0
    5f8a:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
    5f8c:	e009      	b.n	5fa2 <vPrintString+0x22>
    {
        send_byte(string[i]);
    5f8e:	68fb      	ldr	r3, [r7, #12]
    5f90:	687a      	ldr	r2, [r7, #4]
    5f92:	4413      	add	r3, r2
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	4618      	mov	r0, r3
    5f98:	f7ff ffbc 	bl	5f14 <send_byte>
        i++;
    5f9c:	68fb      	ldr	r3, [r7, #12]
    5f9e:	3301      	adds	r3, #1
    5fa0:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
    5fa2:	68fb      	ldr	r3, [r7, #12]
    5fa4:	687a      	ldr	r2, [r7, #4]
    5fa6:	4413      	add	r3, r2
    5fa8:	781b      	ldrb	r3, [r3, #0]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d1ef      	bne.n	5f8e <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
    5fae:	3710      	adds	r7, #16
    5fb0:	46bd      	mov	sp, r7
    5fb2:	bd80      	pop	{r7, pc}

00005fb4 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b08a      	sub	sp, #40	; 0x28
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
    5fbc:	2300      	movs	r3, #0
    5fbe:	623b      	str	r3, [r7, #32]
    long num = c_num;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	61fb      	str	r3, [r7, #28]

    if(num == 0)
    5fc4:	69fb      	ldr	r3, [r7, #28]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d106      	bne.n	5fd8 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
    5fca:	f246 5044 	movw	r0, #25924	; 0x6544
    5fce:	f2c0 0000 	movt	r0, #0
    5fd2:	f7ff ffd5 	bl	5f80 <vPrintString>
    5fd6:	e062      	b.n	609e <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
    5fd8:	e024      	b.n	6024 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
    5fda:	69f9      	ldr	r1, [r7, #28]
    5fdc:	f246 6367 	movw	r3, #26215	; 0x6667
    5fe0:	f2c6 6366 	movt	r3, #26214	; 0x6666
    5fe4:	fb83 2301 	smull	r2, r3, r3, r1
    5fe8:	109a      	asrs	r2, r3, #2
    5fea:	17cb      	asrs	r3, r1, #31
    5fec:	1ad2      	subs	r2, r2, r3
    5fee:	4613      	mov	r3, r2
    5ff0:	009b      	lsls	r3, r3, #2
    5ff2:	4413      	add	r3, r2
    5ff4:	005b      	lsls	r3, r3, #1
    5ff6:	1aca      	subs	r2, r1, r3
    5ff8:	b2d3      	uxtb	r3, r2
    5ffa:	3330      	adds	r3, #48	; 0x30
    5ffc:	b2da      	uxtb	r2, r3
    5ffe:	f107 010c 	add.w	r1, r7, #12
    6002:	6a3b      	ldr	r3, [r7, #32]
    6004:	440b      	add	r3, r1
    6006:	701a      	strb	r2, [r3, #0]
            count ++;
    6008:	6a3b      	ldr	r3, [r7, #32]
    600a:	3301      	adds	r3, #1
    600c:	623b      	str	r3, [r7, #32]
            num /= 10;
    600e:	69fa      	ldr	r2, [r7, #28]
    6010:	f246 6367 	movw	r3, #26215	; 0x6667
    6014:	f2c6 6366 	movt	r3, #26214	; 0x6666
    6018:	fb83 1302 	smull	r1, r3, r3, r2
    601c:	1099      	asrs	r1, r3, #2
    601e:	17d3      	asrs	r3, r2, #31
    6020:	1acb      	subs	r3, r1, r3
    6022:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
    6024:	69fb      	ldr	r3, [r7, #28]
    6026:	2b00      	cmp	r3, #0
    6028:	d1d7      	bne.n	5fda <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
    602a:	f107 020c 	add.w	r2, r7, #12
    602e:	6a3b      	ldr	r3, [r7, #32]
    6030:	4413      	add	r3, r2
    6032:	2200      	movs	r2, #0
    6034:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
    6036:	2300      	movs	r3, #0
    6038:	627b      	str	r3, [r7, #36]	; 0x24
    603a:	e020      	b.n	607e <vPrintNumber+0xca>
        {
            tmp = time[i];
    603c:	f107 020c 	add.w	r2, r7, #12
    6040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6042:	4413      	add	r3, r2
    6044:	781b      	ldrb	r3, [r3, #0]
    6046:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
    6048:	6a3a      	ldr	r2, [r7, #32]
    604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    604c:	1ad3      	subs	r3, r2, r3
    604e:	3b01      	subs	r3, #1
    6050:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6054:	4413      	add	r3, r2
    6056:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    605a:	f107 010c 	add.w	r1, r7, #12
    605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6060:	440b      	add	r3, r1
    6062:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
    6064:	6a3a      	ldr	r2, [r7, #32]
    6066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6068:	1ad3      	subs	r3, r2, r3
    606a:	3b01      	subs	r3, #1
    606c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    6070:	440b      	add	r3, r1
    6072:	7efa      	ldrb	r2, [r7, #27]
    6074:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
    6078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    607a:	3301      	adds	r3, #1
    607c:	627b      	str	r3, [r7, #36]	; 0x24
    607e:	6a3b      	ldr	r3, [r7, #32]
    6080:	085a      	lsrs	r2, r3, #1
    6082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6084:	429a      	cmp	r2, r3
    6086:	d8d9      	bhi.n	603c <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
    6088:	f107 030c 	add.w	r3, r7, #12
    608c:	4618      	mov	r0, r3
    608e:	f7ff ff77 	bl	5f80 <vPrintString>
        vPrintString("\n\r");
    6092:	f246 5048 	movw	r0, #25928	; 0x6548
    6096:	f2c0 0000 	movt	r0, #0
    609a:	f7ff ff71 	bl	5f80 <vPrintString>
    }
}
    609e:	3728      	adds	r7, #40	; 0x28
    60a0:	46bd      	mov	sp, r7
    60a2:	bd80      	pop	{r7, pc}

000060a4 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
    60a4:	b590      	push	{r4, r7, lr}
    60a6:	b087      	sub	sp, #28
    60a8:	af04      	add	r7, sp, #16
    init_led();
    60aa:	f7ff fe5f 	bl	5d6c <init_led>
    init_rs232();
    60ae:	f7ff febf 	bl	5e30 <init_rs232>
    enable_rs232_interrupts();
    60b2:	f7ff ff03 	bl	5ebc <enable_rs232_interrupts>
    enable_rs232();
    60b6:	f7ff ff23 	bl	5f00 <enable_rs232>

    //vTaskCompleteInitialise();
    vAppInitialise();
    60ba:	f7fd fda3 	bl	3c04 <vAppInitialise>
    vSemaphoreInitialise();
    60be:	f7fc fffb 	bl	30b8 <vSemaphoreInitialise>
    vParameterInitialise(); 
    60c2:	f7fd f839 	bl	3138 <vParameterInitialise>
    vInitialiseEventLists(NUMBEROFEVENTS);
    60c6:	2002      	movs	r0, #2
    60c8:	f7fc fc1e 	bl	2908 <vInitialiseEventLists>


    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
    60cc:	2301      	movs	r3, #1
    60ce:	9300      	str	r3, [sp, #0]
    60d0:	4b43      	ldr	r3, [pc, #268]	; (61e0 <main+0x13c>)
    60d2:	9301      	str	r3, [sp, #4]
    60d4:	2300      	movs	r3, #0
    60d6:	9302      	str	r3, [sp, #8]
    60d8:	2300      	movs	r3, #0
    60da:	9303      	str	r3, [sp, #12]
    60dc:	f643 10e5 	movw	r0, #14821	; 0x39e5
    60e0:	f2c0 0000 	movt	r0, #0
    60e4:	f246 514c 	movw	r1, #25932	; 0x654c
    60e8:	f2c0 0100 	movt	r1, #0
    60ec:	2280      	movs	r2, #128	; 0x80
    60ee:	4b3d      	ldr	r3, [pc, #244]	; (61e4 <main+0x140>)
    60f0:	f7fe fb14 	bl	471c <xTaskGenericCreate>

    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    60f4:	2300      	movs	r3, #0
    60f6:	607b      	str	r3, [r7, #4]
    60f8:	e067      	b.n	61ca <main+0x126>
    {
        xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1)],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1)]);
    60fa:	687a      	ldr	r2, [r7, #4]
    60fc:	4613      	mov	r3, r2
    60fe:	005b      	lsls	r3, r3, #1
    6100:	4413      	add	r3, r2
    6102:	226c      	movs	r2, #108	; 0x6c
    6104:	fb02 f203 	mul.w	r2, r2, r3
    6108:	f240 1330 	movw	r3, #304	; 0x130
    610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6110:	18d4      	adds	r4, r2, r3
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	f1c3 0302 	rsb	r3, r3, #2
    6118:	4619      	mov	r1, r3
    611a:	687a      	ldr	r2, [r7, #4]
    611c:	4613      	mov	r3, r2
    611e:	005b      	lsls	r3, r3, #1
    6120:	4413      	add	r3, r2
    6122:	009a      	lsls	r2, r3, #2
    6124:	f240 23f0 	movw	r3, #752	; 0x2f0
    6128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    612c:	4413      	add	r3, r2
    612e:	9100      	str	r1, [sp, #0]
    6130:	9301      	str	r3, [sp, #4]
    6132:	2300      	movs	r3, #0
    6134:	9302      	str	r3, [sp, #8]
    6136:	2300      	movs	r3, #0
    6138:	9303      	str	r3, [sp, #12]
    613a:	f243 508d 	movw	r0, #13709	; 0x358d
    613e:	f2c0 0000 	movt	r0, #0
    6142:	f246 5158 	movw	r1, #25944	; 0x6558
    6146:	f2c0 0100 	movt	r1, #0
    614a:	2280      	movs	r2, #128	; 0x80
    614c:	4623      	mov	r3, r4
    614e:	f7fe fae5 	bl	471c <xTaskGenericCreate>
        for( j = 1; j <= xConcurrents; ++j )
    6152:	2301      	movs	r3, #1
    6154:	603b      	str	r3, [r7, #0]
    6156:	e032      	b.n	61be <main+0x11a>
        {
            /* j is the number of concurrent servants in one task*/
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1) + j],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1) + j]);
    6158:	687a      	ldr	r2, [r7, #4]
    615a:	4613      	mov	r3, r2
    615c:	005b      	lsls	r3, r3, #1
    615e:	441a      	add	r2, r3
    6160:	683b      	ldr	r3, [r7, #0]
    6162:	4413      	add	r3, r2
    6164:	226c      	movs	r2, #108	; 0x6c
    6166:	fb02 f203 	mul.w	r2, r2, r3
    616a:	f240 1330 	movw	r3, #304	; 0x130
    616e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6172:	18d4      	adds	r4, r2, r3
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	f1c3 0302 	rsb	r3, r3, #2
    617a:	4619      	mov	r1, r3
    617c:	687a      	ldr	r2, [r7, #4]
    617e:	4613      	mov	r3, r2
    6180:	005b      	lsls	r3, r3, #1
    6182:	441a      	add	r2, r3
    6184:	683b      	ldr	r3, [r7, #0]
    6186:	4413      	add	r3, r2
    6188:	009a      	lsls	r2, r3, #2
    618a:	f240 23f0 	movw	r3, #752	; 0x2f0
    618e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6192:	4413      	add	r3, r2
    6194:	9100      	str	r1, [sp, #0]
    6196:	9301      	str	r3, [sp, #4]
    6198:	2300      	movs	r3, #0
    619a:	9302      	str	r3, [sp, #8]
    619c:	2300      	movs	r3, #0
    619e:	9303      	str	r3, [sp, #12]
    61a0:	f243 70e9 	movw	r0, #14313	; 0x37e9
    61a4:	f2c0 0000 	movt	r0, #0
    61a8:	f246 5160 	movw	r1, #25952	; 0x6560
    61ac:	f2c0 0100 	movt	r1, #0
    61b0:	2280      	movs	r2, #128	; 0x80
    61b2:	4623      	mov	r3, r4
    61b4:	f7fe fab2 	bl	471c <xTaskGenericCreate>
    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    {
        xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1)],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1)]);
        for( j = 1; j <= xConcurrents; ++j )
    61b8:	683b      	ldr	r3, [r7, #0]
    61ba:	3301      	adds	r3, #1
    61bc:	603b      	str	r3, [r7, #0]
    61be:	683b      	ldr	r3, [r7, #0]
    61c0:	2b02      	cmp	r3, #2
    61c2:	ddc9      	ble.n	6158 <main+0xb4>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	3301      	adds	r3, #1
    61c8:	607b      	str	r3, [r7, #4]
    61ca:	687b      	ldr	r3, [r7, #4]
    61cc:	2b00      	cmp	r3, #0
    61ce:	dd94      	ble.n	60fa <main+0x56>
        }
    }


    /* Start running the task. */
    vTaskStartScheduler();
    61d0:	f7fe fe22 	bl	4e18 <vTaskStartScheduler>

    return 0;
    61d4:	2300      	movs	r3, #0
}
    61d6:	4618      	mov	r0, r3
    61d8:	370c      	adds	r7, #12
    61da:	46bd      	mov	sp, r7
    61dc:	bd90      	pop	{r4, r7, pc}
    61de:	bf00      	nop
    61e0:	200002fc 	.word	0x200002fc
    61e4:	20000274 	.word	0x20000274

000061e8 <myTraceCreate>:

void myTraceCreate      (){
    61e8:	b480      	push	{r7}
    61ea:	af00      	add	r7, sp, #0
}
    61ec:	46bd      	mov	sp, r7
    61ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f2:	4770      	bx	lr

000061f4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    61f4:	b480      	push	{r7}
    61f6:	af00      	add	r7, sp, #0
}
    61f8:	46bd      	mov	sp, r7
    61fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    61fe:	4770      	bx	lr

00006200 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    6200:	b480      	push	{r7}
    6202:	af00      	add	r7, sp, #0
}
    6204:	46bd      	mov	sp, r7
    6206:	f85d 7b04 	ldr.w	r7, [sp], #4
    620a:	4770      	bx	lr

0000620c <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
    620c:	b580      	push	{r7, lr}
    620e:	b082      	sub	sp, #8
    6210:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
    6212:	f7fe feeb 	bl	4fec <xTaskGetTickCount>
    6216:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i ;
    if( IS_INIT == 1 && xCurrentTime == 400 )
    6218:	f240 0338 	movw	r3, #56	; 0x38
    621c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	2b01      	cmp	r3, #1
    6224:	d120      	bne.n	6268 <vApplicationTickHook+0x5c>
    6226:	683b      	ldr	r3, [r7, #0]
    6228:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    622c:	d11c      	bne.n	6268 <vApplicationTickHook+0x5c>
    {
        
        for( i = 0; i < NUMBEROFTASK; ++ i )
    622e:	2300      	movs	r3, #0
    6230:	607b      	str	r3, [r7, #4]
    6232:	e010      	b.n	6256 <vApplicationTickHook+0x4a>
            xSemaphoreGive( xBinarySemaphore[i*xConcurrents] );
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	005a      	lsls	r2, r3, #1
    6238:	f240 23e0 	movw	r3, #736	; 0x2e0
    623c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6244:	4618      	mov	r0, r3
    6246:	2100      	movs	r1, #0
    6248:	2200      	movs	r2, #0
    624a:	2300      	movs	r3, #0
    624c:	f7fd ff54 	bl	40f8 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i ;
    if( IS_INIT == 1 && xCurrentTime == 400 )
    {
        
        for( i = 0; i < NUMBEROFTASK; ++ i )
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	3301      	adds	r3, #1
    6254:	607b      	str	r3, [r7, #4]
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	2b00      	cmp	r3, #0
    625a:	ddeb      	ble.n	6234 <vApplicationTickHook+0x28>
            xSemaphoreGive( xBinarySemaphore[i*xConcurrents] );

        IS_INIT = 0;
    625c:	f240 0338 	movw	r3, #56	; 0x38
    6260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6264:	2200      	movs	r2, #0
    6266:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if(Is_Executable_Event_Arrive())
    6268:	f7fc fe12 	bl	2e90 <Is_Executable_Event_Arrive>
    626c:	4603      	mov	r3, r0
    626e:	2b00      	cmp	r3, #0
    6270:	d00a      	beq.n	6288 <vApplicationTickHook+0x7c>
    {
       xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] ); 
    6272:	f240 23e0 	movw	r3, #736	; 0x2e0
    6276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627a:	68db      	ldr	r3, [r3, #12]
    627c:	4618      	mov	r0, r3
    627e:	2100      	movs	r1, #0
    6280:	2200      	movs	r2, #0
    6282:	2300      	movs	r3, #0
    6284:	f7fd ff38 	bl	40f8 <xQueueGenericSend>
    }
}
    6288:	3708      	adds	r7, #8
    628a:	46bd      	mov	sp, r7
    628c:	bd80      	pop	{r7, pc}
    628e:	bf00      	nop

00006290 <memcpy>:
    6290:	2a0f      	cmp	r2, #15
    6292:	b4f0      	push	{r4, r5, r6, r7}
    6294:	d945      	bls.n	6322 <memcpy+0x92>
    6296:	ea40 0301 	orr.w	r3, r0, r1
    629a:	079b      	lsls	r3, r3, #30
    629c:	d145      	bne.n	632a <memcpy+0x9a>
    629e:	f1a2 0710 	sub.w	r7, r2, #16
    62a2:	460c      	mov	r4, r1
    62a4:	4603      	mov	r3, r0
    62a6:	093f      	lsrs	r7, r7, #4
    62a8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    62ac:	3610      	adds	r6, #16
    62ae:	6825      	ldr	r5, [r4, #0]
    62b0:	3310      	adds	r3, #16
    62b2:	3410      	adds	r4, #16
    62b4:	f843 5c10 	str.w	r5, [r3, #-16]
    62b8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    62bc:	f843 5c0c 	str.w	r5, [r3, #-12]
    62c0:	f854 5c08 	ldr.w	r5, [r4, #-8]
    62c4:	f843 5c08 	str.w	r5, [r3, #-8]
    62c8:	f854 5c04 	ldr.w	r5, [r4, #-4]
    62cc:	f843 5c04 	str.w	r5, [r3, #-4]
    62d0:	42b3      	cmp	r3, r6
    62d2:	d1ec      	bne.n	62ae <memcpy+0x1e>
    62d4:	1c7b      	adds	r3, r7, #1
    62d6:	f002 0c0f 	and.w	ip, r2, #15
    62da:	f1bc 0f03 	cmp.w	ip, #3
    62de:	ea4f 1303 	mov.w	r3, r3, lsl #4
    62e2:	4419      	add	r1, r3
    62e4:	4403      	add	r3, r0
    62e6:	d922      	bls.n	632e <memcpy+0x9e>
    62e8:	460e      	mov	r6, r1
    62ea:	461d      	mov	r5, r3
    62ec:	4664      	mov	r4, ip
    62ee:	f856 7b04 	ldr.w	r7, [r6], #4
    62f2:	3c04      	subs	r4, #4
    62f4:	2c03      	cmp	r4, #3
    62f6:	f845 7b04 	str.w	r7, [r5], #4
    62fa:	d8f8      	bhi.n	62ee <memcpy+0x5e>
    62fc:	f1ac 0404 	sub.w	r4, ip, #4
    6300:	f002 0203 	and.w	r2, r2, #3
    6304:	f024 0403 	bic.w	r4, r4, #3
    6308:	3404      	adds	r4, #4
    630a:	4423      	add	r3, r4
    630c:	4421      	add	r1, r4
    630e:	b132      	cbz	r2, 631e <memcpy+0x8e>
    6310:	440a      	add	r2, r1
    6312:	f811 4b01 	ldrb.w	r4, [r1], #1
    6316:	4291      	cmp	r1, r2
    6318:	f803 4b01 	strb.w	r4, [r3], #1
    631c:	d1f9      	bne.n	6312 <memcpy+0x82>
    631e:	bcf0      	pop	{r4, r5, r6, r7}
    6320:	4770      	bx	lr
    6322:	4603      	mov	r3, r0
    6324:	2a00      	cmp	r2, #0
    6326:	d1f3      	bne.n	6310 <memcpy+0x80>
    6328:	e7f9      	b.n	631e <memcpy+0x8e>
    632a:	4603      	mov	r3, r0
    632c:	e7f0      	b.n	6310 <memcpy+0x80>
    632e:	4662      	mov	r2, ip
    6330:	2a00      	cmp	r2, #0
    6332:	d1ed      	bne.n	6310 <memcpy+0x80>
    6334:	e7f3      	b.n	631e <memcpy+0x8e>
    6336:	bf00      	nop

00006338 <memset>:
    6338:	0783      	lsls	r3, r0, #30
    633a:	b4f0      	push	{r4, r5, r6, r7}
    633c:	d048      	beq.n	63d0 <memset+0x98>
    633e:	1e54      	subs	r4, r2, #1
    6340:	2a00      	cmp	r2, #0
    6342:	d043      	beq.n	63cc <memset+0x94>
    6344:	b2cd      	uxtb	r5, r1
    6346:	4603      	mov	r3, r0
    6348:	e002      	b.n	6350 <memset+0x18>
    634a:	2c00      	cmp	r4, #0
    634c:	d03e      	beq.n	63cc <memset+0x94>
    634e:	4614      	mov	r4, r2
    6350:	f803 5b01 	strb.w	r5, [r3], #1
    6354:	f013 0f03 	tst.w	r3, #3
    6358:	f104 32ff 	add.w	r2, r4, #4294967295
    635c:	d1f5      	bne.n	634a <memset+0x12>
    635e:	2c03      	cmp	r4, #3
    6360:	d92d      	bls.n	63be <memset+0x86>
    6362:	b2cd      	uxtb	r5, r1
    6364:	2c0f      	cmp	r4, #15
    6366:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    636a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    636e:	d918      	bls.n	63a2 <memset+0x6a>
    6370:	f1a4 0710 	sub.w	r7, r4, #16
    6374:	f103 0610 	add.w	r6, r3, #16
    6378:	461a      	mov	r2, r3
    637a:	093f      	lsrs	r7, r7, #4
    637c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    6380:	6015      	str	r5, [r2, #0]
    6382:	3210      	adds	r2, #16
    6384:	f842 5c0c 	str.w	r5, [r2, #-12]
    6388:	f842 5c08 	str.w	r5, [r2, #-8]
    638c:	f842 5c04 	str.w	r5, [r2, #-4]
    6390:	42b2      	cmp	r2, r6
    6392:	d1f5      	bne.n	6380 <memset+0x48>
    6394:	f004 040f 	and.w	r4, r4, #15
    6398:	3701      	adds	r7, #1
    639a:	2c03      	cmp	r4, #3
    639c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    63a0:	d90d      	bls.n	63be <memset+0x86>
    63a2:	461e      	mov	r6, r3
    63a4:	4622      	mov	r2, r4
    63a6:	3a04      	subs	r2, #4
    63a8:	f846 5b04 	str.w	r5, [r6], #4
    63ac:	2a03      	cmp	r2, #3
    63ae:	d8fa      	bhi.n	63a6 <memset+0x6e>
    63b0:	1f22      	subs	r2, r4, #4
    63b2:	f004 0403 	and.w	r4, r4, #3
    63b6:	f022 0203 	bic.w	r2, r2, #3
    63ba:	3204      	adds	r2, #4
    63bc:	4413      	add	r3, r2
    63be:	b12c      	cbz	r4, 63cc <memset+0x94>
    63c0:	b2c9      	uxtb	r1, r1
    63c2:	441c      	add	r4, r3
    63c4:	f803 1b01 	strb.w	r1, [r3], #1
    63c8:	42a3      	cmp	r3, r4
    63ca:	d1fb      	bne.n	63c4 <memset+0x8c>
    63cc:	bcf0      	pop	{r4, r5, r6, r7}
    63ce:	4770      	bx	lr
    63d0:	4614      	mov	r4, r2
    63d2:	4603      	mov	r3, r0
    63d4:	e7c3      	b.n	635e <memset+0x26>
    63d6:	bf00      	nop

000063d8 <strncpy>:
    63d8:	ea40 0301 	orr.w	r3, r0, r1
    63dc:	079b      	lsls	r3, r3, #30
    63de:	b470      	push	{r4, r5, r6}
    63e0:	d12b      	bne.n	643a <strncpy+0x62>
    63e2:	2a03      	cmp	r2, #3
    63e4:	bf84      	itt	hi
    63e6:	460b      	movhi	r3, r1
    63e8:	4605      	movhi	r5, r0
    63ea:	d926      	bls.n	643a <strncpy+0x62>
    63ec:	4619      	mov	r1, r3
    63ee:	f853 4b04 	ldr.w	r4, [r3], #4
    63f2:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    63f6:	ea26 0604 	bic.w	r6, r6, r4
    63fa:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    63fe:	d105      	bne.n	640c <strncpy+0x34>
    6400:	3a04      	subs	r2, #4
    6402:	f845 4b04 	str.w	r4, [r5], #4
    6406:	2a03      	cmp	r2, #3
    6408:	4619      	mov	r1, r3
    640a:	d8ef      	bhi.n	63ec <strncpy+0x14>
    640c:	b19a      	cbz	r2, 6436 <strncpy+0x5e>
    640e:	780c      	ldrb	r4, [r1, #0]
    6410:	3a01      	subs	r2, #1
    6412:	1c6b      	adds	r3, r5, #1
    6414:	702c      	strb	r4, [r5, #0]
    6416:	b13c      	cbz	r4, 6428 <strncpy+0x50>
    6418:	b16a      	cbz	r2, 6436 <strncpy+0x5e>
    641a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    641e:	3a01      	subs	r2, #1
    6420:	f803 4b01 	strb.w	r4, [r3], #1
    6424:	2c00      	cmp	r4, #0
    6426:	d1f7      	bne.n	6418 <strncpy+0x40>
    6428:	b12a      	cbz	r2, 6436 <strncpy+0x5e>
    642a:	441a      	add	r2, r3
    642c:	2100      	movs	r1, #0
    642e:	f803 1b01 	strb.w	r1, [r3], #1
    6432:	4293      	cmp	r3, r2
    6434:	d1fb      	bne.n	642e <strncpy+0x56>
    6436:	bc70      	pop	{r4, r5, r6}
    6438:	4770      	bx	lr
    643a:	4605      	mov	r5, r0
    643c:	e7e6      	b.n	640c <strncpy+0x34>
    643e:	bf00      	nop

00006440 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6440:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    6442:	e003      	b.n	644c <LoopCopyDataInit>

00006444 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    6444:	4b0a      	ldr	r3, [pc, #40]	; (6470 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    6446:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6448:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    644a:	3104      	adds	r1, #4

0000644c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    644c:	4809      	ldr	r0, [pc, #36]	; (6474 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    644e:	4b0a      	ldr	r3, [pc, #40]	; (6478 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    6450:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    6452:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    6454:	d3f6      	bcc.n	6444 <CopyDataInit>
	ldr	r2, =_sbss
    6456:	4a09      	ldr	r2, [pc, #36]	; (647c <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    6458:	e002      	b.n	6460 <LoopFillZerobss>

0000645a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    645a:	2300      	movs	r3, #0
	str	r3, [r2], #4
    645c:	f842 3b04 	str.w	r3, [r2], #4

00006460 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6460:	4b07      	ldr	r3, [pc, #28]	; (6480 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    6462:	429a      	cmp	r2, r3
	bcc	FillZerobss
    6464:	d3f9      	bcc.n	645a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    6466:	f7f9 ff69 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    646a:	f7ff fe1b 	bl	60a4 <main>
	bx	lr    
    646e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    6470:	00006568 	.word	0x00006568
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6474:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    6478:	2000003c 	.word	0x2000003c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    647c:	20000040 	.word	0x20000040
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6480:	2004b5a0 	.word	0x2004b5a0

00006484 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6484:	e7fe      	b.n	6484 <ADC1_2_IRQHandler>
    6486:	0000      	movs	r0, r0
    6488:	206f4e20 	.word	0x206f4e20
    648c:	656c6449 	.word	0x656c6449
    6490:	65764520 	.word	0x65764520
    6494:	2073746e 	.word	0x2073746e
    6498:	69617661 	.word	0x69617661
    649c:	6c62616c 	.word	0x6c62616c
    64a0:	000d0a65 	.word	0x000d0a65
    64a4:	6c6c616d 	.word	0x6c6c616d
    64a8:	6620636f 	.word	0x6620636f
    64ac:	6520726f 	.word	0x6520726f
    64b0:	746e6576 	.word	0x746e6576
    64b4:	61747320 	.word	0x61747320
    64b8:	66206b63 	.word	0x66206b63
    64bc:	656c6961 	.word	0x656c6961
    64c0:	000d0a64 	.word	0x000d0a64
    64c4:	72656874 	.word	0x72656874
    64c8:	72612065 	.word	0x72612065
    64cc:	65732065 	.word	0x65732065
    64d0:	726f736e 	.word	0x726f736e
    64d4:	73696d20 	.word	0x73696d20
    64d8:	676e6973 	.word	0x676e6973
    64dc:	61656420 	.word	0x61656420
    64e0:	6e696c64 	.word	0x6e696c64
    64e4:	000d0a65 	.word	0x000d0a65
    64e8:	72656874 	.word	0x72656874
    64ec:	72612065 	.word	0x72612065
    64f0:	65732065 	.word	0x65732065
    64f4:	6e617672 	.word	0x6e617672
    64f8:	6d207374 	.word	0x6d207374
    64fc:	69737369 	.word	0x69737369
    6500:	6420676e 	.word	0x6420676e
    6504:	6c646165 	.word	0x6c646165
    6508:	0a656e69 	.word	0x0a656e69
    650c:	0000000d 	.word	0x0000000d
    6510:	6f727245 	.word	0x6f727245
    6514:	54203a72 	.word	0x54203a72
    6518:	20736968 	.word	0x20736968
    651c:	6e657665 	.word	0x6e657665
    6520:	61682074 	.word	0x61682074
    6524:	72612073 	.word	0x72612073
    6528:	65766972 	.word	0x65766972
    652c:	0a212164 	.word	0x0a212164
    6530:	0000000d 	.word	0x0000000d
    6534:	454c4449 	.word	0x454c4449
    6538:	00000000 	.word	0x00000000

0000653c <ulKernelPriority>:
    653c:	0000007f                                ....

00006540 <heapSTRUCT_SIZE>:
    6540:	00000010 000d0a30 00000d0a 65532d52     ....0.......R-Se
    6550:	6e617672 00000074 736e6553 0000726f     rvant...Sensor..
    6560:	76726573 00746e61                       servant.
