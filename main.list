
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 40 01 20 71 88 01 00 b5 88 01 00 b5 88 01 00     .@. q...........
      10:	b5 88 01 00 b5 88 01 00 b5 88 01 00 00 00 00 00     ................
	...
      2c:	b9 57 00 00 b5 88 01 00 00 00 00 00 c5 58 00 00     .W...........X..
      3c:	01 59 00 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     .Y..............
      4c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      5c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      6c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      7c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      8c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      9c:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      ac:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      bc:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      cc:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
      dc:	b5 88 01 00 b5 88 01 00 b5 88 01 00 b5 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018afc 	.word	0x00018afc
     6d0:	20000000 	.word	0x20000000
     6d4:	20000320 	.word	0x20000320
     6d8:	20000320 	.word	0x20000320
     6dc:	2000b32c 	.word	0x2000b32c

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 faab 	bl	5954 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 338c 	movw	r3, #908	; 0x38c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 338c 	movw	r3, #908	; 0x38c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fbea 	bl	3c24 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fbe5 	bl	3c24 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 3390 	movw	r3, #912	; 0x390
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 3390 	movw	r3, #912	; 0x390
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 3220 	movw	r2, #800	; 0x320
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fbc5 	bl	3c3c <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 3394 	movw	r3, #916	; 0x394
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 338c 	movw	r3, #908	; 0x38c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fc04 	bl	3cfc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 338c 	movw	r3, #908	; 0x38c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 3394 	movw	r3, #916	; 0x394
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 3374 	movw	r3, #884	; 0x374
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 338c 	movw	r3, #908	; 0x38c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fbae 	bl	3c8c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 3370 	movw	r3, #880	; 0x370
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 338c 	movw	r3, #908	; 0x38c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fb9e 	bl	3c8c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 338c 	movw	r3, #908	; 0x38c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fb91 	bl	3c8c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 3378 	movw	r3, #888	; 0x378
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fbb2 	bl	3cfc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fba9 	bl	3cfc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 3390 	movw	r3, #912	; 0x390
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 3390 	movw	r3, #912	; 0x390
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 3220 	movw	r2, #800	; 0x320
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fb28 	bl	3c3c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 3378 	movw	r3, #888	; 0x378
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fbf7 	bl	4df8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 3398 	movw	r3, #920	; 0x398
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 339c 	movw	r3, #924	; 0x39c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 3394 	movw	r3, #916	; 0x394
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 3394 	movw	r3, #916	; 0x394
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 339c 	movw	r3, #924	; 0x39c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 339c 	movw	r3, #924	; 0x39c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 3394 	movw	r3, #916	; 0x394
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 3370 	movw	r3, #880	; 0x370
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 3374 	movw	r3, #884	; 0x374
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 3370 	movw	r3, #880	; 0x370
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 3374 	movw	r3, #884	; 0x374
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 3370 	movw	r3, #880	; 0x370
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 3394 	movw	r3, #916	; 0x394
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fb1c 	bl	3cfc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fb13 	bl	3cfc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 3390 	movw	r3, #912	; 0x390
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 3390 	movw	r3, #912	; 0x390
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 3220 	movw	r2, #800	; 0x320
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fa8e 	bl	3c3c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 3370 	movw	r3, #880	; 0x370
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 339c 	movw	r3, #924	; 0x39c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 3394 	movw	r3, #916	; 0x394
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 3398 	movw	r3, #920	; 0x398
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 3390 	movw	r3, #912	; 0x390
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 3390 	movw	r3, #912	; 0x390
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 3390 	movw	r3, #912	; 0x390
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 3390 	movw	r3, #912	; 0x390
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 3220 	movw	r2, #800	; 0x320
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 3390 	movw	r3, #912	; 0x390
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 3220 	movw	r2, #800	; 0x320
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 338c 	movw	r3, #908	; 0x38c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 338c 	movw	r3, #908	; 0x38c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 338c 	movw	r3, #908	; 0x38c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 338c 	movw	r3, #908	; 0x38c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 3220 	movw	r2, #800	; 0x320
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f9c5 	bl	3be4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 3048 	movw	r0, #840	; 0x348
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f9b9 	bl	3be4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 305c 	movw	r0, #860	; 0x35c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f9b3 	bl	3be4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 3078 	movw	r0, #888	; 0x378
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f9ad 	bl	3be4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 3370 	movw	r3, #880	; 0x370
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 3248 	movw	r2, #840	; 0x348
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 3374 	movw	r3, #884	; 0x374
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 325c 	movw	r2, #860	; 0x35c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fa17 	bl	3cfc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 3078 	movw	r0, #888	; 0x378
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f9ae 	bl	3c3c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 338c 	movw	r3, #908	; 0x38c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 30a0 	movw	r0, #928	; 0x3a0
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 f965 	bl	3be4 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 32b4 	movw	r2, #948	; 0x3b4
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f001 f955 	bl	3be4 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fe77 	bl	5714 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 f9e3 	bl	4df8 <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f240 33b4 	movw	r3, #948	; 0x3b4
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f240 33a0 	movw	r3, #928	; 0x3a0
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 feb1 	bl	5860 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 fea7 	bl	588c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 fe5d 	bl	5860 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 fec5 	bl	5954 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f240 30a0 	movw	r0, #928	; 0x3a0
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f001 f816 	bl	3c3c <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fcbe 	bl	5590 <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fe9c 	bl	5954 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f648 00b8 	movw	r0, #35000	; 0x88b8
    2c28:	f2c0 0001 	movt	r0, #1
    2c2c:	f014 f9a6 	bl	16f7c <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>
        //vPrintString("event creating\n\r");

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fe0d 	bl	588c <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f240 33a0 	movw	r3, #928	; 0x3a0
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f240 33a0 	movw	r3, #928	; 0x3a0
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f002 f890 	bl	4df8 <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fdb5 	bl	5860 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f000 fffe 	bl	3cfc <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 ff96 	bl	3c3c <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fdbc 	bl	588c <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fd8b 	bl	5860 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 fc21 	bl	5590 <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f000 ffbc 	bl	3cfc <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fd82 	bl	588c <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 ff98 	bl	3cfc <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fd5e 	bl	588c <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fd58 	bl	588c <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fd38 	bl	5860 <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fe73 	bl	5adc <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fd49 	bl	588c <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f000 ffe9 	bl	3de8 <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f240 7398 	movw	r3, #1944	; 0x798
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f240 7398 	movw	r3, #1944	; 0x798
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f240 7398 	movw	r3, #1944	; 0x798
    2e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f001 f859 	bl	3f04 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f240 7398 	movw	r3, #1944	; 0x798
    2e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f001 f911 	bl	4090 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b15      	cmp	r3, #21
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e073      	b.n	2f74 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f240 33d0 	movw	r3, #976	; 0x3d0
    2e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	212c      	movs	r1, #44	; 0x2c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	212c      	movs	r1, #44	; 0x2c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	212c      	movs	r1, #44	; 0x2c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f240 0360 	movw	r3, #96	; 0x60
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	202c      	movs	r0, #44	; 0x2c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	331c      	adds	r3, #28
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    2ef6:	f240 231c 	movw	r3, #540	; 0x21c
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	202c      	movs	r0, #44	; 0x2c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3320      	adds	r3, #32
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2f1a:	f240 03b8 	movw	r3, #184	; 0xb8
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	68f9      	ldr	r1, [r7, #12]
    2f32:	202c      	movs	r0, #44	; 0x2c
    2f34:	fb00 f101 	mul.w	r1, r0, r1
    2f38:	440b      	add	r3, r1
    2f3a:	3328      	adds	r3, #40	; 0x28
    2f3c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f3e:	f240 03b8 	movw	r3, #184	; 0xb8
    2f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f46:	68fa      	ldr	r2, [r7, #12]
    2f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f4c:	f240 032c 	movw	r3, #44	; 0x2c
    2f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f58:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f60:	68f9      	ldr	r1, [r7, #12]
    2f62:	202c      	movs	r0, #44	; 0x2c
    2f64:	fb00 f101 	mul.w	r1, r0, r1
    2f68:	440b      	add	r3, r1
    2f6a:	3324      	adds	r3, #36	; 0x24
    2f6c:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f6e:	68fb      	ldr	r3, [r7, #12]
    2f70:	3301      	adds	r3, #1
    2f72:	60fb      	str	r3, [r7, #12]
    2f74:	68fb      	ldr	r3, [r7, #12]
    2f76:	2b15      	cmp	r3, #21
    2f78:	dd88      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f7a:	2300      	movs	r3, #0
    2f7c:	60fb      	str	r3, [r7, #12]
    2f7e:	e080      	b.n	3082 <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f80:	f240 1210 	movw	r2, #272	; 0x110
    2f84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f88:	68f9      	ldr	r1, [r7, #12]
    2f8a:	460b      	mov	r3, r1
    2f8c:	005b      	lsls	r3, r3, #1
    2f8e:	440b      	add	r3, r1
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	3304      	adds	r3, #4
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f9a:	f240 1210 	movw	r2, #272	; 0x110
    2f9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa2:	68f9      	ldr	r1, [r7, #12]
    2fa4:	460b      	mov	r3, r1
    2fa6:	005b      	lsls	r3, r3, #1
    2fa8:	440b      	add	r3, r1
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	4413      	add	r3, r2
    2fae:	3308      	adds	r3, #8
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2fb4:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fbc:	68ba      	ldr	r2, [r7, #8]
    2fbe:	212c      	movs	r1, #44	; 0x2c
    2fc0:	fb01 f202 	mul.w	r2, r1, r2
    2fc4:	4413      	add	r3, r2
    2fc6:	3308      	adds	r3, #8
    2fc8:	6818      	ldr	r0, [r3, #0]
    2fca:	f240 32d0 	movw	r2, #976	; 0x3d0
    2fce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fd2:	68b9      	ldr	r1, [r7, #8]
    2fd4:	460b      	mov	r3, r1
    2fd6:	009b      	lsls	r3, r3, #2
    2fd8:	440b      	add	r3, r1
    2fda:	005b      	lsls	r3, r3, #1
    2fdc:	440b      	add	r3, r1
    2fde:	4403      	add	r3, r0
    2fe0:	3304      	adds	r3, #4
    2fe2:	009b      	lsls	r3, r3, #2
    2fe4:	4413      	add	r3, r2
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fea:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	68ba      	ldr	r2, [r7, #8]
    2ff4:	212c      	movs	r1, #44	; 0x2c
    2ff6:	fb01 f202 	mul.w	r2, r1, r2
    2ffa:	4413      	add	r3, r2
    2ffc:	3308      	adds	r3, #8
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	1c5a      	adds	r2, r3, #1
    3002:	f240 33d0 	movw	r3, #976	; 0x3d0
    3006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    300a:	68b9      	ldr	r1, [r7, #8]
    300c:	202c      	movs	r0, #44	; 0x2c
    300e:	fb00 f101 	mul.w	r1, r0, r1
    3012:	440b      	add	r3, r1
    3014:	3308      	adds	r3, #8
    3016:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    3018:	f240 33d0 	movw	r3, #976	; 0x3d0
    301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3020:	687a      	ldr	r2, [r7, #4]
    3022:	212c      	movs	r1, #44	; 0x2c
    3024:	fb01 f202 	mul.w	r2, r1, r2
    3028:	4413      	add	r3, r2
    302a:	3304      	adds	r3, #4
    302c:	6818      	ldr	r0, [r3, #0]
    302e:	f240 32d0 	movw	r2, #976	; 0x3d0
    3032:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3036:	6879      	ldr	r1, [r7, #4]
    3038:	460b      	mov	r3, r1
    303a:	009b      	lsls	r3, r3, #2
    303c:	440b      	add	r3, r1
    303e:	005b      	lsls	r3, r3, #1
    3040:	440b      	add	r3, r1
    3042:	4403      	add	r3, r0
    3044:	3302      	adds	r3, #2
    3046:	009b      	lsls	r3, r3, #2
    3048:	4413      	add	r3, r2
    304a:	68ba      	ldr	r2, [r7, #8]
    304c:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    304e:	f240 33d0 	movw	r3, #976	; 0x3d0
    3052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3056:	687a      	ldr	r2, [r7, #4]
    3058:	212c      	movs	r1, #44	; 0x2c
    305a:	fb01 f202 	mul.w	r2, r1, r2
    305e:	4413      	add	r3, r2
    3060:	3304      	adds	r3, #4
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	1c5a      	adds	r2, r3, #1
    3066:	f240 33d0 	movw	r3, #976	; 0x3d0
    306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306e:	6879      	ldr	r1, [r7, #4]
    3070:	202c      	movs	r0, #44	; 0x2c
    3072:	fb00 f101 	mul.w	r1, r0, r1
    3076:	440b      	add	r3, r1
    3078:	3304      	adds	r3, #4
    307a:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    307c:	68fb      	ldr	r3, [r7, #12]
    307e:	3301      	adds	r3, #1
    3080:	60fb      	str	r3, [r7, #12]
    3082:	f240 1310 	movw	r3, #272	; 0x110
    3086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308a:	681a      	ldr	r2, [r3, #0]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	429a      	cmp	r2, r3
    3090:	f73f af76 	bgt.w	2f80 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3094:	3714      	adds	r7, #20
    3096:	46bd      	mov	sp, r7
    3098:	f85d 7b04 	ldr.w	r7, [sp], #4
    309c:	4770      	bx	lr
    309e:	bf00      	nop

000030a0 <vTaskDelayLET>:

void vTaskDelayLET()
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b084      	sub	sp, #16
    30a4:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    30a6:	f002 fa73 	bl	5590 <xTaskGetCurrentTaskHandle>
    30aa:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    30ac:	68b8      	ldr	r0, [r7, #8]
    30ae:	f002 fb25 	bl	56fc <xTaskGetxStartTime>
    30b2:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    30b4:	68b8      	ldr	r0, [r7, #8]
    30b6:	f002 fb2d 	bl	5714 <xTaskGetxLet>
    30ba:	4602      	mov	r2, r0
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	4413      	add	r3, r2
    30c0:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    30c2:	f001 fe99 	bl	4df8 <xTaskGetTickCount>
    30c6:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30c8:	e002      	b.n	30d0 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30ca:	f001 fe95 	bl	4df8 <xTaskGetTickCount>
    30ce:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30d0:	68fa      	ldr	r2, [r7, #12]
    30d2:	683b      	ldr	r3, [r7, #0]
    30d4:	429a      	cmp	r2, r3
    30d6:	d3f8      	bcc.n	30ca <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30d8:	3710      	adds	r7, #16
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	bf00      	nop

000030e0 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e4:	b088      	sub	sp, #32
    30e6:	af00      	add	r7, sp, #0
    30e8:	6078      	str	r0, [r7, #4]
    30ea:	6039      	str	r1, [r7, #0]
    30ec:	4669      	mov	r1, sp
    30ee:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30f0:	6879      	ldr	r1, [r7, #4]
    30f2:	6849      	ldr	r1, [r1, #4]
    30f4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30f6:	69be      	ldr	r6, [r7, #24]
    30f8:	1e71      	subs	r1, r6, #1
    30fa:	6179      	str	r1, [r7, #20]
    30fc:	4631      	mov	r1, r6
    30fe:	4608      	mov	r0, r1
    3100:	f04f 0100 	mov.w	r1, #0
    3104:	014d      	lsls	r5, r1, #5
    3106:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    310a:	0144      	lsls	r4, r0, #5
    310c:	4631      	mov	r1, r6
    310e:	4608      	mov	r0, r1
    3110:	f04f 0100 	mov.w	r1, #0
    3114:	014b      	lsls	r3, r1, #5
    3116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    311a:	0142      	lsls	r2, r0, #5
    311c:	4633      	mov	r3, r6
    311e:	009b      	lsls	r3, r3, #2
    3120:	3303      	adds	r3, #3
    3122:	3307      	adds	r3, #7
    3124:	08db      	lsrs	r3, r3, #3
    3126:	00db      	lsls	r3, r3, #3
    3128:	ebad 0d03 	sub.w	sp, sp, r3
    312c:	466b      	mov	r3, sp
    312e:	3303      	adds	r3, #3
    3130:	089b      	lsrs	r3, r3, #2
    3132:	009b      	lsls	r3, r3, #2
    3134:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    313c:	f240 7398 	movw	r3, #1944	; 0x798
    3140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3144:	68fa      	ldr	r2, [r7, #12]
    3146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    314a:	4618      	mov	r0, r3
    314c:	2100      	movs	r1, #0
    314e:	f04f 32ff 	mov.w	r2, #4294967295
    3152:	2300      	movs	r3, #0
    3154:	f000 ff9c 	bl	4090 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3158:	f001 fe4e 	bl	4df8 <xTaskGetTickCount>
    315c:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    315e:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3166:	68fa      	ldr	r2, [r7, #12]
    3168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    316c:	4618      	mov	r0, r3
    316e:	68b9      	ldr	r1, [r7, #8]
    3170:	f002 fadc 	bl	572c <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3174:	2300      	movs	r3, #0
    3176:	61fb      	str	r3, [r7, #28]
    3178:	e024      	b.n	31c4 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    317a:	687a      	ldr	r2, [r7, #4]
    317c:	69fb      	ldr	r3, [r7, #28]
    317e:	3302      	adds	r3, #2
    3180:	009b      	lsls	r3, r3, #2
    3182:	4413      	add	r3, r2
    3184:	6859      	ldr	r1, [r3, #4]
    3186:	693b      	ldr	r3, [r7, #16]
    3188:	69fa      	ldr	r2, [r7, #28]
    318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    318e:	69fb      	ldr	r3, [r7, #28]
    3190:	009b      	lsls	r3, r3, #2
    3192:	683a      	ldr	r2, [r7, #0]
    3194:	18d1      	adds	r1, r2, r3
    3196:	693b      	ldr	r3, [r7, #16]
    3198:	69fa      	ldr	r2, [r7, #28]
    319a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    319e:	f240 73f0 	movw	r3, #2032	; 0x7f0
    31a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31aa:	f240 33cc 	movw	r3, #972	; 0x3cc
    31ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	4608      	mov	r0, r1
    31b6:	4611      	mov	r1, r2
    31b8:	461a      	mov	r2, r3
    31ba:	f7ff fdb1 	bl	2d20 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    31be:	69fb      	ldr	r3, [r7, #28]
    31c0:	3301      	adds	r3, #1
    31c2:	61fb      	str	r3, [r7, #28]
    31c4:	69fa      	ldr	r2, [r7, #28]
    31c6:	69bb      	ldr	r3, [r7, #24]
    31c8:	429a      	cmp	r2, r3
    31ca:	dbd6      	blt.n	317a <vEventReceiveAll+0x9a>
    31cc:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    31ce:	3720      	adds	r7, #32
    31d0:	46bd      	mov	sp, r7
    31d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d6:	bf00      	nop

000031d8 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31d8:	b580      	push	{r7, lr}
    31da:	b084      	sub	sp, #16
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
    31e0:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	685b      	ldr	r3, [r3, #4]
    31e6:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31e8:	2300      	movs	r3, #0
    31ea:	60fb      	str	r3, [r7, #12]
    31ec:	e00a      	b.n	3204 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	683a      	ldr	r2, [r7, #0]
    31f4:	4413      	add	r3, r2
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	4618      	mov	r0, r3
    31fa:	f7ff fdf3 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	3301      	adds	r3, #1
    3202:	60fb      	str	r3, [r7, #12]
    3204:	68fa      	ldr	r2, [r7, #12]
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	429a      	cmp	r2, r3
    320a:	dbf0      	blt.n	31ee <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    320c:	3710      	adds	r7, #16
    320e:	46bd      	mov	sp, r7
    3210:	bd80      	pop	{r7, pc}
    3212:	bf00      	nop

00003214 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3218:	b08a      	sub	sp, #40	; 0x28
    321a:	af02      	add	r7, sp, #8
    321c:	6078      	str	r0, [r7, #4]
    321e:	6039      	str	r1, [r7, #0]
    3220:	4669      	mov	r1, sp
    3222:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3224:	6879      	ldr	r1, [r7, #4]
    3226:	6889      	ldr	r1, [r1, #8]
    3228:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    322a:	6879      	ldr	r1, [r7, #4]
    322c:	6809      	ldr	r1, [r1, #0]
    322e:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    3230:	6879      	ldr	r1, [r7, #4]
    3232:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3234:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3236:	69be      	ldr	r6, [r7, #24]
    3238:	1e71      	subs	r1, r6, #1
    323a:	60f9      	str	r1, [r7, #12]
    323c:	4631      	mov	r1, r6
    323e:	4608      	mov	r0, r1
    3240:	f04f 0100 	mov.w	r1, #0
    3244:	014d      	lsls	r5, r1, #5
    3246:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    324a:	0144      	lsls	r4, r0, #5
    324c:	4631      	mov	r1, r6
    324e:	4608      	mov	r0, r1
    3250:	f04f 0100 	mov.w	r1, #0
    3254:	014b      	lsls	r3, r1, #5
    3256:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    325a:	0142      	lsls	r2, r0, #5
    325c:	4633      	mov	r3, r6
    325e:	009b      	lsls	r3, r3, #2
    3260:	3303      	adds	r3, #3
    3262:	3307      	adds	r3, #7
    3264:	08db      	lsrs	r3, r3, #3
    3266:	00db      	lsls	r3, r3, #3
    3268:	ebad 0d03 	sub.w	sp, sp, r3
    326c:	ab02      	add	r3, sp, #8
    326e:	3303      	adds	r3, #3
    3270:	089b      	lsrs	r3, r3, #2
    3272:	009b      	lsls	r3, r3, #2
    3274:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3276:	2300      	movs	r3, #0
    3278:	61fb      	str	r3, [r7, #28]
    327a:	e033      	b.n	32e4 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    327c:	687a      	ldr	r2, [r7, #4]
    327e:	69fb      	ldr	r3, [r7, #28]
    3280:	3304      	adds	r3, #4
    3282:	009b      	lsls	r3, r3, #2
    3284:	4413      	add	r3, r2
    3286:	6859      	ldr	r1, [r3, #4]
    3288:	68bb      	ldr	r3, [r7, #8]
    328a:	69fa      	ldr	r2, [r7, #28]
    328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3290:	68bb      	ldr	r3, [r7, #8]
    3292:	69fa      	ldr	r2, [r7, #28]
    3294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3298:	697b      	ldr	r3, [r7, #20]
    329a:	429a      	cmp	r2, r3
    329c:	dc06      	bgt.n	32ac <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    329e:	69fb      	ldr	r3, [r7, #28]
    32a0:	011b      	lsls	r3, r3, #4
    32a2:	683a      	ldr	r2, [r7, #0]
    32a4:	4413      	add	r3, r2
    32a6:	2201      	movs	r2, #1
    32a8:	609a      	str	r2, [r3, #8]
    32aa:	e005      	b.n	32b8 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    32ac:	69fb      	ldr	r3, [r7, #28]
    32ae:	011b      	lsls	r3, r3, #4
    32b0:	683a      	ldr	r2, [r7, #0]
    32b2:	4413      	add	r3, r2
    32b4:	2200      	movs	r2, #0
    32b6:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    32b8:	68bb      	ldr	r3, [r7, #8]
    32ba:	69fa      	ldr	r2, [r7, #28]
    32bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32c0:	f240 73f0 	movw	r3, #2032	; 0x7f0
    32c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32cc:	69fb      	ldr	r3, [r7, #28]
    32ce:	011b      	lsls	r3, r3, #4
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	4413      	add	r3, r2
    32d4:	68da      	ldr	r2, [r3, #12]
    32d6:	9200      	str	r2, [sp, #0]
    32d8:	cb0e      	ldmia	r3, {r1, r2, r3}
    32da:	f7ff fc57 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32de:	69fb      	ldr	r3, [r7, #28]
    32e0:	3301      	adds	r3, #1
    32e2:	61fb      	str	r3, [r7, #28]
    32e4:	69fa      	ldr	r2, [r7, #28]
    32e6:	69bb      	ldr	r3, [r7, #24]
    32e8:	429a      	cmp	r2, r3
    32ea:	dbc7      	blt.n	327c <vEventCreateAll+0x68>
    32ec:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32ee:	3720      	adds	r7, #32
    32f0:	46bd      	mov	sp, r7
    32f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32f6:	bf00      	nop

000032f8 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32f8:	b480      	push	{r7}
    32fa:	b083      	sub	sp, #12
    32fc:	af00      	add	r7, sp, #0
    32fe:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    3300:	370c      	adds	r7, #12
    3302:	46bd      	mov	sp, r7
    3304:	f85d 7b04 	ldr.w	r7, [sp], #4
    3308:	4770      	bx	lr
    330a:	bf00      	nop

0000330c <vDoSensor>:

static void vDoSensor()
{
    330c:	b480      	push	{r7}
    330e:	af00      	add	r7, sp, #0

}
    3310:	46bd      	mov	sp, r7
    3312:	f85d 7b04 	ldr.w	r7, [sp], #4
    3316:	4770      	bx	lr

00003318 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    331c:	b094      	sub	sp, #80	; 0x50
    331e:	af00      	add	r7, sp, #0
    3320:	60f8      	str	r0, [r7, #12]
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3322:	2301      	movs	r3, #1
    3324:	64bb      	str	r3, [r7, #72]	; 0x48
    portBASE_TYPE xCount = 1;
    3326:	2301      	movs	r3, #1
    3328:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    332a:	68fb      	ldr	r3, [r7, #12]
    332c:	643b      	str	r3, [r7, #64]	; 0x40

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3330:	689b      	ldr	r3, [r3, #8]
    3332:	63fb      	str	r3, [r7, #60]	; 0x3c
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3336:	681b      	ldr	r3, [r3, #0]
    3338:	63bb      	str	r3, [r7, #56]	; 0x38
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    333a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    333c:	69db      	ldr	r3, [r3, #28]
    333e:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3344:	633b      	str	r3, [r7, #48]	; 0x30
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3348:	6a1b      	ldr	r3, [r3, #32]
    334a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    334c:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3354:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    335a:	4618      	mov	r0, r3
    335c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    335e:	f002 f9f3 	bl	5748 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3364:	1e4b      	subs	r3, r1, #1
    3366:	62bb      	str	r3, [r7, #40]	; 0x28
    3368:	460b      	mov	r3, r1
    336a:	461a      	mov	r2, r3
    336c:	f04f 0300 	mov.w	r3, #0
    3370:	0158      	lsls	r0, r3, #5
    3372:	6078      	str	r0, [r7, #4]
    3374:	6878      	ldr	r0, [r7, #4]
    3376:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    337a:	6078      	str	r0, [r7, #4]
    337c:	0150      	lsls	r0, r2, #5
    337e:	460b      	mov	r3, r1
    3380:	461a      	mov	r2, r3
    3382:	f04f 0300 	mov.w	r3, #0
    3386:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    338a:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    338e:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3392:	460b      	mov	r3, r1
    3394:	009b      	lsls	r3, r3, #2
    3396:	3303      	adds	r3, #3
    3398:	3307      	adds	r3, #7
    339a:	08db      	lsrs	r3, r3, #3
    339c:	00db      	lsls	r3, r3, #3
    339e:	ebad 0d03 	sub.w	sp, sp, r3
    33a2:	466b      	mov	r3, sp
    33a4:	3303      	adds	r3, #3
    33a6:	089b      	lsrs	r3, r3, #2
    33a8:	009b      	lsls	r3, r3, #2
    33aa:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    33ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    33ae:	1e4b      	subs	r3, r1, #1
    33b0:	623b      	str	r3, [r7, #32]
    33b2:	460b      	mov	r3, r1
    33b4:	461a      	mov	r2, r3
    33b6:	f04f 0300 	mov.w	r3, #0
    33ba:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    33be:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    33c2:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33c6:	460b      	mov	r3, r1
    33c8:	461a      	mov	r2, r3
    33ca:	f04f 0300 	mov.w	r3, #0
    33ce:	01dd      	lsls	r5, r3, #7
    33d0:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33d4:	01d4      	lsls	r4, r2, #7
    33d6:	460b      	mov	r3, r1
    33d8:	011b      	lsls	r3, r3, #4
    33da:	3303      	adds	r3, #3
    33dc:	3307      	adds	r3, #7
    33de:	08db      	lsrs	r3, r3, #3
    33e0:	00db      	lsls	r3, r3, #3
    33e2:	ebad 0d03 	sub.w	sp, sp, r3
    33e6:	466b      	mov	r3, sp
    33e8:	3303      	adds	r3, #3
    33ea:	089b      	lsrs	r3, r3, #2
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	61fb      	str	r3, [r7, #28]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33f2:	2b01      	cmp	r3, #1
    33f4:	d110      	bne.n	3418 <vSensor+0x100>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33f6:	f240 7398 	movw	r3, #1944	; 0x798
    33fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3404:	4618      	mov	r0, r3
    3406:	2100      	movs	r1, #0
    3408:	f04f 32ff 	mov.w	r2, #4294967295
    340c:	2300      	movs	r3, #0
    340e:	f000 fe3f 	bl	4090 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    3412:	2300      	movs	r3, #0
    3414:	64bb      	str	r3, [r7, #72]	; 0x48
    3416:	e00d      	b.n	3434 <vSensor+0x11c>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    3418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    341a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    341c:	4619      	mov	r1, r3
    341e:	f7ff fe5f 	bl	30e0 <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    3422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3424:	4618      	mov	r0, r3
    3426:	f7ff ff67 	bl	32f8 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    342c:	6c38      	ldr	r0, [r7, #64]	; 0x40
    342e:	4619      	mov	r1, r3
    3430:	f7ff fed2 	bl	31d8 <vEventDeleteAll>
        }

        //xTaskComplete[ xTaskOfServant[xMyFlag] ] = 0;

        // deal with the input
        vDoSensor();
    3434:	f7ff ff6a 	bl	330c <vDoSensor>

        vPrintNumber( xMyFlag );
    3438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    343a:	f013 fdb9 	bl	16fb0 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    343e:	f001 fcdb 	bl	4df8 <xTaskGetTickCount>
    3442:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    3444:	69b8      	ldr	r0, [r7, #24]
    3446:	f013 fdb3 	bl	16fb0 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    344a:	f240 73f0 	movw	r3, #2032	; 0x7f0
    344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3452:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3458:	4618      	mov	r0, r3
    345a:	69b9      	ldr	r1, [r7, #24]
    345c:	f002 f966 	bl	572c <vTaskSetxStartTime>

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3462:	3301      	adds	r3, #1
    3464:	647b      	str	r3, [r7, #68]	; 0x44
        deadline = xCount * xPeriod; 
    3466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    346a:	fb02 f303 	mul.w	r3, r2, r3
    346e:	617b      	str	r3, [r7, #20]

        for( i = 0; i < NUM; i ++ )
    3470:	2300      	movs	r3, #0
    3472:	64fb      	str	r3, [r7, #76]	; 0x4c
    3474:	e011      	b.n	349a <vSensor+0x182>
        {
            xDatas[i].xNextPeriod = deadline;
    3476:	69fa      	ldr	r2, [r7, #28]
    3478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    347a:	011b      	lsls	r3, r3, #4
    347c:	4413      	add	r3, r2
    347e:	697a      	ldr	r2, [r7, #20]
    3480:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3482:	69ba      	ldr	r2, [r7, #24]
    3484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3486:	441a      	add	r2, r3
    3488:	69f9      	ldr	r1, [r7, #28]
    348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    348c:	011b      	lsls	r3, r3, #4
    348e:	440b      	add	r3, r1
    3490:	3304      	adds	r3, #4
    3492:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3496:	3301      	adds	r3, #1
    3498:	64fb      	str	r3, [r7, #76]	; 0x4c
    349a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    349e:	429a      	cmp	r2, r3
    34a0:	dbe9      	blt.n	3476 <vSensor+0x15e>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    34a2:	69fb      	ldr	r3, [r7, #28]
    34a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
    34a6:	4619      	mov	r1, r3
    34a8:	f7ff feb4 	bl	3214 <vEventCreateAll>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    34ac:	2300      	movs	r3, #0
    34ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    34b0:	e002      	b.n	34b8 <vSensor+0x1a0>
    34b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34b4:	3301      	adds	r3, #1
    34b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    34be:	dbf8      	blt.n	34b2 <vSensor+0x19a>
        {
            //xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    34c0:	f7ff fdee 	bl	30a0 <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    34c4:	f001 fc98 	bl	4df8 <xTaskGetTickCount>
    34c8:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    34ca:	69b8      	ldr	r0, [r7, #24]
    34cc:	f013 fd70 	bl	16fb0 <vPrintNumber>
        vPrintNumber( deadline - xPeriod ); // output the ready time of task
    34d0:	697a      	ldr	r2, [r7, #20]
    34d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34d4:	1ad3      	subs	r3, r2, r3
    34d6:	4618      	mov	r0, r3
    34d8:	f013 fd6a 	bl	16fb0 <vPrintNumber>
        vPrintNumber( deadline );  // output the deadline of task
    34dc:	6978      	ldr	r0, [r7, #20]
    34de:	f013 fd67 	bl	16fb0 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    34e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34e4:	f103 020a 	add.w	r2, r3, #10
    34e8:	4613      	mov	r3, r2
    34ea:	005b      	lsls	r3, r3, #1
    34ec:	4413      	add	r3, r2
    34ee:	4618      	mov	r0, r3
    34f0:	f013 fd5e 	bl	16fb0 <vPrintNumber>

        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34f4:	69fb      	ldr	r3, [r7, #28]
    34f6:	681a      	ldr	r2, [r3, #0]
    34f8:	69bb      	ldr	r3, [r7, #24]
    34fa:	429a      	cmp	r2, r3
    34fc:	d20a      	bcs.n	3514 <vSensor+0x1fc>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34fe:	69fb      	ldr	r3, [r7, #28]
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	4618      	mov	r0, r3
    3504:	f013 fd54 	bl	16fb0 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    3508:	f648 00d8 	movw	r0, #35032	; 0x88d8
    350c:	f2c0 0001 	movt	r0, #1
    3510:	f013 fd34 	bl	16f7c <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3514:	f240 7398 	movw	r3, #1944	; 0x798
    3518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    351e:	4618      	mov	r0, r3
    3520:	2100      	movs	r1, #0
    3522:	2200      	movs	r2, #0
    3524:	2300      	movs	r3, #0
    3526:	f000 fced 	bl	3f04 <xQueueGenericSend>
    }
    352a:	e761      	b.n	33f0 <vSensor+0xd8>

0000352c <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3530:	b095      	sub	sp, #84	; 0x54
    3532:	af00      	add	r7, sp, #0
    3534:	6178      	str	r0, [r7, #20]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    3536:	6979      	ldr	r1, [r7, #20]
    3538:	64b9      	str	r1, [r7, #72]	; 0x48
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    353a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    353c:	6849      	ldr	r1, [r1, #4]
    353e:	6479      	str	r1, [r7, #68]	; 0x44
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3540:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3542:	6889      	ldr	r1, [r1, #8]
    3544:	6439      	str	r1, [r7, #64]	; 0x40
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3546:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3548:	6809      	ldr	r1, [r1, #0]
    354a:	63f9      	str	r1, [r7, #60]	; 0x3c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    354c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    354e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3550:	63b9      	str	r1, [r7, #56]	; 0x38
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3552:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3554:	6a09      	ldr	r1, [r1, #32]
    3556:	6379      	str	r1, [r7, #52]	; 0x34

    xEventHandle pxEvent[xNumOfIn];
    3558:	6c7e      	ldr	r6, [r7, #68]	; 0x44
    355a:	1e71      	subs	r1, r6, #1
    355c:	6339      	str	r1, [r7, #48]	; 0x30
    355e:	4631      	mov	r1, r6
    3560:	4608      	mov	r0, r1
    3562:	f04f 0100 	mov.w	r1, #0
    3566:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    356a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    356e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3572:	4631      	mov	r1, r6
    3574:	4608      	mov	r0, r1
    3576:	f04f 0100 	mov.w	r1, #0
    357a:	ea4f 1941 	mov.w	r9, r1, lsl #5
    357e:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3582:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3586:	4631      	mov	r1, r6
    3588:	0089      	lsls	r1, r1, #2
    358a:	3103      	adds	r1, #3
    358c:	3107      	adds	r1, #7
    358e:	08c9      	lsrs	r1, r1, #3
    3590:	00c9      	lsls	r1, r1, #3
    3592:	ebad 0d01 	sub.w	sp, sp, r1
    3596:	4669      	mov	r1, sp
    3598:	3103      	adds	r1, #3
    359a:	0889      	lsrs	r1, r1, #2
    359c:	0089      	lsls	r1, r1, #2
    359e:	62f9      	str	r1, [r7, #44]	; 0x2c
    struct eventData xDatas[xNumOfOut];
    35a0:	6c3e      	ldr	r6, [r7, #64]	; 0x40
    35a2:	1e71      	subs	r1, r6, #1
    35a4:	62b9      	str	r1, [r7, #40]	; 0x28
    35a6:	4631      	mov	r1, r6
    35a8:	4608      	mov	r0, r1
    35aa:	f04f 0100 	mov.w	r1, #0
    35ae:	01cd      	lsls	r5, r1, #7
    35b0:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    35b4:	01c4      	lsls	r4, r0, #7
    35b6:	4631      	mov	r1, r6
    35b8:	4608      	mov	r0, r1
    35ba:	f04f 0100 	mov.w	r1, #0
    35be:	01cb      	lsls	r3, r1, #7
    35c0:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    35c4:	01c2      	lsls	r2, r0, #7
    35c6:	4633      	mov	r3, r6
    35c8:	011b      	lsls	r3, r3, #4
    35ca:	3303      	adds	r3, #3
    35cc:	3307      	adds	r3, #7
    35ce:	08db      	lsrs	r3, r3, #3
    35d0:	00db      	lsls	r3, r3, #3
    35d2:	ebad 0d03 	sub.w	sp, sp, r3
    35d6:	466b      	mov	r3, sp
    35d8:	3303      	adds	r3, #3
    35da:	089b      	lsrs	r3, r3, #2
    35dc:	009b      	lsls	r3, r3, #2
    35de:	627b      	str	r3, [r7, #36]	; 0x24

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35e2:	69db      	ldr	r3, [r3, #28]
    35e4:	623b      	str	r3, [r7, #32]
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35e6:	f240 73f0 	movw	r3, #2032	; 0x7f0
    35ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    35f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35f4:	4618      	mov	r0, r3
    35f6:	6a39      	ldr	r1, [r7, #32]
    35f8:	f002 f8a6 	bl	5748 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    35fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    3600:	4619      	mov	r1, r3
    3602:	f7ff fd6d 	bl	30e0 <vEventReceiveAll>

        vPrintNumber(xMyFlag);
    3606:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3608:	f013 fcd2 	bl	16fb0 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    360c:	f001 fbf4 	bl	4df8 <xTaskGetTickCount>
    3610:	61f8      	str	r0, [r7, #28]
        vPrintNumber( xCurrentTime );
    3612:	69f8      	ldr	r0, [r7, #28]
    3614:	f013 fccc 	bl	16fb0 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3618:	f240 73f0 	movw	r3, #2032	; 0x7f0
    361c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3626:	4618      	mov	r0, r3
    3628:	69f9      	ldr	r1, [r7, #28]
    362a:	f002 f87f 	bl	572c <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    362e:	2300      	movs	r3, #0
    3630:	64fb      	str	r3, [r7, #76]	; 0x4c
    3632:	e01c      	b.n	366e <vServant+0x142>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    363c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    363e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3640:	0112      	lsls	r2, r2, #4
    3642:	188c      	adds	r4, r1, r2
    3644:	463a      	mov	r2, r7
    3646:	4610      	mov	r0, r2
    3648:	4619      	mov	r1, r3
    364a:	f7ff f9cf 	bl	29ec <xEventGetxData>
    364e:	463b      	mov	r3, r7
    3650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    3656:	69fa      	ldr	r2, [r7, #28]
    3658:	6a3b      	ldr	r3, [r7, #32]
    365a:	441a      	add	r2, r3
    365c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3660:	011b      	lsls	r3, r3, #4
    3662:	440b      	add	r3, r1
    3664:	3304      	adds	r3, #4
    3666:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCount();
        vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    366a:	3301      	adds	r3, #1
    366c:	64fb      	str	r3, [r7, #76]	; 0x4c
    366e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3672:	429a      	cmp	r2, r3
    3674:	dbde      	blt.n	3634 <vServant+0x108>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    3676:	2300      	movs	r3, #0
    3678:	64fb      	str	r3, [r7, #76]	; 0x4c
    367a:	e002      	b.n	3682 <vServant+0x156>
    367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    367e:	3301      	adds	r3, #1
    3680:	64fb      	str	r3, [r7, #76]	; 0x4c
    3682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3684:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    3688:	dbf8      	blt.n	367c <vServant+0x150>
        {
            //xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    368c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    368e:	4619      	mov	r1, r3
    3690:	f7ff fda2 	bl	31d8 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    3694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3696:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    3698:	4619      	mov	r1, r3
    369a:	f7ff fdbb 	bl	3214 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36a0:	681a      	ldr	r2, [r3, #0]
    36a2:	69fb      	ldr	r3, [r7, #28]
    36a4:	429a      	cmp	r2, r3
    36a6:	d20d      	bcs.n	36c4 <vServant+0x198>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    36a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36aa:	681b      	ldr	r3, [r3, #0]
    36ac:	4618      	mov	r0, r3
    36ae:	f013 fc7f 	bl	16fb0 <vPrintNumber>
            vPrintNumber(xCurrentTime);
    36b2:	69f8      	ldr	r0, [r7, #28]
    36b4:	f013 fc7c 	bl	16fb0 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    36b8:	f648 00fc 	movw	r0, #35068	; 0x88fc
    36bc:	f2c0 0001 	movt	r0, #1
    36c0:	f013 fc5c 	bl	16f7c <vPrintString>
        }

        vTaskDelayLET();
    36c4:	f7ff fcec 	bl	30a0 <vTaskDelayLET>

        xCurrentTime = xTaskGetTickCount();
    36c8:	f001 fb96 	bl	4df8 <xTaskGetTickCount>
    36cc:	61f8      	str	r0, [r7, #28]
        vPrintNumber( xCurrentTime );
    36ce:	69f8      	ldr	r0, [r7, #28]
    36d0:	f013 fc6e 	bl	16fb0 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // output the ready time of task
    36d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36d6:	681a      	ldr	r2, [r3, #0]
    36d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36da:	1ad3      	subs	r3, r2, r3
    36dc:	4618      	mov	r0, r3
    36de:	f013 fc67 	bl	16fb0 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod );  // output the deadline of task
    36e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	4618      	mov	r0, r3
    36e8:	f013 fc62 	bl	16fb0 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    36ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36ee:	f103 020a 	add.w	r2, r3, #10
    36f2:	4613      	mov	r3, r2
    36f4:	005b      	lsls	r3, r3, #1
    36f6:	4413      	add	r3, r2
    36f8:	4618      	mov	r0, r3
    36fa:	f013 fc59 	bl	16fb0 <vPrintNumber>


        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36fe:	f240 7398 	movw	r3, #1944	; 0x798
    3702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3708:	4618      	mov	r0, r3
    370a:	2100      	movs	r1, #0
    370c:	2200      	movs	r2, #0
    370e:	2300      	movs	r3, #0
    3710:	f000 fbf8 	bl	3f04 <xQueueGenericSend>
        
    }
    3714:	e772      	b.n	35fc <vServant+0xd0>
    3716:	bf00      	nop

00003718 <vR_Servant>:
}

void vR_Servant( void * pvParameter)
{
    3718:	b580      	push	{r7, lr}
    371a:	b090      	sub	sp, #64	; 0x40
    371c:	af00      	add	r7, sp, #0
    371e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3724:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    372c:	69db      	ldr	r3, [r3, #28]
    372e:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3730:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    373a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    373e:	4618      	mov	r0, r3
    3740:	6a39      	ldr	r1, [r7, #32]
    3742:	f002 f801 	bl	5748 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3746:	f240 7398 	movw	r3, #1944	; 0x798
    374a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3754:	4618      	mov	r0, r3
    3756:	2100      	movs	r1, #0
    3758:	f04f 32ff 	mov.w	r2, #4294967295
    375c:	2300      	movs	r3, #0
    375e:	f000 fc97 	bl	4090 <xQueueGenericReceive>

        vPrintNumber( xMyFlag );
    3762:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3764:	f013 fc24 	bl	16fb0 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
    3768:	f001 fb46 	bl	4df8 <xTaskGetTickCount>
    376c:	61f8      	str	r0, [r7, #28]
        vPrintNumber( xCurrentTime );
    376e:	69f8      	ldr	r0, [r7, #28]
    3770:	f013 fc1e 	bl	16fb0 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3774:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    377e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3782:	4618      	mov	r0, r3
    3784:	69f9      	ldr	r1, [r7, #28]
    3786:	f001 ffd1 	bl	572c <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    378a:	2300      	movs	r3, #0
    378c:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    378e:	e094      	b.n	38ba <vR_Servant+0x1a2>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3790:	f107 030c 	add.w	r3, r7, #12
    3794:	4618      	mov	r0, r3
    3796:	f240 31cc 	movw	r1, #972	; 0x3cc
    379a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    379e:	f7ff fa6f 	bl	2c80 <xEventListGenericTransit>
    37a2:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    37a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    37aa:	d100      	bne.n	37ae <vR_Servant+0x96>
            {
                // no event
                break;
    37ac:	e089      	b.n	38c2 <vR_Servant+0x1aa>
            }
            else if( xResult == 0 )
    37ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37b0:	2b00      	cmp	r3, #0
    37b2:	d100      	bne.n	37b6 <vR_Servant+0x9e>
            {
                // not time yet
                break;
    37b4:	e085      	b.n	38c2 <vR_Servant+0x1aa>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	68db      	ldr	r3, [r3, #12]
    37ba:	4618      	mov	r0, r3
    37bc:	f7ff f8f8 	bl	29b0 <xEventGetpxDestination>
    37c0:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	68db      	ldr	r3, [r3, #12]
    37c6:	4618      	mov	r0, r3
    37c8:	f7ff f8e6 	bl	2998 <xEventGetpxSource>
    37cc:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    37ce:	2301      	movs	r3, #1
    37d0:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37d2:	2300      	movs	r3, #0
    37d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    37d6:	e068      	b.n	38aa <vR_Servant+0x192>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    37d8:	f240 1210 	movw	r2, #272	; 0x110
    37dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37e2:	460b      	mov	r3, r1
    37e4:	005b      	lsls	r3, r3, #1
    37e6:	440b      	add	r3, r1
    37e8:	009b      	lsls	r3, r3, #2
    37ea:	4413      	add	r3, r2
    37ec:	3304      	adds	r3, #4
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    37f2:	f240 1210 	movw	r2, #272	; 0x110
    37f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37fc:	460b      	mov	r3, r1
    37fe:	005b      	lsls	r3, r3, #1
    3800:	440b      	add	r3, r1
    3802:	009b      	lsls	r3, r3, #2
    3804:	4413      	add	r3, r2
    3806:	3308      	adds	r3, #8
    3808:	681b      	ldr	r3, [r3, #0]
    380a:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    380c:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3814:	693a      	ldr	r2, [r7, #16]
    3816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    381c:	429a      	cmp	r2, r3
    381e:	d141      	bne.n	38a4 <vR_Servant+0x18c>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3820:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3828:	697a      	ldr	r2, [r7, #20]
    382a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    382e:	69bb      	ldr	r3, [r7, #24]
    3830:	429a      	cmp	r2, r3
    3832:	d127      	bne.n	3884 <vR_Servant+0x16c>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3834:	f240 1210 	movw	r2, #272	; 0x110
    3838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    383c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    383e:	460b      	mov	r3, r1
    3840:	005b      	lsls	r3, r3, #1
    3842:	440b      	add	r3, r1
    3844:	009b      	lsls	r3, r3, #2
    3846:	4413      	add	r3, r2
    3848:	330c      	adds	r3, #12
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	2b02      	cmp	r3, #2
    384e:	d10b      	bne.n	3868 <vR_Servant+0x150>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3850:	f648 1024 	movw	r0, #35108	; 0x8924
    3854:	f2c0 0001 	movt	r0, #1
    3858:	f013 fb90 	bl	16f7c <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    385c:	68fb      	ldr	r3, [r7, #12]
    385e:	68db      	ldr	r3, [r3, #12]
    3860:	4618      	mov	r0, r3
    3862:	f7ff fabf 	bl	2de4 <vEventGenericDelete>
    3866:	e01d      	b.n	38a4 <vR_Servant+0x18c>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3868:	f240 1210 	movw	r2, #272	; 0x110
    386c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3872:	460b      	mov	r3, r1
    3874:	005b      	lsls	r3, r3, #1
    3876:	440b      	add	r3, r1
    3878:	009b      	lsls	r3, r3, #2
    387a:	4413      	add	r3, r2
    387c:	330c      	adds	r3, #12
    387e:	2202      	movs	r2, #2
    3880:	601a      	str	r2, [r3, #0]
    3882:	e00f      	b.n	38a4 <vR_Servant+0x18c>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3884:	f240 1210 	movw	r2, #272	; 0x110
    3888:	f2c2 0200 	movt	r2, #8192	; 0x2000
    388c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    388e:	460b      	mov	r3, r1
    3890:	005b      	lsls	r3, r3, #1
    3892:	440b      	add	r3, r1
    3894:	009b      	lsls	r3, r3, #2
    3896:	4413      	add	r3, r2
    3898:	330c      	adds	r3, #12
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	2b01      	cmp	r3, #1
    389e:	d101      	bne.n	38a4 <vR_Servant+0x18c>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    38a0:	2300      	movs	r3, #0
    38a2:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38a6:	3301      	adds	r3, #1
    38a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    38aa:	f240 1310 	movw	r3, #272	; 0x110
    38ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b2:	681a      	ldr	r2, [r3, #0]
    38b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38b6:	429a      	cmp	r2, r3
    38b8:	dc8e      	bgt.n	37d8 <vR_Servant+0xc0>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    38ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38bc:	2b00      	cmp	r3, #0
    38be:	f43f af67 	beq.w	3790 <vR_Servant+0x78>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    38c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    38c8:	d111      	bne.n	38ee <vR_Servant+0x1d6>
        {
            vTaskDelayLET();
    38ca:	f7ff fbe9 	bl	30a0 <vTaskDelayLET>
            xCurrentTime = xTaskGetTickCount();
    38ce:	f001 fa93 	bl	4df8 <xTaskGetTickCount>
    38d2:	61f8      	str	r0, [r7, #28]
            vPrintNumber( xCurrentTime );
    38d4:	69f8      	ldr	r0, [r7, #28]
    38d6:	f013 fb6b 	bl	16fb0 <vPrintNumber>
            vPrintNumber( (xMyFlag + 10) * 3 );
    38da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38dc:	f103 020a 	add.w	r2, r3, #10
    38e0:	4613      	mov	r3, r2
    38e2:	005b      	lsls	r3, r3, #1
    38e4:	4413      	add	r3, r2
    38e6:	4618      	mov	r0, r3
    38e8:	f013 fb62 	bl	16fb0 <vPrintNumber>
            continue; 
    38ec:	e067      	b.n	39be <vR_Servant+0x2a6>
        }
        else if ( xResult == 0 )
    38ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38f0:	2b00      	cmp	r3, #0
    38f2:	d111      	bne.n	3918 <vR_Servant+0x200>
        {
            vTaskDelayLET();
    38f4:	f7ff fbd4 	bl	30a0 <vTaskDelayLET>
            xCurrentTime = xTaskGetTickCount();
    38f8:	f001 fa7e 	bl	4df8 <xTaskGetTickCount>
    38fc:	61f8      	str	r0, [r7, #28]
            vPrintNumber( xCurrentTime );
    38fe:	69f8      	ldr	r0, [r7, #28]
    3900:	f013 fb56 	bl	16fb0 <vPrintNumber>
            vPrintNumber( (xMyFlag + 10) * 3 );
    3904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3906:	f103 020a 	add.w	r2, r3, #10
    390a:	4613      	mov	r3, r2
    390c:	005b      	lsls	r3, r3, #1
    390e:	4413      	add	r3, r2
    3910:	4618      	mov	r0, r3
    3912:	f013 fb4d 	bl	16fb0 <vPrintNumber>
            //vPrintString("not time yet\n\r");
            continue;
    3916:	e052      	b.n	39be <vR_Servant+0x2a6>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3918:	2300      	movs	r3, #0
    391a:	63fb      	str	r3, [r7, #60]	; 0x3c
    391c:	e028      	b.n	3970 <vR_Servant+0x258>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    391e:	f240 1210 	movw	r2, #272	; 0x110
    3922:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3928:	460b      	mov	r3, r1
    392a:	005b      	lsls	r3, r3, #1
    392c:	440b      	add	r3, r1
    392e:	009b      	lsls	r3, r3, #2
    3930:	4413      	add	r3, r2
    3932:	3308      	adds	r3, #8
    3934:	681b      	ldr	r3, [r3, #0]
    3936:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3938:	f240 73f0 	movw	r3, #2032	; 0x7f0
    393c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3940:	693a      	ldr	r2, [r7, #16]
    3942:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3948:	429a      	cmp	r2, r3
    394a:	d10e      	bne.n	396a <vR_Servant+0x252>
                {
                    xRelations.xRelation[i].xFlag = 1;
    394c:	f240 1210 	movw	r2, #272	; 0x110
    3950:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3956:	460b      	mov	r3, r1
    3958:	005b      	lsls	r3, r3, #1
    395a:	440b      	add	r3, r1
    395c:	009b      	lsls	r3, r3, #2
    395e:	4413      	add	r3, r2
    3960:	330c      	adds	r3, #12
    3962:	2201      	movs	r2, #1
    3964:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3966:	693b      	ldr	r3, [r7, #16]
    3968:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    396c:	3301      	adds	r3, #1
    396e:	63fb      	str	r3, [r7, #60]	; 0x3c
    3970:	f240 1310 	movw	r3, #272	; 0x110
    3974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3978:	681a      	ldr	r2, [r3, #0]
    397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    397c:	429a      	cmp	r2, r3
    397e:	dcce      	bgt.n	391e <vR_Servant+0x206>
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
                }
            }

            vTaskDelayLET();
    3980:	f7ff fb8e 	bl	30a0 <vTaskDelayLET>
            xCurrentTime = xTaskGetTickCount();
    3984:	f001 fa38 	bl	4df8 <xTaskGetTickCount>
    3988:	61f8      	str	r0, [r7, #28]
            vPrintNumber( xCurrentTime );
    398a:	69f8      	ldr	r0, [r7, #28]
    398c:	f013 fb10 	bl	16fb0 <vPrintNumber>
            vPrintNumber( (xMyFlag + 10) * 3 );
    3990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3992:	f103 020a 	add.w	r2, r3, #10
    3996:	4613      	mov	r3, r2
    3998:	005b      	lsls	r3, r3, #1
    399a:	4413      	add	r3, r2
    399c:	4618      	mov	r0, r3
    399e:	f013 fb07 	bl	16fb0 <vPrintNumber>

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    39a2:	f240 7398 	movw	r3, #1944	; 0x798
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    39ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    39b0:	4618      	mov	r0, r3
    39b2:	2100      	movs	r1, #0
    39b4:	2200      	movs	r2, #0
    39b6:	2300      	movs	r3, #0
    39b8:	f000 faa4 	bl	3f04 <xQueueGenericSend>
        }
    }
    39bc:	e6c3      	b.n	3746 <vR_Servant+0x2e>
    39be:	e6c2      	b.n	3746 <vR_Servant+0x2e>

000039c0 <s_0>:
 * 3) s_2
 * 4) s_3
 * 5) actuator 4
 * */
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b084      	sub	sp, #16
    39c4:	af00      	add	r7, sp, #0
    39c6:	60f8      	str	r0, [r7, #12]
    39c8:	60b9      	str	r1, [r7, #8]
    39ca:	607a      	str	r2, [r7, #4]
    39cc:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 start ###############\n\r");
    last_radio_from_ppm(); // ppm.h
    39ce:	f012 f913 	bl	15bf8 <last_radio_from_ppm>
}
    39d2:	3710      	adds	r7, #16
    39d4:	46bd      	mov	sp, r7
    39d6:	bd80      	pop	{r7, pc}

000039d8 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39d8:	b480      	push	{r7}
    39da:	b085      	sub	sp, #20
    39dc:	af00      	add	r7, sp, #0
    39de:	60f8      	str	r0, [r7, #12]
    39e0:	60b9      	str	r1, [r7, #8]
    39e2:	607a      	str	r2, [r7, #4]
    39e4:	603b      	str	r3, [r7, #0]
    //vPrintString("s_0\n\r");
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    39e6:	3714      	adds	r7, #20
    39e8:	46bd      	mov	sp, r7
    39ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ee:	4770      	bx	lr

000039f0 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b084      	sub	sp, #16
    39f4:	af00      	add	r7, sp, #0
    39f6:	60f8      	str	r0, [r7, #12]
    39f8:	60b9      	str	r1, [r7, #8]
    39fa:	607a      	str	r2, [r7, #4]
    39fc:	603b      	str	r3, [r7, #0]

    //vPrintString("s_1\n\r");
    to_autopilot_from_last_radio(); // main.c
    39fe:	f012 fcb5 	bl	1636c <to_autopilot_from_last_radio>
}
    3a02:	3710      	adds	r7, #16
    3a04:	46bd      	mov	sp, r7
    3a06:	bd80      	pop	{r7, pc}

00003a08 <s_3>:

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	b084      	sub	sp, #16
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	60f8      	str	r0, [r7, #12]
    3a10:	60b9      	str	r1, [r7, #8]
    3a12:	607a      	str	r2, [r7, #4]
    3a14:	603b      	str	r3, [r7, #0]

    spi_reset(); // spi_fbw.h
    3a16:	f012 fbe7 	bl	161e8 <spi_reset>
}
    3a1a:	3710      	adds	r7, #16
    3a1c:	46bd      	mov	sp, r7
    3a1e:	bd80      	pop	{r7, pc}

00003a20 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a20:	b580      	push	{r7, lr}
    3a22:	b084      	sub	sp, #16
    3a24:	af00      	add	r7, sp, #0
    3a26:	60f8      	str	r0, [r7, #12]
    3a28:	60b9      	str	r1, [r7, #8]
    3a2a:	607a      	str	r2, [r7, #4]
    3a2c:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 end ###############\n\r");
    check_mega128_values_task(); // main.c
    3a2e:	f012 fde5 	bl	165fc <check_mega128_values_task>
}
    3a32:	3710      	adds	r7, #16
    3a34:	46bd      	mov	sp, r7
    3a36:	bd80      	pop	{r7, pc}

00003a38 <s_5>:

void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b084      	sub	sp, #16
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60f8      	str	r0, [r7, #12]
    3a40:	60b9      	str	r1, [r7, #8]
    3a42:	607a      	str	r2, [r7, #4]
    3a44:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 start+++++++++++++++++++\n\r");
    servo_transmit(); //servo.h
    3a46:	f012 feb1 	bl	167ac <servo_transmit>
}
    3a4a:	3710      	adds	r7, #16
    3a4c:	46bd      	mov	sp, r7
    3a4e:	bd80      	pop	{r7, pc}

00003a50 <s_6>:

void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a50:	b580      	push	{r7, lr}
    3a52:	b084      	sub	sp, #16
    3a54:	af00      	add	r7, sp, #0
    3a56:	60f8      	str	r0, [r7, #12]
    3a58:	60b9      	str	r1, [r7, #8]
    3a5a:	607a      	str	r2, [r7, #4]
    3a5c:	603b      	str	r3, [r7, #0]
    //vPrintString("s_2\n\r");
    check_failsafe_task(); // main.c
    3a5e:	f012 fdc3 	bl	165e8 <check_failsafe_task>
}
    3a62:	3710      	adds	r7, #16
    3a64:	46bd      	mov	sp, r7
    3a66:	bd80      	pop	{r7, pc}

00003a68 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a68:	b580      	push	{r7, lr}
    3a6a:	b084      	sub	sp, #16
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	60b9      	str	r1, [r7, #8]
    3a72:	607a      	str	r2, [r7, #4]
    3a74:	603b      	str	r3, [r7, #0]

    //vPrintString("s_7\n\r");
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3a76:	f009 f851 	bl	cb1c <radio_control_task>
}
    3a7a:	3710      	adds	r7, #16
    3a7c:	46bd      	mov	sp, r7
    3a7e:	bd80      	pop	{r7, pc}

00003a80 <s_8>:
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	60f8      	str	r0, [r7, #12]
    3a88:	60b9      	str	r1, [r7, #8]
    3a8a:	607a      	str	r2, [r7, #4]
    3a8c:	603b      	str	r3, [r7, #0]
    //check_mega128_values_task(); // link_autopilot.h
    ir_gain_calib(); //infrared.h
    3a8e:	f00d fef7 	bl	11880 <ir_gain_calib>
}
    3a92:	3710      	adds	r7, #16
    3a94:	46bd      	mov	sp, r7
    3a96:	bd80      	pop	{r7, pc}

00003a98 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b084      	sub	sp, #16
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	60f8      	str	r0, [r7, #12]
    3aa0:	60b9      	str	r1, [r7, #8]
    3aa2:	607a      	str	r2, [r7, #4]
    3aa4:	603b      	str	r3, [r7, #0]
    
    ir_update(); // infrared.h
    3aa6:	f00d fead 	bl	11804 <ir_update>
}
    3aaa:	3710      	adds	r7, #16
    3aac:	46bd      	mov	sp, r7
    3aae:	bd80      	pop	{r7, pc}

00003ab0 <s_10>:
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ab0:	b580      	push	{r7, lr}
    3ab2:	b084      	sub	sp, #16
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	60f8      	str	r0, [r7, #12]
    3ab8:	60b9      	str	r1, [r7, #8]
    3aba:	607a      	str	r2, [r7, #4]
    3abc:	603b      	str	r3, [r7, #0]

    //vPrintString("s_3\n\r");
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3abe:	f011 f929 	bl	14d14 <estimator_update_state_infrared>
}
    3ac2:	3710      	adds	r7, #16
    3ac4:	46bd      	mov	sp, r7
    3ac6:	bd80      	pop	{r7, pc}

00003ac8 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b084      	sub	sp, #16
    3acc:	af00      	add	r7, sp, #0
    3ace:	60f8      	str	r0, [r7, #12]
    3ad0:	60b9      	str	r1, [r7, #8]
    3ad2:	607a      	str	r2, [r7, #4]
    3ad4:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 end +++++++++++++++++++\n\r");
    roll_pitch_pid_run(); // pid.h
    3ad6:	f00d ff03 	bl	118e0 <roll_pitch_pid_run>
}
    3ada:	3710      	adds	r7, #16
    3adc:	46bd      	mov	sp, r7
    3ade:	bd80      	pop	{r7, pc}

00003ae0 <s_12>:

void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b084      	sub	sp, #16
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	60f8      	str	r0, [r7, #12]
    3ae8:	60b9      	str	r1, [r7, #8]
    3aea:	607a      	str	r2, [r7, #4]
    3aec:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 start---------------------\n\r");
    link_fbw_send(); //link_fbw.h
    3aee:	f00d f8fb 	bl	10ce8 <link_fbw_send>
}
    3af2:	3710      	adds	r7, #16
    3af4:	46bd      	mov	sp, r7
    3af6:	bd80      	pop	{r7, pc}

00003af8 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b084      	sub	sp, #16
    3afc:	af00      	add	r7, sp, #0
    3afe:	60f8      	str	r0, [r7, #12]
    3b00:	60b9      	str	r1, [r7, #8]
    3b02:	607a      	str	r2, [r7, #4]
    3b04:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_12\n\r");
    parse_gps_msg(); //gps.h
    3b06:	f00d fbc7 	bl	11298 <parse_gps_msg>
}
    3b0a:	3710      	adds	r7, #16
    3b0c:	46bd      	mov	sp, r7
    3b0e:	bd80      	pop	{r7, pc}

00003b10 <s_14>:

void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b084      	sub	sp, #16
    3b14:	af00      	add	r7, sp, #0
    3b16:	60f8      	str	r0, [r7, #12]
    3b18:	60b9      	str	r1, [r7, #8]
    3b1a:	607a      	str	r2, [r7, #4]
    3b1c:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 end ----------------------\n\r");
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3b1e:	f00a fde3 	bl	e6e8 <send_gps_pos>
    send_radIR();
    3b22:	f00b ffa7 	bl	fa74 <send_radIR>
    send_takeOff();
    3b26:	f00c fd9f 	bl	10668 <send_takeOff>
}
    3b2a:	3710      	adds	r7, #16
    3b2c:	46bd      	mov	sp, r7
    3b2e:	bd80      	pop	{r7, pc}

00003b30 <s_15>:


void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
    3b36:	60f8      	str	r0, [r7, #12]
    3b38:	60b9      	str	r1, [r7, #8]
    3b3a:	607a      	str	r2, [r7, #4]
    3b3c:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 4 start********************\n\r");
    nav_home(); // nav.h
    3b3e:	f010 fe6b 	bl	14818 <nav_home>
}
    3b42:	3710      	adds	r7, #16
    3b44:	46bd      	mov	sp, r7
    3b46:	bd80      	pop	{r7, pc}

00003b48 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b084      	sub	sp, #16
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	60f8      	str	r0, [r7, #12]
    3b50:	60b9      	str	r1, [r7, #8]
    3b52:	607a      	str	r2, [r7, #4]
    3b54:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_8\n\r");
    nav_update(); // nav.h
    3b56:	f010 fe85 	bl	14864 <nav_update>
}
    3b5a:	3710      	adds	r7, #16
    3b5c:	46bd      	mov	sp, r7
    3b5e:	bd80      	pop	{r7, pc}

00003b60 <s_17>:

void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b084      	sub	sp, #16
    3b64:	af00      	add	r7, sp, #0
    3b66:	60f8      	str	r0, [r7, #12]
    3b68:	60b9      	str	r1, [r7, #8]
    3b6a:	607a      	str	r2, [r7, #4]
    3b6c:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3b6e:	f00d ffa3 	bl	11ab8 <course_pid_run>
}
    3b72:	3710      	adds	r7, #16
    3b74:	46bd      	mov	sp, r7
    3b76:	bd80      	pop	{r7, pc}

00003b78 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b084      	sub	sp, #16
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	60f8      	str	r0, [r7, #12]
    3b80:	60b9      	str	r1, [r7, #8]
    3b82:	607a      	str	r2, [r7, #4]
    3b84:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3b86:	f00e fa1f 	bl	11fc8 <altitude_pid_run>
}
    3b8a:	3710      	adds	r7, #16
    3b8c:	46bd      	mov	sp, r7
    3b8e:	bd80      	pop	{r7, pc}

00003b90 <s_19>:
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	60f8      	str	r0, [r7, #12]
    3b98:	60b9      	str	r1, [r7, #8]
    3b9a:	607a      	str	r2, [r7, #4]
    3b9c:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3b9e:	f00e f843 	bl	11c28 <climb_pid_run>
}
    3ba2:	3710      	adds	r7, #16
    3ba4:	46bd      	mov	sp, r7
    3ba6:	bd80      	pop	{r7, pc}

00003ba8 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b084      	sub	sp, #16
    3bac:	af00      	add	r7, sp, #0
    3bae:	60f8      	str	r0, [r7, #12]
    3bb0:	60b9      	str	r1, [r7, #8]
    3bb2:	607a      	str	r2, [r7, #4]
    3bb4:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3bb6:	f003 fa79 	bl	70ac <send_boot>
    send_attitude();
    3bba:	f004 fa47 	bl	804c <send_attitude>
    send_adc();
    3bbe:	f004 ff39 	bl	8a34 <send_adc>
    send_settings();
    3bc2:	f005 f9bf 	bl	8f44 <send_settings>
    send_desired();
    3bc6:	f005 fdc1 	bl	974c <send_desired>
    send_bat();
    3bca:	f006 fcef 	bl	a5ac <send_bat>
    send_climb();
    3bce:	f007 f8a3 	bl	ad18 <send_climb>
    send_mode();
    3bd2:	f007 fe13 	bl	b7fc <send_mode>
    send_debug();
    3bd6:	f008 f8e5 	bl	bda4 <send_debug>
    send_nav_ref();
    3bda:	f008 fbb9 	bl	c350 <send_nav_ref>
}
    3bde:	3710      	adds	r7, #16
    3be0:	46bd      	mov	sp, r7
    3be2:	bd80      	pop	{r7, pc}

00003be4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3be4:	b480      	push	{r7}
    3be6:	b083      	sub	sp, #12
    3be8:	af00      	add	r7, sp, #0
    3bea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	f103 0208 	add.w	r2, r3, #8
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3bf6:	687b      	ldr	r3, [r7, #4]
    3bf8:	f04f 32ff 	mov.w	r2, #4294967295
    3bfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	f103 0208 	add.w	r2, r3, #8
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	f103 0208 	add.w	r2, r3, #8
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	2200      	movs	r2, #0
    3c16:	601a      	str	r2, [r3, #0]
}
    3c18:	370c      	adds	r7, #12
    3c1a:	46bd      	mov	sp, r7
    3c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop

00003c24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3c24:	b480      	push	{r7}
    3c26:	b083      	sub	sp, #12
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3c2c:	687b      	ldr	r3, [r7, #4]
    3c2e:	2200      	movs	r2, #0
    3c30:	611a      	str	r2, [r3, #16]
}
    3c32:	370c      	adds	r7, #12
    3c34:	46bd      	mov	sp, r7
    3c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3a:	4770      	bx	lr

00003c3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3c3c:	b480      	push	{r7}
    3c3e:	b085      	sub	sp, #20
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
    3c44:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	685b      	ldr	r3, [r3, #4]
    3c4a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3c4c:	68fb      	ldr	r3, [r7, #12]
    3c4e:	685a      	ldr	r2, [r3, #4]
    3c50:	683b      	ldr	r3, [r7, #0]
    3c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	685a      	ldr	r2, [r3, #4]
    3c58:	683b      	ldr	r3, [r7, #0]
    3c5a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3c5c:	68fb      	ldr	r3, [r7, #12]
    3c5e:	685b      	ldr	r3, [r3, #4]
    3c60:	683a      	ldr	r2, [r7, #0]
    3c62:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3c64:	68fb      	ldr	r3, [r7, #12]
    3c66:	683a      	ldr	r2, [r7, #0]
    3c68:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	683a      	ldr	r2, [r7, #0]
    3c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3c70:	683b      	ldr	r3, [r7, #0]
    3c72:	687a      	ldr	r2, [r7, #4]
    3c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	1c5a      	adds	r2, r3, #1
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	601a      	str	r2, [r3, #0]
}
    3c80:	3714      	adds	r7, #20
    3c82:	46bd      	mov	sp, r7
    3c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c88:	4770      	bx	lr
    3c8a:	bf00      	nop

00003c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3c8c:	b480      	push	{r7}
    3c8e:	b085      	sub	sp, #20
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
    3c94:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3c96:	683b      	ldr	r3, [r7, #0]
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3c9c:	68bb      	ldr	r3, [r7, #8]
    3c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ca2:	d103      	bne.n	3cac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	691b      	ldr	r3, [r3, #16]
    3ca8:	60fb      	str	r3, [r7, #12]
    3caa:	e00c      	b.n	3cc6 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	3308      	adds	r3, #8
    3cb0:	60fb      	str	r3, [r7, #12]
    3cb2:	e002      	b.n	3cba <vListInsert+0x2e>
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	685b      	ldr	r3, [r3, #4]
    3cb8:	60fb      	str	r3, [r7, #12]
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	685b      	ldr	r3, [r3, #4]
    3cbe:	681a      	ldr	r2, [r3, #0]
    3cc0:	68bb      	ldr	r3, [r7, #8]
    3cc2:	429a      	cmp	r2, r3
    3cc4:	d9f6      	bls.n	3cb4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3cc6:	68fb      	ldr	r3, [r7, #12]
    3cc8:	685a      	ldr	r2, [r3, #4]
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	685b      	ldr	r3, [r3, #4]
    3cd2:	683a      	ldr	r2, [r7, #0]
    3cd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3cd6:	683b      	ldr	r3, [r7, #0]
    3cd8:	68fa      	ldr	r2, [r7, #12]
    3cda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	683a      	ldr	r2, [r7, #0]
    3ce0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ce2:	683b      	ldr	r3, [r7, #0]
    3ce4:	687a      	ldr	r2, [r7, #4]
    3ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	681b      	ldr	r3, [r3, #0]
    3cec:	1c5a      	adds	r2, r3, #1
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	601a      	str	r2, [r3, #0]
}
    3cf2:	3714      	adds	r7, #20
    3cf4:	46bd      	mov	sp, r7
    3cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cfa:	4770      	bx	lr

00003cfc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3cfc:	b480      	push	{r7}
    3cfe:	b085      	sub	sp, #20
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	685b      	ldr	r3, [r3, #4]
    3d08:	687a      	ldr	r2, [r7, #4]
    3d0a:	6892      	ldr	r2, [r2, #8]
    3d0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	689b      	ldr	r3, [r3, #8]
    3d12:	687a      	ldr	r2, [r7, #4]
    3d14:	6852      	ldr	r2, [r2, #4]
    3d16:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	691b      	ldr	r3, [r3, #16]
    3d1c:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3d1e:	68fb      	ldr	r3, [r7, #12]
    3d20:	685a      	ldr	r2, [r3, #4]
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	429a      	cmp	r2, r3
    3d26:	d103      	bne.n	3d30 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	689a      	ldr	r2, [r3, #8]
    3d2c:	68fb      	ldr	r3, [r7, #12]
    3d2e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	2200      	movs	r2, #0
    3d34:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3d36:	68fb      	ldr	r3, [r7, #12]
    3d38:	681b      	ldr	r3, [r3, #0]
    3d3a:	1e5a      	subs	r2, r3, #1
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	601a      	str	r2, [r3, #0]
}
    3d40:	3714      	adds	r7, #20
    3d42:	46bd      	mov	sp, r7
    3d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop

00003d4c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b084      	sub	sp, #16
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    3d54:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3d56:	2301      	movs	r3, #1
    3d58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3d5a:	683b      	ldr	r3, [r7, #0]
    3d5c:	2b01      	cmp	r3, #1
    3d5e:	d00b      	beq.n	3d78 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d64:	2b00      	cmp	r3, #0
    3d66:	d001      	beq.n	3d6c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3d68:	2300      	movs	r3, #0
    3d6a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	691b      	ldr	r3, [r3, #16]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d001      	beq.n	3d78 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3d74:	2300      	movs	r3, #0
    3d76:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	2b01      	cmp	r3, #1
    3d7c:	d12f      	bne.n	3dde <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	681a      	ldr	r2, [r3, #0]
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d86:	6879      	ldr	r1, [r7, #4]
    3d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3d8a:	fb01 f303 	mul.w	r3, r1, r3
    3d8e:	441a      	add	r2, r3
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	2200      	movs	r2, #0
    3d98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	681a      	ldr	r2, [r3, #0]
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	681a      	ldr	r2, [r3, #0]
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3daa:	3b01      	subs	r3, #1
    3dac:	6879      	ldr	r1, [r7, #4]
    3dae:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3db0:	fb01 f303 	mul.w	r3, r1, r3
    3db4:	441a      	add	r2, r3
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	f04f 32ff 	mov.w	r2, #4294967295
    3dc0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	f04f 32ff 	mov.w	r2, #4294967295
    3dc8:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	3310      	adds	r3, #16
    3dce:	4618      	mov	r0, r3
    3dd0:	f7ff ff08 	bl	3be4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	3324      	adds	r3, #36	; 0x24
    3dd8:	4618      	mov	r0, r3
    3dda:	f7ff ff03 	bl	3be4 <vListInitialise>
	}

	return xReturn;
    3dde:	68fb      	ldr	r3, [r7, #12]
}
    3de0:	4618      	mov	r0, r3
    3de2:	3710      	adds	r7, #16
    3de4:	46bd      	mov	sp, r7
    3de6:	bd80      	pop	{r7, pc}

00003de8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3de8:	b580      	push	{r7, lr}
    3dea:	b088      	sub	sp, #32
    3dec:	af00      	add	r7, sp, #0
    3dee:	60f8      	str	r0, [r7, #12]
    3df0:	60b9      	str	r1, [r7, #8]
    3df2:	4613      	mov	r3, r2
    3df4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3df6:	2300      	movs	r3, #0
    3df8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3dfa:	68fb      	ldr	r3, [r7, #12]
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d026      	beq.n	3e4e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3e00:	204c      	movs	r0, #76	; 0x4c
    3e02:	f001 fda7 	bl	5954 <pvPortMalloc>
    3e06:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3e08:	69bb      	ldr	r3, [r7, #24]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d01f      	beq.n	3e4e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	68ba      	ldr	r2, [r7, #8]
    3e12:	fb02 f303 	mul.w	r3, r2, r3
    3e16:	3301      	adds	r3, #1
    3e18:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3e1a:	6978      	ldr	r0, [r7, #20]
    3e1c:	f001 fd9a 	bl	5954 <pvPortMalloc>
    3e20:	4602      	mov	r2, r0
    3e22:	69bb      	ldr	r3, [r7, #24]
    3e24:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3e26:	69bb      	ldr	r3, [r7, #24]
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d00c      	beq.n	3e48 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3e2e:	69bb      	ldr	r3, [r7, #24]
    3e30:	68fa      	ldr	r2, [r7, #12]
    3e32:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3e34:	69bb      	ldr	r3, [r7, #24]
    3e36:	68ba      	ldr	r2, [r7, #8]
    3e38:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3e3a:	69b8      	ldr	r0, [r7, #24]
    3e3c:	2101      	movs	r1, #1
    3e3e:	f7ff ff85 	bl	3d4c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3e42:	69bb      	ldr	r3, [r7, #24]
    3e44:	61fb      	str	r3, [r7, #28]
    3e46:	e002      	b.n	3e4e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3e48:	69b8      	ldr	r0, [r7, #24]
    3e4a:	f001 fe47 	bl	5adc <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3e4e:	69fb      	ldr	r3, [r7, #28]
}
    3e50:	4618      	mov	r0, r3
    3e52:	3720      	adds	r7, #32
    3e54:	46bd      	mov	sp, r7
    3e56:	bd80      	pop	{r7, pc}

00003e58 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b084      	sub	sp, #16
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	4603      	mov	r3, r0
    3e60:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3e62:	204c      	movs	r0, #76	; 0x4c
    3e64:	f001 fd76 	bl	5954 <pvPortMalloc>
    3e68:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d02c      	beq.n	3eca <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	2200      	movs	r2, #0
    3e74:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	2200      	movs	r2, #0
    3e7a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	2200      	movs	r2, #0
    3e80:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3e82:	68fb      	ldr	r3, [r7, #12]
    3e84:	2200      	movs	r2, #0
    3e86:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3e88:	68fb      	ldr	r3, [r7, #12]
    3e8a:	2200      	movs	r2, #0
    3e8c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3e8e:	68fb      	ldr	r3, [r7, #12]
    3e90:	2201      	movs	r2, #1
    3e92:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	2200      	movs	r2, #0
    3e98:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3e9a:	68fb      	ldr	r3, [r7, #12]
    3e9c:	f04f 32ff 	mov.w	r2, #4294967295
    3ea0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3ea2:	68fb      	ldr	r3, [r7, #12]
    3ea4:	f04f 32ff 	mov.w	r2, #4294967295
    3ea8:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	3310      	adds	r3, #16
    3eae:	4618      	mov	r0, r3
    3eb0:	f7ff fe98 	bl	3be4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3eb4:	68fb      	ldr	r3, [r7, #12]
    3eb6:	3324      	adds	r3, #36	; 0x24
    3eb8:	4618      	mov	r0, r3
    3eba:	f7ff fe93 	bl	3be4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3ebe:	68f8      	ldr	r0, [r7, #12]
    3ec0:	2100      	movs	r1, #0
    3ec2:	2200      	movs	r2, #0
    3ec4:	2300      	movs	r3, #0
    3ec6:	f000 f81d 	bl	3f04 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3eca:	68fb      	ldr	r3, [r7, #12]
	}
    3ecc:	4618      	mov	r0, r3
    3ece:	3710      	adds	r7, #16
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bd80      	pop	{r7, pc}

00003ed4 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	b084      	sub	sp, #16
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3edc:	f001 fcc0 	bl	5860 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d103      	bne.n	3ef0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	685b      	ldr	r3, [r3, #4]
    3eec:	60fb      	str	r3, [r7, #12]
    3eee:	e001      	b.n	3ef4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3ef0:	2300      	movs	r3, #0
    3ef2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3ef4:	f001 fcca 	bl	588c <vPortExitCritical>
		
		return pxReturn;
    3ef8:	68fb      	ldr	r3, [r7, #12]
	}
    3efa:	4618      	mov	r0, r3
    3efc:	3710      	adds	r7, #16
    3efe:	46bd      	mov	sp, r7
    3f00:	bd80      	pop	{r7, pc}
    3f02:	bf00      	nop

00003f04 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b088      	sub	sp, #32
    3f08:	af00      	add	r7, sp, #0
    3f0a:	60f8      	str	r0, [r7, #12]
    3f0c:	60b9      	str	r1, [r7, #8]
    3f0e:	607a      	str	r2, [r7, #4]
    3f10:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3f12:	2300      	movs	r3, #0
    3f14:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3f16:	f001 fca3 	bl	5860 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3f1a:	68fb      	ldr	r3, [r7, #12]
    3f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3f1e:	68fb      	ldr	r3, [r7, #12]
    3f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f22:	429a      	cmp	r2, r3
    3f24:	d216      	bcs.n	3f54 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3f26:	68f8      	ldr	r0, [r7, #12]
    3f28:	68b9      	ldr	r1, [r7, #8]
    3f2a:	683a      	ldr	r2, [r7, #0]
    3f2c:	f000 f9d6 	bl	42dc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f34:	2b00      	cmp	r3, #0
    3f36:	d009      	beq.n	3f4c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	3324      	adds	r3, #36	; 0x24
    3f3c:	4618      	mov	r0, r3
    3f3e:	f001 f905 	bl	514c <xTaskRemoveFromEventList>
    3f42:	4603      	mov	r3, r0
    3f44:	2b01      	cmp	r3, #1
    3f46:	d101      	bne.n	3f4c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3f48:	f001 fc7c 	bl	5844 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3f4c:	f001 fc9e 	bl	588c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3f50:	2301      	movs	r3, #1
    3f52:	e059      	b.n	4008 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d103      	bne.n	3f62 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3f5a:	f001 fc97 	bl	588c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3f5e:	2300      	movs	r3, #0
    3f60:	e052      	b.n	4008 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3f62:	69fb      	ldr	r3, [r7, #28]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d106      	bne.n	3f76 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3f68:	f107 0314 	add.w	r3, r7, #20
    3f6c:	4618      	mov	r0, r3
    3f6e:	f001 f945 	bl	51fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3f72:	2301      	movs	r3, #1
    3f74:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3f76:	f001 fc89 	bl	588c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3f7a:	f000 fe93 	bl	4ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3f7e:	f001 fc6f 	bl	5860 <vPortEnterCritical>
    3f82:	68fb      	ldr	r3, [r7, #12]
    3f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f86:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f8a:	d102      	bne.n	3f92 <xQueueGenericSend+0x8e>
    3f8c:	68fb      	ldr	r3, [r7, #12]
    3f8e:	2200      	movs	r2, #0
    3f90:	645a      	str	r2, [r3, #68]	; 0x44
    3f92:	68fb      	ldr	r3, [r7, #12]
    3f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f96:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f9a:	d102      	bne.n	3fa2 <xQueueGenericSend+0x9e>
    3f9c:	68fb      	ldr	r3, [r7, #12]
    3f9e:	2200      	movs	r2, #0
    3fa0:	649a      	str	r2, [r3, #72]	; 0x48
    3fa2:	f001 fc73 	bl	588c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3fa6:	f107 0214 	add.w	r2, r7, #20
    3faa:	1d3b      	adds	r3, r7, #4
    3fac:	4610      	mov	r0, r2
    3fae:	4619      	mov	r1, r3
    3fb0:	f001 f93c 	bl	522c <xTaskCheckForTimeOut>
    3fb4:	4603      	mov	r3, r0
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d11e      	bne.n	3ff8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3fba:	68f8      	ldr	r0, [r7, #12]
    3fbc:	f000 fa86 	bl	44cc <prvIsQueueFull>
    3fc0:	4603      	mov	r3, r0
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d012      	beq.n	3fec <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3fc6:	68fb      	ldr	r3, [r7, #12]
    3fc8:	f103 0210 	add.w	r2, r3, #16
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	4610      	mov	r0, r2
    3fd0:	4619      	mov	r1, r3
    3fd2:	f001 f883 	bl	50dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3fd6:	68f8      	ldr	r0, [r7, #12]
    3fd8:	f000 fa02 	bl	43e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3fdc:	f000 fe74 	bl	4cc8 <xTaskResumeAll>
    3fe0:	4603      	mov	r3, r0
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d10f      	bne.n	4006 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3fe6:	f001 fc2d 	bl	5844 <vPortYieldFromISR>
    3fea:	e00c      	b.n	4006 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3fec:	68f8      	ldr	r0, [r7, #12]
    3fee:	f000 f9f7 	bl	43e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3ff2:	f000 fe69 	bl	4cc8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3ff6:	e78e      	b.n	3f16 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3ff8:	68f8      	ldr	r0, [r7, #12]
    3ffa:	f000 f9f1 	bl	43e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3ffe:	f000 fe63 	bl	4cc8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4002:	2300      	movs	r3, #0
    4004:	e000      	b.n	4008 <xQueueGenericSend+0x104>
		}
	}
    4006:	e786      	b.n	3f16 <xQueueGenericSend+0x12>
}
    4008:	4618      	mov	r0, r3
    400a:	3720      	adds	r7, #32
    400c:	46bd      	mov	sp, r7
    400e:	bd80      	pop	{r7, pc}

00004010 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4010:	b580      	push	{r7, lr}
    4012:	b086      	sub	sp, #24
    4014:	af00      	add	r7, sp, #0
    4016:	60f8      	str	r0, [r7, #12]
    4018:	60b9      	str	r1, [r7, #8]
    401a:	607a      	str	r2, [r7, #4]
    401c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    401e:	2300      	movs	r3, #0
    4020:	613b      	str	r3, [r7, #16]
    4022:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4026:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    402a:	68fb      	ldr	r3, [r7, #12]
    402c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    402e:	68fb      	ldr	r3, [r7, #12]
    4030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4032:	429a      	cmp	r2, r3
    4034:	d221      	bcs.n	407a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4036:	68f8      	ldr	r0, [r7, #12]
    4038:	68b9      	ldr	r1, [r7, #8]
    403a:	683a      	ldr	r2, [r7, #0]
    403c:	f000 f94e 	bl	42dc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4044:	f1b3 3fff 	cmp.w	r3, #4294967295
    4048:	d10f      	bne.n	406a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    404a:	68fb      	ldr	r3, [r7, #12]
    404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    404e:	2b00      	cmp	r3, #0
    4050:	d010      	beq.n	4074 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4052:	68fb      	ldr	r3, [r7, #12]
    4054:	3324      	adds	r3, #36	; 0x24
    4056:	4618      	mov	r0, r3
    4058:	f001 f878 	bl	514c <xTaskRemoveFromEventList>
    405c:	4603      	mov	r3, r0
    405e:	2b00      	cmp	r3, #0
    4060:	d008      	beq.n	4074 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	2201      	movs	r2, #1
    4066:	601a      	str	r2, [r3, #0]
    4068:	e004      	b.n	4074 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    406a:	68fb      	ldr	r3, [r7, #12]
    406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    406e:	1c5a      	adds	r2, r3, #1
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4074:	2301      	movs	r3, #1
    4076:	617b      	str	r3, [r7, #20]
    4078:	e001      	b.n	407e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    407a:	2300      	movs	r3, #0
    407c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    407e:	f04f 0000 	mov.w	r0, #0
    4082:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4086:	697b      	ldr	r3, [r7, #20]
}
    4088:	4618      	mov	r0, r3
    408a:	3718      	adds	r7, #24
    408c:	46bd      	mov	sp, r7
    408e:	bd80      	pop	{r7, pc}

00004090 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4090:	b580      	push	{r7, lr}
    4092:	b088      	sub	sp, #32
    4094:	af00      	add	r7, sp, #0
    4096:	60f8      	str	r0, [r7, #12]
    4098:	60b9      	str	r1, [r7, #8]
    409a:	607a      	str	r2, [r7, #4]
    409c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    409e:	2300      	movs	r3, #0
    40a0:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    40a2:	f001 fbdd 	bl	5860 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    40a6:	68fb      	ldr	r3, [r7, #12]
    40a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40aa:	2b00      	cmp	r3, #0
    40ac:	d03b      	beq.n	4126 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    40ae:	68fb      	ldr	r3, [r7, #12]
    40b0:	68db      	ldr	r3, [r3, #12]
    40b2:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    40b4:	68f8      	ldr	r0, [r7, #12]
    40b6:	68b9      	ldr	r1, [r7, #8]
    40b8:	f000 f96c 	bl	4394 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    40bc:	683b      	ldr	r3, [r7, #0]
    40be:	2b00      	cmp	r3, #0
    40c0:	d11c      	bne.n	40fc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    40c2:	68fb      	ldr	r3, [r7, #12]
    40c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40c6:	1e5a      	subs	r2, r3, #1
    40c8:	68fb      	ldr	r3, [r7, #12]
    40ca:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    40cc:	68fb      	ldr	r3, [r7, #12]
    40ce:	681b      	ldr	r3, [r3, #0]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d104      	bne.n	40de <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    40d4:	f001 fa5c 	bl	5590 <xTaskGetCurrentTaskHandle>
    40d8:	4602      	mov	r2, r0
    40da:	68fb      	ldr	r3, [r7, #12]
    40dc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	691b      	ldr	r3, [r3, #16]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d01b      	beq.n	411e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    40e6:	68fb      	ldr	r3, [r7, #12]
    40e8:	3310      	adds	r3, #16
    40ea:	4618      	mov	r0, r3
    40ec:	f001 f82e 	bl	514c <xTaskRemoveFromEventList>
    40f0:	4603      	mov	r3, r0
    40f2:	2b01      	cmp	r3, #1
    40f4:	d113      	bne.n	411e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    40f6:	f001 fba5 	bl	5844 <vPortYieldFromISR>
    40fa:	e010      	b.n	411e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	69ba      	ldr	r2, [r7, #24]
    4100:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4102:	68fb      	ldr	r3, [r7, #12]
    4104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4106:	2b00      	cmp	r3, #0
    4108:	d009      	beq.n	411e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    410a:	68fb      	ldr	r3, [r7, #12]
    410c:	3324      	adds	r3, #36	; 0x24
    410e:	4618      	mov	r0, r3
    4110:	f001 f81c 	bl	514c <xTaskRemoveFromEventList>
    4114:	4603      	mov	r3, r0
    4116:	2b00      	cmp	r3, #0
    4118:	d001      	beq.n	411e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    411a:	f001 fb93 	bl	5844 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    411e:	f001 fbb5 	bl	588c <vPortExitCritical>
				return pdPASS;
    4122:	2301      	movs	r3, #1
    4124:	e066      	b.n	41f4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	2b00      	cmp	r3, #0
    412a:	d103      	bne.n	4134 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    412c:	f001 fbae 	bl	588c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4130:	2300      	movs	r3, #0
    4132:	e05f      	b.n	41f4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4134:	69fb      	ldr	r3, [r7, #28]
    4136:	2b00      	cmp	r3, #0
    4138:	d106      	bne.n	4148 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    413a:	f107 0310 	add.w	r3, r7, #16
    413e:	4618      	mov	r0, r3
    4140:	f001 f85c 	bl	51fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4144:	2301      	movs	r3, #1
    4146:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4148:	f001 fba0 	bl	588c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    414c:	f000 fdaa 	bl	4ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4150:	f001 fb86 	bl	5860 <vPortEnterCritical>
    4154:	68fb      	ldr	r3, [r7, #12]
    4156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4158:	f1b3 3fff 	cmp.w	r3, #4294967295
    415c:	d102      	bne.n	4164 <xQueueGenericReceive+0xd4>
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	2200      	movs	r2, #0
    4162:	645a      	str	r2, [r3, #68]	; 0x44
    4164:	68fb      	ldr	r3, [r7, #12]
    4166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4168:	f1b3 3fff 	cmp.w	r3, #4294967295
    416c:	d102      	bne.n	4174 <xQueueGenericReceive+0xe4>
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	2200      	movs	r2, #0
    4172:	649a      	str	r2, [r3, #72]	; 0x48
    4174:	f001 fb8a 	bl	588c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4178:	f107 0210 	add.w	r2, r7, #16
    417c:	1d3b      	adds	r3, r7, #4
    417e:	4610      	mov	r0, r2
    4180:	4619      	mov	r1, r3
    4182:	f001 f853 	bl	522c <xTaskCheckForTimeOut>
    4186:	4603      	mov	r3, r0
    4188:	2b00      	cmp	r3, #0
    418a:	d12b      	bne.n	41e4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    418c:	68f8      	ldr	r0, [r7, #12]
    418e:	f000 f973 	bl	4478 <prvIsQueueEmpty>
    4192:	4603      	mov	r3, r0
    4194:	2b00      	cmp	r3, #0
    4196:	d01f      	beq.n	41d8 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4198:	68fb      	ldr	r3, [r7, #12]
    419a:	681b      	ldr	r3, [r3, #0]
    419c:	2b00      	cmp	r3, #0
    419e:	d108      	bne.n	41b2 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    41a0:	f001 fb5e 	bl	5860 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	685b      	ldr	r3, [r3, #4]
    41a8:	4618      	mov	r0, r3
    41aa:	f001 fa01 	bl	55b0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    41ae:	f001 fb6d 	bl	588c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	f103 0224 	add.w	r2, r3, #36	; 0x24
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	4610      	mov	r0, r2
    41bc:	4619      	mov	r1, r3
    41be:	f000 ff8d 	bl	50dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    41c2:	68f8      	ldr	r0, [r7, #12]
    41c4:	f000 f90c 	bl	43e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    41c8:	f000 fd7e 	bl	4cc8 <xTaskResumeAll>
    41cc:	4603      	mov	r3, r0
    41ce:	2b00      	cmp	r3, #0
    41d0:	d10f      	bne.n	41f2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    41d2:	f001 fb37 	bl	5844 <vPortYieldFromISR>
    41d6:	e00c      	b.n	41f2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    41d8:	68f8      	ldr	r0, [r7, #12]
    41da:	f000 f901 	bl	43e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    41de:	f000 fd73 	bl	4cc8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    41e2:	e75e      	b.n	40a2 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    41e4:	68f8      	ldr	r0, [r7, #12]
    41e6:	f000 f8fb 	bl	43e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    41ea:	f000 fd6d 	bl	4cc8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    41ee:	2300      	movs	r3, #0
    41f0:	e000      	b.n	41f4 <xQueueGenericReceive+0x164>
		}
	}
    41f2:	e756      	b.n	40a2 <xQueueGenericReceive+0x12>
}
    41f4:	4618      	mov	r0, r3
    41f6:	3720      	adds	r7, #32
    41f8:	46bd      	mov	sp, r7
    41fa:	bd80      	pop	{r7, pc}

000041fc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b086      	sub	sp, #24
    4200:	af00      	add	r7, sp, #0
    4202:	60f8      	str	r0, [r7, #12]
    4204:	60b9      	str	r1, [r7, #8]
    4206:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4208:	2300      	movs	r3, #0
    420a:	613b      	str	r3, [r7, #16]
    420c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4210:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4218:	2b00      	cmp	r3, #0
    421a:	d025      	beq.n	4268 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    421c:	68f8      	ldr	r0, [r7, #12]
    421e:	68b9      	ldr	r1, [r7, #8]
    4220:	f000 f8b8 	bl	4394 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4228:	1e5a      	subs	r2, r3, #1
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4232:	f1b3 3fff 	cmp.w	r3, #4294967295
    4236:	d10f      	bne.n	4258 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4238:	68fb      	ldr	r3, [r7, #12]
    423a:	691b      	ldr	r3, [r3, #16]
    423c:	2b00      	cmp	r3, #0
    423e:	d010      	beq.n	4262 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	3310      	adds	r3, #16
    4244:	4618      	mov	r0, r3
    4246:	f000 ff81 	bl	514c <xTaskRemoveFromEventList>
    424a:	4603      	mov	r3, r0
    424c:	2b00      	cmp	r3, #0
    424e:	d008      	beq.n	4262 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	2201      	movs	r2, #1
    4254:	601a      	str	r2, [r3, #0]
    4256:	e004      	b.n	4262 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    425c:	1c5a      	adds	r2, r3, #1
    425e:	68fb      	ldr	r3, [r7, #12]
    4260:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4262:	2301      	movs	r3, #1
    4264:	617b      	str	r3, [r7, #20]
    4266:	e001      	b.n	426c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4268:	2300      	movs	r3, #0
    426a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    426c:	f04f 0000 	mov.w	r0, #0
    4270:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4274:	697b      	ldr	r3, [r7, #20]
}
    4276:	4618      	mov	r0, r3
    4278:	3718      	adds	r7, #24
    427a:	46bd      	mov	sp, r7
    427c:	bd80      	pop	{r7, pc}
    427e:	bf00      	nop

00004280 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4280:	b580      	push	{r7, lr}
    4282:	b084      	sub	sp, #16
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4288:	f001 faea 	bl	5860 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4290:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4292:	f001 fafb 	bl	588c <vPortExitCritical>

	return uxReturn;
    4296:	68fb      	ldr	r3, [r7, #12]
}
    4298:	4618      	mov	r0, r3
    429a:	3710      	adds	r7, #16
    429c:	46bd      	mov	sp, r7
    429e:	bd80      	pop	{r7, pc}

000042a0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    42a0:	b480      	push	{r7}
    42a2:	b085      	sub	sp, #20
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42ac:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    42ae:	68fb      	ldr	r3, [r7, #12]
}
    42b0:	4618      	mov	r0, r3
    42b2:	3714      	adds	r7, #20
    42b4:	46bd      	mov	sp, r7
    42b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ba:	4770      	bx	lr

000042bc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	4618      	mov	r0, r3
    42ca:	f001 fc07 	bl	5adc <vPortFree>
	vPortFree( pxQueue );
    42ce:	6878      	ldr	r0, [r7, #4]
    42d0:	f001 fc04 	bl	5adc <vPortFree>
}
    42d4:	3708      	adds	r7, #8
    42d6:	46bd      	mov	sp, r7
    42d8:	bd80      	pop	{r7, pc}
    42da:	bf00      	nop

000042dc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    42dc:	b580      	push	{r7, lr}
    42de:	b084      	sub	sp, #16
    42e0:	af00      	add	r7, sp, #0
    42e2:	60f8      	str	r0, [r7, #12]
    42e4:	60b9      	str	r1, [r7, #8]
    42e6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42ec:	2b00      	cmp	r3, #0
    42ee:	d10c      	bne.n	430a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	681b      	ldr	r3, [r3, #0]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d145      	bne.n	4384 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    42f8:	68fb      	ldr	r3, [r7, #12]
    42fa:	685b      	ldr	r3, [r3, #4]
    42fc:	4618      	mov	r0, r3
    42fe:	f001 f9bb 	bl	5678 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	2200      	movs	r2, #0
    4306:	605a      	str	r2, [r3, #4]
    4308:	e03c      	b.n	4384 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	2b00      	cmp	r3, #0
    430e:	d11a      	bne.n	4346 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4310:	68fb      	ldr	r3, [r7, #12]
    4312:	689a      	ldr	r2, [r3, #8]
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4318:	4610      	mov	r0, r2
    431a:	68b9      	ldr	r1, [r7, #8]
    431c:	461a      	mov	r2, r3
    431e:	f014 f9cf 	bl	186c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	689a      	ldr	r2, [r3, #8]
    4326:	68fb      	ldr	r3, [r7, #12]
    4328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    432a:	441a      	add	r2, r3
    432c:	68fb      	ldr	r3, [r7, #12]
    432e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4330:	68fb      	ldr	r3, [r7, #12]
    4332:	689a      	ldr	r2, [r3, #8]
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	685b      	ldr	r3, [r3, #4]
    4338:	429a      	cmp	r2, r3
    433a:	d323      	bcc.n	4384 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	681a      	ldr	r2, [r3, #0]
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	609a      	str	r2, [r3, #8]
    4344:	e01e      	b.n	4384 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	68da      	ldr	r2, [r3, #12]
    434a:	68fb      	ldr	r3, [r7, #12]
    434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    434e:	4610      	mov	r0, r2
    4350:	68b9      	ldr	r1, [r7, #8]
    4352:	461a      	mov	r2, r3
    4354:	f014 f9b4 	bl	186c0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	68da      	ldr	r2, [r3, #12]
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4360:	425b      	negs	r3, r3
    4362:	441a      	add	r2, r3
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	68da      	ldr	r2, [r3, #12]
    436c:	68fb      	ldr	r3, [r7, #12]
    436e:	681b      	ldr	r3, [r3, #0]
    4370:	429a      	cmp	r2, r3
    4372:	d207      	bcs.n	4384 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	685a      	ldr	r2, [r3, #4]
    4378:	68fb      	ldr	r3, [r7, #12]
    437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    437c:	425b      	negs	r3, r3
    437e:	441a      	add	r2, r3
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4388:	1c5a      	adds	r2, r3, #1
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	639a      	str	r2, [r3, #56]	; 0x38
}
    438e:	3710      	adds	r7, #16
    4390:	46bd      	mov	sp, r7
    4392:	bd80      	pop	{r7, pc}

00004394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4394:	b580      	push	{r7, lr}
    4396:	b082      	sub	sp, #8
    4398:	af00      	add	r7, sp, #0
    439a:	6078      	str	r0, [r7, #4]
    439c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d019      	beq.n	43da <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	68da      	ldr	r2, [r3, #12]
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43ae:	441a      	add	r2, r3
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	68da      	ldr	r2, [r3, #12]
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	685b      	ldr	r3, [r3, #4]
    43bc:	429a      	cmp	r2, r3
    43be:	d303      	bcc.n	43c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	681a      	ldr	r2, [r3, #0]
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	68da      	ldr	r2, [r3, #12]
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    43d0:	6838      	ldr	r0, [r7, #0]
    43d2:	4611      	mov	r1, r2
    43d4:	461a      	mov	r2, r3
    43d6:	f014 f973 	bl	186c0 <memcpy>
	}
}
    43da:	3708      	adds	r7, #8
    43dc:	46bd      	mov	sp, r7
    43de:	bd80      	pop	{r7, pc}

000043e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b082      	sub	sp, #8
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    43e8:	f001 fa3a 	bl	5860 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    43ec:	e014      	b.n	4418 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43f2:	2b00      	cmp	r3, #0
    43f4:	d00f      	beq.n	4416 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	3324      	adds	r3, #36	; 0x24
    43fa:	4618      	mov	r0, r3
    43fc:	f000 fea6 	bl	514c <xTaskRemoveFromEventList>
    4400:	4603      	mov	r3, r0
    4402:	2b00      	cmp	r3, #0
    4404:	d001      	beq.n	440a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4406:	f000 ff5d 	bl	52c4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    440e:	1e5a      	subs	r2, r3, #1
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	649a      	str	r2, [r3, #72]	; 0x48
    4414:	e000      	b.n	4418 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4416:	e003      	b.n	4420 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    441c:	2b00      	cmp	r3, #0
    441e:	dce6      	bgt.n	43ee <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	f04f 32ff 	mov.w	r2, #4294967295
    4426:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4428:	f001 fa30 	bl	588c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    442c:	f001 fa18 	bl	5860 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4430:	e014      	b.n	445c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	691b      	ldr	r3, [r3, #16]
    4436:	2b00      	cmp	r3, #0
    4438:	d00f      	beq.n	445a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	3310      	adds	r3, #16
    443e:	4618      	mov	r0, r3
    4440:	f000 fe84 	bl	514c <xTaskRemoveFromEventList>
    4444:	4603      	mov	r3, r0
    4446:	2b00      	cmp	r3, #0
    4448:	d001      	beq.n	444e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    444a:	f000 ff3b 	bl	52c4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4452:	1e5a      	subs	r2, r3, #1
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	645a      	str	r2, [r3, #68]	; 0x44
    4458:	e000      	b.n	445c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    445a:	e003      	b.n	4464 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    445c:	687b      	ldr	r3, [r7, #4]
    445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4460:	2b00      	cmp	r3, #0
    4462:	dce6      	bgt.n	4432 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	f04f 32ff 	mov.w	r2, #4294967295
    446a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    446c:	f001 fa0e 	bl	588c <vPortExitCritical>
}
    4470:	3708      	adds	r7, #8
    4472:	46bd      	mov	sp, r7
    4474:	bd80      	pop	{r7, pc}
    4476:	bf00      	nop

00004478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4478:	b580      	push	{r7, lr}
    447a:	b084      	sub	sp, #16
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4480:	f001 f9ee 	bl	5860 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4488:	2b00      	cmp	r3, #0
    448a:	bf14      	ite	ne
    448c:	2300      	movne	r3, #0
    448e:	2301      	moveq	r3, #1
    4490:	b2db      	uxtb	r3, r3
    4492:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4494:	f001 f9fa 	bl	588c <vPortExitCritical>

	return xReturn;
    4498:	68fb      	ldr	r3, [r7, #12]
}
    449a:	4618      	mov	r0, r3
    449c:	3710      	adds	r7, #16
    449e:	46bd      	mov	sp, r7
    44a0:	bd80      	pop	{r7, pc}
    44a2:	bf00      	nop

000044a4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    44a4:	b480      	push	{r7}
    44a6:	b085      	sub	sp, #20
    44a8:	af00      	add	r7, sp, #0
    44aa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44b0:	2b00      	cmp	r3, #0
    44b2:	bf14      	ite	ne
    44b4:	2300      	movne	r3, #0
    44b6:	2301      	moveq	r3, #1
    44b8:	b2db      	uxtb	r3, r3
    44ba:	60fb      	str	r3, [r7, #12]

	return xReturn;
    44bc:	68fb      	ldr	r3, [r7, #12]
}
    44be:	4618      	mov	r0, r3
    44c0:	3714      	adds	r7, #20
    44c2:	46bd      	mov	sp, r7
    44c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c8:	4770      	bx	lr
    44ca:	bf00      	nop

000044cc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b084      	sub	sp, #16
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    44d4:	f001 f9c4 	bl	5860 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44e0:	429a      	cmp	r2, r3
    44e2:	bf14      	ite	ne
    44e4:	2300      	movne	r3, #0
    44e6:	2301      	moveq	r3, #1
    44e8:	b2db      	uxtb	r3, r3
    44ea:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    44ec:	f001 f9ce 	bl	588c <vPortExitCritical>

	return xReturn;
    44f0:	68fb      	ldr	r3, [r7, #12]
}
    44f2:	4618      	mov	r0, r3
    44f4:	3710      	adds	r7, #16
    44f6:	46bd      	mov	sp, r7
    44f8:	bd80      	pop	{r7, pc}
    44fa:	bf00      	nop

000044fc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    44fc:	b480      	push	{r7}
    44fe:	b085      	sub	sp, #20
    4500:	af00      	add	r7, sp, #0
    4502:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4504:	687b      	ldr	r3, [r7, #4]
    4506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    450c:	429a      	cmp	r2, r3
    450e:	bf14      	ite	ne
    4510:	2300      	movne	r3, #0
    4512:	2301      	moveq	r3, #1
    4514:	b2db      	uxtb	r3, r3
    4516:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4518:	68fb      	ldr	r3, [r7, #12]
}
    451a:	4618      	mov	r0, r3
    451c:	3714      	adds	r7, #20
    451e:	46bd      	mov	sp, r7
    4520:	f85d 7b04 	ldr.w	r7, [sp], #4
    4524:	4770      	bx	lr
    4526:	bf00      	nop

00004528 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4528:	b580      	push	{r7, lr}
    452a:	b08a      	sub	sp, #40	; 0x28
    452c:	af02      	add	r7, sp, #8
    452e:	60f8      	str	r0, [r7, #12]
    4530:	60b9      	str	r1, [r7, #8]
    4532:	603b      	str	r3, [r7, #0]
    4534:	4613      	mov	r3, r2
    4536:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4538:	88fb      	ldrh	r3, [r7, #6]
    453a:	4618      	mov	r0, r3
    453c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    453e:	f000 ffe5 	bl	550c <prvAllocateTCBAndStack>
    4542:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4544:	69bb      	ldr	r3, [r7, #24]
    4546:	2b00      	cmp	r3, #0
    4548:	f000 80a1 	beq.w	468e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    454c:	69bb      	ldr	r3, [r7, #24]
    454e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4550:	88fb      	ldrh	r3, [r7, #6]
    4552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4556:	3b01      	subs	r3, #1
    4558:	009b      	lsls	r3, r3, #2
    455a:	4413      	add	r3, r2
    455c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    455e:	697b      	ldr	r3, [r7, #20]
    4560:	f023 0307 	bic.w	r3, r3, #7
    4564:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4566:	88fb      	ldrh	r3, [r7, #6]
    4568:	9300      	str	r3, [sp, #0]
    456a:	69b8      	ldr	r0, [r7, #24]
    456c:	68b9      	ldr	r1, [r7, #8]
    456e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4572:	f000 febd 	bl	52f0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4576:	6978      	ldr	r0, [r7, #20]
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	683a      	ldr	r2, [r7, #0]
    457c:	f001 f8f2 	bl	5764 <pxPortInitialiseStack>
    4580:	4602      	mov	r2, r0
    4582:	69bb      	ldr	r3, [r7, #24]
    4584:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4588:	2b00      	cmp	r3, #0
    458a:	d002      	beq.n	4592 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    458e:	69ba      	ldr	r2, [r7, #24]
    4590:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4592:	f001 f965 	bl	5860 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4596:	f640 234c 	movw	r3, #2636	; 0xa4c
    459a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	1c5a      	adds	r2, r3, #1
    45a2:	f640 234c 	movw	r3, #2636	; 0xa4c
    45a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45aa:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    45ac:	f640 0348 	movw	r3, #2120	; 0x848
    45b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45b4:	681b      	ldr	r3, [r3, #0]
    45b6:	2b00      	cmp	r3, #0
    45b8:	d10f      	bne.n	45da <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    45ba:	f640 0348 	movw	r3, #2120	; 0x848
    45be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45c2:	69ba      	ldr	r2, [r7, #24]
    45c4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    45c6:	f640 234c 	movw	r3, #2636	; 0xa4c
    45ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	2b01      	cmp	r3, #1
    45d2:	d118      	bne.n	4606 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    45d4:	f000 fec2 	bl	535c <prvInitialiseTaskLists>
    45d8:	e015      	b.n	4606 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    45da:	f640 235c 	movw	r3, #2652	; 0xa5c
    45de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d10e      	bne.n	4606 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    45e8:	f640 0348 	movw	r3, #2120	; 0x848
    45ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    45f6:	429a      	cmp	r2, r3
    45f8:	d805      	bhi.n	4606 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    45fa:	f640 0348 	movw	r3, #2120	; 0x848
    45fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4602:	69ba      	ldr	r2, [r7, #24]
    4604:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4606:	69bb      	ldr	r3, [r7, #24]
    4608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    460a:	f640 2354 	movw	r3, #2644	; 0xa54
    460e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	429a      	cmp	r2, r3
    4616:	d906      	bls.n	4626 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4618:	69bb      	ldr	r3, [r7, #24]
    461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    461c:	f640 2354 	movw	r3, #2644	; 0xa54
    4620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4624:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4626:	f640 2370 	movw	r3, #2672	; 0xa70
    462a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	1c5a      	adds	r2, r3, #1
    4632:	f640 2370 	movw	r3, #2672	; 0xa70
    4636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    463a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    463c:	69bb      	ldr	r3, [r7, #24]
    463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4640:	f640 2358 	movw	r3, #2648	; 0xa58
    4644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	429a      	cmp	r2, r3
    464c:	d906      	bls.n	465c <xTaskGenericCreate+0x134>
    464e:	69bb      	ldr	r3, [r7, #24]
    4650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4652:	f640 2358 	movw	r3, #2648	; 0xa58
    4656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    465a:	601a      	str	r2, [r3, #0]
    465c:	69bb      	ldr	r3, [r7, #24]
    465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4660:	4613      	mov	r3, r2
    4662:	009b      	lsls	r3, r3, #2
    4664:	4413      	add	r3, r2
    4666:	009b      	lsls	r3, r3, #2
    4668:	f640 024c 	movw	r2, #2124	; 0x84c
    466c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4670:	441a      	add	r2, r3
    4672:	69bb      	ldr	r3, [r7, #24]
    4674:	3304      	adds	r3, #4
    4676:	4610      	mov	r0, r2
    4678:	4619      	mov	r1, r3
    467a:	f7ff fadf 	bl	3c3c <vListInsertEnd>

			xReturn = pdPASS;
    467e:	2301      	movs	r3, #1
    4680:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4682:	69b8      	ldr	r0, [r7, #24]
    4684:	f012 ff34 	bl	174f0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4688:	f001 f900 	bl	588c <vPortExitCritical>
    468c:	e002      	b.n	4694 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    468e:	f04f 33ff 	mov.w	r3, #4294967295
    4692:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4694:	69fb      	ldr	r3, [r7, #28]
    4696:	2b01      	cmp	r3, #1
    4698:	d111      	bne.n	46be <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    469a:	f640 235c 	movw	r3, #2652	; 0xa5c
    469e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d00a      	beq.n	46be <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    46a8:	f640 0348 	movw	r3, #2120	; 0x848
    46ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    46b6:	429a      	cmp	r2, r3
    46b8:	d201      	bcs.n	46be <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    46ba:	f001 f8c3 	bl	5844 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    46be:	69fb      	ldr	r3, [r7, #28]
}
    46c0:	4618      	mov	r0, r3
    46c2:	3720      	adds	r7, #32
    46c4:	46bd      	mov	sp, r7
    46c6:	bd80      	pop	{r7, pc}

000046c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    46c8:	b580      	push	{r7, lr}
    46ca:	b084      	sub	sp, #16
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    46d0:	f001 f8c6 	bl	5860 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    46d4:	f640 0348 	movw	r3, #2120	; 0x848
    46d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	687a      	ldr	r2, [r7, #4]
    46e0:	429a      	cmp	r2, r3
    46e2:	d101      	bne.n	46e8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    46e4:	2300      	movs	r3, #0
    46e6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d105      	bne.n	46fa <vTaskDelete+0x32>
    46ee:	f640 0348 	movw	r3, #2120	; 0x848
    46f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46f6:	681b      	ldr	r3, [r3, #0]
    46f8:	e000      	b.n	46fc <vTaskDelete+0x34>
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	3304      	adds	r3, #4
    4702:	4618      	mov	r0, r3
    4704:	f7ff fafa 	bl	3cfc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4708:	68fb      	ldr	r3, [r7, #12]
    470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    470c:	2b00      	cmp	r3, #0
    470e:	d004      	beq.n	471a <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	3318      	adds	r3, #24
    4714:	4618      	mov	r0, r3
    4716:	f7ff faf1 	bl	3cfc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    471a:	68fb      	ldr	r3, [r7, #12]
    471c:	3304      	adds	r3, #4
    471e:	f640 2020 	movw	r0, #2592	; 0xa20
    4722:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4726:	4619      	mov	r1, r3
    4728:	f7ff fa88 	bl	3c3c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    472c:	f640 2334 	movw	r3, #2612	; 0xa34
    4730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4734:	681b      	ldr	r3, [r3, #0]
    4736:	1c5a      	adds	r2, r3, #1
    4738:	f640 2334 	movw	r3, #2612	; 0xa34
    473c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4740:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4742:	f640 2370 	movw	r3, #2672	; 0xa70
    4746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    474a:	681b      	ldr	r3, [r3, #0]
    474c:	1c5a      	adds	r2, r3, #1
    474e:	f640 2370 	movw	r3, #2672	; 0xa70
    4752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4756:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4758:	f001 f898 	bl	588c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    475c:	f640 235c 	movw	r3, #2652	; 0xa5c
    4760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	2b00      	cmp	r3, #0
    4768:	d004      	beq.n	4774 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	2b00      	cmp	r3, #0
    476e:	d101      	bne.n	4774 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4770:	f001 f868 	bl	5844 <vPortYieldFromISR>
			}
		}
	}
    4774:	3710      	adds	r7, #16
    4776:	46bd      	mov	sp, r7
    4778:	bd80      	pop	{r7, pc}
    477a:	bf00      	nop

0000477c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    477c:	b580      	push	{r7, lr}
    477e:	b086      	sub	sp, #24
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4786:	2300      	movs	r3, #0
    4788:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    478a:	f000 fa8b 	bl	4ca4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	681a      	ldr	r2, [r3, #0]
    4792:	683b      	ldr	r3, [r7, #0]
    4794:	4413      	add	r3, r2
    4796:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	f640 2350 	movw	r3, #2640	; 0xa50
    47a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a4:	681b      	ldr	r3, [r3, #0]
    47a6:	429a      	cmp	r2, r3
    47a8:	d90f      	bls.n	47ca <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	681a      	ldr	r2, [r3, #0]
    47ae:	693b      	ldr	r3, [r7, #16]
    47b0:	429a      	cmp	r2, r3
    47b2:	d919      	bls.n	47e8 <vTaskDelayUntil+0x6c>
    47b4:	f640 2350 	movw	r3, #2640	; 0xa50
    47b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47bc:	681b      	ldr	r3, [r3, #0]
    47be:	693a      	ldr	r2, [r7, #16]
    47c0:	429a      	cmp	r2, r3
    47c2:	d911      	bls.n	47e8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    47c4:	2301      	movs	r3, #1
    47c6:	617b      	str	r3, [r7, #20]
    47c8:	e00e      	b.n	47e8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	681a      	ldr	r2, [r3, #0]
    47ce:	693b      	ldr	r3, [r7, #16]
    47d0:	429a      	cmp	r2, r3
    47d2:	d807      	bhi.n	47e4 <vTaskDelayUntil+0x68>
    47d4:	f640 2350 	movw	r3, #2640	; 0xa50
    47d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	693a      	ldr	r2, [r7, #16]
    47e0:	429a      	cmp	r2, r3
    47e2:	d901      	bls.n	47e8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    47e4:	2301      	movs	r3, #1
    47e6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	693a      	ldr	r2, [r7, #16]
    47ec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    47ee:	697b      	ldr	r3, [r7, #20]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d00b      	beq.n	480c <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    47f4:	f640 0348 	movw	r3, #2120	; 0x848
    47f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	3304      	adds	r3, #4
    4800:	4618      	mov	r0, r3
    4802:	f7ff fa7b 	bl	3cfc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4806:	6938      	ldr	r0, [r7, #16]
    4808:	f000 fe3c 	bl	5484 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    480c:	f000 fa5c 	bl	4cc8 <xTaskResumeAll>
    4810:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4812:	68fb      	ldr	r3, [r7, #12]
    4814:	2b00      	cmp	r3, #0
    4816:	d101      	bne.n	481c <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4818:	f001 f814 	bl	5844 <vPortYieldFromISR>
		}
	}
    481c:	3718      	adds	r7, #24
    481e:	46bd      	mov	sp, r7
    4820:	bd80      	pop	{r7, pc}
    4822:	bf00      	nop

00004824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4824:	b580      	push	{r7, lr}
    4826:	b084      	sub	sp, #16
    4828:	af00      	add	r7, sp, #0
    482a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    482c:	2300      	movs	r3, #0
    482e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	2b00      	cmp	r3, #0
    4834:	d018      	beq.n	4868 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4836:	f000 fa35 	bl	4ca4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    483a:	f640 2350 	movw	r3, #2640	; 0xa50
    483e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4842:	681a      	ldr	r2, [r3, #0]
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	4413      	add	r3, r2
    4848:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    484a:	f640 0348 	movw	r3, #2120	; 0x848
    484e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	3304      	adds	r3, #4
    4856:	4618      	mov	r0, r3
    4858:	f7ff fa50 	bl	3cfc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    485c:	68b8      	ldr	r0, [r7, #8]
    485e:	f000 fe11 	bl	5484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4862:	f000 fa31 	bl	4cc8 <xTaskResumeAll>
    4866:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	2b00      	cmp	r3, #0
    486c:	d101      	bne.n	4872 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    486e:	f000 ffe9 	bl	5844 <vPortYieldFromISR>
		}
	}
    4872:	3710      	adds	r7, #16
    4874:	46bd      	mov	sp, r7
    4876:	bd80      	pop	{r7, pc}

00004878 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4878:	b580      	push	{r7, lr}
    487a:	b084      	sub	sp, #16
    487c:	af00      	add	r7, sp, #0
    487e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4880:	f000 ffee 	bl	5860 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	2b00      	cmp	r3, #0
    4888:	d105      	bne.n	4896 <uxTaskPriorityGet+0x1e>
    488a:	f640 0348 	movw	r3, #2120	; 0x848
    488e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	e000      	b.n	4898 <uxTaskPriorityGet+0x20>
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    489e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    48a0:	f000 fff4 	bl	588c <vPortExitCritical>

		return uxReturn;
    48a4:	68bb      	ldr	r3, [r7, #8]
	}
    48a6:	4618      	mov	r0, r3
    48a8:	3710      	adds	r7, #16
    48aa:	46bd      	mov	sp, r7
    48ac:	bd80      	pop	{r7, pc}
    48ae:	bf00      	nop

000048b0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    48b0:	b580      	push	{r7, lr}
    48b2:	b086      	sub	sp, #24
    48b4:	af00      	add	r7, sp, #0
    48b6:	6078      	str	r0, [r7, #4]
    48b8:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    48ba:	2300      	movs	r3, #0
    48bc:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    48be:	683b      	ldr	r3, [r7, #0]
    48c0:	2b13      	cmp	r3, #19
    48c2:	d901      	bls.n	48c8 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    48c4:	2313      	movs	r3, #19
    48c6:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    48c8:	f000 ffca 	bl	5860 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    48cc:	f640 0348 	movw	r3, #2120	; 0x848
    48d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d4:	681b      	ldr	r3, [r3, #0]
    48d6:	687a      	ldr	r2, [r7, #4]
    48d8:	429a      	cmp	r2, r3
    48da:	d101      	bne.n	48e0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    48dc:	2300      	movs	r3, #0
    48de:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	2b00      	cmp	r3, #0
    48e4:	d105      	bne.n	48f2 <vTaskPrioritySet+0x42>
    48e6:	f640 0348 	movw	r3, #2120	; 0x848
    48ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ee:	681b      	ldr	r3, [r3, #0]
    48f0:	e000      	b.n	48f4 <vTaskPrioritySet+0x44>
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    48f6:	693b      	ldr	r3, [r7, #16]
    48f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    48fa:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    48fc:	68fa      	ldr	r2, [r7, #12]
    48fe:	683b      	ldr	r3, [r7, #0]
    4900:	429a      	cmp	r2, r3
    4902:	d058      	beq.n	49b6 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4904:	683a      	ldr	r2, [r7, #0]
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	429a      	cmp	r2, r3
    490a:	d905      	bls.n	4918 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	2b00      	cmp	r3, #0
    4910:	d007      	beq.n	4922 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4912:	2301      	movs	r3, #1
    4914:	617b      	str	r3, [r7, #20]
    4916:	e004      	b.n	4922 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	2b00      	cmp	r3, #0
    491c:	d101      	bne.n	4922 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    491e:	2301      	movs	r3, #1
    4920:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4922:	693b      	ldr	r3, [r7, #16]
    4924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4926:	693b      	ldr	r3, [r7, #16]
    4928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    492a:	429a      	cmp	r2, r3
    492c:	d102      	bne.n	4934 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    492e:	693b      	ldr	r3, [r7, #16]
    4930:	683a      	ldr	r2, [r7, #0]
    4932:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4934:	693b      	ldr	r3, [r7, #16]
    4936:	683a      	ldr	r2, [r7, #0]
    4938:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    493a:	683b      	ldr	r3, [r7, #0]
    493c:	f1c3 0214 	rsb	r2, r3, #20
    4940:	693b      	ldr	r3, [r7, #16]
    4942:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4944:	693b      	ldr	r3, [r7, #16]
    4946:	6959      	ldr	r1, [r3, #20]
    4948:	68fa      	ldr	r2, [r7, #12]
    494a:	4613      	mov	r3, r2
    494c:	009b      	lsls	r3, r3, #2
    494e:	4413      	add	r3, r2
    4950:	009b      	lsls	r3, r3, #2
    4952:	f640 024c 	movw	r2, #2124	; 0x84c
    4956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    495a:	4413      	add	r3, r2
    495c:	4299      	cmp	r1, r3
    495e:	d125      	bne.n	49ac <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4960:	693b      	ldr	r3, [r7, #16]
    4962:	3304      	adds	r3, #4
    4964:	4618      	mov	r0, r3
    4966:	f7ff f9c9 	bl	3cfc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    496a:	693b      	ldr	r3, [r7, #16]
    496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    496e:	f640 2358 	movw	r3, #2648	; 0xa58
    4972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	429a      	cmp	r2, r3
    497a:	d906      	bls.n	498a <vTaskPrioritySet+0xda>
    497c:	693b      	ldr	r3, [r7, #16]
    497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4980:	f640 2358 	movw	r3, #2648	; 0xa58
    4984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4988:	601a      	str	r2, [r3, #0]
    498a:	693b      	ldr	r3, [r7, #16]
    498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    498e:	4613      	mov	r3, r2
    4990:	009b      	lsls	r3, r3, #2
    4992:	4413      	add	r3, r2
    4994:	009b      	lsls	r3, r3, #2
    4996:	f640 024c 	movw	r2, #2124	; 0x84c
    499a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    499e:	441a      	add	r2, r3
    49a0:	693b      	ldr	r3, [r7, #16]
    49a2:	3304      	adds	r3, #4
    49a4:	4610      	mov	r0, r2
    49a6:	4619      	mov	r1, r3
    49a8:	f7ff f948 	bl	3c3c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    49ac:	697b      	ldr	r3, [r7, #20]
    49ae:	2b01      	cmp	r3, #1
    49b0:	d101      	bne.n	49b6 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    49b2:	f000 ff47 	bl	5844 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    49b6:	f000 ff69 	bl	588c <vPortExitCritical>
	}
    49ba:	3718      	adds	r7, #24
    49bc:	46bd      	mov	sp, r7
    49be:	bd80      	pop	{r7, pc}

000049c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    49c0:	b580      	push	{r7, lr}
    49c2:	b084      	sub	sp, #16
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    49c8:	f000 ff4a 	bl	5860 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    49cc:	f640 0348 	movw	r3, #2120	; 0x848
    49d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	687a      	ldr	r2, [r7, #4]
    49d8:	429a      	cmp	r2, r3
    49da:	d101      	bne.n	49e0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    49dc:	2300      	movs	r3, #0
    49de:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	2b00      	cmp	r3, #0
    49e4:	d105      	bne.n	49f2 <vTaskSuspend+0x32>
    49e6:	f640 0348 	movw	r3, #2120	; 0x848
    49ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	e000      	b.n	49f4 <vTaskSuspend+0x34>
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    49f6:	68fb      	ldr	r3, [r7, #12]
    49f8:	3304      	adds	r3, #4
    49fa:	4618      	mov	r0, r3
    49fc:	f7ff f97e 	bl	3cfc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4a00:	68fb      	ldr	r3, [r7, #12]
    4a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a04:	2b00      	cmp	r3, #0
    4a06:	d004      	beq.n	4a12 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4a08:	68fb      	ldr	r3, [r7, #12]
    4a0a:	3318      	adds	r3, #24
    4a0c:	4618      	mov	r0, r3
    4a0e:	f7ff f975 	bl	3cfc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4a12:	68fb      	ldr	r3, [r7, #12]
    4a14:	3304      	adds	r3, #4
    4a16:	f640 2038 	movw	r0, #2616	; 0xa38
    4a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4a1e:	4619      	mov	r1, r3
    4a20:	f7ff f90c 	bl	3c3c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4a24:	f000 ff32 	bl	588c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d11e      	bne.n	4a6c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4a2e:	f640 235c 	movw	r3, #2652	; 0xa5c
    4a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d002      	beq.n	4a42 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4a3c:	f000 ff02 	bl	5844 <vPortYieldFromISR>
    4a40:	e014      	b.n	4a6c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4a42:	f640 2338 	movw	r3, #2616	; 0xa38
    4a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4a:	681a      	ldr	r2, [r3, #0]
    4a4c:	f640 234c 	movw	r3, #2636	; 0xa4c
    4a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	429a      	cmp	r2, r3
    4a58:	d106      	bne.n	4a68 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4a5a:	f640 0348 	movw	r3, #2120	; 0x848
    4a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a62:	2200      	movs	r2, #0
    4a64:	601a      	str	r2, [r3, #0]
    4a66:	e001      	b.n	4a6c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4a68:	f000 fadc 	bl	5024 <vTaskSwitchContext>
				}
			}
		}
	}
    4a6c:	3710      	adds	r7, #16
    4a6e:	46bd      	mov	sp, r7
    4a70:	bd80      	pop	{r7, pc}
    4a72:	bf00      	nop

00004a74 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4a7c:	2300      	movs	r3, #0
    4a7e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4a84:	68bb      	ldr	r3, [r7, #8]
    4a86:	695a      	ldr	r2, [r3, #20]
    4a88:	f640 2338 	movw	r3, #2616	; 0xa38
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	429a      	cmp	r2, r3
    4a92:	d10d      	bne.n	4ab0 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4a94:	68bb      	ldr	r3, [r7, #8]
    4a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a98:	f640 230c 	movw	r3, #2572	; 0xa0c
    4a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa0:	429a      	cmp	r2, r3
    4aa2:	d005      	beq.n	4ab0 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4aa4:	68bb      	ldr	r3, [r7, #8]
    4aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d101      	bne.n	4ab0 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4aac:	2301      	movs	r3, #1
    4aae:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4ab0:	68fb      	ldr	r3, [r7, #12]
	}
    4ab2:	4618      	mov	r0, r3
    4ab4:	3714      	adds	r7, #20
    4ab6:	46bd      	mov	sp, r7
    4ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4abc:	4770      	bx	lr
    4abe:	bf00      	nop

00004ac0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b084      	sub	sp, #16
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4acc:	68fb      	ldr	r3, [r7, #12]
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d043      	beq.n	4b5a <vTaskResume+0x9a>
    4ad2:	f640 0348 	movw	r3, #2120	; 0x848
    4ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	68fa      	ldr	r2, [r7, #12]
    4ade:	429a      	cmp	r2, r3
    4ae0:	d03b      	beq.n	4b5a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4ae2:	f000 febd 	bl	5860 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ae6:	68f8      	ldr	r0, [r7, #12]
    4ae8:	f7ff ffc4 	bl	4a74 <xTaskIsTaskSuspended>
    4aec:	4603      	mov	r3, r0
    4aee:	2b01      	cmp	r3, #1
    4af0:	d131      	bne.n	4b56 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4af2:	68fb      	ldr	r3, [r7, #12]
    4af4:	3304      	adds	r3, #4
    4af6:	4618      	mov	r0, r3
    4af8:	f7ff f900 	bl	3cfc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b00:	f640 2358 	movw	r3, #2648	; 0xa58
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	429a      	cmp	r2, r3
    4b0c:	d906      	bls.n	4b1c <vTaskResume+0x5c>
    4b0e:	68fb      	ldr	r3, [r7, #12]
    4b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b12:	f640 2358 	movw	r3, #2648	; 0xa58
    4b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b1a:	601a      	str	r2, [r3, #0]
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b20:	4613      	mov	r3, r2
    4b22:	009b      	lsls	r3, r3, #2
    4b24:	4413      	add	r3, r2
    4b26:	009b      	lsls	r3, r3, #2
    4b28:	f640 024c 	movw	r2, #2124	; 0x84c
    4b2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b30:	441a      	add	r2, r3
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	3304      	adds	r3, #4
    4b36:	4610      	mov	r0, r2
    4b38:	4619      	mov	r1, r3
    4b3a:	f7ff f87f 	bl	3c3c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4b3e:	68fb      	ldr	r3, [r7, #12]
    4b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b42:	f640 0348 	movw	r3, #2120	; 0x848
    4b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b4e:	429a      	cmp	r2, r3
    4b50:	d301      	bcc.n	4b56 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4b52:	f000 fe77 	bl	5844 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4b56:	f000 fe99 	bl	588c <vPortExitCritical>
		}
	}
    4b5a:	3710      	adds	r7, #16
    4b5c:	46bd      	mov	sp, r7
    4b5e:	bd80      	pop	{r7, pc}

00004b60 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4b60:	b580      	push	{r7, lr}
    4b62:	b086      	sub	sp, #24
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4b68:	2300      	movs	r3, #0
    4b6a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b70:	2300      	movs	r3, #0
    4b72:	60fb      	str	r3, [r7, #12]
    4b74:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b78:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4b7c:	6938      	ldr	r0, [r7, #16]
    4b7e:	f7ff ff79 	bl	4a74 <xTaskIsTaskSuspended>
    4b82:	4603      	mov	r3, r0
    4b84:	2b01      	cmp	r3, #1
    4b86:	d144      	bne.n	4c12 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4b88:	f640 2360 	movw	r3, #2656	; 0xa60
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d134      	bne.n	4c00 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4b96:	693b      	ldr	r3, [r7, #16]
    4b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b9a:	f640 0348 	movw	r3, #2120	; 0x848
    4b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ba6:	429a      	cmp	r2, r3
    4ba8:	bf34      	ite	cc
    4baa:	2300      	movcc	r3, #0
    4bac:	2301      	movcs	r3, #1
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4bb2:	693b      	ldr	r3, [r7, #16]
    4bb4:	3304      	adds	r3, #4
    4bb6:	4618      	mov	r0, r3
    4bb8:	f7ff f8a0 	bl	3cfc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4bbc:	693b      	ldr	r3, [r7, #16]
    4bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bc0:	f640 2358 	movw	r3, #2648	; 0xa58
    4bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	429a      	cmp	r2, r3
    4bcc:	d906      	bls.n	4bdc <xTaskResumeFromISR+0x7c>
    4bce:	693b      	ldr	r3, [r7, #16]
    4bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bd2:	f640 2358 	movw	r3, #2648	; 0xa58
    4bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bda:	601a      	str	r2, [r3, #0]
    4bdc:	693b      	ldr	r3, [r7, #16]
    4bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4be0:	4613      	mov	r3, r2
    4be2:	009b      	lsls	r3, r3, #2
    4be4:	4413      	add	r3, r2
    4be6:	009b      	lsls	r3, r3, #2
    4be8:	f640 024c 	movw	r2, #2124	; 0x84c
    4bec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bf0:	441a      	add	r2, r3
    4bf2:	693b      	ldr	r3, [r7, #16]
    4bf4:	3304      	adds	r3, #4
    4bf6:	4610      	mov	r0, r2
    4bf8:	4619      	mov	r1, r3
    4bfa:	f7ff f81f 	bl	3c3c <vListInsertEnd>
    4bfe:	e008      	b.n	4c12 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4c00:	693b      	ldr	r3, [r7, #16]
    4c02:	3318      	adds	r3, #24
    4c04:	f640 200c 	movw	r0, #2572	; 0xa0c
    4c08:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c0c:	4619      	mov	r1, r3
    4c0e:	f7ff f815 	bl	3c3c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4c12:	f04f 0000 	mov.w	r0, #0
    4c16:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4c1a:	697b      	ldr	r3, [r7, #20]
	}
    4c1c:	4618      	mov	r0, r3
    4c1e:	3718      	adds	r7, #24
    4c20:	46bd      	mov	sp, r7
    4c22:	bd80      	pop	{r7, pc}

00004c24 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4c24:	b580      	push	{r7, lr}
    4c26:	b086      	sub	sp, #24
    4c28:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4c2a:	2300      	movs	r3, #0
    4c2c:	9300      	str	r3, [sp, #0]
    4c2e:	2300      	movs	r3, #0
    4c30:	9301      	str	r3, [sp, #4]
    4c32:	2300      	movs	r3, #0
    4c34:	9302      	str	r3, [sp, #8]
    4c36:	2300      	movs	r3, #0
    4c38:	9303      	str	r3, [sp, #12]
    4c3a:	f245 20dd 	movw	r0, #21213	; 0x52dd
    4c3e:	f2c0 0000 	movt	r0, #0
    4c42:	f648 1148 	movw	r1, #35144	; 0x8948
    4c46:	f2c0 0101 	movt	r1, #1
    4c4a:	2280      	movs	r2, #128	; 0x80
    4c4c:	2300      	movs	r3, #0
    4c4e:	f7ff fc6b 	bl	4528 <xTaskGenericCreate>
    4c52:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	2b01      	cmp	r3, #1
    4c58:	d111      	bne.n	4c7e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4c5a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c5e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4c62:	f640 235c 	movw	r3, #2652	; 0xa5c
    4c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6a:	2201      	movs	r2, #1
    4c6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4c6e:	f640 2350 	movw	r3, #2640	; 0xa50
    4c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c76:	2200      	movs	r2, #0
    4c78:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4c7a:	f000 fdb5 	bl	57e8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4c7e:	3708      	adds	r7, #8
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}

00004c84 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4c84:	b580      	push	{r7, lr}
    4c86:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4c88:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c8c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4c90:	f640 235c 	movw	r3, #2652	; 0xa5c
    4c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c98:	2200      	movs	r2, #0
    4c9a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4c9c:	f000 fdcc 	bl	5838 <vPortEndScheduler>
}
    4ca0:	bd80      	pop	{r7, pc}
    4ca2:	bf00      	nop

00004ca4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4ca4:	b480      	push	{r7}
    4ca6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4ca8:	f640 2360 	movw	r3, #2656	; 0xa60
    4cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	1c5a      	adds	r2, r3, #1
    4cb4:	f640 2360 	movw	r3, #2656	; 0xa60
    4cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cbc:	601a      	str	r2, [r3, #0]
}
    4cbe:	46bd      	mov	sp, r7
    4cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc4:	4770      	bx	lr
    4cc6:	bf00      	nop

00004cc8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4cc8:	b590      	push	{r4, r7, lr}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4cce:	2300      	movs	r3, #0
    4cd0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4cd2:	f000 fdc5 	bl	5860 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4cd6:	f640 2360 	movw	r3, #2656	; 0xa60
    4cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cde:	681b      	ldr	r3, [r3, #0]
    4ce0:	1e5a      	subs	r2, r3, #1
    4ce2:	f640 2360 	movw	r3, #2656	; 0xa60
    4ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4cec:	f640 2360 	movw	r3, #2656	; 0xa60
    4cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf4:	681b      	ldr	r3, [r3, #0]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d177      	bne.n	4dea <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4cfa:	f640 234c 	movw	r3, #2636	; 0xa4c
    4cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d02:	681b      	ldr	r3, [r3, #0]
    4d04:	2b00      	cmp	r3, #0
    4d06:	d070      	beq.n	4dea <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4d08:	2300      	movs	r3, #0
    4d0a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4d0c:	e036      	b.n	4d7c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4d0e:	f640 230c 	movw	r3, #2572	; 0xa0c
    4d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d16:	68db      	ldr	r3, [r3, #12]
    4d18:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4d1a:	f104 0318 	add.w	r3, r4, #24
    4d1e:	4618      	mov	r0, r3
    4d20:	f7fe ffec 	bl	3cfc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4d24:	1d23      	adds	r3, r4, #4
    4d26:	4618      	mov	r0, r3
    4d28:	f7fe ffe8 	bl	3cfc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4d2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d2e:	f640 2358 	movw	r3, #2648	; 0xa58
    4d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	429a      	cmp	r2, r3
    4d3a:	d905      	bls.n	4d48 <xTaskResumeAll+0x80>
    4d3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d3e:	f640 2358 	movw	r3, #2648	; 0xa58
    4d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d46:	601a      	str	r2, [r3, #0]
    4d48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d4a:	4613      	mov	r3, r2
    4d4c:	009b      	lsls	r3, r3, #2
    4d4e:	4413      	add	r3, r2
    4d50:	009b      	lsls	r3, r3, #2
    4d52:	f640 024c 	movw	r2, #2124	; 0x84c
    4d56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d5a:	441a      	add	r2, r3
    4d5c:	1d23      	adds	r3, r4, #4
    4d5e:	4610      	mov	r0, r2
    4d60:	4619      	mov	r1, r3
    4d62:	f7fe ff6b 	bl	3c3c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d68:	f640 0348 	movw	r3, #2120	; 0x848
    4d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d70:	681b      	ldr	r3, [r3, #0]
    4d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d74:	429a      	cmp	r2, r3
    4d76:	d301      	bcc.n	4d7c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4d78:	2301      	movs	r3, #1
    4d7a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4d7c:	f640 230c 	movw	r3, #2572	; 0xa0c
    4d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d84:	681b      	ldr	r3, [r3, #0]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d1c1      	bne.n	4d0e <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d8a:	f640 2364 	movw	r3, #2660	; 0xa64
    4d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d014      	beq.n	4dc2 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d98:	e00c      	b.n	4db4 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4d9a:	f000 f865 	bl	4e68 <vTaskIncrementTick>
						--uxMissedTicks;
    4d9e:	f640 2364 	movw	r3, #2660	; 0xa64
    4da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	1e5a      	subs	r2, r3, #1
    4daa:	f640 2364 	movw	r3, #2660	; 0xa64
    4dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4db4:	f640 2364 	movw	r3, #2660	; 0xa64
    4db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d1eb      	bne.n	4d9a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4dc2:	683b      	ldr	r3, [r7, #0]
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d006      	beq.n	4dd6 <xTaskResumeAll+0x10e>
    4dc8:	f640 2368 	movw	r3, #2664	; 0xa68
    4dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd0:	681b      	ldr	r3, [r3, #0]
    4dd2:	2b01      	cmp	r3, #1
    4dd4:	d109      	bne.n	4dea <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4dd6:	2301      	movs	r3, #1
    4dd8:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4dda:	f640 2368 	movw	r3, #2664	; 0xa68
    4dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de2:	2200      	movs	r2, #0
    4de4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4de6:	f000 fd2d 	bl	5844 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4dea:	f000 fd4f 	bl	588c <vPortExitCritical>

	return xAlreadyYielded;
    4dee:	687b      	ldr	r3, [r7, #4]
}
    4df0:	4618      	mov	r0, r3
    4df2:	370c      	adds	r7, #12
    4df4:	46bd      	mov	sp, r7
    4df6:	bd90      	pop	{r4, r7, pc}

00004df8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b082      	sub	sp, #8
    4dfc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4dfe:	f000 fd2f 	bl	5860 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4e02:	f640 2350 	movw	r3, #2640	; 0xa50
    4e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0a:	681b      	ldr	r3, [r3, #0]
    4e0c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4e0e:	f000 fd3d 	bl	588c <vPortExitCritical>

	return xTicks;
    4e12:	687b      	ldr	r3, [r7, #4]
}
    4e14:	4618      	mov	r0, r3
    4e16:	3708      	adds	r7, #8
    4e18:	46bd      	mov	sp, r7
    4e1a:	bd80      	pop	{r7, pc}

00004e1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4e1c:	b480      	push	{r7}
    4e1e:	b083      	sub	sp, #12
    4e20:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4e22:	2300      	movs	r3, #0
    4e24:	607b      	str	r3, [r7, #4]
    4e26:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e2a:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4e2e:	f640 2350 	movw	r3, #2640	; 0xa50
    4e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4e3a:	f04f 0000 	mov.w	r0, #0
    4e3e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4e42:	683b      	ldr	r3, [r7, #0]
}
    4e44:	4618      	mov	r0, r3
    4e46:	370c      	adds	r7, #12
    4e48:	46bd      	mov	sp, r7
    4e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e4e:	4770      	bx	lr

00004e50 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4e50:	b480      	push	{r7}
    4e52:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4e54:	f640 234c 	movw	r3, #2636	; 0xa4c
    4e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e5c:	681b      	ldr	r3, [r3, #0]
}
    4e5e:	4618      	mov	r0, r3
    4e60:	46bd      	mov	sp, r7
    4e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e66:	4770      	bx	lr

00004e68 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b084      	sub	sp, #16
    4e6c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e6e:	f640 2360 	movw	r3, #2656	; 0xa60
    4e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e76:	681b      	ldr	r3, [r3, #0]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	f040 80b9 	bne.w	4ff0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4e7e:	f640 2350 	movw	r3, #2640	; 0xa50
    4e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e86:	681b      	ldr	r3, [r3, #0]
    4e88:	1c5a      	adds	r2, r3, #1
    4e8a:	f640 2350 	movw	r3, #2640	; 0xa50
    4e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e92:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4e94:	f640 2350 	movw	r3, #2640	; 0xa50
    4e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	d13f      	bne.n	4f22 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4ea2:	f640 2304 	movw	r3, #2564	; 0xa04
    4ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4eae:	f640 2308 	movw	r3, #2568	; 0xa08
    4eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb6:	681a      	ldr	r2, [r3, #0]
    4eb8:	f640 2304 	movw	r3, #2564	; 0xa04
    4ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4ec2:	f640 2308 	movw	r3, #2568	; 0xa08
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	68fa      	ldr	r2, [r7, #12]
    4ecc:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4ece:	f640 236c 	movw	r3, #2668	; 0xa6c
    4ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	1c5a      	adds	r2, r3, #1
    4eda:	f640 236c 	movw	r3, #2668	; 0xa6c
    4ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4ee4:	f640 2304 	movw	r3, #2564	; 0xa04
    4ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d107      	bne.n	4f04 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4ef4:	f240 2374 	movw	r3, #628	; 0x274
    4ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4efc:	f04f 32ff 	mov.w	r2, #4294967295
    4f00:	601a      	str	r2, [r3, #0]
    4f02:	e00e      	b.n	4f22 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4f04:	f640 2304 	movw	r3, #2564	; 0xa04
    4f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0c:	681b      	ldr	r3, [r3, #0]
    4f0e:	68db      	ldr	r3, [r3, #12]
    4f10:	68db      	ldr	r3, [r3, #12]
    4f12:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4f14:	68bb      	ldr	r3, [r7, #8]
    4f16:	685a      	ldr	r2, [r3, #4]
    4f18:	f240 2374 	movw	r3, #628	; 0x274
    4f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f20:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4f22:	f640 2350 	movw	r3, #2640	; 0xa50
    4f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f2a:	681a      	ldr	r2, [r3, #0]
    4f2c:	f240 2374 	movw	r3, #628	; 0x274
    4f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f34:	681b      	ldr	r3, [r3, #0]
    4f36:	429a      	cmp	r2, r3
    4f38:	d359      	bcc.n	4fee <vTaskIncrementTick+0x186>
    4f3a:	f640 2304 	movw	r3, #2564	; 0xa04
    4f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d107      	bne.n	4f5a <vTaskIncrementTick+0xf2>
    4f4a:	f240 2374 	movw	r3, #628	; 0x274
    4f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f52:	f04f 32ff 	mov.w	r2, #4294967295
    4f56:	601a      	str	r2, [r3, #0]
    4f58:	e049      	b.n	4fee <vTaskIncrementTick+0x186>
    4f5a:	f640 2304 	movw	r3, #2564	; 0xa04
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	68db      	ldr	r3, [r3, #12]
    4f66:	68db      	ldr	r3, [r3, #12]
    4f68:	60bb      	str	r3, [r7, #8]
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	685b      	ldr	r3, [r3, #4]
    4f6e:	607b      	str	r3, [r7, #4]
    4f70:	f640 2350 	movw	r3, #2640	; 0xa50
    4f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f78:	681a      	ldr	r2, [r3, #0]
    4f7a:	687b      	ldr	r3, [r7, #4]
    4f7c:	429a      	cmp	r2, r3
    4f7e:	d206      	bcs.n	4f8e <vTaskIncrementTick+0x126>
    4f80:	f240 2374 	movw	r3, #628	; 0x274
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	687a      	ldr	r2, [r7, #4]
    4f8a:	601a      	str	r2, [r3, #0]
    4f8c:	e02f      	b.n	4fee <vTaskIncrementTick+0x186>
    4f8e:	68bb      	ldr	r3, [r7, #8]
    4f90:	3304      	adds	r3, #4
    4f92:	4618      	mov	r0, r3
    4f94:	f7fe feb2 	bl	3cfc <vListRemove>
    4f98:	68bb      	ldr	r3, [r7, #8]
    4f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d004      	beq.n	4faa <vTaskIncrementTick+0x142>
    4fa0:	68bb      	ldr	r3, [r7, #8]
    4fa2:	3318      	adds	r3, #24
    4fa4:	4618      	mov	r0, r3
    4fa6:	f7fe fea9 	bl	3cfc <vListRemove>
    4faa:	68bb      	ldr	r3, [r7, #8]
    4fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fae:	f640 2358 	movw	r3, #2648	; 0xa58
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	429a      	cmp	r2, r3
    4fba:	d906      	bls.n	4fca <vTaskIncrementTick+0x162>
    4fbc:	68bb      	ldr	r3, [r7, #8]
    4fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fc0:	f640 2358 	movw	r3, #2648	; 0xa58
    4fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc8:	601a      	str	r2, [r3, #0]
    4fca:	68bb      	ldr	r3, [r7, #8]
    4fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fce:	4613      	mov	r3, r2
    4fd0:	009b      	lsls	r3, r3, #2
    4fd2:	4413      	add	r3, r2
    4fd4:	009b      	lsls	r3, r3, #2
    4fd6:	f640 024c 	movw	r2, #2124	; 0x84c
    4fda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fde:	441a      	add	r2, r3
    4fe0:	68bb      	ldr	r3, [r7, #8]
    4fe2:	3304      	adds	r3, #4
    4fe4:	4610      	mov	r0, r2
    4fe6:	4619      	mov	r1, r3
    4fe8:	f7fe fe28 	bl	3c3c <vListInsertEnd>
    4fec:	e7a5      	b.n	4f3a <vTaskIncrementTick+0xd2>
    4fee:	e00c      	b.n	500a <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4ff0:	f640 2364 	movw	r3, #2660	; 0xa64
    4ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	1c5a      	adds	r2, r3, #1
    4ffc:	f640 2364 	movw	r3, #2660	; 0xa64
    5000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5004:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    5006:	f012 fa85 	bl	17514 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    500a:	f640 2364 	movw	r3, #2660	; 0xa64
    500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	2b00      	cmp	r3, #0
    5016:	d101      	bne.n	501c <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    5018:	f012 fa7c 	bl	17514 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    501c:	3710      	adds	r7, #16
    501e:	46bd      	mov	sp, r7
    5020:	bd80      	pop	{r7, pc}
    5022:	bf00      	nop

00005024 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5024:	b580      	push	{r7, lr}
    5026:	b082      	sub	sp, #8
    5028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    502a:	f640 2360 	movw	r3, #2656	; 0xa60
    502e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5032:	681b      	ldr	r3, [r3, #0]
    5034:	2b00      	cmp	r3, #0
    5036:	d006      	beq.n	5046 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5038:	f640 2368 	movw	r3, #2664	; 0xa68
    503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5040:	2201      	movs	r2, #1
    5042:	601a      	str	r2, [r3, #0]
    5044:	e047      	b.n	50d6 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5046:	f012 fa5f 	bl	17508 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    504a:	e00a      	b.n	5062 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    504c:	f640 2358 	movw	r3, #2648	; 0xa58
    5050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5054:	681b      	ldr	r3, [r3, #0]
    5056:	1e5a      	subs	r2, r3, #1
    5058:	f640 2358 	movw	r3, #2648	; 0xa58
    505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5060:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5062:	f640 2358 	movw	r3, #2648	; 0xa58
    5066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506a:	6819      	ldr	r1, [r3, #0]
    506c:	f640 024c 	movw	r2, #2124	; 0x84c
    5070:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5074:	460b      	mov	r3, r1
    5076:	009b      	lsls	r3, r3, #2
    5078:	440b      	add	r3, r1
    507a:	009b      	lsls	r3, r3, #2
    507c:	4413      	add	r3, r2
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	2b00      	cmp	r3, #0
    5082:	d0e3      	beq.n	504c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5084:	f640 2358 	movw	r3, #2648	; 0xa58
    5088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508c:	681a      	ldr	r2, [r3, #0]
    508e:	4613      	mov	r3, r2
    5090:	009b      	lsls	r3, r3, #2
    5092:	4413      	add	r3, r2
    5094:	009b      	lsls	r3, r3, #2
    5096:	f640 024c 	movw	r2, #2124	; 0x84c
    509a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    509e:	4413      	add	r3, r2
    50a0:	607b      	str	r3, [r7, #4]
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	685b      	ldr	r3, [r3, #4]
    50a6:	685a      	ldr	r2, [r3, #4]
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	605a      	str	r2, [r3, #4]
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	685a      	ldr	r2, [r3, #4]
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	3308      	adds	r3, #8
    50b4:	429a      	cmp	r2, r3
    50b6:	d104      	bne.n	50c2 <vTaskSwitchContext+0x9e>
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	685b      	ldr	r3, [r3, #4]
    50bc:	685a      	ldr	r2, [r3, #4]
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	605a      	str	r2, [r3, #4]
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	685b      	ldr	r3, [r3, #4]
    50c6:	68da      	ldr	r2, [r3, #12]
    50c8:	f640 0348 	movw	r3, #2120	; 0x848
    50cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d0:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    50d2:	f012 fa13 	bl	174fc <myTraceSwitchedIn>
	}
}
    50d6:	3708      	adds	r7, #8
    50d8:	46bd      	mov	sp, r7
    50da:	bd80      	pop	{r7, pc}

000050dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    50dc:	b580      	push	{r7, lr}
    50de:	b084      	sub	sp, #16
    50e0:	af00      	add	r7, sp, #0
    50e2:	6078      	str	r0, [r7, #4]
    50e4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    50e6:	f640 0348 	movw	r3, #2120	; 0x848
    50ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	3318      	adds	r3, #24
    50f2:	6878      	ldr	r0, [r7, #4]
    50f4:	4619      	mov	r1, r3
    50f6:	f7fe fdc9 	bl	3c8c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    50fa:	f640 0348 	movw	r3, #2120	; 0x848
    50fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5102:	681b      	ldr	r3, [r3, #0]
    5104:	3304      	adds	r3, #4
    5106:	4618      	mov	r0, r3
    5108:	f7fe fdf8 	bl	3cfc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    510c:	683b      	ldr	r3, [r7, #0]
    510e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5112:	d10d      	bne.n	5130 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5114:	f640 0348 	movw	r3, #2120	; 0x848
    5118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	3304      	adds	r3, #4
    5120:	f640 2038 	movw	r0, #2616	; 0xa38
    5124:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5128:	4619      	mov	r1, r3
    512a:	f7fe fd87 	bl	3c3c <vListInsertEnd>
    512e:	e00a      	b.n	5146 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5130:	f640 2350 	movw	r3, #2640	; 0xa50
    5134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5138:	681a      	ldr	r2, [r3, #0]
    513a:	683b      	ldr	r3, [r7, #0]
    513c:	4413      	add	r3, r2
    513e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5140:	68f8      	ldr	r0, [r7, #12]
    5142:	f000 f99f 	bl	5484 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5146:	3710      	adds	r7, #16
    5148:	46bd      	mov	sp, r7
    514a:	bd80      	pop	{r7, pc}

0000514c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    514c:	b580      	push	{r7, lr}
    514e:	b084      	sub	sp, #16
    5150:	af00      	add	r7, sp, #0
    5152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	68db      	ldr	r3, [r3, #12]
    5158:	68db      	ldr	r3, [r3, #12]
    515a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    515c:	68bb      	ldr	r3, [r7, #8]
    515e:	3318      	adds	r3, #24
    5160:	4618      	mov	r0, r3
    5162:	f7fe fdcb 	bl	3cfc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5166:	f640 2360 	movw	r3, #2656	; 0xa60
    516a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516e:	681b      	ldr	r3, [r3, #0]
    5170:	2b00      	cmp	r3, #0
    5172:	d126      	bne.n	51c2 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5174:	68bb      	ldr	r3, [r7, #8]
    5176:	3304      	adds	r3, #4
    5178:	4618      	mov	r0, r3
    517a:	f7fe fdbf 	bl	3cfc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    517e:	68bb      	ldr	r3, [r7, #8]
    5180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5182:	f640 2358 	movw	r3, #2648	; 0xa58
    5186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518a:	681b      	ldr	r3, [r3, #0]
    518c:	429a      	cmp	r2, r3
    518e:	d906      	bls.n	519e <xTaskRemoveFromEventList+0x52>
    5190:	68bb      	ldr	r3, [r7, #8]
    5192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5194:	f640 2358 	movw	r3, #2648	; 0xa58
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	601a      	str	r2, [r3, #0]
    519e:	68bb      	ldr	r3, [r7, #8]
    51a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51a2:	4613      	mov	r3, r2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	4413      	add	r3, r2
    51a8:	009b      	lsls	r3, r3, #2
    51aa:	f640 024c 	movw	r2, #2124	; 0x84c
    51ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51b2:	441a      	add	r2, r3
    51b4:	68bb      	ldr	r3, [r7, #8]
    51b6:	3304      	adds	r3, #4
    51b8:	4610      	mov	r0, r2
    51ba:	4619      	mov	r1, r3
    51bc:	f7fe fd3e 	bl	3c3c <vListInsertEnd>
    51c0:	e008      	b.n	51d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    51c2:	68bb      	ldr	r3, [r7, #8]
    51c4:	3318      	adds	r3, #24
    51c6:	f640 200c 	movw	r0, #2572	; 0xa0c
    51ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    51ce:	4619      	mov	r1, r3
    51d0:	f7fe fd34 	bl	3c3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    51d4:	68bb      	ldr	r3, [r7, #8]
    51d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51d8:	f640 0348 	movw	r3, #2120	; 0x848
    51dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e0:	681b      	ldr	r3, [r3, #0]
    51e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51e4:	429a      	cmp	r2, r3
    51e6:	d302      	bcc.n	51ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    51e8:	2301      	movs	r3, #1
    51ea:	60fb      	str	r3, [r7, #12]
    51ec:	e001      	b.n	51f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    51ee:	2300      	movs	r3, #0
    51f0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    51f2:	68fb      	ldr	r3, [r7, #12]
}
    51f4:	4618      	mov	r0, r3
    51f6:	3710      	adds	r7, #16
    51f8:	46bd      	mov	sp, r7
    51fa:	bd80      	pop	{r7, pc}

000051fc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    51fc:	b480      	push	{r7}
    51fe:	b083      	sub	sp, #12
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5204:	f640 236c 	movw	r3, #2668	; 0xa6c
    5208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520c:	681a      	ldr	r2, [r3, #0]
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5212:	f640 2350 	movw	r3, #2640	; 0xa50
    5216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521a:	681a      	ldr	r2, [r3, #0]
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	605a      	str	r2, [r3, #4]
}
    5220:	370c      	adds	r7, #12
    5222:	46bd      	mov	sp, r7
    5224:	f85d 7b04 	ldr.w	r7, [sp], #4
    5228:	4770      	bx	lr
    522a:	bf00      	nop

0000522c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    522c:	b580      	push	{r7, lr}
    522e:	b084      	sub	sp, #16
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5236:	f000 fb13 	bl	5860 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    523a:	683b      	ldr	r3, [r7, #0]
    523c:	681b      	ldr	r3, [r3, #0]
    523e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5242:	d102      	bne.n	524a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5244:	2300      	movs	r3, #0
    5246:	60fb      	str	r3, [r7, #12]
    5248:	e035      	b.n	52b6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	681a      	ldr	r2, [r3, #0]
    524e:	f640 236c 	movw	r3, #2668	; 0xa6c
    5252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	429a      	cmp	r2, r3
    525a:	d00b      	beq.n	5274 <xTaskCheckForTimeOut+0x48>
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	685a      	ldr	r2, [r3, #4]
    5260:	f640 2350 	movw	r3, #2640	; 0xa50
    5264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5268:	681b      	ldr	r3, [r3, #0]
    526a:	429a      	cmp	r2, r3
    526c:	d802      	bhi.n	5274 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    526e:	2301      	movs	r3, #1
    5270:	60fb      	str	r3, [r7, #12]
    5272:	e020      	b.n	52b6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5274:	f640 2350 	movw	r3, #2640	; 0xa50
    5278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527c:	681a      	ldr	r2, [r3, #0]
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	685b      	ldr	r3, [r3, #4]
    5282:	1ad2      	subs	r2, r2, r3
    5284:	683b      	ldr	r3, [r7, #0]
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	429a      	cmp	r2, r3
    528a:	d212      	bcs.n	52b2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    528c:	683b      	ldr	r3, [r7, #0]
    528e:	681a      	ldr	r2, [r3, #0]
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	6859      	ldr	r1, [r3, #4]
    5294:	f640 2350 	movw	r3, #2640	; 0xa50
    5298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529c:	681b      	ldr	r3, [r3, #0]
    529e:	1acb      	subs	r3, r1, r3
    52a0:	441a      	add	r2, r3
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    52a6:	6878      	ldr	r0, [r7, #4]
    52a8:	f7ff ffa8 	bl	51fc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    52ac:	2300      	movs	r3, #0
    52ae:	60fb      	str	r3, [r7, #12]
    52b0:	e001      	b.n	52b6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    52b2:	2301      	movs	r3, #1
    52b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    52b6:	f000 fae9 	bl	588c <vPortExitCritical>

	return xReturn;
    52ba:	68fb      	ldr	r3, [r7, #12]
}
    52bc:	4618      	mov	r0, r3
    52be:	3710      	adds	r7, #16
    52c0:	46bd      	mov	sp, r7
    52c2:	bd80      	pop	{r7, pc}

000052c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    52c4:	b480      	push	{r7}
    52c6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    52c8:	f640 2368 	movw	r3, #2664	; 0xa68
    52cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d0:	2201      	movs	r2, #1
    52d2:	601a      	str	r2, [r3, #0]
}
    52d4:	46bd      	mov	sp, r7
    52d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52da:	4770      	bx	lr

000052dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    52dc:	b580      	push	{r7, lr}
    52de:	b082      	sub	sp, #8
    52e0:	af00      	add	r7, sp, #0
    52e2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    52e4:	f000 f886 	bl	53f4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    52e8:	f000 faac 	bl	5844 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    52ec:	e7fa      	b.n	52e4 <prvIdleTask+0x8>
    52ee:	bf00      	nop

000052f0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    52f0:	b580      	push	{r7, lr}
    52f2:	b084      	sub	sp, #16
    52f4:	af00      	add	r7, sp, #0
    52f6:	60f8      	str	r0, [r7, #12]
    52f8:	60b9      	str	r1, [r7, #8]
    52fa:	607a      	str	r2, [r7, #4]
    52fc:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    52fe:	68fb      	ldr	r3, [r7, #12]
    5300:	3334      	adds	r3, #52	; 0x34
    5302:	4618      	mov	r0, r3
    5304:	68b9      	ldr	r1, [r7, #8]
    5306:	2210      	movs	r2, #16
    5308:	f013 fa7e 	bl	18808 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	2200      	movs	r2, #0
    5310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	2b13      	cmp	r3, #19
    5318:	d901      	bls.n	531e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    531a:	2313      	movs	r3, #19
    531c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    531e:	68fb      	ldr	r3, [r7, #12]
    5320:	687a      	ldr	r2, [r7, #4]
    5322:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5324:	68fb      	ldr	r3, [r7, #12]
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    532a:	68fb      	ldr	r3, [r7, #12]
    532c:	3304      	adds	r3, #4
    532e:	4618      	mov	r0, r3
    5330:	f7fe fc78 	bl	3c24 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	3318      	adds	r3, #24
    5338:	4618      	mov	r0, r3
    533a:	f7fe fc73 	bl	3c24 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    533e:	68fb      	ldr	r3, [r7, #12]
    5340:	68fa      	ldr	r2, [r7, #12]
    5342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	f1c3 0214 	rsb	r2, r3, #20
    534a:	68fb      	ldr	r3, [r7, #12]
    534c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	68fa      	ldr	r2, [r7, #12]
    5352:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5354:	3710      	adds	r7, #16
    5356:	46bd      	mov	sp, r7
    5358:	bd80      	pop	{r7, pc}
    535a:	bf00      	nop

0000535c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    535c:	b580      	push	{r7, lr}
    535e:	b082      	sub	sp, #8
    5360:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5362:	2300      	movs	r3, #0
    5364:	607b      	str	r3, [r7, #4]
    5366:	e00f      	b.n	5388 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5368:	687a      	ldr	r2, [r7, #4]
    536a:	4613      	mov	r3, r2
    536c:	009b      	lsls	r3, r3, #2
    536e:	4413      	add	r3, r2
    5370:	009b      	lsls	r3, r3, #2
    5372:	f640 024c 	movw	r2, #2124	; 0x84c
    5376:	f2c2 0200 	movt	r2, #8192	; 0x2000
    537a:	4413      	add	r3, r2
    537c:	4618      	mov	r0, r3
    537e:	f7fe fc31 	bl	3be4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	3301      	adds	r3, #1
    5386:	607b      	str	r3, [r7, #4]
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	2b13      	cmp	r3, #19
    538c:	d9ec      	bls.n	5368 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    538e:	f640 10dc 	movw	r0, #2524	; 0x9dc
    5392:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5396:	f7fe fc25 	bl	3be4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    539a:	f640 10f0 	movw	r0, #2544	; 0x9f0
    539e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53a2:	f7fe fc1f 	bl	3be4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    53a6:	f640 200c 	movw	r0, #2572	; 0xa0c
    53aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53ae:	f7fe fc19 	bl	3be4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    53b2:	f640 2020 	movw	r0, #2592	; 0xa20
    53b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53ba:	f7fe fc13 	bl	3be4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    53be:	f640 2038 	movw	r0, #2616	; 0xa38
    53c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53c6:	f7fe fc0d 	bl	3be4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    53ca:	f640 2304 	movw	r3, #2564	; 0xa04
    53ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d2:	f640 12dc 	movw	r2, #2524	; 0x9dc
    53d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    53dc:	f640 2308 	movw	r3, #2568	; 0xa08
    53e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e4:	f640 12f0 	movw	r2, #2544	; 0x9f0
    53e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53ec:	601a      	str	r2, [r3, #0]
}
    53ee:	3708      	adds	r7, #8
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}

000053f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b082      	sub	sp, #8
    53f8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    53fa:	f640 2334 	movw	r3, #2612	; 0xa34
    53fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	2b00      	cmp	r3, #0
    5406:	d03a      	beq.n	547e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5408:	f7ff fc4c 	bl	4ca4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    540c:	f640 2320 	movw	r3, #2592	; 0xa20
    5410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	2b00      	cmp	r3, #0
    5418:	bf14      	ite	ne
    541a:	2300      	movne	r3, #0
    541c:	2301      	moveq	r3, #1
    541e:	b2db      	uxtb	r3, r3
    5420:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5422:	f7ff fc51 	bl	4cc8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	2b00      	cmp	r3, #0
    542a:	d128      	bne.n	547e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    542c:	f000 fa18 	bl	5860 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5430:	f640 2320 	movw	r3, #2592	; 0xa20
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	68db      	ldr	r3, [r3, #12]
    543a:	68db      	ldr	r3, [r3, #12]
    543c:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    543e:	683b      	ldr	r3, [r7, #0]
    5440:	3304      	adds	r3, #4
    5442:	4618      	mov	r0, r3
    5444:	f7fe fc5a 	bl	3cfc <vListRemove>
					--uxCurrentNumberOfTasks;
    5448:	f640 234c 	movw	r3, #2636	; 0xa4c
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	1e5a      	subs	r2, r3, #1
    5454:	f640 234c 	movw	r3, #2636	; 0xa4c
    5458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    545e:	f640 2334 	movw	r3, #2612	; 0xa34
    5462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	1e5a      	subs	r2, r3, #1
    546a:	f640 2334 	movw	r3, #2612	; 0xa34
    546e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5472:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5474:	f000 fa0a 	bl	588c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5478:	6838      	ldr	r0, [r7, #0]
    547a:	f000 f879 	bl	5570 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    547e:	3708      	adds	r7, #8
    5480:	46bd      	mov	sp, r7
    5482:	bd80      	pop	{r7, pc}

00005484 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5484:	b580      	push	{r7, lr}
    5486:	b082      	sub	sp, #8
    5488:	af00      	add	r7, sp, #0
    548a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    548c:	f640 0348 	movw	r3, #2120	; 0x848
    5490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	687a      	ldr	r2, [r7, #4]
    5498:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    549a:	f640 2350 	movw	r3, #2640	; 0xa50
    549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	687a      	ldr	r2, [r7, #4]
    54a6:	429a      	cmp	r2, r3
    54a8:	d20f      	bcs.n	54ca <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54aa:	f640 2308 	movw	r3, #2568	; 0xa08
    54ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b2:	681a      	ldr	r2, [r3, #0]
    54b4:	f640 0348 	movw	r3, #2120	; 0x848
    54b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	3304      	adds	r3, #4
    54c0:	4610      	mov	r0, r2
    54c2:	4619      	mov	r1, r3
    54c4:	f7fe fbe2 	bl	3c8c <vListInsert>
    54c8:	e01c      	b.n	5504 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54ca:	f640 2304 	movw	r3, #2564	; 0xa04
    54ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d2:	681a      	ldr	r2, [r3, #0]
    54d4:	f640 0348 	movw	r3, #2120	; 0x848
    54d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	3304      	adds	r3, #4
    54e0:	4610      	mov	r0, r2
    54e2:	4619      	mov	r1, r3
    54e4:	f7fe fbd2 	bl	3c8c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    54e8:	f240 2374 	movw	r3, #628	; 0x274
    54ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	687a      	ldr	r2, [r7, #4]
    54f4:	429a      	cmp	r2, r3
    54f6:	d205      	bcs.n	5504 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    54f8:	f240 2374 	movw	r3, #628	; 0x274
    54fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5500:	687a      	ldr	r2, [r7, #4]
    5502:	601a      	str	r2, [r3, #0]
		}
	}
}
    5504:	3708      	adds	r7, #8
    5506:	46bd      	mov	sp, r7
    5508:	bd80      	pop	{r7, pc}
    550a:	bf00      	nop

0000550c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    550c:	b580      	push	{r7, lr}
    550e:	b084      	sub	sp, #16
    5510:	af00      	add	r7, sp, #0
    5512:	4603      	mov	r3, r0
    5514:	6039      	str	r1, [r7, #0]
    5516:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5518:	2050      	movs	r0, #80	; 0x50
    551a:	f000 fa1b 	bl	5954 <pvPortMalloc>
    551e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5520:	68fb      	ldr	r3, [r7, #12]
    5522:	2b00      	cmp	r3, #0
    5524:	d01f      	beq.n	5566 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5526:	683b      	ldr	r3, [r7, #0]
    5528:	2b00      	cmp	r3, #0
    552a:	d106      	bne.n	553a <prvAllocateTCBAndStack+0x2e>
    552c:	88fb      	ldrh	r3, [r7, #6]
    552e:	009b      	lsls	r3, r3, #2
    5530:	4618      	mov	r0, r3
    5532:	f000 fa0f 	bl	5954 <pvPortMalloc>
    5536:	4603      	mov	r3, r0
    5538:	e000      	b.n	553c <prvAllocateTCBAndStack+0x30>
    553a:	683b      	ldr	r3, [r7, #0]
    553c:	68fa      	ldr	r2, [r7, #12]
    553e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5544:	2b00      	cmp	r3, #0
    5546:	d105      	bne.n	5554 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5548:	68f8      	ldr	r0, [r7, #12]
    554a:	f000 fac7 	bl	5adc <vPortFree>
			pxNewTCB = NULL;
    554e:	2300      	movs	r3, #0
    5550:	60fb      	str	r3, [r7, #12]
    5552:	e008      	b.n	5566 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5554:	68fb      	ldr	r3, [r7, #12]
    5556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5558:	88fb      	ldrh	r3, [r7, #6]
    555a:	009b      	lsls	r3, r3, #2
    555c:	4610      	mov	r0, r2
    555e:	21a5      	movs	r1, #165	; 0xa5
    5560:	461a      	mov	r2, r3
    5562:	f013 f901 	bl	18768 <memset>
		}
	}

	return pxNewTCB;
    5566:	68fb      	ldr	r3, [r7, #12]
}
    5568:	4618      	mov	r0, r3
    556a:	3710      	adds	r7, #16
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}

00005570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    557c:	4618      	mov	r0, r3
    557e:	f000 faad 	bl	5adc <vPortFree>
		vPortFree( pxTCB );
    5582:	6878      	ldr	r0, [r7, #4]
    5584:	f000 faaa 	bl	5adc <vPortFree>
	}
    5588:	3708      	adds	r7, #8
    558a:	46bd      	mov	sp, r7
    558c:	bd80      	pop	{r7, pc}
    558e:	bf00      	nop

00005590 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5590:	b480      	push	{r7}
    5592:	b083      	sub	sp, #12
    5594:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5596:	f640 0348 	movw	r3, #2120	; 0x848
    559a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	607b      	str	r3, [r7, #4]

		return xReturn;
    55a2:	687b      	ldr	r3, [r7, #4]
	}
    55a4:	4618      	mov	r0, r3
    55a6:	370c      	adds	r7, #12
    55a8:	46bd      	mov	sp, r7
    55aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ae:	4770      	bx	lr

000055b0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    55b0:	b580      	push	{r7, lr}
    55b2:	b084      	sub	sp, #16
    55b4:	af00      	add	r7, sp, #0
    55b6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    55bc:	68fb      	ldr	r3, [r7, #12]
    55be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55c0:	f640 0348 	movw	r3, #2120	; 0x848
    55c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55cc:	429a      	cmp	r2, r3
    55ce:	d24f      	bcs.n	5670 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    55d0:	f640 0348 	movw	r3, #2120	; 0x848
    55d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55dc:	f1c3 0214 	rsb	r2, r3, #20
    55e0:	68fb      	ldr	r3, [r7, #12]
    55e2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    55e4:	68fb      	ldr	r3, [r7, #12]
    55e6:	6959      	ldr	r1, [r3, #20]
    55e8:	68fb      	ldr	r3, [r7, #12]
    55ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ec:	4613      	mov	r3, r2
    55ee:	009b      	lsls	r3, r3, #2
    55f0:	4413      	add	r3, r2
    55f2:	009b      	lsls	r3, r3, #2
    55f4:	f640 024c 	movw	r2, #2124	; 0x84c
    55f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55fc:	4413      	add	r3, r2
    55fe:	4299      	cmp	r1, r3
    5600:	d12e      	bne.n	5660 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5602:	68fb      	ldr	r3, [r7, #12]
    5604:	3304      	adds	r3, #4
    5606:	4618      	mov	r0, r3
    5608:	f7fe fb78 	bl	3cfc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    560c:	f640 0348 	movw	r3, #2120	; 0x848
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    561c:	68fb      	ldr	r3, [r7, #12]
    561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5620:	f640 2358 	movw	r3, #2648	; 0xa58
    5624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	429a      	cmp	r2, r3
    562c:	d906      	bls.n	563c <vTaskPriorityInherit+0x8c>
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5632:	f640 2358 	movw	r3, #2648	; 0xa58
    5636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563a:	601a      	str	r2, [r3, #0]
    563c:	68fb      	ldr	r3, [r7, #12]
    563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5640:	4613      	mov	r3, r2
    5642:	009b      	lsls	r3, r3, #2
    5644:	4413      	add	r3, r2
    5646:	009b      	lsls	r3, r3, #2
    5648:	f640 024c 	movw	r2, #2124	; 0x84c
    564c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5650:	441a      	add	r2, r3
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	3304      	adds	r3, #4
    5656:	4610      	mov	r0, r2
    5658:	4619      	mov	r1, r3
    565a:	f7fe faef 	bl	3c3c <vListInsertEnd>
    565e:	e007      	b.n	5670 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5660:	f640 0348 	movw	r3, #2120	; 0x848
    5664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    566c:	68fb      	ldr	r3, [r7, #12]
    566e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5670:	3710      	adds	r7, #16
    5672:	46bd      	mov	sp, r7
    5674:	bd80      	pop	{r7, pc}
    5676:	bf00      	nop

00005678 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5678:	b580      	push	{r7, lr}
    567a:	b084      	sub	sp, #16
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	2b00      	cmp	r3, #0
    5688:	d035      	beq.n	56f6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    568a:	68fb      	ldr	r3, [r7, #12]
    568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5692:	429a      	cmp	r2, r3
    5694:	d02f      	beq.n	56f6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5696:	68fb      	ldr	r3, [r7, #12]
    5698:	3304      	adds	r3, #4
    569a:	4618      	mov	r0, r3
    569c:	f7fe fb2e 	bl	3cfc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    56a0:	68fb      	ldr	r3, [r7, #12]
    56a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    56a4:	68fb      	ldr	r3, [r7, #12]
    56a6:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    56a8:	68fb      	ldr	r3, [r7, #12]
    56aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56ac:	f1c3 0214 	rsb	r2, r3, #20
    56b0:	68fb      	ldr	r3, [r7, #12]
    56b2:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    56b4:	68fb      	ldr	r3, [r7, #12]
    56b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56b8:	f640 2358 	movw	r3, #2648	; 0xa58
    56bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	429a      	cmp	r2, r3
    56c4:	d906      	bls.n	56d4 <vTaskPriorityDisinherit+0x5c>
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56ca:	f640 2358 	movw	r3, #2648	; 0xa58
    56ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d2:	601a      	str	r2, [r3, #0]
    56d4:	68fb      	ldr	r3, [r7, #12]
    56d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56d8:	4613      	mov	r3, r2
    56da:	009b      	lsls	r3, r3, #2
    56dc:	4413      	add	r3, r2
    56de:	009b      	lsls	r3, r3, #2
    56e0:	f640 024c 	movw	r2, #2124	; 0x84c
    56e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56e8:	441a      	add	r2, r3
    56ea:	68fb      	ldr	r3, [r7, #12]
    56ec:	3304      	adds	r3, #4
    56ee:	4610      	mov	r0, r2
    56f0:	4619      	mov	r1, r3
    56f2:	f7fe faa3 	bl	3c3c <vListInsertEnd>
			}
		}
	}
    56f6:	3710      	adds	r7, #16
    56f8:	46bd      	mov	sp, r7
    56fa:	bd80      	pop	{r7, pc}

000056fc <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    56fc:	b480      	push	{r7}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5708:	4618      	mov	r0, r3
    570a:	370c      	adds	r7, #12
    570c:	46bd      	mov	sp, r7
    570e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5712:	4770      	bx	lr

00005714 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5714:	b480      	push	{r7}
    5716:	b083      	sub	sp, #12
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5720:	4618      	mov	r0, r3
    5722:	370c      	adds	r7, #12
    5724:	46bd      	mov	sp, r7
    5726:	f85d 7b04 	ldr.w	r7, [sp], #4
    572a:	4770      	bx	lr

0000572c <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    572c:	b480      	push	{r7}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
    5734:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	683a      	ldr	r2, [r7, #0]
    573a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    573c:	370c      	adds	r7, #12
    573e:	46bd      	mov	sp, r7
    5740:	f85d 7b04 	ldr.w	r7, [sp], #4
    5744:	4770      	bx	lr
    5746:	bf00      	nop

00005748 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5748:	b480      	push	{r7}
    574a:	b083      	sub	sp, #12
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
    5750:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	683a      	ldr	r2, [r7, #0]
    5756:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5758:	370c      	adds	r7, #12
    575a:	46bd      	mov	sp, r7
    575c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5760:	4770      	bx	lr
    5762:	bf00      	nop

00005764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5764:	b480      	push	{r7}
    5766:	b085      	sub	sp, #20
    5768:	af00      	add	r7, sp, #0
    576a:	60f8      	str	r0, [r7, #12]
    576c:	60b9      	str	r1, [r7, #8]
    576e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5770:	68fb      	ldr	r3, [r7, #12]
    5772:	3b04      	subs	r3, #4
    5774:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    577c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    577e:	68fb      	ldr	r3, [r7, #12]
    5780:	3b04      	subs	r3, #4
    5782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5784:	68ba      	ldr	r2, [r7, #8]
    5786:	68fb      	ldr	r3, [r7, #12]
    5788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	3b04      	subs	r3, #4
    578e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	2200      	movs	r2, #0
    5794:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5796:	68fb      	ldr	r3, [r7, #12]
    5798:	3b14      	subs	r3, #20
    579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    579c:	687a      	ldr	r2, [r7, #4]
    579e:	68fb      	ldr	r3, [r7, #12]
    57a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	3b20      	subs	r3, #32
    57a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    57a8:	68fb      	ldr	r3, [r7, #12]
}
    57aa:	4618      	mov	r0, r3
    57ac:	3714      	adds	r7, #20
    57ae:	46bd      	mov	sp, r7
    57b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b4:	4770      	bx	lr
    57b6:	bf00      	nop

000057b8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    57b8:	4b06      	ldr	r3, [pc, #24]	; (57d4 <pxCurrentTCBConst2>)
    57ba:	6819      	ldr	r1, [r3, #0]
    57bc:	6808      	ldr	r0, [r1, #0]
    57be:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    57c2:	f380 8809 	msr	PSP, r0
    57c6:	f04f 0000 	mov.w	r0, #0
    57ca:	f380 8811 	msr	BASEPRI, r0
    57ce:	f04e 0e0d 	orr.w	lr, lr, #13
    57d2:	4770      	bx	lr

000057d4 <pxCurrentTCBConst2>:
    57d4:	20000848 	.word	0x20000848

000057d8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    57d8:	485d      	ldr	r0, [pc, #372]	; (5950 <prvSetupTimerInterrupt+0x2c>)
    57da:	6800      	ldr	r0, [r0, #0]
    57dc:	6800      	ldr	r0, [r0, #0]
    57de:	f380 8808 	msr	MSP, r0
    57e2:	b662      	cpsie	i
    57e4:	df00      	svc	0
    57e6:	bf00      	nop

000057e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    57e8:	b580      	push	{r7, lr}
    57ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    57ec:	f64e 5320 	movw	r3, #60704	; 0xed20
    57f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    57f4:	f64e 5220 	movw	r2, #60704	; 0xed20
    57f8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    57fc:	6812      	ldr	r2, [r2, #0]
    57fe:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5802:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5804:	f64e 5320 	movw	r3, #60704	; 0xed20
    5808:	f2ce 0300 	movt	r3, #57344	; 0xe000
    580c:	f64e 5220 	movw	r2, #60704	; 0xed20
    5810:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5814:	6812      	ldr	r2, [r2, #0]
    5816:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    581a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    581c:	f000 f882 	bl	5924 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5820:	f240 2378 	movw	r3, #632	; 0x278
    5824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5828:	2200      	movs	r2, #0
    582a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    582c:	f7ff ffd4 	bl	57d8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5830:	2300      	movs	r3, #0
}
    5832:	4618      	mov	r0, r3
    5834:	bd80      	pop	{r7, pc}
    5836:	bf00      	nop

00005838 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5838:	b480      	push	{r7}
    583a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    583c:	46bd      	mov	sp, r7
    583e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5842:	4770      	bx	lr

00005844 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5844:	b480      	push	{r7}
    5846:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5848:	f64e 5304 	movw	r3, #60676	; 0xed04
    584c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5854:	601a      	str	r2, [r3, #0]
}
    5856:	46bd      	mov	sp, r7
    5858:	f85d 7b04 	ldr.w	r7, [sp], #4
    585c:	4770      	bx	lr
    585e:	bf00      	nop

00005860 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5860:	b480      	push	{r7}
    5862:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5864:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5868:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    586c:	f240 2378 	movw	r3, #632	; 0x278
    5870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	1c5a      	adds	r2, r3, #1
    5878:	f240 2378 	movw	r3, #632	; 0x278
    587c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5880:	601a      	str	r2, [r3, #0]
}
    5882:	46bd      	mov	sp, r7
    5884:	f85d 7b04 	ldr.w	r7, [sp], #4
    5888:	4770      	bx	lr
    588a:	bf00      	nop

0000588c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    588c:	b480      	push	{r7}
    588e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5890:	f240 2378 	movw	r3, #632	; 0x278
    5894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	1e5a      	subs	r2, r3, #1
    589c:	f240 2378 	movw	r3, #632	; 0x278
    58a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    58a6:	f240 2378 	movw	r3, #632	; 0x278
    58aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ae:	681b      	ldr	r3, [r3, #0]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d103      	bne.n	58bc <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    58b4:	f04f 0000 	mov.w	r0, #0
    58b8:	f380 8811 	msr	BASEPRI, r0
	}
}
    58bc:	46bd      	mov	sp, r7
    58be:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c2:	4770      	bx	lr

000058c4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    58c4:	f3ef 8009 	mrs	r0, PSP
    58c8:	4b0c      	ldr	r3, [pc, #48]	; (58fc <pxCurrentTCBConst>)
    58ca:	681a      	ldr	r2, [r3, #0]
    58cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    58d0:	6010      	str	r0, [r2, #0]
    58d2:	e92d 4008 	stmdb	sp!, {r3, lr}
    58d6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    58da:	f380 8811 	msr	BASEPRI, r0
    58de:	f7ff fba1 	bl	5024 <vTaskSwitchContext>
    58e2:	f04f 0000 	mov.w	r0, #0
    58e6:	f380 8811 	msr	BASEPRI, r0
    58ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58ee:	6819      	ldr	r1, [r3, #0]
    58f0:	6808      	ldr	r0, [r1, #0]
    58f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    58f6:	f380 8809 	msr	PSP, r0
    58fa:	4770      	bx	lr

000058fc <pxCurrentTCBConst>:
    58fc:	20000848 	.word	0x20000848

00005900 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5900:	b580      	push	{r7, lr}
    5902:	b082      	sub	sp, #8
    5904:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5906:	2300      	movs	r3, #0
    5908:	607b      	str	r3, [r7, #4]
    590a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    590e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5912:	f7ff faa9 	bl	4e68 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5916:	f04f 0000 	mov.w	r0, #0
    591a:	f380 8811 	msr	BASEPRI, r0
}
    591e:	3708      	adds	r7, #8
    5920:	46bd      	mov	sp, r7
    5922:	bd80      	pop	{r7, pc}

00005924 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5924:	b480      	push	{r7}
    5926:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5928:	f24e 0314 	movw	r3, #57364	; 0xe014
    592c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5930:	f641 123f 	movw	r2, #6463	; 0x193f
    5934:	f2c0 0201 	movt	r2, #1
    5938:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    593a:	f24e 0310 	movw	r3, #57360	; 0xe010
    593e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5942:	2207      	movs	r2, #7
    5944:	601a      	str	r2, [r3, #0]
}
    5946:	46bd      	mov	sp, r7
    5948:	f85d 7b04 	ldr.w	r7, [sp], #4
    594c:	4770      	bx	lr
    594e:	0000      	.short	0x0000
    5950:	e000ed08 	.word	0xe000ed08

00005954 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5954:	b580      	push	{r7, lr}
    5956:	b08a      	sub	sp, #40	; 0x28
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    595c:	2300      	movs	r3, #0
    595e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5960:	f7ff f9a0 	bl	4ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5964:	f64a 2388 	movw	r3, #43656	; 0xaa88
    5968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d130      	bne.n	59d4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5972:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597a:	f640 2278 	movw	r2, #2680	; 0xa78
    597e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5982:	601a      	str	r2, [r3, #0]
    5984:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598c:	2200      	movs	r2, #0
    598e:	605a      	str	r2, [r3, #4]
    5990:	f64a 2380 	movw	r3, #43648	; 0xaa80
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    599c:	605a      	str	r2, [r3, #4]
    599e:	f64a 2380 	movw	r3, #43648	; 0xaa80
    59a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a6:	2200      	movs	r2, #0
    59a8:	601a      	str	r2, [r3, #0]
    59aa:	f640 2378 	movw	r3, #2680	; 0xa78
    59ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b2:	617b      	str	r3, [r7, #20]
    59b4:	697b      	ldr	r3, [r7, #20]
    59b6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    59ba:	605a      	str	r2, [r3, #4]
    59bc:	697a      	ldr	r2, [r7, #20]
    59be:	f64a 2380 	movw	r3, #43648	; 0xaa80
    59c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    59c8:	f64a 2388 	movw	r3, #43656	; 0xaa88
    59cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d0:	2201      	movs	r2, #1
    59d2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	2b00      	cmp	r3, #0
    59d8:	d00d      	beq.n	59f6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    59da:	2310      	movs	r3, #16
    59dc:	687a      	ldr	r2, [r7, #4]
    59de:	4413      	add	r3, r2
    59e0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	f003 0307 	and.w	r3, r3, #7
    59e8:	2b00      	cmp	r3, #0
    59ea:	d004      	beq.n	59f6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	f023 0307 	bic.w	r3, r3, #7
    59f2:	3308      	adds	r3, #8
    59f4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	2b00      	cmp	r3, #0
    59fa:	d068      	beq.n	5ace <pvPortMalloc+0x17a>
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5a02:	d264      	bcs.n	5ace <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5a04:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0c:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5a0e:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5a1a:	e004      	b.n	5a26 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a1e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a28:	685a      	ldr	r2, [r3, #4]
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	429a      	cmp	r2, r3
    5a2e:	d203      	bcs.n	5a38 <pvPortMalloc+0xe4>
    5a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d1f1      	bne.n	5a1c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a3a:	f64a 2380 	movw	r3, #43648	; 0xaa80
    5a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a42:	429a      	cmp	r2, r3
    5a44:	d043      	beq.n	5ace <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5a46:	6a3b      	ldr	r3, [r7, #32]
    5a48:	681a      	ldr	r2, [r3, #0]
    5a4a:	2310      	movs	r3, #16
    5a4c:	4413      	add	r3, r2
    5a4e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a52:	681a      	ldr	r2, [r3, #0]
    5a54:	6a3b      	ldr	r3, [r7, #32]
    5a56:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a5a:	685a      	ldr	r2, [r3, #4]
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	1ad2      	subs	r2, r2, r3
    5a60:	2310      	movs	r3, #16
    5a62:	005b      	lsls	r3, r3, #1
    5a64:	429a      	cmp	r2, r3
    5a66:	d925      	bls.n	5ab4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	4413      	add	r3, r2
    5a6e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a72:	685a      	ldr	r2, [r3, #4]
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	1ad2      	subs	r2, r2, r3
    5a78:	693b      	ldr	r3, [r7, #16]
    5a7a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a7e:	687a      	ldr	r2, [r7, #4]
    5a80:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5a82:	693b      	ldr	r3, [r7, #16]
    5a84:	685b      	ldr	r3, [r3, #4]
    5a86:	60fb      	str	r3, [r7, #12]
    5a88:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a90:	61bb      	str	r3, [r7, #24]
    5a92:	e002      	b.n	5a9a <pvPortMalloc+0x146>
    5a94:	69bb      	ldr	r3, [r7, #24]
    5a96:	681b      	ldr	r3, [r3, #0]
    5a98:	61bb      	str	r3, [r7, #24]
    5a9a:	69bb      	ldr	r3, [r7, #24]
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	685a      	ldr	r2, [r3, #4]
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	429a      	cmp	r2, r3
    5aa4:	d3f6      	bcc.n	5a94 <pvPortMalloc+0x140>
    5aa6:	69bb      	ldr	r3, [r7, #24]
    5aa8:	681a      	ldr	r2, [r3, #0]
    5aaa:	693b      	ldr	r3, [r7, #16]
    5aac:	601a      	str	r2, [r3, #0]
    5aae:	69bb      	ldr	r3, [r7, #24]
    5ab0:	693a      	ldr	r2, [r7, #16]
    5ab2:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5ab4:	f240 237c 	movw	r3, #636	; 0x27c
    5ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5abc:	681a      	ldr	r2, [r3, #0]
    5abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ac0:	685b      	ldr	r3, [r3, #4]
    5ac2:	1ad2      	subs	r2, r2, r3
    5ac4:	f240 237c 	movw	r3, #636	; 0x27c
    5ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5acc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5ace:	f7ff f8fb 	bl	4cc8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5ad2:	69fb      	ldr	r3, [r7, #28]
}
    5ad4:	4618      	mov	r0, r3
    5ad6:	3728      	adds	r7, #40	; 0x28
    5ad8:	46bd      	mov	sp, r7
    5ada:	bd80      	pop	{r7, pc}

00005adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b086      	sub	sp, #24
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d030      	beq.n	5b50 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5aee:	2310      	movs	r3, #16
    5af0:	425b      	negs	r3, r3
    5af2:	693a      	ldr	r2, [r7, #16]
    5af4:	4413      	add	r3, r2
    5af6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5af8:	693b      	ldr	r3, [r7, #16]
    5afa:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5afc:	f7ff f8d2 	bl	4ca4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	685b      	ldr	r3, [r3, #4]
    5b04:	60bb      	str	r3, [r7, #8]
    5b06:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0e:	617b      	str	r3, [r7, #20]
    5b10:	e002      	b.n	5b18 <vPortFree+0x3c>
    5b12:	697b      	ldr	r3, [r7, #20]
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	617b      	str	r3, [r7, #20]
    5b18:	697b      	ldr	r3, [r7, #20]
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	685a      	ldr	r2, [r3, #4]
    5b1e:	68bb      	ldr	r3, [r7, #8]
    5b20:	429a      	cmp	r2, r3
    5b22:	d3f6      	bcc.n	5b12 <vPortFree+0x36>
    5b24:	697b      	ldr	r3, [r7, #20]
    5b26:	681a      	ldr	r2, [r3, #0]
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	601a      	str	r2, [r3, #0]
    5b2c:	697b      	ldr	r3, [r7, #20]
    5b2e:	68fa      	ldr	r2, [r7, #12]
    5b30:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5b32:	68fb      	ldr	r3, [r7, #12]
    5b34:	685a      	ldr	r2, [r3, #4]
    5b36:	f240 237c 	movw	r3, #636	; 0x27c
    5b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	441a      	add	r2, r3
    5b42:	f240 237c 	movw	r3, #636	; 0x27c
    5b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5b4c:	f7ff f8bc 	bl	4cc8 <xTaskResumeAll>
	}
}
    5b50:	3718      	adds	r7, #24
    5b52:	46bd      	mov	sp, r7
    5b54:	bd80      	pop	{r7, pc}
    5b56:	bf00      	nop

00005b58 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5b58:	b480      	push	{r7}
    5b5a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5b5c:	f240 237c 	movw	r3, #636	; 0x27c
    5b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b64:	681b      	ldr	r3, [r3, #0]
}
    5b66:	4618      	mov	r0, r3
    5b68:	46bd      	mov	sp, r7
    5b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6e:	4770      	bx	lr

00005b70 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5b70:	b480      	push	{r7}
    5b72:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5b74:	46bd      	mov	sp, r7
    5b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b7a:	4770      	bx	lr
    5b7c:	0000      	movs	r0, r0
	...

00005b80 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5b80:	b580      	push	{r7, lr}
    5b82:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5b84:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	f040 815d 	bne.w	5e4e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5b94:	f64a 2392 	movw	r3, #43666	; 0xaa92
    5b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9c:	881b      	ldrh	r3, [r3, #0]
    5b9e:	2b09      	cmp	r3, #9
    5ba0:	f201 8145 	bhi.w	6e2e <ground_calibrate+0x12ae>
    5ba4:	f64a 2394 	movw	r3, #43668	; 0xaa94
    5ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	2b01      	cmp	r3, #1
    5bb0:	f041 813d 	bne.w	6e2e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5bb4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bbc:	2201      	movs	r2, #1
    5bbe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5bc0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc8:	781a      	ldrb	r2, [r3, #0]
    5bca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd2:	781b      	ldrb	r3, [r3, #0]
    5bd4:	b2db      	uxtb	r3, r3
    5bd6:	429a      	cmp	r2, r3
    5bd8:	d313      	bcc.n	5c02 <ground_calibrate+0x82>
    5bda:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	b2db      	uxtb	r3, r3
    5be6:	461a      	mov	r2, r3
    5be8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	1ad3      	subs	r3, r2, r3
    5bf4:	33ff      	adds	r3, #255	; 0xff
    5bf6:	2b04      	cmp	r3, #4
    5bf8:	bfd4      	ite	le
    5bfa:	2300      	movle	r3, #0
    5bfc:	2301      	movgt	r3, #1
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	e011      	b.n	5c26 <ground_calibrate+0xa6>
    5c02:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c0a:	781b      	ldrb	r3, [r3, #0]
    5c0c:	b2db      	uxtb	r3, r3
    5c0e:	461a      	mov	r2, r3
    5c10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	1ad3      	subs	r3, r2, r3
    5c1c:	2b04      	cmp	r3, #4
    5c1e:	bfd4      	ite	le
    5c20:	2300      	movle	r3, #0
    5c22:	2301      	movgt	r3, #1
    5c24:	b2db      	uxtb	r3, r3
    5c26:	2b00      	cmp	r3, #0
    5c28:	f000 8103 	beq.w	5e32 <ground_calibrate+0x2b2>
    5c2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	461a      	mov	r2, r3
    5c38:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c40:	2105      	movs	r1, #5
    5c42:	5499      	strb	r1, [r3, r2]
    5c44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4c:	781b      	ldrb	r3, [r3, #0]
    5c4e:	3301      	adds	r3, #1
    5c50:	b2da      	uxtb	r2, r3
    5c52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5a:	701a      	strb	r2, [r3, #0]
    5c5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c64:	781b      	ldrb	r3, [r3, #0]
    5c66:	2bff      	cmp	r3, #255	; 0xff
    5c68:	d105      	bne.n	5c76 <ground_calibrate+0xf6>
    5c6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c72:	2200      	movs	r2, #0
    5c74:	701a      	strb	r2, [r3, #0]
    5c76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c7e:	781b      	ldrb	r3, [r3, #0]
    5c80:	461a      	mov	r2, r3
    5c82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8a:	2102      	movs	r1, #2
    5c8c:	5499      	strb	r1, [r3, r2]
    5c8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c96:	781b      	ldrb	r3, [r3, #0]
    5c98:	3301      	adds	r3, #1
    5c9a:	b2da      	uxtb	r2, r3
    5c9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca4:	701a      	strb	r2, [r3, #0]
    5ca6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cae:	781b      	ldrb	r3, [r3, #0]
    5cb0:	2bff      	cmp	r3, #255	; 0xff
    5cb2:	d105      	bne.n	5cc0 <ground_calibrate+0x140>
    5cb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cbc:	2200      	movs	r2, #0
    5cbe:	701a      	strb	r2, [r3, #0]
    5cc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc8:	2202      	movs	r2, #2
    5cca:	701a      	strb	r2, [r3, #0]
    5ccc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd4:	2202      	movs	r2, #2
    5cd6:	701a      	strb	r2, [r3, #0]
    5cd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce0:	781b      	ldrb	r3, [r3, #0]
    5ce2:	461a      	mov	r2, r3
    5ce4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cec:	7819      	ldrb	r1, [r3, #0]
    5cee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf6:	5499      	strb	r1, [r3, r2]
    5cf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d00:	781b      	ldrb	r3, [r3, #0]
    5d02:	3301      	adds	r3, #1
    5d04:	b2da      	uxtb	r2, r3
    5d06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d0e:	701a      	strb	r2, [r3, #0]
    5d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d18:	781b      	ldrb	r3, [r3, #0]
    5d1a:	2bff      	cmp	r3, #255	; 0xff
    5d1c:	d105      	bne.n	5d2a <ground_calibrate+0x1aa>
    5d1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	2200      	movs	r2, #0
    5d28:	701a      	strb	r2, [r3, #0]
    5d2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	461a      	mov	r2, r3
    5d36:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3e:	7819      	ldrb	r1, [r3, #0]
    5d40:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d48:	5499      	strb	r1, [r3, r2]
    5d4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	3301      	adds	r3, #1
    5d56:	b2da      	uxtb	r2, r3
    5d58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d60:	701a      	strb	r2, [r3, #0]
    5d62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d6a:	781b      	ldrb	r3, [r3, #0]
    5d6c:	2bff      	cmp	r3, #255	; 0xff
    5d6e:	d105      	bne.n	5d7c <ground_calibrate+0x1fc>
    5d70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d78:	2200      	movs	r2, #0
    5d7a:	701a      	strb	r2, [r3, #0]
    5d7c:	f242 0339 	movw	r3, #8249	; 0x2039
    5d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	b2db      	uxtb	r3, r3
    5d88:	f003 0310 	and.w	r3, r3, #16
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	f041 804e 	bne.w	6e2e <ground_calibrate+0x12ae>
    5d92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	461a      	mov	r2, r3
    5da0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da8:	5c9a      	ldrb	r2, [r3, r2]
    5daa:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    5dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db2:	701a      	strb	r2, [r3, #0]
    5db4:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    5db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dbc:	2200      	movs	r2, #0
    5dbe:	701a      	strb	r2, [r3, #0]
    5dc0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	b2db      	uxtb	r3, r3
    5dcc:	3301      	adds	r3, #1
    5dce:	b2da      	uxtb	r2, r3
    5dd0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd8:	701a      	strb	r2, [r3, #0]
    5dda:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de2:	781b      	ldrb	r3, [r3, #0]
    5de4:	b2db      	uxtb	r3, r3
    5de6:	2bff      	cmp	r3, #255	; 0xff
    5de8:	d105      	bne.n	5df6 <ground_calibrate+0x276>
    5dea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	2200      	movs	r2, #0
    5df4:	701a      	strb	r2, [r3, #0]
    5df6:	f242 0338 	movw	r3, #8248	; 0x2038
    5dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfe:	f242 0238 	movw	r2, #8248	; 0x2038
    5e02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e06:	7812      	ldrb	r2, [r2, #0]
    5e08:	b2d2      	uxtb	r2, r2
    5e0a:	f042 0201 	orr.w	r2, r2, #1
    5e0e:	b2d2      	uxtb	r2, r2
    5e10:	701a      	strb	r2, [r3, #0]
    5e12:	f242 0339 	movw	r3, #8249	; 0x2039
    5e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e1a:	f242 0239 	movw	r2, #8249	; 0x2039
    5e1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e22:	7812      	ldrb	r2, [r2, #0]
    5e24:	b2d2      	uxtb	r2, r2
    5e26:	f042 0210 	orr.w	r2, r2, #16
    5e2a:	b2d2      	uxtb	r2, r2
    5e2c:	701a      	strb	r2, [r3, #0]
    5e2e:	f000 bffe 	b.w	6e2e <ground_calibrate+0x12ae>
    5e32:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3a:	781b      	ldrb	r3, [r3, #0]
    5e3c:	3301      	adds	r3, #1
    5e3e:	b2da      	uxtb	r2, r3
    5e40:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	701a      	strb	r2, [r3, #0]
    5e4a:	f000 bff0 	b.w	6e2e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5e4e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e56:	781b      	ldrb	r3, [r3, #0]
    5e58:	2b01      	cmp	r3, #1
    5e5a:	f040 87e8 	bne.w	6e2e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5e5e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e66:	885b      	ldrh	r3, [r3, #2]
    5e68:	b21b      	sxth	r3, r3
    5e6a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5e6e:	db09      	blt.n	5e84 <ground_calibrate+0x304>
    5e70:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e78:	885b      	ldrh	r3, [r3, #2]
    5e7a:	b21b      	sxth	r3, r3
    5e7c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5e80:	f340 87d5 	ble.w	6e2e <ground_calibrate+0x12ae>
      ir_gain_calib();
    5e84:	f00b fcfc 	bl	11880 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5e88:	f240 238c 	movw	r3, #652	; 0x28c
    5e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e90:	681a      	ldr	r2, [r3, #0]
    5e92:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    5e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5e9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea4:	781a      	ldrb	r2, [r3, #0]
    5ea6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eae:	781b      	ldrb	r3, [r3, #0]
    5eb0:	b2db      	uxtb	r3, r3
    5eb2:	429a      	cmp	r2, r3
    5eb4:	d313      	bcc.n	5ede <ground_calibrate+0x35e>
    5eb6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	461a      	mov	r2, r3
    5ec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	1ad3      	subs	r3, r2, r3
    5ed0:	33ff      	adds	r3, #255	; 0xff
    5ed2:	2b14      	cmp	r3, #20
    5ed4:	bfd4      	ite	le
    5ed6:	2300      	movle	r3, #0
    5ed8:	2301      	movgt	r3, #1
    5eda:	b2db      	uxtb	r3, r3
    5edc:	e011      	b.n	5f02 <ground_calibrate+0x382>
    5ede:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee6:	781b      	ldrb	r3, [r3, #0]
    5ee8:	b2db      	uxtb	r3, r3
    5eea:	461a      	mov	r2, r3
    5eec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef4:	781b      	ldrb	r3, [r3, #0]
    5ef6:	1ad3      	subs	r3, r2, r3
    5ef8:	2b14      	cmp	r3, #20
    5efa:	bfd4      	ite	le
    5efc:	2300      	movle	r3, #0
    5efe:	2301      	movgt	r3, #1
    5f00:	b2db      	uxtb	r3, r3
    5f02:	2b00      	cmp	r3, #0
    5f04:	f000 85a6 	beq.w	6a54 <ground_calibrate+0xed4>
    5f08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	461a      	mov	r2, r3
    5f14:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1c:	2105      	movs	r1, #5
    5f1e:	5499      	strb	r1, [r3, r2]
    5f20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f28:	781b      	ldrb	r3, [r3, #0]
    5f2a:	3301      	adds	r3, #1
    5f2c:	b2da      	uxtb	r2, r3
    5f2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f36:	701a      	strb	r2, [r3, #0]
    5f38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f40:	781b      	ldrb	r3, [r3, #0]
    5f42:	2bff      	cmp	r3, #255	; 0xff
    5f44:	d105      	bne.n	5f52 <ground_calibrate+0x3d2>
    5f46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4e:	2200      	movs	r2, #0
    5f50:	701a      	strb	r2, [r3, #0]
    5f52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5a:	781b      	ldrb	r3, [r3, #0]
    5f5c:	461a      	mov	r2, r3
    5f5e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f66:	2105      	movs	r1, #5
    5f68:	5499      	strb	r1, [r3, r2]
    5f6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	3301      	adds	r3, #1
    5f76:	b2da      	uxtb	r2, r3
    5f78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f80:	701a      	strb	r2, [r3, #0]
    5f82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8a:	781b      	ldrb	r3, [r3, #0]
    5f8c:	2bff      	cmp	r3, #255	; 0xff
    5f8e:	d105      	bne.n	5f9c <ground_calibrate+0x41c>
    5f90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f98:	2200      	movs	r2, #0
    5f9a:	701a      	strb	r2, [r3, #0]
    5f9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa4:	2205      	movs	r2, #5
    5fa6:	701a      	strb	r2, [r3, #0]
    5fa8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb0:	2205      	movs	r2, #5
    5fb2:	701a      	strb	r2, [r3, #0]
    5fb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fbc:	781b      	ldrb	r3, [r3, #0]
    5fbe:	461a      	mov	r2, r3
    5fc0:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc8:	7819      	ldrb	r1, [r3, #0]
    5fca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd2:	5499      	strb	r1, [r3, r2]
    5fd4:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	781a      	ldrb	r2, [r3, #0]
    5fde:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	4413      	add	r3, r2
    5fea:	b2da      	uxtb	r2, r3
    5fec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff4:	701a      	strb	r2, [r3, #0]
    5ff6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ffe:	781a      	ldrb	r2, [r3, #0]
    6000:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	4413      	add	r3, r2
    600c:	b2da      	uxtb	r2, r3
    600e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6016:	701a      	strb	r2, [r3, #0]
    6018:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	3301      	adds	r3, #1
    6024:	b2da      	uxtb	r2, r3
    6026:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602e:	701a      	strb	r2, [r3, #0]
    6030:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6038:	781b      	ldrb	r3, [r3, #0]
    603a:	2bff      	cmp	r3, #255	; 0xff
    603c:	d105      	bne.n	604a <ground_calibrate+0x4ca>
    603e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6046:	2200      	movs	r2, #0
    6048:	701a      	strb	r2, [r3, #0]
    604a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    604e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	461a      	mov	r2, r3
    6056:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605e:	7859      	ldrb	r1, [r3, #1]
    6060:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	5499      	strb	r1, [r3, r2]
    606a:	4bd2      	ldr	r3, [pc, #840]	; (63b4 <ground_calibrate+0x834>)
    606c:	781a      	ldrb	r2, [r3, #0]
    606e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	4413      	add	r3, r2
    607a:	b2da      	uxtb	r2, r3
    607c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6084:	701a      	strb	r2, [r3, #0]
    6086:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608e:	781a      	ldrb	r2, [r3, #0]
    6090:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	4413      	add	r3, r2
    609c:	b2da      	uxtb	r2, r3
    609e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    60a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b0:	781b      	ldrb	r3, [r3, #0]
    60b2:	3301      	adds	r3, #1
    60b4:	b2da      	uxtb	r2, r3
    60b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60be:	701a      	strb	r2, [r3, #0]
    60c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	2bff      	cmp	r3, #255	; 0xff
    60cc:	d105      	bne.n	60da <ground_calibrate+0x55a>
    60ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d6:	2200      	movs	r2, #0
    60d8:	701a      	strb	r2, [r3, #0]
    60da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	461a      	mov	r2, r3
    60e6:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	7899      	ldrb	r1, [r3, #2]
    60f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    60f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f8:	5499      	strb	r1, [r3, r2]
    60fa:	4baf      	ldr	r3, [pc, #700]	; (63b8 <ground_calibrate+0x838>)
    60fc:	781a      	ldrb	r2, [r3, #0]
    60fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	781b      	ldrb	r3, [r3, #0]
    6108:	4413      	add	r3, r2
    610a:	b2da      	uxtb	r2, r3
    610c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	701a      	strb	r2, [r3, #0]
    6116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	781a      	ldrb	r2, [r3, #0]
    6120:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	4413      	add	r3, r2
    612c:	b2da      	uxtb	r2, r3
    612e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	701a      	strb	r2, [r3, #0]
    6138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    613c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	3301      	adds	r3, #1
    6144:	b2da      	uxtb	r2, r3
    6146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	701a      	strb	r2, [r3, #0]
    6150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	2bff      	cmp	r3, #255	; 0xff
    615c:	d105      	bne.n	616a <ground_calibrate+0x5ea>
    615e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6166:	2200      	movs	r2, #0
    6168:	701a      	strb	r2, [r3, #0]
    616a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    616e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6172:	781b      	ldrb	r3, [r3, #0]
    6174:	461a      	mov	r2, r3
    6176:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    617a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617e:	78d9      	ldrb	r1, [r3, #3]
    6180:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6188:	5499      	strb	r1, [r3, r2]
    618a:	4b8c      	ldr	r3, [pc, #560]	; (63bc <ground_calibrate+0x83c>)
    618c:	781a      	ldrb	r2, [r3, #0]
    618e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	4413      	add	r3, r2
    619a:	b2da      	uxtb	r2, r3
    619c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    61a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a4:	701a      	strb	r2, [r3, #0]
    61a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    61aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ae:	781a      	ldrb	r2, [r3, #0]
    61b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    61b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	4413      	add	r3, r2
    61bc:	b2da      	uxtb	r2, r3
    61be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    61c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c6:	701a      	strb	r2, [r3, #0]
    61c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d0:	781b      	ldrb	r3, [r3, #0]
    61d2:	3301      	adds	r3, #1
    61d4:	b2da      	uxtb	r2, r3
    61d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61de:	701a      	strb	r2, [r3, #0]
    61e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2bff      	cmp	r3, #255	; 0xff
    61ec:	d105      	bne.n	61fa <ground_calibrate+0x67a>
    61ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f6:	2200      	movs	r2, #0
    61f8:	701a      	strb	r2, [r3, #0]
    61fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6202:	781b      	ldrb	r3, [r3, #0]
    6204:	461a      	mov	r2, r3
    6206:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    620a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    620e:	7819      	ldrb	r1, [r3, #0]
    6210:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6218:	5499      	strb	r1, [r3, r2]
    621a:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    621e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6222:	781a      	ldrb	r2, [r3, #0]
    6224:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622c:	781b      	ldrb	r3, [r3, #0]
    622e:	4413      	add	r3, r2
    6230:	b2da      	uxtb	r2, r3
    6232:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623a:	701a      	strb	r2, [r3, #0]
    623c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6244:	781a      	ldrb	r2, [r3, #0]
    6246:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    624a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	4413      	add	r3, r2
    6252:	b2da      	uxtb	r2, r3
    6254:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	701a      	strb	r2, [r3, #0]
    625e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6266:	781b      	ldrb	r3, [r3, #0]
    6268:	3301      	adds	r3, #1
    626a:	b2da      	uxtb	r2, r3
    626c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6274:	701a      	strb	r2, [r3, #0]
    6276:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    627a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	2bff      	cmp	r3, #255	; 0xff
    6282:	d105      	bne.n	6290 <ground_calibrate+0x710>
    6284:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    628c:	2200      	movs	r2, #0
    628e:	701a      	strb	r2, [r3, #0]
    6290:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6298:	781b      	ldrb	r3, [r3, #0]
    629a:	461a      	mov	r2, r3
    629c:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    62a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a4:	7859      	ldrb	r1, [r3, #1]
    62a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    62aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ae:	5499      	strb	r1, [r3, r2]
    62b0:	4b43      	ldr	r3, [pc, #268]	; (63c0 <ground_calibrate+0x840>)
    62b2:	781a      	ldrb	r2, [r3, #0]
    62b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	781b      	ldrb	r3, [r3, #0]
    62be:	4413      	add	r3, r2
    62c0:	b2da      	uxtb	r2, r3
    62c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ca:	701a      	strb	r2, [r3, #0]
    62cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	781a      	ldrb	r2, [r3, #0]
    62d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	4413      	add	r3, r2
    62e2:	b2da      	uxtb	r2, r3
    62e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	781b      	ldrb	r3, [r3, #0]
    62f8:	3301      	adds	r3, #1
    62fa:	b2da      	uxtb	r2, r3
    62fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6304:	701a      	strb	r2, [r3, #0]
    6306:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    630a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	2bff      	cmp	r3, #255	; 0xff
    6312:	d105      	bne.n	6320 <ground_calibrate+0x7a0>
    6314:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631c:	2200      	movs	r2, #0
    631e:	701a      	strb	r2, [r3, #0]
    6320:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	461a      	mov	r2, r3
    632c:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6334:	7899      	ldrb	r1, [r3, #2]
    6336:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	5499      	strb	r1, [r3, r2]
    6340:	4b20      	ldr	r3, [pc, #128]	; (63c4 <ground_calibrate+0x844>)
    6342:	781a      	ldrb	r2, [r3, #0]
    6344:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	4413      	add	r3, r2
    6350:	b2da      	uxtb	r2, r3
    6352:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	701a      	strb	r2, [r3, #0]
    635c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6364:	781a      	ldrb	r2, [r3, #0]
    6366:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    636a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636e:	781b      	ldrb	r3, [r3, #0]
    6370:	4413      	add	r3, r2
    6372:	b2da      	uxtb	r2, r3
    6374:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637c:	701a      	strb	r2, [r3, #0]
    637e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	3301      	adds	r3, #1
    638a:	b2da      	uxtb	r2, r3
    638c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6394:	701a      	strb	r2, [r3, #0]
    6396:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	2bff      	cmp	r3, #255	; 0xff
    63a2:	d111      	bne.n	63c8 <ground_calibrate+0x848>
    63a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ac:	2200      	movs	r2, #0
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	e00a      	b.n	63c8 <ground_calibrate+0x848>
    63b2:	bf00      	nop
    63b4:	2000b0a9 	.word	0x2000b0a9
    63b8:	2000b0aa 	.word	0x2000b0aa
    63bc:	2000b0ab 	.word	0x2000b0ab
    63c0:	2000b0ad 	.word	0x2000b0ad
    63c4:	2000b0ae 	.word	0x2000b0ae
    63c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	461a      	mov	r2, r3
    63d4:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    63d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63dc:	78d9      	ldrb	r1, [r3, #3]
    63de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    63e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e6:	5499      	strb	r1, [r3, r2]
    63e8:	4bd3      	ldr	r3, [pc, #844]	; (6738 <ground_calibrate+0xbb8>)
    63ea:	781a      	ldrb	r2, [r3, #0]
    63ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	4413      	add	r3, r2
    63f8:	b2da      	uxtb	r2, r3
    63fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6402:	701a      	strb	r2, [r3, #0]
    6404:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    640c:	781a      	ldrb	r2, [r3, #0]
    640e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6416:	781b      	ldrb	r3, [r3, #0]
    6418:	4413      	add	r3, r2
    641a:	b2da      	uxtb	r2, r3
    641c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6424:	701a      	strb	r2, [r3, #0]
    6426:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    642a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642e:	781b      	ldrb	r3, [r3, #0]
    6430:	3301      	adds	r3, #1
    6432:	b2da      	uxtb	r2, r3
    6434:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    643c:	701a      	strb	r2, [r3, #0]
    643e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6446:	781b      	ldrb	r3, [r3, #0]
    6448:	2bff      	cmp	r3, #255	; 0xff
    644a:	d105      	bne.n	6458 <ground_calibrate+0x8d8>
    644c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6454:	2200      	movs	r2, #0
    6456:	701a      	strb	r2, [r3, #0]
    6458:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    645c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	461a      	mov	r2, r3
    6464:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    646c:	7819      	ldrb	r1, [r3, #0]
    646e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6476:	5499      	strb	r1, [r3, r2]
    6478:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    647c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6480:	781a      	ldrb	r2, [r3, #0]
    6482:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	4413      	add	r3, r2
    648e:	b2da      	uxtb	r2, r3
    6490:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6498:	701a      	strb	r2, [r3, #0]
    649a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	781a      	ldrb	r2, [r3, #0]
    64a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    64a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ac:	781b      	ldrb	r3, [r3, #0]
    64ae:	4413      	add	r3, r2
    64b0:	b2da      	uxtb	r2, r3
    64b2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    64b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ba:	701a      	strb	r2, [r3, #0]
    64bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	3301      	adds	r3, #1
    64c8:	b2da      	uxtb	r2, r3
    64ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d2:	701a      	strb	r2, [r3, #0]
    64d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	2bff      	cmp	r3, #255	; 0xff
    64e0:	d105      	bne.n	64ee <ground_calibrate+0x96e>
    64e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ea:	2200      	movs	r2, #0
    64ec:	701a      	strb	r2, [r3, #0]
    64ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	461a      	mov	r2, r3
    64fa:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    64fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6502:	7859      	ldrb	r1, [r3, #1]
    6504:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650c:	5499      	strb	r1, [r3, r2]
    650e:	4b8b      	ldr	r3, [pc, #556]	; (673c <ground_calibrate+0xbbc>)
    6510:	781a      	ldrb	r2, [r3, #0]
    6512:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651a:	781b      	ldrb	r3, [r3, #0]
    651c:	4413      	add	r3, r2
    651e:	b2da      	uxtb	r2, r3
    6520:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6528:	701a      	strb	r2, [r3, #0]
    652a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    652e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6532:	781a      	ldrb	r2, [r3, #0]
    6534:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653c:	781b      	ldrb	r3, [r3, #0]
    653e:	4413      	add	r3, r2
    6540:	b2da      	uxtb	r2, r3
    6542:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654a:	701a      	strb	r2, [r3, #0]
    654c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	3301      	adds	r3, #1
    6558:	b2da      	uxtb	r2, r3
    655a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    655e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6562:	701a      	strb	r2, [r3, #0]
    6564:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	2bff      	cmp	r3, #255	; 0xff
    6570:	d105      	bne.n	657e <ground_calibrate+0x9fe>
    6572:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657a:	2200      	movs	r2, #0
    657c:	701a      	strb	r2, [r3, #0]
    657e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6586:	781b      	ldrb	r3, [r3, #0]
    6588:	461a      	mov	r2, r3
    658a:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    658e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6592:	7899      	ldrb	r1, [r3, #2]
    6594:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659c:	5499      	strb	r1, [r3, r2]
    659e:	4b68      	ldr	r3, [pc, #416]	; (6740 <ground_calibrate+0xbc0>)
    65a0:	781a      	ldrb	r2, [r3, #0]
    65a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	4413      	add	r3, r2
    65ae:	b2da      	uxtb	r2, r3
    65b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b8:	701a      	strb	r2, [r3, #0]
    65ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    65be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c2:	781a      	ldrb	r2, [r3, #0]
    65c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65cc:	781b      	ldrb	r3, [r3, #0]
    65ce:	4413      	add	r3, r2
    65d0:	b2da      	uxtb	r2, r3
    65d2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    65d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65da:	701a      	strb	r2, [r3, #0]
    65dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e4:	781b      	ldrb	r3, [r3, #0]
    65e6:	3301      	adds	r3, #1
    65e8:	b2da      	uxtb	r2, r3
    65ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f2:	701a      	strb	r2, [r3, #0]
    65f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	2bff      	cmp	r3, #255	; 0xff
    6600:	d105      	bne.n	660e <ground_calibrate+0xa8e>
    6602:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660a:	2200      	movs	r2, #0
    660c:	701a      	strb	r2, [r3, #0]
    660e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6616:	781b      	ldrb	r3, [r3, #0]
    6618:	461a      	mov	r2, r3
    661a:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    661e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6622:	78d9      	ldrb	r1, [r3, #3]
    6624:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662c:	5499      	strb	r1, [r3, r2]
    662e:	4b45      	ldr	r3, [pc, #276]	; (6744 <ground_calibrate+0xbc4>)
    6630:	781a      	ldrb	r2, [r3, #0]
    6632:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	4413      	add	r3, r2
    663e:	b2da      	uxtb	r2, r3
    6640:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6648:	701a      	strb	r2, [r3, #0]
    664a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    664e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6652:	781a      	ldrb	r2, [r3, #0]
    6654:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	4413      	add	r3, r2
    6660:	b2da      	uxtb	r2, r3
    6662:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    666a:	701a      	strb	r2, [r3, #0]
    666c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	3301      	adds	r3, #1
    6678:	b2da      	uxtb	r2, r3
    667a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    667e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6682:	701a      	strb	r2, [r3, #0]
    6684:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	2bff      	cmp	r3, #255	; 0xff
    6690:	d105      	bne.n	669e <ground_calibrate+0xb1e>
    6692:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    669a:	2200      	movs	r2, #0
    669c:	701a      	strb	r2, [r3, #0]
    669e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	461a      	mov	r2, r3
    66aa:	f240 2386 	movw	r3, #646	; 0x286
    66ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b2:	7819      	ldrb	r1, [r3, #0]
    66b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    66b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66bc:	5499      	strb	r1, [r3, r2]
    66be:	f240 2386 	movw	r3, #646	; 0x286
    66c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c6:	781a      	ldrb	r2, [r3, #0]
    66c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d0:	781b      	ldrb	r3, [r3, #0]
    66d2:	4413      	add	r3, r2
    66d4:	b2da      	uxtb	r2, r3
    66d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66de:	701a      	strb	r2, [r3, #0]
    66e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    66e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e8:	781a      	ldrb	r2, [r3, #0]
    66ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	4413      	add	r3, r2
    66f6:	b2da      	uxtb	r2, r3
    66f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    66fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6700:	701a      	strb	r2, [r3, #0]
    6702:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670a:	781b      	ldrb	r3, [r3, #0]
    670c:	3301      	adds	r3, #1
    670e:	b2da      	uxtb	r2, r3
    6710:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6718:	701a      	strb	r2, [r3, #0]
    671a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    671e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	2bff      	cmp	r3, #255	; 0xff
    6726:	d10f      	bne.n	6748 <ground_calibrate+0xbc8>
    6728:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    672c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6730:	2200      	movs	r2, #0
    6732:	701a      	strb	r2, [r3, #0]
    6734:	e008      	b.n	6748 <ground_calibrate+0xbc8>
    6736:	bf00      	nop
    6738:	2000b0af 	.word	0x2000b0af
    673c:	2000b0a5 	.word	0x2000b0a5
    6740:	2000b0a6 	.word	0x2000b0a6
    6744:	2000b0a7 	.word	0x2000b0a7
    6748:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    674c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6750:	781b      	ldrb	r3, [r3, #0]
    6752:	461a      	mov	r2, r3
    6754:	f240 2386 	movw	r3, #646	; 0x286
    6758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675c:	7859      	ldrb	r1, [r3, #1]
    675e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6766:	5499      	strb	r1, [r3, r2]
    6768:	4bd4      	ldr	r3, [pc, #848]	; (6abc <ground_calibrate+0xf3c>)
    676a:	781a      	ldrb	r2, [r3, #0]
    676c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6774:	781b      	ldrb	r3, [r3, #0]
    6776:	4413      	add	r3, r2
    6778:	b2da      	uxtb	r2, r3
    677a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    677e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6782:	701a      	strb	r2, [r3, #0]
    6784:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678c:	781a      	ldrb	r2, [r3, #0]
    678e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	4413      	add	r3, r2
    679a:	b2da      	uxtb	r2, r3
    679c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    67a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a4:	701a      	strb	r2, [r3, #0]
    67a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ae:	781b      	ldrb	r3, [r3, #0]
    67b0:	3301      	adds	r3, #1
    67b2:	b2da      	uxtb	r2, r3
    67b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67bc:	701a      	strb	r2, [r3, #0]
    67be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	2bff      	cmp	r3, #255	; 0xff
    67ca:	d105      	bne.n	67d8 <ground_calibrate+0xc58>
    67cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d4:	2200      	movs	r2, #0
    67d6:	701a      	strb	r2, [r3, #0]
    67d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e0:	781b      	ldrb	r3, [r3, #0]
    67e2:	461a      	mov	r2, r3
    67e4:	f240 2388 	movw	r3, #648	; 0x288
    67e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ec:	7819      	ldrb	r1, [r3, #0]
    67ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    67f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f6:	5499      	strb	r1, [r3, r2]
    67f8:	f240 2388 	movw	r3, #648	; 0x288
    67fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6800:	781a      	ldrb	r2, [r3, #0]
    6802:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680a:	781b      	ldrb	r3, [r3, #0]
    680c:	4413      	add	r3, r2
    680e:	b2da      	uxtb	r2, r3
    6810:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6818:	701a      	strb	r2, [r3, #0]
    681a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    681e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6822:	781a      	ldrb	r2, [r3, #0]
    6824:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	4413      	add	r3, r2
    6830:	b2da      	uxtb	r2, r3
    6832:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683a:	701a      	strb	r2, [r3, #0]
    683c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	3301      	adds	r3, #1
    6848:	b2da      	uxtb	r2, r3
    684a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    684e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6852:	701a      	strb	r2, [r3, #0]
    6854:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685c:	781b      	ldrb	r3, [r3, #0]
    685e:	2bff      	cmp	r3, #255	; 0xff
    6860:	d105      	bne.n	686e <ground_calibrate+0xcee>
    6862:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686a:	2200      	movs	r2, #0
    686c:	701a      	strb	r2, [r3, #0]
    686e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	461a      	mov	r2, r3
    687a:	f240 2388 	movw	r3, #648	; 0x288
    687e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6882:	7859      	ldrb	r1, [r3, #1]
    6884:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688c:	5499      	strb	r1, [r3, r2]
    688e:	4b8c      	ldr	r3, [pc, #560]	; (6ac0 <ground_calibrate+0xf40>)
    6890:	781a      	ldrb	r2, [r3, #0]
    6892:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689a:	781b      	ldrb	r3, [r3, #0]
    689c:	4413      	add	r3, r2
    689e:	b2da      	uxtb	r2, r3
    68a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    68a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a8:	701a      	strb	r2, [r3, #0]
    68aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    68ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b2:	781a      	ldrb	r2, [r3, #0]
    68b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    68b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68bc:	781b      	ldrb	r3, [r3, #0]
    68be:	4413      	add	r3, r2
    68c0:	b2da      	uxtb	r2, r3
    68c2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    68c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ca:	701a      	strb	r2, [r3, #0]
    68cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	3301      	adds	r3, #1
    68d8:	b2da      	uxtb	r2, r3
    68da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e2:	701a      	strb	r2, [r3, #0]
    68e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ec:	781b      	ldrb	r3, [r3, #0]
    68ee:	2bff      	cmp	r3, #255	; 0xff
    68f0:	d105      	bne.n	68fe <ground_calibrate+0xd7e>
    68f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fa:	2200      	movs	r2, #0
    68fc:	701a      	strb	r2, [r3, #0]
    68fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	461a      	mov	r2, r3
    690a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    690e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6912:	7819      	ldrb	r1, [r3, #0]
    6914:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    691c:	5499      	strb	r1, [r3, r2]
    691e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	3301      	adds	r3, #1
    692a:	b2da      	uxtb	r2, r3
    692c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6934:	701a      	strb	r2, [r3, #0]
    6936:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693e:	781b      	ldrb	r3, [r3, #0]
    6940:	2bff      	cmp	r3, #255	; 0xff
    6942:	d105      	bne.n	6950 <ground_calibrate+0xdd0>
    6944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694c:	2200      	movs	r2, #0
    694e:	701a      	strb	r2, [r3, #0]
    6950:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	461a      	mov	r2, r3
    695c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6964:	7819      	ldrb	r1, [r3, #0]
    6966:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    696a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696e:	5499      	strb	r1, [r3, r2]
    6970:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6978:	781b      	ldrb	r3, [r3, #0]
    697a:	3301      	adds	r3, #1
    697c:	b2da      	uxtb	r2, r3
    697e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6986:	701a      	strb	r2, [r3, #0]
    6988:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    698c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	2bff      	cmp	r3, #255	; 0xff
    6994:	d105      	bne.n	69a2 <ground_calibrate+0xe22>
    6996:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    699a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699e:	2200      	movs	r2, #0
    69a0:	701a      	strb	r2, [r3, #0]
    69a2:	f242 0339 	movw	r3, #8249	; 0x2039
    69a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69aa:	781b      	ldrb	r3, [r3, #0]
    69ac:	b2db      	uxtb	r3, r3
    69ae:	f003 0310 	and.w	r3, r3, #16
    69b2:	2b00      	cmp	r3, #0
    69b4:	d15a      	bne.n	6a6c <ground_calibrate+0xeec>
    69b6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	b2db      	uxtb	r3, r3
    69c2:	461a      	mov	r2, r3
    69c4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    69c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69cc:	5c9a      	ldrb	r2, [r3, r2]
    69ce:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    69d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d6:	701a      	strb	r2, [r3, #0]
    69d8:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    69dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e0:	2200      	movs	r2, #0
    69e2:	701a      	strb	r2, [r3, #0]
    69e4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	b2db      	uxtb	r3, r3
    69f0:	3301      	adds	r3, #1
    69f2:	b2da      	uxtb	r2, r3
    69f4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	b2db      	uxtb	r3, r3
    6a0a:	2bff      	cmp	r3, #255	; 0xff
    6a0c:	d105      	bne.n	6a1a <ground_calibrate+0xe9a>
    6a0e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a16:	2200      	movs	r2, #0
    6a18:	701a      	strb	r2, [r3, #0]
    6a1a:	f242 0338 	movw	r3, #8248	; 0x2038
    6a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a22:	f242 0238 	movw	r2, #8248	; 0x2038
    6a26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6a2a:	7812      	ldrb	r2, [r2, #0]
    6a2c:	b2d2      	uxtb	r2, r2
    6a2e:	f042 0201 	orr.w	r2, r2, #1
    6a32:	b2d2      	uxtb	r2, r2
    6a34:	701a      	strb	r2, [r3, #0]
    6a36:	f242 0339 	movw	r3, #8249	; 0x2039
    6a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a3e:	f242 0239 	movw	r2, #8249	; 0x2039
    6a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6a46:	7812      	ldrb	r2, [r2, #0]
    6a48:	b2d2      	uxtb	r2, r2
    6a4a:	f042 0210 	orr.w	r2, r2, #16
    6a4e:	b2d2      	uxtb	r2, r2
    6a50:	701a      	strb	r2, [r3, #0]
    6a52:	e00b      	b.n	6a6c <ground_calibrate+0xeec>
    6a54:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	3301      	adds	r3, #1
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a6a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6a6c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    6a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a74:	2202      	movs	r2, #2
    6a76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6a78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a80:	781a      	ldrb	r2, [r3, #0]
    6a82:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8a:	781b      	ldrb	r3, [r3, #0]
    6a8c:	b2db      	uxtb	r3, r3
    6a8e:	429a      	cmp	r2, r3
    6a90:	d318      	bcc.n	6ac4 <ground_calibrate+0xf44>
    6a92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	b2db      	uxtb	r3, r3
    6a9e:	461a      	mov	r2, r3
    6aa0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa8:	781b      	ldrb	r3, [r3, #0]
    6aaa:	1ad3      	subs	r3, r2, r3
    6aac:	33ff      	adds	r3, #255	; 0xff
    6aae:	2b06      	cmp	r3, #6
    6ab0:	bfd4      	ite	le
    6ab2:	2300      	movle	r3, #0
    6ab4:	2301      	movgt	r3, #1
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	e016      	b.n	6ae8 <ground_calibrate+0xf68>
    6aba:	bf00      	nop
    6abc:	20000287 	.word	0x20000287
    6ac0:	20000289 	.word	0x20000289
    6ac4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	b2db      	uxtb	r3, r3
    6ad0:	461a      	mov	r2, r3
    6ad2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	1ad3      	subs	r3, r2, r3
    6ade:	2b06      	cmp	r3, #6
    6ae0:	bfd4      	ite	le
    6ae2:	2300      	movle	r3, #0
    6ae4:	2301      	movgt	r3, #1
    6ae6:	b2db      	uxtb	r3, r3
    6ae8:	2b00      	cmp	r3, #0
    6aea:	f000 8194 	beq.w	6e16 <ground_calibrate+0x1296>
    6aee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af6:	781b      	ldrb	r3, [r3, #0]
    6af8:	461a      	mov	r2, r3
    6afa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b02:	2105      	movs	r1, #5
    6b04:	5499      	strb	r1, [r3, r2]
    6b06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	3301      	adds	r3, #1
    6b12:	b2da      	uxtb	r2, r3
    6b14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1c:	701a      	strb	r2, [r3, #0]
    6b1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	2bff      	cmp	r3, #255	; 0xff
    6b2a:	d105      	bne.n	6b38 <ground_calibrate+0xfb8>
    6b2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b34:	2200      	movs	r2, #0
    6b36:	701a      	strb	r2, [r3, #0]
    6b38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	781b      	ldrb	r3, [r3, #0]
    6b42:	461a      	mov	r2, r3
    6b44:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4c:	2103      	movs	r1, #3
    6b4e:	5499      	strb	r1, [r3, r2]
    6b50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b58:	781b      	ldrb	r3, [r3, #0]
    6b5a:	3301      	adds	r3, #1
    6b5c:	b2da      	uxtb	r2, r3
    6b5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b66:	701a      	strb	r2, [r3, #0]
    6b68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b70:	781b      	ldrb	r3, [r3, #0]
    6b72:	2bff      	cmp	r3, #255	; 0xff
    6b74:	d105      	bne.n	6b82 <ground_calibrate+0x1002>
    6b76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7e:	2200      	movs	r2, #0
    6b80:	701a      	strb	r2, [r3, #0]
    6b82:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8a:	2203      	movs	r2, #3
    6b8c:	701a      	strb	r2, [r3, #0]
    6b8e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b96:	2203      	movs	r2, #3
    6b98:	701a      	strb	r2, [r3, #0]
    6b9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba2:	781b      	ldrb	r3, [r3, #0]
    6ba4:	461a      	mov	r2, r3
    6ba6:	f240 2384 	movw	r3, #644	; 0x284
    6baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bae:	7819      	ldrb	r1, [r3, #0]
    6bb0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb8:	5499      	strb	r1, [r3, r2]
    6bba:	f240 2384 	movw	r3, #644	; 0x284
    6bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc2:	781a      	ldrb	r2, [r3, #0]
    6bc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	4413      	add	r3, r2
    6bd0:	b2da      	uxtb	r2, r3
    6bd2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bda:	701a      	strb	r2, [r3, #0]
    6bdc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be4:	781a      	ldrb	r2, [r3, #0]
    6be6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	4413      	add	r3, r2
    6bf2:	b2da      	uxtb	r2, r3
    6bf4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	3301      	adds	r3, #1
    6c0a:	b2da      	uxtb	r2, r3
    6c0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c14:	701a      	strb	r2, [r3, #0]
    6c16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	2bff      	cmp	r3, #255	; 0xff
    6c22:	d105      	bne.n	6c30 <ground_calibrate+0x10b0>
    6c24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	2200      	movs	r2, #0
    6c2e:	701a      	strb	r2, [r3, #0]
    6c30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	461a      	mov	r2, r3
    6c3c:	f240 2384 	movw	r3, #644	; 0x284
    6c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c44:	7859      	ldrb	r1, [r3, #1]
    6c46:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	5499      	strb	r1, [r3, r2]
    6c50:	4b77      	ldr	r3, [pc, #476]	; (6e30 <ground_calibrate+0x12b0>)
    6c52:	781a      	ldrb	r2, [r3, #0]
    6c54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5c:	781b      	ldrb	r3, [r3, #0]
    6c5e:	4413      	add	r3, r2
    6c60:	b2da      	uxtb	r2, r3
    6c62:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c6a:	701a      	strb	r2, [r3, #0]
    6c6c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c74:	781a      	ldrb	r2, [r3, #0]
    6c76:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	4413      	add	r3, r2
    6c82:	b2da      	uxtb	r2, r3
    6c84:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8c:	701a      	strb	r2, [r3, #0]
    6c8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c96:	781b      	ldrb	r3, [r3, #0]
    6c98:	3301      	adds	r3, #1
    6c9a:	b2da      	uxtb	r2, r3
    6c9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca4:	701a      	strb	r2, [r3, #0]
    6ca6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	2bff      	cmp	r3, #255	; 0xff
    6cb2:	d105      	bne.n	6cc0 <ground_calibrate+0x1140>
    6cb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cbc:	2200      	movs	r2, #0
    6cbe:	701a      	strb	r2, [r3, #0]
    6cc0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc8:	781b      	ldrb	r3, [r3, #0]
    6cca:	461a      	mov	r2, r3
    6ccc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd4:	7819      	ldrb	r1, [r3, #0]
    6cd6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cde:	5499      	strb	r1, [r3, r2]
    6ce0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	3301      	adds	r3, #1
    6cec:	b2da      	uxtb	r2, r3
    6cee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf6:	701a      	strb	r2, [r3, #0]
    6cf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d00:	781b      	ldrb	r3, [r3, #0]
    6d02:	2bff      	cmp	r3, #255	; 0xff
    6d04:	d105      	bne.n	6d12 <ground_calibrate+0x1192>
    6d06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0e:	2200      	movs	r2, #0
    6d10:	701a      	strb	r2, [r3, #0]
    6d12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	461a      	mov	r2, r3
    6d1e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d26:	7819      	ldrb	r1, [r3, #0]
    6d28:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d30:	5499      	strb	r1, [r3, r2]
    6d32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3a:	781b      	ldrb	r3, [r3, #0]
    6d3c:	3301      	adds	r3, #1
    6d3e:	b2da      	uxtb	r2, r3
    6d40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d48:	701a      	strb	r2, [r3, #0]
    6d4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	2bff      	cmp	r3, #255	; 0xff
    6d56:	d105      	bne.n	6d64 <ground_calibrate+0x11e4>
    6d58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d60:	2200      	movs	r2, #0
    6d62:	701a      	strb	r2, [r3, #0]
    6d64:	f242 0339 	movw	r3, #8249	; 0x2039
    6d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	b2db      	uxtb	r3, r3
    6d70:	f003 0310 	and.w	r3, r3, #16
    6d74:	2b00      	cmp	r3, #0
    6d76:	d15a      	bne.n	6e2e <ground_calibrate+0x12ae>
    6d78:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	b2db      	uxtb	r3, r3
    6d84:	461a      	mov	r2, r3
    6d86:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8e:	5c9a      	ldrb	r2, [r3, r2]
    6d90:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    6d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d98:	701a      	strb	r2, [r3, #0]
    6d9a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    6d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da2:	2200      	movs	r2, #0
    6da4:	701a      	strb	r2, [r3, #0]
    6da6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	b2db      	uxtb	r3, r3
    6db2:	3301      	adds	r3, #1
    6db4:	b2da      	uxtb	r2, r3
    6db6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dbe:	701a      	strb	r2, [r3, #0]
    6dc0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc8:	781b      	ldrb	r3, [r3, #0]
    6dca:	b2db      	uxtb	r3, r3
    6dcc:	2bff      	cmp	r3, #255	; 0xff
    6dce:	d105      	bne.n	6ddc <ground_calibrate+0x125c>
    6dd0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd8:	2200      	movs	r2, #0
    6dda:	701a      	strb	r2, [r3, #0]
    6ddc:	f242 0338 	movw	r3, #8248	; 0x2038
    6de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de4:	f242 0238 	movw	r2, #8248	; 0x2038
    6de8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dec:	7812      	ldrb	r2, [r2, #0]
    6dee:	b2d2      	uxtb	r2, r2
    6df0:	f042 0201 	orr.w	r2, r2, #1
    6df4:	b2d2      	uxtb	r2, r2
    6df6:	701a      	strb	r2, [r3, #0]
    6df8:	f242 0339 	movw	r3, #8249	; 0x2039
    6dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e00:	f242 0239 	movw	r2, #8249	; 0x2039
    6e04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e08:	7812      	ldrb	r2, [r2, #0]
    6e0a:	b2d2      	uxtb	r2, r2
    6e0c:	f042 0210 	orr.w	r2, r2, #16
    6e10:	b2d2      	uxtb	r2, r2
    6e12:	701a      	strb	r2, [r3, #0]
    6e14:	e00b      	b.n	6e2e <ground_calibrate+0x12ae>
    6e16:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1e:	781b      	ldrb	r3, [r3, #0]
    6e20:	3301      	adds	r3, #1
    6e22:	b2da      	uxtb	r2, r3
    6e24:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e2c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6e2e:	bd80      	pop	{r7, pc}
    6e30:	20000285 	.word	0x20000285

00006e34 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6e34:	b480      	push	{r7}
    6e36:	b083      	sub	sp, #12
    6e38:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6e3a:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	2b03      	cmp	r3, #3
    6e46:	d10c      	bne.n	6e62 <pprz_mode_update+0x2e>
    6e48:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	2b00      	cmp	r3, #0
    6e54:	d032      	beq.n	6ebc <pprz_mode_update+0x88>
    6e56:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5e:	2200      	movs	r2, #0
    6e60:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6e62:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6a:	891b      	ldrh	r3, [r3, #8]
    6e6c:	b21b      	sxth	r3, r3
    6e6e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6e72:	dc0f      	bgt.n	6e94 <pprz_mode_update+0x60>
    6e74:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7c:	891b      	ldrh	r3, [r3, #8]
    6e7e:	b21a      	sxth	r2, r3
    6e80:	f64e 5341 	movw	r3, #60737	; 0xed41
    6e84:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6e88:	429a      	cmp	r2, r3
    6e8a:	bfb4      	ite	lt
    6e8c:	2300      	movlt	r3, #0
    6e8e:	2301      	movge	r3, #1
    6e90:	b2db      	uxtb	r3, r3
    6e92:	e000      	b.n	6e96 <pprz_mode_update+0x62>
    6e94:	2302      	movs	r3, #2
    6e96:	71fb      	strb	r3, [r7, #7]
    6e98:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea0:	781b      	ldrb	r3, [r3, #0]
    6ea2:	79fa      	ldrb	r2, [r7, #7]
    6ea4:	429a      	cmp	r2, r3
    6ea6:	d007      	beq.n	6eb8 <pprz_mode_update+0x84>
    6ea8:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb0:	79fa      	ldrb	r2, [r7, #7]
    6eb2:	701a      	strb	r2, [r3, #0]
    6eb4:	2301      	movs	r3, #1
    6eb6:	e002      	b.n	6ebe <pprz_mode_update+0x8a>
    6eb8:	2300      	movs	r3, #0
    6eba:	e000      	b.n	6ebe <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6ebc:	2300      	movs	r3, #0
}
    6ebe:	4618      	mov	r0, r3
    6ec0:	370c      	adds	r7, #12
    6ec2:	46bd      	mov	sp, r7
    6ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec8:	4770      	bx	lr
    6eca:	bf00      	nop

00006ecc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6ecc:	b480      	push	{r7}
    6ece:	b083      	sub	sp, #12
    6ed0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6ed2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eda:	89db      	ldrh	r3, [r3, #14]
    6edc:	b21a      	sxth	r2, r3
    6ede:	f640 437f 	movw	r3, #3199	; 0xc7f
    6ee2:	429a      	cmp	r2, r3
    6ee4:	bfd4      	ite	le
    6ee6:	2300      	movle	r3, #0
    6ee8:	2301      	movgt	r3, #1
    6eea:	b2db      	uxtb	r3, r3
    6eec:	71fb      	strb	r3, [r7, #7]
    6eee:	f240 2380 	movw	r3, #640	; 0x280
    6ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	79fa      	ldrb	r2, [r7, #7]
    6efa:	429a      	cmp	r2, r3
    6efc:	d007      	beq.n	6f0e <ir_estim_mode_update+0x42>
    6efe:	f240 2380 	movw	r3, #640	; 0x280
    6f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f06:	79fa      	ldrb	r2, [r7, #7]
    6f08:	701a      	strb	r2, [r3, #0]
    6f0a:	2301      	movs	r3, #1
    6f0c:	e000      	b.n	6f10 <ir_estim_mode_update+0x44>
    6f0e:	2300      	movs	r3, #0
}
    6f10:	4618      	mov	r0, r3
    6f12:	370c      	adds	r7, #12
    6f14:	46bd      	mov	sp, r7
    6f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f1a:	4770      	bx	lr

00006f1c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6f1c:	b480      	push	{r7}
    6f1e:	b083      	sub	sp, #12
    6f20:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6f22:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f2a:	7cdb      	ldrb	r3, [r3, #19]
    6f2c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6f2e:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f36:	781b      	ldrb	r3, [r3, #0]
    6f38:	79fa      	ldrb	r2, [r7, #7]
    6f3a:	429a      	cmp	r2, r3
    6f3c:	d017      	beq.n	6f6e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6f3e:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f46:	781b      	ldrb	r3, [r3, #0]
    6f48:	461a      	mov	r2, r3
    6f4a:	79fb      	ldrb	r3, [r7, #7]
    6f4c:	4053      	eors	r3, r2
    6f4e:	f003 0303 	and.w	r3, r3, #3
    6f52:	2b00      	cmp	r3, #0
    6f54:	bf0c      	ite	eq
    6f56:	2300      	moveq	r3, #0
    6f58:	2301      	movne	r3, #1
    6f5a:	b2db      	uxtb	r3, r3
    6f5c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    6f5e:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f66:	79fa      	ldrb	r2, [r7, #7]
    6f68:	701a      	strb	r2, [r3, #0]
    return changed;
    6f6a:	79bb      	ldrb	r3, [r7, #6]
    6f6c:	e000      	b.n	6f70 <mcu1_status_update+0x54>
  }
  return FALSE;
    6f6e:	2300      	movs	r3, #0
}
    6f70:	4618      	mov	r0, r3
    6f72:	370c      	adds	r7, #12
    6f74:	46bd      	mov	sp, r7
    6f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f7a:	4770      	bx	lr

00006f7c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    6f7c:	b480      	push	{r7}
    6f7e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    6f80:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    6f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f88:	781b      	ldrb	r3, [r3, #0]
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d12a      	bne.n	6fe4 <events_update+0x68>
    6f8e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	895b      	ldrh	r3, [r3, #10]
    6f98:	b21b      	sxth	r3, r3
    6f9a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    6f9e:	dd21      	ble.n	6fe4 <events_update+0x68>
    6fa0:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa8:	881b      	ldrh	r3, [r3, #0]
    6faa:	2b13      	cmp	r3, #19
    6fac:	d819      	bhi.n	6fe2 <events_update+0x66>
    6fae:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb6:	881b      	ldrh	r3, [r3, #0]
    6fb8:	3301      	adds	r3, #1
    6fba:	b29a      	uxth	r2, r3
    6fbc:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc4:	801a      	strh	r2, [r3, #0]
    6fc6:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fce:	881b      	ldrh	r3, [r3, #0]
    6fd0:	2b14      	cmp	r3, #20
    6fd2:	d106      	bne.n	6fe2 <events_update+0x66>
    6fd4:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fdc:	2201      	movs	r2, #1
    6fde:	701a      	strb	r2, [r3, #0]
    6fe0:	e00c      	b.n	6ffc <events_update+0x80>
    6fe2:	e00b      	b.n	6ffc <events_update+0x80>
    6fe4:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fec:	2200      	movs	r2, #0
    6fee:	801a      	strh	r2, [r3, #0]
    6ff0:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff8:	2200      	movs	r2, #0
    6ffa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    6ffc:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    7000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7004:	781b      	ldrb	r3, [r3, #0]
    7006:	2b00      	cmp	r3, #0
    7008:	d12a      	bne.n	7060 <events_update+0xe4>
    700a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    700e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7012:	895b      	ldrh	r3, [r3, #10]
    7014:	b21b      	sxth	r3, r3
    7016:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    701a:	da21      	bge.n	7060 <events_update+0xe4>
    701c:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    7020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7024:	881b      	ldrh	r3, [r3, #0]
    7026:	2b13      	cmp	r3, #19
    7028:	d819      	bhi.n	705e <events_update+0xe2>
    702a:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    702e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7032:	881b      	ldrh	r3, [r3, #0]
    7034:	3301      	adds	r3, #1
    7036:	b29a      	uxth	r2, r3
    7038:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7040:	801a      	strh	r2, [r3, #0]
    7042:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    7046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704a:	881b      	ldrh	r3, [r3, #0]
    704c:	2b14      	cmp	r3, #20
    704e:	d106      	bne.n	705e <events_update+0xe2>
    7050:	f64a 2399 	movw	r3, #43673	; 0xaa99
    7054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7058:	2201      	movs	r2, #1
    705a:	701a      	strb	r2, [r3, #0]
    705c:	e00c      	b.n	7078 <events_update+0xfc>
    705e:	e00b      	b.n	7078 <events_update+0xfc>
    7060:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    7064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7068:	2200      	movs	r2, #0
    706a:	801a      	strh	r2, [r3, #0]
    706c:	f64a 2399 	movw	r3, #43673	; 0xaa99
    7070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7074:	2200      	movs	r2, #0
    7076:	701a      	strb	r2, [r3, #0]
}  
    7078:	46bd      	mov	sp, r7
    707a:	f85d 7b04 	ldr.w	r7, [sp], #4
    707e:	4770      	bx	lr

00007080 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7080:	b480      	push	{r7}
    7082:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7084:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    7088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708c:	88da      	ldrh	r2, [r3, #6]
    708e:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    7092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7096:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7098:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    709c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a0:	2200      	movs	r2, #0
    70a2:	74da      	strb	r2, [r3, #19]
}
    70a4:	46bd      	mov	sp, r7
    70a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    70aa:	4770      	bx	lr

000070ac <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    70ac:	b480      	push	{r7}
    70ae:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    70b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b8:	781a      	ldrb	r2, [r3, #0]
    70ba:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    70be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c2:	781b      	ldrb	r3, [r3, #0]
    70c4:	b2db      	uxtb	r3, r3
    70c6:	429a      	cmp	r2, r3
    70c8:	d313      	bcc.n	70f2 <send_boot+0x46>
    70ca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    70ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	b2db      	uxtb	r3, r3
    70d6:	461a      	mov	r2, r3
    70d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	1ad3      	subs	r3, r2, r3
    70e4:	33ff      	adds	r3, #255	; 0xff
    70e6:	2b06      	cmp	r3, #6
    70e8:	bfd4      	ite	le
    70ea:	2300      	movle	r3, #0
    70ec:	2301      	movgt	r3, #1
    70ee:	b2db      	uxtb	r3, r3
    70f0:	e011      	b.n	7116 <send_boot+0x6a>
    70f2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    70f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70fa:	781b      	ldrb	r3, [r3, #0]
    70fc:	b2db      	uxtb	r3, r3
    70fe:	461a      	mov	r2, r3
    7100:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	1ad3      	subs	r3, r2, r3
    710c:	2b06      	cmp	r3, #6
    710e:	bfd4      	ite	le
    7110:	2300      	movle	r3, #0
    7112:	2301      	movgt	r3, #1
    7114:	b2db      	uxtb	r3, r3
    7116:	2b00      	cmp	r3, #0
    7118:	f000 8194 	beq.w	7444 <send_boot+0x398>
    711c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	461a      	mov	r2, r3
    7128:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    712c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7130:	2105      	movs	r1, #5
    7132:	5499      	strb	r1, [r3, r2]
    7134:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	3301      	adds	r3, #1
    7140:	b2da      	uxtb	r2, r3
    7142:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714a:	701a      	strb	r2, [r3, #0]
    714c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	2bff      	cmp	r3, #255	; 0xff
    7158:	d105      	bne.n	7166 <send_boot+0xba>
    715a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    715e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7162:	2200      	movs	r2, #0
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    716a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	461a      	mov	r2, r3
    7172:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717a:	2101      	movs	r1, #1
    717c:	5499      	strb	r1, [r3, r2]
    717e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	3301      	adds	r3, #1
    718a:	b2da      	uxtb	r2, r3
    718c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7194:	701a      	strb	r2, [r3, #0]
    7196:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    719a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	2bff      	cmp	r3, #255	; 0xff
    71a2:	d105      	bne.n	71b0 <send_boot+0x104>
    71a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ac:	2200      	movs	r2, #0
    71ae:	701a      	strb	r2, [r3, #0]
    71b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b8:	2201      	movs	r2, #1
    71ba:	701a      	strb	r2, [r3, #0]
    71bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    71c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c4:	2201      	movs	r2, #1
    71c6:	701a      	strb	r2, [r3, #0]
    71c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d0:	781b      	ldrb	r3, [r3, #0]
    71d2:	461a      	mov	r2, r3
    71d4:	f648 1356 	movw	r3, #35158	; 0x8956
    71d8:	f2c0 0301 	movt	r3, #1
    71dc:	7819      	ldrb	r1, [r3, #0]
    71de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    71e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e6:	5499      	strb	r1, [r3, r2]
    71e8:	f648 1356 	movw	r3, #35158	; 0x8956
    71ec:	f2c0 0301 	movt	r3, #1
    71f0:	781a      	ldrb	r2, [r3, #0]
    71f2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	4413      	add	r3, r2
    71fe:	b2da      	uxtb	r2, r3
    7200:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7208:	701a      	strb	r2, [r3, #0]
    720a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    720e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7212:	781a      	ldrb	r2, [r3, #0]
    7214:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	4413      	add	r3, r2
    7220:	b2da      	uxtb	r2, r3
    7222:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    722a:	701a      	strb	r2, [r3, #0]
    722c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	3301      	adds	r3, #1
    7238:	b2da      	uxtb	r2, r3
    723a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7242:	701a      	strb	r2, [r3, #0]
    7244:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	2bff      	cmp	r3, #255	; 0xff
    7250:	d105      	bne.n	725e <send_boot+0x1b2>
    7252:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	2200      	movs	r2, #0
    725c:	701a      	strb	r2, [r3, #0]
    725e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	461a      	mov	r2, r3
    726a:	f648 1356 	movw	r3, #35158	; 0x8956
    726e:	f2c0 0301 	movt	r3, #1
    7272:	7859      	ldrb	r1, [r3, #1]
    7274:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	5499      	strb	r1, [r3, r2]
    727e:	4b88      	ldr	r3, [pc, #544]	; (74a0 <send_boot+0x3f4>)
    7280:	781a      	ldrb	r2, [r3, #0]
    7282:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	4413      	add	r3, r2
    728e:	b2da      	uxtb	r2, r3
    7290:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    729e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a2:	781a      	ldrb	r2, [r3, #0]
    72a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    72a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ac:	781b      	ldrb	r3, [r3, #0]
    72ae:	4413      	add	r3, r2
    72b0:	b2da      	uxtb	r2, r3
    72b2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    72b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ba:	701a      	strb	r2, [r3, #0]
    72bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	3301      	adds	r3, #1
    72c8:	b2da      	uxtb	r2, r3
    72ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d2:	701a      	strb	r2, [r3, #0]
    72d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	2bff      	cmp	r3, #255	; 0xff
    72e0:	d105      	bne.n	72ee <send_boot+0x242>
    72e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ea:	2200      	movs	r2, #0
    72ec:	701a      	strb	r2, [r3, #0]
    72ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	461a      	mov	r2, r3
    72fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    72fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7302:	7819      	ldrb	r1, [r3, #0]
    7304:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    730c:	5499      	strb	r1, [r3, r2]
    730e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	3301      	adds	r3, #1
    731a:	b2da      	uxtb	r2, r3
    731c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7324:	701a      	strb	r2, [r3, #0]
    7326:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    732a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	2bff      	cmp	r3, #255	; 0xff
    7332:	d105      	bne.n	7340 <send_boot+0x294>
    7334:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733c:	2200      	movs	r2, #0
    733e:	701a      	strb	r2, [r3, #0]
    7340:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	461a      	mov	r2, r3
    734c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7354:	7819      	ldrb	r1, [r3, #0]
    7356:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    735a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    735e:	5499      	strb	r1, [r3, r2]
    7360:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	3301      	adds	r3, #1
    736c:	b2da      	uxtb	r2, r3
    736e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7376:	701a      	strb	r2, [r3, #0]
    7378:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    737c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7380:	781b      	ldrb	r3, [r3, #0]
    7382:	2bff      	cmp	r3, #255	; 0xff
    7384:	d105      	bne.n	7392 <send_boot+0x2e6>
    7386:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    738a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738e:	2200      	movs	r2, #0
    7390:	701a      	strb	r2, [r3, #0]
    7392:	f242 0339 	movw	r3, #8249	; 0x2039
    7396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	b2db      	uxtb	r3, r3
    739e:	f003 0310 	and.w	r3, r3, #16
    73a2:	2b00      	cmp	r3, #0
    73a4:	d15a      	bne.n	745c <send_boot+0x3b0>
    73a6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	b2db      	uxtb	r3, r3
    73b2:	461a      	mov	r2, r3
    73b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    73b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73bc:	5c9a      	ldrb	r2, [r3, r2]
    73be:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    73c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c6:	701a      	strb	r2, [r3, #0]
    73c8:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    73cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d0:	2200      	movs	r2, #0
    73d2:	701a      	strb	r2, [r3, #0]
    73d4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73dc:	781b      	ldrb	r3, [r3, #0]
    73de:	b2db      	uxtb	r3, r3
    73e0:	3301      	adds	r3, #1
    73e2:	b2da      	uxtb	r2, r3
    73e4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ec:	701a      	strb	r2, [r3, #0]
    73ee:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	b2db      	uxtb	r3, r3
    73fa:	2bff      	cmp	r3, #255	; 0xff
    73fc:	d105      	bne.n	740a <send_boot+0x35e>
    73fe:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7406:	2200      	movs	r2, #0
    7408:	701a      	strb	r2, [r3, #0]
    740a:	f242 0338 	movw	r3, #8248	; 0x2038
    740e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7412:	f242 0238 	movw	r2, #8248	; 0x2038
    7416:	f2c2 0200 	movt	r2, #8192	; 0x2000
    741a:	7812      	ldrb	r2, [r2, #0]
    741c:	b2d2      	uxtb	r2, r2
    741e:	f042 0201 	orr.w	r2, r2, #1
    7422:	b2d2      	uxtb	r2, r2
    7424:	701a      	strb	r2, [r3, #0]
    7426:	f242 0339 	movw	r3, #8249	; 0x2039
    742a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742e:	f242 0239 	movw	r2, #8249	; 0x2039
    7432:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7436:	7812      	ldrb	r2, [r2, #0]
    7438:	b2d2      	uxtb	r2, r2
    743a:	f042 0210 	orr.w	r2, r2, #16
    743e:	b2d2      	uxtb	r2, r2
    7440:	701a      	strb	r2, [r3, #0]
    7442:	e00b      	b.n	745c <send_boot+0x3b0>
    7444:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	3301      	adds	r3, #1
    7450:	b2da      	uxtb	r2, r3
    7452:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    745c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7464:	781a      	ldrb	r2, [r3, #0]
    7466:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    746a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    746e:	781b      	ldrb	r3, [r3, #0]
    7470:	b2db      	uxtb	r3, r3
    7472:	429a      	cmp	r2, r3
    7474:	d316      	bcc.n	74a4 <send_boot+0x3f8>
    7476:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    747a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747e:	781b      	ldrb	r3, [r3, #0]
    7480:	b2db      	uxtb	r3, r3
    7482:	461a      	mov	r2, r3
    7484:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	1ad3      	subs	r3, r2, r3
    7490:	33ff      	adds	r3, #255	; 0xff
    7492:	2b14      	cmp	r3, #20
    7494:	bfd4      	ite	le
    7496:	2300      	movle	r3, #0
    7498:	2301      	movgt	r3, #1
    749a:	b2db      	uxtb	r3, r3
    749c:	e014      	b.n	74c8 <send_boot+0x41c>
    749e:	bf00      	nop
    74a0:	00018957 	.word	0x00018957
    74a4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    74a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ac:	781b      	ldrb	r3, [r3, #0]
    74ae:	b2db      	uxtb	r3, r3
    74b0:	461a      	mov	r2, r3
    74b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ba:	781b      	ldrb	r3, [r3, #0]
    74bc:	1ad3      	subs	r3, r2, r3
    74be:	2b14      	cmp	r3, #20
    74c0:	bfd4      	ite	le
    74c2:	2300      	movle	r3, #0
    74c4:	2301      	movgt	r3, #1
    74c6:	b2db      	uxtb	r3, r3
    74c8:	2b00      	cmp	r3, #0
    74ca:	f000 85a5 	beq.w	8018 <send_boot+0xf6c>
    74ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	461a      	mov	r2, r3
    74da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    74de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e2:	2105      	movs	r1, #5
    74e4:	5499      	strb	r1, [r3, r2]
    74e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	3301      	adds	r3, #1
    74f2:	b2da      	uxtb	r2, r3
    74f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fc:	701a      	strb	r2, [r3, #0]
    74fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	2bff      	cmp	r3, #255	; 0xff
    750a:	d105      	bne.n	7518 <send_boot+0x46c>
    750c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7514:	2200      	movs	r2, #0
    7516:	701a      	strb	r2, [r3, #0]
    7518:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	461a      	mov	r2, r3
    7524:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752c:	2105      	movs	r1, #5
    752e:	5499      	strb	r1, [r3, r2]
    7530:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	3301      	adds	r3, #1
    753c:	b2da      	uxtb	r2, r3
    753e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7546:	701a      	strb	r2, [r3, #0]
    7548:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    754c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	2bff      	cmp	r3, #255	; 0xff
    7554:	d105      	bne.n	7562 <send_boot+0x4b6>
    7556:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    755a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755e:	2200      	movs	r2, #0
    7560:	701a      	strb	r2, [r3, #0]
    7562:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    756a:	2205      	movs	r2, #5
    756c:	701a      	strb	r2, [r3, #0]
    756e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7576:	2205      	movs	r2, #5
    7578:	701a      	strb	r2, [r3, #0]
    757a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    757e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	461a      	mov	r2, r3
    7586:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    758a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758e:	7819      	ldrb	r1, [r3, #0]
    7590:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7598:	5499      	strb	r1, [r3, r2]
    759a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    759e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a2:	781a      	ldrb	r2, [r3, #0]
    75a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	4413      	add	r3, r2
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	781a      	ldrb	r2, [r3, #0]
    75c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	4413      	add	r3, r2
    75d2:	b2da      	uxtb	r2, r3
    75d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    75d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75dc:	701a      	strb	r2, [r3, #0]
    75de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e6:	781b      	ldrb	r3, [r3, #0]
    75e8:	3301      	adds	r3, #1
    75ea:	b2da      	uxtb	r2, r3
    75ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f4:	701a      	strb	r2, [r3, #0]
    75f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	2bff      	cmp	r3, #255	; 0xff
    7602:	d105      	bne.n	7610 <send_boot+0x564>
    7604:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    760c:	2200      	movs	r2, #0
    760e:	701a      	strb	r2, [r3, #0]
    7610:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	461a      	mov	r2, r3
    761c:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	7859      	ldrb	r1, [r3, #1]
    7626:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    762a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    762e:	5499      	strb	r1, [r3, r2]
    7630:	4bd1      	ldr	r3, [pc, #836]	; (7978 <send_boot+0x8cc>)
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	4413      	add	r3, r2
    7640:	b2da      	uxtb	r2, r3
    7642:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7654:	781a      	ldrb	r2, [r3, #0]
    7656:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    765a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	4413      	add	r3, r2
    7662:	b2da      	uxtb	r2, r3
    7664:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	3301      	adds	r3, #1
    767a:	b2da      	uxtb	r2, r3
    767c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7684:	701a      	strb	r2, [r3, #0]
    7686:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    768a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2bff      	cmp	r3, #255	; 0xff
    7692:	d105      	bne.n	76a0 <send_boot+0x5f4>
    7694:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769c:	2200      	movs	r2, #0
    769e:	701a      	strb	r2, [r3, #0]
    76a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	461a      	mov	r2, r3
    76ac:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    76b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b4:	7899      	ldrb	r1, [r3, #2]
    76b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    76ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76be:	5499      	strb	r1, [r3, r2]
    76c0:	4bae      	ldr	r3, [pc, #696]	; (797c <send_boot+0x8d0>)
    76c2:	781a      	ldrb	r2, [r3, #0]
    76c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	4413      	add	r3, r2
    76d0:	b2da      	uxtb	r2, r3
    76d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76da:	701a      	strb	r2, [r3, #0]
    76dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    76e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e4:	781a      	ldrb	r2, [r3, #0]
    76e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	4413      	add	r3, r2
    76f2:	b2da      	uxtb	r2, r3
    76f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    76f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	3301      	adds	r3, #1
    770a:	b2da      	uxtb	r2, r3
    770c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	701a      	strb	r2, [r3, #0]
    7716:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    771a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2bff      	cmp	r3, #255	; 0xff
    7722:	d105      	bne.n	7730 <send_boot+0x684>
    7724:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772c:	2200      	movs	r2, #0
    772e:	701a      	strb	r2, [r3, #0]
    7730:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	461a      	mov	r2, r3
    773c:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7744:	78d9      	ldrb	r1, [r3, #3]
    7746:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    774a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774e:	5499      	strb	r1, [r3, r2]
    7750:	4b8b      	ldr	r3, [pc, #556]	; (7980 <send_boot+0x8d4>)
    7752:	781a      	ldrb	r2, [r3, #0]
    7754:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	4413      	add	r3, r2
    7760:	b2da      	uxtb	r2, r3
    7762:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776a:	701a      	strb	r2, [r3, #0]
    776c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7774:	781a      	ldrb	r2, [r3, #0]
    7776:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    777a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	4413      	add	r3, r2
    7782:	b2da      	uxtb	r2, r3
    7784:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778c:	701a      	strb	r2, [r3, #0]
    778e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7796:	781b      	ldrb	r3, [r3, #0]
    7798:	3301      	adds	r3, #1
    779a:	b2da      	uxtb	r2, r3
    779c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a4:	701a      	strb	r2, [r3, #0]
    77a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ae:	781b      	ldrb	r3, [r3, #0]
    77b0:	2bff      	cmp	r3, #255	; 0xff
    77b2:	d105      	bne.n	77c0 <send_boot+0x714>
    77b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77bc:	2200      	movs	r2, #0
    77be:	701a      	strb	r2, [r3, #0]
    77c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c8:	781b      	ldrb	r3, [r3, #0]
    77ca:	461a      	mov	r2, r3
    77cc:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    77d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d4:	7819      	ldrb	r1, [r3, #0]
    77d6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    77da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77de:	5499      	strb	r1, [r3, r2]
    77e0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    77e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e8:	781a      	ldrb	r2, [r3, #0]
    77ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	4413      	add	r3, r2
    77f6:	b2da      	uxtb	r2, r3
    77f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7800:	701a      	strb	r2, [r3, #0]
    7802:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780a:	781a      	ldrb	r2, [r3, #0]
    780c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	4413      	add	r3, r2
    7818:	b2da      	uxtb	r2, r3
    781a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	3301      	adds	r3, #1
    7830:	b2da      	uxtb	r2, r3
    7832:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783a:	701a      	strb	r2, [r3, #0]
    783c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2bff      	cmp	r3, #255	; 0xff
    7848:	d105      	bne.n	7856 <send_boot+0x7aa>
    784a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    784e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7852:	2200      	movs	r2, #0
    7854:	701a      	strb	r2, [r3, #0]
    7856:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    785a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	461a      	mov	r2, r3
    7862:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    7866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786a:	7859      	ldrb	r1, [r3, #1]
    786c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7874:	5499      	strb	r1, [r3, r2]
    7876:	4b43      	ldr	r3, [pc, #268]	; (7984 <send_boot+0x8d8>)
    7878:	781a      	ldrb	r2, [r3, #0]
    787a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    787e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	4413      	add	r3, r2
    7886:	b2da      	uxtb	r2, r3
    7888:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    788c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7890:	701a      	strb	r2, [r3, #0]
    7892:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	781a      	ldrb	r2, [r3, #0]
    789c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    78a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	4413      	add	r3, r2
    78a8:	b2da      	uxtb	r2, r3
    78aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    78ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b2:	701a      	strb	r2, [r3, #0]
    78b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	3301      	adds	r3, #1
    78c0:	b2da      	uxtb	r2, r3
    78c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ca:	701a      	strb	r2, [r3, #0]
    78cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	2bff      	cmp	r3, #255	; 0xff
    78d8:	d105      	bne.n	78e6 <send_boot+0x83a>
    78da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e2:	2200      	movs	r2, #0
    78e4:	701a      	strb	r2, [r3, #0]
    78e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	461a      	mov	r2, r3
    78f2:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    78f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fa:	7899      	ldrb	r1, [r3, #2]
    78fc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7904:	5499      	strb	r1, [r3, r2]
    7906:	4b20      	ldr	r3, [pc, #128]	; (7988 <send_boot+0x8dc>)
    7908:	781a      	ldrb	r2, [r3, #0]
    790a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    790e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7912:	781b      	ldrb	r3, [r3, #0]
    7914:	4413      	add	r3, r2
    7916:	b2da      	uxtb	r2, r3
    7918:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    791c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7920:	701a      	strb	r2, [r3, #0]
    7922:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792a:	781a      	ldrb	r2, [r3, #0]
    792c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7934:	781b      	ldrb	r3, [r3, #0]
    7936:	4413      	add	r3, r2
    7938:	b2da      	uxtb	r2, r3
    793a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    793e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7942:	701a      	strb	r2, [r3, #0]
    7944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	3301      	adds	r3, #1
    7950:	b2da      	uxtb	r2, r3
    7952:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795a:	701a      	strb	r2, [r3, #0]
    795c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7964:	781b      	ldrb	r3, [r3, #0]
    7966:	2bff      	cmp	r3, #255	; 0xff
    7968:	d110      	bne.n	798c <send_boot+0x8e0>
    796a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    796e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7972:	2200      	movs	r2, #0
    7974:	701a      	strb	r2, [r3, #0]
    7976:	e009      	b.n	798c <send_boot+0x8e0>
    7978:	2000b0a9 	.word	0x2000b0a9
    797c:	2000b0aa 	.word	0x2000b0aa
    7980:	2000b0ab 	.word	0x2000b0ab
    7984:	2000b0ad 	.word	0x2000b0ad
    7988:	2000b0ae 	.word	0x2000b0ae
    798c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7994:	781b      	ldrb	r3, [r3, #0]
    7996:	461a      	mov	r2, r3
    7998:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    799c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a0:	78d9      	ldrb	r1, [r3, #3]
    79a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    79a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79aa:	5499      	strb	r1, [r3, r2]
    79ac:	4bd3      	ldr	r3, [pc, #844]	; (7cfc <send_boot+0xc50>)
    79ae:	781a      	ldrb	r2, [r3, #0]
    79b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b8:	781b      	ldrb	r3, [r3, #0]
    79ba:	4413      	add	r3, r2
    79bc:	b2da      	uxtb	r2, r3
    79be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c6:	701a      	strb	r2, [r3, #0]
    79c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    79cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d0:	781a      	ldrb	r2, [r3, #0]
    79d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	4413      	add	r3, r2
    79de:	b2da      	uxtb	r2, r3
    79e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    79e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e8:	701a      	strb	r2, [r3, #0]
    79ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79f2:	781b      	ldrb	r3, [r3, #0]
    79f4:	3301      	adds	r3, #1
    79f6:	b2da      	uxtb	r2, r3
    79f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a00:	701a      	strb	r2, [r3, #0]
    7a02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	2bff      	cmp	r3, #255	; 0xff
    7a0e:	d105      	bne.n	7a1c <send_boot+0x970>
    7a10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a18:	2200      	movs	r2, #0
    7a1a:	701a      	strb	r2, [r3, #0]
    7a1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a24:	781b      	ldrb	r3, [r3, #0]
    7a26:	461a      	mov	r2, r3
    7a28:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a30:	7819      	ldrb	r1, [r3, #0]
    7a32:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a3a:	5499      	strb	r1, [r3, r2]
    7a3c:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a44:	781a      	ldrb	r2, [r3, #0]
    7a46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	4413      	add	r3, r2
    7a52:	b2da      	uxtb	r2, r3
    7a54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5c:	701a      	strb	r2, [r3, #0]
    7a5e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a66:	781a      	ldrb	r2, [r3, #0]
    7a68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	4413      	add	r3, r2
    7a74:	b2da      	uxtb	r2, r3
    7a76:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	3301      	adds	r3, #1
    7a8c:	b2da      	uxtb	r2, r3
    7a8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2bff      	cmp	r3, #255	; 0xff
    7aa4:	d105      	bne.n	7ab2 <send_boot+0xa06>
    7aa6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	461a      	mov	r2, r3
    7abe:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac6:	7859      	ldrb	r1, [r3, #1]
    7ac8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad0:	5499      	strb	r1, [r3, r2]
    7ad2:	4b8b      	ldr	r3, [pc, #556]	; (7d00 <send_boot+0xc54>)
    7ad4:	781a      	ldrb	r2, [r3, #0]
    7ad6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	4413      	add	r3, r2
    7ae2:	b2da      	uxtb	r2, r3
    7ae4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aec:	701a      	strb	r2, [r3, #0]
    7aee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af6:	781a      	ldrb	r2, [r3, #0]
    7af8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	4413      	add	r3, r2
    7b04:	b2da      	uxtb	r2, r3
    7b06:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b18:	781b      	ldrb	r3, [r3, #0]
    7b1a:	3301      	adds	r3, #1
    7b1c:	b2da      	uxtb	r2, r3
    7b1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	2bff      	cmp	r3, #255	; 0xff
    7b34:	d105      	bne.n	7b42 <send_boot+0xa96>
    7b36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3e:	2200      	movs	r2, #0
    7b40:	701a      	strb	r2, [r3, #0]
    7b42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	461a      	mov	r2, r3
    7b4e:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b56:	7899      	ldrb	r1, [r3, #2]
    7b58:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b60:	5499      	strb	r1, [r3, r2]
    7b62:	4b68      	ldr	r3, [pc, #416]	; (7d04 <send_boot+0xc58>)
    7b64:	781a      	ldrb	r2, [r3, #0]
    7b66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	4413      	add	r3, r2
    7b72:	b2da      	uxtb	r2, r3
    7b74:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b7c:	701a      	strb	r2, [r3, #0]
    7b7e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b86:	781a      	ldrb	r2, [r3, #0]
    7b88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	4413      	add	r3, r2
    7b94:	b2da      	uxtb	r2, r3
    7b96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9e:	701a      	strb	r2, [r3, #0]
    7ba0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	3301      	adds	r3, #1
    7bac:	b2da      	uxtb	r2, r3
    7bae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb6:	701a      	strb	r2, [r3, #0]
    7bb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	2bff      	cmp	r3, #255	; 0xff
    7bc4:	d105      	bne.n	7bd2 <send_boot+0xb26>
    7bc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bce:	2200      	movs	r2, #0
    7bd0:	701a      	strb	r2, [r3, #0]
    7bd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bda:	781b      	ldrb	r3, [r3, #0]
    7bdc:	461a      	mov	r2, r3
    7bde:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be6:	78d9      	ldrb	r1, [r3, #3]
    7be8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf0:	5499      	strb	r1, [r3, r2]
    7bf2:	4b45      	ldr	r3, [pc, #276]	; (7d08 <send_boot+0xc5c>)
    7bf4:	781a      	ldrb	r2, [r3, #0]
    7bf6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	4413      	add	r3, r2
    7c02:	b2da      	uxtb	r2, r3
    7c04:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0c:	701a      	strb	r2, [r3, #0]
    7c0e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c16:	781a      	ldrb	r2, [r3, #0]
    7c18:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	4413      	add	r3, r2
    7c24:	b2da      	uxtb	r2, r3
    7c26:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c2e:	701a      	strb	r2, [r3, #0]
    7c30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c38:	781b      	ldrb	r3, [r3, #0]
    7c3a:	3301      	adds	r3, #1
    7c3c:	b2da      	uxtb	r2, r3
    7c3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c46:	701a      	strb	r2, [r3, #0]
    7c48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c50:	781b      	ldrb	r3, [r3, #0]
    7c52:	2bff      	cmp	r3, #255	; 0xff
    7c54:	d105      	bne.n	7c62 <send_boot+0xbb6>
    7c56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c5e:	2200      	movs	r2, #0
    7c60:	701a      	strb	r2, [r3, #0]
    7c62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	461a      	mov	r2, r3
    7c6e:	f240 2386 	movw	r3, #646	; 0x286
    7c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c76:	7819      	ldrb	r1, [r3, #0]
    7c78:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c80:	5499      	strb	r1, [r3, r2]
    7c82:	f240 2386 	movw	r3, #646	; 0x286
    7c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8a:	781a      	ldrb	r2, [r3, #0]
    7c8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c94:	781b      	ldrb	r3, [r3, #0]
    7c96:	4413      	add	r3, r2
    7c98:	b2da      	uxtb	r2, r3
    7c9a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca2:	701a      	strb	r2, [r3, #0]
    7ca4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cac:	781a      	ldrb	r2, [r3, #0]
    7cae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	4413      	add	r3, r2
    7cba:	b2da      	uxtb	r2, r3
    7cbc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc4:	701a      	strb	r2, [r3, #0]
    7cc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	3301      	adds	r3, #1
    7cd2:	b2da      	uxtb	r2, r3
    7cd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cdc:	701a      	strb	r2, [r3, #0]
    7cde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	2bff      	cmp	r3, #255	; 0xff
    7cea:	d10f      	bne.n	7d0c <send_boot+0xc60>
    7cec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf4:	2200      	movs	r2, #0
    7cf6:	701a      	strb	r2, [r3, #0]
    7cf8:	e008      	b.n	7d0c <send_boot+0xc60>
    7cfa:	bf00      	nop
    7cfc:	2000b0af 	.word	0x2000b0af
    7d00:	2000b0a5 	.word	0x2000b0a5
    7d04:	2000b0a6 	.word	0x2000b0a6
    7d08:	2000b0a7 	.word	0x2000b0a7
    7d0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	461a      	mov	r2, r3
    7d18:	f240 2386 	movw	r3, #646	; 0x286
    7d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d20:	7859      	ldrb	r1, [r3, #1]
    7d22:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2a:	5499      	strb	r1, [r3, r2]
    7d2c:	4bc5      	ldr	r3, [pc, #788]	; (8044 <send_boot+0xf98>)
    7d2e:	781a      	ldrb	r2, [r3, #0]
    7d30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	4413      	add	r3, r2
    7d3c:	b2da      	uxtb	r2, r3
    7d3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d46:	701a      	strb	r2, [r3, #0]
    7d48:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d50:	781a      	ldrb	r2, [r3, #0]
    7d52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	4413      	add	r3, r2
    7d5e:	b2da      	uxtb	r2, r3
    7d60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d68:	701a      	strb	r2, [r3, #0]
    7d6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	3301      	adds	r3, #1
    7d76:	b2da      	uxtb	r2, r3
    7d78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d80:	701a      	strb	r2, [r3, #0]
    7d82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	2bff      	cmp	r3, #255	; 0xff
    7d8e:	d105      	bne.n	7d9c <send_boot+0xcf0>
    7d90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	461a      	mov	r2, r3
    7da8:	f240 2388 	movw	r3, #648	; 0x288
    7dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db0:	7819      	ldrb	r1, [r3, #0]
    7db2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dba:	5499      	strb	r1, [r3, r2]
    7dbc:	f240 2388 	movw	r3, #648	; 0x288
    7dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc4:	781a      	ldrb	r2, [r3, #0]
    7dc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dce:	781b      	ldrb	r3, [r3, #0]
    7dd0:	4413      	add	r3, r2
    7dd2:	b2da      	uxtb	r2, r3
    7dd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ddc:	701a      	strb	r2, [r3, #0]
    7dde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de6:	781a      	ldrb	r2, [r3, #0]
    7de8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	4413      	add	r3, r2
    7df4:	b2da      	uxtb	r2, r3
    7df6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfe:	701a      	strb	r2, [r3, #0]
    7e00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	3301      	adds	r3, #1
    7e0c:	b2da      	uxtb	r2, r3
    7e0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e16:	701a      	strb	r2, [r3, #0]
    7e18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2bff      	cmp	r3, #255	; 0xff
    7e24:	d105      	bne.n	7e32 <send_boot+0xd86>
    7e26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2e:	2200      	movs	r2, #0
    7e30:	701a      	strb	r2, [r3, #0]
    7e32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	461a      	mov	r2, r3
    7e3e:	f240 2388 	movw	r3, #648	; 0x288
    7e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e46:	7859      	ldrb	r1, [r3, #1]
    7e48:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e50:	5499      	strb	r1, [r3, r2]
    7e52:	4b7d      	ldr	r3, [pc, #500]	; (8048 <send_boot+0xf9c>)
    7e54:	781a      	ldrb	r2, [r3, #0]
    7e56:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	4413      	add	r3, r2
    7e62:	b2da      	uxtb	r2, r3
    7e64:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6c:	701a      	strb	r2, [r3, #0]
    7e6e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e76:	781a      	ldrb	r2, [r3, #0]
    7e78:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	4413      	add	r3, r2
    7e84:	b2da      	uxtb	r2, r3
    7e86:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e8e:	701a      	strb	r2, [r3, #0]
    7e90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	3301      	adds	r3, #1
    7e9c:	b2da      	uxtb	r2, r3
    7e9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea6:	701a      	strb	r2, [r3, #0]
    7ea8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	2bff      	cmp	r3, #255	; 0xff
    7eb4:	d105      	bne.n	7ec2 <send_boot+0xe16>
    7eb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ebe:	2200      	movs	r2, #0
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	461a      	mov	r2, r3
    7ece:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed6:	7819      	ldrb	r1, [r3, #0]
    7ed8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee0:	5499      	strb	r1, [r3, r2]
    7ee2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	3301      	adds	r3, #1
    7eee:	b2da      	uxtb	r2, r3
    7ef0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef8:	701a      	strb	r2, [r3, #0]
    7efa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	2bff      	cmp	r3, #255	; 0xff
    7f06:	d105      	bne.n	7f14 <send_boot+0xe68>
    7f08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f10:	2200      	movs	r2, #0
    7f12:	701a      	strb	r2, [r3, #0]
    7f14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1c:	781b      	ldrb	r3, [r3, #0]
    7f1e:	461a      	mov	r2, r3
    7f20:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f28:	7819      	ldrb	r1, [r3, #0]
    7f2a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f32:	5499      	strb	r1, [r3, r2]
    7f34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f3c:	781b      	ldrb	r3, [r3, #0]
    7f3e:	3301      	adds	r3, #1
    7f40:	b2da      	uxtb	r2, r3
    7f42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f4a:	701a      	strb	r2, [r3, #0]
    7f4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	2bff      	cmp	r3, #255	; 0xff
    7f58:	d105      	bne.n	7f66 <send_boot+0xeba>
    7f5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f62:	2200      	movs	r2, #0
    7f64:	701a      	strb	r2, [r3, #0]
    7f66:	f242 0339 	movw	r3, #8249	; 0x2039
    7f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f6e:	781b      	ldrb	r3, [r3, #0]
    7f70:	b2db      	uxtb	r3, r3
    7f72:	f003 0310 	and.w	r3, r3, #16
    7f76:	2b00      	cmp	r3, #0
    7f78:	d15a      	bne.n	8030 <send_boot+0xf84>
    7f7a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f82:	781b      	ldrb	r3, [r3, #0]
    7f84:	b2db      	uxtb	r3, r3
    7f86:	461a      	mov	r2, r3
    7f88:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f90:	5c9a      	ldrb	r2, [r3, r2]
    7f92:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    7f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f9a:	701a      	strb	r2, [r3, #0]
    7f9c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    7fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa4:	2200      	movs	r2, #0
    7fa6:	701a      	strb	r2, [r3, #0]
    7fa8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	3301      	adds	r3, #1
    7fb6:	b2da      	uxtb	r2, r3
    7fb8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc0:	701a      	strb	r2, [r3, #0]
    7fc2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fca:	781b      	ldrb	r3, [r3, #0]
    7fcc:	b2db      	uxtb	r3, r3
    7fce:	2bff      	cmp	r3, #255	; 0xff
    7fd0:	d105      	bne.n	7fde <send_boot+0xf32>
    7fd2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fda:	2200      	movs	r2, #0
    7fdc:	701a      	strb	r2, [r3, #0]
    7fde:	f242 0338 	movw	r3, #8248	; 0x2038
    7fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe6:	f242 0238 	movw	r2, #8248	; 0x2038
    7fea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7fee:	7812      	ldrb	r2, [r2, #0]
    7ff0:	b2d2      	uxtb	r2, r2
    7ff2:	f042 0201 	orr.w	r2, r2, #1
    7ff6:	b2d2      	uxtb	r2, r2
    7ff8:	701a      	strb	r2, [r3, #0]
    7ffa:	f242 0339 	movw	r3, #8249	; 0x2039
    7ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8002:	f242 0239 	movw	r2, #8249	; 0x2039
    8006:	f2c2 0200 	movt	r2, #8192	; 0x2000
    800a:	7812      	ldrb	r2, [r2, #0]
    800c:	b2d2      	uxtb	r2, r2
    800e:	f042 0210 	orr.w	r2, r2, #16
    8012:	b2d2      	uxtb	r2, r2
    8014:	701a      	strb	r2, [r3, #0]
    8016:	e00b      	b.n	8030 <send_boot+0xf84>
    8018:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    801c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	3301      	adds	r3, #1
    8024:	b2da      	uxtb	r2, r3
    8026:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    802a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    802e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8030:	f240 2381 	movw	r3, #641	; 0x281
    8034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8038:	2200      	movs	r2, #0
    803a:	701a      	strb	r2, [r3, #0]
  }
}
    803c:	46bd      	mov	sp, r7
    803e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8042:	4770      	bx	lr
    8044:	20000287 	.word	0x20000287
    8048:	20000289 	.word	0x20000289

0000804c <send_attitude>:
void send_attitude(void){ //499ms
    804c:	b480      	push	{r7}
    804e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8050:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	3301      	adds	r3, #1
    805c:	b2da      	uxtb	r2, r3
    805e:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8066:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8068:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    806c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	2bfa      	cmp	r3, #250	; 0xfa
    8074:	d105      	bne.n	8082 <send_attitude+0x36>
    8076:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    807a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807e:	2200      	movs	r2, #0
    8080:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8082:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    808a:	781a      	ldrb	r2, [r3, #0]
    808c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8090:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8094:	fba3 1302 	umull	r1, r3, r3, r2
    8098:	0899      	lsrs	r1, r3, #2
    809a:	460b      	mov	r3, r1
    809c:	009b      	lsls	r3, r3, #2
    809e:	440b      	add	r3, r1
    80a0:	1ad3      	subs	r3, r2, r3
    80a2:	b2db      	uxtb	r3, r3
    80a4:	2b00      	cmp	r3, #0
    80a6:	f040 84c1 	bne.w	8a2c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    80aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b2:	781a      	ldrb	r2, [r3, #0]
    80b4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    80b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80bc:	781b      	ldrb	r3, [r3, #0]
    80be:	b2db      	uxtb	r3, r3
    80c0:	429a      	cmp	r2, r3
    80c2:	d313      	bcc.n	80ec <send_attitude+0xa0>
    80c4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    80c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	b2db      	uxtb	r3, r3
    80d0:	461a      	mov	r2, r3
    80d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	1ad3      	subs	r3, r2, r3
    80de:	33ff      	adds	r3, #255	; 0xff
    80e0:	2b10      	cmp	r3, #16
    80e2:	bfd4      	ite	le
    80e4:	2300      	movle	r3, #0
    80e6:	2301      	movgt	r3, #1
    80e8:	b2db      	uxtb	r3, r3
    80ea:	e011      	b.n	8110 <send_attitude+0xc4>
    80ec:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    80f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	b2db      	uxtb	r3, r3
    80f8:	461a      	mov	r2, r3
    80fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8102:	781b      	ldrb	r3, [r3, #0]
    8104:	1ad3      	subs	r3, r2, r3
    8106:	2b10      	cmp	r3, #16
    8108:	bfd4      	ite	le
    810a:	2300      	movle	r3, #0
    810c:	2301      	movgt	r3, #1
    810e:	b2db      	uxtb	r3, r3
    8110:	2b00      	cmp	r3, #0
    8112:	f000 847f 	beq.w	8a14 <send_attitude+0x9c8>
    8116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    811a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	461a      	mov	r2, r3
    8122:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812a:	2105      	movs	r1, #5
    812c:	5499      	strb	r1, [r3, r2]
    812e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8136:	781b      	ldrb	r3, [r3, #0]
    8138:	3301      	adds	r3, #1
    813a:	b2da      	uxtb	r2, r3
    813c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8144:	701a      	strb	r2, [r3, #0]
    8146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    814a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    814e:	781b      	ldrb	r3, [r3, #0]
    8150:	2bff      	cmp	r3, #255	; 0xff
    8152:	d105      	bne.n	8160 <send_attitude+0x114>
    8154:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815c:	2200      	movs	r2, #0
    815e:	701a      	strb	r2, [r3, #0]
    8160:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8168:	781b      	ldrb	r3, [r3, #0]
    816a:	461a      	mov	r2, r3
    816c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8174:	2106      	movs	r1, #6
    8176:	5499      	strb	r1, [r3, r2]
    8178:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    817c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	3301      	adds	r3, #1
    8184:	b2da      	uxtb	r2, r3
    8186:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    818a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818e:	701a      	strb	r2, [r3, #0]
    8190:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8198:	781b      	ldrb	r3, [r3, #0]
    819a:	2bff      	cmp	r3, #255	; 0xff
    819c:	d105      	bne.n	81aa <send_attitude+0x15e>
    819e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a6:	2200      	movs	r2, #0
    81a8:	701a      	strb	r2, [r3, #0]
    81aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b2:	2206      	movs	r2, #6
    81b4:	701a      	strb	r2, [r3, #0]
    81b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    81ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81be:	2206      	movs	r2, #6
    81c0:	701a      	strb	r2, [r3, #0]
    81c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ca:	781b      	ldrb	r3, [r3, #0]
    81cc:	461a      	mov	r2, r3
    81ce:	f24b 0370 	movw	r3, #45168	; 0xb070
    81d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d6:	7819      	ldrb	r1, [r3, #0]
    81d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    81dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e0:	5499      	strb	r1, [r3, r2]
    81e2:	f24b 0370 	movw	r3, #45168	; 0xb070
    81e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ea:	781a      	ldrb	r2, [r3, #0]
    81ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	4413      	add	r3, r2
    81f8:	b2da      	uxtb	r2, r3
    81fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8202:	701a      	strb	r2, [r3, #0]
    8204:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820c:	781a      	ldrb	r2, [r3, #0]
    820e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	4413      	add	r3, r2
    821a:	b2da      	uxtb	r2, r3
    821c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8224:	701a      	strb	r2, [r3, #0]
    8226:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    822a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	3301      	adds	r3, #1
    8232:	b2da      	uxtb	r2, r3
    8234:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823c:	701a      	strb	r2, [r3, #0]
    823e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8246:	781b      	ldrb	r3, [r3, #0]
    8248:	2bff      	cmp	r3, #255	; 0xff
    824a:	d105      	bne.n	8258 <send_attitude+0x20c>
    824c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8254:	2200      	movs	r2, #0
    8256:	701a      	strb	r2, [r3, #0]
    8258:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	461a      	mov	r2, r3
    8264:	f24b 0370 	movw	r3, #45168	; 0xb070
    8268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826c:	7859      	ldrb	r1, [r3, #1]
    826e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8276:	5499      	strb	r1, [r3, r2]
    8278:	4bd1      	ldr	r3, [pc, #836]	; (85c0 <send_attitude+0x574>)
    827a:	781a      	ldrb	r2, [r3, #0]
    827c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	4413      	add	r3, r2
    8288:	b2da      	uxtb	r2, r3
    828a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    828e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8292:	701a      	strb	r2, [r3, #0]
    8294:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829c:	781a      	ldrb	r2, [r3, #0]
    829e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    82a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	4413      	add	r3, r2
    82aa:	b2da      	uxtb	r2, r3
    82ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    82b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b4:	701a      	strb	r2, [r3, #0]
    82b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82be:	781b      	ldrb	r3, [r3, #0]
    82c0:	3301      	adds	r3, #1
    82c2:	b2da      	uxtb	r2, r3
    82c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82cc:	701a      	strb	r2, [r3, #0]
    82ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2bff      	cmp	r3, #255	; 0xff
    82da:	d105      	bne.n	82e8 <send_attitude+0x29c>
    82dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e4:	2200      	movs	r2, #0
    82e6:	701a      	strb	r2, [r3, #0]
    82e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	461a      	mov	r2, r3
    82f4:	f24b 0370 	movw	r3, #45168	; 0xb070
    82f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fc:	7899      	ldrb	r1, [r3, #2]
    82fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8306:	5499      	strb	r1, [r3, r2]
    8308:	4bae      	ldr	r3, [pc, #696]	; (85c4 <send_attitude+0x578>)
    830a:	781a      	ldrb	r2, [r3, #0]
    830c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	781b      	ldrb	r3, [r3, #0]
    8316:	4413      	add	r3, r2
    8318:	b2da      	uxtb	r2, r3
    831a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    831e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8322:	701a      	strb	r2, [r3, #0]
    8324:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832c:	781a      	ldrb	r2, [r3, #0]
    832e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	4413      	add	r3, r2
    833a:	b2da      	uxtb	r2, r3
    833c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	701a      	strb	r2, [r3, #0]
    8346:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	781b      	ldrb	r3, [r3, #0]
    8350:	3301      	adds	r3, #1
    8352:	b2da      	uxtb	r2, r3
    8354:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	701a      	strb	r2, [r3, #0]
    835e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	2bff      	cmp	r3, #255	; 0xff
    836a:	d105      	bne.n	8378 <send_attitude+0x32c>
    836c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	2200      	movs	r2, #0
    8376:	701a      	strb	r2, [r3, #0]
    8378:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    837c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	461a      	mov	r2, r3
    8384:	f24b 0370 	movw	r3, #45168	; 0xb070
    8388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838c:	78d9      	ldrb	r1, [r3, #3]
    838e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	5499      	strb	r1, [r3, r2]
    8398:	4b8b      	ldr	r3, [pc, #556]	; (85c8 <send_attitude+0x57c>)
    839a:	781a      	ldrb	r2, [r3, #0]
    839c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	4413      	add	r3, r2
    83a8:	b2da      	uxtb	r2, r3
    83aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b2:	701a      	strb	r2, [r3, #0]
    83b4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    83b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83bc:	781a      	ldrb	r2, [r3, #0]
    83be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c6:	781b      	ldrb	r3, [r3, #0]
    83c8:	4413      	add	r3, r2
    83ca:	b2da      	uxtb	r2, r3
    83cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    83d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d4:	701a      	strb	r2, [r3, #0]
    83d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83de:	781b      	ldrb	r3, [r3, #0]
    83e0:	3301      	adds	r3, #1
    83e2:	b2da      	uxtb	r2, r3
    83e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ec:	701a      	strb	r2, [r3, #0]
    83ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	2bff      	cmp	r3, #255	; 0xff
    83fa:	d105      	bne.n	8408 <send_attitude+0x3bc>
    83fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8404:	2200      	movs	r2, #0
    8406:	701a      	strb	r2, [r3, #0]
    8408:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    840c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8410:	781b      	ldrb	r3, [r3, #0]
    8412:	461a      	mov	r2, r3
    8414:	f24b 0374 	movw	r3, #45172	; 0xb074
    8418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    841c:	7819      	ldrb	r1, [r3, #0]
    841e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8426:	5499      	strb	r1, [r3, r2]
    8428:	f24b 0374 	movw	r3, #45172	; 0xb074
    842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8430:	781a      	ldrb	r2, [r3, #0]
    8432:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	4413      	add	r3, r2
    843e:	b2da      	uxtb	r2, r3
    8440:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	781a      	ldrb	r2, [r3, #0]
    8454:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	4413      	add	r3, r2
    8460:	b2da      	uxtb	r2, r3
    8462:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	3301      	adds	r3, #1
    8478:	b2da      	uxtb	r2, r3
    847a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8482:	701a      	strb	r2, [r3, #0]
    8484:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	2bff      	cmp	r3, #255	; 0xff
    8490:	d105      	bne.n	849e <send_attitude+0x452>
    8492:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849a:	2200      	movs	r2, #0
    849c:	701a      	strb	r2, [r3, #0]
    849e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a6:	781b      	ldrb	r3, [r3, #0]
    84a8:	461a      	mov	r2, r3
    84aa:	f24b 0374 	movw	r3, #45172	; 0xb074
    84ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b2:	7859      	ldrb	r1, [r3, #1]
    84b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    84b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84bc:	5499      	strb	r1, [r3, r2]
    84be:	4b43      	ldr	r3, [pc, #268]	; (85cc <send_attitude+0x580>)
    84c0:	781a      	ldrb	r2, [r3, #0]
    84c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	4413      	add	r3, r2
    84ce:	b2da      	uxtb	r2, r3
    84d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d8:	701a      	strb	r2, [r3, #0]
    84da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    84de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e2:	781a      	ldrb	r2, [r3, #0]
    84e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	4413      	add	r3, r2
    84f0:	b2da      	uxtb	r2, r3
    84f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    84f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	3301      	adds	r3, #1
    8508:	b2da      	uxtb	r2, r3
    850a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    850e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8512:	701a      	strb	r2, [r3, #0]
    8514:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	2bff      	cmp	r3, #255	; 0xff
    8520:	d105      	bne.n	852e <send_attitude+0x4e2>
    8522:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    852a:	2200      	movs	r2, #0
    852c:	701a      	strb	r2, [r3, #0]
    852e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	461a      	mov	r2, r3
    853a:	f24b 0374 	movw	r3, #45172	; 0xb074
    853e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8542:	7899      	ldrb	r1, [r3, #2]
    8544:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854c:	5499      	strb	r1, [r3, r2]
    854e:	4b20      	ldr	r3, [pc, #128]	; (85d0 <send_attitude+0x584>)
    8550:	781a      	ldrb	r2, [r3, #0]
    8552:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855a:	781b      	ldrb	r3, [r3, #0]
    855c:	4413      	add	r3, r2
    855e:	b2da      	uxtb	r2, r3
    8560:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8568:	701a      	strb	r2, [r3, #0]
    856a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    856e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8572:	781a      	ldrb	r2, [r3, #0]
    8574:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	4413      	add	r3, r2
    8580:	b2da      	uxtb	r2, r3
    8582:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    858a:	701a      	strb	r2, [r3, #0]
    858c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	3301      	adds	r3, #1
    8598:	b2da      	uxtb	r2, r3
    859a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    859e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a2:	701a      	strb	r2, [r3, #0]
    85a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ac:	781b      	ldrb	r3, [r3, #0]
    85ae:	2bff      	cmp	r3, #255	; 0xff
    85b0:	d110      	bne.n	85d4 <send_attitude+0x588>
    85b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ba:	2200      	movs	r2, #0
    85bc:	701a      	strb	r2, [r3, #0]
    85be:	e009      	b.n	85d4 <send_attitude+0x588>
    85c0:	2000b071 	.word	0x2000b071
    85c4:	2000b072 	.word	0x2000b072
    85c8:	2000b073 	.word	0x2000b073
    85cc:	2000b075 	.word	0x2000b075
    85d0:	2000b076 	.word	0x2000b076
    85d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85dc:	781b      	ldrb	r3, [r3, #0]
    85de:	461a      	mov	r2, r3
    85e0:	f24b 0374 	movw	r3, #45172	; 0xb074
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	78d9      	ldrb	r1, [r3, #3]
    85ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    85ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f2:	5499      	strb	r1, [r3, r2]
    85f4:	4bc2      	ldr	r3, [pc, #776]	; (8900 <send_attitude+0x8b4>)
    85f6:	781a      	ldrb	r2, [r3, #0]
    85f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8600:	781b      	ldrb	r3, [r3, #0]
    8602:	4413      	add	r3, r2
    8604:	b2da      	uxtb	r2, r3
    8606:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    860a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    860e:	701a      	strb	r2, [r3, #0]
    8610:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8618:	781a      	ldrb	r2, [r3, #0]
    861a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    861e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8622:	781b      	ldrb	r3, [r3, #0]
    8624:	4413      	add	r3, r2
    8626:	b2da      	uxtb	r2, r3
    8628:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8630:	701a      	strb	r2, [r3, #0]
    8632:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    863a:	781b      	ldrb	r3, [r3, #0]
    863c:	3301      	adds	r3, #1
    863e:	b2da      	uxtb	r2, r3
    8640:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8648:	701a      	strb	r2, [r3, #0]
    864a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    864e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8652:	781b      	ldrb	r3, [r3, #0]
    8654:	2bff      	cmp	r3, #255	; 0xff
    8656:	d105      	bne.n	8664 <send_attitude+0x618>
    8658:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    865c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8660:	2200      	movs	r2, #0
    8662:	701a      	strb	r2, [r3, #0]
    8664:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    866c:	781b      	ldrb	r3, [r3, #0]
    866e:	461a      	mov	r2, r3
    8670:	f24b 0378 	movw	r3, #45176	; 0xb078
    8674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8678:	7819      	ldrb	r1, [r3, #0]
    867a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    867e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8682:	5499      	strb	r1, [r3, r2]
    8684:	f24b 0378 	movw	r3, #45176	; 0xb078
    8688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868c:	781a      	ldrb	r2, [r3, #0]
    868e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8696:	781b      	ldrb	r3, [r3, #0]
    8698:	4413      	add	r3, r2
    869a:	b2da      	uxtb	r2, r3
    869c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    86a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a4:	701a      	strb	r2, [r3, #0]
    86a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    86aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ae:	781a      	ldrb	r2, [r3, #0]
    86b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    86b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	4413      	add	r3, r2
    86bc:	b2da      	uxtb	r2, r3
    86be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	701a      	strb	r2, [r3, #0]
    86c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	3301      	adds	r3, #1
    86d4:	b2da      	uxtb	r2, r3
    86d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86de:	701a      	strb	r2, [r3, #0]
    86e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e8:	781b      	ldrb	r3, [r3, #0]
    86ea:	2bff      	cmp	r3, #255	; 0xff
    86ec:	d105      	bne.n	86fa <send_attitude+0x6ae>
    86ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f6:	2200      	movs	r2, #0
    86f8:	701a      	strb	r2, [r3, #0]
    86fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8702:	781b      	ldrb	r3, [r3, #0]
    8704:	461a      	mov	r2, r3
    8706:	f24b 0378 	movw	r3, #45176	; 0xb078
    870a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870e:	7859      	ldrb	r1, [r3, #1]
    8710:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8718:	5499      	strb	r1, [r3, r2]
    871a:	4b7a      	ldr	r3, [pc, #488]	; (8904 <send_attitude+0x8b8>)
    871c:	781a      	ldrb	r2, [r3, #0]
    871e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8726:	781b      	ldrb	r3, [r3, #0]
    8728:	4413      	add	r3, r2
    872a:	b2da      	uxtb	r2, r3
    872c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8734:	701a      	strb	r2, [r3, #0]
    8736:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    873a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873e:	781a      	ldrb	r2, [r3, #0]
    8740:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	4413      	add	r3, r2
    874c:	b2da      	uxtb	r2, r3
    874e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    875c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	3301      	adds	r3, #1
    8764:	b2da      	uxtb	r2, r3
    8766:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    876a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876e:	701a      	strb	r2, [r3, #0]
    8770:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2bff      	cmp	r3, #255	; 0xff
    877c:	d105      	bne.n	878a <send_attitude+0x73e>
    877e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8786:	2200      	movs	r2, #0
    8788:	701a      	strb	r2, [r3, #0]
    878a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    878e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	461a      	mov	r2, r3
    8796:	f24b 0378 	movw	r3, #45176	; 0xb078
    879a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879e:	7899      	ldrb	r1, [r3, #2]
    87a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    87a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a8:	5499      	strb	r1, [r3, r2]
    87aa:	4b57      	ldr	r3, [pc, #348]	; (8908 <send_attitude+0x8bc>)
    87ac:	781a      	ldrb	r2, [r3, #0]
    87ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	4413      	add	r3, r2
    87ba:	b2da      	uxtb	r2, r3
    87bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c4:	701a      	strb	r2, [r3, #0]
    87c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    87ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ce:	781a      	ldrb	r2, [r3, #0]
    87d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d8:	781b      	ldrb	r3, [r3, #0]
    87da:	4413      	add	r3, r2
    87dc:	b2da      	uxtb	r2, r3
    87de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    87e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	3301      	adds	r3, #1
    87f4:	b2da      	uxtb	r2, r3
    87f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fe:	701a      	strb	r2, [r3, #0]
    8800:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8808:	781b      	ldrb	r3, [r3, #0]
    880a:	2bff      	cmp	r3, #255	; 0xff
    880c:	d105      	bne.n	881a <send_attitude+0x7ce>
    880e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8816:	2200      	movs	r2, #0
    8818:	701a      	strb	r2, [r3, #0]
    881a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    881e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	461a      	mov	r2, r3
    8826:	f24b 0378 	movw	r3, #45176	; 0xb078
    882a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882e:	78d9      	ldrb	r1, [r3, #3]
    8830:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8838:	5499      	strb	r1, [r3, r2]
    883a:	4b34      	ldr	r3, [pc, #208]	; (890c <send_attitude+0x8c0>)
    883c:	781a      	ldrb	r2, [r3, #0]
    883e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	4413      	add	r3, r2
    884a:	b2da      	uxtb	r2, r3
    884c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8854:	701a      	strb	r2, [r3, #0]
    8856:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    885a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885e:	781a      	ldrb	r2, [r3, #0]
    8860:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8868:	781b      	ldrb	r3, [r3, #0]
    886a:	4413      	add	r3, r2
    886c:	b2da      	uxtb	r2, r3
    886e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8876:	701a      	strb	r2, [r3, #0]
    8878:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    887c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8880:	781b      	ldrb	r3, [r3, #0]
    8882:	3301      	adds	r3, #1
    8884:	b2da      	uxtb	r2, r3
    8886:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    888a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    888e:	701a      	strb	r2, [r3, #0]
    8890:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8898:	781b      	ldrb	r3, [r3, #0]
    889a:	2bff      	cmp	r3, #255	; 0xff
    889c:	d105      	bne.n	88aa <send_attitude+0x85e>
    889e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a6:	2200      	movs	r2, #0
    88a8:	701a      	strb	r2, [r3, #0]
    88aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b2:	781b      	ldrb	r3, [r3, #0]
    88b4:	461a      	mov	r2, r3
    88b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    88ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88be:	7819      	ldrb	r1, [r3, #0]
    88c0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    88c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c8:	5499      	strb	r1, [r3, r2]
    88ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	3301      	adds	r3, #1
    88d6:	b2da      	uxtb	r2, r3
    88d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e0:	701a      	strb	r2, [r3, #0]
    88e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	2bff      	cmp	r3, #255	; 0xff
    88ee:	d10f      	bne.n	8910 <send_attitude+0x8c4>
    88f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f8:	2200      	movs	r2, #0
    88fa:	701a      	strb	r2, [r3, #0]
    88fc:	e008      	b.n	8910 <send_attitude+0x8c4>
    88fe:	bf00      	nop
    8900:	2000b077 	.word	0x2000b077
    8904:	2000b079 	.word	0x2000b079
    8908:	2000b07a 	.word	0x2000b07a
    890c:	2000b07b 	.word	0x2000b07b
    8910:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8918:	781b      	ldrb	r3, [r3, #0]
    891a:	461a      	mov	r2, r3
    891c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8924:	7819      	ldrb	r1, [r3, #0]
    8926:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    892a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892e:	5499      	strb	r1, [r3, r2]
    8930:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	3301      	adds	r3, #1
    893c:	b2da      	uxtb	r2, r3
    893e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8946:	701a      	strb	r2, [r3, #0]
    8948:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    894c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	2bff      	cmp	r3, #255	; 0xff
    8954:	d105      	bne.n	8962 <send_attitude+0x916>
    8956:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    895a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895e:	2200      	movs	r2, #0
    8960:	701a      	strb	r2, [r3, #0]
    8962:	f242 0339 	movw	r3, #8249	; 0x2039
    8966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	b2db      	uxtb	r3, r3
    896e:	f003 0310 	and.w	r3, r3, #16
    8972:	2b00      	cmp	r3, #0
    8974:	d15a      	bne.n	8a2c <send_attitude+0x9e0>
    8976:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    897a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	b2db      	uxtb	r3, r3
    8982:	461a      	mov	r2, r3
    8984:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898c:	5c9a      	ldrb	r2, [r3, r2]
    898e:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    8992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8996:	701a      	strb	r2, [r3, #0]
    8998:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    899c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a0:	2200      	movs	r2, #0
    89a2:	701a      	strb	r2, [r3, #0]
    89a4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	b2db      	uxtb	r3, r3
    89b0:	3301      	adds	r3, #1
    89b2:	b2da      	uxtb	r2, r3
    89b4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89bc:	701a      	strb	r2, [r3, #0]
    89be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	b2db      	uxtb	r3, r3
    89ca:	2bff      	cmp	r3, #255	; 0xff
    89cc:	d105      	bne.n	89da <send_attitude+0x98e>
    89ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d6:	2200      	movs	r2, #0
    89d8:	701a      	strb	r2, [r3, #0]
    89da:	f242 0338 	movw	r3, #8248	; 0x2038
    89de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e2:	f242 0238 	movw	r2, #8248	; 0x2038
    89e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    89ea:	7812      	ldrb	r2, [r2, #0]
    89ec:	b2d2      	uxtb	r2, r2
    89ee:	f042 0201 	orr.w	r2, r2, #1
    89f2:	b2d2      	uxtb	r2, r2
    89f4:	701a      	strb	r2, [r3, #0]
    89f6:	f242 0339 	movw	r3, #8249	; 0x2039
    89fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89fe:	f242 0239 	movw	r2, #8249	; 0x2039
    8a02:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8a06:	7812      	ldrb	r2, [r2, #0]
    8a08:	b2d2      	uxtb	r2, r2
    8a0a:	f042 0210 	orr.w	r2, r2, #16
    8a0e:	b2d2      	uxtb	r2, r2
    8a10:	701a      	strb	r2, [r3, #0]
    8a12:	e00b      	b.n	8a2c <send_attitude+0x9e0>
    8a14:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1c:	781b      	ldrb	r3, [r3, #0]
    8a1e:	3301      	adds	r3, #1
    8a20:	b2da      	uxtb	r2, r3
    8a22:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a2a:	701a      	strb	r2, [r3, #0]
  }
}
    8a2c:	46bd      	mov	sp, r7
    8a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a32:	4770      	bx	lr

00008a34 <send_adc>:
  
void send_adc(void){  //500ms
    8a34:	b480      	push	{r7}
    8a36:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8a38:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a40:	781a      	ldrb	r2, [r3, #0]
    8a42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8a46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8a4a:	fba3 1302 	umull	r1, r3, r3, r2
    8a4e:	0899      	lsrs	r1, r3, #2
    8a50:	460b      	mov	r3, r1
    8a52:	009b      	lsls	r3, r3, #2
    8a54:	440b      	add	r3, r1
    8a56:	1ad3      	subs	r3, r2, r3
    8a58:	b2db      	uxtb	r3, r3
    8a5a:	2b01      	cmp	r3, #1
    8a5c:	f040 8269 	bne.w	8f32 <send_adc+0x4fe>
    8a60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a68:	781a      	ldrb	r2, [r3, #0]
    8a6a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a72:	781b      	ldrb	r3, [r3, #0]
    8a74:	b2db      	uxtb	r3, r3
    8a76:	429a      	cmp	r2, r3
    8a78:	d313      	bcc.n	8aa2 <send_adc+0x6e>
    8a7a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	b2db      	uxtb	r3, r3
    8a86:	461a      	mov	r2, r3
    8a88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	1ad3      	subs	r3, r2, r3
    8a94:	33ff      	adds	r3, #255	; 0xff
    8a96:	2b08      	cmp	r3, #8
    8a98:	bfd4      	ite	le
    8a9a:	2300      	movle	r3, #0
    8a9c:	2301      	movgt	r3, #1
    8a9e:	b2db      	uxtb	r3, r3
    8aa0:	e011      	b.n	8ac6 <send_adc+0x92>
    8aa2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aaa:	781b      	ldrb	r3, [r3, #0]
    8aac:	b2db      	uxtb	r3, r3
    8aae:	461a      	mov	r2, r3
    8ab0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	1ad3      	subs	r3, r2, r3
    8abc:	2b08      	cmp	r3, #8
    8abe:	bfd4      	ite	le
    8ac0:	2300      	movle	r3, #0
    8ac2:	2301      	movgt	r3, #1
    8ac4:	b2db      	uxtb	r3, r3
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	f000 8227 	beq.w	8f1a <send_adc+0x4e6>
    8acc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	461a      	mov	r2, r3
    8ad8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae0:	2105      	movs	r1, #5
    8ae2:	5499      	strb	r1, [r3, r2]
    8ae4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aec:	781b      	ldrb	r3, [r3, #0]
    8aee:	3301      	adds	r3, #1
    8af0:	b2da      	uxtb	r2, r3
    8af2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afa:	701a      	strb	r2, [r3, #0]
    8afc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b04:	781b      	ldrb	r3, [r3, #0]
    8b06:	2bff      	cmp	r3, #255	; 0xff
    8b08:	d105      	bne.n	8b16 <send_adc+0xe2>
    8b0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b12:	2200      	movs	r2, #0
    8b14:	701a      	strb	r2, [r3, #0]
    8b16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1e:	781b      	ldrb	r3, [r3, #0]
    8b20:	461a      	mov	r2, r3
    8b22:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2a:	2107      	movs	r1, #7
    8b2c:	5499      	strb	r1, [r3, r2]
    8b2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b36:	781b      	ldrb	r3, [r3, #0]
    8b38:	3301      	adds	r3, #1
    8b3a:	b2da      	uxtb	r2, r3
    8b3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b44:	701a      	strb	r2, [r3, #0]
    8b46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	2bff      	cmp	r3, #255	; 0xff
    8b52:	d105      	bne.n	8b60 <send_adc+0x12c>
    8b54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b5c:	2200      	movs	r2, #0
    8b5e:	701a      	strb	r2, [r3, #0]
    8b60:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b68:	2207      	movs	r2, #7
    8b6a:	701a      	strb	r2, [r3, #0]
    8b6c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b74:	2207      	movs	r2, #7
    8b76:	701a      	strb	r2, [r3, #0]
    8b78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	461a      	mov	r2, r3
    8b84:	f64a 5350 	movw	r3, #44368	; 0xad50
    8b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b8c:	7819      	ldrb	r1, [r3, #0]
    8b8e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b96:	5499      	strb	r1, [r3, r2]
    8b98:	f64a 5350 	movw	r3, #44368	; 0xad50
    8b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba0:	781a      	ldrb	r2, [r3, #0]
    8ba2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	4413      	add	r3, r2
    8bae:	b2da      	uxtb	r2, r3
    8bb0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb8:	701a      	strb	r2, [r3, #0]
    8bba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc2:	781a      	ldrb	r2, [r3, #0]
    8bc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	4413      	add	r3, r2
    8bd0:	b2da      	uxtb	r2, r3
    8bd2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bda:	701a      	strb	r2, [r3, #0]
    8bdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	3301      	adds	r3, #1
    8be8:	b2da      	uxtb	r2, r3
    8bea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf2:	701a      	strb	r2, [r3, #0]
    8bf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfc:	781b      	ldrb	r3, [r3, #0]
    8bfe:	2bff      	cmp	r3, #255	; 0xff
    8c00:	d105      	bne.n	8c0e <send_adc+0x1da>
    8c02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0a:	2200      	movs	r2, #0
    8c0c:	701a      	strb	r2, [r3, #0]
    8c0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c16:	781b      	ldrb	r3, [r3, #0]
    8c18:	461a      	mov	r2, r3
    8c1a:	f64a 5350 	movw	r3, #44368	; 0xad50
    8c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c22:	7859      	ldrb	r1, [r3, #1]
    8c24:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2c:	5499      	strb	r1, [r3, r2]
    8c2e:	4bc3      	ldr	r3, [pc, #780]	; (8f3c <send_adc+0x508>)
    8c30:	781a      	ldrb	r2, [r3, #0]
    8c32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	4413      	add	r3, r2
    8c3e:	b2da      	uxtb	r2, r3
    8c40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c48:	701a      	strb	r2, [r3, #0]
    8c4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c52:	781a      	ldrb	r2, [r3, #0]
    8c54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5c:	781b      	ldrb	r3, [r3, #0]
    8c5e:	4413      	add	r3, r2
    8c60:	b2da      	uxtb	r2, r3
    8c62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c6a:	701a      	strb	r2, [r3, #0]
    8c6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c74:	781b      	ldrb	r3, [r3, #0]
    8c76:	3301      	adds	r3, #1
    8c78:	b2da      	uxtb	r2, r3
    8c7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c82:	701a      	strb	r2, [r3, #0]
    8c84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2bff      	cmp	r3, #255	; 0xff
    8c90:	d105      	bne.n	8c9e <send_adc+0x26a>
    8c92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c9a:	2200      	movs	r2, #0
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	461a      	mov	r2, r3
    8caa:	f64a 5352 	movw	r3, #44370	; 0xad52
    8cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb2:	7819      	ldrb	r1, [r3, #0]
    8cb4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cbc:	5499      	strb	r1, [r3, r2]
    8cbe:	f64a 5352 	movw	r3, #44370	; 0xad52
    8cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc6:	781a      	ldrb	r2, [r3, #0]
    8cc8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	4413      	add	r3, r2
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cde:	701a      	strb	r2, [r3, #0]
    8ce0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce8:	781a      	ldrb	r2, [r3, #0]
    8cea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	4413      	add	r3, r2
    8cf6:	b2da      	uxtb	r2, r3
    8cf8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	3301      	adds	r3, #1
    8d0e:	b2da      	uxtb	r2, r3
    8d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d18:	701a      	strb	r2, [r3, #0]
    8d1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2bff      	cmp	r3, #255	; 0xff
    8d26:	d105      	bne.n	8d34 <send_adc+0x300>
    8d28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
    8d34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	461a      	mov	r2, r3
    8d40:	f64a 5352 	movw	r3, #44370	; 0xad52
    8d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d48:	7859      	ldrb	r1, [r3, #1]
    8d4a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	5499      	strb	r1, [r3, r2]
    8d54:	4b7a      	ldr	r3, [pc, #488]	; (8f40 <send_adc+0x50c>)
    8d56:	781a      	ldrb	r2, [r3, #0]
    8d58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d60:	781b      	ldrb	r3, [r3, #0]
    8d62:	4413      	add	r3, r2
    8d64:	b2da      	uxtb	r2, r3
    8d66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6e:	701a      	strb	r2, [r3, #0]
    8d70:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d78:	781a      	ldrb	r2, [r3, #0]
    8d7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	4413      	add	r3, r2
    8d86:	b2da      	uxtb	r2, r3
    8d88:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	3301      	adds	r3, #1
    8d9e:	b2da      	uxtb	r2, r3
    8da0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da8:	701a      	strb	r2, [r3, #0]
    8daa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	2bff      	cmp	r3, #255	; 0xff
    8db6:	d105      	bne.n	8dc4 <send_adc+0x390>
    8db8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc0:	2200      	movs	r2, #0
    8dc2:	701a      	strb	r2, [r3, #0]
    8dc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	461a      	mov	r2, r3
    8dd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd8:	7819      	ldrb	r1, [r3, #0]
    8dda:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de2:	5499      	strb	r1, [r3, r2]
    8de4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	3301      	adds	r3, #1
    8df0:	b2da      	uxtb	r2, r3
    8df2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfa:	701a      	strb	r2, [r3, #0]
    8dfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e04:	781b      	ldrb	r3, [r3, #0]
    8e06:	2bff      	cmp	r3, #255	; 0xff
    8e08:	d105      	bne.n	8e16 <send_adc+0x3e2>
    8e0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e12:	2200      	movs	r2, #0
    8e14:	701a      	strb	r2, [r3, #0]
    8e16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1e:	781b      	ldrb	r3, [r3, #0]
    8e20:	461a      	mov	r2, r3
    8e22:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e2a:	7819      	ldrb	r1, [r3, #0]
    8e2c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e34:	5499      	strb	r1, [r3, r2]
    8e36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	3301      	adds	r3, #1
    8e42:	b2da      	uxtb	r2, r3
    8e44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4c:	701a      	strb	r2, [r3, #0]
    8e4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e56:	781b      	ldrb	r3, [r3, #0]
    8e58:	2bff      	cmp	r3, #255	; 0xff
    8e5a:	d105      	bne.n	8e68 <send_adc+0x434>
    8e5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e64:	2200      	movs	r2, #0
    8e66:	701a      	strb	r2, [r3, #0]
    8e68:	f242 0339 	movw	r3, #8249	; 0x2039
    8e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	b2db      	uxtb	r3, r3
    8e74:	f003 0310 	and.w	r3, r3, #16
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d15a      	bne.n	8f32 <send_adc+0x4fe>
    8e7c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	b2db      	uxtb	r3, r3
    8e88:	461a      	mov	r2, r3
    8e8a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e92:	5c9a      	ldrb	r2, [r3, r2]
    8e94:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    8e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9c:	701a      	strb	r2, [r3, #0]
    8e9e:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    8ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea6:	2200      	movs	r2, #0
    8ea8:	701a      	strb	r2, [r3, #0]
    8eaa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	b2db      	uxtb	r3, r3
    8eb6:	3301      	adds	r3, #1
    8eb8:	b2da      	uxtb	r2, r3
    8eba:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec2:	701a      	strb	r2, [r3, #0]
    8ec4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	b2db      	uxtb	r3, r3
    8ed0:	2bff      	cmp	r3, #255	; 0xff
    8ed2:	d105      	bne.n	8ee0 <send_adc+0x4ac>
    8ed4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8edc:	2200      	movs	r2, #0
    8ede:	701a      	strb	r2, [r3, #0]
    8ee0:	f242 0338 	movw	r3, #8248	; 0x2038
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	f242 0238 	movw	r2, #8248	; 0x2038
    8eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ef0:	7812      	ldrb	r2, [r2, #0]
    8ef2:	b2d2      	uxtb	r2, r2
    8ef4:	f042 0201 	orr.w	r2, r2, #1
    8ef8:	b2d2      	uxtb	r2, r2
    8efa:	701a      	strb	r2, [r3, #0]
    8efc:	f242 0339 	movw	r3, #8249	; 0x2039
    8f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f04:	f242 0239 	movw	r2, #8249	; 0x2039
    8f08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f0c:	7812      	ldrb	r2, [r2, #0]
    8f0e:	b2d2      	uxtb	r2, r2
    8f10:	f042 0210 	orr.w	r2, r2, #16
    8f14:	b2d2      	uxtb	r2, r2
    8f16:	701a      	strb	r2, [r3, #0]
    8f18:	e00b      	b.n	8f32 <send_adc+0x4fe>
    8f1a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f22:	781b      	ldrb	r3, [r3, #0]
    8f24:	3301      	adds	r3, #1
    8f26:	b2da      	uxtb	r2, r3
    8f28:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f30:	701a      	strb	r2, [r3, #0]
}
    8f32:	46bd      	mov	sp, r7
    8f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f38:	4770      	bx	lr
    8f3a:	bf00      	nop
    8f3c:	2000ad51 	.word	0x2000ad51
    8f40:	2000ad53 	.word	0x2000ad53

00008f44 <send_settings>:
void send_settings(void){ //500ms
    8f44:	b480      	push	{r7}
    8f46:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    8f48:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f50:	781a      	ldrb	r2, [r3, #0]
    8f52:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f56:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f5a:	fba3 1302 	umull	r1, r3, r3, r2
    8f5e:	0899      	lsrs	r1, r3, #2
    8f60:	460b      	mov	r3, r1
    8f62:	009b      	lsls	r3, r3, #2
    8f64:	440b      	add	r3, r1
    8f66:	1ad3      	subs	r3, r2, r3
    8f68:	b2db      	uxtb	r3, r3
    8f6a:	2b02      	cmp	r3, #2
    8f6c:	f040 83e7 	bne.w	973e <send_settings+0x7fa>
    8f70:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    8f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	f000 83df 	beq.w	973e <send_settings+0x7fa>
    8f80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f88:	781a      	ldrb	r2, [r3, #0]
    8f8a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	b2db      	uxtb	r3, r3
    8f96:	429a      	cmp	r2, r3
    8f98:	d313      	bcc.n	8fc2 <send_settings+0x7e>
    8f9a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa2:	781b      	ldrb	r3, [r3, #0]
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	461a      	mov	r2, r3
    8fa8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	1ad3      	subs	r3, r2, r3
    8fb4:	33ff      	adds	r3, #255	; 0xff
    8fb6:	2b0d      	cmp	r3, #13
    8fb8:	bfd4      	ite	le
    8fba:	2300      	movle	r3, #0
    8fbc:	2301      	movgt	r3, #1
    8fbe:	b2db      	uxtb	r3, r3
    8fc0:	e011      	b.n	8fe6 <send_settings+0xa2>
    8fc2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fca:	781b      	ldrb	r3, [r3, #0]
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	461a      	mov	r2, r3
    8fd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	1ad3      	subs	r3, r2, r3
    8fdc:	2b0d      	cmp	r3, #13
    8fde:	bfd4      	ite	le
    8fe0:	2300      	movle	r3, #0
    8fe2:	2301      	movgt	r3, #1
    8fe4:	b2db      	uxtb	r3, r3
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	f000 839d 	beq.w	9726 <send_settings+0x7e2>
    8fec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	461a      	mov	r2, r3
    8ff8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9000:	2105      	movs	r1, #5
    9002:	5499      	strb	r1, [r3, r2]
    9004:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900c:	781b      	ldrb	r3, [r3, #0]
    900e:	3301      	adds	r3, #1
    9010:	b2da      	uxtb	r2, r3
    9012:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    901a:	701a      	strb	r2, [r3, #0]
    901c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	2bff      	cmp	r3, #255	; 0xff
    9028:	d105      	bne.n	9036 <send_settings+0xf2>
    902a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    902e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9032:	2200      	movs	r2, #0
    9034:	701a      	strb	r2, [r3, #0]
    9036:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    903a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	461a      	mov	r2, r3
    9042:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    904a:	2111      	movs	r1, #17
    904c:	5499      	strb	r1, [r3, r2]
    904e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9056:	781b      	ldrb	r3, [r3, #0]
    9058:	3301      	adds	r3, #1
    905a:	b2da      	uxtb	r2, r3
    905c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9064:	701a      	strb	r2, [r3, #0]
    9066:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    906a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	2bff      	cmp	r3, #255	; 0xff
    9072:	d105      	bne.n	9080 <send_settings+0x13c>
    9074:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    907c:	2200      	movs	r2, #0
    907e:	701a      	strb	r2, [r3, #0]
    9080:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9088:	2211      	movs	r2, #17
    908a:	701a      	strb	r2, [r3, #0]
    908c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9094:	2211      	movs	r2, #17
    9096:	701a      	strb	r2, [r3, #0]
    9098:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    909c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	461a      	mov	r2, r3
    90a4:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    90a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ac:	7819      	ldrb	r1, [r3, #0]
    90ae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    90b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b6:	5499      	strb	r1, [r3, r2]
    90b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c0:	781a      	ldrb	r2, [r3, #0]
    90c2:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    90c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ca:	781b      	ldrb	r3, [r3, #0]
    90cc:	4413      	add	r3, r2
    90ce:	b2da      	uxtb	r2, r3
    90d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d8:	701a      	strb	r2, [r3, #0]
    90da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    90de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e2:	781a      	ldrb	r2, [r3, #0]
    90e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	4413      	add	r3, r2
    90f0:	b2da      	uxtb	r2, r3
    90f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    90f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fa:	701a      	strb	r2, [r3, #0]
    90fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	3301      	adds	r3, #1
    9108:	b2da      	uxtb	r2, r3
    910a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    910e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9112:	701a      	strb	r2, [r3, #0]
    9114:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    911c:	781b      	ldrb	r3, [r3, #0]
    911e:	2bff      	cmp	r3, #255	; 0xff
    9120:	d105      	bne.n	912e <send_settings+0x1ea>
    9122:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    912a:	2200      	movs	r2, #0
    912c:	701a      	strb	r2, [r3, #0]
    912e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	461a      	mov	r2, r3
    913a:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    913e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9142:	7819      	ldrb	r1, [r3, #0]
    9144:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    914c:	5499      	strb	r1, [r3, r2]
    914e:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    9152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9156:	781a      	ldrb	r2, [r3, #0]
    9158:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    915c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	4413      	add	r3, r2
    9164:	b2da      	uxtb	r2, r3
    9166:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    916a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916e:	701a      	strb	r2, [r3, #0]
    9170:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9178:	781a      	ldrb	r2, [r3, #0]
    917a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    917e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	4413      	add	r3, r2
    9186:	b2da      	uxtb	r2, r3
    9188:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    918c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9190:	701a      	strb	r2, [r3, #0]
    9192:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	3301      	adds	r3, #1
    919e:	b2da      	uxtb	r2, r3
    91a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a8:	701a      	strb	r2, [r3, #0]
    91aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	2bff      	cmp	r3, #255	; 0xff
    91b6:	d105      	bne.n	91c4 <send_settings+0x280>
    91b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c0:	2200      	movs	r2, #0
    91c2:	701a      	strb	r2, [r3, #0]
    91c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91cc:	781b      	ldrb	r3, [r3, #0]
    91ce:	461a      	mov	r2, r3
    91d0:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    91d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d8:	7859      	ldrb	r1, [r3, #1]
    91da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    91de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e2:	5499      	strb	r1, [r3, r2]
    91e4:	4bd1      	ldr	r3, [pc, #836]	; (952c <send_settings+0x5e8>)
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	4413      	add	r3, r2
    91f4:	b2da      	uxtb	r2, r3
    91f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9208:	781a      	ldrb	r2, [r3, #0]
    920a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    920e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9212:	781b      	ldrb	r3, [r3, #0]
    9214:	4413      	add	r3, r2
    9216:	b2da      	uxtb	r2, r3
    9218:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    921c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9220:	701a      	strb	r2, [r3, #0]
    9222:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    922a:	781b      	ldrb	r3, [r3, #0]
    922c:	3301      	adds	r3, #1
    922e:	b2da      	uxtb	r2, r3
    9230:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9238:	701a      	strb	r2, [r3, #0]
    923a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    923e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	2bff      	cmp	r3, #255	; 0xff
    9246:	d105      	bne.n	9254 <send_settings+0x310>
    9248:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    924c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9250:	2200      	movs	r2, #0
    9252:	701a      	strb	r2, [r3, #0]
    9254:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925c:	781b      	ldrb	r3, [r3, #0]
    925e:	461a      	mov	r2, r3
    9260:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    9264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9268:	7899      	ldrb	r1, [r3, #2]
    926a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    926e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9272:	5499      	strb	r1, [r3, r2]
    9274:	4bae      	ldr	r3, [pc, #696]	; (9530 <send_settings+0x5ec>)
    9276:	781a      	ldrb	r2, [r3, #0]
    9278:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    927c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	4413      	add	r3, r2
    9284:	b2da      	uxtb	r2, r3
    9286:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    928a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928e:	701a      	strb	r2, [r3, #0]
    9290:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9298:	781a      	ldrb	r2, [r3, #0]
    929a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    929e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	4413      	add	r3, r2
    92a6:	b2da      	uxtb	r2, r3
    92a8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	701a      	strb	r2, [r3, #0]
    92b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	3301      	adds	r3, #1
    92be:	b2da      	uxtb	r2, r3
    92c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	701a      	strb	r2, [r3, #0]
    92ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	2bff      	cmp	r3, #255	; 0xff
    92d6:	d105      	bne.n	92e4 <send_settings+0x3a0>
    92d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	2200      	movs	r2, #0
    92e2:	701a      	strb	r2, [r3, #0]
    92e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	461a      	mov	r2, r3
    92f0:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    92f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f8:	78d9      	ldrb	r1, [r3, #3]
    92fa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    92fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9302:	5499      	strb	r1, [r3, r2]
    9304:	4b8b      	ldr	r3, [pc, #556]	; (9534 <send_settings+0x5f0>)
    9306:	781a      	ldrb	r2, [r3, #0]
    9308:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    930c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	4413      	add	r3, r2
    9314:	b2da      	uxtb	r2, r3
    9316:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    931a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931e:	701a      	strb	r2, [r3, #0]
    9320:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9328:	781a      	ldrb	r2, [r3, #0]
    932a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    932e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9332:	781b      	ldrb	r3, [r3, #0]
    9334:	4413      	add	r3, r2
    9336:	b2da      	uxtb	r2, r3
    9338:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    933c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9340:	701a      	strb	r2, [r3, #0]
    9342:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    934a:	781b      	ldrb	r3, [r3, #0]
    934c:	3301      	adds	r3, #1
    934e:	b2da      	uxtb	r2, r3
    9350:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9358:	701a      	strb	r2, [r3, #0]
    935a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    935e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	2bff      	cmp	r3, #255	; 0xff
    9366:	d105      	bne.n	9374 <send_settings+0x430>
    9368:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    936c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9370:	2200      	movs	r2, #0
    9372:	701a      	strb	r2, [r3, #0]
    9374:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    937c:	781b      	ldrb	r3, [r3, #0]
    937e:	461a      	mov	r2, r3
    9380:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9388:	7819      	ldrb	r1, [r3, #0]
    938a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    938e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9392:	5499      	strb	r1, [r3, r2]
    9394:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    939c:	781a      	ldrb	r2, [r3, #0]
    939e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a6:	781b      	ldrb	r3, [r3, #0]
    93a8:	4413      	add	r3, r2
    93aa:	b2da      	uxtb	r2, r3
    93ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b4:	701a      	strb	r2, [r3, #0]
    93b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    93ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93be:	781a      	ldrb	r2, [r3, #0]
    93c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	4413      	add	r3, r2
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	3301      	adds	r3, #1
    93e4:	b2da      	uxtb	r2, r3
    93e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ee:	701a      	strb	r2, [r3, #0]
    93f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f8:	781b      	ldrb	r3, [r3, #0]
    93fa:	2bff      	cmp	r3, #255	; 0xff
    93fc:	d105      	bne.n	940a <send_settings+0x4c6>
    93fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9406:	2200      	movs	r2, #0
    9408:	701a      	strb	r2, [r3, #0]
    940a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    940e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9412:	781b      	ldrb	r3, [r3, #0]
    9414:	461a      	mov	r2, r3
    9416:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    941a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941e:	7859      	ldrb	r1, [r3, #1]
    9420:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9428:	5499      	strb	r1, [r3, r2]
    942a:	4b43      	ldr	r3, [pc, #268]	; (9538 <send_settings+0x5f4>)
    942c:	781a      	ldrb	r2, [r3, #0]
    942e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	4413      	add	r3, r2
    943a:	b2da      	uxtb	r2, r3
    943c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9444:	701a      	strb	r2, [r3, #0]
    9446:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    944a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944e:	781a      	ldrb	r2, [r3, #0]
    9450:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	4413      	add	r3, r2
    945c:	b2da      	uxtb	r2, r3
    945e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9466:	701a      	strb	r2, [r3, #0]
    9468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	3301      	adds	r3, #1
    9474:	b2da      	uxtb	r2, r3
    9476:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    947a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947e:	701a      	strb	r2, [r3, #0]
    9480:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	2bff      	cmp	r3, #255	; 0xff
    948c:	d105      	bne.n	949a <send_settings+0x556>
    948e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9496:	2200      	movs	r2, #0
    9498:	701a      	strb	r2, [r3, #0]
    949a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    949e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	461a      	mov	r2, r3
    94a6:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    94aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ae:	7899      	ldrb	r1, [r3, #2]
    94b0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    94b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b8:	5499      	strb	r1, [r3, r2]
    94ba:	4b20      	ldr	r3, [pc, #128]	; (953c <send_settings+0x5f8>)
    94bc:	781a      	ldrb	r2, [r3, #0]
    94be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c6:	781b      	ldrb	r3, [r3, #0]
    94c8:	4413      	add	r3, r2
    94ca:	b2da      	uxtb	r2, r3
    94cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d4:	701a      	strb	r2, [r3, #0]
    94d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    94da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94de:	781a      	ldrb	r2, [r3, #0]
    94e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e8:	781b      	ldrb	r3, [r3, #0]
    94ea:	4413      	add	r3, r2
    94ec:	b2da      	uxtb	r2, r3
    94ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    94f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f6:	701a      	strb	r2, [r3, #0]
    94f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9500:	781b      	ldrb	r3, [r3, #0]
    9502:	3301      	adds	r3, #1
    9504:	b2da      	uxtb	r2, r3
    9506:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    950a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950e:	701a      	strb	r2, [r3, #0]
    9510:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	2bff      	cmp	r3, #255	; 0xff
    951c:	d110      	bne.n	9540 <send_settings+0x5fc>
    951e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9526:	2200      	movs	r2, #0
    9528:	701a      	strb	r2, [r3, #0]
    952a:	e009      	b.n	9540 <send_settings+0x5fc>
    952c:	2000aaa1 	.word	0x2000aaa1
    9530:	2000aaa2 	.word	0x2000aaa2
    9534:	2000aaa3 	.word	0x2000aaa3
    9538:	2000aaa5 	.word	0x2000aaa5
    953c:	2000aaa6 	.word	0x2000aaa6
    9540:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	461a      	mov	r2, r3
    954c:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9554:	78d9      	ldrb	r1, [r3, #3]
    9556:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    955a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955e:	5499      	strb	r1, [r3, r2]
    9560:	4b79      	ldr	r3, [pc, #484]	; (9748 <send_settings+0x804>)
    9562:	781a      	ldrb	r2, [r3, #0]
    9564:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	4413      	add	r3, r2
    9570:	b2da      	uxtb	r2, r3
    9572:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957a:	701a      	strb	r2, [r3, #0]
    957c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9584:	781a      	ldrb	r2, [r3, #0]
    9586:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    958a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958e:	781b      	ldrb	r3, [r3, #0]
    9590:	4413      	add	r3, r2
    9592:	b2da      	uxtb	r2, r3
    9594:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    959c:	701a      	strb	r2, [r3, #0]
    959e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a6:	781b      	ldrb	r3, [r3, #0]
    95a8:	3301      	adds	r3, #1
    95aa:	b2da      	uxtb	r2, r3
    95ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b4:	701a      	strb	r2, [r3, #0]
    95b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95be:	781b      	ldrb	r3, [r3, #0]
    95c0:	2bff      	cmp	r3, #255	; 0xff
    95c2:	d105      	bne.n	95d0 <send_settings+0x68c>
    95c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95cc:	2200      	movs	r2, #0
    95ce:	701a      	strb	r2, [r3, #0]
    95d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	461a      	mov	r2, r3
    95dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    95e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e4:	7819      	ldrb	r1, [r3, #0]
    95e6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    95ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ee:	5499      	strb	r1, [r3, r2]
    95f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f8:	781b      	ldrb	r3, [r3, #0]
    95fa:	3301      	adds	r3, #1
    95fc:	b2da      	uxtb	r2, r3
    95fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9606:	701a      	strb	r2, [r3, #0]
    9608:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    960c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9610:	781b      	ldrb	r3, [r3, #0]
    9612:	2bff      	cmp	r3, #255	; 0xff
    9614:	d105      	bne.n	9622 <send_settings+0x6de>
    9616:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    961a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    961e:	2200      	movs	r2, #0
    9620:	701a      	strb	r2, [r3, #0]
    9622:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962a:	781b      	ldrb	r3, [r3, #0]
    962c:	461a      	mov	r2, r3
    962e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9636:	7819      	ldrb	r1, [r3, #0]
    9638:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    963c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9640:	5499      	strb	r1, [r3, r2]
    9642:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	3301      	adds	r3, #1
    964e:	b2da      	uxtb	r2, r3
    9650:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9658:	701a      	strb	r2, [r3, #0]
    965a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    965e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	2bff      	cmp	r3, #255	; 0xff
    9666:	d105      	bne.n	9674 <send_settings+0x730>
    9668:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    966c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9670:	2200      	movs	r2, #0
    9672:	701a      	strb	r2, [r3, #0]
    9674:	f242 0339 	movw	r3, #8249	; 0x2039
    9678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	b2db      	uxtb	r3, r3
    9680:	f003 0310 	and.w	r3, r3, #16
    9684:	2b00      	cmp	r3, #0
    9686:	d15a      	bne.n	973e <send_settings+0x7fa>
    9688:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    968c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	b2db      	uxtb	r3, r3
    9694:	461a      	mov	r2, r3
    9696:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    969a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969e:	5c9a      	ldrb	r2, [r3, r2]
    96a0:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    96a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    96ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b2:	2200      	movs	r2, #0
    96b4:	701a      	strb	r2, [r3, #0]
    96b6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96be:	781b      	ldrb	r3, [r3, #0]
    96c0:	b2db      	uxtb	r3, r3
    96c2:	3301      	adds	r3, #1
    96c4:	b2da      	uxtb	r2, r3
    96c6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ce:	701a      	strb	r2, [r3, #0]
    96d0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d8:	781b      	ldrb	r3, [r3, #0]
    96da:	b2db      	uxtb	r3, r3
    96dc:	2bff      	cmp	r3, #255	; 0xff
    96de:	d105      	bne.n	96ec <send_settings+0x7a8>
    96e0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e8:	2200      	movs	r2, #0
    96ea:	701a      	strb	r2, [r3, #0]
    96ec:	f242 0338 	movw	r3, #8248	; 0x2038
    96f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f4:	f242 0238 	movw	r2, #8248	; 0x2038
    96f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    96fc:	7812      	ldrb	r2, [r2, #0]
    96fe:	b2d2      	uxtb	r2, r2
    9700:	f042 0201 	orr.w	r2, r2, #1
    9704:	b2d2      	uxtb	r2, r2
    9706:	701a      	strb	r2, [r3, #0]
    9708:	f242 0339 	movw	r3, #8249	; 0x2039
    970c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9710:	f242 0239 	movw	r2, #8249	; 0x2039
    9714:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9718:	7812      	ldrb	r2, [r2, #0]
    971a:	b2d2      	uxtb	r2, r2
    971c:	f042 0210 	orr.w	r2, r2, #16
    9720:	b2d2      	uxtb	r2, r2
    9722:	701a      	strb	r2, [r3, #0]
    9724:	e00b      	b.n	973e <send_settings+0x7fa>
    9726:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    972a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    972e:	781b      	ldrb	r3, [r3, #0]
    9730:	3301      	adds	r3, #1
    9732:	b2da      	uxtb	r2, r3
    9734:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    9738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    973c:	701a      	strb	r2, [r3, #0]
}
    973e:	46bd      	mov	sp, r7
    9740:	f85d 7b04 	ldr.w	r7, [sp], #4
    9744:	4770      	bx	lr
    9746:	bf00      	nop
    9748:	2000aaa7 	.word	0x2000aaa7

0000974c <send_desired>:
void send_desired(void){  //1000ms
    974c:	b480      	push	{r7}
    974e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9750:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    9754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9758:	781a      	ldrb	r2, [r3, #0]
    975a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    975e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9762:	fba3 1302 	umull	r1, r3, r3, r2
    9766:	08d9      	lsrs	r1, r3, #3
    9768:	460b      	mov	r3, r1
    976a:	009b      	lsls	r3, r3, #2
    976c:	440b      	add	r3, r1
    976e:	005b      	lsls	r3, r3, #1
    9770:	1ad3      	subs	r3, r2, r3
    9772:	b2db      	uxtb	r3, r3
    9774:	2b03      	cmp	r3, #3
    9776:	f040 8712 	bne.w	a59e <send_desired+0xe52>
    977a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    977e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9782:	781a      	ldrb	r2, [r3, #0]
    9784:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    978c:	781b      	ldrb	r3, [r3, #0]
    978e:	b2db      	uxtb	r3, r3
    9790:	429a      	cmp	r2, r3
    9792:	d313      	bcc.n	97bc <send_desired+0x70>
    9794:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	b2db      	uxtb	r3, r3
    97a0:	461a      	mov	r2, r3
    97a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97aa:	781b      	ldrb	r3, [r3, #0]
    97ac:	1ad3      	subs	r3, r2, r3
    97ae:	33ff      	adds	r3, #255	; 0xff
    97b0:	2b18      	cmp	r3, #24
    97b2:	bfd4      	ite	le
    97b4:	2300      	movle	r3, #0
    97b6:	2301      	movgt	r3, #1
    97b8:	b2db      	uxtb	r3, r3
    97ba:	e011      	b.n	97e0 <send_desired+0x94>
    97bc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    97c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c4:	781b      	ldrb	r3, [r3, #0]
    97c6:	b2db      	uxtb	r3, r3
    97c8:	461a      	mov	r2, r3
    97ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	1ad3      	subs	r3, r2, r3
    97d6:	2b18      	cmp	r3, #24
    97d8:	bfd4      	ite	le
    97da:	2300      	movle	r3, #0
    97dc:	2301      	movgt	r3, #1
    97de:	b2db      	uxtb	r3, r3
    97e0:	2b00      	cmp	r3, #0
    97e2:	f000 86d0 	beq.w	a586 <send_desired+0xe3a>
    97e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ee:	781b      	ldrb	r3, [r3, #0]
    97f0:	461a      	mov	r2, r3
    97f2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    97f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fa:	2105      	movs	r1, #5
    97fc:	5499      	strb	r1, [r3, r2]
    97fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9806:	781b      	ldrb	r3, [r3, #0]
    9808:	3301      	adds	r3, #1
    980a:	b2da      	uxtb	r2, r3
    980c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9814:	701a      	strb	r2, [r3, #0]
    9816:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    981a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    981e:	781b      	ldrb	r3, [r3, #0]
    9820:	2bff      	cmp	r3, #255	; 0xff
    9822:	d105      	bne.n	9830 <send_desired+0xe4>
    9824:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982c:	2200      	movs	r2, #0
    982e:	701a      	strb	r2, [r3, #0]
    9830:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9838:	781b      	ldrb	r3, [r3, #0]
    983a:	461a      	mov	r2, r3
    983c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9844:	2112      	movs	r1, #18
    9846:	5499      	strb	r1, [r3, r2]
    9848:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    984c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	3301      	adds	r3, #1
    9854:	b2da      	uxtb	r2, r3
    9856:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    985a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985e:	701a      	strb	r2, [r3, #0]
    9860:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9868:	781b      	ldrb	r3, [r3, #0]
    986a:	2bff      	cmp	r3, #255	; 0xff
    986c:	d105      	bne.n	987a <send_desired+0x12e>
    986e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9876:	2200      	movs	r2, #0
    9878:	701a      	strb	r2, [r3, #0]
    987a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    987e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9882:	2212      	movs	r2, #18
    9884:	701a      	strb	r2, [r3, #0]
    9886:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    988a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988e:	2212      	movs	r2, #18
    9890:	701a      	strb	r2, [r3, #0]
    9892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    989a:	781b      	ldrb	r3, [r3, #0]
    989c:	461a      	mov	r2, r3
    989e:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    98a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a6:	7819      	ldrb	r1, [r3, #0]
    98a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    98ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b0:	5499      	strb	r1, [r3, r2]
    98b2:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    98b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ba:	781a      	ldrb	r2, [r3, #0]
    98bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c4:	781b      	ldrb	r3, [r3, #0]
    98c6:	4413      	add	r3, r2
    98c8:	b2da      	uxtb	r2, r3
    98ca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d2:	701a      	strb	r2, [r3, #0]
    98d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    98d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98dc:	781a      	ldrb	r2, [r3, #0]
    98de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e6:	781b      	ldrb	r3, [r3, #0]
    98e8:	4413      	add	r3, r2
    98ea:	b2da      	uxtb	r2, r3
    98ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    98f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	3301      	adds	r3, #1
    9902:	b2da      	uxtb	r2, r3
    9904:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990c:	701a      	strb	r2, [r3, #0]
    990e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9916:	781b      	ldrb	r3, [r3, #0]
    9918:	2bff      	cmp	r3, #255	; 0xff
    991a:	d105      	bne.n	9928 <send_desired+0x1dc>
    991c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9924:	2200      	movs	r2, #0
    9926:	701a      	strb	r2, [r3, #0]
    9928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    992c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	461a      	mov	r2, r3
    9934:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993c:	7859      	ldrb	r1, [r3, #1]
    993e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9946:	5499      	strb	r1, [r3, r2]
    9948:	4bd1      	ldr	r3, [pc, #836]	; (9c90 <send_desired+0x544>)
    994a:	781a      	ldrb	r2, [r3, #0]
    994c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	4413      	add	r3, r2
    9958:	b2da      	uxtb	r2, r3
    995a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    995e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9962:	701a      	strb	r2, [r3, #0]
    9964:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996c:	781a      	ldrb	r2, [r3, #0]
    996e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	4413      	add	r3, r2
    997a:	b2da      	uxtb	r2, r3
    997c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9984:	701a      	strb	r2, [r3, #0]
    9986:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    998a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    998e:	781b      	ldrb	r3, [r3, #0]
    9990:	3301      	adds	r3, #1
    9992:	b2da      	uxtb	r2, r3
    9994:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999c:	701a      	strb	r2, [r3, #0]
    999e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	2bff      	cmp	r3, #255	; 0xff
    99aa:	d105      	bne.n	99b8 <send_desired+0x26c>
    99ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b4:	2200      	movs	r2, #0
    99b6:	701a      	strb	r2, [r3, #0]
    99b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	461a      	mov	r2, r3
    99c4:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    99c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99cc:	7899      	ldrb	r1, [r3, #2]
    99ce:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    99d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d6:	5499      	strb	r1, [r3, r2]
    99d8:	4bae      	ldr	r3, [pc, #696]	; (9c94 <send_desired+0x548>)
    99da:	781a      	ldrb	r2, [r3, #0]
    99dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	4413      	add	r3, r2
    99e8:	b2da      	uxtb	r2, r3
    99ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f2:	701a      	strb	r2, [r3, #0]
    99f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    99f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99fc:	781a      	ldrb	r2, [r3, #0]
    99fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	4413      	add	r3, r2
    9a0a:	b2da      	uxtb	r2, r3
    9a0c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a14:	701a      	strb	r2, [r3, #0]
    9a16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	3301      	adds	r3, #1
    9a22:	b2da      	uxtb	r2, r3
    9a24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2c:	701a      	strb	r2, [r3, #0]
    9a2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a36:	781b      	ldrb	r3, [r3, #0]
    9a38:	2bff      	cmp	r3, #255	; 0xff
    9a3a:	d105      	bne.n	9a48 <send_desired+0x2fc>
    9a3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a44:	2200      	movs	r2, #0
    9a46:	701a      	strb	r2, [r3, #0]
    9a48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a50:	781b      	ldrb	r3, [r3, #0]
    9a52:	461a      	mov	r2, r3
    9a54:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5c:	78d9      	ldrb	r1, [r3, #3]
    9a5e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a66:	5499      	strb	r1, [r3, r2]
    9a68:	4b8b      	ldr	r3, [pc, #556]	; (9c98 <send_desired+0x54c>)
    9a6a:	781a      	ldrb	r2, [r3, #0]
    9a6c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a74:	781b      	ldrb	r3, [r3, #0]
    9a76:	4413      	add	r3, r2
    9a78:	b2da      	uxtb	r2, r3
    9a7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a82:	701a      	strb	r2, [r3, #0]
    9a84:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8c:	781a      	ldrb	r2, [r3, #0]
    9a8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a96:	781b      	ldrb	r3, [r3, #0]
    9a98:	4413      	add	r3, r2
    9a9a:	b2da      	uxtb	r2, r3
    9a9c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa4:	701a      	strb	r2, [r3, #0]
    9aa6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aae:	781b      	ldrb	r3, [r3, #0]
    9ab0:	3301      	adds	r3, #1
    9ab2:	b2da      	uxtb	r2, r3
    9ab4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abc:	701a      	strb	r2, [r3, #0]
    9abe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac6:	781b      	ldrb	r3, [r3, #0]
    9ac8:	2bff      	cmp	r3, #255	; 0xff
    9aca:	d105      	bne.n	9ad8 <send_desired+0x38c>
    9acc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad4:	2200      	movs	r2, #0
    9ad6:	701a      	strb	r2, [r3, #0]
    9ad8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae0:	781b      	ldrb	r3, [r3, #0]
    9ae2:	461a      	mov	r2, r3
    9ae4:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aec:	7819      	ldrb	r1, [r3, #0]
    9aee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af6:	5499      	strb	r1, [r3, r2]
    9af8:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b00:	781a      	ldrb	r2, [r3, #0]
    9b02:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0a:	781b      	ldrb	r3, [r3, #0]
    9b0c:	4413      	add	r3, r2
    9b0e:	b2da      	uxtb	r2, r3
    9b10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b18:	701a      	strb	r2, [r3, #0]
    9b1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b22:	781a      	ldrb	r2, [r3, #0]
    9b24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	4413      	add	r3, r2
    9b30:	b2da      	uxtb	r2, r3
    9b32:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	701a      	strb	r2, [r3, #0]
    9b3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	781b      	ldrb	r3, [r3, #0]
    9b46:	3301      	adds	r3, #1
    9b48:	b2da      	uxtb	r2, r3
    9b4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b52:	701a      	strb	r2, [r3, #0]
    9b54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5c:	781b      	ldrb	r3, [r3, #0]
    9b5e:	2bff      	cmp	r3, #255	; 0xff
    9b60:	d105      	bne.n	9b6e <send_desired+0x422>
    9b62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b6a:	2200      	movs	r2, #0
    9b6c:	701a      	strb	r2, [r3, #0]
    9b6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	461a      	mov	r2, r3
    9b7a:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b82:	7859      	ldrb	r1, [r3, #1]
    9b84:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8c:	5499      	strb	r1, [r3, r2]
    9b8e:	4b43      	ldr	r3, [pc, #268]	; (9c9c <send_desired+0x550>)
    9b90:	781a      	ldrb	r2, [r3, #0]
    9b92:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b9a:	781b      	ldrb	r3, [r3, #0]
    9b9c:	4413      	add	r3, r2
    9b9e:	b2da      	uxtb	r2, r3
    9ba0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba8:	701a      	strb	r2, [r3, #0]
    9baa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb2:	781a      	ldrb	r2, [r3, #0]
    9bb4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	4413      	add	r3, r2
    9bc0:	b2da      	uxtb	r2, r3
    9bc2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bca:	701a      	strb	r2, [r3, #0]
    9bcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	3301      	adds	r3, #1
    9bd8:	b2da      	uxtb	r2, r3
    9bda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be2:	701a      	strb	r2, [r3, #0]
    9be4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	2bff      	cmp	r3, #255	; 0xff
    9bf0:	d105      	bne.n	9bfe <send_desired+0x4b2>
    9bf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bfa:	2200      	movs	r2, #0
    9bfc:	701a      	strb	r2, [r3, #0]
    9bfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c06:	781b      	ldrb	r3, [r3, #0]
    9c08:	461a      	mov	r2, r3
    9c0a:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c12:	7899      	ldrb	r1, [r3, #2]
    9c14:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1c:	5499      	strb	r1, [r3, r2]
    9c1e:	4b20      	ldr	r3, [pc, #128]	; (9ca0 <send_desired+0x554>)
    9c20:	781a      	ldrb	r2, [r3, #0]
    9c22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2a:	781b      	ldrb	r3, [r3, #0]
    9c2c:	4413      	add	r3, r2
    9c2e:	b2da      	uxtb	r2, r3
    9c30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c38:	701a      	strb	r2, [r3, #0]
    9c3a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c42:	781a      	ldrb	r2, [r3, #0]
    9c44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4c:	781b      	ldrb	r3, [r3, #0]
    9c4e:	4413      	add	r3, r2
    9c50:	b2da      	uxtb	r2, r3
    9c52:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c5a:	701a      	strb	r2, [r3, #0]
    9c5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	3301      	adds	r3, #1
    9c68:	b2da      	uxtb	r2, r3
    9c6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c72:	701a      	strb	r2, [r3, #0]
    9c74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	2bff      	cmp	r3, #255	; 0xff
    9c80:	d110      	bne.n	9ca4 <send_desired+0x558>
    9c82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c8a:	2200      	movs	r2, #0
    9c8c:	701a      	strb	r2, [r3, #0]
    9c8e:	e009      	b.n	9ca4 <send_desired+0x558>
    9c90:	2000addd 	.word	0x2000addd
    9c94:	2000adde 	.word	0x2000adde
    9c98:	2000addf 	.word	0x2000addf
    9c9c:	2000ade1 	.word	0x2000ade1
    9ca0:	2000ade2 	.word	0x2000ade2
    9ca4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cac:	781b      	ldrb	r3, [r3, #0]
    9cae:	461a      	mov	r2, r3
    9cb0:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb8:	78d9      	ldrb	r1, [r3, #3]
    9cba:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc2:	5499      	strb	r1, [r3, r2]
    9cc4:	4bd3      	ldr	r3, [pc, #844]	; (a014 <send_desired+0x8c8>)
    9cc6:	781a      	ldrb	r2, [r3, #0]
    9cc8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd0:	781b      	ldrb	r3, [r3, #0]
    9cd2:	4413      	add	r3, r2
    9cd4:	b2da      	uxtb	r2, r3
    9cd6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cde:	701a      	strb	r2, [r3, #0]
    9ce0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce8:	781a      	ldrb	r2, [r3, #0]
    9cea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	4413      	add	r3, r2
    9cf6:	b2da      	uxtb	r2, r3
    9cf8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d00:	701a      	strb	r2, [r3, #0]
    9d02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d0a:	781b      	ldrb	r3, [r3, #0]
    9d0c:	3301      	adds	r3, #1
    9d0e:	b2da      	uxtb	r2, r3
    9d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d18:	701a      	strb	r2, [r3, #0]
    9d1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d22:	781b      	ldrb	r3, [r3, #0]
    9d24:	2bff      	cmp	r3, #255	; 0xff
    9d26:	d105      	bne.n	9d34 <send_desired+0x5e8>
    9d28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d30:	2200      	movs	r2, #0
    9d32:	701a      	strb	r2, [r3, #0]
    9d34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	461a      	mov	r2, r3
    9d40:	f64a 6328 	movw	r3, #44584	; 0xae28
    9d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d48:	7819      	ldrb	r1, [r3, #0]
    9d4a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d52:	5499      	strb	r1, [r3, r2]
    9d54:	f64a 6328 	movw	r3, #44584	; 0xae28
    9d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d5c:	781a      	ldrb	r2, [r3, #0]
    9d5e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	4413      	add	r3, r2
    9d6a:	b2da      	uxtb	r2, r3
    9d6c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d74:	701a      	strb	r2, [r3, #0]
    9d76:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7e:	781a      	ldrb	r2, [r3, #0]
    9d80:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	4413      	add	r3, r2
    9d8c:	b2da      	uxtb	r2, r3
    9d8e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d96:	701a      	strb	r2, [r3, #0]
    9d98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	781b      	ldrb	r3, [r3, #0]
    9da2:	3301      	adds	r3, #1
    9da4:	b2da      	uxtb	r2, r3
    9da6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dae:	701a      	strb	r2, [r3, #0]
    9db0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db8:	781b      	ldrb	r3, [r3, #0]
    9dba:	2bff      	cmp	r3, #255	; 0xff
    9dbc:	d105      	bne.n	9dca <send_desired+0x67e>
    9dbe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc6:	2200      	movs	r2, #0
    9dc8:	701a      	strb	r2, [r3, #0]
    9dca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd2:	781b      	ldrb	r3, [r3, #0]
    9dd4:	461a      	mov	r2, r3
    9dd6:	f64a 6328 	movw	r3, #44584	; 0xae28
    9dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dde:	7859      	ldrb	r1, [r3, #1]
    9de0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de8:	5499      	strb	r1, [r3, r2]
    9dea:	4b8b      	ldr	r3, [pc, #556]	; (a018 <send_desired+0x8cc>)
    9dec:	781a      	ldrb	r2, [r3, #0]
    9dee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df6:	781b      	ldrb	r3, [r3, #0]
    9df8:	4413      	add	r3, r2
    9dfa:	b2da      	uxtb	r2, r3
    9dfc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e04:	701a      	strb	r2, [r3, #0]
    9e06:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0e:	781a      	ldrb	r2, [r3, #0]
    9e10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	4413      	add	r3, r2
    9e1c:	b2da      	uxtb	r2, r3
    9e1e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e26:	701a      	strb	r2, [r3, #0]
    9e28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	3301      	adds	r3, #1
    9e34:	b2da      	uxtb	r2, r3
    9e36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3e:	701a      	strb	r2, [r3, #0]
    9e40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	2bff      	cmp	r3, #255	; 0xff
    9e4c:	d105      	bne.n	9e5a <send_desired+0x70e>
    9e4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e56:	2200      	movs	r2, #0
    9e58:	701a      	strb	r2, [r3, #0]
    9e5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e62:	781b      	ldrb	r3, [r3, #0]
    9e64:	461a      	mov	r2, r3
    9e66:	f64a 6328 	movw	r3, #44584	; 0xae28
    9e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6e:	7899      	ldrb	r1, [r3, #2]
    9e70:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e78:	5499      	strb	r1, [r3, r2]
    9e7a:	4b68      	ldr	r3, [pc, #416]	; (a01c <send_desired+0x8d0>)
    9e7c:	781a      	ldrb	r2, [r3, #0]
    9e7e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e86:	781b      	ldrb	r3, [r3, #0]
    9e88:	4413      	add	r3, r2
    9e8a:	b2da      	uxtb	r2, r3
    9e8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e94:	701a      	strb	r2, [r3, #0]
    9e96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9e:	781a      	ldrb	r2, [r3, #0]
    9ea0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea8:	781b      	ldrb	r3, [r3, #0]
    9eaa:	4413      	add	r3, r2
    9eac:	b2da      	uxtb	r2, r3
    9eae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb6:	701a      	strb	r2, [r3, #0]
    9eb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	3301      	adds	r3, #1
    9ec4:	b2da      	uxtb	r2, r3
    9ec6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ece:	701a      	strb	r2, [r3, #0]
    9ed0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed8:	781b      	ldrb	r3, [r3, #0]
    9eda:	2bff      	cmp	r3, #255	; 0xff
    9edc:	d105      	bne.n	9eea <send_desired+0x79e>
    9ede:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee6:	2200      	movs	r2, #0
    9ee8:	701a      	strb	r2, [r3, #0]
    9eea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef2:	781b      	ldrb	r3, [r3, #0]
    9ef4:	461a      	mov	r2, r3
    9ef6:	f64a 6328 	movw	r3, #44584	; 0xae28
    9efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efe:	78d9      	ldrb	r1, [r3, #3]
    9f00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f08:	5499      	strb	r1, [r3, r2]
    9f0a:	4b45      	ldr	r3, [pc, #276]	; (a020 <send_desired+0x8d4>)
    9f0c:	781a      	ldrb	r2, [r3, #0]
    9f0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	4413      	add	r3, r2
    9f1a:	b2da      	uxtb	r2, r3
    9f1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f24:	701a      	strb	r2, [r3, #0]
    9f26:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f2e:	781a      	ldrb	r2, [r3, #0]
    9f30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	4413      	add	r3, r2
    9f3c:	b2da      	uxtb	r2, r3
    9f3e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f46:	701a      	strb	r2, [r3, #0]
    9f48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f50:	781b      	ldrb	r3, [r3, #0]
    9f52:	3301      	adds	r3, #1
    9f54:	b2da      	uxtb	r2, r3
    9f56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f5e:	701a      	strb	r2, [r3, #0]
    9f60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f68:	781b      	ldrb	r3, [r3, #0]
    9f6a:	2bff      	cmp	r3, #255	; 0xff
    9f6c:	d105      	bne.n	9f7a <send_desired+0x82e>
    9f6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f76:	2200      	movs	r2, #0
    9f78:	701a      	strb	r2, [r3, #0]
    9f7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f82:	781b      	ldrb	r3, [r3, #0]
    9f84:	461a      	mov	r2, r3
    9f86:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f8e:	7819      	ldrb	r1, [r3, #0]
    9f90:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f98:	5499      	strb	r1, [r3, r2]
    9f9a:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa2:	781a      	ldrb	r2, [r3, #0]
    9fa4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fac:	781b      	ldrb	r3, [r3, #0]
    9fae:	4413      	add	r3, r2
    9fb0:	b2da      	uxtb	r2, r3
    9fb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fba:	701a      	strb	r2, [r3, #0]
    9fbc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc4:	781a      	ldrb	r2, [r3, #0]
    9fc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	4413      	add	r3, r2
    9fd2:	b2da      	uxtb	r2, r3
    9fd4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fdc:	701a      	strb	r2, [r3, #0]
    9fde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	3301      	adds	r3, #1
    9fea:	b2da      	uxtb	r2, r3
    9fec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff4:	701a      	strb	r2, [r3, #0]
    9ff6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffe:	781b      	ldrb	r3, [r3, #0]
    a000:	2bff      	cmp	r3, #255	; 0xff
    a002:	d10f      	bne.n	a024 <send_desired+0x8d8>
    a004:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a00c:	2200      	movs	r2, #0
    a00e:	701a      	strb	r2, [r3, #0]
    a010:	e008      	b.n	a024 <send_desired+0x8d8>
    a012:	bf00      	nop
    a014:	2000ade3 	.word	0x2000ade3
    a018:	2000ae29 	.word	0x2000ae29
    a01c:	2000ae2a 	.word	0x2000ae2a
    a020:	2000ae2b 	.word	0x2000ae2b
    a024:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	461a      	mov	r2, r3
    a030:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a038:	7859      	ldrb	r1, [r3, #1]
    a03a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a042:	5499      	strb	r1, [r3, r2]
    a044:	4bd1      	ldr	r3, [pc, #836]	; (a38c <send_desired+0xc40>)
    a046:	781a      	ldrb	r2, [r3, #0]
    a048:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	4413      	add	r3, r2
    a054:	b2da      	uxtb	r2, r3
    a056:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05e:	701a      	strb	r2, [r3, #0]
    a060:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	781a      	ldrb	r2, [r3, #0]
    a06a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	4413      	add	r3, r2
    a076:	b2da      	uxtb	r2, r3
    a078:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	701a      	strb	r2, [r3, #0]
    a082:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	3301      	adds	r3, #1
    a08e:	b2da      	uxtb	r2, r3
    a090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	701a      	strb	r2, [r3, #0]
    a09a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a2:	781b      	ldrb	r3, [r3, #0]
    a0a4:	2bff      	cmp	r3, #255	; 0xff
    a0a6:	d105      	bne.n	a0b4 <send_desired+0x968>
    a0a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b0:	2200      	movs	r2, #0
    a0b2:	701a      	strb	r2, [r3, #0]
    a0b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0bc:	781b      	ldrb	r3, [r3, #0]
    a0be:	461a      	mov	r2, r3
    a0c0:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c8:	7899      	ldrb	r1, [r3, #2]
    a0ca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d2:	5499      	strb	r1, [r3, r2]
    a0d4:	4bae      	ldr	r3, [pc, #696]	; (a390 <send_desired+0xc44>)
    a0d6:	781a      	ldrb	r2, [r3, #0]
    a0d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e0:	781b      	ldrb	r3, [r3, #0]
    a0e2:	4413      	add	r3, r2
    a0e4:	b2da      	uxtb	r2, r3
    a0e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ee:	701a      	strb	r2, [r3, #0]
    a0f0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f8:	781a      	ldrb	r2, [r3, #0]
    a0fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	4413      	add	r3, r2
    a106:	b2da      	uxtb	r2, r3
    a108:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a110:	701a      	strb	r2, [r3, #0]
    a112:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11a:	781b      	ldrb	r3, [r3, #0]
    a11c:	3301      	adds	r3, #1
    a11e:	b2da      	uxtb	r2, r3
    a120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	701a      	strb	r2, [r3, #0]
    a12a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a132:	781b      	ldrb	r3, [r3, #0]
    a134:	2bff      	cmp	r3, #255	; 0xff
    a136:	d105      	bne.n	a144 <send_desired+0x9f8>
    a138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a140:	2200      	movs	r2, #0
    a142:	701a      	strb	r2, [r3, #0]
    a144:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a14c:	781b      	ldrb	r3, [r3, #0]
    a14e:	461a      	mov	r2, r3
    a150:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a158:	78d9      	ldrb	r1, [r3, #3]
    a15a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a162:	5499      	strb	r1, [r3, r2]
    a164:	4b8b      	ldr	r3, [pc, #556]	; (a394 <send_desired+0xc48>)
    a166:	781a      	ldrb	r2, [r3, #0]
    a168:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	4413      	add	r3, r2
    a174:	b2da      	uxtb	r2, r3
    a176:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a17e:	701a      	strb	r2, [r3, #0]
    a180:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a188:	781a      	ldrb	r2, [r3, #0]
    a18a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	4413      	add	r3, r2
    a196:	b2da      	uxtb	r2, r3
    a198:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a0:	701a      	strb	r2, [r3, #0]
    a1a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	3301      	adds	r3, #1
    a1ae:	b2da      	uxtb	r2, r3
    a1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b8:	701a      	strb	r2, [r3, #0]
    a1ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c2:	781b      	ldrb	r3, [r3, #0]
    a1c4:	2bff      	cmp	r3, #255	; 0xff
    a1c6:	d105      	bne.n	a1d4 <send_desired+0xa88>
    a1c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d0:	2200      	movs	r2, #0
    a1d2:	701a      	strb	r2, [r3, #0]
    a1d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1dc:	781b      	ldrb	r3, [r3, #0]
    a1de:	461a      	mov	r2, r3
    a1e0:	f240 23b8 	movw	r3, #696	; 0x2b8
    a1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e8:	7819      	ldrb	r1, [r3, #0]
    a1ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f2:	5499      	strb	r1, [r3, r2]
    a1f4:	f240 23b8 	movw	r3, #696	; 0x2b8
    a1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1fc:	781a      	ldrb	r2, [r3, #0]
    a1fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a206:	781b      	ldrb	r3, [r3, #0]
    a208:	4413      	add	r3, r2
    a20a:	b2da      	uxtb	r2, r3
    a20c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a214:	701a      	strb	r2, [r3, #0]
    a216:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21e:	781a      	ldrb	r2, [r3, #0]
    a220:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	4413      	add	r3, r2
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	3301      	adds	r3, #1
    a244:	b2da      	uxtb	r2, r3
    a246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24e:	701a      	strb	r2, [r3, #0]
    a250:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	2bff      	cmp	r3, #255	; 0xff
    a25c:	d105      	bne.n	a26a <send_desired+0xb1e>
    a25e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a266:	2200      	movs	r2, #0
    a268:	701a      	strb	r2, [r3, #0]
    a26a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a272:	781b      	ldrb	r3, [r3, #0]
    a274:	461a      	mov	r2, r3
    a276:	f240 23b8 	movw	r3, #696	; 0x2b8
    a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27e:	7859      	ldrb	r1, [r3, #1]
    a280:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a288:	5499      	strb	r1, [r3, r2]
    a28a:	4b43      	ldr	r3, [pc, #268]	; (a398 <send_desired+0xc4c>)
    a28c:	781a      	ldrb	r2, [r3, #0]
    a28e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a296:	781b      	ldrb	r3, [r3, #0]
    a298:	4413      	add	r3, r2
    a29a:	b2da      	uxtb	r2, r3
    a29c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a4:	701a      	strb	r2, [r3, #0]
    a2a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ae:	781a      	ldrb	r2, [r3, #0]
    a2b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	4413      	add	r3, r2
    a2bc:	b2da      	uxtb	r2, r3
    a2be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	701a      	strb	r2, [r3, #0]
    a2c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	3301      	adds	r3, #1
    a2d4:	b2da      	uxtb	r2, r3
    a2d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2de:	701a      	strb	r2, [r3, #0]
    a2e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e8:	781b      	ldrb	r3, [r3, #0]
    a2ea:	2bff      	cmp	r3, #255	; 0xff
    a2ec:	d105      	bne.n	a2fa <send_desired+0xbae>
    a2ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f6:	2200      	movs	r2, #0
    a2f8:	701a      	strb	r2, [r3, #0]
    a2fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a302:	781b      	ldrb	r3, [r3, #0]
    a304:	461a      	mov	r2, r3
    a306:	f240 23b8 	movw	r3, #696	; 0x2b8
    a30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30e:	7899      	ldrb	r1, [r3, #2]
    a310:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a318:	5499      	strb	r1, [r3, r2]
    a31a:	4b20      	ldr	r3, [pc, #128]	; (a39c <send_desired+0xc50>)
    a31c:	781a      	ldrb	r2, [r3, #0]
    a31e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a326:	781b      	ldrb	r3, [r3, #0]
    a328:	4413      	add	r3, r2
    a32a:	b2da      	uxtb	r2, r3
    a32c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a334:	701a      	strb	r2, [r3, #0]
    a336:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33e:	781a      	ldrb	r2, [r3, #0]
    a340:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	4413      	add	r3, r2
    a34c:	b2da      	uxtb	r2, r3
    a34e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a356:	701a      	strb	r2, [r3, #0]
    a358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a360:	781b      	ldrb	r3, [r3, #0]
    a362:	3301      	adds	r3, #1
    a364:	b2da      	uxtb	r2, r3
    a366:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36e:	701a      	strb	r2, [r3, #0]
    a370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a378:	781b      	ldrb	r3, [r3, #0]
    a37a:	2bff      	cmp	r3, #255	; 0xff
    a37c:	d110      	bne.n	a3a0 <send_desired+0xc54>
    a37e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a386:	2200      	movs	r2, #0
    a388:	701a      	strb	r2, [r3, #0]
    a38a:	e009      	b.n	a3a0 <send_desired+0xc54>
    a38c:	2000ae2d 	.word	0x2000ae2d
    a390:	2000ae2e 	.word	0x2000ae2e
    a394:	2000ae2f 	.word	0x2000ae2f
    a398:	200002b9 	.word	0x200002b9
    a39c:	200002ba 	.word	0x200002ba
    a3a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	461a      	mov	r2, r3
    a3ac:	f240 23b8 	movw	r3, #696	; 0x2b8
    a3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b4:	78d9      	ldrb	r1, [r3, #3]
    a3b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3be:	5499      	strb	r1, [r3, r2]
    a3c0:	4b79      	ldr	r3, [pc, #484]	; (a5a8 <send_desired+0xe5c>)
    a3c2:	781a      	ldrb	r2, [r3, #0]
    a3c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3cc:	781b      	ldrb	r3, [r3, #0]
    a3ce:	4413      	add	r3, r2
    a3d0:	b2da      	uxtb	r2, r3
    a3d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3da:	701a      	strb	r2, [r3, #0]
    a3dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e4:	781a      	ldrb	r2, [r3, #0]
    a3e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	4413      	add	r3, r2
    a3f2:	b2da      	uxtb	r2, r3
    a3f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3fc:	701a      	strb	r2, [r3, #0]
    a3fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a406:	781b      	ldrb	r3, [r3, #0]
    a408:	3301      	adds	r3, #1
    a40a:	b2da      	uxtb	r2, r3
    a40c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a414:	701a      	strb	r2, [r3, #0]
    a416:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41e:	781b      	ldrb	r3, [r3, #0]
    a420:	2bff      	cmp	r3, #255	; 0xff
    a422:	d105      	bne.n	a430 <send_desired+0xce4>
    a424:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42c:	2200      	movs	r2, #0
    a42e:	701a      	strb	r2, [r3, #0]
    a430:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a438:	781b      	ldrb	r3, [r3, #0]
    a43a:	461a      	mov	r2, r3
    a43c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a444:	7819      	ldrb	r1, [r3, #0]
    a446:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44e:	5499      	strb	r1, [r3, r2]
    a450:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a458:	781b      	ldrb	r3, [r3, #0]
    a45a:	3301      	adds	r3, #1
    a45c:	b2da      	uxtb	r2, r3
    a45e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a466:	701a      	strb	r2, [r3, #0]
    a468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	2bff      	cmp	r3, #255	; 0xff
    a474:	d105      	bne.n	a482 <send_desired+0xd36>
    a476:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a47e:	2200      	movs	r2, #0
    a480:	701a      	strb	r2, [r3, #0]
    a482:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	461a      	mov	r2, r3
    a48e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a496:	7819      	ldrb	r1, [r3, #0]
    a498:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a0:	5499      	strb	r1, [r3, r2]
    a4a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4aa:	781b      	ldrb	r3, [r3, #0]
    a4ac:	3301      	adds	r3, #1
    a4ae:	b2da      	uxtb	r2, r3
    a4b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b8:	701a      	strb	r2, [r3, #0]
    a4ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	2bff      	cmp	r3, #255	; 0xff
    a4c6:	d105      	bne.n	a4d4 <send_desired+0xd88>
    a4c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d0:	2200      	movs	r2, #0
    a4d2:	701a      	strb	r2, [r3, #0]
    a4d4:	f242 0339 	movw	r3, #8249	; 0x2039
    a4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4dc:	781b      	ldrb	r3, [r3, #0]
    a4de:	b2db      	uxtb	r3, r3
    a4e0:	f003 0310 	and.w	r3, r3, #16
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	d15a      	bne.n	a59e <send_desired+0xe52>
    a4e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	b2db      	uxtb	r3, r3
    a4f4:	461a      	mov	r2, r3
    a4f6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fe:	5c9a      	ldrb	r2, [r3, r2]
    a500:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    a504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a508:	701a      	strb	r2, [r3, #0]
    a50a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    a50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a512:	2200      	movs	r2, #0
    a514:	701a      	strb	r2, [r3, #0]
    a516:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a51e:	781b      	ldrb	r3, [r3, #0]
    a520:	b2db      	uxtb	r3, r3
    a522:	3301      	adds	r3, #1
    a524:	b2da      	uxtb	r2, r3
    a526:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a52e:	701a      	strb	r2, [r3, #0]
    a530:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	b2db      	uxtb	r3, r3
    a53c:	2bff      	cmp	r3, #255	; 0xff
    a53e:	d105      	bne.n	a54c <send_desired+0xe00>
    a540:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a548:	2200      	movs	r2, #0
    a54a:	701a      	strb	r2, [r3, #0]
    a54c:	f242 0338 	movw	r3, #8248	; 0x2038
    a550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a554:	f242 0238 	movw	r2, #8248	; 0x2038
    a558:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a55c:	7812      	ldrb	r2, [r2, #0]
    a55e:	b2d2      	uxtb	r2, r2
    a560:	f042 0201 	orr.w	r2, r2, #1
    a564:	b2d2      	uxtb	r2, r2
    a566:	701a      	strb	r2, [r3, #0]
    a568:	f242 0339 	movw	r3, #8249	; 0x2039
    a56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a570:	f242 0239 	movw	r2, #8249	; 0x2039
    a574:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a578:	7812      	ldrb	r2, [r2, #0]
    a57a:	b2d2      	uxtb	r2, r2
    a57c:	f042 0210 	orr.w	r2, r2, #16
    a580:	b2d2      	uxtb	r2, r2
    a582:	701a      	strb	r2, [r3, #0]
    a584:	e00b      	b.n	a59e <send_desired+0xe52>
    a586:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58e:	781b      	ldrb	r3, [r3, #0]
    a590:	3301      	adds	r3, #1
    a592:	b2da      	uxtb	r2, r3
    a594:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a59c:	701a      	strb	r2, [r3, #0]
}
    a59e:	46bd      	mov	sp, r7
    a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5a4:	4770      	bx	lr
    a5a6:	bf00      	nop
    a5a8:	200002bb 	.word	0x200002bb

0000a5ac <send_bat>:
void send_bat(void){  //2000ms
    a5ac:	b480      	push	{r7}
    a5ae:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a5b0:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    a5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b8:	781a      	ldrb	r2, [r3, #0]
    a5ba:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a5be:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a5c2:	fba3 1302 	umull	r1, r3, r3, r2
    a5c6:	0919      	lsrs	r1, r3, #4
    a5c8:	460b      	mov	r3, r1
    a5ca:	009b      	lsls	r3, r3, #2
    a5cc:	440b      	add	r3, r1
    a5ce:	009b      	lsls	r3, r3, #2
    a5d0:	1ad3      	subs	r3, r2, r3
    a5d2:	b2db      	uxtb	r3, r3
    a5d4:	2b08      	cmp	r3, #8
    a5d6:	f040 839a 	bne.w	ad0e <send_bat+0x762>
    a5da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e2:	781a      	ldrb	r2, [r3, #0]
    a5e4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ec:	781b      	ldrb	r3, [r3, #0]
    a5ee:	b2db      	uxtb	r3, r3
    a5f0:	429a      	cmp	r2, r3
    a5f2:	d313      	bcc.n	a61c <send_bat+0x70>
    a5f4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	b2db      	uxtb	r3, r3
    a600:	461a      	mov	r2, r3
    a602:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	1ad3      	subs	r3, r2, r3
    a60e:	33ff      	adds	r3, #255	; 0xff
    a610:	2b0c      	cmp	r3, #12
    a612:	bfd4      	ite	le
    a614:	2300      	movle	r3, #0
    a616:	2301      	movgt	r3, #1
    a618:	b2db      	uxtb	r3, r3
    a61a:	e011      	b.n	a640 <send_bat+0x94>
    a61c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	b2db      	uxtb	r3, r3
    a628:	461a      	mov	r2, r3
    a62a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	1ad3      	subs	r3, r2, r3
    a636:	2b0c      	cmp	r3, #12
    a638:	bfd4      	ite	le
    a63a:	2300      	movle	r3, #0
    a63c:	2301      	movgt	r3, #1
    a63e:	b2db      	uxtb	r3, r3
    a640:	2b00      	cmp	r3, #0
    a642:	f000 8358 	beq.w	acf6 <send_bat+0x74a>
    a646:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	461a      	mov	r2, r3
    a652:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65a:	2105      	movs	r1, #5
    a65c:	5499      	strb	r1, [r3, r2]
    a65e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	3301      	adds	r3, #1
    a66a:	b2da      	uxtb	r2, r3
    a66c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a674:	701a      	strb	r2, [r3, #0]
    a676:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	2bff      	cmp	r3, #255	; 0xff
    a682:	d105      	bne.n	a690 <send_bat+0xe4>
    a684:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68c:	2200      	movs	r2, #0
    a68e:	701a      	strb	r2, [r3, #0]
    a690:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	461a      	mov	r2, r3
    a69c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a4:	210c      	movs	r1, #12
    a6a6:	5499      	strb	r1, [r3, r2]
    a6a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b0:	781b      	ldrb	r3, [r3, #0]
    a6b2:	3301      	adds	r3, #1
    a6b4:	b2da      	uxtb	r2, r3
    a6b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6be:	701a      	strb	r2, [r3, #0]
    a6c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	2bff      	cmp	r3, #255	; 0xff
    a6cc:	d105      	bne.n	a6da <send_bat+0x12e>
    a6ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d6:	2200      	movs	r2, #0
    a6d8:	701a      	strb	r2, [r3, #0]
    a6da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e2:	220c      	movs	r2, #12
    a6e4:	701a      	strb	r2, [r3, #0]
    a6e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ee:	220c      	movs	r2, #12
    a6f0:	701a      	strb	r2, [r3, #0]
    a6f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fa:	781b      	ldrb	r3, [r3, #0]
    a6fc:	461a      	mov	r2, r3
    a6fe:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a706:	7819      	ldrb	r1, [r3, #0]
    a708:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a710:	5499      	strb	r1, [r3, r2]
    a712:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71a:	781a      	ldrb	r2, [r3, #0]
    a71c:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a724:	781b      	ldrb	r3, [r3, #0]
    a726:	4413      	add	r3, r2
    a728:	b2da      	uxtb	r2, r3
    a72a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a732:	701a      	strb	r2, [r3, #0]
    a734:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a73c:	781a      	ldrb	r2, [r3, #0]
    a73e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a746:	781b      	ldrb	r3, [r3, #0]
    a748:	4413      	add	r3, r2
    a74a:	b2da      	uxtb	r2, r3
    a74c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a754:	701a      	strb	r2, [r3, #0]
    a756:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75e:	781b      	ldrb	r3, [r3, #0]
    a760:	3301      	adds	r3, #1
    a762:	b2da      	uxtb	r2, r3
    a764:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76c:	701a      	strb	r2, [r3, #0]
    a76e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a776:	781b      	ldrb	r3, [r3, #0]
    a778:	2bff      	cmp	r3, #255	; 0xff
    a77a:	d105      	bne.n	a788 <send_bat+0x1dc>
    a77c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a784:	2200      	movs	r2, #0
    a786:	701a      	strb	r2, [r3, #0]
    a788:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	461a      	mov	r2, r3
    a794:	f24b 0394 	movw	r3, #45204	; 0xb094
    a798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79c:	7819      	ldrb	r1, [r3, #0]
    a79e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a6:	5499      	strb	r1, [r3, r2]
    a7a8:	f24b 0394 	movw	r3, #45204	; 0xb094
    a7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b0:	781a      	ldrb	r2, [r3, #0]
    a7b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ba:	781b      	ldrb	r3, [r3, #0]
    a7bc:	4413      	add	r3, r2
    a7be:	b2da      	uxtb	r2, r3
    a7c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c8:	701a      	strb	r2, [r3, #0]
    a7ca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d2:	781a      	ldrb	r2, [r3, #0]
    a7d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7dc:	781b      	ldrb	r3, [r3, #0]
    a7de:	4413      	add	r3, r2
    a7e0:	b2da      	uxtb	r2, r3
    a7e2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ea:	701a      	strb	r2, [r3, #0]
    a7ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f4:	781b      	ldrb	r3, [r3, #0]
    a7f6:	3301      	adds	r3, #1
    a7f8:	b2da      	uxtb	r2, r3
    a7fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a802:	701a      	strb	r2, [r3, #0]
    a804:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80c:	781b      	ldrb	r3, [r3, #0]
    a80e:	2bff      	cmp	r3, #255	; 0xff
    a810:	d105      	bne.n	a81e <send_bat+0x272>
    a812:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81a:	2200      	movs	r2, #0
    a81c:	701a      	strb	r2, [r3, #0]
    a81e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	461a      	mov	r2, r3
    a82a:	f24b 0394 	movw	r3, #45204	; 0xb094
    a82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a832:	7859      	ldrb	r1, [r3, #1]
    a834:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	5499      	strb	r1, [r3, r2]
    a83e:	4bd5      	ldr	r3, [pc, #852]	; (ab94 <send_bat+0x5e8>)
    a840:	781a      	ldrb	r2, [r3, #0]
    a842:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84a:	781b      	ldrb	r3, [r3, #0]
    a84c:	4413      	add	r3, r2
    a84e:	b2da      	uxtb	r2, r3
    a850:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a858:	701a      	strb	r2, [r3, #0]
    a85a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a862:	781a      	ldrb	r2, [r3, #0]
    a864:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	4413      	add	r3, r2
    a870:	b2da      	uxtb	r2, r3
    a872:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87a:	701a      	strb	r2, [r3, #0]
    a87c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a884:	781b      	ldrb	r3, [r3, #0]
    a886:	3301      	adds	r3, #1
    a888:	b2da      	uxtb	r2, r3
    a88a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a892:	701a      	strb	r2, [r3, #0]
    a894:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	2bff      	cmp	r3, #255	; 0xff
    a8a0:	d105      	bne.n	a8ae <send_bat+0x302>
    a8a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8aa:	2200      	movs	r2, #0
    a8ac:	701a      	strb	r2, [r3, #0]
    a8ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	461a      	mov	r2, r3
    a8ba:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c2:	7819      	ldrb	r1, [r3, #0]
    a8c4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8cc:	5499      	strb	r1, [r3, r2]
    a8ce:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d6:	781a      	ldrb	r2, [r3, #0]
    a8d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e0:	781b      	ldrb	r3, [r3, #0]
    a8e2:	4413      	add	r3, r2
    a8e4:	b2da      	uxtb	r2, r3
    a8e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ee:	701a      	strb	r2, [r3, #0]
    a8f0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f8:	781a      	ldrb	r2, [r3, #0]
    a8fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	4413      	add	r3, r2
    a906:	b2da      	uxtb	r2, r3
    a908:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a910:	701a      	strb	r2, [r3, #0]
    a912:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91a:	781b      	ldrb	r3, [r3, #0]
    a91c:	3301      	adds	r3, #1
    a91e:	b2da      	uxtb	r2, r3
    a920:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a928:	701a      	strb	r2, [r3, #0]
    a92a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a932:	781b      	ldrb	r3, [r3, #0]
    a934:	2bff      	cmp	r3, #255	; 0xff
    a936:	d105      	bne.n	a944 <send_bat+0x398>
    a938:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a940:	2200      	movs	r2, #0
    a942:	701a      	strb	r2, [r3, #0]
    a944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a94c:	781b      	ldrb	r3, [r3, #0]
    a94e:	461a      	mov	r2, r3
    a950:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a958:	7819      	ldrb	r1, [r3, #0]
    a95a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a962:	5499      	strb	r1, [r3, r2]
    a964:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	781a      	ldrb	r2, [r3, #0]
    a96e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	4413      	add	r3, r2
    a97a:	b2da      	uxtb	r2, r3
    a97c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a984:	701a      	strb	r2, [r3, #0]
    a986:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	781a      	ldrb	r2, [r3, #0]
    a990:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	4413      	add	r3, r2
    a99c:	b2da      	uxtb	r2, r3
    a99e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	701a      	strb	r2, [r3, #0]
    a9a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	781b      	ldrb	r3, [r3, #0]
    a9b2:	3301      	adds	r3, #1
    a9b4:	b2da      	uxtb	r2, r3
    a9b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9be:	701a      	strb	r2, [r3, #0]
    a9c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	2bff      	cmp	r3, #255	; 0xff
    a9cc:	d105      	bne.n	a9da <send_bat+0x42e>
    a9ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d6:	2200      	movs	r2, #0
    a9d8:	701a      	strb	r2, [r3, #0]
    a9da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e2:	781b      	ldrb	r3, [r3, #0]
    a9e4:	461a      	mov	r2, r3
    a9e6:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ee:	7859      	ldrb	r1, [r3, #1]
    a9f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f8:	5499      	strb	r1, [r3, r2]
    a9fa:	4b67      	ldr	r3, [pc, #412]	; (ab98 <send_bat+0x5ec>)
    a9fc:	781a      	ldrb	r2, [r3, #0]
    a9fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	4413      	add	r3, r2
    aa0a:	b2da      	uxtb	r2, r3
    aa0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa14:	701a      	strb	r2, [r3, #0]
    aa16:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1e:	781a      	ldrb	r2, [r3, #0]
    aa20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa28:	781b      	ldrb	r3, [r3, #0]
    aa2a:	4413      	add	r3, r2
    aa2c:	b2da      	uxtb	r2, r3
    aa2e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa36:	701a      	strb	r2, [r3, #0]
    aa38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa40:	781b      	ldrb	r3, [r3, #0]
    aa42:	3301      	adds	r3, #1
    aa44:	b2da      	uxtb	r2, r3
    aa46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa4e:	701a      	strb	r2, [r3, #0]
    aa50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	2bff      	cmp	r3, #255	; 0xff
    aa5c:	d105      	bne.n	aa6a <send_bat+0x4be>
    aa5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa66:	2200      	movs	r2, #0
    aa68:	701a      	strb	r2, [r3, #0]
    aa6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa72:	781b      	ldrb	r3, [r3, #0]
    aa74:	461a      	mov	r2, r3
    aa76:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aa7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7e:	7819      	ldrb	r1, [r3, #0]
    aa80:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aa84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa88:	5499      	strb	r1, [r3, r2]
    aa8a:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa92:	781a      	ldrb	r2, [r3, #0]
    aa94:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9c:	781b      	ldrb	r3, [r3, #0]
    aa9e:	4413      	add	r3, r2
    aaa0:	b2da      	uxtb	r2, r3
    aaa2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaaa:	701a      	strb	r2, [r3, #0]
    aaac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab4:	781a      	ldrb	r2, [r3, #0]
    aab6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	4413      	add	r3, r2
    aac2:	b2da      	uxtb	r2, r3
    aac4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aacc:	701a      	strb	r2, [r3, #0]
    aace:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad6:	781b      	ldrb	r3, [r3, #0]
    aad8:	3301      	adds	r3, #1
    aada:	b2da      	uxtb	r2, r3
    aadc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae4:	701a      	strb	r2, [r3, #0]
    aae6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aaea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaee:	781b      	ldrb	r3, [r3, #0]
    aaf0:	2bff      	cmp	r3, #255	; 0xff
    aaf2:	d105      	bne.n	ab00 <send_bat+0x554>
    aaf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aaf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aafc:	2200      	movs	r2, #0
    aafe:	701a      	strb	r2, [r3, #0]
    ab00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	461a      	mov	r2, r3
    ab0c:	f64a 631c 	movw	r3, #44572	; 0xae1c
    ab10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab14:	7859      	ldrb	r1, [r3, #1]
    ab16:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ab1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1e:	5499      	strb	r1, [r3, r2]
    ab20:	4b1e      	ldr	r3, [pc, #120]	; (ab9c <send_bat+0x5f0>)
    ab22:	781a      	ldrb	r2, [r3, #0]
    ab24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2c:	781b      	ldrb	r3, [r3, #0]
    ab2e:	4413      	add	r3, r2
    ab30:	b2da      	uxtb	r2, r3
    ab32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab3a:	701a      	strb	r2, [r3, #0]
    ab3c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ab40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab44:	781a      	ldrb	r2, [r3, #0]
    ab46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	4413      	add	r3, r2
    ab52:	b2da      	uxtb	r2, r3
    ab54:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ab58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5c:	701a      	strb	r2, [r3, #0]
    ab5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab66:	781b      	ldrb	r3, [r3, #0]
    ab68:	3301      	adds	r3, #1
    ab6a:	b2da      	uxtb	r2, r3
    ab6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab74:	701a      	strb	r2, [r3, #0]
    ab76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	2bff      	cmp	r3, #255	; 0xff
    ab82:	d10d      	bne.n	aba0 <send_bat+0x5f4>
    ab84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8c:	2200      	movs	r2, #0
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	e006      	b.n	aba0 <send_bat+0x5f4>
    ab92:	bf00      	nop
    ab94:	2000b095 	.word	0x2000b095
    ab98:	2000ae1f 	.word	0x2000ae1f
    ab9c:	2000ae1d 	.word	0x2000ae1d
    aba0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	461a      	mov	r2, r3
    abac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    abb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb4:	7819      	ldrb	r1, [r3, #0]
    abb6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    abba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abbe:	5499      	strb	r1, [r3, r2]
    abc0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	3301      	adds	r3, #1
    abcc:	b2da      	uxtb	r2, r3
    abce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd6:	701a      	strb	r2, [r3, #0]
    abd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	2bff      	cmp	r3, #255	; 0xff
    abe4:	d105      	bne.n	abf2 <send_bat+0x646>
    abe6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abee:	2200      	movs	r2, #0
    abf0:	701a      	strb	r2, [r3, #0]
    abf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abfa:	781b      	ldrb	r3, [r3, #0]
    abfc:	461a      	mov	r2, r3
    abfe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ac02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac06:	7819      	ldrb	r1, [r3, #0]
    ac08:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ac0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac10:	5499      	strb	r1, [r3, r2]
    ac12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ac16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	3301      	adds	r3, #1
    ac1e:	b2da      	uxtb	r2, r3
    ac20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ac24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac28:	701a      	strb	r2, [r3, #0]
    ac2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ac2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	2bff      	cmp	r3, #255	; 0xff
    ac36:	d105      	bne.n	ac44 <send_bat+0x698>
    ac38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ac3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac40:	2200      	movs	r2, #0
    ac42:	701a      	strb	r2, [r3, #0]
    ac44:	f242 0339 	movw	r3, #8249	; 0x2039
    ac48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4c:	781b      	ldrb	r3, [r3, #0]
    ac4e:	b2db      	uxtb	r3, r3
    ac50:	f003 0310 	and.w	r3, r3, #16
    ac54:	2b00      	cmp	r3, #0
    ac56:	d15a      	bne.n	ad0e <send_bat+0x762>
    ac58:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	b2db      	uxtb	r3, r3
    ac64:	461a      	mov	r2, r3
    ac66:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ac6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac6e:	5c9a      	ldrb	r2, [r3, r2]
    ac70:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    ac74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac78:	701a      	strb	r2, [r3, #0]
    ac7a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    ac7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac82:	2200      	movs	r2, #0
    ac84:	701a      	strb	r2, [r3, #0]
    ac86:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8e:	781b      	ldrb	r3, [r3, #0]
    ac90:	b2db      	uxtb	r3, r3
    ac92:	3301      	adds	r3, #1
    ac94:	b2da      	uxtb	r2, r3
    ac96:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac9e:	701a      	strb	r2, [r3, #0]
    aca0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    aca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca8:	781b      	ldrb	r3, [r3, #0]
    acaa:	b2db      	uxtb	r3, r3
    acac:	2bff      	cmp	r3, #255	; 0xff
    acae:	d105      	bne.n	acbc <send_bat+0x710>
    acb0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    acb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb8:	2200      	movs	r2, #0
    acba:	701a      	strb	r2, [r3, #0]
    acbc:	f242 0338 	movw	r3, #8248	; 0x2038
    acc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc4:	f242 0238 	movw	r2, #8248	; 0x2038
    acc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    accc:	7812      	ldrb	r2, [r2, #0]
    acce:	b2d2      	uxtb	r2, r2
    acd0:	f042 0201 	orr.w	r2, r2, #1
    acd4:	b2d2      	uxtb	r2, r2
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f242 0339 	movw	r3, #8249	; 0x2039
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	f242 0239 	movw	r2, #8249	; 0x2039
    ace4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ace8:	7812      	ldrb	r2, [r2, #0]
    acea:	b2d2      	uxtb	r2, r2
    acec:	f042 0210 	orr.w	r2, r2, #16
    acf0:	b2d2      	uxtb	r2, r2
    acf2:	701a      	strb	r2, [r3, #0]
    acf4:	e00b      	b.n	ad0e <send_bat+0x762>
    acf6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    acfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	3301      	adds	r3, #1
    ad02:	b2da      	uxtb	r2, r3
    ad04:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ad08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad0c:	701a      	strb	r2, [r3, #0]
}
    ad0e:	46bd      	mov	sp, r7
    ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad14:	4770      	bx	lr
    ad16:	bf00      	nop

0000ad18 <send_climb>:
void send_climb(void){  //2000ms
    ad18:	b480      	push	{r7}
    ad1a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    ad1c:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    ad20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad24:	781a      	ldrb	r2, [r3, #0]
    ad26:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ad2a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ad2e:	fba3 1302 	umull	r1, r3, r3, r2
    ad32:	0919      	lsrs	r1, r3, #4
    ad34:	460b      	mov	r3, r1
    ad36:	009b      	lsls	r3, r3, #2
    ad38:	440b      	add	r3, r1
    ad3a:	009b      	lsls	r3, r3, #2
    ad3c:	1ad3      	subs	r3, r2, r3
    ad3e:	b2db      	uxtb	r3, r3
    ad40:	2b12      	cmp	r3, #18
    ad42:	f040 8554 	bne.w	b7ee <send_climb+0xad6>
    ad46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad4e:	781a      	ldrb	r2, [r3, #0]
    ad50:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	b2db      	uxtb	r3, r3
    ad5c:	429a      	cmp	r2, r3
    ad5e:	d313      	bcc.n	ad88 <send_climb+0x70>
    ad60:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad68:	781b      	ldrb	r3, [r3, #0]
    ad6a:	b2db      	uxtb	r3, r3
    ad6c:	461a      	mov	r2, r3
    ad6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad76:	781b      	ldrb	r3, [r3, #0]
    ad78:	1ad3      	subs	r3, r2, r3
    ad7a:	33ff      	adds	r3, #255	; 0xff
    ad7c:	2b12      	cmp	r3, #18
    ad7e:	bfd4      	ite	le
    ad80:	2300      	movle	r3, #0
    ad82:	2301      	movgt	r3, #1
    ad84:	b2db      	uxtb	r3, r3
    ad86:	e011      	b.n	adac <send_climb+0x94>
    ad88:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad90:	781b      	ldrb	r3, [r3, #0]
    ad92:	b2db      	uxtb	r3, r3
    ad94:	461a      	mov	r2, r3
    ad96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	1ad3      	subs	r3, r2, r3
    ada2:	2b12      	cmp	r3, #18
    ada4:	bfd4      	ite	le
    ada6:	2300      	movle	r3, #0
    ada8:	2301      	movgt	r3, #1
    adaa:	b2db      	uxtb	r3, r3
    adac:	2b00      	cmp	r3, #0
    adae:	f000 8512 	beq.w	b7d6 <send_climb+0xabe>
    adb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	461a      	mov	r2, r3
    adbe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    adc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc6:	2105      	movs	r1, #5
    adc8:	5499      	strb	r1, [r3, r2]
    adca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	3301      	adds	r3, #1
    add6:	b2da      	uxtb	r2, r3
    add8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    addc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade0:	701a      	strb	r2, [r3, #0]
    ade2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ade6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adea:	781b      	ldrb	r3, [r3, #0]
    adec:	2bff      	cmp	r3, #255	; 0xff
    adee:	d105      	bne.n	adfc <send_climb+0xe4>
    adf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf8:	2200      	movs	r2, #0
    adfa:	701a      	strb	r2, [r3, #0]
    adfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae04:	781b      	ldrb	r3, [r3, #0]
    ae06:	461a      	mov	r2, r3
    ae08:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ae0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae10:	210e      	movs	r1, #14
    ae12:	5499      	strb	r1, [r3, r2]
    ae14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1c:	781b      	ldrb	r3, [r3, #0]
    ae1e:	3301      	adds	r3, #1
    ae20:	b2da      	uxtb	r2, r3
    ae22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2a:	701a      	strb	r2, [r3, #0]
    ae2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae34:	781b      	ldrb	r3, [r3, #0]
    ae36:	2bff      	cmp	r3, #255	; 0xff
    ae38:	d105      	bne.n	ae46 <send_climb+0x12e>
    ae3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae42:	2200      	movs	r2, #0
    ae44:	701a      	strb	r2, [r3, #0]
    ae46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae4e:	220e      	movs	r2, #14
    ae50:	701a      	strb	r2, [r3, #0]
    ae52:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5a:	220e      	movs	r2, #14
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	461a      	mov	r2, r3
    ae6a:	f64a 53e4 	movw	r3, #44516	; 0xade4
    ae6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae72:	7819      	ldrb	r1, [r3, #0]
    ae74:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ae78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae7c:	5499      	strb	r1, [r3, r2]
    ae7e:	f64a 53e4 	movw	r3, #44516	; 0xade4
    ae82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae86:	781a      	ldrb	r2, [r3, #0]
    ae88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	4413      	add	r3, r2
    ae94:	b2da      	uxtb	r2, r3
    ae96:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea8:	781a      	ldrb	r2, [r3, #0]
    aeaa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aeae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb2:	781b      	ldrb	r3, [r3, #0]
    aeb4:	4413      	add	r3, r2
    aeb6:	b2da      	uxtb	r2, r3
    aeb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	701a      	strb	r2, [r3, #0]
    aec2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	3301      	adds	r3, #1
    aece:	b2da      	uxtb	r2, r3
    aed0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed8:	701a      	strb	r2, [r3, #0]
    aeda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	2bff      	cmp	r3, #255	; 0xff
    aee6:	d105      	bne.n	aef4 <send_climb+0x1dc>
    aee8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	2200      	movs	r2, #0
    aef2:	701a      	strb	r2, [r3, #0]
    aef4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	461a      	mov	r2, r3
    af00:	f64a 53e4 	movw	r3, #44516	; 0xade4
    af04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af08:	7859      	ldrb	r1, [r3, #1]
    af0a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    af0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af12:	5499      	strb	r1, [r3, r2]
    af14:	4bd3      	ldr	r3, [pc, #844]	; (b264 <send_climb+0x54c>)
    af16:	781a      	ldrb	r2, [r3, #0]
    af18:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	781b      	ldrb	r3, [r3, #0]
    af22:	4413      	add	r3, r2
    af24:	b2da      	uxtb	r2, r3
    af26:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2e:	701a      	strb	r2, [r3, #0]
    af30:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af38:	781a      	ldrb	r2, [r3, #0]
    af3a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	4413      	add	r3, r2
    af46:	b2da      	uxtb	r2, r3
    af48:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af50:	701a      	strb	r2, [r3, #0]
    af52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af5a:	781b      	ldrb	r3, [r3, #0]
    af5c:	3301      	adds	r3, #1
    af5e:	b2da      	uxtb	r2, r3
    af60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af68:	701a      	strb	r2, [r3, #0]
    af6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af72:	781b      	ldrb	r3, [r3, #0]
    af74:	2bff      	cmp	r3, #255	; 0xff
    af76:	d105      	bne.n	af84 <send_climb+0x26c>
    af78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af80:	2200      	movs	r2, #0
    af82:	701a      	strb	r2, [r3, #0]
    af84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af8c:	781b      	ldrb	r3, [r3, #0]
    af8e:	461a      	mov	r2, r3
    af90:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    af94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af98:	7819      	ldrb	r1, [r3, #0]
    af9a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    af9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa2:	5499      	strb	r1, [r3, r2]
    afa4:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	781a      	ldrb	r2, [r3, #0]
    afae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	4413      	add	r3, r2
    afba:	b2da      	uxtb	r2, r3
    afbc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    afc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc4:	701a      	strb	r2, [r3, #0]
    afc6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    afca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	4413      	add	r3, r2
    afdc:	b2da      	uxtb	r2, r3
    afde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	3301      	adds	r3, #1
    aff4:	b2da      	uxtb	r2, r3
    aff6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    affa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affe:	701a      	strb	r2, [r3, #0]
    b000:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	2bff      	cmp	r3, #255	; 0xff
    b00c:	d105      	bne.n	b01a <send_climb+0x302>
    b00e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b016:	2200      	movs	r2, #0
    b018:	701a      	strb	r2, [r3, #0]
    b01a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	461a      	mov	r2, r3
    b026:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	7859      	ldrb	r1, [r3, #1]
    b030:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	5499      	strb	r1, [r3, r2]
    b03a:	4b8b      	ldr	r3, [pc, #556]	; (b268 <send_climb+0x550>)
    b03c:	781a      	ldrb	r2, [r3, #0]
    b03e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	4413      	add	r3, r2
    b04a:	b2da      	uxtb	r2, r3
    b04c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b054:	701a      	strb	r2, [r3, #0]
    b056:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05e:	781a      	ldrb	r2, [r3, #0]
    b060:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	4413      	add	r3, r2
    b06c:	b2da      	uxtb	r2, r3
    b06e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b076:	701a      	strb	r2, [r3, #0]
    b078:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	3301      	adds	r3, #1
    b084:	b2da      	uxtb	r2, r3
    b086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08e:	701a      	strb	r2, [r3, #0]
    b090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b098:	781b      	ldrb	r3, [r3, #0]
    b09a:	2bff      	cmp	r3, #255	; 0xff
    b09c:	d105      	bne.n	b0aa <send_climb+0x392>
    b09e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a6:	2200      	movs	r2, #0
    b0a8:	701a      	strb	r2, [r3, #0]
    b0aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b2:	781b      	ldrb	r3, [r3, #0]
    b0b4:	461a      	mov	r2, r3
    b0b6:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0be:	7899      	ldrb	r1, [r3, #2]
    b0c0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c8:	5499      	strb	r1, [r3, r2]
    b0ca:	4b68      	ldr	r3, [pc, #416]	; (b26c <send_climb+0x554>)
    b0cc:	781a      	ldrb	r2, [r3, #0]
    b0ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d6:	781b      	ldrb	r3, [r3, #0]
    b0d8:	4413      	add	r3, r2
    b0da:	b2da      	uxtb	r2, r3
    b0dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e4:	701a      	strb	r2, [r3, #0]
    b0e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ee:	781a      	ldrb	r2, [r3, #0]
    b0f0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f8:	781b      	ldrb	r3, [r3, #0]
    b0fa:	4413      	add	r3, r2
    b0fc:	b2da      	uxtb	r2, r3
    b0fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b106:	701a      	strb	r2, [r3, #0]
    b108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b110:	781b      	ldrb	r3, [r3, #0]
    b112:	3301      	adds	r3, #1
    b114:	b2da      	uxtb	r2, r3
    b116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11e:	701a      	strb	r2, [r3, #0]
    b120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	2bff      	cmp	r3, #255	; 0xff
    b12c:	d105      	bne.n	b13a <send_climb+0x422>
    b12e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b136:	2200      	movs	r2, #0
    b138:	701a      	strb	r2, [r3, #0]
    b13a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b142:	781b      	ldrb	r3, [r3, #0]
    b144:	461a      	mov	r2, r3
    b146:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14e:	78d9      	ldrb	r1, [r3, #3]
    b150:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b158:	5499      	strb	r1, [r3, r2]
    b15a:	4b45      	ldr	r3, [pc, #276]	; (b270 <send_climb+0x558>)
    b15c:	781a      	ldrb	r2, [r3, #0]
    b15e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b166:	781b      	ldrb	r3, [r3, #0]
    b168:	4413      	add	r3, r2
    b16a:	b2da      	uxtb	r2, r3
    b16c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b174:	701a      	strb	r2, [r3, #0]
    b176:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b17e:	781a      	ldrb	r2, [r3, #0]
    b180:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b188:	781b      	ldrb	r3, [r3, #0]
    b18a:	4413      	add	r3, r2
    b18c:	b2da      	uxtb	r2, r3
    b18e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b196:	701a      	strb	r2, [r3, #0]
    b198:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a0:	781b      	ldrb	r3, [r3, #0]
    b1a2:	3301      	adds	r3, #1
    b1a4:	b2da      	uxtb	r2, r3
    b1a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ae:	701a      	strb	r2, [r3, #0]
    b1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b8:	781b      	ldrb	r3, [r3, #0]
    b1ba:	2bff      	cmp	r3, #255	; 0xff
    b1bc:	d105      	bne.n	b1ca <send_climb+0x4b2>
    b1be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c6:	2200      	movs	r2, #0
    b1c8:	701a      	strb	r2, [r3, #0]
    b1ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d2:	781b      	ldrb	r3, [r3, #0]
    b1d4:	461a      	mov	r2, r3
    b1d6:	f64a 6300 	movw	r3, #44544	; 0xae00
    b1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1de:	7819      	ldrb	r1, [r3, #0]
    b1e0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e8:	5499      	strb	r1, [r3, r2]
    b1ea:	f64a 6300 	movw	r3, #44544	; 0xae00
    b1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f2:	781a      	ldrb	r2, [r3, #0]
    b1f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	4413      	add	r3, r2
    b200:	b2da      	uxtb	r2, r3
    b202:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b20a:	701a      	strb	r2, [r3, #0]
    b20c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b214:	781a      	ldrb	r2, [r3, #0]
    b216:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	4413      	add	r3, r2
    b222:	b2da      	uxtb	r2, r3
    b224:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22c:	701a      	strb	r2, [r3, #0]
    b22e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	3301      	adds	r3, #1
    b23a:	b2da      	uxtb	r2, r3
    b23c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b244:	701a      	strb	r2, [r3, #0]
    b246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24e:	781b      	ldrb	r3, [r3, #0]
    b250:	2bff      	cmp	r3, #255	; 0xff
    b252:	d10f      	bne.n	b274 <send_climb+0x55c>
    b254:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25c:	2200      	movs	r2, #0
    b25e:	701a      	strb	r2, [r3, #0]
    b260:	e008      	b.n	b274 <send_climb+0x55c>
    b262:	bf00      	nop
    b264:	2000ade5 	.word	0x2000ade5
    b268:	2000adf9 	.word	0x2000adf9
    b26c:	2000adfa 	.word	0x2000adfa
    b270:	2000adfb 	.word	0x2000adfb
    b274:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27c:	781b      	ldrb	r3, [r3, #0]
    b27e:	461a      	mov	r2, r3
    b280:	f64a 6300 	movw	r3, #44544	; 0xae00
    b284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b288:	7859      	ldrb	r1, [r3, #1]
    b28a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b292:	5499      	strb	r1, [r3, r2]
    b294:	4bd1      	ldr	r3, [pc, #836]	; (b5dc <send_climb+0x8c4>)
    b296:	781a      	ldrb	r2, [r3, #0]
    b298:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	4413      	add	r3, r2
    b2a4:	b2da      	uxtb	r2, r3
    b2a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ae:	701a      	strb	r2, [r3, #0]
    b2b0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b8:	781a      	ldrb	r2, [r3, #0]
    b2ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	4413      	add	r3, r2
    b2c6:	b2da      	uxtb	r2, r3
    b2c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d0:	701a      	strb	r2, [r3, #0]
    b2d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2da:	781b      	ldrb	r3, [r3, #0]
    b2dc:	3301      	adds	r3, #1
    b2de:	b2da      	uxtb	r2, r3
    b2e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	701a      	strb	r2, [r3, #0]
    b2ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f2:	781b      	ldrb	r3, [r3, #0]
    b2f4:	2bff      	cmp	r3, #255	; 0xff
    b2f6:	d105      	bne.n	b304 <send_climb+0x5ec>
    b2f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b300:	2200      	movs	r2, #0
    b302:	701a      	strb	r2, [r3, #0]
    b304:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30c:	781b      	ldrb	r3, [r3, #0]
    b30e:	461a      	mov	r2, r3
    b310:	f64a 6300 	movw	r3, #44544	; 0xae00
    b314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b318:	7899      	ldrb	r1, [r3, #2]
    b31a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b322:	5499      	strb	r1, [r3, r2]
    b324:	4bae      	ldr	r3, [pc, #696]	; (b5e0 <send_climb+0x8c8>)
    b326:	781a      	ldrb	r2, [r3, #0]
    b328:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b330:	781b      	ldrb	r3, [r3, #0]
    b332:	4413      	add	r3, r2
    b334:	b2da      	uxtb	r2, r3
    b336:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33e:	701a      	strb	r2, [r3, #0]
    b340:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b348:	781a      	ldrb	r2, [r3, #0]
    b34a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b352:	781b      	ldrb	r3, [r3, #0]
    b354:	4413      	add	r3, r2
    b356:	b2da      	uxtb	r2, r3
    b358:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b360:	701a      	strb	r2, [r3, #0]
    b362:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	3301      	adds	r3, #1
    b36e:	b2da      	uxtb	r2, r3
    b370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	701a      	strb	r2, [r3, #0]
    b37a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	2bff      	cmp	r3, #255	; 0xff
    b386:	d105      	bne.n	b394 <send_climb+0x67c>
    b388:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b390:	2200      	movs	r2, #0
    b392:	701a      	strb	r2, [r3, #0]
    b394:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b39c:	781b      	ldrb	r3, [r3, #0]
    b39e:	461a      	mov	r2, r3
    b3a0:	f64a 6300 	movw	r3, #44544	; 0xae00
    b3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a8:	78d9      	ldrb	r1, [r3, #3]
    b3aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b2:	5499      	strb	r1, [r3, r2]
    b3b4:	4b8b      	ldr	r3, [pc, #556]	; (b5e4 <send_climb+0x8cc>)
    b3b6:	781a      	ldrb	r2, [r3, #0]
    b3b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c0:	781b      	ldrb	r3, [r3, #0]
    b3c2:	4413      	add	r3, r2
    b3c4:	b2da      	uxtb	r2, r3
    b3c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ce:	701a      	strb	r2, [r3, #0]
    b3d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d8:	781a      	ldrb	r2, [r3, #0]
    b3da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	4413      	add	r3, r2
    b3e6:	b2da      	uxtb	r2, r3
    b3e8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f0:	701a      	strb	r2, [r3, #0]
    b3f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3fa:	781b      	ldrb	r3, [r3, #0]
    b3fc:	3301      	adds	r3, #1
    b3fe:	b2da      	uxtb	r2, r3
    b400:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b408:	701a      	strb	r2, [r3, #0]
    b40a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	2bff      	cmp	r3, #255	; 0xff
    b416:	d105      	bne.n	b424 <send_climb+0x70c>
    b418:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b420:	2200      	movs	r2, #0
    b422:	701a      	strb	r2, [r3, #0]
    b424:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b42c:	781b      	ldrb	r3, [r3, #0]
    b42e:	461a      	mov	r2, r3
    b430:	f648 1360 	movw	r3, #35168	; 0x8960
    b434:	f2c0 0301 	movt	r3, #1
    b438:	7819      	ldrb	r1, [r3, #0]
    b43a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b442:	5499      	strb	r1, [r3, r2]
    b444:	f648 1360 	movw	r3, #35168	; 0x8960
    b448:	f2c0 0301 	movt	r3, #1
    b44c:	781a      	ldrb	r2, [r3, #0]
    b44e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	4413      	add	r3, r2
    b45a:	b2da      	uxtb	r2, r3
    b45c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b464:	701a      	strb	r2, [r3, #0]
    b466:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46e:	781a      	ldrb	r2, [r3, #0]
    b470:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	4413      	add	r3, r2
    b47c:	b2da      	uxtb	r2, r3
    b47e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b486:	701a      	strb	r2, [r3, #0]
    b488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	3301      	adds	r3, #1
    b494:	b2da      	uxtb	r2, r3
    b496:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49e:	701a      	strb	r2, [r3, #0]
    b4a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a8:	781b      	ldrb	r3, [r3, #0]
    b4aa:	2bff      	cmp	r3, #255	; 0xff
    b4ac:	d105      	bne.n	b4ba <send_climb+0x7a2>
    b4ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b6:	2200      	movs	r2, #0
    b4b8:	701a      	strb	r2, [r3, #0]
    b4ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c2:	781b      	ldrb	r3, [r3, #0]
    b4c4:	461a      	mov	r2, r3
    b4c6:	f648 1360 	movw	r3, #35168	; 0x8960
    b4ca:	f2c0 0301 	movt	r3, #1
    b4ce:	7859      	ldrb	r1, [r3, #1]
    b4d0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d8:	5499      	strb	r1, [r3, r2]
    b4da:	4b43      	ldr	r3, [pc, #268]	; (b5e8 <send_climb+0x8d0>)
    b4dc:	781a      	ldrb	r2, [r3, #0]
    b4de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e6:	781b      	ldrb	r3, [r3, #0]
    b4e8:	4413      	add	r3, r2
    b4ea:	b2da      	uxtb	r2, r3
    b4ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f4:	701a      	strb	r2, [r3, #0]
    b4f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fe:	781a      	ldrb	r2, [r3, #0]
    b500:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	4413      	add	r3, r2
    b50c:	b2da      	uxtb	r2, r3
    b50e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b516:	701a      	strb	r2, [r3, #0]
    b518:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b520:	781b      	ldrb	r3, [r3, #0]
    b522:	3301      	adds	r3, #1
    b524:	b2da      	uxtb	r2, r3
    b526:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52e:	701a      	strb	r2, [r3, #0]
    b530:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b538:	781b      	ldrb	r3, [r3, #0]
    b53a:	2bff      	cmp	r3, #255	; 0xff
    b53c:	d105      	bne.n	b54a <send_climb+0x832>
    b53e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b546:	2200      	movs	r2, #0
    b548:	701a      	strb	r2, [r3, #0]
    b54a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b552:	781b      	ldrb	r3, [r3, #0]
    b554:	461a      	mov	r2, r3
    b556:	f648 1360 	movw	r3, #35168	; 0x8960
    b55a:	f2c0 0301 	movt	r3, #1
    b55e:	7899      	ldrb	r1, [r3, #2]
    b560:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b568:	5499      	strb	r1, [r3, r2]
    b56a:	4b20      	ldr	r3, [pc, #128]	; (b5ec <send_climb+0x8d4>)
    b56c:	781a      	ldrb	r2, [r3, #0]
    b56e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b576:	781b      	ldrb	r3, [r3, #0]
    b578:	4413      	add	r3, r2
    b57a:	b2da      	uxtb	r2, r3
    b57c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b584:	701a      	strb	r2, [r3, #0]
    b586:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58e:	781a      	ldrb	r2, [r3, #0]
    b590:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	4413      	add	r3, r2
    b59c:	b2da      	uxtb	r2, r3
    b59e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a6:	701a      	strb	r2, [r3, #0]
    b5a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	3301      	adds	r3, #1
    b5b4:	b2da      	uxtb	r2, r3
    b5b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5be:	701a      	strb	r2, [r3, #0]
    b5c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	2bff      	cmp	r3, #255	; 0xff
    b5cc:	d110      	bne.n	b5f0 <send_climb+0x8d8>
    b5ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d6:	2200      	movs	r2, #0
    b5d8:	701a      	strb	r2, [r3, #0]
    b5da:	e009      	b.n	b5f0 <send_climb+0x8d8>
    b5dc:	2000ae01 	.word	0x2000ae01
    b5e0:	2000ae02 	.word	0x2000ae02
    b5e4:	2000ae03 	.word	0x2000ae03
    b5e8:	00018961 	.word	0x00018961
    b5ec:	00018962 	.word	0x00018962
    b5f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	461a      	mov	r2, r3
    b5fc:	f648 1360 	movw	r3, #35168	; 0x8960
    b600:	f2c0 0301 	movt	r3, #1
    b604:	78d9      	ldrb	r1, [r3, #3]
    b606:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	5499      	strb	r1, [r3, r2]
    b610:	4b79      	ldr	r3, [pc, #484]	; (b7f8 <send_climb+0xae0>)
    b612:	781a      	ldrb	r2, [r3, #0]
    b614:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61c:	781b      	ldrb	r3, [r3, #0]
    b61e:	4413      	add	r3, r2
    b620:	b2da      	uxtb	r2, r3
    b622:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62a:	701a      	strb	r2, [r3, #0]
    b62c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b634:	781a      	ldrb	r2, [r3, #0]
    b636:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	4413      	add	r3, r2
    b642:	b2da      	uxtb	r2, r3
    b644:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64c:	701a      	strb	r2, [r3, #0]
    b64e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b656:	781b      	ldrb	r3, [r3, #0]
    b658:	3301      	adds	r3, #1
    b65a:	b2da      	uxtb	r2, r3
    b65c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b664:	701a      	strb	r2, [r3, #0]
    b666:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66e:	781b      	ldrb	r3, [r3, #0]
    b670:	2bff      	cmp	r3, #255	; 0xff
    b672:	d105      	bne.n	b680 <send_climb+0x968>
    b674:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b67c:	2200      	movs	r2, #0
    b67e:	701a      	strb	r2, [r3, #0]
    b680:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	461a      	mov	r2, r3
    b68c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b694:	7819      	ldrb	r1, [r3, #0]
    b696:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b69e:	5499      	strb	r1, [r3, r2]
    b6a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	3301      	adds	r3, #1
    b6ac:	b2da      	uxtb	r2, r3
    b6ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b6:	701a      	strb	r2, [r3, #0]
    b6b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	2bff      	cmp	r3, #255	; 0xff
    b6c4:	d105      	bne.n	b6d2 <send_climb+0x9ba>
    b6c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ce:	2200      	movs	r2, #0
    b6d0:	701a      	strb	r2, [r3, #0]
    b6d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	461a      	mov	r2, r3
    b6de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e6:	7819      	ldrb	r1, [r3, #0]
    b6e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f0:	5499      	strb	r1, [r3, r2]
    b6f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6fa:	781b      	ldrb	r3, [r3, #0]
    b6fc:	3301      	adds	r3, #1
    b6fe:	b2da      	uxtb	r2, r3
    b700:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b708:	701a      	strb	r2, [r3, #0]
    b70a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b712:	781b      	ldrb	r3, [r3, #0]
    b714:	2bff      	cmp	r3, #255	; 0xff
    b716:	d105      	bne.n	b724 <send_climb+0xa0c>
    b718:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b720:	2200      	movs	r2, #0
    b722:	701a      	strb	r2, [r3, #0]
    b724:	f242 0339 	movw	r3, #8249	; 0x2039
    b728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b72c:	781b      	ldrb	r3, [r3, #0]
    b72e:	b2db      	uxtb	r3, r3
    b730:	f003 0310 	and.w	r3, r3, #16
    b734:	2b00      	cmp	r3, #0
    b736:	d15a      	bne.n	b7ee <send_climb+0xad6>
    b738:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	b2db      	uxtb	r3, r3
    b744:	461a      	mov	r2, r3
    b746:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b74e:	5c9a      	ldrb	r2, [r3, r2]
    b750:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    b754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    b75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b762:	2200      	movs	r2, #0
    b764:	701a      	strb	r2, [r3, #0]
    b766:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b76e:	781b      	ldrb	r3, [r3, #0]
    b770:	b2db      	uxtb	r3, r3
    b772:	3301      	adds	r3, #1
    b774:	b2da      	uxtb	r2, r3
    b776:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b77e:	701a      	strb	r2, [r3, #0]
    b780:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	b2db      	uxtb	r3, r3
    b78c:	2bff      	cmp	r3, #255	; 0xff
    b78e:	d105      	bne.n	b79c <send_climb+0xa84>
    b790:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b798:	2200      	movs	r2, #0
    b79a:	701a      	strb	r2, [r3, #0]
    b79c:	f242 0338 	movw	r3, #8248	; 0x2038
    b7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a4:	f242 0238 	movw	r2, #8248	; 0x2038
    b7a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b7ac:	7812      	ldrb	r2, [r2, #0]
    b7ae:	b2d2      	uxtb	r2, r2
    b7b0:	f042 0201 	orr.w	r2, r2, #1
    b7b4:	b2d2      	uxtb	r2, r2
    b7b6:	701a      	strb	r2, [r3, #0]
    b7b8:	f242 0339 	movw	r3, #8249	; 0x2039
    b7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c0:	f242 0239 	movw	r2, #8249	; 0x2039
    b7c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b7c8:	7812      	ldrb	r2, [r2, #0]
    b7ca:	b2d2      	uxtb	r2, r2
    b7cc:	f042 0210 	orr.w	r2, r2, #16
    b7d0:	b2d2      	uxtb	r2, r2
    b7d2:	701a      	strb	r2, [r3, #0]
    b7d4:	e00b      	b.n	b7ee <send_climb+0xad6>
    b7d6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	3301      	adds	r3, #1
    b7e2:	b2da      	uxtb	r2, r3
    b7e4:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ec:	701a      	strb	r2, [r3, #0]
}
    b7ee:	46bd      	mov	sp, r7
    b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7f4:	4770      	bx	lr
    b7f6:	bf00      	nop
    b7f8:	00018963 	.word	0x00018963

0000b7fc <send_mode>:
void send_mode(void){  //5000ms
    b7fc:	b480      	push	{r7}
    b7fe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b800:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    b804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b808:	781a      	ldrb	r2, [r3, #0]
    b80a:	f248 531f 	movw	r3, #34079	; 0x851f
    b80e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b812:	fba3 1302 	umull	r1, r3, r3, r2
    b816:	091b      	lsrs	r3, r3, #4
    b818:	2132      	movs	r1, #50	; 0x32
    b81a:	fb01 f303 	mul.w	r3, r1, r3
    b81e:	1ad3      	subs	r3, r2, r3
    b820:	b2db      	uxtb	r3, r3
    b822:	2b09      	cmp	r3, #9
    b824:	f040 82ba 	bne.w	bd9c <send_mode+0x5a0>
    b828:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b830:	781a      	ldrb	r2, [r3, #0]
    b832:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	b2db      	uxtb	r3, r3
    b83e:	429a      	cmp	r2, r3
    b840:	d313      	bcc.n	b86a <send_mode+0x6e>
    b842:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	b2db      	uxtb	r3, r3
    b84e:	461a      	mov	r2, r3
    b850:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b858:	781b      	ldrb	r3, [r3, #0]
    b85a:	1ad3      	subs	r3, r2, r3
    b85c:	33ff      	adds	r3, #255	; 0xff
    b85e:	2b09      	cmp	r3, #9
    b860:	bfd4      	ite	le
    b862:	2300      	movle	r3, #0
    b864:	2301      	movgt	r3, #1
    b866:	b2db      	uxtb	r3, r3
    b868:	e011      	b.n	b88e <send_mode+0x92>
    b86a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b872:	781b      	ldrb	r3, [r3, #0]
    b874:	b2db      	uxtb	r3, r3
    b876:	461a      	mov	r2, r3
    b878:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b880:	781b      	ldrb	r3, [r3, #0]
    b882:	1ad3      	subs	r3, r2, r3
    b884:	2b09      	cmp	r3, #9
    b886:	bfd4      	ite	le
    b888:	2300      	movle	r3, #0
    b88a:	2301      	movgt	r3, #1
    b88c:	b2db      	uxtb	r3, r3
    b88e:	2b00      	cmp	r3, #0
    b890:	f000 8278 	beq.w	bd84 <send_mode+0x588>
    b894:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	461a      	mov	r2, r3
    b8a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a8:	2105      	movs	r1, #5
    b8aa:	5499      	strb	r1, [r3, r2]
    b8ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b4:	781b      	ldrb	r3, [r3, #0]
    b8b6:	3301      	adds	r3, #1
    b8b8:	b2da      	uxtb	r2, r3
    b8ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c2:	701a      	strb	r2, [r3, #0]
    b8c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8cc:	781b      	ldrb	r3, [r3, #0]
    b8ce:	2bff      	cmp	r3, #255	; 0xff
    b8d0:	d105      	bne.n	b8de <send_mode+0xe2>
    b8d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8da:	2200      	movs	r2, #0
    b8dc:	701a      	strb	r2, [r3, #0]
    b8de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e6:	781b      	ldrb	r3, [r3, #0]
    b8e8:	461a      	mov	r2, r3
    b8ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f2:	210b      	movs	r1, #11
    b8f4:	5499      	strb	r1, [r3, r2]
    b8f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8fe:	781b      	ldrb	r3, [r3, #0]
    b900:	3301      	adds	r3, #1
    b902:	b2da      	uxtb	r2, r3
    b904:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90c:	701a      	strb	r2, [r3, #0]
    b90e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b916:	781b      	ldrb	r3, [r3, #0]
    b918:	2bff      	cmp	r3, #255	; 0xff
    b91a:	d105      	bne.n	b928 <send_mode+0x12c>
    b91c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b924:	2200      	movs	r2, #0
    b926:	701a      	strb	r2, [r3, #0]
    b928:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b930:	220b      	movs	r2, #11
    b932:	701a      	strb	r2, [r3, #0]
    b934:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93c:	220b      	movs	r2, #11
    b93e:	701a      	strb	r2, [r3, #0]
    b940:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b948:	781b      	ldrb	r3, [r3, #0]
    b94a:	461a      	mov	r2, r3
    b94c:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b954:	7819      	ldrb	r1, [r3, #0]
    b956:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b95e:	5499      	strb	r1, [r3, r2]
    b960:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b968:	781a      	ldrb	r2, [r3, #0]
    b96a:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	4413      	add	r3, r2
    b976:	b2da      	uxtb	r2, r3
    b978:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b980:	701a      	strb	r2, [r3, #0]
    b982:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b98a:	781a      	ldrb	r2, [r3, #0]
    b98c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b994:	781b      	ldrb	r3, [r3, #0]
    b996:	4413      	add	r3, r2
    b998:	b2da      	uxtb	r2, r3
    b99a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a2:	701a      	strb	r2, [r3, #0]
    b9a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ac:	781b      	ldrb	r3, [r3, #0]
    b9ae:	3301      	adds	r3, #1
    b9b0:	b2da      	uxtb	r2, r3
    b9b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ba:	701a      	strb	r2, [r3, #0]
    b9bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c4:	781b      	ldrb	r3, [r3, #0]
    b9c6:	2bff      	cmp	r3, #255	; 0xff
    b9c8:	d105      	bne.n	b9d6 <send_mode+0x1da>
    b9ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d2:	2200      	movs	r2, #0
    b9d4:	701a      	strb	r2, [r3, #0]
    b9d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	461a      	mov	r2, r3
    b9e2:	f64a 2395 	movw	r3, #43669	; 0xaa95
    b9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ea:	7819      	ldrb	r1, [r3, #0]
    b9ec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f4:	5499      	strb	r1, [r3, r2]
    b9f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9fe:	781a      	ldrb	r2, [r3, #0]
    ba00:	f64a 2395 	movw	r3, #43669	; 0xaa95
    ba04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	4413      	add	r3, r2
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba20:	781a      	ldrb	r2, [r3, #0]
    ba22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	4413      	add	r3, r2
    ba2e:	b2da      	uxtb	r2, r3
    ba30:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba38:	701a      	strb	r2, [r3, #0]
    ba3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	781b      	ldrb	r3, [r3, #0]
    ba44:	3301      	adds	r3, #1
    ba46:	b2da      	uxtb	r2, r3
    ba48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba50:	701a      	strb	r2, [r3, #0]
    ba52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5a:	781b      	ldrb	r3, [r3, #0]
    ba5c:	2bff      	cmp	r3, #255	; 0xff
    ba5e:	d105      	bne.n	ba6c <send_mode+0x270>
    ba60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba68:	2200      	movs	r2, #0
    ba6a:	701a      	strb	r2, [r3, #0]
    ba6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	461a      	mov	r2, r3
    ba78:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ba7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba80:	7819      	ldrb	r1, [r3, #0]
    ba82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8a:	5499      	strb	r1, [r3, r2]
    ba8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba94:	781a      	ldrb	r2, [r3, #0]
    ba96:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ba9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9e:	781b      	ldrb	r3, [r3, #0]
    baa0:	4413      	add	r3, r2
    baa2:	b2da      	uxtb	r2, r3
    baa4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    baa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baac:	701a      	strb	r2, [r3, #0]
    baae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab6:	781a      	ldrb	r2, [r3, #0]
    bab8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    babc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	4413      	add	r3, r2
    bac4:	b2da      	uxtb	r2, r3
    bac6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    baca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bace:	701a      	strb	r2, [r3, #0]
    bad0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad8:	781b      	ldrb	r3, [r3, #0]
    bada:	3301      	adds	r3, #1
    badc:	b2da      	uxtb	r2, r3
    bade:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae6:	701a      	strb	r2, [r3, #0]
    bae8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    baec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	2bff      	cmp	r3, #255	; 0xff
    baf4:	d105      	bne.n	bb02 <send_mode+0x306>
    baf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafe:	2200      	movs	r2, #0
    bb00:	701a      	strb	r2, [r3, #0]
    bb02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0a:	781b      	ldrb	r3, [r3, #0]
    bb0c:	461a      	mov	r2, r3
    bb0e:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    bb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb16:	7819      	ldrb	r1, [r3, #0]
    bb18:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb20:	5499      	strb	r1, [r3, r2]
    bb22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb2a:	781a      	ldrb	r2, [r3, #0]
    bb2c:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    bb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	4413      	add	r3, r2
    bb38:	b2da      	uxtb	r2, r3
    bb3a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb42:	701a      	strb	r2, [r3, #0]
    bb44:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4c:	781a      	ldrb	r2, [r3, #0]
    bb4e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	4413      	add	r3, r2
    bb5a:	b2da      	uxtb	r2, r3
    bb5c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb64:	701a      	strb	r2, [r3, #0]
    bb66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6e:	781b      	ldrb	r3, [r3, #0]
    bb70:	3301      	adds	r3, #1
    bb72:	b2da      	uxtb	r2, r3
    bb74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7c:	701a      	strb	r2, [r3, #0]
    bb7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb86:	781b      	ldrb	r3, [r3, #0]
    bb88:	2bff      	cmp	r3, #255	; 0xff
    bb8a:	d105      	bne.n	bb98 <send_mode+0x39c>
    bb8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb94:	2200      	movs	r2, #0
    bb96:	701a      	strb	r2, [r3, #0]
    bb98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba0:	781b      	ldrb	r3, [r3, #0]
    bba2:	461a      	mov	r2, r3
    bba4:	f240 2380 	movw	r3, #640	; 0x280
    bba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbac:	7819      	ldrb	r1, [r3, #0]
    bbae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb6:	5499      	strb	r1, [r3, r2]
    bbb8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc0:	781a      	ldrb	r2, [r3, #0]
    bbc2:	f240 2380 	movw	r3, #640	; 0x280
    bbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbca:	781b      	ldrb	r3, [r3, #0]
    bbcc:	4413      	add	r3, r2
    bbce:	b2da      	uxtb	r2, r3
    bbd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd8:	701a      	strb	r2, [r3, #0]
    bbda:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe2:	781a      	ldrb	r2, [r3, #0]
    bbe4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	4413      	add	r3, r2
    bbf0:	b2da      	uxtb	r2, r3
    bbf2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfa:	701a      	strb	r2, [r3, #0]
    bbfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	3301      	adds	r3, #1
    bc08:	b2da      	uxtb	r2, r3
    bc0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc12:	701a      	strb	r2, [r3, #0]
    bc14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1c:	781b      	ldrb	r3, [r3, #0]
    bc1e:	2bff      	cmp	r3, #255	; 0xff
    bc20:	d105      	bne.n	bc2e <send_mode+0x432>
    bc22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2a:	2200      	movs	r2, #0
    bc2c:	701a      	strb	r2, [r3, #0]
    bc2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc36:	781b      	ldrb	r3, [r3, #0]
    bc38:	461a      	mov	r2, r3
    bc3a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc42:	7819      	ldrb	r1, [r3, #0]
    bc44:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4c:	5499      	strb	r1, [r3, r2]
    bc4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc56:	781b      	ldrb	r3, [r3, #0]
    bc58:	3301      	adds	r3, #1
    bc5a:	b2da      	uxtb	r2, r3
    bc5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc64:	701a      	strb	r2, [r3, #0]
    bc66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	2bff      	cmp	r3, #255	; 0xff
    bc72:	d105      	bne.n	bc80 <send_mode+0x484>
    bc74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc7c:	2200      	movs	r2, #0
    bc7e:	701a      	strb	r2, [r3, #0]
    bc80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc88:	781b      	ldrb	r3, [r3, #0]
    bc8a:	461a      	mov	r2, r3
    bc8c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc94:	7819      	ldrb	r1, [r3, #0]
    bc96:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9e:	5499      	strb	r1, [r3, r2]
    bca0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca8:	781b      	ldrb	r3, [r3, #0]
    bcaa:	3301      	adds	r3, #1
    bcac:	b2da      	uxtb	r2, r3
    bcae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bcb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb6:	701a      	strb	r2, [r3, #0]
    bcb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	2bff      	cmp	r3, #255	; 0xff
    bcc4:	d105      	bne.n	bcd2 <send_mode+0x4d6>
    bcc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bcca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcce:	2200      	movs	r2, #0
    bcd0:	701a      	strb	r2, [r3, #0]
    bcd2:	f242 0339 	movw	r3, #8249	; 0x2039
    bcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcda:	781b      	ldrb	r3, [r3, #0]
    bcdc:	b2db      	uxtb	r3, r3
    bcde:	f003 0310 	and.w	r3, r3, #16
    bce2:	2b00      	cmp	r3, #0
    bce4:	d15a      	bne.n	bd9c <send_mode+0x5a0>
    bce6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bcea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	b2db      	uxtb	r3, r3
    bcf2:	461a      	mov	r2, r3
    bcf4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcfc:	5c9a      	ldrb	r2, [r3, r2]
    bcfe:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    bd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd06:	701a      	strb	r2, [r3, #0]
    bd08:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    bd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd10:	2200      	movs	r2, #0
    bd12:	701a      	strb	r2, [r3, #0]
    bd14:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd1c:	781b      	ldrb	r3, [r3, #0]
    bd1e:	b2db      	uxtb	r3, r3
    bd20:	3301      	adds	r3, #1
    bd22:	b2da      	uxtb	r2, r3
    bd24:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2c:	701a      	strb	r2, [r3, #0]
    bd2e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd36:	781b      	ldrb	r3, [r3, #0]
    bd38:	b2db      	uxtb	r3, r3
    bd3a:	2bff      	cmp	r3, #255	; 0xff
    bd3c:	d105      	bne.n	bd4a <send_mode+0x54e>
    bd3e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd46:	2200      	movs	r2, #0
    bd48:	701a      	strb	r2, [r3, #0]
    bd4a:	f242 0338 	movw	r3, #8248	; 0x2038
    bd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd52:	f242 0238 	movw	r2, #8248	; 0x2038
    bd56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd5a:	7812      	ldrb	r2, [r2, #0]
    bd5c:	b2d2      	uxtb	r2, r2
    bd5e:	f042 0201 	orr.w	r2, r2, #1
    bd62:	b2d2      	uxtb	r2, r2
    bd64:	701a      	strb	r2, [r3, #0]
    bd66:	f242 0339 	movw	r3, #8249	; 0x2039
    bd6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6e:	f242 0239 	movw	r2, #8249	; 0x2039
    bd72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd76:	7812      	ldrb	r2, [r2, #0]
    bd78:	b2d2      	uxtb	r2, r2
    bd7a:	f042 0210 	orr.w	r2, r2, #16
    bd7e:	b2d2      	uxtb	r2, r2
    bd80:	701a      	strb	r2, [r3, #0]
    bd82:	e00b      	b.n	bd9c <send_mode+0x5a0>
    bd84:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd8c:	781b      	ldrb	r3, [r3, #0]
    bd8e:	3301      	adds	r3, #1
    bd90:	b2da      	uxtb	r2, r3
    bd92:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd9a:	701a      	strb	r2, [r3, #0]
}
    bd9c:	46bd      	mov	sp, r7
    bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bda2:	4770      	bx	lr

0000bda4 <send_debug>:
void send_debug(void){  //5000ms
    bda4:	b480      	push	{r7}
    bda6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bda8:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    bdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb0:	781a      	ldrb	r2, [r3, #0]
    bdb2:	f248 531f 	movw	r3, #34079	; 0x851f
    bdb6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bdba:	fba3 1302 	umull	r1, r3, r3, r2
    bdbe:	091b      	lsrs	r3, r3, #4
    bdc0:	2132      	movs	r1, #50	; 0x32
    bdc2:	fb01 f303 	mul.w	r3, r1, r3
    bdc6:	1ad3      	subs	r3, r2, r3
    bdc8:	b2db      	uxtb	r3, r3
    bdca:	2b1d      	cmp	r3, #29
    bdcc:	f040 82bb 	bne.w	c346 <send_debug+0x5a2>
    bdd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd8:	781a      	ldrb	r2, [r3, #0]
    bdda:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bdde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde2:	781b      	ldrb	r3, [r3, #0]
    bde4:	b2db      	uxtb	r3, r3
    bde6:	429a      	cmp	r2, r3
    bde8:	d313      	bcc.n	be12 <send_debug+0x6e>
    bdea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	b2db      	uxtb	r3, r3
    bdf6:	461a      	mov	r2, r3
    bdf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	1ad3      	subs	r3, r2, r3
    be04:	33ff      	adds	r3, #255	; 0xff
    be06:	2b09      	cmp	r3, #9
    be08:	bfd4      	ite	le
    be0a:	2300      	movle	r3, #0
    be0c:	2301      	movgt	r3, #1
    be0e:	b2db      	uxtb	r3, r3
    be10:	e011      	b.n	be36 <send_debug+0x92>
    be12:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    be16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be1a:	781b      	ldrb	r3, [r3, #0]
    be1c:	b2db      	uxtb	r3, r3
    be1e:	461a      	mov	r2, r3
    be20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be28:	781b      	ldrb	r3, [r3, #0]
    be2a:	1ad3      	subs	r3, r2, r3
    be2c:	2b09      	cmp	r3, #9
    be2e:	bfd4      	ite	le
    be30:	2300      	movle	r3, #0
    be32:	2301      	movgt	r3, #1
    be34:	b2db      	uxtb	r3, r3
    be36:	2b00      	cmp	r3, #0
    be38:	f000 8279 	beq.w	c32e <send_debug+0x58a>
    be3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	461a      	mov	r2, r3
    be48:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    be4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be50:	2105      	movs	r1, #5
    be52:	5499      	strb	r1, [r3, r2]
    be54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	781b      	ldrb	r3, [r3, #0]
    be5e:	3301      	adds	r3, #1
    be60:	b2da      	uxtb	r2, r3
    be62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6a:	701a      	strb	r2, [r3, #0]
    be6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be74:	781b      	ldrb	r3, [r3, #0]
    be76:	2bff      	cmp	r3, #255	; 0xff
    be78:	d105      	bne.n	be86 <send_debug+0xe2>
    be7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be82:	2200      	movs	r2, #0
    be84:	701a      	strb	r2, [r3, #0]
    be86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8e:	781b      	ldrb	r3, [r3, #0]
    be90:	461a      	mov	r2, r3
    be92:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    be96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9a:	210d      	movs	r1, #13
    be9c:	5499      	strb	r1, [r3, r2]
    be9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea6:	781b      	ldrb	r3, [r3, #0]
    bea8:	3301      	adds	r3, #1
    beaa:	b2da      	uxtb	r2, r3
    beac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    beb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb4:	701a      	strb	r2, [r3, #0]
    beb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    beba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bebe:	781b      	ldrb	r3, [r3, #0]
    bec0:	2bff      	cmp	r3, #255	; 0xff
    bec2:	d105      	bne.n	bed0 <send_debug+0x12c>
    bec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    becc:	2200      	movs	r2, #0
    bece:	701a      	strb	r2, [r3, #0]
    bed0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed8:	220d      	movs	r2, #13
    beda:	701a      	strb	r2, [r3, #0]
    bedc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee4:	220d      	movs	r2, #13
    bee6:	701a      	strb	r2, [r3, #0]
    bee8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    beec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef0:	781b      	ldrb	r3, [r3, #0]
    bef2:	461a      	mov	r2, r3
    bef4:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	b2d9      	uxtb	r1, r3
    bf00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bf04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf08:	5499      	strb	r1, [r3, r2]
    bf0a:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    bf0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf12:	781a      	ldrb	r2, [r3, #0]
    bf14:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1c:	781b      	ldrb	r3, [r3, #0]
    bf1e:	4413      	add	r3, r2
    bf20:	b2da      	uxtb	r2, r3
    bf22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2a:	701a      	strb	r2, [r3, #0]
    bf2c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf34:	781a      	ldrb	r2, [r3, #0]
    bf36:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	4413      	add	r3, r2
    bf42:	b2da      	uxtb	r2, r3
    bf44:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf4c:	701a      	strb	r2, [r3, #0]
    bf4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	3301      	adds	r3, #1
    bf5a:	b2da      	uxtb	r2, r3
    bf5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf64:	701a      	strb	r2, [r3, #0]
    bf66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6e:	781b      	ldrb	r3, [r3, #0]
    bf70:	2bff      	cmp	r3, #255	; 0xff
    bf72:	d105      	bne.n	bf80 <send_debug+0x1dc>
    bf74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf7c:	2200      	movs	r2, #0
    bf7e:	701a      	strb	r2, [r3, #0]
    bf80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	461a      	mov	r2, r3
    bf8c:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf94:	7819      	ldrb	r1, [r3, #0]
    bf96:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9e:	5499      	strb	r1, [r3, r2]
    bfa0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bfa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa8:	781a      	ldrb	r2, [r3, #0]
    bfaa:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bfae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb2:	781b      	ldrb	r3, [r3, #0]
    bfb4:	4413      	add	r3, r2
    bfb6:	b2da      	uxtb	r2, r3
    bfb8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc0:	701a      	strb	r2, [r3, #0]
    bfc2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfca:	781a      	ldrb	r2, [r3, #0]
    bfcc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	4413      	add	r3, r2
    bfd8:	b2da      	uxtb	r2, r3
    bfda:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe2:	701a      	strb	r2, [r3, #0]
    bfe4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfec:	781b      	ldrb	r3, [r3, #0]
    bfee:	3301      	adds	r3, #1
    bff0:	b2da      	uxtb	r2, r3
    bff2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	2bff      	cmp	r3, #255	; 0xff
    c008:	d105      	bne.n	c016 <send_debug+0x272>
    c00a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c012:	2200      	movs	r2, #0
    c014:	701a      	strb	r2, [r3, #0]
    c016:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	461a      	mov	r2, r3
    c022:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02a:	7819      	ldrb	r1, [r3, #0]
    c02c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c034:	5499      	strb	r1, [r3, r2]
    c036:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03e:	781a      	ldrb	r2, [r3, #0]
    c040:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c048:	781b      	ldrb	r3, [r3, #0]
    c04a:	4413      	add	r3, r2
    c04c:	b2da      	uxtb	r2, r3
    c04e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c056:	701a      	strb	r2, [r3, #0]
    c058:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c060:	781a      	ldrb	r2, [r3, #0]
    c062:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06a:	781b      	ldrb	r3, [r3, #0]
    c06c:	4413      	add	r3, r2
    c06e:	b2da      	uxtb	r2, r3
    c070:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c078:	701a      	strb	r2, [r3, #0]
    c07a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	3301      	adds	r3, #1
    c086:	b2da      	uxtb	r2, r3
    c088:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c090:	701a      	strb	r2, [r3, #0]
    c092:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09a:	781b      	ldrb	r3, [r3, #0]
    c09c:	2bff      	cmp	r3, #255	; 0xff
    c09e:	d105      	bne.n	c0ac <send_debug+0x308>
    c0a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a8:	2200      	movs	r2, #0
    c0aa:	701a      	strb	r2, [r3, #0]
    c0ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	461a      	mov	r2, r3
    c0b8:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c0:	7819      	ldrb	r1, [r3, #0]
    c0c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ca:	5499      	strb	r1, [r3, r2]
    c0cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d4:	781a      	ldrb	r2, [r3, #0]
    c0d6:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0de:	781b      	ldrb	r3, [r3, #0]
    c0e0:	4413      	add	r3, r2
    c0e2:	b2da      	uxtb	r2, r3
    c0e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ec:	701a      	strb	r2, [r3, #0]
    c0ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f6:	781a      	ldrb	r2, [r3, #0]
    c0f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c100:	781b      	ldrb	r3, [r3, #0]
    c102:	4413      	add	r3, r2
    c104:	b2da      	uxtb	r2, r3
    c106:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10e:	701a      	strb	r2, [r3, #0]
    c110:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c118:	781b      	ldrb	r3, [r3, #0]
    c11a:	3301      	adds	r3, #1
    c11c:	b2da      	uxtb	r2, r3
    c11e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c126:	701a      	strb	r2, [r3, #0]
    c128:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	2bff      	cmp	r3, #255	; 0xff
    c134:	d105      	bne.n	c142 <send_debug+0x39e>
    c136:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13e:	2200      	movs	r2, #0
    c140:	701a      	strb	r2, [r3, #0]
    c142:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14a:	781b      	ldrb	r3, [r3, #0]
    c14c:	461a      	mov	r2, r3
    c14e:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c156:	7819      	ldrb	r1, [r3, #0]
    c158:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c160:	5499      	strb	r1, [r3, r2]
    c162:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16a:	781a      	ldrb	r2, [r3, #0]
    c16c:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c174:	781b      	ldrb	r3, [r3, #0]
    c176:	4413      	add	r3, r2
    c178:	b2da      	uxtb	r2, r3
    c17a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c182:	701a      	strb	r2, [r3, #0]
    c184:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18c:	781a      	ldrb	r2, [r3, #0]
    c18e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	4413      	add	r3, r2
    c19a:	b2da      	uxtb	r2, r3
    c19c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a4:	701a      	strb	r2, [r3, #0]
    c1a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	3301      	adds	r3, #1
    c1b2:	b2da      	uxtb	r2, r3
    c1b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1bc:	701a      	strb	r2, [r3, #0]
    c1be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	2bff      	cmp	r3, #255	; 0xff
    c1ca:	d105      	bne.n	c1d8 <send_debug+0x434>
    c1cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d4:	2200      	movs	r2, #0
    c1d6:	701a      	strb	r2, [r3, #0]
    c1d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	461a      	mov	r2, r3
    c1e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ec:	7819      	ldrb	r1, [r3, #0]
    c1ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f6:	5499      	strb	r1, [r3, r2]
    c1f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c200:	781b      	ldrb	r3, [r3, #0]
    c202:	3301      	adds	r3, #1
    c204:	b2da      	uxtb	r2, r3
    c206:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20e:	701a      	strb	r2, [r3, #0]
    c210:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	2bff      	cmp	r3, #255	; 0xff
    c21c:	d105      	bne.n	c22a <send_debug+0x486>
    c21e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c226:	2200      	movs	r2, #0
    c228:	701a      	strb	r2, [r3, #0]
    c22a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c232:	781b      	ldrb	r3, [r3, #0]
    c234:	461a      	mov	r2, r3
    c236:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23e:	7819      	ldrb	r1, [r3, #0]
    c240:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c248:	5499      	strb	r1, [r3, r2]
    c24a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c252:	781b      	ldrb	r3, [r3, #0]
    c254:	3301      	adds	r3, #1
    c256:	b2da      	uxtb	r2, r3
    c258:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c260:	701a      	strb	r2, [r3, #0]
    c262:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c26a:	781b      	ldrb	r3, [r3, #0]
    c26c:	2bff      	cmp	r3, #255	; 0xff
    c26e:	d105      	bne.n	c27c <send_debug+0x4d8>
    c270:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c278:	2200      	movs	r2, #0
    c27a:	701a      	strb	r2, [r3, #0]
    c27c:	f242 0339 	movw	r3, #8249	; 0x2039
    c280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c284:	781b      	ldrb	r3, [r3, #0]
    c286:	b2db      	uxtb	r3, r3
    c288:	f003 0310 	and.w	r3, r3, #16
    c28c:	2b00      	cmp	r3, #0
    c28e:	d15a      	bne.n	c346 <send_debug+0x5a2>
    c290:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	b2db      	uxtb	r3, r3
    c29c:	461a      	mov	r2, r3
    c29e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a6:	5c9a      	ldrb	r2, [r3, r2]
    c2a8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    c2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b0:	701a      	strb	r2, [r3, #0]
    c2b2:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    c2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ba:	2200      	movs	r2, #0
    c2bc:	701a      	strb	r2, [r3, #0]
    c2be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c6:	781b      	ldrb	r3, [r3, #0]
    c2c8:	b2db      	uxtb	r3, r3
    c2ca:	3301      	adds	r3, #1
    c2cc:	b2da      	uxtb	r2, r3
    c2ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d6:	701a      	strb	r2, [r3, #0]
    c2d8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	b2db      	uxtb	r3, r3
    c2e4:	2bff      	cmp	r3, #255	; 0xff
    c2e6:	d105      	bne.n	c2f4 <send_debug+0x550>
    c2e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f0:	2200      	movs	r2, #0
    c2f2:	701a      	strb	r2, [r3, #0]
    c2f4:	f242 0338 	movw	r3, #8248	; 0x2038
    c2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fc:	f242 0238 	movw	r2, #8248	; 0x2038
    c300:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c304:	7812      	ldrb	r2, [r2, #0]
    c306:	b2d2      	uxtb	r2, r2
    c308:	f042 0201 	orr.w	r2, r2, #1
    c30c:	b2d2      	uxtb	r2, r2
    c30e:	701a      	strb	r2, [r3, #0]
    c310:	f242 0339 	movw	r3, #8249	; 0x2039
    c314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c318:	f242 0239 	movw	r2, #8249	; 0x2039
    c31c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c320:	7812      	ldrb	r2, [r2, #0]
    c322:	b2d2      	uxtb	r2, r2
    c324:	f042 0210 	orr.w	r2, r2, #16
    c328:	b2d2      	uxtb	r2, r2
    c32a:	701a      	strb	r2, [r3, #0]
    c32c:	e00b      	b.n	c346 <send_debug+0x5a2>
    c32e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c336:	781b      	ldrb	r3, [r3, #0]
    c338:	3301      	adds	r3, #1
    c33a:	b2da      	uxtb	r2, r3
    c33c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c344:	701a      	strb	r2, [r3, #0]
}
    c346:	46bd      	mov	sp, r7
    c348:	f85d 7b04 	ldr.w	r7, [sp], #4
    c34c:	4770      	bx	lr
    c34e:	bf00      	nop

0000c350 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c350:	b480      	push	{r7}
    c352:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c354:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    c358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c35c:	781a      	ldrb	r2, [r3, #0]
    c35e:	f248 531f 	movw	r3, #34079	; 0x851f
    c362:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c366:	fba3 1302 	umull	r1, r3, r3, r2
    c36a:	095b      	lsrs	r3, r3, #5
    c36c:	2164      	movs	r1, #100	; 0x64
    c36e:	fb01 f303 	mul.w	r3, r1, r3
    c372:	1ad3      	subs	r3, r2, r3
    c374:	b2db      	uxtb	r3, r3
    c376:	2b31      	cmp	r3, #49	; 0x31
    c378:	f040 8395 	bne.w	caa6 <send_nav_ref+0x756>
    c37c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c384:	781a      	ldrb	r2, [r3, #0]
    c386:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	b2db      	uxtb	r3, r3
    c392:	429a      	cmp	r2, r3
    c394:	d313      	bcc.n	c3be <send_nav_ref+0x6e>
    c396:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	781b      	ldrb	r3, [r3, #0]
    c3a0:	b2db      	uxtb	r3, r3
    c3a2:	461a      	mov	r2, r3
    c3a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ac:	781b      	ldrb	r3, [r3, #0]
    c3ae:	1ad3      	subs	r3, r2, r3
    c3b0:	33ff      	adds	r3, #255	; 0xff
    c3b2:	2b0c      	cmp	r3, #12
    c3b4:	bfd4      	ite	le
    c3b6:	2300      	movle	r3, #0
    c3b8:	2301      	movgt	r3, #1
    c3ba:	b2db      	uxtb	r3, r3
    c3bc:	e011      	b.n	c3e2 <send_nav_ref+0x92>
    c3be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	b2db      	uxtb	r3, r3
    c3ca:	461a      	mov	r2, r3
    c3cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	1ad3      	subs	r3, r2, r3
    c3d8:	2b0c      	cmp	r3, #12
    c3da:	bfd4      	ite	le
    c3dc:	2300      	movle	r3, #0
    c3de:	2301      	movgt	r3, #1
    c3e0:	b2db      	uxtb	r3, r3
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	f000 8353 	beq.w	ca8e <send_nav_ref+0x73e>
    c3e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f0:	781b      	ldrb	r3, [r3, #0]
    c3f2:	461a      	mov	r2, r3
    c3f4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fc:	2105      	movs	r1, #5
    c3fe:	5499      	strb	r1, [r3, r2]
    c400:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	3301      	adds	r3, #1
    c40c:	b2da      	uxtb	r2, r3
    c40e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c416:	701a      	strb	r2, [r3, #0]
    c418:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c420:	781b      	ldrb	r3, [r3, #0]
    c422:	2bff      	cmp	r3, #255	; 0xff
    c424:	d105      	bne.n	c432 <send_nav_ref+0xe2>
    c426:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42e:	2200      	movs	r2, #0
    c430:	701a      	strb	r2, [r3, #0]
    c432:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c43a:	781b      	ldrb	r3, [r3, #0]
    c43c:	461a      	mov	r2, r3
    c43e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c446:	2109      	movs	r1, #9
    c448:	5499      	strb	r1, [r3, r2]
    c44a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	3301      	adds	r3, #1
    c456:	b2da      	uxtb	r2, r3
    c458:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c460:	701a      	strb	r2, [r3, #0]
    c462:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c46a:	781b      	ldrb	r3, [r3, #0]
    c46c:	2bff      	cmp	r3, #255	; 0xff
    c46e:	d105      	bne.n	c47c <send_nav_ref+0x12c>
    c470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c478:	2200      	movs	r2, #0
    c47a:	701a      	strb	r2, [r3, #0]
    c47c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c484:	2209      	movs	r2, #9
    c486:	701a      	strb	r2, [r3, #0]
    c488:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c490:	2209      	movs	r2, #9
    c492:	701a      	strb	r2, [r3, #0]
    c494:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c49c:	781b      	ldrb	r3, [r3, #0]
    c49e:	461a      	mov	r2, r3
    c4a0:	f648 1358 	movw	r3, #35160	; 0x8958
    c4a4:	f2c0 0301 	movt	r3, #1
    c4a8:	7819      	ldrb	r1, [r3, #0]
    c4aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b2:	5499      	strb	r1, [r3, r2]
    c4b4:	f648 1358 	movw	r3, #35160	; 0x8958
    c4b8:	f2c0 0301 	movt	r3, #1
    c4bc:	781a      	ldrb	r2, [r3, #0]
    c4be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	781b      	ldrb	r3, [r3, #0]
    c4c8:	4413      	add	r3, r2
    c4ca:	b2da      	uxtb	r2, r3
    c4cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d4:	701a      	strb	r2, [r3, #0]
    c4d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4de:	781a      	ldrb	r2, [r3, #0]
    c4e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	4413      	add	r3, r2
    c4ec:	b2da      	uxtb	r2, r3
    c4ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f6:	701a      	strb	r2, [r3, #0]
    c4f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	3301      	adds	r3, #1
    c504:	b2da      	uxtb	r2, r3
    c506:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	701a      	strb	r2, [r3, #0]
    c510:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c518:	781b      	ldrb	r3, [r3, #0]
    c51a:	2bff      	cmp	r3, #255	; 0xff
    c51c:	d105      	bne.n	c52a <send_nav_ref+0x1da>
    c51e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c526:	2200      	movs	r2, #0
    c528:	701a      	strb	r2, [r3, #0]
    c52a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c532:	781b      	ldrb	r3, [r3, #0]
    c534:	461a      	mov	r2, r3
    c536:	f648 1358 	movw	r3, #35160	; 0x8958
    c53a:	f2c0 0301 	movt	r3, #1
    c53e:	7859      	ldrb	r1, [r3, #1]
    c540:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c548:	5499      	strb	r1, [r3, r2]
    c54a:	4bd2      	ldr	r3, [pc, #840]	; (c894 <send_nav_ref+0x544>)
    c54c:	781a      	ldrb	r2, [r3, #0]
    c54e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	4413      	add	r3, r2
    c55a:	b2da      	uxtb	r2, r3
    c55c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c564:	701a      	strb	r2, [r3, #0]
    c566:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56e:	781a      	ldrb	r2, [r3, #0]
    c570:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	4413      	add	r3, r2
    c57c:	b2da      	uxtb	r2, r3
    c57e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c586:	701a      	strb	r2, [r3, #0]
    c588:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	3301      	adds	r3, #1
    c594:	b2da      	uxtb	r2, r3
    c596:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59e:	701a      	strb	r2, [r3, #0]
    c5a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5a8:	781b      	ldrb	r3, [r3, #0]
    c5aa:	2bff      	cmp	r3, #255	; 0xff
    c5ac:	d105      	bne.n	c5ba <send_nav_ref+0x26a>
    c5ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b6:	2200      	movs	r2, #0
    c5b8:	701a      	strb	r2, [r3, #0]
    c5ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c2:	781b      	ldrb	r3, [r3, #0]
    c5c4:	461a      	mov	r2, r3
    c5c6:	f648 1358 	movw	r3, #35160	; 0x8958
    c5ca:	f2c0 0301 	movt	r3, #1
    c5ce:	7899      	ldrb	r1, [r3, #2]
    c5d0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d8:	5499      	strb	r1, [r3, r2]
    c5da:	4baf      	ldr	r3, [pc, #700]	; (c898 <send_nav_ref+0x548>)
    c5dc:	781a      	ldrb	r2, [r3, #0]
    c5de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e6:	781b      	ldrb	r3, [r3, #0]
    c5e8:	4413      	add	r3, r2
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f4:	701a      	strb	r2, [r3, #0]
    c5f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fe:	781a      	ldrb	r2, [r3, #0]
    c600:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	4413      	add	r3, r2
    c60c:	b2da      	uxtb	r2, r3
    c60e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c616:	701a      	strb	r2, [r3, #0]
    c618:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	3301      	adds	r3, #1
    c624:	b2da      	uxtb	r2, r3
    c626:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62e:	701a      	strb	r2, [r3, #0]
    c630:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	2bff      	cmp	r3, #255	; 0xff
    c63c:	d105      	bne.n	c64a <send_nav_ref+0x2fa>
    c63e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c646:	2200      	movs	r2, #0
    c648:	701a      	strb	r2, [r3, #0]
    c64a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c652:	781b      	ldrb	r3, [r3, #0]
    c654:	461a      	mov	r2, r3
    c656:	f648 1358 	movw	r3, #35160	; 0x8958
    c65a:	f2c0 0301 	movt	r3, #1
    c65e:	78d9      	ldrb	r1, [r3, #3]
    c660:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c668:	5499      	strb	r1, [r3, r2]
    c66a:	4b8c      	ldr	r3, [pc, #560]	; (c89c <send_nav_ref+0x54c>)
    c66c:	781a      	ldrb	r2, [r3, #0]
    c66e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c676:	781b      	ldrb	r3, [r3, #0]
    c678:	4413      	add	r3, r2
    c67a:	b2da      	uxtb	r2, r3
    c67c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c684:	701a      	strb	r2, [r3, #0]
    c686:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68e:	781a      	ldrb	r2, [r3, #0]
    c690:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c698:	781b      	ldrb	r3, [r3, #0]
    c69a:	4413      	add	r3, r2
    c69c:	b2da      	uxtb	r2, r3
    c69e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a6:	701a      	strb	r2, [r3, #0]
    c6a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	3301      	adds	r3, #1
    c6b4:	b2da      	uxtb	r2, r3
    c6b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6be:	701a      	strb	r2, [r3, #0]
    c6c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c8:	781b      	ldrb	r3, [r3, #0]
    c6ca:	2bff      	cmp	r3, #255	; 0xff
    c6cc:	d105      	bne.n	c6da <send_nav_ref+0x38a>
    c6ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d6:	2200      	movs	r2, #0
    c6d8:	701a      	strb	r2, [r3, #0]
    c6da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e2:	781b      	ldrb	r3, [r3, #0]
    c6e4:	461a      	mov	r2, r3
    c6e6:	f648 135c 	movw	r3, #35164	; 0x895c
    c6ea:	f2c0 0301 	movt	r3, #1
    c6ee:	7819      	ldrb	r1, [r3, #0]
    c6f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f8:	5499      	strb	r1, [r3, r2]
    c6fa:	f648 135c 	movw	r3, #35164	; 0x895c
    c6fe:	f2c0 0301 	movt	r3, #1
    c702:	781a      	ldrb	r2, [r3, #0]
    c704:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70c:	781b      	ldrb	r3, [r3, #0]
    c70e:	4413      	add	r3, r2
    c710:	b2da      	uxtb	r2, r3
    c712:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71a:	701a      	strb	r2, [r3, #0]
    c71c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c724:	781a      	ldrb	r2, [r3, #0]
    c726:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	4413      	add	r3, r2
    c732:	b2da      	uxtb	r2, r3
    c734:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	3301      	adds	r3, #1
    c74a:	b2da      	uxtb	r2, r3
    c74c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c754:	701a      	strb	r2, [r3, #0]
    c756:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	2bff      	cmp	r3, #255	; 0xff
    c762:	d105      	bne.n	c770 <send_nav_ref+0x420>
    c764:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c76c:	2200      	movs	r2, #0
    c76e:	701a      	strb	r2, [r3, #0]
    c770:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c778:	781b      	ldrb	r3, [r3, #0]
    c77a:	461a      	mov	r2, r3
    c77c:	f648 135c 	movw	r3, #35164	; 0x895c
    c780:	f2c0 0301 	movt	r3, #1
    c784:	7859      	ldrb	r1, [r3, #1]
    c786:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78e:	5499      	strb	r1, [r3, r2]
    c790:	4b43      	ldr	r3, [pc, #268]	; (c8a0 <send_nav_ref+0x550>)
    c792:	781a      	ldrb	r2, [r3, #0]
    c794:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79c:	781b      	ldrb	r3, [r3, #0]
    c79e:	4413      	add	r3, r2
    c7a0:	b2da      	uxtb	r2, r3
    c7a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7aa:	701a      	strb	r2, [r3, #0]
    c7ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b4:	781a      	ldrb	r2, [r3, #0]
    c7b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7be:	781b      	ldrb	r3, [r3, #0]
    c7c0:	4413      	add	r3, r2
    c7c2:	b2da      	uxtb	r2, r3
    c7c4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7cc:	701a      	strb	r2, [r3, #0]
    c7ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d6:	781b      	ldrb	r3, [r3, #0]
    c7d8:	3301      	adds	r3, #1
    c7da:	b2da      	uxtb	r2, r3
    c7dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e4:	701a      	strb	r2, [r3, #0]
    c7e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	2bff      	cmp	r3, #255	; 0xff
    c7f2:	d105      	bne.n	c800 <send_nav_ref+0x4b0>
    c7f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fc:	2200      	movs	r2, #0
    c7fe:	701a      	strb	r2, [r3, #0]
    c800:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c808:	781b      	ldrb	r3, [r3, #0]
    c80a:	461a      	mov	r2, r3
    c80c:	f648 135c 	movw	r3, #35164	; 0x895c
    c810:	f2c0 0301 	movt	r3, #1
    c814:	7899      	ldrb	r1, [r3, #2]
    c816:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81e:	5499      	strb	r1, [r3, r2]
    c820:	4b20      	ldr	r3, [pc, #128]	; (c8a4 <send_nav_ref+0x554>)
    c822:	781a      	ldrb	r2, [r3, #0]
    c824:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82c:	781b      	ldrb	r3, [r3, #0]
    c82e:	4413      	add	r3, r2
    c830:	b2da      	uxtb	r2, r3
    c832:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c83a:	701a      	strb	r2, [r3, #0]
    c83c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c844:	781a      	ldrb	r2, [r3, #0]
    c846:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	4413      	add	r3, r2
    c852:	b2da      	uxtb	r2, r3
    c854:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85c:	701a      	strb	r2, [r3, #0]
    c85e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	3301      	adds	r3, #1
    c86a:	b2da      	uxtb	r2, r3
    c86c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c874:	701a      	strb	r2, [r3, #0]
    c876:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	2bff      	cmp	r3, #255	; 0xff
    c882:	d111      	bne.n	c8a8 <send_nav_ref+0x558>
    c884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88c:	2200      	movs	r2, #0
    c88e:	701a      	strb	r2, [r3, #0]
    c890:	e00a      	b.n	c8a8 <send_nav_ref+0x558>
    c892:	bf00      	nop
    c894:	00018959 	.word	0x00018959
    c898:	0001895a 	.word	0x0001895a
    c89c:	0001895b 	.word	0x0001895b
    c8a0:	0001895d 	.word	0x0001895d
    c8a4:	0001895e 	.word	0x0001895e
    c8a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	461a      	mov	r2, r3
    c8b4:	f648 135c 	movw	r3, #35164	; 0x895c
    c8b8:	f2c0 0301 	movt	r3, #1
    c8bc:	78d9      	ldrb	r1, [r3, #3]
    c8be:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c6:	5499      	strb	r1, [r3, r2]
    c8c8:	4b79      	ldr	r3, [pc, #484]	; (cab0 <send_nav_ref+0x760>)
    c8ca:	781a      	ldrb	r2, [r3, #0]
    c8cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d4:	781b      	ldrb	r3, [r3, #0]
    c8d6:	4413      	add	r3, r2
    c8d8:	b2da      	uxtb	r2, r3
    c8da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e2:	701a      	strb	r2, [r3, #0]
    c8e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ec:	781a      	ldrb	r2, [r3, #0]
    c8ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f6:	781b      	ldrb	r3, [r3, #0]
    c8f8:	4413      	add	r3, r2
    c8fa:	b2da      	uxtb	r2, r3
    c8fc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c904:	701a      	strb	r2, [r3, #0]
    c906:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90e:	781b      	ldrb	r3, [r3, #0]
    c910:	3301      	adds	r3, #1
    c912:	b2da      	uxtb	r2, r3
    c914:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91c:	701a      	strb	r2, [r3, #0]
    c91e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	2bff      	cmp	r3, #255	; 0xff
    c92a:	d105      	bne.n	c938 <send_nav_ref+0x5e8>
    c92c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c934:	2200      	movs	r2, #0
    c936:	701a      	strb	r2, [r3, #0]
    c938:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c940:	781b      	ldrb	r3, [r3, #0]
    c942:	461a      	mov	r2, r3
    c944:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94c:	7819      	ldrb	r1, [r3, #0]
    c94e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c956:	5499      	strb	r1, [r3, r2]
    c958:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	3301      	adds	r3, #1
    c964:	b2da      	uxtb	r2, r3
    c966:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96e:	701a      	strb	r2, [r3, #0]
    c970:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c978:	781b      	ldrb	r3, [r3, #0]
    c97a:	2bff      	cmp	r3, #255	; 0xff
    c97c:	d105      	bne.n	c98a <send_nav_ref+0x63a>
    c97e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c986:	2200      	movs	r2, #0
    c988:	701a      	strb	r2, [r3, #0]
    c98a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	461a      	mov	r2, r3
    c996:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99e:	7819      	ldrb	r1, [r3, #0]
    c9a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a8:	5499      	strb	r1, [r3, r2]
    c9aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b2:	781b      	ldrb	r3, [r3, #0]
    c9b4:	3301      	adds	r3, #1
    c9b6:	b2da      	uxtb	r2, r3
    c9b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c0:	701a      	strb	r2, [r3, #0]
    c9c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ca:	781b      	ldrb	r3, [r3, #0]
    c9cc:	2bff      	cmp	r3, #255	; 0xff
    c9ce:	d105      	bne.n	c9dc <send_nav_ref+0x68c>
    c9d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d8:	2200      	movs	r2, #0
    c9da:	701a      	strb	r2, [r3, #0]
    c9dc:	f242 0339 	movw	r3, #8249	; 0x2039
    c9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	b2db      	uxtb	r3, r3
    c9e8:	f003 0310 	and.w	r3, r3, #16
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d15a      	bne.n	caa6 <send_nav_ref+0x756>
    c9f0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	b2db      	uxtb	r3, r3
    c9fc:	461a      	mov	r2, r3
    c9fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ca02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca06:	5c9a      	ldrb	r2, [r3, r2]
    ca08:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    ca0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca10:	701a      	strb	r2, [r3, #0]
    ca12:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    ca16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1a:	2200      	movs	r2, #0
    ca1c:	701a      	strb	r2, [r3, #0]
    ca1e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ca22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca26:	781b      	ldrb	r3, [r3, #0]
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	3301      	adds	r3, #1
    ca2c:	b2da      	uxtb	r2, r3
    ca2e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ca32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca36:	701a      	strb	r2, [r3, #0]
    ca38:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ca3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	b2db      	uxtb	r3, r3
    ca44:	2bff      	cmp	r3, #255	; 0xff
    ca46:	d105      	bne.n	ca54 <send_nav_ref+0x704>
    ca48:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ca4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca50:	2200      	movs	r2, #0
    ca52:	701a      	strb	r2, [r3, #0]
    ca54:	f242 0338 	movw	r3, #8248	; 0x2038
    ca58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5c:	f242 0238 	movw	r2, #8248	; 0x2038
    ca60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ca64:	7812      	ldrb	r2, [r2, #0]
    ca66:	b2d2      	uxtb	r2, r2
    ca68:	f042 0201 	orr.w	r2, r2, #1
    ca6c:	b2d2      	uxtb	r2, r2
    ca6e:	701a      	strb	r2, [r3, #0]
    ca70:	f242 0339 	movw	r3, #8249	; 0x2039
    ca74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca78:	f242 0239 	movw	r2, #8249	; 0x2039
    ca7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ca80:	7812      	ldrb	r2, [r2, #0]
    ca82:	b2d2      	uxtb	r2, r2
    ca84:	f042 0210 	orr.w	r2, r2, #16
    ca88:	b2d2      	uxtb	r2, r2
    ca8a:	701a      	strb	r2, [r3, #0]
    ca8c:	e00b      	b.n	caa6 <send_nav_ref+0x756>
    ca8e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ca92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca96:	781b      	ldrb	r3, [r3, #0]
    ca98:	3301      	adds	r3, #1
    ca9a:	b2da      	uxtb	r2, r3
    ca9c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    caa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa4:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    caa6:	46bd      	mov	sp, r7
    caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    caac:	4770      	bx	lr
    caae:	bf00      	nop
    cab0:	0001895f 	.word	0x0001895f

0000cab4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cab4:	b480      	push	{r7}
    cab6:	b083      	sub	sp, #12
    cab8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    caba:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    cabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac2:	8a1b      	ldrh	r3, [r3, #16]
    cac4:	b21b      	sxth	r3, r3
    cac6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    caca:	db0d      	blt.n	cae8 <inflight_calib_mode_update+0x34>
    cacc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    cad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad4:	8a1b      	ldrh	r3, [r3, #16]
    cad6:	b21a      	sxth	r2, r3
    cad8:	f640 437f 	movw	r3, #3199	; 0xc7f
    cadc:	429a      	cmp	r2, r3
    cade:	bfd4      	ite	le
    cae0:	2300      	movle	r3, #0
    cae2:	2301      	movgt	r3, #1
    cae4:	b2db      	uxtb	r3, r3
    cae6:	e000      	b.n	caea <inflight_calib_mode_update+0x36>
    cae8:	2302      	movs	r3, #2
    caea:	71fb      	strb	r3, [r7, #7]
    caec:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    caf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf4:	781b      	ldrb	r3, [r3, #0]
    caf6:	79fa      	ldrb	r2, [r7, #7]
    caf8:	429a      	cmp	r2, r3
    cafa:	d007      	beq.n	cb0c <inflight_calib_mode_update+0x58>
    cafc:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    cb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb04:	79fa      	ldrb	r2, [r7, #7]
    cb06:	701a      	strb	r2, [r3, #0]
    cb08:	2301      	movs	r3, #1
    cb0a:	e000      	b.n	cb0e <inflight_calib_mode_update+0x5a>
    cb0c:	2300      	movs	r3, #0
}
    cb0e:	4618      	mov	r0, r3
    cb10:	370c      	adds	r7, #12
    cb12:	46bd      	mov	sp, r7
    cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb18:	4770      	bx	lr
    cb1a:	bf00      	nop

0000cb1c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cb1c:	b580      	push	{r7, lr}
    cb1e:	b082      	sub	sp, #8
    cb20:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cb22:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    cb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2a:	2201      	movs	r2, #1
    cb2c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cb2e:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    cb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	b2db      	uxtb	r3, r3
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	f000 83b8 	beq.w	d2b0 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cb40:	2300      	movs	r3, #0
    cb42:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cb44:	f7fa fa9c 	bl	7080 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cb48:	4b3a      	ldr	r3, [pc, #232]	; (cc34 <radio_control_task+0x118>)
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	b2db      	uxtb	r3, r3
    cb4e:	f003 0302 	and.w	r3, r3, #2
    cb52:	2b00      	cmp	r3, #0
    cb54:	d00d      	beq.n	cb72 <radio_control_task+0x56>
    cb56:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	2b01      	cmp	r3, #1
    cb62:	d00d      	beq.n	cb80 <radio_control_task+0x64>
    cb64:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb6c:	781b      	ldrb	r3, [r3, #0]
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d006      	beq.n	cb80 <radio_control_task+0x64>
    cb72:	f64a 6344 	movw	r3, #44612	; 0xae44
    cb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	2b00      	cmp	r3, #0
    cb7e:	d007      	beq.n	cb90 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cb80:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb88:	2203      	movs	r2, #3
    cb8a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cb8c:	2301      	movs	r3, #1
    cb8e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cb90:	f7fa f950 	bl	6e34 <pprz_mode_update>
    cb94:	4603      	mov	r3, r0
    cb96:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cb98:	79fa      	ldrb	r2, [r7, #7]
    cb9a:	79bb      	ldrb	r3, [r7, #6]
    cb9c:	4313      	orrs	r3, r2
    cb9e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cba0:	f7fa f994 	bl	6ecc <ir_estim_mode_update>
    cba4:	4603      	mov	r3, r0
    cba6:	461a      	mov	r2, r3
    cba8:	79fb      	ldrb	r3, [r7, #7]
    cbaa:	4313      	orrs	r3, r2
    cbac:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cbae:	f7ff ff81 	bl	cab4 <inflight_calib_mode_update>
    cbb2:	4603      	mov	r3, r0
    cbb4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cbb6:	797b      	ldrb	r3, [r7, #5]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d102      	bne.n	cbc2 <radio_control_task+0xa6>
    cbbc:	79bb      	ldrb	r3, [r7, #6]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d001      	beq.n	cbc6 <radio_control_task+0xaa>
    cbc2:	2301      	movs	r3, #1
    cbc4:	e000      	b.n	cbc8 <radio_control_task+0xac>
    cbc6:	2300      	movs	r3, #0
    cbc8:	b2db      	uxtb	r3, r3
    cbca:	4618      	mov	r0, r3
    cbcc:	f008 fba0 	bl	15310 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cbd0:	79fa      	ldrb	r2, [r7, #7]
    cbd2:	797b      	ldrb	r3, [r7, #5]
    cbd4:	4313      	orrs	r3, r2
    cbd6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cbd8:	f7fa f9a0 	bl	6f1c <mcu1_status_update>
    cbdc:	4603      	mov	r3, r0
    cbde:	461a      	mov	r2, r3
    cbe0:	79fb      	ldrb	r3, [r7, #7]
    cbe2:	4313      	orrs	r3, r2
    cbe4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cbe6:	2301      	movs	r3, #1
    cbe8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cbea:	79fb      	ldrb	r3, [r7, #7]
    cbec:	2b00      	cmp	r3, #0
    cbee:	f000 82bc 	beq.w	d16a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cbf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbfa:	781a      	ldrb	r2, [r3, #0]
    cbfc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc04:	781b      	ldrb	r3, [r3, #0]
    cc06:	b2db      	uxtb	r3, r3
    cc08:	429a      	cmp	r2, r3
    cc0a:	d315      	bcc.n	cc38 <radio_control_task+0x11c>
    cc0c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc14:	781b      	ldrb	r3, [r3, #0]
    cc16:	b2db      	uxtb	r3, r3
    cc18:	461a      	mov	r2, r3
    cc1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc22:	781b      	ldrb	r3, [r3, #0]
    cc24:	1ad3      	subs	r3, r2, r3
    cc26:	33ff      	adds	r3, #255	; 0xff
    cc28:	2b09      	cmp	r3, #9
    cc2a:	bfd4      	ite	le
    cc2c:	2300      	movle	r3, #0
    cc2e:	2301      	movgt	r3, #1
    cc30:	b2db      	uxtb	r3, r3
    cc32:	e013      	b.n	cc5c <radio_control_task+0x140>
    cc34:	2000abcb 	.word	0x2000abcb
    cc38:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	b2db      	uxtb	r3, r3
    cc44:	461a      	mov	r2, r3
    cc46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	1ad3      	subs	r3, r2, r3
    cc52:	2b09      	cmp	r3, #9
    cc54:	bfd4      	ite	le
    cc56:	2300      	movle	r3, #0
    cc58:	2301      	movgt	r3, #1
    cc5a:	b2db      	uxtb	r3, r3
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	f000 8278 	beq.w	d152 <radio_control_task+0x636>
    cc62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6a:	781b      	ldrb	r3, [r3, #0]
    cc6c:	461a      	mov	r2, r3
    cc6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc76:	2105      	movs	r1, #5
    cc78:	5499      	strb	r1, [r3, r2]
    cc7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc82:	781b      	ldrb	r3, [r3, #0]
    cc84:	3301      	adds	r3, #1
    cc86:	b2da      	uxtb	r2, r3
    cc88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc90:	701a      	strb	r2, [r3, #0]
    cc92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	2bff      	cmp	r3, #255	; 0xff
    cc9e:	d105      	bne.n	ccac <radio_control_task+0x190>
    cca0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca8:	2200      	movs	r2, #0
    ccaa:	701a      	strb	r2, [r3, #0]
    ccac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb4:	781b      	ldrb	r3, [r3, #0]
    ccb6:	461a      	mov	r2, r3
    ccb8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ccbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc0:	210b      	movs	r1, #11
    ccc2:	5499      	strb	r1, [r3, r2]
    ccc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	3301      	adds	r3, #1
    ccd0:	b2da      	uxtb	r2, r3
    ccd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccda:	701a      	strb	r2, [r3, #0]
    ccdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce4:	781b      	ldrb	r3, [r3, #0]
    cce6:	2bff      	cmp	r3, #255	; 0xff
    cce8:	d105      	bne.n	ccf6 <radio_control_task+0x1da>
    ccea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf2:	2200      	movs	r2, #0
    ccf4:	701a      	strb	r2, [r3, #0]
    ccf6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ccfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfe:	220b      	movs	r2, #11
    cd00:	701a      	strb	r2, [r3, #0]
    cd02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd0a:	220b      	movs	r2, #11
    cd0c:	701a      	strb	r2, [r3, #0]
    cd0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd16:	781b      	ldrb	r3, [r3, #0]
    cd18:	461a      	mov	r2, r3
    cd1a:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd22:	7819      	ldrb	r1, [r3, #0]
    cd24:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2c:	5499      	strb	r1, [r3, r2]
    cd2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd36:	781a      	ldrb	r2, [r3, #0]
    cd38:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd40:	781b      	ldrb	r3, [r3, #0]
    cd42:	4413      	add	r3, r2
    cd44:	b2da      	uxtb	r2, r3
    cd46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd58:	781a      	ldrb	r2, [r3, #0]
    cd5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	4413      	add	r3, r2
    cd66:	b2da      	uxtb	r2, r3
    cd68:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd70:	701a      	strb	r2, [r3, #0]
    cd72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7a:	781b      	ldrb	r3, [r3, #0]
    cd7c:	3301      	adds	r3, #1
    cd7e:	b2da      	uxtb	r2, r3
    cd80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd88:	701a      	strb	r2, [r3, #0]
    cd8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd92:	781b      	ldrb	r3, [r3, #0]
    cd94:	2bff      	cmp	r3, #255	; 0xff
    cd96:	d105      	bne.n	cda4 <radio_control_task+0x288>
    cd98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda0:	2200      	movs	r2, #0
    cda2:	701a      	strb	r2, [r3, #0]
    cda4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	461a      	mov	r2, r3
    cdb0:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb8:	7819      	ldrb	r1, [r3, #0]
    cdba:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc2:	5499      	strb	r1, [r3, r2]
    cdc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdcc:	781a      	ldrb	r2, [r3, #0]
    cdce:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cdd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	4413      	add	r3, r2
    cdda:	b2da      	uxtb	r2, r3
    cddc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde4:	701a      	strb	r2, [r3, #0]
    cde6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdee:	781a      	ldrb	r2, [r3, #0]
    cdf0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cdf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdf8:	781b      	ldrb	r3, [r3, #0]
    cdfa:	4413      	add	r3, r2
    cdfc:	b2da      	uxtb	r2, r3
    cdfe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce06:	701a      	strb	r2, [r3, #0]
    ce08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	781b      	ldrb	r3, [r3, #0]
    ce12:	3301      	adds	r3, #1
    ce14:	b2da      	uxtb	r2, r3
    ce16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce1e:	701a      	strb	r2, [r3, #0]
    ce20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce28:	781b      	ldrb	r3, [r3, #0]
    ce2a:	2bff      	cmp	r3, #255	; 0xff
    ce2c:	d105      	bne.n	ce3a <radio_control_task+0x31e>
    ce2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce36:	2200      	movs	r2, #0
    ce38:	701a      	strb	r2, [r3, #0]
    ce3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	461a      	mov	r2, r3
    ce46:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ce4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce4e:	7819      	ldrb	r1, [r3, #0]
    ce50:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ce54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce58:	5499      	strb	r1, [r3, r2]
    ce5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce62:	781a      	ldrb	r2, [r3, #0]
    ce64:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ce68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce6c:	781b      	ldrb	r3, [r3, #0]
    ce6e:	4413      	add	r3, r2
    ce70:	b2da      	uxtb	r2, r3
    ce72:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce7a:	701a      	strb	r2, [r3, #0]
    ce7c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce84:	781a      	ldrb	r2, [r3, #0]
    ce86:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	4413      	add	r3, r2
    ce92:	b2da      	uxtb	r2, r3
    ce94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9c:	701a      	strb	r2, [r3, #0]
    ce9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea6:	781b      	ldrb	r3, [r3, #0]
    cea8:	3301      	adds	r3, #1
    ceaa:	b2da      	uxtb	r2, r3
    ceac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ceb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb4:	701a      	strb	r2, [r3, #0]
    ceb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ceba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cebe:	781b      	ldrb	r3, [r3, #0]
    cec0:	2bff      	cmp	r3, #255	; 0xff
    cec2:	d105      	bne.n	ced0 <radio_control_task+0x3b4>
    cec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cecc:	2200      	movs	r2, #0
    cece:	701a      	strb	r2, [r3, #0]
    ced0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ced4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	461a      	mov	r2, r3
    cedc:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    cee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee4:	7819      	ldrb	r1, [r3, #0]
    cee6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ceea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceee:	5499      	strb	r1, [r3, r2]
    cef0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef8:	781a      	ldrb	r2, [r3, #0]
    cefa:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    cefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	4413      	add	r3, r2
    cf06:	b2da      	uxtb	r2, r3
    cf08:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf10:	701a      	strb	r2, [r3, #0]
    cf12:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf1a:	781a      	ldrb	r2, [r3, #0]
    cf1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf24:	781b      	ldrb	r3, [r3, #0]
    cf26:	4413      	add	r3, r2
    cf28:	b2da      	uxtb	r2, r3
    cf2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf32:	701a      	strb	r2, [r3, #0]
    cf34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3c:	781b      	ldrb	r3, [r3, #0]
    cf3e:	3301      	adds	r3, #1
    cf40:	b2da      	uxtb	r2, r3
    cf42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf4a:	701a      	strb	r2, [r3, #0]
    cf4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf54:	781b      	ldrb	r3, [r3, #0]
    cf56:	2bff      	cmp	r3, #255	; 0xff
    cf58:	d105      	bne.n	cf66 <radio_control_task+0x44a>
    cf5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf62:	2200      	movs	r2, #0
    cf64:	701a      	strb	r2, [r3, #0]
    cf66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	461a      	mov	r2, r3
    cf72:	f240 2380 	movw	r3, #640	; 0x280
    cf76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf7a:	7819      	ldrb	r1, [r3, #0]
    cf7c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	5499      	strb	r1, [r3, r2]
    cf86:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8e:	781a      	ldrb	r2, [r3, #0]
    cf90:	f240 2380 	movw	r3, #640	; 0x280
    cf94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf98:	781b      	ldrb	r3, [r3, #0]
    cf9a:	4413      	add	r3, r2
    cf9c:	b2da      	uxtb	r2, r3
    cf9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa6:	701a      	strb	r2, [r3, #0]
    cfa8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb0:	781a      	ldrb	r2, [r3, #0]
    cfb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfba:	781b      	ldrb	r3, [r3, #0]
    cfbc:	4413      	add	r3, r2
    cfbe:	b2da      	uxtb	r2, r3
    cfc0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	701a      	strb	r2, [r3, #0]
    cfca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd2:	781b      	ldrb	r3, [r3, #0]
    cfd4:	3301      	adds	r3, #1
    cfd6:	b2da      	uxtb	r2, r3
    cfd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe0:	701a      	strb	r2, [r3, #0]
    cfe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	2bff      	cmp	r3, #255	; 0xff
    cfee:	d105      	bne.n	cffc <radio_control_task+0x4e0>
    cff0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff8:	2200      	movs	r2, #0
    cffa:	701a      	strb	r2, [r3, #0]
    cffc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d004:	781b      	ldrb	r3, [r3, #0]
    d006:	461a      	mov	r2, r3
    d008:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d010:	7819      	ldrb	r1, [r3, #0]
    d012:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01a:	5499      	strb	r1, [r3, r2]
    d01c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d024:	781b      	ldrb	r3, [r3, #0]
    d026:	3301      	adds	r3, #1
    d028:	b2da      	uxtb	r2, r3
    d02a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d032:	701a      	strb	r2, [r3, #0]
    d034:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03c:	781b      	ldrb	r3, [r3, #0]
    d03e:	2bff      	cmp	r3, #255	; 0xff
    d040:	d105      	bne.n	d04e <radio_control_task+0x532>
    d042:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d04a:	2200      	movs	r2, #0
    d04c:	701a      	strb	r2, [r3, #0]
    d04e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d056:	781b      	ldrb	r3, [r3, #0]
    d058:	461a      	mov	r2, r3
    d05a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d062:	7819      	ldrb	r1, [r3, #0]
    d064:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d06c:	5499      	strb	r1, [r3, r2]
    d06e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	3301      	adds	r3, #1
    d07a:	b2da      	uxtb	r2, r3
    d07c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d084:	701a      	strb	r2, [r3, #0]
    d086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08e:	781b      	ldrb	r3, [r3, #0]
    d090:	2bff      	cmp	r3, #255	; 0xff
    d092:	d105      	bne.n	d0a0 <radio_control_task+0x584>
    d094:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d09c:	2200      	movs	r2, #0
    d09e:	701a      	strb	r2, [r3, #0]
    d0a0:	f242 0339 	movw	r3, #8249	; 0x2039
    d0a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a8:	781b      	ldrb	r3, [r3, #0]
    d0aa:	b2db      	uxtb	r3, r3
    d0ac:	f003 0310 	and.w	r3, r3, #16
    d0b0:	2b00      	cmp	r3, #0
    d0b2:	d15a      	bne.n	d16a <radio_control_task+0x64e>
    d0b4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0bc:	781b      	ldrb	r3, [r3, #0]
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	461a      	mov	r2, r3
    d0c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ca:	5c9a      	ldrb	r2, [r3, r2]
    d0cc:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    d0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d4:	701a      	strb	r2, [r3, #0]
    d0d6:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    d0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0de:	2200      	movs	r2, #0
    d0e0:	701a      	strb	r2, [r3, #0]
    d0e2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	b2db      	uxtb	r3, r3
    d0ee:	3301      	adds	r3, #1
    d0f0:	b2da      	uxtb	r2, r3
    d0f2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0fa:	701a      	strb	r2, [r3, #0]
    d0fc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d104:	781b      	ldrb	r3, [r3, #0]
    d106:	b2db      	uxtb	r3, r3
    d108:	2bff      	cmp	r3, #255	; 0xff
    d10a:	d105      	bne.n	d118 <radio_control_task+0x5fc>
    d10c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d114:	2200      	movs	r2, #0
    d116:	701a      	strb	r2, [r3, #0]
    d118:	f242 0338 	movw	r3, #8248	; 0x2038
    d11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d120:	f242 0238 	movw	r2, #8248	; 0x2038
    d124:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d128:	7812      	ldrb	r2, [r2, #0]
    d12a:	b2d2      	uxtb	r2, r2
    d12c:	f042 0201 	orr.w	r2, r2, #1
    d130:	b2d2      	uxtb	r2, r2
    d132:	701a      	strb	r2, [r3, #0]
    d134:	f242 0339 	movw	r3, #8249	; 0x2039
    d138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d13c:	f242 0239 	movw	r2, #8249	; 0x2039
    d140:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d144:	7812      	ldrb	r2, [r2, #0]
    d146:	b2d2      	uxtb	r2, r2
    d148:	f042 0210 	orr.w	r2, r2, #16
    d14c:	b2d2      	uxtb	r2, r2
    d14e:	701a      	strb	r2, [r3, #0]
    d150:	e00b      	b.n	d16a <radio_control_task+0x64e>
    d152:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	3301      	adds	r3, #1
    d15e:	b2da      	uxtb	r2, r3
    d160:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d168:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d16a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d172:	885b      	ldrh	r3, [r3, #2]
    d174:	b21b      	sxth	r3, r3
    d176:	4618      	mov	r0, r3
    d178:	f00b f862 	bl	18240 <__aeabi_i2f>
    d17c:	4603      	mov	r3, r0
    d17e:	4618      	mov	r0, r3
    d180:	f04f 0100 	mov.w	r1, #0
    d184:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d188:	f00b f962 	bl	18450 <__aeabi_fdiv>
    d18c:	4603      	mov	r3, r0
    d18e:	4618      	mov	r0, r3
    d190:	f00a fc16 	bl	179c0 <__aeabi_f2d>
    d194:	4602      	mov	r2, r0
    d196:	460b      	mov	r3, r1
    d198:	4610      	mov	r0, r2
    d19a:	4619      	mov	r1, r3
    d19c:	a346      	add	r3, pc, #280	; (adr r3, d2b8 <radio_control_task+0x79c>)
    d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1a2:	f00a fc61 	bl	17a68 <__aeabi_dmul>
    d1a6:	4602      	mov	r2, r0
    d1a8:	460b      	mov	r3, r1
    d1aa:	4610      	mov	r0, r2
    d1ac:	4619      	mov	r1, r3
    d1ae:	f04f 0200 	mov.w	r2, #0
    d1b2:	f04f 0300 	mov.w	r3, #0
    d1b6:	f00a faa5 	bl	17704 <__adddf3>
    d1ba:	4602      	mov	r2, r0
    d1bc:	460b      	mov	r3, r1
    d1be:	4610      	mov	r0, r2
    d1c0:	4619      	mov	r1, r3
    d1c2:	f00a ff33 	bl	1802c <__aeabi_d2f>
    d1c6:	4602      	mov	r2, r0
    d1c8:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    d1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d1d2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1da:	889b      	ldrh	r3, [r3, #4]
    d1dc:	b21b      	sxth	r3, r3
    d1de:	4618      	mov	r0, r3
    d1e0:	f00b f82e 	bl	18240 <__aeabi_i2f>
    d1e4:	4603      	mov	r3, r0
    d1e6:	4618      	mov	r0, r3
    d1e8:	f04f 0100 	mov.w	r1, #0
    d1ec:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d1f0:	f00b f92e 	bl	18450 <__aeabi_fdiv>
    d1f4:	4603      	mov	r3, r0
    d1f6:	4618      	mov	r0, r3
    d1f8:	f00a fbe2 	bl	179c0 <__aeabi_f2d>
    d1fc:	4602      	mov	r2, r0
    d1fe:	460b      	mov	r3, r1
    d200:	4610      	mov	r0, r2
    d202:	4619      	mov	r1, r3
    d204:	f04f 0200 	mov.w	r2, #0
    d208:	f04f 0300 	mov.w	r3, #0
    d20c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d210:	f00a fc2a 	bl	17a68 <__aeabi_dmul>
    d214:	4602      	mov	r2, r0
    d216:	460b      	mov	r3, r1
    d218:	4610      	mov	r0, r2
    d21a:	4619      	mov	r1, r3
    d21c:	f04f 0200 	mov.w	r2, #0
    d220:	f04f 0300 	mov.w	r3, #0
    d224:	f00a fa6e 	bl	17704 <__adddf3>
    d228:	4602      	mov	r2, r0
    d22a:	460b      	mov	r3, r1
    d22c:	4610      	mov	r0, r2
    d22e:	4619      	mov	r1, r3
    d230:	f00a fefc 	bl	1802c <__aeabi_d2f>
    d234:	4602      	mov	r2, r0
    d236:	f64a 53e0 	movw	r3, #44512	; 0xade0
    d23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d23e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d240:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d248:	881a      	ldrh	r2, [r3, #0]
    d24a:	f64a 53e4 	movw	r3, #44516	; 0xade4
    d24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d252:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d254:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25c:	7c9a      	ldrb	r2, [r3, #18]
    d25e:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d266:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d268:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d270:	7d5a      	ldrb	r2, [r3, #21]
    d272:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    d276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d27a:	701a      	strb	r2, [r3, #0]

    events_update();
    d27c:	f7f9 fe7e 	bl	6f7c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d280:	f7f8 fc7e 	bl	5b80 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d284:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	2b02      	cmp	r3, #2
    d290:	d10e      	bne.n	d2b0 <radio_control_task+0x794>
    d292:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d29a:	881b      	ldrh	r3, [r3, #0]
    d29c:	b21b      	sxth	r3, r3
    d29e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d2a2:	dd05      	ble.n	d2b0 <radio_control_task+0x794>
	launch = TRUE;
    d2a4:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    d2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ac:	2201      	movs	r2, #1
    d2ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d2b0:	3708      	adds	r7, #8
    d2b2:	46bd      	mov	sp, r7
    d2b4:	bd80      	pop	{r7, pc}
    d2b6:	bf00      	nop
    d2b8:	33333333 	.word	0x33333333
    d2bc:	bfe33333 	.word	0xbfe33333

0000d2c0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d2c0:	b580      	push	{r7, lr}
    d2c2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d2c4:	f64a 2396 	movw	r3, #43670	; 0xaa96
    d2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2cc:	2203      	movs	r2, #3
    d2ce:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d2d0:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d8:	781b      	ldrb	r3, [r3, #0]
    d2da:	2b03      	cmp	r3, #3
    d2dc:	d102      	bne.n	d2e4 <navigation_update+0x24>
    nav_home();
    d2de:	f007 fa9b 	bl	14818 <nav_home>
    d2e2:	e001      	b.n	d2e8 <navigation_update+0x28>
  else
    nav_update();
    d2e4:	f007 fabe 	bl	14864 <nav_update>
}
    d2e8:	bd80      	pop	{r7, pc}
    d2ea:	bf00      	nop

0000d2ec <send_nav_values>:

void send_nav_values(void){
    d2ec:	b480      	push	{r7}
    d2ee:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d2f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f8:	781a      	ldrb	r2, [r3, #0]
    d2fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d302:	781b      	ldrb	r3, [r3, #0]
    d304:	b2db      	uxtb	r3, r3
    d306:	429a      	cmp	r2, r3
    d308:	d313      	bcc.n	d332 <send_nav_values+0x46>
    d30a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d312:	781b      	ldrb	r3, [r3, #0]
    d314:	b2db      	uxtb	r3, r3
    d316:	461a      	mov	r2, r3
    d318:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d320:	781b      	ldrb	r3, [r3, #0]
    d322:	1ad3      	subs	r3, r2, r3
    d324:	33ff      	adds	r3, #255	; 0xff
    d326:	2b1e      	cmp	r3, #30
    d328:	bfd4      	ite	le
    d32a:	2300      	movle	r3, #0
    d32c:	2301      	movgt	r3, #1
    d32e:	b2db      	uxtb	r3, r3
    d330:	e011      	b.n	d356 <send_nav_values+0x6a>
    d332:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d33a:	781b      	ldrb	r3, [r3, #0]
    d33c:	b2db      	uxtb	r3, r3
    d33e:	461a      	mov	r2, r3
    d340:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	1ad3      	subs	r3, r2, r3
    d34c:	2b1e      	cmp	r3, #30
    d34e:	bfd4      	ite	le
    d350:	2300      	movle	r3, #0
    d352:	2301      	movgt	r3, #1
    d354:	b2db      	uxtb	r3, r3
    d356:	2b00      	cmp	r3, #0
    d358:	f001 8094 	beq.w	e484 <send_nav_values+0x1198>
    d35c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d364:	781b      	ldrb	r3, [r3, #0]
    d366:	461a      	mov	r2, r3
    d368:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d370:	2105      	movs	r1, #5
    d372:	5499      	strb	r1, [r3, r2]
    d374:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37c:	781b      	ldrb	r3, [r3, #0]
    d37e:	3301      	adds	r3, #1
    d380:	b2da      	uxtb	r2, r3
    d382:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d38a:	701a      	strb	r2, [r3, #0]
    d38c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d394:	781b      	ldrb	r3, [r3, #0]
    d396:	2bff      	cmp	r3, #255	; 0xff
    d398:	d105      	bne.n	d3a6 <send_nav_values+0xba>
    d39a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a2:	2200      	movs	r2, #0
    d3a4:	701a      	strb	r2, [r3, #0]
    d3a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ae:	781b      	ldrb	r3, [r3, #0]
    d3b0:	461a      	mov	r2, r3
    d3b2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ba:	210a      	movs	r1, #10
    d3bc:	5499      	strb	r1, [r3, r2]
    d3be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c6:	781b      	ldrb	r3, [r3, #0]
    d3c8:	3301      	adds	r3, #1
    d3ca:	b2da      	uxtb	r2, r3
    d3cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3d4:	701a      	strb	r2, [r3, #0]
    d3d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3de:	781b      	ldrb	r3, [r3, #0]
    d3e0:	2bff      	cmp	r3, #255	; 0xff
    d3e2:	d105      	bne.n	d3f0 <send_nav_values+0x104>
    d3e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ec:	2200      	movs	r2, #0
    d3ee:	701a      	strb	r2, [r3, #0]
    d3f0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f8:	220a      	movs	r2, #10
    d3fa:	701a      	strb	r2, [r3, #0]
    d3fc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d404:	220a      	movs	r2, #10
    d406:	701a      	strb	r2, [r3, #0]
    d408:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d410:	781b      	ldrb	r3, [r3, #0]
    d412:	461a      	mov	r2, r3
    d414:	f64a 6309 	movw	r3, #44553	; 0xae09
    d418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41c:	7819      	ldrb	r1, [r3, #0]
    d41e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d426:	5499      	strb	r1, [r3, r2]
    d428:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d430:	781a      	ldrb	r2, [r3, #0]
    d432:	f64a 6309 	movw	r3, #44553	; 0xae09
    d436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d43a:	781b      	ldrb	r3, [r3, #0]
    d43c:	4413      	add	r3, r2
    d43e:	b2da      	uxtb	r2, r3
    d440:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d448:	701a      	strb	r2, [r3, #0]
    d44a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d452:	781a      	ldrb	r2, [r3, #0]
    d454:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d45c:	781b      	ldrb	r3, [r3, #0]
    d45e:	4413      	add	r3, r2
    d460:	b2da      	uxtb	r2, r3
    d462:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d46a:	701a      	strb	r2, [r3, #0]
    d46c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d474:	781b      	ldrb	r3, [r3, #0]
    d476:	3301      	adds	r3, #1
    d478:	b2da      	uxtb	r2, r3
    d47a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d47e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d482:	701a      	strb	r2, [r3, #0]
    d484:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d48c:	781b      	ldrb	r3, [r3, #0]
    d48e:	2bff      	cmp	r3, #255	; 0xff
    d490:	d105      	bne.n	d49e <send_nav_values+0x1b2>
    d492:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d49a:	2200      	movs	r2, #0
    d49c:	701a      	strb	r2, [r3, #0]
    d49e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	461a      	mov	r2, r3
    d4aa:	f64a 6308 	movw	r3, #44552	; 0xae08
    d4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b2:	7819      	ldrb	r1, [r3, #0]
    d4b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4bc:	5499      	strb	r1, [r3, r2]
    d4be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c6:	781a      	ldrb	r2, [r3, #0]
    d4c8:	f64a 6308 	movw	r3, #44552	; 0xae08
    d4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d0:	781b      	ldrb	r3, [r3, #0]
    d4d2:	4413      	add	r3, r2
    d4d4:	b2da      	uxtb	r2, r3
    d4d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4de:	701a      	strb	r2, [r3, #0]
    d4e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e8:	781a      	ldrb	r2, [r3, #0]
    d4ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f2:	781b      	ldrb	r3, [r3, #0]
    d4f4:	4413      	add	r3, r2
    d4f6:	b2da      	uxtb	r2, r3
    d4f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d500:	701a      	strb	r2, [r3, #0]
    d502:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50a:	781b      	ldrb	r3, [r3, #0]
    d50c:	3301      	adds	r3, #1
    d50e:	b2da      	uxtb	r2, r3
    d510:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d518:	701a      	strb	r2, [r3, #0]
    d51a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d522:	781b      	ldrb	r3, [r3, #0]
    d524:	2bff      	cmp	r3, #255	; 0xff
    d526:	d105      	bne.n	d534 <send_nav_values+0x248>
    d528:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d530:	2200      	movs	r2, #0
    d532:	701a      	strb	r2, [r3, #0]
    d534:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	461a      	mov	r2, r3
    d540:	f24b 0364 	movw	r3, #45156	; 0xb064
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	7819      	ldrb	r1, [r3, #0]
    d54a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d552:	5499      	strb	r1, [r3, r2]
    d554:	f24b 0364 	movw	r3, #45156	; 0xb064
    d558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55c:	781a      	ldrb	r2, [r3, #0]
    d55e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	4413      	add	r3, r2
    d56a:	b2da      	uxtb	r2, r3
    d56c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d574:	701a      	strb	r2, [r3, #0]
    d576:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57e:	781a      	ldrb	r2, [r3, #0]
    d580:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	4413      	add	r3, r2
    d58c:	b2da      	uxtb	r2, r3
    d58e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d596:	701a      	strb	r2, [r3, #0]
    d598:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a0:	781b      	ldrb	r3, [r3, #0]
    d5a2:	3301      	adds	r3, #1
    d5a4:	b2da      	uxtb	r2, r3
    d5a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ae:	701a      	strb	r2, [r3, #0]
    d5b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b8:	781b      	ldrb	r3, [r3, #0]
    d5ba:	2bff      	cmp	r3, #255	; 0xff
    d5bc:	d105      	bne.n	d5ca <send_nav_values+0x2de>
    d5be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c6:	2200      	movs	r2, #0
    d5c8:	701a      	strb	r2, [r3, #0]
    d5ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d2:	781b      	ldrb	r3, [r3, #0]
    d5d4:	461a      	mov	r2, r3
    d5d6:	f24b 0364 	movw	r3, #45156	; 0xb064
    d5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5de:	7859      	ldrb	r1, [r3, #1]
    d5e0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	5499      	strb	r1, [r3, r2]
    d5ea:	4bd2      	ldr	r3, [pc, #840]	; (d934 <send_nav_values+0x648>)
    d5ec:	781a      	ldrb	r2, [r3, #0]
    d5ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	4413      	add	r3, r2
    d5fa:	b2da      	uxtb	r2, r3
    d5fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d604:	701a      	strb	r2, [r3, #0]
    d606:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60e:	781a      	ldrb	r2, [r3, #0]
    d610:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d618:	781b      	ldrb	r3, [r3, #0]
    d61a:	4413      	add	r3, r2
    d61c:	b2da      	uxtb	r2, r3
    d61e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d626:	701a      	strb	r2, [r3, #0]
    d628:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d630:	781b      	ldrb	r3, [r3, #0]
    d632:	3301      	adds	r3, #1
    d634:	b2da      	uxtb	r2, r3
    d636:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d63e:	701a      	strb	r2, [r3, #0]
    d640:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d648:	781b      	ldrb	r3, [r3, #0]
    d64a:	2bff      	cmp	r3, #255	; 0xff
    d64c:	d105      	bne.n	d65a <send_nav_values+0x36e>
    d64e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d656:	2200      	movs	r2, #0
    d658:	701a      	strb	r2, [r3, #0]
    d65a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d662:	781b      	ldrb	r3, [r3, #0]
    d664:	461a      	mov	r2, r3
    d666:	f24b 0364 	movw	r3, #45156	; 0xb064
    d66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d66e:	7899      	ldrb	r1, [r3, #2]
    d670:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d678:	5499      	strb	r1, [r3, r2]
    d67a:	4baf      	ldr	r3, [pc, #700]	; (d938 <send_nav_values+0x64c>)
    d67c:	781a      	ldrb	r2, [r3, #0]
    d67e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d686:	781b      	ldrb	r3, [r3, #0]
    d688:	4413      	add	r3, r2
    d68a:	b2da      	uxtb	r2, r3
    d68c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d694:	701a      	strb	r2, [r3, #0]
    d696:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	781a      	ldrb	r2, [r3, #0]
    d6a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	4413      	add	r3, r2
    d6ac:	b2da      	uxtb	r2, r3
    d6ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	701a      	strb	r2, [r3, #0]
    d6b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	781b      	ldrb	r3, [r3, #0]
    d6c2:	3301      	adds	r3, #1
    d6c4:	b2da      	uxtb	r2, r3
    d6c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ce:	701a      	strb	r2, [r3, #0]
    d6d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d8:	781b      	ldrb	r3, [r3, #0]
    d6da:	2bff      	cmp	r3, #255	; 0xff
    d6dc:	d105      	bne.n	d6ea <send_nav_values+0x3fe>
    d6de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	2200      	movs	r2, #0
    d6e8:	701a      	strb	r2, [r3, #0]
    d6ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f2:	781b      	ldrb	r3, [r3, #0]
    d6f4:	461a      	mov	r2, r3
    d6f6:	f24b 0364 	movw	r3, #45156	; 0xb064
    d6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fe:	78d9      	ldrb	r1, [r3, #3]
    d700:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	5499      	strb	r1, [r3, r2]
    d70a:	4b8c      	ldr	r3, [pc, #560]	; (d93c <send_nav_values+0x650>)
    d70c:	781a      	ldrb	r2, [r3, #0]
    d70e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	4413      	add	r3, r2
    d71a:	b2da      	uxtb	r2, r3
    d71c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d724:	701a      	strb	r2, [r3, #0]
    d726:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72e:	781a      	ldrb	r2, [r3, #0]
    d730:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d738:	781b      	ldrb	r3, [r3, #0]
    d73a:	4413      	add	r3, r2
    d73c:	b2da      	uxtb	r2, r3
    d73e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d746:	701a      	strb	r2, [r3, #0]
    d748:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d750:	781b      	ldrb	r3, [r3, #0]
    d752:	3301      	adds	r3, #1
    d754:	b2da      	uxtb	r2, r3
    d756:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75e:	701a      	strb	r2, [r3, #0]
    d760:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d768:	781b      	ldrb	r3, [r3, #0]
    d76a:	2bff      	cmp	r3, #255	; 0xff
    d76c:	d105      	bne.n	d77a <send_nav_values+0x48e>
    d76e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d776:	2200      	movs	r2, #0
    d778:	701a      	strb	r2, [r3, #0]
    d77a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d782:	781b      	ldrb	r3, [r3, #0]
    d784:	461a      	mov	r2, r3
    d786:	f24b 0368 	movw	r3, #45160	; 0xb068
    d78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d78e:	7819      	ldrb	r1, [r3, #0]
    d790:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d798:	5499      	strb	r1, [r3, r2]
    d79a:	f24b 0368 	movw	r3, #45160	; 0xb068
    d79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a2:	781a      	ldrb	r2, [r3, #0]
    d7a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ac:	781b      	ldrb	r3, [r3, #0]
    d7ae:	4413      	add	r3, r2
    d7b0:	b2da      	uxtb	r2, r3
    d7b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ba:	701a      	strb	r2, [r3, #0]
    d7bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c4:	781a      	ldrb	r2, [r3, #0]
    d7c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	4413      	add	r3, r2
    d7d2:	b2da      	uxtb	r2, r3
    d7d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	701a      	strb	r2, [r3, #0]
    d7de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e6:	781b      	ldrb	r3, [r3, #0]
    d7e8:	3301      	adds	r3, #1
    d7ea:	b2da      	uxtb	r2, r3
    d7ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f4:	701a      	strb	r2, [r3, #0]
    d7f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7fe:	781b      	ldrb	r3, [r3, #0]
    d800:	2bff      	cmp	r3, #255	; 0xff
    d802:	d105      	bne.n	d810 <send_nav_values+0x524>
    d804:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d80c:	2200      	movs	r2, #0
    d80e:	701a      	strb	r2, [r3, #0]
    d810:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d818:	781b      	ldrb	r3, [r3, #0]
    d81a:	461a      	mov	r2, r3
    d81c:	f24b 0368 	movw	r3, #45160	; 0xb068
    d820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d824:	7859      	ldrb	r1, [r3, #1]
    d826:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d82e:	5499      	strb	r1, [r3, r2]
    d830:	4b43      	ldr	r3, [pc, #268]	; (d940 <send_nav_values+0x654>)
    d832:	781a      	ldrb	r2, [r3, #0]
    d834:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	4413      	add	r3, r2
    d840:	b2da      	uxtb	r2, r3
    d842:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84a:	701a      	strb	r2, [r3, #0]
    d84c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d854:	781a      	ldrb	r2, [r3, #0]
    d856:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	4413      	add	r3, r2
    d862:	b2da      	uxtb	r2, r3
    d864:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	3301      	adds	r3, #1
    d87a:	b2da      	uxtb	r2, r3
    d87c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d884:	701a      	strb	r2, [r3, #0]
    d886:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d88e:	781b      	ldrb	r3, [r3, #0]
    d890:	2bff      	cmp	r3, #255	; 0xff
    d892:	d105      	bne.n	d8a0 <send_nav_values+0x5b4>
    d894:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d89c:	2200      	movs	r2, #0
    d89e:	701a      	strb	r2, [r3, #0]
    d8a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	461a      	mov	r2, r3
    d8ac:	f24b 0368 	movw	r3, #45160	; 0xb068
    d8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b4:	7899      	ldrb	r1, [r3, #2]
    d8b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8be:	5499      	strb	r1, [r3, r2]
    d8c0:	4b20      	ldr	r3, [pc, #128]	; (d944 <send_nav_values+0x658>)
    d8c2:	781a      	ldrb	r2, [r3, #0]
    d8c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8cc:	781b      	ldrb	r3, [r3, #0]
    d8ce:	4413      	add	r3, r2
    d8d0:	b2da      	uxtb	r2, r3
    d8d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	701a      	strb	r2, [r3, #0]
    d8dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	781a      	ldrb	r2, [r3, #0]
    d8e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	4413      	add	r3, r2
    d8f2:	b2da      	uxtb	r2, r3
    d8f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	701a      	strb	r2, [r3, #0]
    d8fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	781b      	ldrb	r3, [r3, #0]
    d908:	3301      	adds	r3, #1
    d90a:	b2da      	uxtb	r2, r3
    d90c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d914:	701a      	strb	r2, [r3, #0]
    d916:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	2bff      	cmp	r3, #255	; 0xff
    d922:	d111      	bne.n	d948 <send_nav_values+0x65c>
    d924:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92c:	2200      	movs	r2, #0
    d92e:	701a      	strb	r2, [r3, #0]
    d930:	e00a      	b.n	d948 <send_nav_values+0x65c>
    d932:	bf00      	nop
    d934:	2000b065 	.word	0x2000b065
    d938:	2000b066 	.word	0x2000b066
    d93c:	2000b067 	.word	0x2000b067
    d940:	2000b069 	.word	0x2000b069
    d944:	2000b06a 	.word	0x2000b06a
    d948:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d950:	781b      	ldrb	r3, [r3, #0]
    d952:	461a      	mov	r2, r3
    d954:	f24b 0368 	movw	r3, #45160	; 0xb068
    d958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d95c:	78d9      	ldrb	r1, [r3, #3]
    d95e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	5499      	strb	r1, [r3, r2]
    d968:	4bd3      	ldr	r3, [pc, #844]	; (dcb8 <send_nav_values+0x9cc>)
    d96a:	781a      	ldrb	r2, [r3, #0]
    d96c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d974:	781b      	ldrb	r3, [r3, #0]
    d976:	4413      	add	r3, r2
    d978:	b2da      	uxtb	r2, r3
    d97a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d982:	701a      	strb	r2, [r3, #0]
    d984:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d98c:	781a      	ldrb	r2, [r3, #0]
    d98e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d996:	781b      	ldrb	r3, [r3, #0]
    d998:	4413      	add	r3, r2
    d99a:	b2da      	uxtb	r2, r3
    d99c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a4:	701a      	strb	r2, [r3, #0]
    d9a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	3301      	adds	r3, #1
    d9b2:	b2da      	uxtb	r2, r3
    d9b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9bc:	701a      	strb	r2, [r3, #0]
    d9be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	2bff      	cmp	r3, #255	; 0xff
    d9ca:	d105      	bne.n	d9d8 <send_nav_values+0x6ec>
    d9cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d4:	2200      	movs	r2, #0
    d9d6:	701a      	strb	r2, [r3, #0]
    d9d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e0:	781b      	ldrb	r3, [r3, #0]
    d9e2:	461a      	mov	r2, r3
    d9e4:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ec:	7819      	ldrb	r1, [r3, #0]
    d9ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f6:	5499      	strb	r1, [r3, r2]
    d9f8:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da00:	781a      	ldrb	r2, [r3, #0]
    da02:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0a:	781b      	ldrb	r3, [r3, #0]
    da0c:	4413      	add	r3, r2
    da0e:	b2da      	uxtb	r2, r3
    da10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da18:	701a      	strb	r2, [r3, #0]
    da1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da22:	781a      	ldrb	r2, [r3, #0]
    da24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2c:	781b      	ldrb	r3, [r3, #0]
    da2e:	4413      	add	r3, r2
    da30:	b2da      	uxtb	r2, r3
    da32:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3a:	701a      	strb	r2, [r3, #0]
    da3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	781b      	ldrb	r3, [r3, #0]
    da46:	3301      	adds	r3, #1
    da48:	b2da      	uxtb	r2, r3
    da4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da52:	701a      	strb	r2, [r3, #0]
    da54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5c:	781b      	ldrb	r3, [r3, #0]
    da5e:	2bff      	cmp	r3, #255	; 0xff
    da60:	d105      	bne.n	da6e <send_nav_values+0x782>
    da62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6a:	2200      	movs	r2, #0
    da6c:	701a      	strb	r2, [r3, #0]
    da6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da76:	781b      	ldrb	r3, [r3, #0]
    da78:	461a      	mov	r2, r3
    da7a:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    da7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da82:	7859      	ldrb	r1, [r3, #1]
    da84:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	5499      	strb	r1, [r3, r2]
    da8e:	4b8b      	ldr	r3, [pc, #556]	; (dcbc <send_nav_values+0x9d0>)
    da90:	781a      	ldrb	r2, [r3, #0]
    da92:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9a:	781b      	ldrb	r3, [r3, #0]
    da9c:	4413      	add	r3, r2
    da9e:	b2da      	uxtb	r2, r3
    daa0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    daa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa8:	701a      	strb	r2, [r3, #0]
    daaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    daae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab2:	781a      	ldrb	r2, [r3, #0]
    dab4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	781b      	ldrb	r3, [r3, #0]
    dabe:	4413      	add	r3, r2
    dac0:	b2da      	uxtb	r2, r3
    dac2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daca:	701a      	strb	r2, [r3, #0]
    dacc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	781b      	ldrb	r3, [r3, #0]
    dad6:	3301      	adds	r3, #1
    dad8:	b2da      	uxtb	r2, r3
    dada:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae2:	701a      	strb	r2, [r3, #0]
    dae4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	2bff      	cmp	r3, #255	; 0xff
    daf0:	d105      	bne.n	dafe <send_nav_values+0x812>
    daf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    daf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafa:	2200      	movs	r2, #0
    dafc:	701a      	strb	r2, [r3, #0]
    dafe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db06:	781b      	ldrb	r3, [r3, #0]
    db08:	461a      	mov	r2, r3
    db0a:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    db0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db12:	7899      	ldrb	r1, [r3, #2]
    db14:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    db18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1c:	5499      	strb	r1, [r3, r2]
    db1e:	4b68      	ldr	r3, [pc, #416]	; (dcc0 <send_nav_values+0x9d4>)
    db20:	781a      	ldrb	r2, [r3, #0]
    db22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2a:	781b      	ldrb	r3, [r3, #0]
    db2c:	4413      	add	r3, r2
    db2e:	b2da      	uxtb	r2, r3
    db30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db38:	701a      	strb	r2, [r3, #0]
    db3a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db42:	781a      	ldrb	r2, [r3, #0]
    db44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4c:	781b      	ldrb	r3, [r3, #0]
    db4e:	4413      	add	r3, r2
    db50:	b2da      	uxtb	r2, r3
    db52:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5a:	701a      	strb	r2, [r3, #0]
    db5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	3301      	adds	r3, #1
    db68:	b2da      	uxtb	r2, r3
    db6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db72:	701a      	strb	r2, [r3, #0]
    db74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	2bff      	cmp	r3, #255	; 0xff
    db80:	d105      	bne.n	db8e <send_nav_values+0x8a2>
    db82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8a:	2200      	movs	r2, #0
    db8c:	701a      	strb	r2, [r3, #0]
    db8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db96:	781b      	ldrb	r3, [r3, #0]
    db98:	461a      	mov	r2, r3
    db9a:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    db9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba2:	78d9      	ldrb	r1, [r3, #3]
    dba4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbac:	5499      	strb	r1, [r3, r2]
    dbae:	4b45      	ldr	r3, [pc, #276]	; (dcc4 <send_nav_values+0x9d8>)
    dbb0:	781a      	ldrb	r2, [r3, #0]
    dbb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbba:	781b      	ldrb	r3, [r3, #0]
    dbbc:	4413      	add	r3, r2
    dbbe:	b2da      	uxtb	r2, r3
    dbc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc8:	701a      	strb	r2, [r3, #0]
    dbca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd2:	781a      	ldrb	r2, [r3, #0]
    dbd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbdc:	781b      	ldrb	r3, [r3, #0]
    dbde:	4413      	add	r3, r2
    dbe0:	b2da      	uxtb	r2, r3
    dbe2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbea:	701a      	strb	r2, [r3, #0]
    dbec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf4:	781b      	ldrb	r3, [r3, #0]
    dbf6:	3301      	adds	r3, #1
    dbf8:	b2da      	uxtb	r2, r3
    dbfa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc02:	701a      	strb	r2, [r3, #0]
    dc04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc0c:	781b      	ldrb	r3, [r3, #0]
    dc0e:	2bff      	cmp	r3, #255	; 0xff
    dc10:	d105      	bne.n	dc1e <send_nav_values+0x932>
    dc12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc1a:	2200      	movs	r2, #0
    dc1c:	701a      	strb	r2, [r3, #0]
    dc1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc26:	781b      	ldrb	r3, [r3, #0]
    dc28:	461a      	mov	r2, r3
    dc2a:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc32:	7819      	ldrb	r1, [r3, #0]
    dc34:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3c:	5499      	strb	r1, [r3, r2]
    dc3e:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc46:	781a      	ldrb	r2, [r3, #0]
    dc48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc50:	781b      	ldrb	r3, [r3, #0]
    dc52:	4413      	add	r3, r2
    dc54:	b2da      	uxtb	r2, r3
    dc56:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5e:	701a      	strb	r2, [r3, #0]
    dc60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc68:	781a      	ldrb	r2, [r3, #0]
    dc6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	4413      	add	r3, r2
    dc76:	b2da      	uxtb	r2, r3
    dc78:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc80:	701a      	strb	r2, [r3, #0]
    dc82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8a:	781b      	ldrb	r3, [r3, #0]
    dc8c:	3301      	adds	r3, #1
    dc8e:	b2da      	uxtb	r2, r3
    dc90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc98:	701a      	strb	r2, [r3, #0]
    dc9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	2bff      	cmp	r3, #255	; 0xff
    dca6:	d10f      	bne.n	dcc8 <send_nav_values+0x9dc>
    dca8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dcac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb0:	2200      	movs	r2, #0
    dcb2:	701a      	strb	r2, [r3, #0]
    dcb4:	e008      	b.n	dcc8 <send_nav_values+0x9dc>
    dcb6:	bf00      	nop
    dcb8:	2000b06b 	.word	0x2000b06b
    dcbc:	2000adf5 	.word	0x2000adf5
    dcc0:	2000adf6 	.word	0x2000adf6
    dcc4:	2000adf7 	.word	0x2000adf7
    dcc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd0:	781b      	ldrb	r3, [r3, #0]
    dcd2:	461a      	mov	r2, r3
    dcd4:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcdc:	7859      	ldrb	r1, [r3, #1]
    dcde:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce6:	5499      	strb	r1, [r3, r2]
    dce8:	4bd1      	ldr	r3, [pc, #836]	; (e030 <send_nav_values+0xd44>)
    dcea:	781a      	ldrb	r2, [r3, #0]
    dcec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	781b      	ldrb	r3, [r3, #0]
    dcf6:	4413      	add	r3, r2
    dcf8:	b2da      	uxtb	r2, r3
    dcfa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd02:	701a      	strb	r2, [r3, #0]
    dd04:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	781a      	ldrb	r2, [r3, #0]
    dd0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	4413      	add	r3, r2
    dd1a:	b2da      	uxtb	r2, r3
    dd1c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd24:	701a      	strb	r2, [r3, #0]
    dd26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2e:	781b      	ldrb	r3, [r3, #0]
    dd30:	3301      	adds	r3, #1
    dd32:	b2da      	uxtb	r2, r3
    dd34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	701a      	strb	r2, [r3, #0]
    dd3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd46:	781b      	ldrb	r3, [r3, #0]
    dd48:	2bff      	cmp	r3, #255	; 0xff
    dd4a:	d105      	bne.n	dd58 <send_nav_values+0xa6c>
    dd4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd54:	2200      	movs	r2, #0
    dd56:	701a      	strb	r2, [r3, #0]
    dd58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd60:	781b      	ldrb	r3, [r3, #0]
    dd62:	461a      	mov	r2, r3
    dd64:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6c:	7899      	ldrb	r1, [r3, #2]
    dd6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dd72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd76:	5499      	strb	r1, [r3, r2]
    dd78:	4bae      	ldr	r3, [pc, #696]	; (e034 <send_nav_values+0xd48>)
    dd7a:	781a      	ldrb	r2, [r3, #0]
    dd7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd84:	781b      	ldrb	r3, [r3, #0]
    dd86:	4413      	add	r3, r2
    dd88:	b2da      	uxtb	r2, r3
    dd8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd92:	701a      	strb	r2, [r3, #0]
    dd94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9c:	781a      	ldrb	r2, [r3, #0]
    dd9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda6:	781b      	ldrb	r3, [r3, #0]
    dda8:	4413      	add	r3, r2
    ddaa:	b2da      	uxtb	r2, r3
    ddac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ddb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb4:	701a      	strb	r2, [r3, #0]
    ddb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	3301      	adds	r3, #1
    ddc2:	b2da      	uxtb	r2, r3
    ddc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	701a      	strb	r2, [r3, #0]
    ddce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd6:	781b      	ldrb	r3, [r3, #0]
    ddd8:	2bff      	cmp	r3, #255	; 0xff
    ddda:	d105      	bne.n	dde8 <send_nav_values+0xafc>
    dddc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde4:	2200      	movs	r2, #0
    dde6:	701a      	strb	r2, [r3, #0]
    dde8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf0:	781b      	ldrb	r3, [r3, #0]
    ddf2:	461a      	mov	r2, r3
    ddf4:	f64a 633c 	movw	r3, #44604	; 0xae3c
    ddf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfc:	78d9      	ldrb	r1, [r3, #3]
    ddfe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    de02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de06:	5499      	strb	r1, [r3, r2]
    de08:	4b8b      	ldr	r3, [pc, #556]	; (e038 <send_nav_values+0xd4c>)
    de0a:	781a      	ldrb	r2, [r3, #0]
    de0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	4413      	add	r3, r2
    de18:	b2da      	uxtb	r2, r3
    de1a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de22:	701a      	strb	r2, [r3, #0]
    de24:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2c:	781a      	ldrb	r2, [r3, #0]
    de2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de36:	781b      	ldrb	r3, [r3, #0]
    de38:	4413      	add	r3, r2
    de3a:	b2da      	uxtb	r2, r3
    de3c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de44:	701a      	strb	r2, [r3, #0]
    de46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4e:	781b      	ldrb	r3, [r3, #0]
    de50:	3301      	adds	r3, #1
    de52:	b2da      	uxtb	r2, r3
    de54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de5c:	701a      	strb	r2, [r3, #0]
    de5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de66:	781b      	ldrb	r3, [r3, #0]
    de68:	2bff      	cmp	r3, #255	; 0xff
    de6a:	d105      	bne.n	de78 <send_nav_values+0xb8c>
    de6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de74:	2200      	movs	r2, #0
    de76:	701a      	strb	r2, [r3, #0]
    de78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de80:	781b      	ldrb	r3, [r3, #0]
    de82:	461a      	mov	r2, r3
    de84:	f240 239c 	movw	r3, #668	; 0x29c
    de88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de8c:	7819      	ldrb	r1, [r3, #0]
    de8e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    de92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de96:	5499      	strb	r1, [r3, r2]
    de98:	f240 239c 	movw	r3, #668	; 0x29c
    de9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea0:	781a      	ldrb	r2, [r3, #0]
    dea2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deaa:	781b      	ldrb	r3, [r3, #0]
    deac:	4413      	add	r3, r2
    deae:	b2da      	uxtb	r2, r3
    deb0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    deb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb8:	701a      	strb	r2, [r3, #0]
    deba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    debe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec2:	781a      	ldrb	r2, [r3, #0]
    dec4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    decc:	781b      	ldrb	r3, [r3, #0]
    dece:	4413      	add	r3, r2
    ded0:	b2da      	uxtb	r2, r3
    ded2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ded6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee4:	781b      	ldrb	r3, [r3, #0]
    dee6:	3301      	adds	r3, #1
    dee8:	b2da      	uxtb	r2, r3
    deea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    deee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def2:	701a      	strb	r2, [r3, #0]
    def4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    def8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defc:	781b      	ldrb	r3, [r3, #0]
    defe:	2bff      	cmp	r3, #255	; 0xff
    df00:	d105      	bne.n	df0e <send_nav_values+0xc22>
    df02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df0a:	2200      	movs	r2, #0
    df0c:	701a      	strb	r2, [r3, #0]
    df0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	461a      	mov	r2, r3
    df1a:	f240 239c 	movw	r3, #668	; 0x29c
    df1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df22:	7859      	ldrb	r1, [r3, #1]
    df24:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    df28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2c:	5499      	strb	r1, [r3, r2]
    df2e:	4b43      	ldr	r3, [pc, #268]	; (e03c <send_nav_values+0xd50>)
    df30:	781a      	ldrb	r2, [r3, #0]
    df32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3a:	781b      	ldrb	r3, [r3, #0]
    df3c:	4413      	add	r3, r2
    df3e:	b2da      	uxtb	r2, r3
    df40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df48:	701a      	strb	r2, [r3, #0]
    df4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df52:	781a      	ldrb	r2, [r3, #0]
    df54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df5c:	781b      	ldrb	r3, [r3, #0]
    df5e:	4413      	add	r3, r2
    df60:	b2da      	uxtb	r2, r3
    df62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	701a      	strb	r2, [r3, #0]
    df6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	3301      	adds	r3, #1
    df78:	b2da      	uxtb	r2, r3
    df7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df82:	701a      	strb	r2, [r3, #0]
    df84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df8c:	781b      	ldrb	r3, [r3, #0]
    df8e:	2bff      	cmp	r3, #255	; 0xff
    df90:	d105      	bne.n	df9e <send_nav_values+0xcb2>
    df92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9a:	2200      	movs	r2, #0
    df9c:	701a      	strb	r2, [r3, #0]
    df9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	461a      	mov	r2, r3
    dfaa:	f240 239c 	movw	r3, #668	; 0x29c
    dfae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb2:	7899      	ldrb	r1, [r3, #2]
    dfb4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbc:	5499      	strb	r1, [r3, r2]
    dfbe:	4b20      	ldr	r3, [pc, #128]	; (e040 <send_nav_values+0xd54>)
    dfc0:	781a      	ldrb	r2, [r3, #0]
    dfc2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfca:	781b      	ldrb	r3, [r3, #0]
    dfcc:	4413      	add	r3, r2
    dfce:	b2da      	uxtb	r2, r3
    dfd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd8:	701a      	strb	r2, [r3, #0]
    dfda:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe2:	781a      	ldrb	r2, [r3, #0]
    dfe4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfec:	781b      	ldrb	r3, [r3, #0]
    dfee:	4413      	add	r3, r2
    dff0:	b2da      	uxtb	r2, r3
    dff2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dffa:	701a      	strb	r2, [r3, #0]
    dffc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e004:	781b      	ldrb	r3, [r3, #0]
    e006:	3301      	adds	r3, #1
    e008:	b2da      	uxtb	r2, r3
    e00a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e012:	701a      	strb	r2, [r3, #0]
    e014:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01c:	781b      	ldrb	r3, [r3, #0]
    e01e:	2bff      	cmp	r3, #255	; 0xff
    e020:	d110      	bne.n	e044 <send_nav_values+0xd58>
    e022:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e02a:	2200      	movs	r2, #0
    e02c:	701a      	strb	r2, [r3, #0]
    e02e:	e009      	b.n	e044 <send_nav_values+0xd58>
    e030:	2000ae3d 	.word	0x2000ae3d
    e034:	2000ae3e 	.word	0x2000ae3e
    e038:	2000ae3f 	.word	0x2000ae3f
    e03c:	2000029d 	.word	0x2000029d
    e040:	2000029e 	.word	0x2000029e
    e044:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04c:	781b      	ldrb	r3, [r3, #0]
    e04e:	461a      	mov	r2, r3
    e050:	f240 239c 	movw	r3, #668	; 0x29c
    e054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e058:	78d9      	ldrb	r1, [r3, #3]
    e05a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e062:	5499      	strb	r1, [r3, r2]
    e064:	4bc2      	ldr	r3, [pc, #776]	; (e370 <send_nav_values+0x1084>)
    e066:	781a      	ldrb	r2, [r3, #0]
    e068:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e070:	781b      	ldrb	r3, [r3, #0]
    e072:	4413      	add	r3, r2
    e074:	b2da      	uxtb	r2, r3
    e076:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07e:	701a      	strb	r2, [r3, #0]
    e080:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e088:	781a      	ldrb	r2, [r3, #0]
    e08a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e092:	781b      	ldrb	r3, [r3, #0]
    e094:	4413      	add	r3, r2
    e096:	b2da      	uxtb	r2, r3
    e098:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a0:	701a      	strb	r2, [r3, #0]
    e0a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0aa:	781b      	ldrb	r3, [r3, #0]
    e0ac:	3301      	adds	r3, #1
    e0ae:	b2da      	uxtb	r2, r3
    e0b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b8:	701a      	strb	r2, [r3, #0]
    e0ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c2:	781b      	ldrb	r3, [r3, #0]
    e0c4:	2bff      	cmp	r3, #255	; 0xff
    e0c6:	d105      	bne.n	e0d4 <send_nav_values+0xde8>
    e0c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d0:	2200      	movs	r2, #0
    e0d2:	701a      	strb	r2, [r3, #0]
    e0d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0dc:	781b      	ldrb	r3, [r3, #0]
    e0de:	461a      	mov	r2, r3
    e0e0:	f64a 6340 	movw	r3, #44608	; 0xae40
    e0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e8:	7819      	ldrb	r1, [r3, #0]
    e0ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f2:	5499      	strb	r1, [r3, r2]
    e0f4:	f64a 6340 	movw	r3, #44608	; 0xae40
    e0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fc:	781a      	ldrb	r2, [r3, #0]
    e0fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e106:	781b      	ldrb	r3, [r3, #0]
    e108:	4413      	add	r3, r2
    e10a:	b2da      	uxtb	r2, r3
    e10c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e114:	701a      	strb	r2, [r3, #0]
    e116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11e:	781a      	ldrb	r2, [r3, #0]
    e120:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e128:	781b      	ldrb	r3, [r3, #0]
    e12a:	4413      	add	r3, r2
    e12c:	b2da      	uxtb	r2, r3
    e12e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	701a      	strb	r2, [r3, #0]
    e138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	3301      	adds	r3, #1
    e144:	b2da      	uxtb	r2, r3
    e146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14e:	701a      	strb	r2, [r3, #0]
    e150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e158:	781b      	ldrb	r3, [r3, #0]
    e15a:	2bff      	cmp	r3, #255	; 0xff
    e15c:	d105      	bne.n	e16a <send_nav_values+0xe7e>
    e15e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e166:	2200      	movs	r2, #0
    e168:	701a      	strb	r2, [r3, #0]
    e16a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e172:	781b      	ldrb	r3, [r3, #0]
    e174:	461a      	mov	r2, r3
    e176:	f64a 6340 	movw	r3, #44608	; 0xae40
    e17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17e:	7859      	ldrb	r1, [r3, #1]
    e180:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	5499      	strb	r1, [r3, r2]
    e18a:	4b7a      	ldr	r3, [pc, #488]	; (e374 <send_nav_values+0x1088>)
    e18c:	781a      	ldrb	r2, [r3, #0]
    e18e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e196:	781b      	ldrb	r3, [r3, #0]
    e198:	4413      	add	r3, r2
    e19a:	b2da      	uxtb	r2, r3
    e19c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a4:	701a      	strb	r2, [r3, #0]
    e1a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ae:	781a      	ldrb	r2, [r3, #0]
    e1b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b8:	781b      	ldrb	r3, [r3, #0]
    e1ba:	4413      	add	r3, r2
    e1bc:	b2da      	uxtb	r2, r3
    e1be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c6:	701a      	strb	r2, [r3, #0]
    e1c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	3301      	adds	r3, #1
    e1d4:	b2da      	uxtb	r2, r3
    e1d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1de:	701a      	strb	r2, [r3, #0]
    e1e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e8:	781b      	ldrb	r3, [r3, #0]
    e1ea:	2bff      	cmp	r3, #255	; 0xff
    e1ec:	d105      	bne.n	e1fa <send_nav_values+0xf0e>
    e1ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f6:	2200      	movs	r2, #0
    e1f8:	701a      	strb	r2, [r3, #0]
    e1fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	461a      	mov	r2, r3
    e206:	f64a 6340 	movw	r3, #44608	; 0xae40
    e20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20e:	7899      	ldrb	r1, [r3, #2]
    e210:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e218:	5499      	strb	r1, [r3, r2]
    e21a:	4b57      	ldr	r3, [pc, #348]	; (e378 <send_nav_values+0x108c>)
    e21c:	781a      	ldrb	r2, [r3, #0]
    e21e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	4413      	add	r3, r2
    e22a:	b2da      	uxtb	r2, r3
    e22c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e234:	701a      	strb	r2, [r3, #0]
    e236:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23e:	781a      	ldrb	r2, [r3, #0]
    e240:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e248:	781b      	ldrb	r3, [r3, #0]
    e24a:	4413      	add	r3, r2
    e24c:	b2da      	uxtb	r2, r3
    e24e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e256:	701a      	strb	r2, [r3, #0]
    e258:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	3301      	adds	r3, #1
    e264:	b2da      	uxtb	r2, r3
    e266:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26e:	701a      	strb	r2, [r3, #0]
    e270:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e278:	781b      	ldrb	r3, [r3, #0]
    e27a:	2bff      	cmp	r3, #255	; 0xff
    e27c:	d105      	bne.n	e28a <send_nav_values+0xf9e>
    e27e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e286:	2200      	movs	r2, #0
    e288:	701a      	strb	r2, [r3, #0]
    e28a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e292:	781b      	ldrb	r3, [r3, #0]
    e294:	461a      	mov	r2, r3
    e296:	f64a 6340 	movw	r3, #44608	; 0xae40
    e29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29e:	78d9      	ldrb	r1, [r3, #3]
    e2a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a8:	5499      	strb	r1, [r3, r2]
    e2aa:	4b34      	ldr	r3, [pc, #208]	; (e37c <send_nav_values+0x1090>)
    e2ac:	781a      	ldrb	r2, [r3, #0]
    e2ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b6:	781b      	ldrb	r3, [r3, #0]
    e2b8:	4413      	add	r3, r2
    e2ba:	b2da      	uxtb	r2, r3
    e2bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c4:	701a      	strb	r2, [r3, #0]
    e2c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ce:	781a      	ldrb	r2, [r3, #0]
    e2d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d8:	781b      	ldrb	r3, [r3, #0]
    e2da:	4413      	add	r3, r2
    e2dc:	b2da      	uxtb	r2, r3
    e2de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e6:	701a      	strb	r2, [r3, #0]
    e2e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	3301      	adds	r3, #1
    e2f4:	b2da      	uxtb	r2, r3
    e2f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2fe:	701a      	strb	r2, [r3, #0]
    e300:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e308:	781b      	ldrb	r3, [r3, #0]
    e30a:	2bff      	cmp	r3, #255	; 0xff
    e30c:	d105      	bne.n	e31a <send_nav_values+0x102e>
    e30e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e316:	2200      	movs	r2, #0
    e318:	701a      	strb	r2, [r3, #0]
    e31a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e322:	781b      	ldrb	r3, [r3, #0]
    e324:	461a      	mov	r2, r3
    e326:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e32e:	7819      	ldrb	r1, [r3, #0]
    e330:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e338:	5499      	strb	r1, [r3, r2]
    e33a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e342:	781b      	ldrb	r3, [r3, #0]
    e344:	3301      	adds	r3, #1
    e346:	b2da      	uxtb	r2, r3
    e348:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e350:	701a      	strb	r2, [r3, #0]
    e352:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e35a:	781b      	ldrb	r3, [r3, #0]
    e35c:	2bff      	cmp	r3, #255	; 0xff
    e35e:	d10f      	bne.n	e380 <send_nav_values+0x1094>
    e360:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e368:	2200      	movs	r2, #0
    e36a:	701a      	strb	r2, [r3, #0]
    e36c:	e008      	b.n	e380 <send_nav_values+0x1094>
    e36e:	bf00      	nop
    e370:	2000029f 	.word	0x2000029f
    e374:	2000ae41 	.word	0x2000ae41
    e378:	2000ae42 	.word	0x2000ae42
    e37c:	2000ae43 	.word	0x2000ae43
    e380:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e388:	781b      	ldrb	r3, [r3, #0]
    e38a:	461a      	mov	r2, r3
    e38c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e394:	7819      	ldrb	r1, [r3, #0]
    e396:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e39e:	5499      	strb	r1, [r3, r2]
    e3a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a8:	781b      	ldrb	r3, [r3, #0]
    e3aa:	3301      	adds	r3, #1
    e3ac:	b2da      	uxtb	r2, r3
    e3ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b6:	701a      	strb	r2, [r3, #0]
    e3b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c0:	781b      	ldrb	r3, [r3, #0]
    e3c2:	2bff      	cmp	r3, #255	; 0xff
    e3c4:	d105      	bne.n	e3d2 <send_nav_values+0x10e6>
    e3c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ce:	2200      	movs	r2, #0
    e3d0:	701a      	strb	r2, [r3, #0]
    e3d2:	f242 0339 	movw	r3, #8249	; 0x2039
    e3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	b2db      	uxtb	r3, r3
    e3de:	f003 0310 	and.w	r3, r3, #16
    e3e2:	2b00      	cmp	r3, #0
    e3e4:	d15a      	bne.n	e49c <send_nav_values+0x11b0>
    e3e6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	b2db      	uxtb	r3, r3
    e3f2:	461a      	mov	r2, r3
    e3f4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fc:	5c9a      	ldrb	r2, [r3, r2]
    e3fe:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    e402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e406:	701a      	strb	r2, [r3, #0]
    e408:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    e40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e410:	2200      	movs	r2, #0
    e412:	701a      	strb	r2, [r3, #0]
    e414:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e41c:	781b      	ldrb	r3, [r3, #0]
    e41e:	b2db      	uxtb	r3, r3
    e420:	3301      	adds	r3, #1
    e422:	b2da      	uxtb	r2, r3
    e424:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e42c:	701a      	strb	r2, [r3, #0]
    e42e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e436:	781b      	ldrb	r3, [r3, #0]
    e438:	b2db      	uxtb	r3, r3
    e43a:	2bff      	cmp	r3, #255	; 0xff
    e43c:	d105      	bne.n	e44a <send_nav_values+0x115e>
    e43e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e446:	2200      	movs	r2, #0
    e448:	701a      	strb	r2, [r3, #0]
    e44a:	f242 0338 	movw	r3, #8248	; 0x2038
    e44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e452:	f242 0238 	movw	r2, #8248	; 0x2038
    e456:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e45a:	7812      	ldrb	r2, [r2, #0]
    e45c:	b2d2      	uxtb	r2, r2
    e45e:	f042 0201 	orr.w	r2, r2, #1
    e462:	b2d2      	uxtb	r2, r2
    e464:	701a      	strb	r2, [r3, #0]
    e466:	f242 0339 	movw	r3, #8249	; 0x2039
    e46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46e:	f242 0239 	movw	r2, #8249	; 0x2039
    e472:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e476:	7812      	ldrb	r2, [r2, #0]
    e478:	b2d2      	uxtb	r2, r2
    e47a:	f042 0210 	orr.w	r2, r2, #16
    e47e:	b2d2      	uxtb	r2, r2
    e480:	701a      	strb	r2, [r3, #0]
    e482:	e00b      	b.n	e49c <send_nav_values+0x11b0>
    e484:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48c:	781b      	ldrb	r3, [r3, #0]
    e48e:	3301      	adds	r3, #1
    e490:	b2da      	uxtb	r2, r3
    e492:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e49a:	701a      	strb	r2, [r3, #0]
}
    e49c:	46bd      	mov	sp, r7
    e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4a2:	4770      	bx	lr

0000e4a4 <course_run>:

void course_run(void){
    e4a4:	b580      	push	{r7, lr}
    e4a6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e4a8:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	2b02      	cmp	r3, #2
    e4b4:	d006      	beq.n	e4c4 <course_run+0x20>
    e4b6:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	2b03      	cmp	r3, #3
    e4c2:	d112      	bne.n	e4ea <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e4c4:	f64a 2396 	movw	r3, #43670	; 0xaa96
    e4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	2b02      	cmp	r3, #2
    e4d0:	d901      	bls.n	e4d6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e4d2:	f003 faf1 	bl	11ab8 <course_pid_run>
    desired_roll = nav_desired_roll;
    e4d6:	f64a 6338 	movw	r3, #44600	; 0xae38
    e4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4de:	681a      	ldr	r2, [r3, #0]
    e4e0:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    e4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e4ea:	bd80      	pop	{r7, pc}

0000e4ec <altitude_control_task>:

void altitude_control_task(void)
{
    e4ec:	b580      	push	{r7, lr}
    e4ee:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e4f0:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f8:	781b      	ldrb	r3, [r3, #0]
    e4fa:	2b02      	cmp	r3, #2
    e4fc:	d006      	beq.n	e50c <altitude_control_task+0x20>
    e4fe:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	2b03      	cmp	r3, #3
    e50a:	d108      	bne.n	e51e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e50c:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	2b03      	cmp	r3, #3
    e518:	d101      	bne.n	e51e <altitude_control_task+0x32>
      			altitude_pid_run();
    e51a:	f003 fd55 	bl	11fc8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e51e:	bd80      	pop	{r7, pc}

0000e520 <climb_control_task>:
void climb_control_task(void)
{
    e520:	b580      	push	{r7, lr}
    e522:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e524:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e52c:	781b      	ldrb	r3, [r3, #0]
    e52e:	2b02      	cmp	r3, #2
    e530:	d006      	beq.n	e540 <climb_control_task+0x20>
    e532:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	2b03      	cmp	r3, #3
    e53e:	d135      	bne.n	e5ac <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e540:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	2b01      	cmp	r3, #1
    e54c:	d901      	bls.n	e552 <climb_control_task+0x32>
        	climb_pid_run();
    e54e:	f003 fb6b 	bl	11c28 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e552:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e55a:	781b      	ldrb	r3, [r3, #0]
    e55c:	2b01      	cmp	r3, #1
    e55e:	d10a      	bne.n	e576 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e560:	f64a 6330 	movw	r3, #44592	; 0xae30
    e564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e568:	881b      	ldrh	r3, [r3, #0]
    e56a:	b29a      	uxth	r2, r3
    e56c:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e574:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e576:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    e57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	2b00      	cmp	r3, #0
    e582:	d10d      	bne.n	e5a0 <climb_control_task+0x80>
    e584:	f24b 0394 	movw	r3, #45204	; 0xb094
    e588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58c:	881b      	ldrh	r3, [r3, #0]
    e58e:	2b00      	cmp	r3, #0
    e590:	d10c      	bne.n	e5ac <climb_control_task+0x8c>
    e592:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    e596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	2b00      	cmp	r3, #0
    e59e:	d105      	bne.n	e5ac <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e5a0:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	2200      	movs	r2, #0
    e5aa:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e5ac:	bd80      	pop	{r7, pc}
    e5ae:	bf00      	nop

0000e5b0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e5b0:	b580      	push	{r7, lr}
    e5b2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e5b4:	f003 f926 	bl	11804 <ir_update>
    estimator_update_state_infrared();
    e5b8:	f006 fbac 	bl	14d14 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e5bc:	f003 f990 	bl	118e0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e5c0:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c8:	881a      	ldrh	r2, [r3, #0]
    e5ca:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e5d4:	f64a 53e6 	movw	r3, #44518	; 0xade6
    e5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5dc:	881a      	ldrh	r2, [r3, #0]
    e5de:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e5e8:	f64a 53e8 	movw	r3, #44520	; 0xade8
    e5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f0:	881a      	ldrh	r2, [r3, #0]
    e5f2:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e5fc:	f24b 0370 	movw	r3, #45168	; 0xb070
    e600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e604:	681b      	ldr	r3, [r3, #0]
    e606:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e60a:	4618      	mov	r0, r3
    e60c:	f009 f9d8 	bl	179c0 <__aeabi_f2d>
    e610:	4602      	mov	r2, r0
    e612:	460b      	mov	r3, r1
    e614:	4610      	mov	r0, r2
    e616:	4619      	mov	r1, r3
    e618:	f04f 0200 	mov.w	r2, #0
    e61c:	f04f 0300 	mov.w	r3, #0
    e620:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e624:	f009 fa20 	bl	17a68 <__aeabi_dmul>
    e628:	4602      	mov	r2, r0
    e62a:	460b      	mov	r3, r1
    e62c:	4610      	mov	r0, r2
    e62e:	4619      	mov	r1, r3
    e630:	f04f 0200 	mov.w	r2, #0
    e634:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e638:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e63c:	f009 fc86 	bl	17f4c <__aeabi_dcmplt>
    e640:	4603      	mov	r3, r0
    e642:	2b00      	cmp	r3, #0
    e644:	d002      	beq.n	e64c <stabilisation_task+0x9c>
    e646:	f64d 2280 	movw	r2, #55936	; 0xda80
    e64a:	e046      	b.n	e6da <stabilisation_task+0x12a>
    e64c:	f24b 0370 	movw	r3, #45168	; 0xb070
    e650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e654:	681b      	ldr	r3, [r3, #0]
    e656:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e65a:	4618      	mov	r0, r3
    e65c:	f009 f9b0 	bl	179c0 <__aeabi_f2d>
    e660:	4602      	mov	r2, r0
    e662:	460b      	mov	r3, r1
    e664:	4610      	mov	r0, r2
    e666:	4619      	mov	r1, r3
    e668:	f04f 0200 	mov.w	r2, #0
    e66c:	f04f 0300 	mov.w	r3, #0
    e670:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e674:	f009 f9f8 	bl	17a68 <__aeabi_dmul>
    e678:	4602      	mov	r2, r0
    e67a:	460b      	mov	r3, r1
    e67c:	4610      	mov	r0, r2
    e67e:	4619      	mov	r1, r3
    e680:	f04f 0200 	mov.w	r2, #0
    e684:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e688:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e68c:	f009 fc7c 	bl	17f88 <__aeabi_dcmpgt>
    e690:	4603      	mov	r3, r0
    e692:	2b00      	cmp	r3, #0
    e694:	d002      	beq.n	e69c <stabilisation_task+0xec>
    e696:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e69a:	e01d      	b.n	e6d8 <stabilisation_task+0x128>
    e69c:	f24b 0370 	movw	r3, #45168	; 0xb070
    e6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a4:	681b      	ldr	r3, [r3, #0]
    e6a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e6aa:	4618      	mov	r0, r3
    e6ac:	f009 f988 	bl	179c0 <__aeabi_f2d>
    e6b0:	4602      	mov	r2, r0
    e6b2:	460b      	mov	r3, r1
    e6b4:	4610      	mov	r0, r2
    e6b6:	4619      	mov	r1, r3
    e6b8:	f04f 0200 	mov.w	r2, #0
    e6bc:	f04f 0300 	mov.w	r3, #0
    e6c0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e6c4:	f009 f9d0 	bl	17a68 <__aeabi_dmul>
    e6c8:	4602      	mov	r2, r0
    e6ca:	460b      	mov	r3, r1
    e6cc:	4610      	mov	r0, r2
    e6ce:	4619      	mov	r1, r3
    e6d0:	f009 fc64 	bl	17f9c <__aeabi_d2iz>
    e6d4:	4603      	mov	r3, r0
    e6d6:	b29b      	uxth	r3, r3
    e6d8:	b29a      	uxth	r2, r3
    e6da:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e6e4:	bd80      	pop	{r7, pc}
    e6e6:	bf00      	nop

0000e6e8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e6e8:	b580      	push	{r7, lr}
    e6ea:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e6ec:	f64a 4345 	movw	r3, #44101	; 0xac45
    e6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f4:	2200      	movs	r2, #0
    e6f6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e6f8:	f64a 4346 	movw	r3, #44102	; 0xac46
    e6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e700:	781b      	ldrb	r3, [r3, #0]
    e702:	2b00      	cmp	r3, #0
    e704:	f001 81af 	beq.w	fa66 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e708:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e710:	781a      	ldrb	r2, [r3, #0]
    e712:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	b2db      	uxtb	r3, r3
    e71e:	429a      	cmp	r2, r3
    e720:	d313      	bcc.n	e74a <send_gps_pos+0x62>
    e722:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e72a:	781b      	ldrb	r3, [r3, #0]
    e72c:	b2db      	uxtb	r3, r3
    e72e:	461a      	mov	r2, r3
    e730:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	1ad3      	subs	r3, r2, r3
    e73c:	33ff      	adds	r3, #255	; 0xff
    e73e:	2b21      	cmp	r3, #33	; 0x21
    e740:	bfd4      	ite	le
    e742:	2300      	movle	r3, #0
    e744:	2301      	movgt	r3, #1
    e746:	b2db      	uxtb	r3, r3
    e748:	e011      	b.n	e76e <send_gps_pos+0x86>
    e74a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e752:	781b      	ldrb	r3, [r3, #0]
    e754:	b2db      	uxtb	r3, r3
    e756:	461a      	mov	r2, r3
    e758:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	1ad3      	subs	r3, r2, r3
    e764:	2b21      	cmp	r3, #33	; 0x21
    e766:	bfd4      	ite	le
    e768:	2300      	movle	r3, #0
    e76a:	2301      	movgt	r3, #1
    e76c:	b2db      	uxtb	r3, r3
    e76e:	2b00      	cmp	r3, #0
    e770:	f001 816b 	beq.w	fa4a <send_gps_pos+0x1362>
    e774:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77c:	781b      	ldrb	r3, [r3, #0]
    e77e:	461a      	mov	r2, r3
    e780:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e788:	2105      	movs	r1, #5
    e78a:	5499      	strb	r1, [r3, r2]
    e78c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e794:	781b      	ldrb	r3, [r3, #0]
    e796:	3301      	adds	r3, #1
    e798:	b2da      	uxtb	r2, r3
    e79a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a2:	701a      	strb	r2, [r3, #0]
    e7a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ac:	781b      	ldrb	r3, [r3, #0]
    e7ae:	2bff      	cmp	r3, #255	; 0xff
    e7b0:	d105      	bne.n	e7be <send_gps_pos+0xd6>
    e7b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ba:	2200      	movs	r2, #0
    e7bc:	701a      	strb	r2, [r3, #0]
    e7be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c6:	781b      	ldrb	r3, [r3, #0]
    e7c8:	461a      	mov	r2, r3
    e7ca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d2:	2108      	movs	r1, #8
    e7d4:	5499      	strb	r1, [r3, r2]
    e7d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7de:	781b      	ldrb	r3, [r3, #0]
    e7e0:	3301      	adds	r3, #1
    e7e2:	b2da      	uxtb	r2, r3
    e7e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ec:	701a      	strb	r2, [r3, #0]
    e7ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f6:	781b      	ldrb	r3, [r3, #0]
    e7f8:	2bff      	cmp	r3, #255	; 0xff
    e7fa:	d105      	bne.n	e808 <send_gps_pos+0x120>
    e7fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e804:	2200      	movs	r2, #0
    e806:	701a      	strb	r2, [r3, #0]
    e808:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e810:	2208      	movs	r2, #8
    e812:	701a      	strb	r2, [r3, #0]
    e814:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e81c:	2208      	movs	r2, #8
    e81e:	701a      	strb	r2, [r3, #0]
    e820:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	461a      	mov	r2, r3
    e82c:	f64a 4344 	movw	r3, #44100	; 0xac44
    e830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e834:	7819      	ldrb	r1, [r3, #0]
    e836:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83e:	5499      	strb	r1, [r3, r2]
    e840:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e848:	781a      	ldrb	r2, [r3, #0]
    e84a:	f64a 4344 	movw	r3, #44100	; 0xac44
    e84e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e852:	781b      	ldrb	r3, [r3, #0]
    e854:	4413      	add	r3, r2
    e856:	b2da      	uxtb	r2, r3
    e858:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e860:	701a      	strb	r2, [r3, #0]
    e862:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e86a:	781a      	ldrb	r2, [r3, #0]
    e86c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e874:	781b      	ldrb	r3, [r3, #0]
    e876:	4413      	add	r3, r2
    e878:	b2da      	uxtb	r2, r3
    e87a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e882:	701a      	strb	r2, [r3, #0]
    e884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	3301      	adds	r3, #1
    e890:	b2da      	uxtb	r2, r3
    e892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e89a:	701a      	strb	r2, [r3, #0]
    e89c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a4:	781b      	ldrb	r3, [r3, #0]
    e8a6:	2bff      	cmp	r3, #255	; 0xff
    e8a8:	d105      	bne.n	e8b6 <send_gps_pos+0x1ce>
    e8aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b2:	2200      	movs	r2, #0
    e8b4:	701a      	strb	r2, [r3, #0]
    e8b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8be:	781b      	ldrb	r3, [r3, #0]
    e8c0:	461a      	mov	r2, r3
    e8c2:	f64a 4334 	movw	r3, #44084	; 0xac34
    e8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ca:	7819      	ldrb	r1, [r3, #0]
    e8cc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d4:	5499      	strb	r1, [r3, r2]
    e8d6:	f64a 4334 	movw	r3, #44084	; 0xac34
    e8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8de:	781a      	ldrb	r2, [r3, #0]
    e8e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	4413      	add	r3, r2
    e8ec:	b2da      	uxtb	r2, r3
    e8ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f6:	701a      	strb	r2, [r3, #0]
    e8f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e900:	781a      	ldrb	r2, [r3, #0]
    e902:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	4413      	add	r3, r2
    e90e:	b2da      	uxtb	r2, r3
    e910:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e918:	701a      	strb	r2, [r3, #0]
    e91a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e922:	781b      	ldrb	r3, [r3, #0]
    e924:	3301      	adds	r3, #1
    e926:	b2da      	uxtb	r2, r3
    e928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e930:	701a      	strb	r2, [r3, #0]
    e932:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e93a:	781b      	ldrb	r3, [r3, #0]
    e93c:	2bff      	cmp	r3, #255	; 0xff
    e93e:	d105      	bne.n	e94c <send_gps_pos+0x264>
    e940:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e948:	2200      	movs	r2, #0
    e94a:	701a      	strb	r2, [r3, #0]
    e94c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	461a      	mov	r2, r3
    e958:	f64a 4334 	movw	r3, #44084	; 0xac34
    e95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e960:	7859      	ldrb	r1, [r3, #1]
    e962:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96a:	5499      	strb	r1, [r3, r2]
    e96c:	4bd1      	ldr	r3, [pc, #836]	; (ecb4 <send_gps_pos+0x5cc>)
    e96e:	781a      	ldrb	r2, [r3, #0]
    e970:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	4413      	add	r3, r2
    e97c:	b2da      	uxtb	r2, r3
    e97e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e986:	701a      	strb	r2, [r3, #0]
    e988:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e990:	781a      	ldrb	r2, [r3, #0]
    e992:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99a:	781b      	ldrb	r3, [r3, #0]
    e99c:	4413      	add	r3, r2
    e99e:	b2da      	uxtb	r2, r3
    e9a0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a8:	701a      	strb	r2, [r3, #0]
    e9aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b2:	781b      	ldrb	r3, [r3, #0]
    e9b4:	3301      	adds	r3, #1
    e9b6:	b2da      	uxtb	r2, r3
    e9b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c0:	701a      	strb	r2, [r3, #0]
    e9c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ca:	781b      	ldrb	r3, [r3, #0]
    e9cc:	2bff      	cmp	r3, #255	; 0xff
    e9ce:	d105      	bne.n	e9dc <send_gps_pos+0x2f4>
    e9d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d8:	2200      	movs	r2, #0
    e9da:	701a      	strb	r2, [r3, #0]
    e9dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e4:	781b      	ldrb	r3, [r3, #0]
    e9e6:	461a      	mov	r2, r3
    e9e8:	f64a 4334 	movw	r3, #44084	; 0xac34
    e9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f0:	7899      	ldrb	r1, [r3, #2]
    e9f2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fa:	5499      	strb	r1, [r3, r2]
    e9fc:	4bae      	ldr	r3, [pc, #696]	; (ecb8 <send_gps_pos+0x5d0>)
    e9fe:	781a      	ldrb	r2, [r3, #0]
    ea00:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea08:	781b      	ldrb	r3, [r3, #0]
    ea0a:	4413      	add	r3, r2
    ea0c:	b2da      	uxtb	r2, r3
    ea0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea16:	701a      	strb	r2, [r3, #0]
    ea18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea20:	781a      	ldrb	r2, [r3, #0]
    ea22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	4413      	add	r3, r2
    ea2e:	b2da      	uxtb	r2, r3
    ea30:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea38:	701a      	strb	r2, [r3, #0]
    ea3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	781b      	ldrb	r3, [r3, #0]
    ea44:	3301      	adds	r3, #1
    ea46:	b2da      	uxtb	r2, r3
    ea48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea50:	701a      	strb	r2, [r3, #0]
    ea52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5a:	781b      	ldrb	r3, [r3, #0]
    ea5c:	2bff      	cmp	r3, #255	; 0xff
    ea5e:	d105      	bne.n	ea6c <send_gps_pos+0x384>
    ea60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea68:	2200      	movs	r2, #0
    ea6a:	701a      	strb	r2, [r3, #0]
    ea6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	461a      	mov	r2, r3
    ea78:	f64a 4334 	movw	r3, #44084	; 0xac34
    ea7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea80:	78d9      	ldrb	r1, [r3, #3]
    ea82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ea86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8a:	5499      	strb	r1, [r3, r2]
    ea8c:	4b8b      	ldr	r3, [pc, #556]	; (ecbc <send_gps_pos+0x5d4>)
    ea8e:	781a      	ldrb	r2, [r3, #0]
    ea90:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea98:	781b      	ldrb	r3, [r3, #0]
    ea9a:	4413      	add	r3, r2
    ea9c:	b2da      	uxtb	r2, r3
    ea9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa6:	701a      	strb	r2, [r3, #0]
    eaa8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab0:	781a      	ldrb	r2, [r3, #0]
    eab2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaba:	781b      	ldrb	r3, [r3, #0]
    eabc:	4413      	add	r3, r2
    eabe:	b2da      	uxtb	r2, r3
    eac0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac8:	701a      	strb	r2, [r3, #0]
    eaca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	3301      	adds	r3, #1
    ead6:	b2da      	uxtb	r2, r3
    ead8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae0:	701a      	strb	r2, [r3, #0]
    eae2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	2bff      	cmp	r3, #255	; 0xff
    eaee:	d105      	bne.n	eafc <send_gps_pos+0x414>
    eaf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eaf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf8:	2200      	movs	r2, #0
    eafa:	701a      	strb	r2, [r3, #0]
    eafc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	461a      	mov	r2, r3
    eb08:	f64a 4338 	movw	r3, #44088	; 0xac38
    eb0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb10:	7819      	ldrb	r1, [r3, #0]
    eb12:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1a:	5499      	strb	r1, [r3, r2]
    eb1c:	f64a 4338 	movw	r3, #44088	; 0xac38
    eb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb24:	781a      	ldrb	r2, [r3, #0]
    eb26:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	4413      	add	r3, r2
    eb32:	b2da      	uxtb	r2, r3
    eb34:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb3c:	701a      	strb	r2, [r3, #0]
    eb3e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb46:	781a      	ldrb	r2, [r3, #0]
    eb48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	4413      	add	r3, r2
    eb54:	b2da      	uxtb	r2, r3
    eb56:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	701a      	strb	r2, [r3, #0]
    eb60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb68:	781b      	ldrb	r3, [r3, #0]
    eb6a:	3301      	adds	r3, #1
    eb6c:	b2da      	uxtb	r2, r3
    eb6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb76:	701a      	strb	r2, [r3, #0]
    eb78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb80:	781b      	ldrb	r3, [r3, #0]
    eb82:	2bff      	cmp	r3, #255	; 0xff
    eb84:	d105      	bne.n	eb92 <send_gps_pos+0x4aa>
    eb86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8e:	2200      	movs	r2, #0
    eb90:	701a      	strb	r2, [r3, #0]
    eb92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	461a      	mov	r2, r3
    eb9e:	f64a 4338 	movw	r3, #44088	; 0xac38
    eba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba6:	7859      	ldrb	r1, [r3, #1]
    eba8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ebac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb0:	5499      	strb	r1, [r3, r2]
    ebb2:	4b43      	ldr	r3, [pc, #268]	; (ecc0 <send_gps_pos+0x5d8>)
    ebb4:	781a      	ldrb	r2, [r3, #0]
    ebb6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ebba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbe:	781b      	ldrb	r3, [r3, #0]
    ebc0:	4413      	add	r3, r2
    ebc2:	b2da      	uxtb	r2, r3
    ebc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ebc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebcc:	701a      	strb	r2, [r3, #0]
    ebce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ebd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd6:	781a      	ldrb	r2, [r3, #0]
    ebd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ebdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	4413      	add	r3, r2
    ebe4:	b2da      	uxtb	r2, r3
    ebe6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ebea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebee:	701a      	strb	r2, [r3, #0]
    ebf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	3301      	adds	r3, #1
    ebfc:	b2da      	uxtb	r2, r3
    ebfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec06:	701a      	strb	r2, [r3, #0]
    ec08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	2bff      	cmp	r3, #255	; 0xff
    ec14:	d105      	bne.n	ec22 <send_gps_pos+0x53a>
    ec16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1e:	2200      	movs	r2, #0
    ec20:	701a      	strb	r2, [r3, #0]
    ec22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	461a      	mov	r2, r3
    ec2e:	f64a 4338 	movw	r3, #44088	; 0xac38
    ec32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec36:	7899      	ldrb	r1, [r3, #2]
    ec38:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ec3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec40:	5499      	strb	r1, [r3, r2]
    ec42:	4b20      	ldr	r3, [pc, #128]	; (ecc4 <send_gps_pos+0x5dc>)
    ec44:	781a      	ldrb	r2, [r3, #0]
    ec46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	4413      	add	r3, r2
    ec52:	b2da      	uxtb	r2, r3
    ec54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5c:	701a      	strb	r2, [r3, #0]
    ec5e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec66:	781a      	ldrb	r2, [r3, #0]
    ec68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec70:	781b      	ldrb	r3, [r3, #0]
    ec72:	4413      	add	r3, r2
    ec74:	b2da      	uxtb	r2, r3
    ec76:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec7e:	701a      	strb	r2, [r3, #0]
    ec80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	3301      	adds	r3, #1
    ec8c:	b2da      	uxtb	r2, r3
    ec8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec96:	701a      	strb	r2, [r3, #0]
    ec98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca0:	781b      	ldrb	r3, [r3, #0]
    eca2:	2bff      	cmp	r3, #255	; 0xff
    eca4:	d110      	bne.n	ecc8 <send_gps_pos+0x5e0>
    eca6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ecaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecae:	2200      	movs	r2, #0
    ecb0:	701a      	strb	r2, [r3, #0]
    ecb2:	e009      	b.n	ecc8 <send_gps_pos+0x5e0>
    ecb4:	2000ac35 	.word	0x2000ac35
    ecb8:	2000ac36 	.word	0x2000ac36
    ecbc:	2000ac37 	.word	0x2000ac37
    ecc0:	2000ac39 	.word	0x2000ac39
    ecc4:	2000ac3a 	.word	0x2000ac3a
    ecc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd0:	781b      	ldrb	r3, [r3, #0]
    ecd2:	461a      	mov	r2, r3
    ecd4:	f64a 4338 	movw	r3, #44088	; 0xac38
    ecd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecdc:	78d9      	ldrb	r1, [r3, #3]
    ecde:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ece2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece6:	5499      	strb	r1, [r3, r2]
    ece8:	4bd3      	ldr	r3, [pc, #844]	; (f038 <send_gps_pos+0x950>)
    ecea:	781a      	ldrb	r2, [r3, #0]
    ecec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf4:	781b      	ldrb	r3, [r3, #0]
    ecf6:	4413      	add	r3, r2
    ecf8:	b2da      	uxtb	r2, r3
    ecfa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed02:	701a      	strb	r2, [r3, #0]
    ed04:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed0c:	781a      	ldrb	r2, [r3, #0]
    ed0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed16:	781b      	ldrb	r3, [r3, #0]
    ed18:	4413      	add	r3, r2
    ed1a:	b2da      	uxtb	r2, r3
    ed1c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed24:	701a      	strb	r2, [r3, #0]
    ed26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2e:	781b      	ldrb	r3, [r3, #0]
    ed30:	3301      	adds	r3, #1
    ed32:	b2da      	uxtb	r2, r3
    ed34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed3c:	701a      	strb	r2, [r3, #0]
    ed3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed46:	781b      	ldrb	r3, [r3, #0]
    ed48:	2bff      	cmp	r3, #255	; 0xff
    ed4a:	d105      	bne.n	ed58 <send_gps_pos+0x670>
    ed4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed54:	2200      	movs	r2, #0
    ed56:	701a      	strb	r2, [r3, #0]
    ed58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed60:	781b      	ldrb	r3, [r3, #0]
    ed62:	461a      	mov	r2, r3
    ed64:	f64a 4330 	movw	r3, #44080	; 0xac30
    ed68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed6c:	7819      	ldrb	r1, [r3, #0]
    ed6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ed72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed76:	5499      	strb	r1, [r3, r2]
    ed78:	f64a 4330 	movw	r3, #44080	; 0xac30
    ed7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed80:	781a      	ldrb	r2, [r3, #0]
    ed82:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	4413      	add	r3, r2
    ed8e:	b2da      	uxtb	r2, r3
    ed90:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed98:	701a      	strb	r2, [r3, #0]
    ed9a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda2:	781a      	ldrb	r2, [r3, #0]
    eda4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	4413      	add	r3, r2
    edb0:	b2da      	uxtb	r2, r3
    edb2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edba:	701a      	strb	r2, [r3, #0]
    edbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	781b      	ldrb	r3, [r3, #0]
    edc6:	3301      	adds	r3, #1
    edc8:	b2da      	uxtb	r2, r3
    edca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd2:	701a      	strb	r2, [r3, #0]
    edd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	2bff      	cmp	r3, #255	; 0xff
    ede0:	d105      	bne.n	edee <send_gps_pos+0x706>
    ede2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ede6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edea:	2200      	movs	r2, #0
    edec:	701a      	strb	r2, [r3, #0]
    edee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf6:	781b      	ldrb	r3, [r3, #0]
    edf8:	461a      	mov	r2, r3
    edfa:	f64a 4330 	movw	r3, #44080	; 0xac30
    edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee02:	7859      	ldrb	r1, [r3, #1]
    ee04:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	5499      	strb	r1, [r3, r2]
    ee0e:	4b8b      	ldr	r3, [pc, #556]	; (f03c <send_gps_pos+0x954>)
    ee10:	781a      	ldrb	r2, [r3, #0]
    ee12:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee1a:	781b      	ldrb	r3, [r3, #0]
    ee1c:	4413      	add	r3, r2
    ee1e:	b2da      	uxtb	r2, r3
    ee20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee28:	701a      	strb	r2, [r3, #0]
    ee2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee32:	781a      	ldrb	r2, [r3, #0]
    ee34:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3c:	781b      	ldrb	r3, [r3, #0]
    ee3e:	4413      	add	r3, r2
    ee40:	b2da      	uxtb	r2, r3
    ee42:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	3301      	adds	r3, #1
    ee58:	b2da      	uxtb	r2, r3
    ee5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee62:	701a      	strb	r2, [r3, #0]
    ee64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6c:	781b      	ldrb	r3, [r3, #0]
    ee6e:	2bff      	cmp	r3, #255	; 0xff
    ee70:	d105      	bne.n	ee7e <send_gps_pos+0x796>
    ee72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7a:	2200      	movs	r2, #0
    ee7c:	701a      	strb	r2, [r3, #0]
    ee7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee86:	781b      	ldrb	r3, [r3, #0]
    ee88:	461a      	mov	r2, r3
    ee8a:	f64a 4330 	movw	r3, #44080	; 0xac30
    ee8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee92:	7899      	ldrb	r1, [r3, #2]
    ee94:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ee98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee9c:	5499      	strb	r1, [r3, r2]
    ee9e:	4b68      	ldr	r3, [pc, #416]	; (f040 <send_gps_pos+0x958>)
    eea0:	781a      	ldrb	r2, [r3, #0]
    eea2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeaa:	781b      	ldrb	r3, [r3, #0]
    eeac:	4413      	add	r3, r2
    eeae:	b2da      	uxtb	r2, r3
    eeb0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb8:	701a      	strb	r2, [r3, #0]
    eeba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec2:	781a      	ldrb	r2, [r3, #0]
    eec4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eecc:	781b      	ldrb	r3, [r3, #0]
    eece:	4413      	add	r3, r2
    eed0:	b2da      	uxtb	r2, r3
    eed2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeda:	701a      	strb	r2, [r3, #0]
    eedc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	781b      	ldrb	r3, [r3, #0]
    eee6:	3301      	adds	r3, #1
    eee8:	b2da      	uxtb	r2, r3
    eeea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eeee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef2:	701a      	strb	r2, [r3, #0]
    eef4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefc:	781b      	ldrb	r3, [r3, #0]
    eefe:	2bff      	cmp	r3, #255	; 0xff
    ef00:	d105      	bne.n	ef0e <send_gps_pos+0x826>
    ef02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0a:	2200      	movs	r2, #0
    ef0c:	701a      	strb	r2, [r3, #0]
    ef0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef16:	781b      	ldrb	r3, [r3, #0]
    ef18:	461a      	mov	r2, r3
    ef1a:	f64a 4330 	movw	r3, #44080	; 0xac30
    ef1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef22:	78d9      	ldrb	r1, [r3, #3]
    ef24:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ef28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef2c:	5499      	strb	r1, [r3, r2]
    ef2e:	4b45      	ldr	r3, [pc, #276]	; (f044 <send_gps_pos+0x95c>)
    ef30:	781a      	ldrb	r2, [r3, #0]
    ef32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3a:	781b      	ldrb	r3, [r3, #0]
    ef3c:	4413      	add	r3, r2
    ef3e:	b2da      	uxtb	r2, r3
    ef40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef48:	701a      	strb	r2, [r3, #0]
    ef4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef52:	781a      	ldrb	r2, [r3, #0]
    ef54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef5c:	781b      	ldrb	r3, [r3, #0]
    ef5e:	4413      	add	r3, r2
    ef60:	b2da      	uxtb	r2, r3
    ef62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6a:	701a      	strb	r2, [r3, #0]
    ef6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef74:	781b      	ldrb	r3, [r3, #0]
    ef76:	3301      	adds	r3, #1
    ef78:	b2da      	uxtb	r2, r3
    ef7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef82:	701a      	strb	r2, [r3, #0]
    ef84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef8c:	781b      	ldrb	r3, [r3, #0]
    ef8e:	2bff      	cmp	r3, #255	; 0xff
    ef90:	d105      	bne.n	ef9e <send_gps_pos+0x8b6>
    ef92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9a:	2200      	movs	r2, #0
    ef9c:	701a      	strb	r2, [r3, #0]
    ef9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa6:	781b      	ldrb	r3, [r3, #0]
    efa8:	461a      	mov	r2, r3
    efaa:	f64a 4324 	movw	r3, #44068	; 0xac24
    efae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb2:	7819      	ldrb	r1, [r3, #0]
    efb4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    efb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efbc:	5499      	strb	r1, [r3, r2]
    efbe:	f64a 4324 	movw	r3, #44068	; 0xac24
    efc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc6:	781a      	ldrb	r2, [r3, #0]
    efc8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd0:	781b      	ldrb	r3, [r3, #0]
    efd2:	4413      	add	r3, r2
    efd4:	b2da      	uxtb	r2, r3
    efd6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efde:	701a      	strb	r2, [r3, #0]
    efe0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    efe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe8:	781a      	ldrb	r2, [r3, #0]
    efea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	4413      	add	r3, r2
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    effc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	3301      	adds	r3, #1
    f00e:	b2da      	uxtb	r2, r3
    f010:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f018:	701a      	strb	r2, [r3, #0]
    f01a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f022:	781b      	ldrb	r3, [r3, #0]
    f024:	2bff      	cmp	r3, #255	; 0xff
    f026:	d10f      	bne.n	f048 <send_gps_pos+0x960>
    f028:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f030:	2200      	movs	r2, #0
    f032:	701a      	strb	r2, [r3, #0]
    f034:	e008      	b.n	f048 <send_gps_pos+0x960>
    f036:	bf00      	nop
    f038:	2000ac3b 	.word	0x2000ac3b
    f03c:	2000ac31 	.word	0x2000ac31
    f040:	2000ac32 	.word	0x2000ac32
    f044:	2000ac33 	.word	0x2000ac33
    f048:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f050:	781b      	ldrb	r3, [r3, #0]
    f052:	461a      	mov	r2, r3
    f054:	f64a 4324 	movw	r3, #44068	; 0xac24
    f058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05c:	7859      	ldrb	r1, [r3, #1]
    f05e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f066:	5499      	strb	r1, [r3, r2]
    f068:	4bd1      	ldr	r3, [pc, #836]	; (f3b0 <send_gps_pos+0xcc8>)
    f06a:	781a      	ldrb	r2, [r3, #0]
    f06c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	781b      	ldrb	r3, [r3, #0]
    f076:	4413      	add	r3, r2
    f078:	b2da      	uxtb	r2, r3
    f07a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f082:	701a      	strb	r2, [r3, #0]
    f084:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08c:	781a      	ldrb	r2, [r3, #0]
    f08e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f096:	781b      	ldrb	r3, [r3, #0]
    f098:	4413      	add	r3, r2
    f09a:	b2da      	uxtb	r2, r3
    f09c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	701a      	strb	r2, [r3, #0]
    f0a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ae:	781b      	ldrb	r3, [r3, #0]
    f0b0:	3301      	adds	r3, #1
    f0b2:	b2da      	uxtb	r2, r3
    f0b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	701a      	strb	r2, [r3, #0]
    f0be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c6:	781b      	ldrb	r3, [r3, #0]
    f0c8:	2bff      	cmp	r3, #255	; 0xff
    f0ca:	d105      	bne.n	f0d8 <send_gps_pos+0x9f0>
    f0cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d4:	2200      	movs	r2, #0
    f0d6:	701a      	strb	r2, [r3, #0]
    f0d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e0:	781b      	ldrb	r3, [r3, #0]
    f0e2:	461a      	mov	r2, r3
    f0e4:	f64a 4324 	movw	r3, #44068	; 0xac24
    f0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ec:	7899      	ldrb	r1, [r3, #2]
    f0ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f6:	5499      	strb	r1, [r3, r2]
    f0f8:	4bae      	ldr	r3, [pc, #696]	; (f3b4 <send_gps_pos+0xccc>)
    f0fa:	781a      	ldrb	r2, [r3, #0]
    f0fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f104:	781b      	ldrb	r3, [r3, #0]
    f106:	4413      	add	r3, r2
    f108:	b2da      	uxtb	r2, r3
    f10a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f112:	701a      	strb	r2, [r3, #0]
    f114:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11c:	781a      	ldrb	r2, [r3, #0]
    f11e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	4413      	add	r3, r2
    f12a:	b2da      	uxtb	r2, r3
    f12c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	701a      	strb	r2, [r3, #0]
    f136:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13e:	781b      	ldrb	r3, [r3, #0]
    f140:	3301      	adds	r3, #1
    f142:	b2da      	uxtb	r2, r3
    f144:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	701a      	strb	r2, [r3, #0]
    f14e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f156:	781b      	ldrb	r3, [r3, #0]
    f158:	2bff      	cmp	r3, #255	; 0xff
    f15a:	d105      	bne.n	f168 <send_gps_pos+0xa80>
    f15c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f164:	2200      	movs	r2, #0
    f166:	701a      	strb	r2, [r3, #0]
    f168:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f170:	781b      	ldrb	r3, [r3, #0]
    f172:	461a      	mov	r2, r3
    f174:	f64a 4324 	movw	r3, #44068	; 0xac24
    f178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17c:	78d9      	ldrb	r1, [r3, #3]
    f17e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f186:	5499      	strb	r1, [r3, r2]
    f188:	4b8b      	ldr	r3, [pc, #556]	; (f3b8 <send_gps_pos+0xcd0>)
    f18a:	781a      	ldrb	r2, [r3, #0]
    f18c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f194:	781b      	ldrb	r3, [r3, #0]
    f196:	4413      	add	r3, r2
    f198:	b2da      	uxtb	r2, r3
    f19a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a2:	701a      	strb	r2, [r3, #0]
    f1a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ac:	781a      	ldrb	r2, [r3, #0]
    f1ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	4413      	add	r3, r2
    f1ba:	b2da      	uxtb	r2, r3
    f1bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c4:	701a      	strb	r2, [r3, #0]
    f1c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ce:	781b      	ldrb	r3, [r3, #0]
    f1d0:	3301      	adds	r3, #1
    f1d2:	b2da      	uxtb	r2, r3
    f1d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1dc:	701a      	strb	r2, [r3, #0]
    f1de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e6:	781b      	ldrb	r3, [r3, #0]
    f1e8:	2bff      	cmp	r3, #255	; 0xff
    f1ea:	d105      	bne.n	f1f8 <send_gps_pos+0xb10>
    f1ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f4:	2200      	movs	r2, #0
    f1f6:	701a      	strb	r2, [r3, #0]
    f1f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f200:	781b      	ldrb	r3, [r3, #0]
    f202:	461a      	mov	r2, r3
    f204:	f64a 4328 	movw	r3, #44072	; 0xac28
    f208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f20c:	7819      	ldrb	r1, [r3, #0]
    f20e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f216:	5499      	strb	r1, [r3, r2]
    f218:	f64a 4328 	movw	r3, #44072	; 0xac28
    f21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f220:	781a      	ldrb	r2, [r3, #0]
    f222:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22a:	781b      	ldrb	r3, [r3, #0]
    f22c:	4413      	add	r3, r2
    f22e:	b2da      	uxtb	r2, r3
    f230:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f238:	701a      	strb	r2, [r3, #0]
    f23a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f242:	781a      	ldrb	r2, [r3, #0]
    f244:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	4413      	add	r3, r2
    f250:	b2da      	uxtb	r2, r3
    f252:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25a:	701a      	strb	r2, [r3, #0]
    f25c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f264:	781b      	ldrb	r3, [r3, #0]
    f266:	3301      	adds	r3, #1
    f268:	b2da      	uxtb	r2, r3
    f26a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f272:	701a      	strb	r2, [r3, #0]
    f274:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27c:	781b      	ldrb	r3, [r3, #0]
    f27e:	2bff      	cmp	r3, #255	; 0xff
    f280:	d105      	bne.n	f28e <send_gps_pos+0xba6>
    f282:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f28a:	2200      	movs	r2, #0
    f28c:	701a      	strb	r2, [r3, #0]
    f28e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f296:	781b      	ldrb	r3, [r3, #0]
    f298:	461a      	mov	r2, r3
    f29a:	f64a 4328 	movw	r3, #44072	; 0xac28
    f29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a2:	7859      	ldrb	r1, [r3, #1]
    f2a4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ac:	5499      	strb	r1, [r3, r2]
    f2ae:	4b43      	ldr	r3, [pc, #268]	; (f3bc <send_gps_pos+0xcd4>)
    f2b0:	781a      	ldrb	r2, [r3, #0]
    f2b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ba:	781b      	ldrb	r3, [r3, #0]
    f2bc:	4413      	add	r3, r2
    f2be:	b2da      	uxtb	r2, r3
    f2c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c8:	701a      	strb	r2, [r3, #0]
    f2ca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d2:	781a      	ldrb	r2, [r3, #0]
    f2d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2dc:	781b      	ldrb	r3, [r3, #0]
    f2de:	4413      	add	r3, r2
    f2e0:	b2da      	uxtb	r2, r3
    f2e2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	701a      	strb	r2, [r3, #0]
    f2ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f4:	781b      	ldrb	r3, [r3, #0]
    f2f6:	3301      	adds	r3, #1
    f2f8:	b2da      	uxtb	r2, r3
    f2fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	701a      	strb	r2, [r3, #0]
    f304:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f30c:	781b      	ldrb	r3, [r3, #0]
    f30e:	2bff      	cmp	r3, #255	; 0xff
    f310:	d105      	bne.n	f31e <send_gps_pos+0xc36>
    f312:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f31a:	2200      	movs	r2, #0
    f31c:	701a      	strb	r2, [r3, #0]
    f31e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f326:	781b      	ldrb	r3, [r3, #0]
    f328:	461a      	mov	r2, r3
    f32a:	f64a 4328 	movw	r3, #44072	; 0xac28
    f32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f332:	7899      	ldrb	r1, [r3, #2]
    f334:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33c:	5499      	strb	r1, [r3, r2]
    f33e:	4b20      	ldr	r3, [pc, #128]	; (f3c0 <send_gps_pos+0xcd8>)
    f340:	781a      	ldrb	r2, [r3, #0]
    f342:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34a:	781b      	ldrb	r3, [r3, #0]
    f34c:	4413      	add	r3, r2
    f34e:	b2da      	uxtb	r2, r3
    f350:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f358:	701a      	strb	r2, [r3, #0]
    f35a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f362:	781a      	ldrb	r2, [r3, #0]
    f364:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	4413      	add	r3, r2
    f370:	b2da      	uxtb	r2, r3
    f372:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f37a:	701a      	strb	r2, [r3, #0]
    f37c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f384:	781b      	ldrb	r3, [r3, #0]
    f386:	3301      	adds	r3, #1
    f388:	b2da      	uxtb	r2, r3
    f38a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f392:	701a      	strb	r2, [r3, #0]
    f394:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39c:	781b      	ldrb	r3, [r3, #0]
    f39e:	2bff      	cmp	r3, #255	; 0xff
    f3a0:	d110      	bne.n	f3c4 <send_gps_pos+0xcdc>
    f3a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3aa:	2200      	movs	r2, #0
    f3ac:	701a      	strb	r2, [r3, #0]
    f3ae:	e009      	b.n	f3c4 <send_gps_pos+0xcdc>
    f3b0:	2000ac25 	.word	0x2000ac25
    f3b4:	2000ac26 	.word	0x2000ac26
    f3b8:	2000ac27 	.word	0x2000ac27
    f3bc:	2000ac29 	.word	0x2000ac29
    f3c0:	2000ac2a 	.word	0x2000ac2a
    f3c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3cc:	781b      	ldrb	r3, [r3, #0]
    f3ce:	461a      	mov	r2, r3
    f3d0:	f64a 4328 	movw	r3, #44072	; 0xac28
    f3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d8:	78d9      	ldrb	r1, [r3, #3]
    f3da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e2:	5499      	strb	r1, [r3, r2]
    f3e4:	4bd3      	ldr	r3, [pc, #844]	; (f734 <send_gps_pos+0x104c>)
    f3e6:	781a      	ldrb	r2, [r3, #0]
    f3e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f0:	781b      	ldrb	r3, [r3, #0]
    f3f2:	4413      	add	r3, r2
    f3f4:	b2da      	uxtb	r2, r3
    f3f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3fe:	701a      	strb	r2, [r3, #0]
    f400:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f408:	781a      	ldrb	r2, [r3, #0]
    f40a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	4413      	add	r3, r2
    f416:	b2da      	uxtb	r2, r3
    f418:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f420:	701a      	strb	r2, [r3, #0]
    f422:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f42a:	781b      	ldrb	r3, [r3, #0]
    f42c:	3301      	adds	r3, #1
    f42e:	b2da      	uxtb	r2, r3
    f430:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f438:	701a      	strb	r2, [r3, #0]
    f43a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f442:	781b      	ldrb	r3, [r3, #0]
    f444:	2bff      	cmp	r3, #255	; 0xff
    f446:	d105      	bne.n	f454 <send_gps_pos+0xd6c>
    f448:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f450:	2200      	movs	r2, #0
    f452:	701a      	strb	r2, [r3, #0]
    f454:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	461a      	mov	r2, r3
    f460:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f468:	7819      	ldrb	r1, [r3, #0]
    f46a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f472:	5499      	strb	r1, [r3, r2]
    f474:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f47c:	781a      	ldrb	r2, [r3, #0]
    f47e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f486:	781b      	ldrb	r3, [r3, #0]
    f488:	4413      	add	r3, r2
    f48a:	b2da      	uxtb	r2, r3
    f48c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f494:	701a      	strb	r2, [r3, #0]
    f496:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49e:	781a      	ldrb	r2, [r3, #0]
    f4a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a8:	781b      	ldrb	r3, [r3, #0]
    f4aa:	4413      	add	r3, r2
    f4ac:	b2da      	uxtb	r2, r3
    f4ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b6:	701a      	strb	r2, [r3, #0]
    f4b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	781b      	ldrb	r3, [r3, #0]
    f4c2:	3301      	adds	r3, #1
    f4c4:	b2da      	uxtb	r2, r3
    f4c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ce:	701a      	strb	r2, [r3, #0]
    f4d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d8:	781b      	ldrb	r3, [r3, #0]
    f4da:	2bff      	cmp	r3, #255	; 0xff
    f4dc:	d105      	bne.n	f4ea <send_gps_pos+0xe02>
    f4de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e6:	2200      	movs	r2, #0
    f4e8:	701a      	strb	r2, [r3, #0]
    f4ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f2:	781b      	ldrb	r3, [r3, #0]
    f4f4:	461a      	mov	r2, r3
    f4f6:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	7859      	ldrb	r1, [r3, #1]
    f500:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f508:	5499      	strb	r1, [r3, r2]
    f50a:	4b8b      	ldr	r3, [pc, #556]	; (f738 <send_gps_pos+0x1050>)
    f50c:	781a      	ldrb	r2, [r3, #0]
    f50e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f516:	781b      	ldrb	r3, [r3, #0]
    f518:	4413      	add	r3, r2
    f51a:	b2da      	uxtb	r2, r3
    f51c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f524:	701a      	strb	r2, [r3, #0]
    f526:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52e:	781a      	ldrb	r2, [r3, #0]
    f530:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f538:	781b      	ldrb	r3, [r3, #0]
    f53a:	4413      	add	r3, r2
    f53c:	b2da      	uxtb	r2, r3
    f53e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f546:	701a      	strb	r2, [r3, #0]
    f548:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f550:	781b      	ldrb	r3, [r3, #0]
    f552:	3301      	adds	r3, #1
    f554:	b2da      	uxtb	r2, r3
    f556:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55e:	701a      	strb	r2, [r3, #0]
    f560:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f568:	781b      	ldrb	r3, [r3, #0]
    f56a:	2bff      	cmp	r3, #255	; 0xff
    f56c:	d105      	bne.n	f57a <send_gps_pos+0xe92>
    f56e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f576:	2200      	movs	r2, #0
    f578:	701a      	strb	r2, [r3, #0]
    f57a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f582:	781b      	ldrb	r3, [r3, #0]
    f584:	461a      	mov	r2, r3
    f586:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58e:	7899      	ldrb	r1, [r3, #2]
    f590:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	5499      	strb	r1, [r3, r2]
    f59a:	4b68      	ldr	r3, [pc, #416]	; (f73c <send_gps_pos+0x1054>)
    f59c:	781a      	ldrb	r2, [r3, #0]
    f59e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a6:	781b      	ldrb	r3, [r3, #0]
    f5a8:	4413      	add	r3, r2
    f5aa:	b2da      	uxtb	r2, r3
    f5ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b4:	701a      	strb	r2, [r3, #0]
    f5b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5be:	781a      	ldrb	r2, [r3, #0]
    f5c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	4413      	add	r3, r2
    f5cc:	b2da      	uxtb	r2, r3
    f5ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d6:	701a      	strb	r2, [r3, #0]
    f5d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	781b      	ldrb	r3, [r3, #0]
    f5e2:	3301      	adds	r3, #1
    f5e4:	b2da      	uxtb	r2, r3
    f5e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ee:	701a      	strb	r2, [r3, #0]
    f5f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f8:	781b      	ldrb	r3, [r3, #0]
    f5fa:	2bff      	cmp	r3, #255	; 0xff
    f5fc:	d105      	bne.n	f60a <send_gps_pos+0xf22>
    f5fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f606:	2200      	movs	r2, #0
    f608:	701a      	strb	r2, [r3, #0]
    f60a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f612:	781b      	ldrb	r3, [r3, #0]
    f614:	461a      	mov	r2, r3
    f616:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61e:	78d9      	ldrb	r1, [r3, #3]
    f620:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f628:	5499      	strb	r1, [r3, r2]
    f62a:	4b45      	ldr	r3, [pc, #276]	; (f740 <send_gps_pos+0x1058>)
    f62c:	781a      	ldrb	r2, [r3, #0]
    f62e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	4413      	add	r3, r2
    f63a:	b2da      	uxtb	r2, r3
    f63c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f644:	701a      	strb	r2, [r3, #0]
    f646:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64e:	781a      	ldrb	r2, [r3, #0]
    f650:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f658:	781b      	ldrb	r3, [r3, #0]
    f65a:	4413      	add	r3, r2
    f65c:	b2da      	uxtb	r2, r3
    f65e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f666:	701a      	strb	r2, [r3, #0]
    f668:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f670:	781b      	ldrb	r3, [r3, #0]
    f672:	3301      	adds	r3, #1
    f674:	b2da      	uxtb	r2, r3
    f676:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f67e:	701a      	strb	r2, [r3, #0]
    f680:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f688:	781b      	ldrb	r3, [r3, #0]
    f68a:	2bff      	cmp	r3, #255	; 0xff
    f68c:	d105      	bne.n	f69a <send_gps_pos+0xfb2>
    f68e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f696:	2200      	movs	r2, #0
    f698:	701a      	strb	r2, [r3, #0]
    f69a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a2:	781b      	ldrb	r3, [r3, #0]
    f6a4:	461a      	mov	r2, r3
    f6a6:	f64a 4320 	movw	r3, #44064	; 0xac20
    f6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ae:	7819      	ldrb	r1, [r3, #0]
    f6b0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b8:	5499      	strb	r1, [r3, r2]
    f6ba:	f64a 4320 	movw	r3, #44064	; 0xac20
    f6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c2:	781a      	ldrb	r2, [r3, #0]
    f6c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	4413      	add	r3, r2
    f6d0:	b2da      	uxtb	r2, r3
    f6d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6da:	701a      	strb	r2, [r3, #0]
    f6dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e4:	781a      	ldrb	r2, [r3, #0]
    f6e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	4413      	add	r3, r2
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	3301      	adds	r3, #1
    f70a:	b2da      	uxtb	r2, r3
    f70c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f714:	701a      	strb	r2, [r3, #0]
    f716:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71e:	781b      	ldrb	r3, [r3, #0]
    f720:	2bff      	cmp	r3, #255	; 0xff
    f722:	d10f      	bne.n	f744 <send_gps_pos+0x105c>
    f724:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f72c:	2200      	movs	r2, #0
    f72e:	701a      	strb	r2, [r3, #0]
    f730:	e008      	b.n	f744 <send_gps_pos+0x105c>
    f732:	bf00      	nop
    f734:	2000ac2b 	.word	0x2000ac2b
    f738:	2000ac2d 	.word	0x2000ac2d
    f73c:	2000ac2e 	.word	0x2000ac2e
    f740:	2000ac2f 	.word	0x2000ac2f
    f744:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	461a      	mov	r2, r3
    f750:	f64a 4320 	movw	r3, #44064	; 0xac20
    f754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f758:	7859      	ldrb	r1, [r3, #1]
    f75a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f762:	5499      	strb	r1, [r3, r2]
    f764:	4bc0      	ldr	r3, [pc, #768]	; (fa68 <send_gps_pos+0x1380>)
    f766:	781a      	ldrb	r2, [r3, #0]
    f768:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	781b      	ldrb	r3, [r3, #0]
    f772:	4413      	add	r3, r2
    f774:	b2da      	uxtb	r2, r3
    f776:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77e:	701a      	strb	r2, [r3, #0]
    f780:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f788:	781a      	ldrb	r2, [r3, #0]
    f78a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	4413      	add	r3, r2
    f796:	b2da      	uxtb	r2, r3
    f798:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a0:	701a      	strb	r2, [r3, #0]
    f7a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	3301      	adds	r3, #1
    f7ae:	b2da      	uxtb	r2, r3
    f7b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b8:	701a      	strb	r2, [r3, #0]
    f7ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c2:	781b      	ldrb	r3, [r3, #0]
    f7c4:	2bff      	cmp	r3, #255	; 0xff
    f7c6:	d105      	bne.n	f7d4 <send_gps_pos+0x10ec>
    f7c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d0:	2200      	movs	r2, #0
    f7d2:	701a      	strb	r2, [r3, #0]
    f7d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7dc:	781b      	ldrb	r3, [r3, #0]
    f7de:	461a      	mov	r2, r3
    f7e0:	f64a 4320 	movw	r3, #44064	; 0xac20
    f7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e8:	7899      	ldrb	r1, [r3, #2]
    f7ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f2:	5499      	strb	r1, [r3, r2]
    f7f4:	4b9d      	ldr	r3, [pc, #628]	; (fa6c <send_gps_pos+0x1384>)
    f7f6:	781a      	ldrb	r2, [r3, #0]
    f7f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	4413      	add	r3, r2
    f804:	b2da      	uxtb	r2, r3
    f806:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80e:	701a      	strb	r2, [r3, #0]
    f810:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f818:	781a      	ldrb	r2, [r3, #0]
    f81a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	4413      	add	r3, r2
    f826:	b2da      	uxtb	r2, r3
    f828:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f830:	701a      	strb	r2, [r3, #0]
    f832:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f83a:	781b      	ldrb	r3, [r3, #0]
    f83c:	3301      	adds	r3, #1
    f83e:	b2da      	uxtb	r2, r3
    f840:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f848:	701a      	strb	r2, [r3, #0]
    f84a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f84e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	2bff      	cmp	r3, #255	; 0xff
    f856:	d105      	bne.n	f864 <send_gps_pos+0x117c>
    f858:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f860:	2200      	movs	r2, #0
    f862:	701a      	strb	r2, [r3, #0]
    f864:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f86c:	781b      	ldrb	r3, [r3, #0]
    f86e:	461a      	mov	r2, r3
    f870:	f64a 4320 	movw	r3, #44064	; 0xac20
    f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f878:	78d9      	ldrb	r1, [r3, #3]
    f87a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f882:	5499      	strb	r1, [r3, r2]
    f884:	4b7a      	ldr	r3, [pc, #488]	; (fa70 <send_gps_pos+0x1388>)
    f886:	781a      	ldrb	r2, [r3, #0]
    f888:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f890:	781b      	ldrb	r3, [r3, #0]
    f892:	4413      	add	r3, r2
    f894:	b2da      	uxtb	r2, r3
    f896:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f89e:	701a      	strb	r2, [r3, #0]
    f8a0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a8:	781a      	ldrb	r2, [r3, #0]
    f8aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b2:	781b      	ldrb	r3, [r3, #0]
    f8b4:	4413      	add	r3, r2
    f8b6:	b2da      	uxtb	r2, r3
    f8b8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c0:	701a      	strb	r2, [r3, #0]
    f8c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ca:	781b      	ldrb	r3, [r3, #0]
    f8cc:	3301      	adds	r3, #1
    f8ce:	b2da      	uxtb	r2, r3
    f8d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d8:	701a      	strb	r2, [r3, #0]
    f8da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e2:	781b      	ldrb	r3, [r3, #0]
    f8e4:	2bff      	cmp	r3, #255	; 0xff
    f8e6:	d105      	bne.n	f8f4 <send_gps_pos+0x120c>
    f8e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f0:	2200      	movs	r2, #0
    f8f2:	701a      	strb	r2, [r3, #0]
    f8f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	461a      	mov	r2, r3
    f900:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f908:	7819      	ldrb	r1, [r3, #0]
    f90a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f912:	5499      	strb	r1, [r3, r2]
    f914:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f91c:	781b      	ldrb	r3, [r3, #0]
    f91e:	3301      	adds	r3, #1
    f920:	b2da      	uxtb	r2, r3
    f922:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f92a:	701a      	strb	r2, [r3, #0]
    f92c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	2bff      	cmp	r3, #255	; 0xff
    f938:	d105      	bne.n	f946 <send_gps_pos+0x125e>
    f93a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f942:	2200      	movs	r2, #0
    f944:	701a      	strb	r2, [r3, #0]
    f946:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f94e:	781b      	ldrb	r3, [r3, #0]
    f950:	461a      	mov	r2, r3
    f952:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f95a:	7819      	ldrb	r1, [r3, #0]
    f95c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f964:	5499      	strb	r1, [r3, r2]
    f966:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96e:	781b      	ldrb	r3, [r3, #0]
    f970:	3301      	adds	r3, #1
    f972:	b2da      	uxtb	r2, r3
    f974:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f97c:	701a      	strb	r2, [r3, #0]
    f97e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	2bff      	cmp	r3, #255	; 0xff
    f98a:	d105      	bne.n	f998 <send_gps_pos+0x12b0>
    f98c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f994:	2200      	movs	r2, #0
    f996:	701a      	strb	r2, [r3, #0]
    f998:	f242 0339 	movw	r3, #8249	; 0x2039
    f99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a0:	781b      	ldrb	r3, [r3, #0]
    f9a2:	b2db      	uxtb	r3, r3
    f9a4:	f003 0310 	and.w	r3, r3, #16
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d15a      	bne.n	fa62 <send_gps_pos+0x137a>
    f9ac:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b4:	781b      	ldrb	r3, [r3, #0]
    f9b6:	b2db      	uxtb	r3, r3
    f9b8:	461a      	mov	r2, r3
    f9ba:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c2:	5c9a      	ldrb	r2, [r3, r2]
    f9c4:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    f9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9cc:	701a      	strb	r2, [r3, #0]
    f9ce:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    f9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d6:	2200      	movs	r2, #0
    f9d8:	701a      	strb	r2, [r3, #0]
    f9da:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e2:	781b      	ldrb	r3, [r3, #0]
    f9e4:	b2db      	uxtb	r3, r3
    f9e6:	3301      	adds	r3, #1
    f9e8:	b2da      	uxtb	r2, r3
    f9ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f2:	701a      	strb	r2, [r3, #0]
    f9f4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fc:	781b      	ldrb	r3, [r3, #0]
    f9fe:	b2db      	uxtb	r3, r3
    fa00:	2bff      	cmp	r3, #255	; 0xff
    fa02:	d105      	bne.n	fa10 <send_gps_pos+0x1328>
    fa04:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa0c:	2200      	movs	r2, #0
    fa0e:	701a      	strb	r2, [r3, #0]
    fa10:	f242 0338 	movw	r3, #8248	; 0x2038
    fa14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa18:	f242 0238 	movw	r2, #8248	; 0x2038
    fa1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa20:	7812      	ldrb	r2, [r2, #0]
    fa22:	b2d2      	uxtb	r2, r2
    fa24:	f042 0201 	orr.w	r2, r2, #1
    fa28:	b2d2      	uxtb	r2, r2
    fa2a:	701a      	strb	r2, [r3, #0]
    fa2c:	f242 0339 	movw	r3, #8249	; 0x2039
    fa30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa34:	f242 0239 	movw	r2, #8249	; 0x2039
    fa38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fa3c:	7812      	ldrb	r2, [r2, #0]
    fa3e:	b2d2      	uxtb	r2, r2
    fa40:	f042 0210 	orr.w	r2, r2, #16
    fa44:	b2d2      	uxtb	r2, r2
    fa46:	701a      	strb	r2, [r3, #0]
    fa48:	e00b      	b.n	fa62 <send_gps_pos+0x137a>
    fa4a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    fa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa52:	781b      	ldrb	r3, [r3, #0]
    fa54:	3301      	adds	r3, #1
    fa56:	b2da      	uxtb	r2, r3
    fa58:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    fa5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa60:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fa62:	f005 fbfd 	bl	15260 <estimator_update_state_gps>
  }
}
    fa66:	bd80      	pop	{r7, pc}
    fa68:	2000ac21 	.word	0x2000ac21
    fa6c:	2000ac22 	.word	0x2000ac22
    fa70:	2000ac23 	.word	0x2000ac23

0000fa74 <send_radIR>:

void send_radIR(void){
    fa74:	b480      	push	{r7}
    fa76:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fa78:	f64a 4346 	movw	r3, #44102	; 0xac46
    fa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa80:	781b      	ldrb	r3, [r3, #0]
    fa82:	2b00      	cmp	r3, #0
    fa84:	f000 85e8 	beq.w	10658 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fa88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa90:	781a      	ldrb	r2, [r3, #0]
    fa92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	b2db      	uxtb	r3, r3
    fa9e:	429a      	cmp	r2, r3
    faa0:	d313      	bcc.n	faca <send_radIR+0x56>
    faa2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    faa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	b2db      	uxtb	r3, r3
    faae:	461a      	mov	r2, r3
    fab0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	1ad3      	subs	r3, r2, r3
    fabc:	33ff      	adds	r3, #255	; 0xff
    fabe:	2b14      	cmp	r3, #20
    fac0:	bfd4      	ite	le
    fac2:	2300      	movle	r3, #0
    fac4:	2301      	movgt	r3, #1
    fac6:	b2db      	uxtb	r3, r3
    fac8:	e011      	b.n	faee <send_radIR+0x7a>
    faca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    face:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad2:	781b      	ldrb	r3, [r3, #0]
    fad4:	b2db      	uxtb	r3, r3
    fad6:	461a      	mov	r2, r3
    fad8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae0:	781b      	ldrb	r3, [r3, #0]
    fae2:	1ad3      	subs	r3, r2, r3
    fae4:	2b14      	cmp	r3, #20
    fae6:	bfd4      	ite	le
    fae8:	2300      	movle	r3, #0
    faea:	2301      	movgt	r3, #1
    faec:	b2db      	uxtb	r3, r3
    faee:	2b00      	cmp	r3, #0
    faf0:	f000 85a6 	beq.w	10640 <send_radIR+0xbcc>
    faf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    faf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fafc:	781b      	ldrb	r3, [r3, #0]
    fafe:	461a      	mov	r2, r3
    fb00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb08:	2105      	movs	r1, #5
    fb0a:	5499      	strb	r1, [r3, r2]
    fb0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb14:	781b      	ldrb	r3, [r3, #0]
    fb16:	3301      	adds	r3, #1
    fb18:	b2da      	uxtb	r2, r3
    fb1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb22:	701a      	strb	r2, [r3, #0]
    fb24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb2c:	781b      	ldrb	r3, [r3, #0]
    fb2e:	2bff      	cmp	r3, #255	; 0xff
    fb30:	d105      	bne.n	fb3e <send_radIR+0xca>
    fb32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3a:	2200      	movs	r2, #0
    fb3c:	701a      	strb	r2, [r3, #0]
    fb3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb46:	781b      	ldrb	r3, [r3, #0]
    fb48:	461a      	mov	r2, r3
    fb4a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb52:	2105      	movs	r1, #5
    fb54:	5499      	strb	r1, [r3, r2]
    fb56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	3301      	adds	r3, #1
    fb62:	b2da      	uxtb	r2, r3
    fb64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6c:	701a      	strb	r2, [r3, #0]
    fb6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb76:	781b      	ldrb	r3, [r3, #0]
    fb78:	2bff      	cmp	r3, #255	; 0xff
    fb7a:	d105      	bne.n	fb88 <send_radIR+0x114>
    fb7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb84:	2200      	movs	r2, #0
    fb86:	701a      	strb	r2, [r3, #0]
    fb88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb90:	2205      	movs	r2, #5
    fb92:	701a      	strb	r2, [r3, #0]
    fb94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb9c:	2205      	movs	r2, #5
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba8:	781b      	ldrb	r3, [r3, #0]
    fbaa:	461a      	mov	r2, r3
    fbac:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb4:	7819      	ldrb	r1, [r3, #0]
    fbb6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbbe:	5499      	strb	r1, [r3, r2]
    fbc0:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc8:	781a      	ldrb	r2, [r3, #0]
    fbca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd2:	781b      	ldrb	r3, [r3, #0]
    fbd4:	4413      	add	r3, r2
    fbd6:	b2da      	uxtb	r2, r3
    fbd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe0:	701a      	strb	r2, [r3, #0]
    fbe2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbea:	781a      	ldrb	r2, [r3, #0]
    fbec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf4:	781b      	ldrb	r3, [r3, #0]
    fbf6:	4413      	add	r3, r2
    fbf8:	b2da      	uxtb	r2, r3
    fbfa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc02:	701a      	strb	r2, [r3, #0]
    fc04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0c:	781b      	ldrb	r3, [r3, #0]
    fc0e:	3301      	adds	r3, #1
    fc10:	b2da      	uxtb	r2, r3
    fc12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1a:	701a      	strb	r2, [r3, #0]
    fc1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc24:	781b      	ldrb	r3, [r3, #0]
    fc26:	2bff      	cmp	r3, #255	; 0xff
    fc28:	d105      	bne.n	fc36 <send_radIR+0x1c2>
    fc2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc32:	2200      	movs	r2, #0
    fc34:	701a      	strb	r2, [r3, #0]
    fc36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3e:	781b      	ldrb	r3, [r3, #0]
    fc40:	461a      	mov	r2, r3
    fc42:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4a:	7859      	ldrb	r1, [r3, #1]
    fc4c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc54:	5499      	strb	r1, [r3, r2]
    fc56:	4bd2      	ldr	r3, [pc, #840]	; (ffa0 <send_radIR+0x52c>)
    fc58:	781a      	ldrb	r2, [r3, #0]
    fc5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc62:	781b      	ldrb	r3, [r3, #0]
    fc64:	4413      	add	r3, r2
    fc66:	b2da      	uxtb	r2, r3
    fc68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc70:	701a      	strb	r2, [r3, #0]
    fc72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7a:	781a      	ldrb	r2, [r3, #0]
    fc7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc84:	781b      	ldrb	r3, [r3, #0]
    fc86:	4413      	add	r3, r2
    fc88:	b2da      	uxtb	r2, r3
    fc8a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc92:	701a      	strb	r2, [r3, #0]
    fc94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	3301      	adds	r3, #1
    fca0:	b2da      	uxtb	r2, r3
    fca2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcaa:	701a      	strb	r2, [r3, #0]
    fcac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb4:	781b      	ldrb	r3, [r3, #0]
    fcb6:	2bff      	cmp	r3, #255	; 0xff
    fcb8:	d105      	bne.n	fcc6 <send_radIR+0x252>
    fcba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc2:	2200      	movs	r2, #0
    fcc4:	701a      	strb	r2, [r3, #0]
    fcc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcce:	781b      	ldrb	r3, [r3, #0]
    fcd0:	461a      	mov	r2, r3
    fcd2:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcda:	7899      	ldrb	r1, [r3, #2]
    fcdc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce4:	5499      	strb	r1, [r3, r2]
    fce6:	4baf      	ldr	r3, [pc, #700]	; (ffa4 <send_radIR+0x530>)
    fce8:	781a      	ldrb	r2, [r3, #0]
    fcea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf2:	781b      	ldrb	r3, [r3, #0]
    fcf4:	4413      	add	r3, r2
    fcf6:	b2da      	uxtb	r2, r3
    fcf8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd00:	701a      	strb	r2, [r3, #0]
    fd02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd0a:	781a      	ldrb	r2, [r3, #0]
    fd0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd14:	781b      	ldrb	r3, [r3, #0]
    fd16:	4413      	add	r3, r2
    fd18:	b2da      	uxtb	r2, r3
    fd1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd22:	701a      	strb	r2, [r3, #0]
    fd24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd2c:	781b      	ldrb	r3, [r3, #0]
    fd2e:	3301      	adds	r3, #1
    fd30:	b2da      	uxtb	r2, r3
    fd32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3a:	701a      	strb	r2, [r3, #0]
    fd3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd44:	781b      	ldrb	r3, [r3, #0]
    fd46:	2bff      	cmp	r3, #255	; 0xff
    fd48:	d105      	bne.n	fd56 <send_radIR+0x2e2>
    fd4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd52:	2200      	movs	r2, #0
    fd54:	701a      	strb	r2, [r3, #0]
    fd56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5e:	781b      	ldrb	r3, [r3, #0]
    fd60:	461a      	mov	r2, r3
    fd62:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd6a:	78d9      	ldrb	r1, [r3, #3]
    fd6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd74:	5499      	strb	r1, [r3, r2]
    fd76:	4b8c      	ldr	r3, [pc, #560]	; (ffa8 <send_radIR+0x534>)
    fd78:	781a      	ldrb	r2, [r3, #0]
    fd7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd82:	781b      	ldrb	r3, [r3, #0]
    fd84:	4413      	add	r3, r2
    fd86:	b2da      	uxtb	r2, r3
    fd88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd90:	701a      	strb	r2, [r3, #0]
    fd92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9a:	781a      	ldrb	r2, [r3, #0]
    fd9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda4:	781b      	ldrb	r3, [r3, #0]
    fda6:	4413      	add	r3, r2
    fda8:	b2da      	uxtb	r2, r3
    fdaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fdae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb2:	701a      	strb	r2, [r3, #0]
    fdb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdbc:	781b      	ldrb	r3, [r3, #0]
    fdbe:	3301      	adds	r3, #1
    fdc0:	b2da      	uxtb	r2, r3
    fdc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdca:	701a      	strb	r2, [r3, #0]
    fdcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd4:	781b      	ldrb	r3, [r3, #0]
    fdd6:	2bff      	cmp	r3, #255	; 0xff
    fdd8:	d105      	bne.n	fde6 <send_radIR+0x372>
    fdda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde2:	2200      	movs	r2, #0
    fde4:	701a      	strb	r2, [r3, #0]
    fde6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdee:	781b      	ldrb	r3, [r3, #0]
    fdf0:	461a      	mov	r2, r3
    fdf2:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fdf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdfa:	7819      	ldrb	r1, [r3, #0]
    fdfc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fe00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe04:	5499      	strb	r1, [r3, r2]
    fe06:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fe0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0e:	781a      	ldrb	r2, [r3, #0]
    fe10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	4413      	add	r3, r2
    fe1c:	b2da      	uxtb	r2, r3
    fe1e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe26:	701a      	strb	r2, [r3, #0]
    fe28:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe30:	781a      	ldrb	r2, [r3, #0]
    fe32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	4413      	add	r3, r2
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	3301      	adds	r3, #1
    fe56:	b2da      	uxtb	r2, r3
    fe58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe60:	701a      	strb	r2, [r3, #0]
    fe62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6a:	781b      	ldrb	r3, [r3, #0]
    fe6c:	2bff      	cmp	r3, #255	; 0xff
    fe6e:	d105      	bne.n	fe7c <send_radIR+0x408>
    fe70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	2200      	movs	r2, #0
    fe7a:	701a      	strb	r2, [r3, #0]
    fe7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe84:	781b      	ldrb	r3, [r3, #0]
    fe86:	461a      	mov	r2, r3
    fe88:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe90:	7859      	ldrb	r1, [r3, #1]
    fe92:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fe96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9a:	5499      	strb	r1, [r3, r2]
    fe9c:	4b43      	ldr	r3, [pc, #268]	; (ffac <send_radIR+0x538>)
    fe9e:	781a      	ldrb	r2, [r3, #0]
    fea0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	781b      	ldrb	r3, [r3, #0]
    feaa:	4413      	add	r3, r2
    feac:	b2da      	uxtb	r2, r3
    feae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    feb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb6:	701a      	strb	r2, [r3, #0]
    feb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	781a      	ldrb	r2, [r3, #0]
    fec2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feca:	781b      	ldrb	r3, [r3, #0]
    fecc:	4413      	add	r3, r2
    fece:	b2da      	uxtb	r2, r3
    fed0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee2:	781b      	ldrb	r3, [r3, #0]
    fee4:	3301      	adds	r3, #1
    fee6:	b2da      	uxtb	r2, r3
    fee8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    feec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef0:	701a      	strb	r2, [r3, #0]
    fef2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefa:	781b      	ldrb	r3, [r3, #0]
    fefc:	2bff      	cmp	r3, #255	; 0xff
    fefe:	d105      	bne.n	ff0c <send_radIR+0x498>
    ff00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	2200      	movs	r2, #0
    ff0a:	701a      	strb	r2, [r3, #0]
    ff0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff14:	781b      	ldrb	r3, [r3, #0]
    ff16:	461a      	mov	r2, r3
    ff18:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    ff1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff20:	7899      	ldrb	r1, [r3, #2]
    ff22:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	5499      	strb	r1, [r3, r2]
    ff2c:	4b20      	ldr	r3, [pc, #128]	; (ffb0 <send_radIR+0x53c>)
    ff2e:	781a      	ldrb	r2, [r3, #0]
    ff30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff38:	781b      	ldrb	r3, [r3, #0]
    ff3a:	4413      	add	r3, r2
    ff3c:	b2da      	uxtb	r2, r3
    ff3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	781a      	ldrb	r2, [r3, #0]
    ff52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5a:	781b      	ldrb	r3, [r3, #0]
    ff5c:	4413      	add	r3, r2
    ff5e:	b2da      	uxtb	r2, r3
    ff60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff68:	701a      	strb	r2, [r3, #0]
    ff6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	3301      	adds	r3, #1
    ff76:	b2da      	uxtb	r2, r3
    ff78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff80:	701a      	strb	r2, [r3, #0]
    ff82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	2bff      	cmp	r3, #255	; 0xff
    ff8e:	d111      	bne.n	ffb4 <send_radIR+0x540>
    ff90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff98:	2200      	movs	r2, #0
    ff9a:	701a      	strb	r2, [r3, #0]
    ff9c:	e00a      	b.n	ffb4 <send_radIR+0x540>
    ff9e:	bf00      	nop
    ffa0:	2000b0a9 	.word	0x2000b0a9
    ffa4:	2000b0aa 	.word	0x2000b0aa
    ffa8:	2000b0ab 	.word	0x2000b0ab
    ffac:	2000b0ad 	.word	0x2000b0ad
    ffb0:	2000b0ae 	.word	0x2000b0ae
    ffb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ffb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffbc:	781b      	ldrb	r3, [r3, #0]
    ffbe:	461a      	mov	r2, r3
    ffc0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    ffc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc8:	78d9      	ldrb	r1, [r3, #3]
    ffca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ffce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd2:	5499      	strb	r1, [r3, r2]
    ffd4:	4bd3      	ldr	r3, [pc, #844]	; (10324 <send_radIR+0x8b0>)
    ffd6:	781a      	ldrb	r2, [r3, #0]
    ffd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe0:	781b      	ldrb	r3, [r3, #0]
    ffe2:	4413      	add	r3, r2
    ffe4:	b2da      	uxtb	r2, r3
    ffe6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffee:	701a      	strb	r2, [r3, #0]
    fff0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff8:	781a      	ldrb	r2, [r3, #0]
    fffa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	4413      	add	r3, r2
   10006:	b2da      	uxtb	r2, r3
   10008:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1000c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10010:	701a      	strb	r2, [r3, #0]
   10012:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1001a:	781b      	ldrb	r3, [r3, #0]
   1001c:	3301      	adds	r3, #1
   1001e:	b2da      	uxtb	r2, r3
   10020:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10028:	701a      	strb	r2, [r3, #0]
   1002a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1002e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10032:	781b      	ldrb	r3, [r3, #0]
   10034:	2bff      	cmp	r3, #255	; 0xff
   10036:	d105      	bne.n	10044 <send_radIR+0x5d0>
   10038:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1003c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10040:	2200      	movs	r2, #0
   10042:	701a      	strb	r2, [r3, #0]
   10044:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	461a      	mov	r2, r3
   10050:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10058:	7819      	ldrb	r1, [r3, #0]
   1005a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1005e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10062:	5499      	strb	r1, [r3, r2]
   10064:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1006c:	781a      	ldrb	r2, [r3, #0]
   1006e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10076:	781b      	ldrb	r3, [r3, #0]
   10078:	4413      	add	r3, r2
   1007a:	b2da      	uxtb	r2, r3
   1007c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10084:	701a      	strb	r2, [r3, #0]
   10086:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1008a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008e:	781a      	ldrb	r2, [r3, #0]
   10090:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	4413      	add	r3, r2
   1009c:	b2da      	uxtb	r2, r3
   1009e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   100a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a6:	701a      	strb	r2, [r3, #0]
   100a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	781b      	ldrb	r3, [r3, #0]
   100b2:	3301      	adds	r3, #1
   100b4:	b2da      	uxtb	r2, r3
   100b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100be:	701a      	strb	r2, [r3, #0]
   100c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c8:	781b      	ldrb	r3, [r3, #0]
   100ca:	2bff      	cmp	r3, #255	; 0xff
   100cc:	d105      	bne.n	100da <send_radIR+0x666>
   100ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d6:	2200      	movs	r2, #0
   100d8:	701a      	strb	r2, [r3, #0]
   100da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e2:	781b      	ldrb	r3, [r3, #0]
   100e4:	461a      	mov	r2, r3
   100e6:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   100ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ee:	7859      	ldrb	r1, [r3, #1]
   100f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	5499      	strb	r1, [r3, r2]
   100fa:	4b8b      	ldr	r3, [pc, #556]	; (10328 <send_radIR+0x8b4>)
   100fc:	781a      	ldrb	r2, [r3, #0]
   100fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10106:	781b      	ldrb	r3, [r3, #0]
   10108:	4413      	add	r3, r2
   1010a:	b2da      	uxtb	r2, r3
   1010c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10114:	701a      	strb	r2, [r3, #0]
   10116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1011a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011e:	781a      	ldrb	r2, [r3, #0]
   10120:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10128:	781b      	ldrb	r3, [r3, #0]
   1012a:	4413      	add	r3, r2
   1012c:	b2da      	uxtb	r2, r3
   1012e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10136:	701a      	strb	r2, [r3, #0]
   10138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	3301      	adds	r3, #1
   10144:	b2da      	uxtb	r2, r3
   10146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1014a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014e:	701a      	strb	r2, [r3, #0]
   10150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10158:	781b      	ldrb	r3, [r3, #0]
   1015a:	2bff      	cmp	r3, #255	; 0xff
   1015c:	d105      	bne.n	1016a <send_radIR+0x6f6>
   1015e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10166:	2200      	movs	r2, #0
   10168:	701a      	strb	r2, [r3, #0]
   1016a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1016e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10172:	781b      	ldrb	r3, [r3, #0]
   10174:	461a      	mov	r2, r3
   10176:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   1017a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017e:	7899      	ldrb	r1, [r3, #2]
   10180:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10188:	5499      	strb	r1, [r3, r2]
   1018a:	4b68      	ldr	r3, [pc, #416]	; (1032c <send_radIR+0x8b8>)
   1018c:	781a      	ldrb	r2, [r3, #0]
   1018e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10196:	781b      	ldrb	r3, [r3, #0]
   10198:	4413      	add	r3, r2
   1019a:	b2da      	uxtb	r2, r3
   1019c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   101a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a4:	701a      	strb	r2, [r3, #0]
   101a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   101aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ae:	781a      	ldrb	r2, [r3, #0]
   101b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   101b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	4413      	add	r3, r2
   101bc:	b2da      	uxtb	r2, r3
   101be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   101c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c6:	701a      	strb	r2, [r3, #0]
   101c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d0:	781b      	ldrb	r3, [r3, #0]
   101d2:	3301      	adds	r3, #1
   101d4:	b2da      	uxtb	r2, r3
   101d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101de:	701a      	strb	r2, [r3, #0]
   101e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e8:	781b      	ldrb	r3, [r3, #0]
   101ea:	2bff      	cmp	r3, #255	; 0xff
   101ec:	d105      	bne.n	101fa <send_radIR+0x786>
   101ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f6:	2200      	movs	r2, #0
   101f8:	701a      	strb	r2, [r3, #0]
   101fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10202:	781b      	ldrb	r3, [r3, #0]
   10204:	461a      	mov	r2, r3
   10206:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   1020a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1020e:	78d9      	ldrb	r1, [r3, #3]
   10210:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10218:	5499      	strb	r1, [r3, r2]
   1021a:	4b45      	ldr	r3, [pc, #276]	; (10330 <send_radIR+0x8bc>)
   1021c:	781a      	ldrb	r2, [r3, #0]
   1021e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10226:	781b      	ldrb	r3, [r3, #0]
   10228:	4413      	add	r3, r2
   1022a:	b2da      	uxtb	r2, r3
   1022c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10234:	701a      	strb	r2, [r3, #0]
   10236:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1023a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1023e:	781a      	ldrb	r2, [r3, #0]
   10240:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10248:	781b      	ldrb	r3, [r3, #0]
   1024a:	4413      	add	r3, r2
   1024c:	b2da      	uxtb	r2, r3
   1024e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10256:	701a      	strb	r2, [r3, #0]
   10258:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1025c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10260:	781b      	ldrb	r3, [r3, #0]
   10262:	3301      	adds	r3, #1
   10264:	b2da      	uxtb	r2, r3
   10266:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1026a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1026e:	701a      	strb	r2, [r3, #0]
   10270:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10278:	781b      	ldrb	r3, [r3, #0]
   1027a:	2bff      	cmp	r3, #255	; 0xff
   1027c:	d105      	bne.n	1028a <send_radIR+0x816>
   1027e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10286:	2200      	movs	r2, #0
   10288:	701a      	strb	r2, [r3, #0]
   1028a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1028e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10292:	781b      	ldrb	r3, [r3, #0]
   10294:	461a      	mov	r2, r3
   10296:	f240 2386 	movw	r3, #646	; 0x286
   1029a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1029e:	7819      	ldrb	r1, [r3, #0]
   102a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   102a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a8:	5499      	strb	r1, [r3, r2]
   102aa:	f240 2386 	movw	r3, #646	; 0x286
   102ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b2:	781a      	ldrb	r2, [r3, #0]
   102b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	4413      	add	r3, r2
   102c0:	b2da      	uxtb	r2, r3
   102c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ca:	701a      	strb	r2, [r3, #0]
   102cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   102d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d4:	781a      	ldrb	r2, [r3, #0]
   102d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	4413      	add	r3, r2
   102e2:	b2da      	uxtb	r2, r3
   102e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   102e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ec:	701a      	strb	r2, [r3, #0]
   102ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f6:	781b      	ldrb	r3, [r3, #0]
   102f8:	3301      	adds	r3, #1
   102fa:	b2da      	uxtb	r2, r3
   102fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10304:	701a      	strb	r2, [r3, #0]
   10306:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	2bff      	cmp	r3, #255	; 0xff
   10312:	d10f      	bne.n	10334 <send_radIR+0x8c0>
   10314:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1031c:	2200      	movs	r2, #0
   1031e:	701a      	strb	r2, [r3, #0]
   10320:	e008      	b.n	10334 <send_radIR+0x8c0>
   10322:	bf00      	nop
   10324:	2000b0af 	.word	0x2000b0af
   10328:	2000b0a5 	.word	0x2000b0a5
   1032c:	2000b0a6 	.word	0x2000b0a6
   10330:	2000b0a7 	.word	0x2000b0a7
   10334:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1033c:	781b      	ldrb	r3, [r3, #0]
   1033e:	461a      	mov	r2, r3
   10340:	f240 2386 	movw	r3, #646	; 0x286
   10344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10348:	7859      	ldrb	r1, [r3, #1]
   1034a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1034e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10352:	5499      	strb	r1, [r3, r2]
   10354:	4bc2      	ldr	r3, [pc, #776]	; (10660 <send_radIR+0xbec>)
   10356:	781a      	ldrb	r2, [r3, #0]
   10358:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10360:	781b      	ldrb	r3, [r3, #0]
   10362:	4413      	add	r3, r2
   10364:	b2da      	uxtb	r2, r3
   10366:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1036a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036e:	701a      	strb	r2, [r3, #0]
   10370:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10378:	781a      	ldrb	r2, [r3, #0]
   1037a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10382:	781b      	ldrb	r3, [r3, #0]
   10384:	4413      	add	r3, r2
   10386:	b2da      	uxtb	r2, r3
   10388:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1038c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10390:	701a      	strb	r2, [r3, #0]
   10392:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1039a:	781b      	ldrb	r3, [r3, #0]
   1039c:	3301      	adds	r3, #1
   1039e:	b2da      	uxtb	r2, r3
   103a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a8:	701a      	strb	r2, [r3, #0]
   103aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b2:	781b      	ldrb	r3, [r3, #0]
   103b4:	2bff      	cmp	r3, #255	; 0xff
   103b6:	d105      	bne.n	103c4 <send_radIR+0x950>
   103b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c0:	2200      	movs	r2, #0
   103c2:	701a      	strb	r2, [r3, #0]
   103c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103cc:	781b      	ldrb	r3, [r3, #0]
   103ce:	461a      	mov	r2, r3
   103d0:	f240 2388 	movw	r3, #648	; 0x288
   103d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d8:	7819      	ldrb	r1, [r3, #0]
   103da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   103de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e2:	5499      	strb	r1, [r3, r2]
   103e4:	f240 2388 	movw	r3, #648	; 0x288
   103e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ec:	781a      	ldrb	r2, [r3, #0]
   103ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f6:	781b      	ldrb	r3, [r3, #0]
   103f8:	4413      	add	r3, r2
   103fa:	b2da      	uxtb	r2, r3
   103fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10404:	701a      	strb	r2, [r3, #0]
   10406:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1040a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040e:	781a      	ldrb	r2, [r3, #0]
   10410:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	4413      	add	r3, r2
   1041c:	b2da      	uxtb	r2, r3
   1041e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10426:	701a      	strb	r2, [r3, #0]
   10428:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10430:	781b      	ldrb	r3, [r3, #0]
   10432:	3301      	adds	r3, #1
   10434:	b2da      	uxtb	r2, r3
   10436:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1043a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043e:	701a      	strb	r2, [r3, #0]
   10440:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10448:	781b      	ldrb	r3, [r3, #0]
   1044a:	2bff      	cmp	r3, #255	; 0xff
   1044c:	d105      	bne.n	1045a <send_radIR+0x9e6>
   1044e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10456:	2200      	movs	r2, #0
   10458:	701a      	strb	r2, [r3, #0]
   1045a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1045e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10462:	781b      	ldrb	r3, [r3, #0]
   10464:	461a      	mov	r2, r3
   10466:	f240 2388 	movw	r3, #648	; 0x288
   1046a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046e:	7859      	ldrb	r1, [r3, #1]
   10470:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10478:	5499      	strb	r1, [r3, r2]
   1047a:	4b7a      	ldr	r3, [pc, #488]	; (10664 <send_radIR+0xbf0>)
   1047c:	781a      	ldrb	r2, [r3, #0]
   1047e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10486:	781b      	ldrb	r3, [r3, #0]
   10488:	4413      	add	r3, r2
   1048a:	b2da      	uxtb	r2, r3
   1048c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10494:	701a      	strb	r2, [r3, #0]
   10496:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1049a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1049e:	781a      	ldrb	r2, [r3, #0]
   104a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   104a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a8:	781b      	ldrb	r3, [r3, #0]
   104aa:	4413      	add	r3, r2
   104ac:	b2da      	uxtb	r2, r3
   104ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   104b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b6:	701a      	strb	r2, [r3, #0]
   104b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c0:	781b      	ldrb	r3, [r3, #0]
   104c2:	3301      	adds	r3, #1
   104c4:	b2da      	uxtb	r2, r3
   104c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ce:	701a      	strb	r2, [r3, #0]
   104d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d8:	781b      	ldrb	r3, [r3, #0]
   104da:	2bff      	cmp	r3, #255	; 0xff
   104dc:	d105      	bne.n	104ea <send_radIR+0xa76>
   104de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e6:	2200      	movs	r2, #0
   104e8:	701a      	strb	r2, [r3, #0]
   104ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	461a      	mov	r2, r3
   104f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   104fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104fe:	7819      	ldrb	r1, [r3, #0]
   10500:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10508:	5499      	strb	r1, [r3, r2]
   1050a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1050e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10512:	781b      	ldrb	r3, [r3, #0]
   10514:	3301      	adds	r3, #1
   10516:	b2da      	uxtb	r2, r3
   10518:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1051c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10520:	701a      	strb	r2, [r3, #0]
   10522:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	2bff      	cmp	r3, #255	; 0xff
   1052e:	d105      	bne.n	1053c <send_radIR+0xac8>
   10530:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10538:	2200      	movs	r2, #0
   1053a:	701a      	strb	r2, [r3, #0]
   1053c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10544:	781b      	ldrb	r3, [r3, #0]
   10546:	461a      	mov	r2, r3
   10548:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1054c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10550:	7819      	ldrb	r1, [r3, #0]
   10552:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055a:	5499      	strb	r1, [r3, r2]
   1055c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10564:	781b      	ldrb	r3, [r3, #0]
   10566:	3301      	adds	r3, #1
   10568:	b2da      	uxtb	r2, r3
   1056a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10572:	701a      	strb	r2, [r3, #0]
   10574:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057c:	781b      	ldrb	r3, [r3, #0]
   1057e:	2bff      	cmp	r3, #255	; 0xff
   10580:	d105      	bne.n	1058e <send_radIR+0xb1a>
   10582:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1058a:	2200      	movs	r2, #0
   1058c:	701a      	strb	r2, [r3, #0]
   1058e:	f242 0339 	movw	r3, #8249	; 0x2039
   10592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10596:	781b      	ldrb	r3, [r3, #0]
   10598:	b2db      	uxtb	r3, r3
   1059a:	f003 0310 	and.w	r3, r3, #16
   1059e:	2b00      	cmp	r3, #0
   105a0:	d15a      	bne.n	10658 <send_radIR+0xbe4>
   105a2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	b2db      	uxtb	r3, r3
   105ae:	461a      	mov	r2, r3
   105b0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   105b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b8:	5c9a      	ldrb	r2, [r3, r2]
   105ba:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   105be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c2:	701a      	strb	r2, [r3, #0]
   105c4:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   105c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105cc:	2200      	movs	r2, #0
   105ce:	701a      	strb	r2, [r3, #0]
   105d0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	b2db      	uxtb	r3, r3
   105dc:	3301      	adds	r3, #1
   105de:	b2da      	uxtb	r2, r3
   105e0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e8:	701a      	strb	r2, [r3, #0]
   105ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f2:	781b      	ldrb	r3, [r3, #0]
   105f4:	b2db      	uxtb	r3, r3
   105f6:	2bff      	cmp	r3, #255	; 0xff
   105f8:	d105      	bne.n	10606 <send_radIR+0xb92>
   105fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10602:	2200      	movs	r2, #0
   10604:	701a      	strb	r2, [r3, #0]
   10606:	f242 0338 	movw	r3, #8248	; 0x2038
   1060a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1060e:	f242 0238 	movw	r2, #8248	; 0x2038
   10612:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10616:	7812      	ldrb	r2, [r2, #0]
   10618:	b2d2      	uxtb	r2, r2
   1061a:	f042 0201 	orr.w	r2, r2, #1
   1061e:	b2d2      	uxtb	r2, r2
   10620:	701a      	strb	r2, [r3, #0]
   10622:	f242 0339 	movw	r3, #8249	; 0x2039
   10626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062a:	f242 0239 	movw	r2, #8249	; 0x2039
   1062e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10632:	7812      	ldrb	r2, [r2, #0]
   10634:	b2d2      	uxtb	r2, r2
   10636:	f042 0210 	orr.w	r2, r2, #16
   1063a:	b2d2      	uxtb	r2, r2
   1063c:	701a      	strb	r2, [r3, #0]
   1063e:	e00b      	b.n	10658 <send_radIR+0xbe4>
   10640:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	3301      	adds	r3, #1
   1064c:	b2da      	uxtb	r2, r3
   1064e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10656:	701a      	strb	r2, [r3, #0]
}
   10658:	46bd      	mov	sp, r7
   1065a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1065e:	4770      	bx	lr
   10660:	20000287 	.word	0x20000287
   10664:	20000289 	.word	0x20000289

00010668 <send_takeOff>:

void send_takeOff(void){
   10668:	b580      	push	{r7, lr}
   1066a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   1066c:	f64a 4346 	movw	r3, #44102	; 0xac46
   10670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	2b00      	cmp	r3, #0
   10678:	f000 8200 	beq.w	10a7c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   1067c:	f24b 0394 	movw	r3, #45204	; 0xb094
   10680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10684:	881b      	ldrh	r3, [r3, #0]
   10686:	2b00      	cmp	r3, #0
   10688:	f040 81f2 	bne.w	10a70 <send_takeOff+0x408>
   1068c:	f24b 039c 	movw	r3, #45212	; 0xb09c
   10690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10694:	681b      	ldr	r3, [r3, #0]
   10696:	4618      	mov	r0, r3
   10698:	f04f 0100 	mov.w	r1, #0
   1069c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   106a0:	f007 ffde 	bl	18660 <__aeabi_fcmpgt>
   106a4:	4603      	mov	r3, r0
   106a6:	2b00      	cmp	r3, #0
   106a8:	f000 81e2 	beq.w	10a70 <send_takeOff+0x408>
        estimator_flight_time = 1;
   106ac:	f24b 0394 	movw	r3, #45204	; 0xb094
   106b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b4:	2201      	movs	r2, #1
   106b6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   106b8:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   106bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c0:	2201      	movs	r2, #1
   106c2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   106c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106cc:	781a      	ldrb	r2, [r3, #0]
   106ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   106d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d6:	781b      	ldrb	r3, [r3, #0]
   106d8:	b2db      	uxtb	r3, r3
   106da:	429a      	cmp	r2, r3
   106dc:	d313      	bcc.n	10706 <send_takeOff+0x9e>
   106de:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   106e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e6:	781b      	ldrb	r3, [r3, #0]
   106e8:	b2db      	uxtb	r3, r3
   106ea:	461a      	mov	r2, r3
   106ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f4:	781b      	ldrb	r3, [r3, #0]
   106f6:	1ad3      	subs	r3, r2, r3
   106f8:	33ff      	adds	r3, #255	; 0xff
   106fa:	2b06      	cmp	r3, #6
   106fc:	bfd4      	ite	le
   106fe:	2300      	movle	r3, #0
   10700:	2301      	movgt	r3, #1
   10702:	b2db      	uxtb	r3, r3
   10704:	e011      	b.n	1072a <send_takeOff+0xc2>
   10706:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1070a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070e:	781b      	ldrb	r3, [r3, #0]
   10710:	b2db      	uxtb	r3, r3
   10712:	461a      	mov	r2, r3
   10714:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1071c:	781b      	ldrb	r3, [r3, #0]
   1071e:	1ad3      	subs	r3, r2, r3
   10720:	2b06      	cmp	r3, #6
   10722:	bfd4      	ite	le
   10724:	2300      	movle	r3, #0
   10726:	2301      	movgt	r3, #1
   10728:	b2db      	uxtb	r3, r3
   1072a:	2b00      	cmp	r3, #0
   1072c:	f000 8194 	beq.w	10a58 <send_takeOff+0x3f0>
   10730:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	461a      	mov	r2, r3
   1073c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10744:	2105      	movs	r1, #5
   10746:	5499      	strb	r1, [r3, r2]
   10748:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1074c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	3301      	adds	r3, #1
   10754:	b2da      	uxtb	r2, r3
   10756:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1075e:	701a      	strb	r2, [r3, #0]
   10760:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	2bff      	cmp	r3, #255	; 0xff
   1076c:	d105      	bne.n	1077a <send_takeOff+0x112>
   1076e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10776:	2200      	movs	r2, #0
   10778:	701a      	strb	r2, [r3, #0]
   1077a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1077e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	461a      	mov	r2, r3
   10786:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1078a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1078e:	2104      	movs	r1, #4
   10790:	5499      	strb	r1, [r3, r2]
   10792:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079a:	781b      	ldrb	r3, [r3, #0]
   1079c:	3301      	adds	r3, #1
   1079e:	b2da      	uxtb	r2, r3
   107a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a8:	701a      	strb	r2, [r3, #0]
   107aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b2:	781b      	ldrb	r3, [r3, #0]
   107b4:	2bff      	cmp	r3, #255	; 0xff
   107b6:	d105      	bne.n	107c4 <send_takeOff+0x15c>
   107b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c0:	2200      	movs	r2, #0
   107c2:	701a      	strb	r2, [r3, #0]
   107c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   107c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107cc:	2204      	movs	r2, #4
   107ce:	701a      	strb	r2, [r3, #0]
   107d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   107d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d8:	2204      	movs	r2, #4
   107da:	701a      	strb	r2, [r3, #0]
   107dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e4:	781b      	ldrb	r3, [r3, #0]
   107e6:	461a      	mov	r2, r3
   107e8:	f64a 2392 	movw	r3, #43666	; 0xaa92
   107ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f0:	7819      	ldrb	r1, [r3, #0]
   107f2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   107f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107fa:	5499      	strb	r1, [r3, r2]
   107fc:	f64a 2392 	movw	r3, #43666	; 0xaa92
   10800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10804:	781a      	ldrb	r2, [r3, #0]
   10806:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1080a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080e:	781b      	ldrb	r3, [r3, #0]
   10810:	4413      	add	r3, r2
   10812:	b2da      	uxtb	r2, r3
   10814:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1081c:	701a      	strb	r2, [r3, #0]
   1081e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10826:	781a      	ldrb	r2, [r3, #0]
   10828:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1082c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10830:	781b      	ldrb	r3, [r3, #0]
   10832:	4413      	add	r3, r2
   10834:	b2da      	uxtb	r2, r3
   10836:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1083a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083e:	701a      	strb	r2, [r3, #0]
   10840:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10848:	781b      	ldrb	r3, [r3, #0]
   1084a:	3301      	adds	r3, #1
   1084c:	b2da      	uxtb	r2, r3
   1084e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10856:	701a      	strb	r2, [r3, #0]
   10858:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1085c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	2bff      	cmp	r3, #255	; 0xff
   10864:	d105      	bne.n	10872 <send_takeOff+0x20a>
   10866:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086e:	2200      	movs	r2, #0
   10870:	701a      	strb	r2, [r3, #0]
   10872:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1087a:	781b      	ldrb	r3, [r3, #0]
   1087c:	461a      	mov	r2, r3
   1087e:	f64a 2392 	movw	r3, #43666	; 0xaa92
   10882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10886:	7859      	ldrb	r1, [r3, #1]
   10888:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10890:	5499      	strb	r1, [r3, r2]
   10892:	4b7b      	ldr	r3, [pc, #492]	; (10a80 <send_takeOff+0x418>)
   10894:	781a      	ldrb	r2, [r3, #0]
   10896:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1089a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089e:	781b      	ldrb	r3, [r3, #0]
   108a0:	4413      	add	r3, r2
   108a2:	b2da      	uxtb	r2, r3
   108a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   108a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ac:	701a      	strb	r2, [r3, #0]
   108ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   108b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b6:	781a      	ldrb	r2, [r3, #0]
   108b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   108bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	4413      	add	r3, r2
   108c4:	b2da      	uxtb	r2, r3
   108c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   108ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ce:	701a      	strb	r2, [r3, #0]
   108d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d8:	781b      	ldrb	r3, [r3, #0]
   108da:	3301      	adds	r3, #1
   108dc:	b2da      	uxtb	r2, r3
   108de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e6:	701a      	strb	r2, [r3, #0]
   108e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f0:	781b      	ldrb	r3, [r3, #0]
   108f2:	2bff      	cmp	r3, #255	; 0xff
   108f4:	d105      	bne.n	10902 <send_takeOff+0x29a>
   108f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108fe:	2200      	movs	r2, #0
   10900:	701a      	strb	r2, [r3, #0]
   10902:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10906:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1090a:	781b      	ldrb	r3, [r3, #0]
   1090c:	461a      	mov	r2, r3
   1090e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10916:	7819      	ldrb	r1, [r3, #0]
   10918:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1091c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10920:	5499      	strb	r1, [r3, r2]
   10922:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1092a:	781b      	ldrb	r3, [r3, #0]
   1092c:	3301      	adds	r3, #1
   1092e:	b2da      	uxtb	r2, r3
   10930:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10938:	701a      	strb	r2, [r3, #0]
   1093a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1093e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10942:	781b      	ldrb	r3, [r3, #0]
   10944:	2bff      	cmp	r3, #255	; 0xff
   10946:	d105      	bne.n	10954 <send_takeOff+0x2ec>
   10948:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1094c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10950:	2200      	movs	r2, #0
   10952:	701a      	strb	r2, [r3, #0]
   10954:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095c:	781b      	ldrb	r3, [r3, #0]
   1095e:	461a      	mov	r2, r3
   10960:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10968:	7819      	ldrb	r1, [r3, #0]
   1096a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10972:	5499      	strb	r1, [r3, r2]
   10974:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	3301      	adds	r3, #1
   10980:	b2da      	uxtb	r2, r3
   10982:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098a:	701a      	strb	r2, [r3, #0]
   1098c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10994:	781b      	ldrb	r3, [r3, #0]
   10996:	2bff      	cmp	r3, #255	; 0xff
   10998:	d105      	bne.n	109a6 <send_takeOff+0x33e>
   1099a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1099e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a2:	2200      	movs	r2, #0
   109a4:	701a      	strb	r2, [r3, #0]
   109a6:	f242 0339 	movw	r3, #8249	; 0x2039
   109aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	b2db      	uxtb	r3, r3
   109b2:	f003 0310 	and.w	r3, r3, #16
   109b6:	2b00      	cmp	r3, #0
   109b8:	d15a      	bne.n	10a70 <send_takeOff+0x408>
   109ba:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	b2db      	uxtb	r3, r3
   109c6:	461a      	mov	r2, r3
   109c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   109cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d0:	5c9a      	ldrb	r2, [r3, r2]
   109d2:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   109d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109da:	701a      	strb	r2, [r3, #0]
   109dc:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   109e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e4:	2200      	movs	r2, #0
   109e6:	701a      	strb	r2, [r3, #0]
   109e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f0:	781b      	ldrb	r3, [r3, #0]
   109f2:	b2db      	uxtb	r3, r3
   109f4:	3301      	adds	r3, #1
   109f6:	b2da      	uxtb	r2, r3
   109f8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a00:	701a      	strb	r2, [r3, #0]
   10a02:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a0a:	781b      	ldrb	r3, [r3, #0]
   10a0c:	b2db      	uxtb	r3, r3
   10a0e:	2bff      	cmp	r3, #255	; 0xff
   10a10:	d105      	bne.n	10a1e <send_takeOff+0x3b6>
   10a12:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a1a:	2200      	movs	r2, #0
   10a1c:	701a      	strb	r2, [r3, #0]
   10a1e:	f242 0338 	movw	r3, #8248	; 0x2038
   10a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a26:	f242 0238 	movw	r2, #8248	; 0x2038
   10a2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a2e:	7812      	ldrb	r2, [r2, #0]
   10a30:	b2d2      	uxtb	r2, r2
   10a32:	f042 0201 	orr.w	r2, r2, #1
   10a36:	b2d2      	uxtb	r2, r2
   10a38:	701a      	strb	r2, [r3, #0]
   10a3a:	f242 0339 	movw	r3, #8249	; 0x2039
   10a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a42:	f242 0239 	movw	r2, #8249	; 0x2039
   10a46:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a4a:	7812      	ldrb	r2, [r2, #0]
   10a4c:	b2d2      	uxtb	r2, r2
   10a4e:	f042 0210 	orr.w	r2, r2, #16
   10a52:	b2d2      	uxtb	r2, r2
   10a54:	701a      	strb	r2, [r3, #0]
   10a56:	e00b      	b.n	10a70 <send_takeOff+0x408>
   10a58:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a60:	781b      	ldrb	r3, [r3, #0]
   10a62:	3301      	adds	r3, #1
   10a64:	b2da      	uxtb	r2, r3
   10a66:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10a70:	f64a 4346 	movw	r3, #44102	; 0xac46
   10a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a78:	2200      	movs	r2, #0
   10a7a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	bf00      	nop
   10a80:	2000aa93 	.word	0x2000aa93
   10a84:	f3af 8000 	nop.w

00010a88 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10a88:	b480      	push	{r7}
   10a8a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10a8c:	f242 0317 	movw	r3, #8215	; 0x2017
   10a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a94:	f242 0217 	movw	r2, #8215	; 0x2017
   10a98:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a9c:	7812      	ldrb	r2, [r2, #0]
   10a9e:	b2d2      	uxtb	r2, r2
   10aa0:	f042 0210 	orr.w	r2, r2, #16
   10aa4:	b2d2      	uxtb	r2, r2
   10aa6:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10aa8:	f242 0331 	movw	r3, #8241	; 0x2031
   10aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab0:	2201      	movs	r2, #1
   10ab2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10ab4:	f242 0333 	movw	r3, #8243	; 0x2033
   10ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abc:	2219      	movs	r2, #25
   10abe:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10ac0:	f242 0311 	movw	r3, #8209	; 0x2011
   10ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac8:	f242 0211 	movw	r2, #8209	; 0x2011
   10acc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ad0:	7812      	ldrb	r2, [r2, #0]
   10ad2:	b2d2      	uxtb	r2, r2
   10ad4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10ad8:	b2d2      	uxtb	r2, r2
   10ada:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10adc:	f242 0312 	movw	r3, #8210	; 0x2012
   10ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae4:	f242 0212 	movw	r2, #8210	; 0x2012
   10ae8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10aec:	7812      	ldrb	r2, [r2, #0]
   10aee:	b2d2      	uxtb	r2, r2
   10af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10af4:	b2d2      	uxtb	r2, r2
   10af6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10af8:	f242 0312 	movw	r3, #8210	; 0x2012
   10afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b00:	f242 0212 	movw	r2, #8210	; 0x2012
   10b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b08:	7812      	ldrb	r2, [r2, #0]
   10b0a:	b2d2      	uxtb	r2, r2
   10b0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10b10:	b2d2      	uxtb	r2, r2
   10b12:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10b14:	f242 033a 	movw	r3, #8250	; 0x203a
   10b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1c:	f242 023a 	movw	r2, #8250	; 0x203a
   10b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b24:	7812      	ldrb	r2, [r2, #0]
   10b26:	b2d2      	uxtb	r2, r2
   10b28:	f042 0202 	orr.w	r2, r2, #2
   10b2c:	b2d2      	uxtb	r2, r2
   10b2e:	701a      	strb	r2, [r3, #0]
}
   10b30:	46bd      	mov	sp, r7
   10b32:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b36:	4770      	bx	lr

00010b38 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10b38:	b480      	push	{r7}
   10b3a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10b3c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	2b00      	cmp	r3, #0
   10b48:	d10e      	bne.n	10b68 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b4a:	f242 0312 	movw	r3, #8210	; 0x2012
   10b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b52:	f242 0212 	movw	r2, #8210	; 0x2012
   10b56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b5a:	7812      	ldrb	r2, [r2, #0]
   10b5c:	b2d2      	uxtb	r2, r2
   10b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10b62:	b2d2      	uxtb	r2, r2
   10b64:	701a      	strb	r2, [r3, #0]
   10b66:	e047      	b.n	10bf8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10b68:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b70:	781b      	ldrb	r3, [r3, #0]
   10b72:	2b08      	cmp	r3, #8
   10b74:	d832      	bhi.n	10bdc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10b76:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	f003 0301 	and.w	r3, r3, #1
   10b84:	2b00      	cmp	r3, #0
   10b86:	d00e      	beq.n	10ba6 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b88:	f242 0312 	movw	r3, #8210	; 0x2012
   10b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b90:	f242 0212 	movw	r2, #8210	; 0x2012
   10b94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b98:	7812      	ldrb	r2, [r2, #0]
   10b9a:	b2d2      	uxtb	r2, r2
   10b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ba0:	b2d2      	uxtb	r2, r2
   10ba2:	701a      	strb	r2, [r3, #0]
   10ba4:	e00d      	b.n	10bc2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10ba6:	f242 0312 	movw	r3, #8210	; 0x2012
   10baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bae:	f242 0212 	movw	r2, #8210	; 0x2012
   10bb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bb6:	7812      	ldrb	r2, [r2, #0]
   10bb8:	b2d2      	uxtb	r2, r2
   10bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10bbe:	b2d2      	uxtb	r2, r2
   10bc0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10bc2:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bca:	781b      	ldrb	r3, [r3, #0]
   10bcc:	085b      	lsrs	r3, r3, #1
   10bce:	b2da      	uxtb	r2, r3
   10bd0:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd8:	701a      	strb	r2, [r3, #0]
   10bda:	e00d      	b.n	10bf8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10bdc:	f242 0312 	movw	r3, #8210	; 0x2012
   10be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be4:	f242 0212 	movw	r2, #8210	; 0x2012
   10be8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bec:	7812      	ldrb	r2, [r2, #0]
   10bee:	b2d2      	uxtb	r2, r2
   10bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10bf4:	b2d2      	uxtb	r2, r2
   10bf6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10bf8:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	3301      	adds	r3, #1
   10c04:	b2da      	uxtb	r2, r3
   10c06:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10c10:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c18:	781b      	ldrb	r3, [r3, #0]
   10c1a:	2b09      	cmp	r3, #9
   10c1c:	d94d      	bls.n	10cba <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10c1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c26:	781a      	ldrb	r2, [r3, #0]
   10c28:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c30:	781b      	ldrb	r3, [r3, #0]
   10c32:	b2db      	uxtb	r3, r3
   10c34:	429a      	cmp	r2, r3
   10c36:	d10e      	bne.n	10c56 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10c38:	f242 0339 	movw	r3, #8249	; 0x2039
   10c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c40:	f242 0239 	movw	r2, #8249	; 0x2039
   10c44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c48:	7812      	ldrb	r2, [r2, #0]
   10c4a:	b2d2      	uxtb	r2, r2
   10c4c:	f022 0210 	bic.w	r2, r2, #16
   10c50:	b2d2      	uxtb	r2, r2
   10c52:	701a      	strb	r2, [r3, #0]
   10c54:	e031      	b.n	10cba <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10c56:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c5e:	781b      	ldrb	r3, [r3, #0]
   10c60:	b2db      	uxtb	r3, r3
   10c62:	461a      	mov	r2, r3
   10c64:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6c:	5c9a      	ldrb	r2, [r3, r2]
   10c6e:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c76:	701a      	strb	r2, [r3, #0]
   10c78:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c80:	2200      	movs	r2, #0
   10c82:	701a      	strb	r2, [r3, #0]
   10c84:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c8c:	781b      	ldrb	r3, [r3, #0]
   10c8e:	b2db      	uxtb	r3, r3
   10c90:	3301      	adds	r3, #1
   10c92:	b2da      	uxtb	r2, r3
   10c94:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c9c:	701a      	strb	r2, [r3, #0]
   10c9e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca6:	781b      	ldrb	r3, [r3, #0]
   10ca8:	b2db      	uxtb	r3, r3
   10caa:	2bff      	cmp	r3, #255	; 0xff
   10cac:	d105      	bne.n	10cba <__vector_5+0x182>
   10cae:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb6:	2200      	movs	r2, #0
   10cb8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10cba:	46bd      	mov	sp, r7
   10cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cc0:	4770      	bx	lr
   10cc2:	bf00      	nop

00010cc4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10cc4:	b480      	push	{r7}
   10cc6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10cc8:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10cd2:	f240 2382 	movw	r3, #642	; 0x282
   10cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cda:	2200      	movs	r2, #0
   10cdc:	701a      	strb	r2, [r3, #0]
}
   10cde:	46bd      	mov	sp, r7
   10ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ce4:	4770      	bx	lr
   10ce6:	bf00      	nop

00010ce8 <link_fbw_send>:

void link_fbw_send(void) {
   10ce8:	b480      	push	{r7}
   10cea:	b083      	sub	sp, #12
   10cec:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10cee:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf6:	781b      	ldrb	r3, [r3, #0]
   10cf8:	b2db      	uxtb	r3, r3
   10cfa:	2b00      	cmp	r3, #0
   10cfc:	d00c      	beq.n	10d18 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10cfe:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	3301      	adds	r3, #1
   10d0a:	b2da      	uxtb	r2, r3
   10d0c:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d14:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10d16:	e064      	b.n	10de2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10d18:	f242 030d 	movw	r3, #8205	; 0x200d
   10d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d20:	2251      	movs	r2, #81	; 0x51
   10d22:	701a      	strb	r2, [r3, #0]
   10d24:	f242 030e 	movw	r3, #8206	; 0x200e
   10d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	b2db      	uxtb	r3, r3
   10d30:	b2db      	uxtb	r3, r3
   10d32:	b25b      	sxtb	r3, r3
   10d34:	2b00      	cmp	r3, #0
   10d36:	da05      	bge.n	10d44 <link_fbw_send+0x5c>
   10d38:	f242 030f 	movw	r3, #8207	; 0x200f
   10d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d40:	781b      	ldrb	r3, [r3, #0]
   10d42:	71fb      	strb	r3, [r7, #7]
   10d44:	f242 030d 	movw	r3, #8205	; 0x200d
   10d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d4c:	f242 020d 	movw	r2, #8205	; 0x200d
   10d50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d54:	7812      	ldrb	r2, [r2, #0]
   10d56:	b2d2      	uxtb	r2, r2
   10d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10d5c:	b2d2      	uxtb	r2, r2
   10d5e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10d60:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d68:	2201      	movs	r2, #1
   10d6a:	701a      	strb	r2, [r3, #0]
   10d6c:	f242 0318 	movw	r3, #8216	; 0x2018
   10d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d74:	f242 0218 	movw	r2, #8216	; 0x2018
   10d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d7c:	7812      	ldrb	r2, [r2, #0]
   10d7e:	b2d2      	uxtb	r2, r2
   10d80:	f022 0201 	bic.w	r2, r2, #1
   10d84:	b2d2      	uxtb	r2, r2
   10d86:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10d88:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d90:	2200      	movs	r2, #0
   10d92:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10d94:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d9c:	2200      	movs	r2, #0
   10d9e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10da0:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da8:	781b      	ldrb	r3, [r3, #0]
   10daa:	461a      	mov	r2, r3
   10dac:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db4:	4413      	add	r3, r2
   10db6:	781a      	ldrb	r2, [r3, #0]
   10db8:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dc0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10dc2:	f242 030f 	movw	r3, #8207	; 0x200f
   10dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dca:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10dce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dd2:	7812      	ldrb	r2, [r2, #0]
   10dd4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10dd6:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dde:	2200      	movs	r2, #0
   10de0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10de2:	370c      	adds	r7, #12
   10de4:	46bd      	mov	sp, r7
   10de6:	f85d 7b04 	ldr.w	r7, [sp], #4
   10dea:	4770      	bx	lr

00010dec <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10dec:	b480      	push	{r7}
   10dee:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10df0:	f242 032a 	movw	r3, #8234	; 0x202a
   10df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df8:	f242 022c 	movw	r2, #8236	; 0x202c
   10dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e00:	8812      	ldrh	r2, [r2, #0]
   10e02:	b292      	uxth	r2, r2
   10e04:	32c8      	adds	r2, #200	; 0xc8
   10e06:	b292      	uxth	r2, r2
   10e08:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10e0a:	f242 0336 	movw	r3, #8246	; 0x2036
   10e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e12:	f242 0236 	movw	r2, #8246	; 0x2036
   10e16:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e1a:	7812      	ldrb	r2, [r2, #0]
   10e1c:	b2d2      	uxtb	r2, r2
   10e1e:	f042 0210 	orr.w	r2, r2, #16
   10e22:	b2d2      	uxtb	r2, r2
   10e24:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10e26:	f242 0337 	movw	r3, #8247	; 0x2037
   10e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e2e:	f242 0237 	movw	r2, #8247	; 0x2037
   10e32:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e36:	7812      	ldrb	r2, [r2, #0]
   10e38:	b2d2      	uxtb	r2, r2
   10e3a:	f042 0210 	orr.w	r2, r2, #16
   10e3e:	b2d2      	uxtb	r2, r2
   10e40:	701a      	strb	r2, [r3, #0]
}
   10e42:	46bd      	mov	sp, r7
   10e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e48:	4770      	bx	lr
   10e4a:	bf00      	nop

00010e4c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10e4c:	b480      	push	{r7}
   10e4e:	b083      	sub	sp, #12
   10e50:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10e52:	f242 0337 	movw	r3, #8247	; 0x2037
   10e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5a:	f242 0237 	movw	r2, #8247	; 0x2037
   10e5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e62:	7812      	ldrb	r2, [r2, #0]
   10e64:	b2d2      	uxtb	r2, r2
   10e66:	f022 0210 	bic.w	r2, r2, #16
   10e6a:	b2d2      	uxtb	r2, r2
   10e6c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10e6e:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e76:	781b      	ldrb	r3, [r3, #0]
   10e78:	3301      	adds	r3, #1
   10e7a:	b2da      	uxtb	r2, r3
   10e7c:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e84:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10e86:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e8e:	781b      	ldrb	r3, [r3, #0]
   10e90:	2b17      	cmp	r3, #23
   10e92:	d162      	bne.n	10f5a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10e94:	f242 030f 	movw	r3, #8207	; 0x200f
   10e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9c:	781b      	ldrb	r3, [r3, #0]
   10e9e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10ea0:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea8:	781b      	ldrb	r3, [r3, #0]
   10eaa:	79fa      	ldrb	r2, [r7, #7]
   10eac:	429a      	cmp	r2, r3
   10eae:	d110      	bne.n	10ed2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10eb0:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb8:	2201      	movs	r2, #1
   10eba:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10ebc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec4:	7d1a      	ldrb	r2, [r3, #20]
   10ec6:	f64a 33e8 	movw	r3, #44008	; 0xabe8
   10eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ece:	701a      	strb	r2, [r3, #0]
   10ed0:	e00c      	b.n	10eec <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10ed2:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eda:	781b      	ldrb	r3, [r3, #0]
   10edc:	b2db      	uxtb	r3, r3
   10ede:	3301      	adds	r3, #1
   10ee0:	b2da      	uxtb	r2, r3
   10ee2:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eea:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10eec:	f240 2382 	movw	r3, #642	; 0x282
   10ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef4:	2201      	movs	r2, #1
   10ef6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10ef8:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f00:	2200      	movs	r2, #0
   10f02:	701a      	strb	r2, [r3, #0]
   10f04:	f242 0318 	movw	r3, #8216	; 0x2018
   10f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0c:	f242 0218 	movw	r2, #8216	; 0x2018
   10f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f14:	7812      	ldrb	r2, [r2, #0]
   10f16:	b2d2      	uxtb	r2, r2
   10f18:	f042 0201 	orr.w	r2, r2, #1
   10f1c:	b2d2      	uxtb	r2, r2
   10f1e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10f20:	f242 030d 	movw	r3, #8205	; 0x200d
   10f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f28:	f242 020d 	movw	r2, #8205	; 0x200d
   10f2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f30:	7812      	ldrb	r2, [r2, #0]
   10f32:	b2d2      	uxtb	r2, r2
   10f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10f38:	b2d2      	uxtb	r2, r2
   10f3a:	701a      	strb	r2, [r3, #0]
   10f3c:	f242 030d 	movw	r3, #8205	; 0x200d
   10f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f44:	f242 020d 	movw	r2, #8205	; 0x200d
   10f48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f4c:	7812      	ldrb	r2, [r2, #0]
   10f4e:	b2d2      	uxtb	r2, r2
   10f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f54:	b2d2      	uxtb	r2, r2
   10f56:	701a      	strb	r2, [r3, #0]
    return;
   10f58:	e051      	b.n	10ffe <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   10f5a:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f62:	781b      	ldrb	r3, [r3, #0]
   10f64:	2b15      	cmp	r3, #21
   10f66:	d820      	bhi.n	10faa <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   10f68:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f70:	781b      	ldrb	r3, [r3, #0]
   10f72:	461a      	mov	r2, r3
   10f74:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	4413      	add	r3, r2
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   10f82:	f242 030f 	movw	r3, #8207	; 0x200f
   10f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8a:	79fa      	ldrb	r2, [r7, #7]
   10f8c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   10f8e:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	781a      	ldrb	r2, [r3, #0]
   10f98:	79fb      	ldrb	r3, [r7, #7]
   10f9a:	4053      	eors	r3, r2
   10f9c:	b2da      	uxtb	r2, r3
   10f9e:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa6:	701a      	strb	r2, [r3, #0]
   10fa8:	e009      	b.n	10fbe <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   10faa:	f242 030f 	movw	r3, #8207	; 0x200f
   10fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb2:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10fb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fba:	7812      	ldrb	r2, [r2, #0]
   10fbc:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   10fbe:	f242 030f 	movw	r3, #8207	; 0x200f
   10fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc6:	781b      	ldrb	r3, [r3, #0]
   10fc8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   10fca:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd2:	781b      	ldrb	r3, [r3, #0]
   10fd4:	1e5a      	subs	r2, r3, #1
   10fd6:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fde:	4413      	add	r3, r2
   10fe0:	79fa      	ldrb	r2, [r7, #7]
   10fe2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   10fe4:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fec:	781a      	ldrb	r2, [r3, #0]
   10fee:	79fb      	ldrb	r3, [r7, #7]
   10ff0:	4053      	eors	r3, r2
   10ff2:	b2da      	uxtb	r2, r3
   10ff4:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ffc:	701a      	strb	r2, [r3, #0]
}
   10ffe:	370c      	adds	r7, #12
   11000:	46bd      	mov	sp, r7
   11002:	f85d 7b04 	ldr.w	r7, [sp], #4
   11006:	4770      	bx	lr

00011008 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11008:	b480      	push	{r7}
   1100a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   1100c:	f242 0317 	movw	r3, #8215	; 0x2017
   11010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11014:	f242 0217 	movw	r2, #8215	; 0x2017
   11018:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1101c:	7812      	ldrb	r2, [r2, #0]
   1101e:	b2d2      	uxtb	r2, r2
   11020:	f042 0206 	orr.w	r2, r2, #6
   11024:	b2d2      	uxtb	r2, r2
   11026:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11028:	f242 0317 	movw	r3, #8215	; 0x2017
   1102c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11030:	f242 0217 	movw	r2, #8215	; 0x2017
   11034:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11038:	7812      	ldrb	r2, [r2, #0]
   1103a:	b2d2      	uxtb	r2, r2
   1103c:	f042 0201 	orr.w	r2, r2, #1
   11040:	b2d2      	uxtb	r2, r2
   11042:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11044:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1104c:	2200      	movs	r2, #0
   1104e:	701a      	strb	r2, [r3, #0]
   11050:	f242 0318 	movw	r3, #8216	; 0x2018
   11054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11058:	f242 0218 	movw	r2, #8216	; 0x2018
   1105c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11060:	7812      	ldrb	r2, [r2, #0]
   11062:	b2d2      	uxtb	r2, r2
   11064:	f042 0201 	orr.w	r2, r2, #1
   11068:	b2d2      	uxtb	r2, r2
   1106a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1106c:	f242 0302 	movw	r3, #8194	; 0x2002
   11070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11074:	f242 0202 	movw	r2, #8194	; 0x2002
   11078:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1107c:	7812      	ldrb	r2, [r2, #0]
   1107e:	b2d2      	uxtb	r2, r2
   11080:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11084:	b2d2      	uxtb	r2, r2
   11086:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11088:	f64a 33ec 	movw	r3, #44012	; 0xabec
   1108c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11090:	2200      	movs	r2, #0
   11092:	701a      	strb	r2, [r3, #0]
   11094:	f242 0303 	movw	r3, #8195	; 0x2003
   11098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109c:	f242 0203 	movw	r2, #8195	; 0x2003
   110a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110a4:	7812      	ldrb	r2, [r2, #0]
   110a6:	b2d2      	uxtb	r2, r2
   110a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   110ac:	b2d2      	uxtb	r2, r2
   110ae:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   110b0:	f64a 33ec 	movw	r3, #44012	; 0xabec
   110b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b8:	2200      	movs	r2, #0
   110ba:	701a      	strb	r2, [r3, #0]
}
   110bc:	46bd      	mov	sp, r7
   110be:	f85d 7b04 	ldr.w	r7, [sp], #4
   110c2:	4770      	bx	lr

000110c4 <__vector_17>:


SIGNAL(SIG_SPI) {
   110c4:	b580      	push	{r7, lr}
   110c6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   110c8:	f64a 33ec 	movw	r3, #44012	; 0xabec
   110cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d0:	781b      	ldrb	r3, [r3, #0]
   110d2:	b2db      	uxtb	r3, r3
   110d4:	2b01      	cmp	r3, #1
   110d6:	d102      	bne.n	110de <__vector_17+0x1a>
    link_fbw_on_spi_it();
   110d8:	f7ff fe88 	bl	10dec <link_fbw_on_spi_it>
   110dc:	e00b      	b.n	110f6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   110de:	f64a 2390 	movw	r3, #43664	; 0xaa90
   110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e6:	781b      	ldrb	r3, [r3, #0]
   110e8:	3301      	adds	r3, #1
   110ea:	b2da      	uxtb	r2, r3
   110ec:	f64a 2390 	movw	r3, #43664	; 0xaa90
   110f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f4:	701a      	strb	r2, [r3, #0]
}
   110f6:	bd80      	pop	{r7, pc}

000110f8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   110f8:	b480      	push	{r7}
   110fa:	b083      	sub	sp, #12
   110fc:	af00      	add	r7, sp, #0
   110fe:	4603      	mov	r3, r0
   11100:	6039      	str	r1, [r7, #0]
   11102:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   11104:	79fa      	ldrb	r2, [r7, #7]
   11106:	f64a 4300 	movw	r3, #44032	; 0xac00
   1110a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110e:	6839      	ldr	r1, [r7, #0]
   11110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11114:	370c      	adds	r7, #12
   11116:	46bd      	mov	sp, r7
   11118:	f85d 7b04 	ldr.w	r7, [sp], #4
   1111c:	4770      	bx	lr
   1111e:	bf00      	nop

00011120 <adc_init>:

void 
adc_init( void )
{
   11120:	b480      	push	{r7}
   11122:	b083      	sub	sp, #12
   11124:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11126:	f242 0362 	movw	r3, #8290	; 0x2062
   1112a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112e:	2200      	movs	r2, #0
   11130:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11132:	f242 0361 	movw	r3, #8289	; 0x2061
   11136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1113a:	2200      	movs	r2, #0
   1113c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1113e:	f242 0307 	movw	r3, #8199	; 0x2007
   11142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11146:	2240      	movs	r2, #64	; 0x40
   11148:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1114a:	f242 0308 	movw	r3, #8200	; 0x2008
   1114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11152:	f242 0208 	movw	r2, #8200	; 0x2008
   11156:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1115a:	7812      	ldrb	r2, [r2, #0]
   1115c:	b2d2      	uxtb	r2, r2
   1115e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11162:	b2d2      	uxtb	r2, r2
   11164:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11166:	f242 0306 	movw	r3, #8198	; 0x2006
   1116a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116e:	22cf      	movs	r2, #207	; 0xcf
   11170:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11172:	2300      	movs	r3, #0
   11174:	71fb      	strb	r3, [r7, #7]
   11176:	e00a      	b.n	1118e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11178:	79fa      	ldrb	r2, [r7, #7]
   1117a:	f64a 4300 	movw	r3, #44032	; 0xac00
   1117e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11182:	2100      	movs	r1, #0
   11184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11188:	79fb      	ldrb	r3, [r7, #7]
   1118a:	3301      	adds	r3, #1
   1118c:	71fb      	strb	r3, [r7, #7]
   1118e:	79fb      	ldrb	r3, [r7, #7]
   11190:	2b07      	cmp	r3, #7
   11192:	d9f1      	bls.n	11178 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11194:	370c      	adds	r7, #12
   11196:	46bd      	mov	sp, r7
   11198:	f85d 7b04 	ldr.w	r7, [sp], #4
   1119c:	4770      	bx	lr
   1119e:	bf00      	nop

000111a0 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   111a0:	b480      	push	{r7}
   111a2:	b085      	sub	sp, #20
   111a4:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   111a6:	f242 0307 	movw	r3, #8199	; 0x2007
   111aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ae:	781b      	ldrb	r3, [r3, #0]
   111b0:	b2db      	uxtb	r3, r3
   111b2:	f003 0307 	and.w	r3, r3, #7
   111b6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   111b8:	7bfa      	ldrb	r2, [r7, #15]
   111ba:	f64a 4300 	movw	r3, #44032	; 0xac00
   111be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   111c6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   111c8:	f242 0304 	movw	r3, #8196	; 0x2004
   111cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d0:	881b      	ldrh	r3, [r3, #0]
   111d2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   111d4:	7bfa      	ldrb	r2, [r7, #15]
   111d6:	f64a 33f0 	movw	r3, #44016	; 0xabf0
   111da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111de:	88f9      	ldrh	r1, [r7, #6]
   111e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   111e4:	68bb      	ldr	r3, [r7, #8]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d025      	beq.n	11236 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   111ea:	68bb      	ldr	r3, [r7, #8]
   111ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   111f0:	3301      	adds	r3, #1
   111f2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   111f4:	7bbb      	ldrb	r3, [r7, #14]
   111f6:	2b1f      	cmp	r3, #31
   111f8:	d901      	bls.n	111fe <__vector_21+0x5e>
   111fa:	2300      	movs	r3, #0
   111fc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   111fe:	68bb      	ldr	r3, [r7, #8]
   11200:	881a      	ldrh	r2, [r3, #0]
   11202:	7bbb      	ldrb	r3, [r7, #14]
   11204:	68b9      	ldr	r1, [r7, #8]
   11206:	005b      	lsls	r3, r3, #1
   11208:	440b      	add	r3, r1
   1120a:	885b      	ldrh	r3, [r3, #2]
   1120c:	1ad3      	subs	r3, r2, r3
   1120e:	b29a      	uxth	r2, r3
   11210:	68bb      	ldr	r3, [r7, #8]
   11212:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11214:	7bbb      	ldrb	r3, [r7, #14]
   11216:	68ba      	ldr	r2, [r7, #8]
   11218:	005b      	lsls	r3, r3, #1
   1121a:	4413      	add	r3, r2
   1121c:	88fa      	ldrh	r2, [r7, #6]
   1121e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11220:	68bb      	ldr	r3, [r7, #8]
   11222:	881a      	ldrh	r2, [r3, #0]
   11224:	88fb      	ldrh	r3, [r7, #6]
   11226:	4413      	add	r3, r2
   11228:	b29a      	uxth	r2, r3
   1122a:	68bb      	ldr	r3, [r7, #8]
   1122c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1122e:	68bb      	ldr	r3, [r7, #8]
   11230:	7bba      	ldrb	r2, [r7, #14]
   11232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11236:	7bfb      	ldrb	r3, [r7, #15]
   11238:	3301      	adds	r3, #1
   1123a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1123c:	7bfb      	ldrb	r3, [r7, #15]
   1123e:	2b07      	cmp	r3, #7
   11240:	d901      	bls.n	11246 <__vector_21+0xa6>
    adc_input = 0;
   11242:	2300      	movs	r3, #0
   11244:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11246:	f242 0307 	movw	r3, #8199	; 0x2007
   1124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124e:	7bfa      	ldrb	r2, [r7, #15]
   11250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11254:	b2d2      	uxtb	r2, r2
   11256:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11258:	f242 0306 	movw	r3, #8198	; 0x2006
   1125c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11260:	f242 0206 	movw	r2, #8198	; 0x2006
   11264:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11268:	7812      	ldrb	r2, [r2, #0]
   1126a:	b2d2      	uxtb	r2, r2
   1126c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11270:	b2d2      	uxtb	r2, r2
   11272:	701a      	strb	r2, [r3, #0]
  
}
   11274:	3714      	adds	r7, #20
   11276:	46bd      	mov	sp, r7
   11278:	f85d 7b04 	ldr.w	r7, [sp], #4
   1127c:	4770      	bx	lr
   1127e:	bf00      	nop

00011280 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11280:	b580      	push	{r7, lr}
   11282:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11284:	f003 fca8 	bl	14bd8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11288:	f64a 5347 	movw	r3, #44359	; 0xad47
   1128c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11290:	2200      	movs	r2, #0
   11292:	701a      	strb	r2, [r3, #0]
}
   11294:	bd80      	pop	{r7, pc}
   11296:	bf00      	nop

00011298 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11298:	b580      	push	{r7, lr}
   1129a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1129c:	f64a 534e 	movw	r3, #44366	; 0xad4e
   112a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a4:	781b      	ldrb	r3, [r3, #0]
   112a6:	2b01      	cmp	r3, #1
   112a8:	f040 80f9 	bne.w	1149e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   112ac:	f64a 534d 	movw	r3, #44365	; 0xad4d
   112b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b4:	781b      	ldrb	r3, [r3, #0]
   112b6:	2b08      	cmp	r3, #8
   112b8:	d128      	bne.n	1130c <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   112ba:	f64a 4348 	movw	r3, #44104	; 0xac48
   112be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c2:	685a      	ldr	r2, [r3, #4]
   112c4:	f64a 4334 	movw	r3, #44084	; 0xac34
   112c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112cc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   112ce:	f64a 4348 	movw	r3, #44104	; 0xac48
   112d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d6:	689a      	ldr	r2, [r3, #8]
   112d8:	f64a 4338 	movw	r3, #44088	; 0xac38
   112dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   112e2:	4b73      	ldr	r3, [pc, #460]	; (114b0 <parse_gps_msg+0x218>)
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	4618      	mov	r0, r3
   112e8:	f006 ffaa 	bl	18240 <__aeabi_i2f>
   112ec:	4603      	mov	r3, r0
   112ee:	4618      	mov	r0, r3
   112f0:	f04f 0100 	mov.w	r1, #0
   112f4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   112f8:	f007 f8aa 	bl	18450 <__aeabi_fdiv>
   112fc:	4603      	mov	r3, r0
   112fe:	461a      	mov	r2, r3
   11300:	f64a 4324 	movw	r3, #44068	; 0xac24
   11304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11308:	601a      	str	r2, [r3, #0]
   1130a:	e0c8      	b.n	1149e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   1130c:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11314:	781b      	ldrb	r3, [r3, #0]
   11316:	2b03      	cmp	r3, #3
   11318:	d10a      	bne.n	11330 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1131a:	f64a 4348 	movw	r3, #44104	; 0xac48
   1131e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11322:	791a      	ldrb	r2, [r3, #4]
   11324:	f64a 4344 	movw	r3, #44100	; 0xac44
   11328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132c:	701a      	strb	r2, [r3, #0]
   1132e:	e0b6      	b.n	1149e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11330:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11338:	781b      	ldrb	r3, [r3, #0]
   1133a:	2b12      	cmp	r3, #18
   1133c:	f040 80af 	bne.w	1149e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11340:	4b5c      	ldr	r3, [pc, #368]	; (114b4 <parse_gps_msg+0x21c>)
   11342:	681b      	ldr	r3, [r3, #0]
   11344:	4618      	mov	r0, r3
   11346:	f006 ff77 	bl	18238 <__aeabi_ui2f>
   1134a:	4603      	mov	r3, r0
   1134c:	4618      	mov	r0, r3
   1134e:	f04f 0100 	mov.w	r1, #0
   11352:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11356:	f007 f87b 	bl	18450 <__aeabi_fdiv>
   1135a:	4603      	mov	r3, r0
   1135c:	461a      	mov	r2, r3
   1135e:	f64a 4328 	movw	r3, #44072	; 0xac28
   11362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11366:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11368:	4b51      	ldr	r3, [pc, #324]	; (114b0 <parse_gps_msg+0x218>)
   1136a:	681b      	ldr	r3, [r3, #0]
   1136c:	4618      	mov	r0, r3
   1136e:	f006 ff67 	bl	18240 <__aeabi_i2f>
   11372:	4603      	mov	r3, r0
   11374:	4618      	mov	r0, r3
   11376:	f04f 0100 	mov.w	r1, #0
   1137a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1137e:	f007 f867 	bl	18450 <__aeabi_fdiv>
   11382:	4603      	mov	r3, r0
   11384:	461a      	mov	r2, r3
   11386:	f64a 432c 	movw	r3, #44076	; 0xac2c
   1138a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11390:	4b49      	ldr	r3, [pc, #292]	; (114b8 <parse_gps_msg+0x220>)
   11392:	681b      	ldr	r3, [r3, #0]
   11394:	4618      	mov	r0, r3
   11396:	f006 ff53 	bl	18240 <__aeabi_i2f>
   1139a:	4603      	mov	r3, r0
   1139c:	4618      	mov	r0, r3
   1139e:	f006 fb0f 	bl	179c0 <__aeabi_f2d>
   113a2:	4602      	mov	r2, r0
   113a4:	460b      	mov	r3, r1
   113a6:	4610      	mov	r0, r2
   113a8:	4619      	mov	r1, r3
   113aa:	a33d      	add	r3, pc, #244	; (adr r3, 114a0 <parse_gps_msg+0x208>)
   113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   113b0:	f006 fc84 	bl	17cbc <__aeabi_ddiv>
   113b4:	4602      	mov	r2, r0
   113b6:	460b      	mov	r3, r1
   113b8:	4610      	mov	r0, r2
   113ba:	4619      	mov	r1, r3
   113bc:	f04f 0200 	mov.w	r2, #0
   113c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   113c4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   113c8:	f006 fc78 	bl	17cbc <__aeabi_ddiv>
   113cc:	4602      	mov	r2, r0
   113ce:	460b      	mov	r3, r1
   113d0:	4610      	mov	r0, r2
   113d2:	4619      	mov	r1, r3
   113d4:	a334      	add	r3, pc, #208	; (adr r3, 114a8 <parse_gps_msg+0x210>)
   113d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   113da:	f006 fb45 	bl	17a68 <__aeabi_dmul>
   113de:	4602      	mov	r2, r0
   113e0:	460b      	mov	r3, r1
   113e2:	4610      	mov	r0, r2
   113e4:	4619      	mov	r1, r3
   113e6:	f006 fe21 	bl	1802c <__aeabi_d2f>
   113ea:	4602      	mov	r2, r0
   113ec:	f64a 4330 	movw	r3, #44080	; 0xac30
   113f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   113f6:	f64a 4348 	movw	r3, #44104	; 0xac48
   113fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	4618      	mov	r0, r3
   11402:	f006 ff19 	bl	18238 <__aeabi_ui2f>
   11406:	4603      	mov	r3, r0
   11408:	4618      	mov	r0, r3
   1140a:	f04f 0100 	mov.w	r1, #0
   1140e:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11412:	f007 f81d 	bl	18450 <__aeabi_fdiv>
   11416:	4603      	mov	r3, r0
   11418:	461a      	mov	r2, r3
   1141a:	f64a 4320 	movw	r3, #44064	; 0xac20
   1141e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11422:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11424:	f64a 4334 	movw	r3, #44084	; 0xac34
   11428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142c:	681a      	ldr	r2, [r3, #0]
   1142e:	f248 531f 	movw	r3, #34079	; 0x851f
   11432:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11436:	fb83 1302 	smull	r1, r3, r3, r2
   1143a:	1159      	asrs	r1, r3, #5
   1143c:	17d3      	asrs	r3, r2, #31
   1143e:	1acb      	subs	r3, r1, r3
   11440:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11444:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11448:	4618      	mov	r0, r3
   1144a:	f006 fef9 	bl	18240 <__aeabi_i2f>
   1144e:	4602      	mov	r2, r0
   11450:	f64a 433c 	movw	r3, #44092	; 0xac3c
   11454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11458:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1145a:	f64a 4338 	movw	r3, #44088	; 0xac38
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	681a      	ldr	r2, [r3, #0]
   11464:	f248 531f 	movw	r3, #34079	; 0x851f
   11468:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1146c:	fb83 1302 	smull	r1, r3, r3, r2
   11470:	1159      	asrs	r1, r3, #5
   11472:	17d3      	asrs	r3, r2, #31
   11474:	1aca      	subs	r2, r1, r3
   11476:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1147a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1147e:	4413      	add	r3, r2
   11480:	4618      	mov	r0, r3
   11482:	f006 fedd 	bl	18240 <__aeabi_i2f>
   11486:	4602      	mov	r2, r0
   11488:	f64a 4340 	movw	r3, #44096	; 0xac40
   1148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11490:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11492:	f64a 4346 	movw	r3, #44102	; 0xac46
   11496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149a:	2201      	movs	r2, #1
   1149c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1149e:	bd80      	pop	{r7, pc}
   114a0:	00000000 	.word	0x00000000
   114a4:	40f86a00 	.word	0x40f86a00
   114a8:	5a7ed197 	.word	0x5a7ed197
   114ac:	400921fb 	.word	0x400921fb
   114b0:	2000ac54 	.word	0x2000ac54
   114b4:	2000ac5c 	.word	0x2000ac5c
   114b8:	2000ac60 	.word	0x2000ac60

000114bc <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   114bc:	b480      	push	{r7}
   114be:	b083      	sub	sp, #12
   114c0:	af00      	add	r7, sp, #0
   114c2:	4603      	mov	r3, r0
   114c4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   114c6:	f64a 5347 	movw	r3, #44359	; 0xad47
   114ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ce:	781b      	ldrb	r3, [r3, #0]
   114d0:	2b06      	cmp	r3, #6
   114d2:	d81d      	bhi.n	11510 <parse_ubx+0x54>
    ck_a += c;
   114d4:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114dc:	781a      	ldrb	r2, [r3, #0]
   114de:	79fb      	ldrb	r3, [r7, #7]
   114e0:	4413      	add	r3, r2
   114e2:	b2da      	uxtb	r2, r3
   114e4:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ec:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   114ee:	f64a 534c 	movw	r3, #44364	; 0xad4c
   114f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f6:	781a      	ldrb	r2, [r3, #0]
   114f8:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11500:	781b      	ldrb	r3, [r3, #0]
   11502:	4413      	add	r3, r2
   11504:	b2da      	uxtb	r2, r3
   11506:	f64a 534c 	movw	r3, #44364	; 0xad4c
   1150a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11510:	f64a 5347 	movw	r3, #44359	; 0xad47
   11514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11518:	781b      	ldrb	r3, [r3, #0]
   1151a:	2b00      	cmp	r3, #0
   1151c:	d110      	bne.n	11540 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   1151e:	79fb      	ldrb	r3, [r7, #7]
   11520:	2bb5      	cmp	r3, #181	; 0xb5
   11522:	f040 8135 	bne.w	11790 <parse_ubx+0x2d4>
      ubx_status++;
   11526:	f64a 5347 	movw	r3, #44359	; 0xad47
   1152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152e:	781b      	ldrb	r3, [r3, #0]
   11530:	3301      	adds	r3, #1
   11532:	b2da      	uxtb	r2, r3
   11534:	f64a 5347 	movw	r3, #44359	; 0xad47
   11538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1153e:	e12f      	b.n	117a0 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11540:	f64a 5347 	movw	r3, #44359	; 0xad47
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	781b      	ldrb	r3, [r3, #0]
   1154a:	2b01      	cmp	r3, #1
   1154c:	d11c      	bne.n	11588 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1154e:	79fb      	ldrb	r3, [r7, #7]
   11550:	2b62      	cmp	r3, #98	; 0x62
   11552:	d000      	beq.n	11556 <parse_ubx+0x9a>
      goto error;
   11554:	e11d      	b.n	11792 <parse_ubx+0x2d6>
    ck_a = 0;
   11556:	f64a 534b 	movw	r3, #44363	; 0xad4b
   1155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1155e:	2200      	movs	r2, #0
   11560:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11562:	f64a 534c 	movw	r3, #44364	; 0xad4c
   11566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156a:	2200      	movs	r2, #0
   1156c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1156e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11576:	781b      	ldrb	r3, [r3, #0]
   11578:	3301      	adds	r3, #1
   1157a:	b2da      	uxtb	r2, r3
   1157c:	f64a 5347 	movw	r3, #44359	; 0xad47
   11580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11584:	701a      	strb	r2, [r3, #0]
   11586:	e103      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11588:	f64a 5347 	movw	r3, #44359	; 0xad47
   1158c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11590:	781b      	ldrb	r3, [r3, #0]
   11592:	2b02      	cmp	r3, #2
   11594:	d127      	bne.n	115e6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11596:	f64a 4345 	movw	r3, #44101	; 0xac45
   1159a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159e:	781b      	ldrb	r3, [r3, #0]
   115a0:	b2db      	uxtb	r3, r3
   115a2:	2b00      	cmp	r3, #0
   115a4:	d00c      	beq.n	115c0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   115a6:	f64a 534f 	movw	r3, #44367	; 0xad4f
   115aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ae:	781b      	ldrb	r3, [r3, #0]
   115b0:	3301      	adds	r3, #1
   115b2:	b2da      	uxtb	r2, r3
   115b4:	f64a 534f 	movw	r3, #44367	; 0xad4f
   115b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115bc:	701a      	strb	r2, [r3, #0]
      goto error;
   115be:	e0e8      	b.n	11792 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   115c0:	f64a 534e 	movw	r3, #44366	; 0xad4e
   115c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c8:	79fa      	ldrb	r2, [r7, #7]
   115ca:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   115cc:	f64a 5347 	movw	r3, #44359	; 0xad47
   115d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d4:	781b      	ldrb	r3, [r3, #0]
   115d6:	3301      	adds	r3, #1
   115d8:	b2da      	uxtb	r2, r3
   115da:	f64a 5347 	movw	r3, #44359	; 0xad47
   115de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e2:	701a      	strb	r2, [r3, #0]
   115e4:	e0d4      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   115e6:	f64a 5347 	movw	r3, #44359	; 0xad47
   115ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ee:	781b      	ldrb	r3, [r3, #0]
   115f0:	2b03      	cmp	r3, #3
   115f2:	d112      	bne.n	1161a <parse_ubx+0x15e>
  {
    ubx_id = c;
   115f4:	f64a 534d 	movw	r3, #44365	; 0xad4d
   115f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fc:	79fa      	ldrb	r2, [r7, #7]
   115fe:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11600:	f64a 5347 	movw	r3, #44359	; 0xad47
   11604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11608:	781b      	ldrb	r3, [r3, #0]
   1160a:	3301      	adds	r3, #1
   1160c:	b2da      	uxtb	r2, r3
   1160e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11616:	701a      	strb	r2, [r3, #0]
   11618:	e0ba      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   1161a:	f64a 5347 	movw	r3, #44359	; 0xad47
   1161e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11622:	781b      	ldrb	r3, [r3, #0]
   11624:	2b04      	cmp	r3, #4
   11626:	d113      	bne.n	11650 <parse_ubx+0x194>
  {
    ubx_len = c;
   11628:	79fb      	ldrb	r3, [r7, #7]
   1162a:	b29a      	uxth	r2, r3
   1162c:	f64a 5348 	movw	r3, #44360	; 0xad48
   11630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11634:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11636:	f64a 5347 	movw	r3, #44359	; 0xad47
   1163a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163e:	781b      	ldrb	r3, [r3, #0]
   11640:	3301      	adds	r3, #1
   11642:	b2da      	uxtb	r2, r3
   11644:	f64a 5347 	movw	r3, #44359	; 0xad47
   11648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164c:	701a      	strb	r2, [r3, #0]
   1164e:	e09f      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11650:	f64a 5347 	movw	r3, #44359	; 0xad47
   11654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11658:	781b      	ldrb	r3, [r3, #0]
   1165a:	2b05      	cmp	r3, #5
   1165c:	d12b      	bne.n	116b6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1165e:	79fb      	ldrb	r3, [r7, #7]
   11660:	021b      	lsls	r3, r3, #8
   11662:	b29a      	uxth	r2, r3
   11664:	f64a 5348 	movw	r3, #44360	; 0xad48
   11668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166c:	881b      	ldrh	r3, [r3, #0]
   1166e:	b29b      	uxth	r3, r3
   11670:	4313      	orrs	r3, r2
   11672:	b29b      	uxth	r3, r3
   11674:	b29a      	uxth	r2, r3
   11676:	f64a 5348 	movw	r3, #44360	; 0xad48
   1167a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11680:	f64a 5348 	movw	r3, #44360	; 0xad48
   11684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11688:	881b      	ldrh	r3, [r3, #0]
   1168a:	2bff      	cmp	r3, #255	; 0xff
   1168c:	d900      	bls.n	11690 <parse_ubx+0x1d4>
      goto error;
   1168e:	e080      	b.n	11792 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11690:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11698:	2200      	movs	r2, #0
   1169a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1169c:	f64a 5347 	movw	r3, #44359	; 0xad47
   116a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	3301      	adds	r3, #1
   116a8:	b2da      	uxtb	r2, r3
   116aa:	f64a 5347 	movw	r3, #44359	; 0xad47
   116ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b2:	701a      	strb	r2, [r3, #0]
   116b4:	e06c      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   116b6:	f64a 5347 	movw	r3, #44359	; 0xad47
   116ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116be:	781b      	ldrb	r3, [r3, #0]
   116c0:	2b06      	cmp	r3, #6
   116c2:	d131      	bne.n	11728 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   116c4:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116cc:	781b      	ldrb	r3, [r3, #0]
   116ce:	461a      	mov	r2, r3
   116d0:	f64a 4348 	movw	r3, #44104	; 0xac48
   116d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d8:	79f9      	ldrb	r1, [r7, #7]
   116da:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   116dc:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e4:	781b      	ldrb	r3, [r3, #0]
   116e6:	3301      	adds	r3, #1
   116e8:	b2da      	uxtb	r2, r3
   116ea:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   116f4:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116fc:	781b      	ldrb	r3, [r3, #0]
   116fe:	461a      	mov	r2, r3
   11700:	f64a 5348 	movw	r3, #44360	; 0xad48
   11704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11708:	881b      	ldrh	r3, [r3, #0]
   1170a:	429a      	cmp	r2, r3
   1170c:	d340      	bcc.n	11790 <parse_ubx+0x2d4>
      ubx_status++;
   1170e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11716:	781b      	ldrb	r3, [r3, #0]
   11718:	3301      	adds	r3, #1
   1171a:	b2da      	uxtb	r2, r3
   1171c:	f64a 5347 	movw	r3, #44359	; 0xad47
   11720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11724:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11726:	e03b      	b.n	117a0 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11728:	f64a 5347 	movw	r3, #44359	; 0xad47
   1172c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11730:	781b      	ldrb	r3, [r3, #0]
   11732:	2b07      	cmp	r3, #7
   11734:	d115      	bne.n	11762 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11736:	f64a 534b 	movw	r3, #44363	; 0xad4b
   1173a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173e:	781b      	ldrb	r3, [r3, #0]
   11740:	79fa      	ldrb	r2, [r7, #7]
   11742:	429a      	cmp	r2, r3
   11744:	d000      	beq.n	11748 <parse_ubx+0x28c>
      goto error;
   11746:	e024      	b.n	11792 <parse_ubx+0x2d6>
    ubx_status++;
   11748:	f64a 5347 	movw	r3, #44359	; 0xad47
   1174c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11750:	781b      	ldrb	r3, [r3, #0]
   11752:	3301      	adds	r3, #1
   11754:	b2da      	uxtb	r2, r3
   11756:	f64a 5347 	movw	r3, #44359	; 0xad47
   1175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175e:	701a      	strb	r2, [r3, #0]
   11760:	e016      	b.n	11790 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11762:	f64a 5347 	movw	r3, #44359	; 0xad47
   11766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176a:	781b      	ldrb	r3, [r3, #0]
   1176c:	2b08      	cmp	r3, #8
   1176e:	d10f      	bne.n	11790 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11770:	f64a 534c 	movw	r3, #44364	; 0xad4c
   11774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11778:	781b      	ldrb	r3, [r3, #0]
   1177a:	79fa      	ldrb	r2, [r7, #7]
   1177c:	429a      	cmp	r2, r3
   1177e:	d000      	beq.n	11782 <parse_ubx+0x2c6>
      goto error;
   11780:	e007      	b.n	11792 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11782:	f64a 4345 	movw	r3, #44101	; 0xac45
   11786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1178a:	2201      	movs	r2, #1
   1178c:	701a      	strb	r2, [r3, #0]
    goto restart;
   1178e:	e000      	b.n	11792 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11790:	e006      	b.n	117a0 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11792:	f64a 5347 	movw	r3, #44359	; 0xad47
   11796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1179a:	2200      	movs	r2, #0
   1179c:	701a      	strb	r2, [r3, #0]
  return;
   1179e:	bf00      	nop
}
   117a0:	370c      	adds	r7, #12
   117a2:	46bd      	mov	sp, r7
   117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   117a8:	4770      	bx	lr
   117aa:	bf00      	nop

000117ac <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   117ac:	b580      	push	{r7, lr}
   117ae:	b082      	sub	sp, #8
   117b0:	af00      	add	r7, sp, #0
   117b2:	f242 039c 	movw	r3, #8348	; 0x209c
   117b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ba:	781b      	ldrb	r3, [r3, #0]
   117bc:	71fb      	strb	r3, [r7, #7]
   117be:	79fb      	ldrb	r3, [r7, #7]
   117c0:	4618      	mov	r0, r3
   117c2:	f7ff fe7b 	bl	114bc <parse_ubx>
   117c6:	3708      	adds	r7, #8
   117c8:	46bd      	mov	sp, r7
   117ca:	bd80      	pop	{r7, pc}
   117cc:	f3af 8000 	nop.w

000117d0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   117d0:	b580      	push	{r7, lr}
   117d2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   117d4:	f240 238c 	movw	r3, #652	; 0x28c
   117d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117dc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   117e0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   117e4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   117e6:	2001      	movs	r0, #1
   117e8:	f64a 5154 	movw	r1, #44372	; 0xad54
   117ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
   117f0:	f7ff fc82 	bl	110f8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   117f4:	2002      	movs	r0, #2
   117f6:	f64a 5198 	movw	r1, #44440	; 0xad98
   117fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
   117fe:	f7ff fc7b 	bl	110f8 <adc_buf_channel>
}
   11802:	bd80      	pop	{r7, pc}

00011804 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11804:	b480      	push	{r7}
   11806:	b083      	sub	sp, #12
   11808:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   1180a:	f64a 5354 	movw	r3, #44372	; 0xad54
   1180e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11812:	881b      	ldrh	r3, [r3, #0]
   11814:	095b      	lsrs	r3, r3, #5
   11816:	b29b      	uxth	r3, r3
   11818:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   1181a:	f64a 5398 	movw	r3, #44440	; 0xad98
   1181e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11822:	881b      	ldrh	r3, [r3, #0]
   11824:	095b      	lsrs	r3, r3, #5
   11826:	b29b      	uxth	r3, r3
   11828:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   1182a:	88fb      	ldrh	r3, [r7, #6]
   1182c:	425b      	negs	r3, r3
   1182e:	b29a      	uxth	r2, r3
   11830:	88bb      	ldrh	r3, [r7, #4]
   11832:	1ad3      	subs	r3, r2, r3
   11834:	b29a      	uxth	r2, r3
   11836:	f240 2386 	movw	r3, #646	; 0x286
   1183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183e:	881b      	ldrh	r3, [r3, #0]
   11840:	b29b      	uxth	r3, r3
   11842:	1ad3      	subs	r3, r2, r3
   11844:	b29b      	uxth	r3, r3
   11846:	b29a      	uxth	r2, r3
   11848:	f64a 5350 	movw	r3, #44368	; 0xad50
   1184c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11850:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11852:	88ba      	ldrh	r2, [r7, #4]
   11854:	88fb      	ldrh	r3, [r7, #6]
   11856:	1ad3      	subs	r3, r2, r3
   11858:	b29a      	uxth	r2, r3
   1185a:	f240 2388 	movw	r3, #648	; 0x288
   1185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11862:	881b      	ldrh	r3, [r3, #0]
   11864:	b29b      	uxth	r3, r3
   11866:	1ad3      	subs	r3, r2, r3
   11868:	b29b      	uxth	r3, r3
   1186a:	b29a      	uxth	r2, r3
   1186c:	f64a 5352 	movw	r3, #44370	; 0xad52
   11870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11874:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11876:	370c      	adds	r7, #12
   11878:	46bd      	mov	sp, r7
   1187a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1187e:	4770      	bx	lr

00011880 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11880:	b580      	push	{r7, lr}
   11882:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11884:	f64a 5352 	movw	r3, #44370	; 0xad52
   11888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1188c:	881b      	ldrh	r3, [r3, #0]
   1188e:	b29b      	uxth	r3, r3
   11890:	425b      	negs	r3, r3
   11892:	b29b      	uxth	r3, r3
   11894:	b29a      	uxth	r2, r3
   11896:	f240 2384 	movw	r3, #644	; 0x284
   1189a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   118a0:	f240 2384 	movw	r3, #644	; 0x284
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	881b      	ldrh	r3, [r3, #0]
   118aa:	b21b      	sxth	r3, r3
   118ac:	4618      	mov	r0, r3
   118ae:	f006 f875 	bl	1799c <__aeabi_i2d>
   118b2:	4602      	mov	r2, r0
   118b4:	460b      	mov	r3, r1
   118b6:	f04f 0000 	mov.w	r0, #0
   118ba:	f04f 0100 	mov.w	r1, #0
   118be:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   118c2:	f006 f9fb 	bl	17cbc <__aeabi_ddiv>
   118c6:	4602      	mov	r2, r0
   118c8:	460b      	mov	r3, r1
   118ca:	4610      	mov	r0, r2
   118cc:	4619      	mov	r1, r3
   118ce:	f006 fbad 	bl	1802c <__aeabi_d2f>
   118d2:	4602      	mov	r2, r0
   118d4:	f240 238c 	movw	r3, #652	; 0x28c
   118d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118dc:	601a      	str	r2, [r3, #0]
}
   118de:	bd80      	pop	{r7, pc}

000118e0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   118e0:	b590      	push	{r4, r7, lr}
   118e2:	b083      	sub	sp, #12
   118e4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   118e6:	f24b 0370 	movw	r3, #45168	; 0xb070
   118ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ee:	681a      	ldr	r2, [r3, #0]
   118f0:	f64a 53dc 	movw	r3, #44508	; 0xaddc
   118f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f8:	681b      	ldr	r3, [r3, #0]
   118fa:	4610      	mov	r0, r2
   118fc:	4619      	mov	r1, r3
   118fe:	f006 fbe9 	bl	180d4 <__aeabi_fsub>
   11902:	4603      	mov	r3, r0
   11904:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11906:	f240 2390 	movw	r3, #656	; 0x290
   1190a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1190e:	681b      	ldr	r3, [r3, #0]
   11910:	4618      	mov	r0, r3
   11912:	6879      	ldr	r1, [r7, #4]
   11914:	f006 fce8 	bl	182e8 <__aeabi_fmul>
   11918:	4603      	mov	r3, r0
   1191a:	4618      	mov	r0, r3
   1191c:	f04f 0100 	mov.w	r1, #0
   11920:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11924:	f006 fe7e 	bl	18624 <__aeabi_fcmplt>
   11928:	4603      	mov	r3, r0
   1192a:	2b00      	cmp	r3, #0
   1192c:	d002      	beq.n	11934 <roll_pitch_pid_run+0x54>
   1192e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11932:	e026      	b.n	11982 <roll_pitch_pid_run+0xa2>
   11934:	f240 2390 	movw	r3, #656	; 0x290
   11938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1193c:	681b      	ldr	r3, [r3, #0]
   1193e:	4618      	mov	r0, r3
   11940:	6879      	ldr	r1, [r7, #4]
   11942:	f006 fcd1 	bl	182e8 <__aeabi_fmul>
   11946:	4603      	mov	r3, r0
   11948:	4618      	mov	r0, r3
   1194a:	f04f 0100 	mov.w	r1, #0
   1194e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11952:	f006 fe85 	bl	18660 <__aeabi_fcmpgt>
   11956:	4603      	mov	r3, r0
   11958:	2b00      	cmp	r3, #0
   1195a:	d002      	beq.n	11962 <roll_pitch_pid_run+0x82>
   1195c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11960:	e00e      	b.n	11980 <roll_pitch_pid_run+0xa0>
   11962:	f240 2390 	movw	r3, #656	; 0x290
   11966:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1196a:	681b      	ldr	r3, [r3, #0]
   1196c:	4618      	mov	r0, r3
   1196e:	6879      	ldr	r1, [r7, #4]
   11970:	f006 fcba 	bl	182e8 <__aeabi_fmul>
   11974:	4603      	mov	r3, r0
   11976:	4618      	mov	r0, r3
   11978:	f006 fe7c 	bl	18674 <__aeabi_f2iz>
   1197c:	4603      	mov	r3, r0
   1197e:	b29b      	uxth	r3, r3
   11980:	b29a      	uxth	r2, r3
   11982:	f64a 53e6 	movw	r3, #44518	; 0xade6
   11986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1198a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   1198c:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11994:	681b      	ldr	r3, [r3, #0]
   11996:	4618      	mov	r0, r3
   11998:	f04f 0100 	mov.w	r1, #0
   1199c:	f006 fe42 	bl	18624 <__aeabi_fcmplt>
   119a0:	4603      	mov	r3, r0
   119a2:	2b00      	cmp	r3, #0
   119a4:	d006      	beq.n	119b4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   119a6:	f64a 53ec 	movw	r3, #44524	; 0xadec
   119aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ae:	f04f 0200 	mov.w	r2, #0
   119b2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   119b4:	f24b 0378 	movw	r3, #45176	; 0xb078
   119b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119bc:	681a      	ldr	r2, [r3, #0]
   119be:	f64a 53e0 	movw	r3, #44512	; 0xade0
   119c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c6:	681b      	ldr	r3, [r3, #0]
   119c8:	4610      	mov	r0, r2
   119ca:	4619      	mov	r1, r3
   119cc:	f006 fb82 	bl	180d4 <__aeabi_fsub>
   119d0:	4603      	mov	r3, r0
   119d2:	461c      	mov	r4, r3
   119d4:	f24b 0370 	movw	r3, #45168	; 0xb070
   119d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119dc:	681b      	ldr	r3, [r3, #0]
   119de:	4618      	mov	r0, r3
   119e0:	f04f 0100 	mov.w	r1, #0
   119e4:	f006 fe1e 	bl	18624 <__aeabi_fcmplt>
   119e8:	4603      	mov	r3, r0
   119ea:	2b00      	cmp	r3, #0
   119ec:	d007      	beq.n	119fe <roll_pitch_pid_run+0x11e>
   119ee:	f24b 0370 	movw	r3, #45168	; 0xb070
   119f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f6:	681b      	ldr	r3, [r3, #0]
   119f8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   119fc:	e004      	b.n	11a08 <roll_pitch_pid_run+0x128>
   119fe:	f24b 0370 	movw	r3, #45168	; 0xb070
   11a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a06:	681a      	ldr	r2, [r3, #0]
   11a08:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a10:	681b      	ldr	r3, [r3, #0]
   11a12:	4610      	mov	r0, r2
   11a14:	4619      	mov	r1, r3
   11a16:	f006 fc67 	bl	182e8 <__aeabi_fmul>
   11a1a:	4603      	mov	r3, r0
   11a1c:	4620      	mov	r0, r4
   11a1e:	4619      	mov	r1, r3
   11a20:	f006 fb58 	bl	180d4 <__aeabi_fsub>
   11a24:	4603      	mov	r3, r0
   11a26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11a2a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11a2c:	f240 2394 	movw	r3, #660	; 0x294
   11a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a34:	681b      	ldr	r3, [r3, #0]
   11a36:	4618      	mov	r0, r3
   11a38:	6879      	ldr	r1, [r7, #4]
   11a3a:	f006 fc55 	bl	182e8 <__aeabi_fmul>
   11a3e:	4603      	mov	r3, r0
   11a40:	4618      	mov	r0, r3
   11a42:	f04f 0100 	mov.w	r1, #0
   11a46:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11a4a:	f006 fdeb 	bl	18624 <__aeabi_fcmplt>
   11a4e:	4603      	mov	r3, r0
   11a50:	2b00      	cmp	r3, #0
   11a52:	d002      	beq.n	11a5a <roll_pitch_pid_run+0x17a>
   11a54:	f64d 2280 	movw	r2, #55936	; 0xda80
   11a58:	e026      	b.n	11aa8 <roll_pitch_pid_run+0x1c8>
   11a5a:	f240 2394 	movw	r3, #660	; 0x294
   11a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a62:	681b      	ldr	r3, [r3, #0]
   11a64:	4618      	mov	r0, r3
   11a66:	6879      	ldr	r1, [r7, #4]
   11a68:	f006 fc3e 	bl	182e8 <__aeabi_fmul>
   11a6c:	4603      	mov	r3, r0
   11a6e:	4618      	mov	r0, r3
   11a70:	f04f 0100 	mov.w	r1, #0
   11a74:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11a78:	f006 fdf2 	bl	18660 <__aeabi_fcmpgt>
   11a7c:	4603      	mov	r3, r0
   11a7e:	2b00      	cmp	r3, #0
   11a80:	d002      	beq.n	11a88 <roll_pitch_pid_run+0x1a8>
   11a82:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11a86:	e00e      	b.n	11aa6 <roll_pitch_pid_run+0x1c6>
   11a88:	f240 2394 	movw	r3, #660	; 0x294
   11a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a90:	681b      	ldr	r3, [r3, #0]
   11a92:	4618      	mov	r0, r3
   11a94:	6879      	ldr	r1, [r7, #4]
   11a96:	f006 fc27 	bl	182e8 <__aeabi_fmul>
   11a9a:	4603      	mov	r3, r0
   11a9c:	4618      	mov	r0, r3
   11a9e:	f006 fde9 	bl	18674 <__aeabi_f2iz>
   11aa2:	4603      	mov	r3, r0
   11aa4:	b29b      	uxth	r3, r3
   11aa6:	b29a      	uxth	r2, r3
   11aa8:	f64a 53e8 	movw	r3, #44520	; 0xade8
   11aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab0:	801a      	strh	r2, [r3, #0]
}
   11ab2:	370c      	adds	r7, #12
   11ab4:	46bd      	mov	sp, r7
   11ab6:	bd90      	pop	{r4, r7, pc}

00011ab8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11ab8:	b580      	push	{r7, lr}
   11aba:	b082      	sub	sp, #8
   11abc:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11abe:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   11ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac6:	681a      	ldr	r2, [r3, #0]
   11ac8:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   11acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad0:	681b      	ldr	r3, [r3, #0]
   11ad2:	4610      	mov	r0, r2
   11ad4:	4619      	mov	r1, r3
   11ad6:	f006 fafd 	bl	180d4 <__aeabi_fsub>
   11ada:	4603      	mov	r3, r0
   11adc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11ade:	e013      	b.n	11b08 <course_pid_run+0x50>
   11ae0:	6878      	ldr	r0, [r7, #4]
   11ae2:	f005 ff6d 	bl	179c0 <__aeabi_f2d>
   11ae6:	4602      	mov	r2, r0
   11ae8:	460b      	mov	r3, r1
   11aea:	4610      	mov	r0, r2
   11aec:	4619      	mov	r1, r3
   11aee:	a348      	add	r3, pc, #288	; (adr r3, 11c10 <course_pid_run+0x158>)
   11af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11af4:	f005 fe04 	bl	17700 <__aeabi_dsub>
   11af8:	4602      	mov	r2, r0
   11afa:	460b      	mov	r3, r1
   11afc:	4610      	mov	r0, r2
   11afe:	4619      	mov	r1, r3
   11b00:	f006 fa94 	bl	1802c <__aeabi_d2f>
   11b04:	4603      	mov	r3, r0
   11b06:	607b      	str	r3, [r7, #4]
   11b08:	6878      	ldr	r0, [r7, #4]
   11b0a:	f005 ff59 	bl	179c0 <__aeabi_f2d>
   11b0e:	4602      	mov	r2, r0
   11b10:	460b      	mov	r3, r1
   11b12:	4610      	mov	r0, r2
   11b14:	4619      	mov	r1, r3
   11b16:	a340      	add	r3, pc, #256	; (adr r3, 11c18 <course_pid_run+0x160>)
   11b18:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b1c:	f006 fa34 	bl	17f88 <__aeabi_dcmpgt>
   11b20:	4603      	mov	r3, r0
   11b22:	2b00      	cmp	r3, #0
   11b24:	d1dc      	bne.n	11ae0 <course_pid_run+0x28>
   11b26:	e013      	b.n	11b50 <course_pid_run+0x98>
   11b28:	6878      	ldr	r0, [r7, #4]
   11b2a:	f005 ff49 	bl	179c0 <__aeabi_f2d>
   11b2e:	4602      	mov	r2, r0
   11b30:	460b      	mov	r3, r1
   11b32:	4610      	mov	r0, r2
   11b34:	4619      	mov	r1, r3
   11b36:	a336      	add	r3, pc, #216	; (adr r3, 11c10 <course_pid_run+0x158>)
   11b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b3c:	f005 fde2 	bl	17704 <__adddf3>
   11b40:	4602      	mov	r2, r0
   11b42:	460b      	mov	r3, r1
   11b44:	4610      	mov	r0, r2
   11b46:	4619      	mov	r1, r3
   11b48:	f006 fa70 	bl	1802c <__aeabi_d2f>
   11b4c:	4603      	mov	r3, r0
   11b4e:	607b      	str	r3, [r7, #4]
   11b50:	6878      	ldr	r0, [r7, #4]
   11b52:	f005 ff35 	bl	179c0 <__aeabi_f2d>
   11b56:	4602      	mov	r2, r0
   11b58:	460b      	mov	r3, r1
   11b5a:	4610      	mov	r0, r2
   11b5c:	4619      	mov	r1, r3
   11b5e:	a330      	add	r3, pc, #192	; (adr r3, 11c20 <course_pid_run+0x168>)
   11b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b64:	f006 f9f2 	bl	17f4c <__aeabi_dcmplt>
   11b68:	4603      	mov	r3, r0
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	d1dc      	bne.n	11b28 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11b6e:	f240 239c 	movw	r3, #668	; 0x29c
   11b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b76:	681b      	ldr	r3, [r3, #0]
   11b78:	4618      	mov	r0, r3
   11b7a:	6879      	ldr	r1, [r7, #4]
   11b7c:	f006 fbb4 	bl	182e8 <__aeabi_fmul>
   11b80:	4603      	mov	r3, r0
   11b82:	461a      	mov	r2, r3
   11b84:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b8c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11b8e:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b96:	681a      	ldr	r2, [r3, #0]
   11b98:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ba0:	681b      	ldr	r3, [r3, #0]
   11ba2:	4610      	mov	r0, r2
   11ba4:	4619      	mov	r1, r3
   11ba6:	f006 fd5b 	bl	18660 <__aeabi_fcmpgt>
   11baa:	4603      	mov	r3, r0
   11bac:	2b00      	cmp	r3, #0
   11bae:	d00a      	beq.n	11bc6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11bb0:	f240 23a0 	movw	r3, #672	; 0x2a0
   11bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bb8:	681a      	ldr	r2, [r3, #0]
   11bba:	f64a 6338 	movw	r3, #44600	; 0xae38
   11bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bc2:	601a      	str	r2, [r3, #0]
   11bc4:	e01e      	b.n	11c04 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11bc6:	f240 23a0 	movw	r3, #672	; 0x2a0
   11bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11bd4:	f64a 6338 	movw	r3, #44600	; 0xae38
   11bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bdc:	681b      	ldr	r3, [r3, #0]
   11bde:	4610      	mov	r0, r2
   11be0:	4619      	mov	r1, r3
   11be2:	f006 fd3d 	bl	18660 <__aeabi_fcmpgt>
   11be6:	4603      	mov	r3, r0
   11be8:	2b00      	cmp	r3, #0
   11bea:	d00b      	beq.n	11c04 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11bec:	f240 23a0 	movw	r3, #672	; 0x2a0
   11bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf4:	681b      	ldr	r3, [r3, #0]
   11bf6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11bfa:	f64a 6338 	movw	r3, #44600	; 0xae38
   11bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c02:	601a      	str	r2, [r3, #0]
}
   11c04:	3708      	adds	r7, #8
   11c06:	46bd      	mov	sp, r7
   11c08:	bd80      	pop	{r7, pc}
   11c0a:	bf00      	nop
   11c0c:	f3af 8000 	nop.w
   11c10:	54442d18 	.word	0x54442d18
   11c14:	401921fb 	.word	0x401921fb
   11c18:	54442d18 	.word	0x54442d18
   11c1c:	400921fb 	.word	0x400921fb
   11c20:	54442d18 	.word	0x54442d18
   11c24:	c00921fb 	.word	0xc00921fb

00011c28 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11c28:	b5b0      	push	{r4, r5, r7, lr}
   11c2a:	b082      	sub	sp, #8
   11c2c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11c2e:	f24b 0384 	movw	r3, #45188	; 0xb084
   11c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c36:	681a      	ldr	r2, [r3, #0]
   11c38:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c40:	681b      	ldr	r3, [r3, #0]
   11c42:	4610      	mov	r0, r2
   11c44:	4619      	mov	r1, r3
   11c46:	f006 fa45 	bl	180d4 <__aeabi_fsub>
   11c4a:	4603      	mov	r3, r0
   11c4c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11c4e:	f64a 2397 	movw	r3, #43671	; 0xaa97
   11c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c56:	781b      	ldrb	r3, [r3, #0]
   11c58:	2b00      	cmp	r3, #0
   11c5a:	f000 80a8 	beq.w	11dae <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11c5e:	f64a 6330 	movw	r3, #44592	; 0xae30
   11c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c66:	881b      	ldrh	r3, [r3, #0]
   11c68:	b29a      	uxth	r2, r3
   11c6a:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c72:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11c74:	f240 23a8 	movw	r3, #680	; 0x2a8
   11c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7c:	681a      	ldr	r2, [r3, #0]
   11c7e:	f64a 6304 	movw	r3, #44548	; 0xae04
   11c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c86:	681b      	ldr	r3, [r3, #0]
   11c88:	4610      	mov	r0, r2
   11c8a:	4619      	mov	r1, r3
   11c8c:	f006 fb2c 	bl	182e8 <__aeabi_fmul>
   11c90:	4603      	mov	r3, r0
   11c92:	4618      	mov	r0, r3
   11c94:	6879      	ldr	r1, [r7, #4]
   11c96:	f006 fa1f 	bl	180d8 <__addsf3>
   11c9a:	4603      	mov	r3, r0
   11c9c:	461a      	mov	r2, r3
   11c9e:	f240 23a4 	movw	r3, #676	; 0x2a4
   11ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca6:	681b      	ldr	r3, [r3, #0]
   11ca8:	4610      	mov	r0, r2
   11caa:	4619      	mov	r1, r3
   11cac:	f006 fb1c 	bl	182e8 <__aeabi_fmul>
   11cb0:	4603      	mov	r3, r0
   11cb2:	461a      	mov	r2, r3
   11cb4:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cbc:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11cbe:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cc6:	681a      	ldr	r2, [r3, #0]
   11cc8:	f240 23ac 	movw	r3, #684	; 0x2ac
   11ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd0:	681b      	ldr	r3, [r3, #0]
   11cd2:	4610      	mov	r0, r2
   11cd4:	4619      	mov	r1, r3
   11cd6:	f006 fcc3 	bl	18660 <__aeabi_fcmpgt>
   11cda:	4603      	mov	r3, r0
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d009      	beq.n	11cf4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11ce0:	f240 23ac 	movw	r3, #684	; 0x2ac
   11ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce8:	681a      	ldr	r2, [r3, #0]
   11cea:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11cf4:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfc:	681a      	ldr	r2, [r3, #0]
   11cfe:	f240 23b0 	movw	r3, #688	; 0x2b0
   11d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d06:	681b      	ldr	r3, [r3, #0]
   11d08:	4610      	mov	r0, r2
   11d0a:	4619      	mov	r1, r3
   11d0c:	f006 fc8a 	bl	18624 <__aeabi_fcmplt>
   11d10:	4603      	mov	r3, r0
   11d12:	2b00      	cmp	r3, #0
   11d14:	d009      	beq.n	11d2a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11d16:	f240 23b0 	movw	r3, #688	; 0x2b0
   11d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d1e:	681a      	ldr	r2, [r3, #0]
   11d20:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d28:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11d2a:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d32:	681b      	ldr	r3, [r3, #0]
   11d34:	4618      	mov	r0, r3
   11d36:	6879      	ldr	r1, [r7, #4]
   11d38:	f006 f9ce 	bl	180d8 <__addsf3>
   11d3c:	4603      	mov	r3, r0
   11d3e:	461a      	mov	r2, r3
   11d40:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d48:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11d4a:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d52:	681b      	ldr	r3, [r3, #0]
   11d54:	4618      	mov	r0, r3
   11d56:	f04f 0100 	mov.w	r1, #0
   11d5a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11d5e:	f006 fc7f 	bl	18660 <__aeabi_fcmpgt>
   11d62:	4603      	mov	r3, r0
   11d64:	2b00      	cmp	r3, #0
   11d66:	d008      	beq.n	11d7a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11d68:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d70:	f04f 0200 	mov.w	r2, #0
   11d74:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11d78:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11d7a:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d82:	681b      	ldr	r3, [r3, #0]
   11d84:	4618      	mov	r0, r3
   11d86:	f04f 0100 	mov.w	r1, #0
   11d8a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11d8e:	f006 fc49 	bl	18624 <__aeabi_fcmplt>
   11d92:	4603      	mov	r3, r0
   11d94:	2b00      	cmp	r3, #0
   11d96:	d100      	bne.n	11d9a <climb_pid_run+0x172>
   11d98:	e109      	b.n	11fae <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11d9a:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da2:	f04f 0200 	mov.w	r2, #0
   11da6:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11daa:	601a      	str	r2, [r3, #0]
   11dac:	e0ff      	b.n	11fae <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11dae:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db6:	681b      	ldr	r3, [r3, #0]
   11db8:	4618      	mov	r0, r3
   11dba:	f04f 0100 	mov.w	r1, #0
   11dbe:	f006 fc4f 	bl	18660 <__aeabi_fcmpgt>
   11dc2:	4603      	mov	r3, r0
   11dc4:	2b00      	cmp	r3, #0
   11dc6:	d010      	beq.n	11dea <climb_pid_run+0x1c2>
   11dc8:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd0:	681a      	ldr	r2, [r3, #0]
   11dd2:	f240 2398 	movw	r3, #664	; 0x298
   11dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dda:	681b      	ldr	r3, [r3, #0]
   11ddc:	4610      	mov	r0, r2
   11dde:	4619      	mov	r1, r3
   11de0:	f006 fa82 	bl	182e8 <__aeabi_fmul>
   11de4:	4603      	mov	r3, r0
   11de6:	461a      	mov	r2, r3
   11de8:	e001      	b.n	11dee <climb_pid_run+0x1c6>
   11dea:	f04f 0200 	mov.w	r2, #0
   11dee:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11df6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11df8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11dfc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11e00:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e08:	681b      	ldr	r3, [r3, #0]
   11e0a:	4610      	mov	r0, r2
   11e0c:	4619      	mov	r1, r3
   11e0e:	f006 fa6b 	bl	182e8 <__aeabi_fmul>
   11e12:	4603      	mov	r3, r0
   11e14:	4618      	mov	r0, r3
   11e16:	6879      	ldr	r1, [r7, #4]
   11e18:	f006 f95e 	bl	180d8 <__addsf3>
   11e1c:	4603      	mov	r3, r0
   11e1e:	461a      	mov	r2, r3
   11e20:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11e24:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11e28:	4610      	mov	r0, r2
   11e2a:	4619      	mov	r1, r3
   11e2c:	f006 fa5c 	bl	182e8 <__aeabi_fmul>
   11e30:	4603      	mov	r3, r0
   11e32:	4618      	mov	r0, r3
   11e34:	f005 fdc4 	bl	179c0 <__aeabi_f2d>
   11e38:	4602      	mov	r2, r0
   11e3a:	460b      	mov	r3, r1
   11e3c:	4610      	mov	r0, r2
   11e3e:	4619      	mov	r1, r3
   11e40:	a35d      	add	r3, pc, #372	; (adr r3, 11fb8 <climb_pid_run+0x390>)
   11e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e46:	f005 fc5d 	bl	17704 <__adddf3>
   11e4a:	4602      	mov	r2, r0
   11e4c:	460b      	mov	r3, r1
   11e4e:	4614      	mov	r4, r2
   11e50:	461d      	mov	r5, r3
   11e52:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5a:	681b      	ldr	r3, [r3, #0]
   11e5c:	4618      	mov	r0, r3
   11e5e:	f005 fdaf 	bl	179c0 <__aeabi_f2d>
   11e62:	4602      	mov	r2, r0
   11e64:	460b      	mov	r3, r1
   11e66:	4610      	mov	r0, r2
   11e68:	4619      	mov	r1, r3
   11e6a:	a355      	add	r3, pc, #340	; (adr r3, 11fc0 <climb_pid_run+0x398>)
   11e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e70:	f005 fdfa 	bl	17a68 <__aeabi_dmul>
   11e74:	4602      	mov	r2, r0
   11e76:	460b      	mov	r3, r1
   11e78:	4620      	mov	r0, r4
   11e7a:	4629      	mov	r1, r5
   11e7c:	f005 fc42 	bl	17704 <__adddf3>
   11e80:	4602      	mov	r2, r0
   11e82:	460b      	mov	r3, r1
   11e84:	4610      	mov	r0, r2
   11e86:	4619      	mov	r1, r3
   11e88:	f006 f8d0 	bl	1802c <__aeabi_d2f>
   11e8c:	4603      	mov	r3, r0
   11e8e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11e90:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e98:	681b      	ldr	r3, [r3, #0]
   11e9a:	4618      	mov	r0, r3
   11e9c:	6879      	ldr	r1, [r7, #4]
   11e9e:	f006 f91b 	bl	180d8 <__addsf3>
   11ea2:	4603      	mov	r3, r0
   11ea4:	461a      	mov	r2, r3
   11ea6:	f64a 6300 	movw	r3, #44544	; 0xae00
   11eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eae:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11eb0:	f64a 6300 	movw	r3, #44544	; 0xae00
   11eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb8:	681b      	ldr	r3, [r3, #0]
   11eba:	4618      	mov	r0, r3
   11ebc:	f04f 0100 	mov.w	r1, #0
   11ec0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11ec4:	f006 fbcc 	bl	18660 <__aeabi_fcmpgt>
   11ec8:	4603      	mov	r3, r0
   11eca:	2b00      	cmp	r3, #0
   11ecc:	d008      	beq.n	11ee0 <climb_pid_run+0x2b8>
   11ece:	f64a 6300 	movw	r3, #44544	; 0xae00
   11ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed6:	f04f 0200 	mov.w	r2, #0
   11eda:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11ede:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11ee0:	f64a 6300 	movw	r3, #44544	; 0xae00
   11ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee8:	681b      	ldr	r3, [r3, #0]
   11eea:	4618      	mov	r0, r3
   11eec:	f04f 0100 	mov.w	r1, #0
   11ef0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11ef4:	f006 fb96 	bl	18624 <__aeabi_fcmplt>
   11ef8:	4603      	mov	r3, r0
   11efa:	2b00      	cmp	r3, #0
   11efc:	d008      	beq.n	11f10 <climb_pid_run+0x2e8>
   11efe:	f64a 6300 	movw	r3, #44544	; 0xae00
   11f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f06:	f04f 0200 	mov.w	r2, #0
   11f0a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11f0e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11f10:	6838      	ldr	r0, [r7, #0]
   11f12:	f04f 0100 	mov.w	r1, #0
   11f16:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f1a:	f006 f9e5 	bl	182e8 <__aeabi_fmul>
   11f1e:	4603      	mov	r3, r0
   11f20:	4618      	mov	r0, r3
   11f22:	f04f 0100 	mov.w	r1, #0
   11f26:	f006 fb7d 	bl	18624 <__aeabi_fcmplt>
   11f2a:	4603      	mov	r3, r0
   11f2c:	2b00      	cmp	r3, #0
   11f2e:	d001      	beq.n	11f34 <climb_pid_run+0x30c>
   11f30:	2200      	movs	r2, #0
   11f32:	e022      	b.n	11f7a <climb_pid_run+0x352>
   11f34:	6838      	ldr	r0, [r7, #0]
   11f36:	f04f 0100 	mov.w	r1, #0
   11f3a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f3e:	f006 f9d3 	bl	182e8 <__aeabi_fmul>
   11f42:	4603      	mov	r3, r0
   11f44:	4618      	mov	r0, r3
   11f46:	f04f 0100 	mov.w	r1, #0
   11f4a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f4e:	f006 fb87 	bl	18660 <__aeabi_fcmpgt>
   11f52:	4603      	mov	r3, r0
   11f54:	2b00      	cmp	r3, #0
   11f56:	d002      	beq.n	11f5e <climb_pid_run+0x336>
   11f58:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f5c:	e00c      	b.n	11f78 <climb_pid_run+0x350>
   11f5e:	6838      	ldr	r0, [r7, #0]
   11f60:	f04f 0100 	mov.w	r1, #0
   11f64:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f68:	f006 f9be 	bl	182e8 <__aeabi_fmul>
   11f6c:	4603      	mov	r3, r0
   11f6e:	4618      	mov	r0, r3
   11f70:	f006 fb80 	bl	18674 <__aeabi_f2iz>
   11f74:	4603      	mov	r3, r0
   11f76:	b29b      	uxth	r3, r3
   11f78:	b29a      	uxth	r2, r3
   11f7a:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f82:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   11f84:	f64a 6334 	movw	r3, #44596	; 0xae34
   11f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8c:	681a      	ldr	r2, [r3, #0]
   11f8e:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f96:	681b      	ldr	r3, [r3, #0]
   11f98:	4610      	mov	r0, r2
   11f9a:	4619      	mov	r1, r3
   11f9c:	f006 f89c 	bl	180d8 <__addsf3>
   11fa0:	4603      	mov	r3, r0
   11fa2:	461a      	mov	r2, r3
   11fa4:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fac:	601a      	str	r2, [r3, #0]
  }
}
   11fae:	3708      	adds	r7, #8
   11fb0:	46bd      	mov	sp, r7
   11fb2:	bdb0      	pop	{r4, r5, r7, pc}
   11fb4:	f3af 8000 	nop.w
   11fb8:	3d70a3d7 	.word	0x3d70a3d7
   11fbc:	3fd3d70a 	.word	0x3fd3d70a
   11fc0:	9999999a 	.word	0x9999999a
   11fc4:	3fc99999 	.word	0x3fc99999

00011fc8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   11fc8:	b580      	push	{r7, lr}
   11fca:	b082      	sub	sp, #8
   11fcc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   11fce:	f24b 036c 	movw	r3, #45164	; 0xb06c
   11fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd6:	681a      	ldr	r2, [r3, #0]
   11fd8:	f240 23b8 	movw	r3, #696	; 0x2b8
   11fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	4610      	mov	r0, r2
   11fe4:	4619      	mov	r1, r3
   11fe6:	f006 f875 	bl	180d4 <__aeabi_fsub>
   11fea:	4603      	mov	r3, r0
   11fec:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   11fee:	f240 23b4 	movw	r3, #692	; 0x2b4
   11ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff6:	681b      	ldr	r3, [r3, #0]
   11ff8:	4618      	mov	r0, r3
   11ffa:	6879      	ldr	r1, [r7, #4]
   11ffc:	f006 f974 	bl	182e8 <__aeabi_fmul>
   12000:	4603      	mov	r3, r0
   12002:	461a      	mov	r2, r3
   12004:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	4610      	mov	r0, r2
   12010:	4619      	mov	r1, r3
   12012:	f006 f861 	bl	180d8 <__addsf3>
   12016:	4603      	mov	r3, r0
   12018:	461a      	mov	r2, r3
   1201a:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   1201e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12022:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12024:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1202c:	681b      	ldr	r3, [r3, #0]
   1202e:	4618      	mov	r0, r3
   12030:	f04f 0100 	mov.w	r1, #0
   12034:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12038:	f006 faf4 	bl	18624 <__aeabi_fcmplt>
   1203c:	4603      	mov	r3, r0
   1203e:	2b00      	cmp	r3, #0
   12040:	d008      	beq.n	12054 <altitude_pid_run+0x8c>
   12042:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204a:	f04f 0200 	mov.w	r2, #0
   1204e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12052:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12054:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1205c:	681b      	ldr	r3, [r3, #0]
   1205e:	4618      	mov	r0, r3
   12060:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12064:	f006 fafc 	bl	18660 <__aeabi_fcmpgt>
   12068:	4603      	mov	r3, r0
   1206a:	2b00      	cmp	r3, #0
   1206c:	d006      	beq.n	1207c <altitude_pid_run+0xb4>
   1206e:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12076:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1207a:	601a      	str	r2, [r3, #0]
}
   1207c:	3708      	adds	r7, #8
   1207e:	46bd      	mov	sp, r7
   12080:	bd80      	pop	{r7, pc}
   12082:	bf00      	nop
   12084:	f3af 8000 	nop.w

00012088 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12088:	b5f0      	push	{r4, r5, r6, r7, lr}
   1208a:	b08b      	sub	sp, #44	; 0x2c
   1208c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1208e:	f64a 6309 	movw	r3, #44553	; 0xae09
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	2b00      	cmp	r3, #0
   1209a:	f040 8169 	bne.w	12370 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1209e:	f64a 6308 	movw	r3, #44552	; 0xae08
   120a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a6:	781b      	ldrb	r3, [r3, #0]
   120a8:	2b00      	cmp	r3, #0
   120aa:	d13c      	bne.n	12126 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   120ac:	f64a 6308 	movw	r3, #44552	; 0xae08
   120b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b4:	2200      	movs	r2, #0
   120b6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   120b8:	f24b 0394 	movw	r3, #45204	; 0xb094
   120bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c0:	881b      	ldrh	r3, [r3, #0]
   120c2:	2b00      	cmp	r3, #0
   120c4:	d000      	beq.n	120c8 <auto_nav+0x40>
   120c6:	e03d      	b.n	12144 <auto_nav+0xbc>
	else NextStage(); 
   120c8:	f64a 6308 	movw	r3, #44552	; 0xae08
   120cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d0:	781b      	ldrb	r3, [r3, #0]
   120d2:	3301      	adds	r3, #1
   120d4:	b2da      	uxtb	r2, r3
   120d6:	f64a 6308 	movw	r3, #44552	; 0xae08
   120da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120de:	701a      	strb	r2, [r3, #0]
   120e0:	f24b 0364 	movw	r3, #45156	; 0xb064
   120e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e8:	681a      	ldr	r2, [r3, #0]
   120ea:	f64a 630c 	movw	r3, #44556	; 0xae0c
   120ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f2:	601a      	str	r2, [r3, #0]
   120f4:	f24b 0368 	movw	r3, #45160	; 0xb068
   120f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120fc:	681a      	ldr	r2, [r3, #0]
   120fe:	f64a 6310 	movw	r3, #44560	; 0xae10
   12102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12106:	601a      	str	r2, [r3, #0]
   12108:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12110:	2200      	movs	r2, #0
   12112:	801a      	strh	r2, [r3, #0]
   12114:	f64a 6320 	movw	r3, #44576	; 0xae20
   12118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1211c:	f04f 0200 	mov.w	r2, #0
   12120:	601a      	str	r2, [r3, #0]
   12122:	f002 b883 	b.w	1422c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12126:	f64a 6308 	movw	r3, #44552	; 0xae08
   1212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212e:	781b      	ldrb	r3, [r3, #0]
   12130:	2b01      	cmp	r3, #1
   12132:	d100      	bne.n	12136 <auto_nav+0xae>
    {   Goto(while_1)}
   12134:	e7ba      	b.n	120ac <auto_nav+0x24>
    else if (nav_stage == 2)
   12136:	f64a 6308 	movw	r3, #44552	; 0xae08
   1213a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1213e:	781b      	ldrb	r3, [r3, #0]
   12140:	2b02      	cmp	r3, #2
   12142:	d162      	bne.n	1220a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12144:	f64a 6308 	movw	r3, #44552	; 0xae08
   12148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214c:	2202      	movs	r2, #2
   1214e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12150:	f24b 0394 	movw	r3, #45204	; 0xb094
   12154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12158:	881b      	ldrh	r3, [r3, #0]
   1215a:	2b08      	cmp	r3, #8
   1215c:	d92e      	bls.n	121bc <auto_nav+0x134>
   1215e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12166:	781b      	ldrb	r3, [r3, #0]
   12168:	3301      	adds	r3, #1
   1216a:	b2da      	uxtb	r2, r3
   1216c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12174:	701a      	strb	r2, [r3, #0]
   12176:	f24b 0364 	movw	r3, #45156	; 0xb064
   1217a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217e:	681a      	ldr	r2, [r3, #0]
   12180:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12188:	601a      	str	r2, [r3, #0]
   1218a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1218e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12192:	681a      	ldr	r2, [r3, #0]
   12194:	f64a 6310 	movw	r3, #44560	; 0xae10
   12198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1219c:	601a      	str	r2, [r3, #0]
   1219e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   121a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a6:	2200      	movs	r2, #0
   121a8:	801a      	strh	r2, [r3, #0]
   121aa:	f64a 6320 	movw	r3, #44576	; 0xae20
   121ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b2:	f04f 0200 	mov.w	r2, #0
   121b6:	601a      	str	r2, [r3, #0]
   121b8:	f002 b838 	b.w	1422c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   121bc:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   121c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   121c8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   121cc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   121ce:	f64a 2397 	movw	r3, #43671	; 0xaa97
   121d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d6:	2200      	movs	r2, #0
   121d8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   121da:	f64a 6334 	movw	r3, #44596	; 0xae34
   121de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e2:	f649 129a 	movw	r2, #39322	; 0x999a
   121e6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   121ea:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   121ec:	f64a 2395 	movw	r3, #43669	; 0xaa95
   121f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f4:	2201      	movs	r2, #1
   121f6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   121f8:	f64a 6330 	movw	r3, #44592	; 0xae30
   121fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12200:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   12204:	801a      	strh	r2, [r3, #0]
        }
        return;
   12206:	f002 b811 	b.w	1422c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   1220a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1220e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12212:	781b      	ldrb	r3, [r3, #0]
   12214:	2b03      	cmp	r3, #3
   12216:	d168      	bne.n	122ea <auto_nav+0x262>
     {
	nav_stage = 3;	
   12218:	f64a 6308 	movw	r3, #44552	; 0xae08
   1221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12220:	2203      	movs	r2, #3
   12222:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12224:	f24b 036c 	movw	r3, #45164	; 0xb06c
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	681b      	ldr	r3, [r3, #0]
   1222e:	4618      	mov	r0, r3
   12230:	f04f 0100 	mov.w	r1, #0
   12234:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12238:	f006 fa12 	bl	18660 <__aeabi_fcmpgt>
   1223c:	4603      	mov	r3, r0
   1223e:	2b00      	cmp	r3, #0
   12240:	d02e      	beq.n	122a0 <auto_nav+0x218>
   12242:	f64a 6308 	movw	r3, #44552	; 0xae08
   12246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224a:	781b      	ldrb	r3, [r3, #0]
   1224c:	3301      	adds	r3, #1
   1224e:	b2da      	uxtb	r2, r3
   12250:	f64a 6308 	movw	r3, #44552	; 0xae08
   12254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12258:	701a      	strb	r2, [r3, #0]
   1225a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12262:	681a      	ldr	r2, [r3, #0]
   12264:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226c:	601a      	str	r2, [r3, #0]
   1226e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12276:	681a      	ldr	r2, [r3, #0]
   12278:	f64a 6310 	movw	r3, #44560	; 0xae10
   1227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12280:	601a      	str	r2, [r3, #0]
   12282:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228a:	2200      	movs	r2, #0
   1228c:	801a      	strh	r2, [r3, #0]
   1228e:	f64a 6320 	movw	r3, #44576	; 0xae20
   12292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12296:	f04f 0200 	mov.w	r2, #0
   1229a:	601a      	str	r2, [r3, #0]
   1229c:	f001 bfc6 	b.w	1422c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   122a0:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   122a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a8:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   122ac:	f2c4 0296 	movt	r2, #16534	; 0x4096
   122b0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   122b2:	f64a 2397 	movw	r3, #43671	; 0xaa97
   122b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ba:	2200      	movs	r2, #0
   122bc:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   122be:	f64a 6334 	movw	r3, #44596	; 0xae34
   122c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c6:	f04f 0200 	mov.w	r2, #0
   122ca:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   122cc:	f64a 2395 	movw	r3, #43669	; 0xaa95
   122d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d4:	2202      	movs	r2, #2
   122d6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   122d8:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   122dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   122e4:	601a      	str	r2, [r3, #0]
        }
        return;
   122e6:	f001 bfa1 	b.w	1422c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   122ea:	f64a 6308 	movw	r3, #44552	; 0xae08
   122ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f2:	781b      	ldrb	r3, [r3, #0]
   122f4:	2b04      	cmp	r3, #4
   122f6:	f041 8799 	bne.w	1422c <auto_nav+0x21a4>
        NextBlock()
   122fa:	f64a 6309 	movw	r3, #44553	; 0xae09
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	781b      	ldrb	r3, [r3, #0]
   12304:	3301      	adds	r3, #1
   12306:	b2da      	uxtb	r2, r3
   12308:	f64a 6309 	movw	r3, #44553	; 0xae09
   1230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12310:	701a      	strb	r2, [r3, #0]
   12312:	f64a 6308 	movw	r3, #44552	; 0xae08
   12316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231a:	2200      	movs	r2, #0
   1231c:	701a      	strb	r2, [r3, #0]
   1231e:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12326:	2200      	movs	r2, #0
   12328:	801a      	strh	r2, [r3, #0]
   1232a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1232e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12332:	681a      	ldr	r2, [r3, #0]
   12334:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233c:	601a      	str	r2, [r3, #0]
   1233e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12346:	681a      	ldr	r2, [r3, #0]
   12348:	f64a 6310 	movw	r3, #44560	; 0xae10
   1234c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12350:	601a      	str	r2, [r3, #0]
   12352:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1235a:	2200      	movs	r2, #0
   1235c:	801a      	strh	r2, [r3, #0]
   1235e:	f64a 6320 	movw	r3, #44576	; 0xae20
   12362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12366:	f04f 0200 	mov.w	r2, #0
   1236a:	601a      	str	r2, [r3, #0]
   1236c:	f001 bf5e 	b.w	1422c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12370:	f64a 6309 	movw	r3, #44553	; 0xae09
   12374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12378:	781b      	ldrb	r3, [r3, #0]
   1237a:	2b01      	cmp	r3, #1
   1237c:	f040 81bc 	bne.w	126f8 <auto_nav+0x670>
{
    nav_block = 1;
   12380:	f64a 6309 	movw	r3, #44553	; 0xae09
   12384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12388:	2201      	movs	r2, #1
   1238a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1238c:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	2b00      	cmp	r3, #0
   12398:	d007      	beq.n	123aa <auto_nav+0x322>
   1239a:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1239e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a2:	2200      	movs	r2, #0
   123a4:	701a      	strb	r2, [r3, #0]
   123a6:	2301      	movs	r3, #1
   123a8:	e000      	b.n	123ac <auto_nav+0x324>
   123aa:	2300      	movs	r3, #0
   123ac:	2b00      	cmp	r3, #0
   123ae:	d034      	beq.n	1241a <auto_nav+0x392>
	{ GotoBlock(2) }
   123b0:	f64a 6309 	movw	r3, #44553	; 0xae09
   123b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b8:	2202      	movs	r2, #2
   123ba:	701a      	strb	r2, [r3, #0]
   123bc:	f64a 6308 	movw	r3, #44552	; 0xae08
   123c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c4:	2200      	movs	r2, #0
   123c6:	701a      	strb	r2, [r3, #0]
   123c8:	f64a 631e 	movw	r3, #44574	; 0xae1e
   123cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d0:	2200      	movs	r2, #0
   123d2:	801a      	strh	r2, [r3, #0]
   123d4:	f24b 0364 	movw	r3, #45156	; 0xb064
   123d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123dc:	681a      	ldr	r2, [r3, #0]
   123de:	f64a 630c 	movw	r3, #44556	; 0xae0c
   123e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e6:	601a      	str	r2, [r3, #0]
   123e8:	f24b 0368 	movw	r3, #45160	; 0xb068
   123ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f0:	681a      	ldr	r2, [r3, #0]
   123f2:	f64a 6310 	movw	r3, #44560	; 0xae10
   123f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123fa:	601a      	str	r2, [r3, #0]
   123fc:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12404:	2200      	movs	r2, #0
   12406:	801a      	strh	r2, [r3, #0]
   12408:	f64a 6320 	movw	r3, #44576	; 0xae20
   1240c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12410:	f04f 0200 	mov.w	r2, #0
   12414:	601a      	str	r2, [r3, #0]
   12416:	f001 bf09 	b.w	1422c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1241a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1241e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12422:	781b      	ldrb	r3, [r3, #0]
   12424:	2b00      	cmp	r3, #0
   12426:	d12e      	bne.n	12486 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12428:	f64a 6308 	movw	r3, #44552	; 0xae08
   1242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	3301      	adds	r3, #1
   12434:	b2da      	uxtb	r2, r3
   12436:	f64a 6308 	movw	r3, #44552	; 0xae08
   1243a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243e:	701a      	strb	r2, [r3, #0]
   12440:	f24b 0364 	movw	r3, #45156	; 0xb064
   12444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12448:	681a      	ldr	r2, [r3, #0]
   1244a:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1244e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12452:	601a      	str	r2, [r3, #0]
   12454:	f24b 0368 	movw	r3, #45160	; 0xb068
   12458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1245c:	681a      	ldr	r2, [r3, #0]
   1245e:	f64a 6310 	movw	r3, #44560	; 0xae10
   12462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12466:	601a      	str	r2, [r3, #0]
   12468:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12470:	2200      	movs	r2, #0
   12472:	801a      	strh	r2, [r3, #0]
   12474:	f64a 6320 	movw	r3, #44576	; 0xae20
   12478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1247c:	f04f 0200 	mov.w	r2, #0
   12480:	601a      	str	r2, [r3, #0]
   12482:	f001 bed3 	b.w	1422c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12486:	f64a 6308 	movw	r3, #44552	; 0xae08
   1248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	2b01      	cmp	r3, #1
   12492:	d169      	bne.n	12568 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12494:	f64a 6308 	movw	r3, #44552	; 0xae08
   12498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249c:	2201      	movs	r2, #1
   1249e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   124a0:	2001      	movs	r0, #1
   124a2:	f001 fed1 	bl	14248 <approaching>
   124a6:	4603      	mov	r3, r0
   124a8:	2b00      	cmp	r3, #0
   124aa:	d034      	beq.n	12516 <auto_nav+0x48e>
   124ac:	f64a 6314 	movw	r3, #44564	; 0xae14
   124b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b4:	2201      	movs	r2, #1
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	f64a 6308 	movw	r3, #44552	; 0xae08
   124bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c0:	781b      	ldrb	r3, [r3, #0]
   124c2:	3301      	adds	r3, #1
   124c4:	b2da      	uxtb	r2, r3
   124c6:	f64a 6308 	movw	r3, #44552	; 0xae08
   124ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ce:	701a      	strb	r2, [r3, #0]
   124d0:	f24b 0364 	movw	r3, #45156	; 0xb064
   124d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d8:	681a      	ldr	r2, [r3, #0]
   124da:	f64a 630c 	movw	r3, #44556	; 0xae0c
   124de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e2:	601a      	str	r2, [r3, #0]
   124e4:	f24b 0368 	movw	r3, #45160	; 0xb068
   124e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ec:	681a      	ldr	r2, [r3, #0]
   124ee:	f64a 6310 	movw	r3, #44560	; 0xae10
   124f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f6:	601a      	str	r2, [r3, #0]
   124f8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   124fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12500:	2200      	movs	r2, #0
   12502:	801a      	strh	r2, [r3, #0]
   12504:	f64a 6320 	movw	r3, #44576	; 0xae20
   12508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250c:	f04f 0200 	mov.w	r2, #0
   12510:	601a      	str	r2, [r3, #0]
   12512:	f001 be8b 	b.w	1422c <auto_nav+0x21a4>
            fly_to(1);
   12516:	2001      	movs	r0, #1
   12518:	f001 ffca 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   1251c:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12524:	2200      	movs	r2, #0
   12526:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12528:	f64a 6334 	movw	r3, #44596	; 0xae34
   1252c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12530:	f04f 0200 	mov.w	r2, #0
   12534:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12536:	f64a 2395 	movw	r3, #43669	; 0xaa95
   1253a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1253e:	2203      	movs	r2, #3
   12540:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12542:	f240 23bc 	movw	r3, #700	; 0x2bc
   12546:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1254a:	695a      	ldr	r2, [r3, #20]
   1254c:	f240 23b8 	movw	r3, #696	; 0x2b8
   12550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12554:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12556:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   1255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255e:	f04f 0200 	mov.w	r2, #0
   12562:	601a      	str	r2, [r3, #0]
          }
          return;
   12564:	f001 be62 	b.w	1422c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12568:	f64a 6308 	movw	r3, #44552	; 0xae08
   1256c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12570:	781b      	ldrb	r3, [r3, #0]
   12572:	2b02      	cmp	r3, #2
   12574:	d169      	bne.n	1264a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12576:	f64a 6308 	movw	r3, #44552	; 0xae08
   1257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257e:	2202      	movs	r2, #2
   12580:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12582:	2004      	movs	r0, #4
   12584:	f001 fe60 	bl	14248 <approaching>
   12588:	4603      	mov	r3, r0
   1258a:	2b00      	cmp	r3, #0
   1258c:	d034      	beq.n	125f8 <auto_nav+0x570>
   1258e:	f64a 6314 	movw	r3, #44564	; 0xae14
   12592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12596:	2204      	movs	r2, #4
   12598:	701a      	strb	r2, [r3, #0]
   1259a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1259e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a2:	781b      	ldrb	r3, [r3, #0]
   125a4:	3301      	adds	r3, #1
   125a6:	b2da      	uxtb	r2, r3
   125a8:	f64a 6308 	movw	r3, #44552	; 0xae08
   125ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b0:	701a      	strb	r2, [r3, #0]
   125b2:	f24b 0364 	movw	r3, #45156	; 0xb064
   125b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ba:	681a      	ldr	r2, [r3, #0]
   125bc:	f64a 630c 	movw	r3, #44556	; 0xae0c
   125c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c4:	601a      	str	r2, [r3, #0]
   125c6:	f24b 0368 	movw	r3, #45160	; 0xb068
   125ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ce:	681a      	ldr	r2, [r3, #0]
   125d0:	f64a 6310 	movw	r3, #44560	; 0xae10
   125d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d8:	601a      	str	r2, [r3, #0]
   125da:	f64a 631c 	movw	r3, #44572	; 0xae1c
   125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e2:	2200      	movs	r2, #0
   125e4:	801a      	strh	r2, [r3, #0]
   125e6:	f64a 6320 	movw	r3, #44576	; 0xae20
   125ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ee:	f04f 0200 	mov.w	r2, #0
   125f2:	601a      	str	r2, [r3, #0]
   125f4:	f001 be1a 	b.w	1422c <auto_nav+0x21a4>
            fly_to(4);
   125f8:	2004      	movs	r0, #4
   125fa:	f001 ff59 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   125fe:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12606:	2200      	movs	r2, #0
   12608:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1260a:	f64a 6334 	movw	r3, #44596	; 0xae34
   1260e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12612:	f04f 0200 	mov.w	r2, #0
   12616:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12618:	f64a 2395 	movw	r3, #43669	; 0xaa95
   1261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12620:	2203      	movs	r2, #3
   12622:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12624:	f240 23bc 	movw	r3, #700	; 0x2bc
   12628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1262c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1262e:	f240 23b8 	movw	r3, #696	; 0x2b8
   12632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12636:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12638:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   1263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12640:	f04f 0200 	mov.w	r2, #0
   12644:	601a      	str	r2, [r3, #0]
          }
          return;
   12646:	f001 bdf1 	b.w	1422c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1264a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12652:	781b      	ldrb	r3, [r3, #0]
   12654:	2b03      	cmp	r3, #3
   12656:	d106      	bne.n	12666 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12658:	f64a 6308 	movw	r3, #44552	; 0xae08
   1265c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12660:	2203      	movs	r2, #3
   12662:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12664:	e6e0      	b.n	12428 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12666:	f64a 6308 	movw	r3, #44552	; 0xae08
   1266a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1266e:	781b      	ldrb	r3, [r3, #0]
   12670:	2b04      	cmp	r3, #4
   12672:	f041 85db 	bne.w	1422c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12676:	f64a 6308 	movw	r3, #44552	; 0xae08
   1267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267e:	2204      	movs	r2, #4
   12680:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12682:	f64a 6309 	movw	r3, #44553	; 0xae09
   12686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1268a:	781b      	ldrb	r3, [r3, #0]
   1268c:	3301      	adds	r3, #1
   1268e:	b2da      	uxtb	r2, r3
   12690:	f64a 6309 	movw	r3, #44553	; 0xae09
   12694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12698:	701a      	strb	r2, [r3, #0]
   1269a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a2:	2200      	movs	r2, #0
   126a4:	701a      	strb	r2, [r3, #0]
   126a6:	f64a 631e 	movw	r3, #44574	; 0xae1e
   126aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ae:	2200      	movs	r2, #0
   126b0:	801a      	strh	r2, [r3, #0]
   126b2:	f24b 0364 	movw	r3, #45156	; 0xb064
   126b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ba:	681a      	ldr	r2, [r3, #0]
   126bc:	f64a 630c 	movw	r3, #44556	; 0xae0c
   126c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c4:	601a      	str	r2, [r3, #0]
   126c6:	f24b 0368 	movw	r3, #45160	; 0xb068
   126ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ce:	681a      	ldr	r2, [r3, #0]
   126d0:	f64a 6310 	movw	r3, #44560	; 0xae10
   126d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d8:	601a      	str	r2, [r3, #0]
   126da:	f64a 631c 	movw	r3, #44572	; 0xae1c
   126de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e2:	2200      	movs	r2, #0
   126e4:	801a      	strh	r2, [r3, #0]
   126e6:	f64a 6320 	movw	r3, #44576	; 0xae20
   126ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ee:	f04f 0200 	mov.w	r2, #0
   126f2:	601a      	str	r2, [r3, #0]
   126f4:	f001 bd9a 	b.w	1422c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   126f8:	f64a 6309 	movw	r3, #44553	; 0xae09
   126fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12700:	781b      	ldrb	r3, [r3, #0]
   12702:	2b02      	cmp	r3, #2
   12704:	f040 8392 	bne.w	12e2c <auto_nav+0xda4>
{
	nav_block = 2;
   12708:	f64a 6309 	movw	r3, #44553	; 0xae09
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	2202      	movs	r2, #2
   12712:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12714:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271c:	781b      	ldrb	r3, [r3, #0]
   1271e:	2b00      	cmp	r3, #0
   12720:	d007      	beq.n	12732 <auto_nav+0x6aa>
   12722:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272a:	2200      	movs	r2, #0
   1272c:	701a      	strb	r2, [r3, #0]
   1272e:	2301      	movs	r3, #1
   12730:	e000      	b.n	12734 <auto_nav+0x6ac>
   12732:	2300      	movs	r3, #0
   12734:	2b00      	cmp	r3, #0
   12736:	d034      	beq.n	127a2 <auto_nav+0x71a>
   12738:	f64a 6309 	movw	r3, #44553	; 0xae09
   1273c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12740:	2203      	movs	r2, #3
   12742:	701a      	strb	r2, [r3, #0]
   12744:	f64a 6308 	movw	r3, #44552	; 0xae08
   12748:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1274c:	2200      	movs	r2, #0
   1274e:	701a      	strb	r2, [r3, #0]
   12750:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12758:	2200      	movs	r2, #0
   1275a:	801a      	strh	r2, [r3, #0]
   1275c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12764:	681a      	ldr	r2, [r3, #0]
   12766:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1276a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1276e:	601a      	str	r2, [r3, #0]
   12770:	f24b 0368 	movw	r3, #45160	; 0xb068
   12774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12778:	681a      	ldr	r2, [r3, #0]
   1277a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12782:	601a      	str	r2, [r3, #0]
   12784:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1278c:	2200      	movs	r2, #0
   1278e:	801a      	strh	r2, [r3, #0]
   12790:	f64a 6320 	movw	r3, #44576	; 0xae20
   12794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12798:	f04f 0200 	mov.w	r2, #0
   1279c:	601a      	str	r2, [r3, #0]
   1279e:	f001 bd45 	b.w	1422c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   127a2:	f64a 6308 	movw	r3, #44552	; 0xae08
   127a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127aa:	781b      	ldrb	r3, [r3, #0]
   127ac:	2b00      	cmp	r3, #0
   127ae:	d134      	bne.n	1281a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   127b0:	f64a 6308 	movw	r3, #44552	; 0xae08
   127b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b8:	2200      	movs	r2, #0
   127ba:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   127bc:	f64a 6308 	movw	r3, #44552	; 0xae08
   127c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c4:	781b      	ldrb	r3, [r3, #0]
   127c6:	3301      	adds	r3, #1
   127c8:	b2da      	uxtb	r2, r3
   127ca:	f64a 6308 	movw	r3, #44552	; 0xae08
   127ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d2:	701a      	strb	r2, [r3, #0]
   127d4:	f24b 0364 	movw	r3, #45156	; 0xb064
   127d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127dc:	681a      	ldr	r2, [r3, #0]
   127de:	f64a 630c 	movw	r3, #44556	; 0xae0c
   127e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e6:	601a      	str	r2, [r3, #0]
   127e8:	f24b 0368 	movw	r3, #45160	; 0xb068
   127ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f0:	681a      	ldr	r2, [r3, #0]
   127f2:	f64a 6310 	movw	r3, #44560	; 0xae10
   127f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127fa:	601a      	str	r2, [r3, #0]
   127fc:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	2200      	movs	r2, #0
   12806:	801a      	strh	r2, [r3, #0]
   12808:	f64a 6320 	movw	r3, #44576	; 0xae20
   1280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12810:	f04f 0200 	mov.w	r2, #0
   12814:	601a      	str	r2, [r3, #0]
   12816:	f001 bd09 	b.w	1422c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   1281a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12822:	781b      	ldrb	r3, [r3, #0]
   12824:	2b01      	cmp	r3, #1
   12826:	d169      	bne.n	128fc <auto_nav+0x874>
    {
         nav_stage =1;
   12828:	f64a 6308 	movw	r3, #44552	; 0xae08
   1282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12830:	2201      	movs	r2, #1
   12832:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12834:	2006      	movs	r0, #6
   12836:	f001 fd07 	bl	14248 <approaching>
   1283a:	4603      	mov	r3, r0
   1283c:	2b00      	cmp	r3, #0
   1283e:	d034      	beq.n	128aa <auto_nav+0x822>
   12840:	f64a 6314 	movw	r3, #44564	; 0xae14
   12844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12848:	2206      	movs	r2, #6
   1284a:	701a      	strb	r2, [r3, #0]
   1284c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12854:	781b      	ldrb	r3, [r3, #0]
   12856:	3301      	adds	r3, #1
   12858:	b2da      	uxtb	r2, r3
   1285a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1285e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12862:	701a      	strb	r2, [r3, #0]
   12864:	f24b 0364 	movw	r3, #45156	; 0xb064
   12868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1286c:	681a      	ldr	r2, [r3, #0]
   1286e:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12876:	601a      	str	r2, [r3, #0]
   12878:	f24b 0368 	movw	r3, #45160	; 0xb068
   1287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12880:	681a      	ldr	r2, [r3, #0]
   12882:	f64a 6310 	movw	r3, #44560	; 0xae10
   12886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288a:	601a      	str	r2, [r3, #0]
   1288c:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12894:	2200      	movs	r2, #0
   12896:	801a      	strh	r2, [r3, #0]
   12898:	f64a 6320 	movw	r3, #44576	; 0xae20
   1289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a0:	f04f 0200 	mov.w	r2, #0
   128a4:	601a      	str	r2, [r3, #0]
   128a6:	f001 bcc1 	b.w	1422c <auto_nav+0x21a4>
            fly_to(6);
   128aa:	2006      	movs	r0, #6
   128ac:	f001 fe00 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   128b0:	f64a 2397 	movw	r3, #43671	; 0xaa97
   128b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b8:	2200      	movs	r2, #0
   128ba:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128bc:	f64a 6334 	movw	r3, #44596	; 0xae34
   128c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c4:	f04f 0200 	mov.w	r2, #0
   128c8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   128ca:	f64a 2395 	movw	r3, #43669	; 0xaa95
   128ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d2:	2203      	movs	r2, #3
   128d4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   128d6:	f240 23bc 	movw	r3, #700	; 0x2bc
   128da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   128e0:	f240 23b8 	movw	r3, #696	; 0x2b8
   128e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   128ea:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   128ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f2:	f04f 0200 	mov.w	r2, #0
   128f6:	601a      	str	r2, [r3, #0]
          }
          return;
   128f8:	f001 bc98 	b.w	1422c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   128fc:	f64a 6308 	movw	r3, #44552	; 0xae08
   12900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12904:	781b      	ldrb	r3, [r3, #0]
   12906:	2b02      	cmp	r3, #2
   12908:	d169      	bne.n	129de <auto_nav+0x956>
     {
         nav_stage =2; 
   1290a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1290e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12912:	2202      	movs	r2, #2
   12914:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12916:	2001      	movs	r0, #1
   12918:	f001 fc96 	bl	14248 <approaching>
   1291c:	4603      	mov	r3, r0
   1291e:	2b00      	cmp	r3, #0
   12920:	d034      	beq.n	1298c <auto_nav+0x904>
   12922:	f64a 6314 	movw	r3, #44564	; 0xae14
   12926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292a:	2201      	movs	r2, #1
   1292c:	701a      	strb	r2, [r3, #0]
   1292e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12936:	781b      	ldrb	r3, [r3, #0]
   12938:	3301      	adds	r3, #1
   1293a:	b2da      	uxtb	r2, r3
   1293c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12944:	701a      	strb	r2, [r3, #0]
   12946:	f24b 0364 	movw	r3, #45156	; 0xb064
   1294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1294e:	681a      	ldr	r2, [r3, #0]
   12950:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12958:	601a      	str	r2, [r3, #0]
   1295a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1295e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12962:	681a      	ldr	r2, [r3, #0]
   12964:	f64a 6310 	movw	r3, #44560	; 0xae10
   12968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296c:	601a      	str	r2, [r3, #0]
   1296e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12976:	2200      	movs	r2, #0
   12978:	801a      	strh	r2, [r3, #0]
   1297a:	f64a 6320 	movw	r3, #44576	; 0xae20
   1297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12982:	f04f 0200 	mov.w	r2, #0
   12986:	601a      	str	r2, [r3, #0]
   12988:	f001 bc50 	b.w	1422c <auto_nav+0x21a4>
            fly_to(1);
   1298c:	2001      	movs	r0, #1
   1298e:	f001 fd8f 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   12992:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1299a:	2200      	movs	r2, #0
   1299c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1299e:	f64a 6334 	movw	r3, #44596	; 0xae34
   129a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a6:	f04f 0200 	mov.w	r2, #0
   129aa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129ac:	f64a 2395 	movw	r3, #43669	; 0xaa95
   129b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b4:	2203      	movs	r2, #3
   129b6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   129b8:	f240 23bc 	movw	r3, #700	; 0x2bc
   129bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c0:	695a      	ldr	r2, [r3, #20]
   129c2:	f240 23b8 	movw	r3, #696	; 0x2b8
   129c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ca:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   129cc:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   129d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d4:	f04f 0200 	mov.w	r2, #0
   129d8:	601a      	str	r2, [r3, #0]
          }
          return;
   129da:	f001 bc27 	b.w	1422c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   129de:	f64a 6308 	movw	r3, #44552	; 0xae08
   129e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e6:	781b      	ldrb	r3, [r3, #0]
   129e8:	2b03      	cmp	r3, #3
   129ea:	d16f      	bne.n	12acc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   129ec:	f64a 6308 	movw	r3, #44552	; 0xae08
   129f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f4:	2203      	movs	r2, #3
   129f6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   129f8:	2002      	movs	r0, #2
   129fa:	f001 fc25 	bl	14248 <approaching>
   129fe:	4603      	mov	r3, r0
   12a00:	2b00      	cmp	r3, #0
   12a02:	d034      	beq.n	12a6e <auto_nav+0x9e6>
   12a04:	f64a 6314 	movw	r3, #44564	; 0xae14
   12a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a0c:	2202      	movs	r2, #2
   12a0e:	701a      	strb	r2, [r3, #0]
   12a10:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	3301      	adds	r3, #1
   12a1c:	b2da      	uxtb	r2, r3
   12a1e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a26:	701a      	strb	r2, [r3, #0]
   12a28:	f24b 0364 	movw	r3, #45156	; 0xb064
   12a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a30:	681a      	ldr	r2, [r3, #0]
   12a32:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	601a      	str	r2, [r3, #0]
   12a3c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	681a      	ldr	r2, [r3, #0]
   12a46:	f64a 6310 	movw	r3, #44560	; 0xae10
   12a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4e:	601a      	str	r2, [r3, #0]
   12a50:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a58:	2200      	movs	r2, #0
   12a5a:	801a      	strh	r2, [r3, #0]
   12a5c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a64:	f04f 0200 	mov.w	r2, #0
   12a68:	601a      	str	r2, [r3, #0]
   12a6a:	f001 bbdf 	b.w	1422c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12a6e:	f64a 6314 	movw	r3, #44564	; 0xae14
   12a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	4618      	mov	r0, r3
   12a7a:	2102      	movs	r1, #2
   12a7c:	f001 fd3a 	bl	144f4 <route_to>
            auto_pitch = FALSE;
   12a80:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a88:	2200      	movs	r2, #0
   12a8a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a8c:	f64a 6334 	movw	r3, #44596	; 0xae34
   12a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a94:	f04f 0200 	mov.w	r2, #0
   12a98:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a9a:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa2:	2203      	movs	r2, #3
   12aa4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12aa6:	f240 23bc 	movw	r3, #700	; 0x2bc
   12aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aae:	6a1a      	ldr	r2, [r3, #32]
   12ab0:	f240 23b8 	movw	r3, #696	; 0x2b8
   12ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12aba:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac2:	f04f 0200 	mov.w	r2, #0
   12ac6:	601a      	str	r2, [r3, #0]
          }
          return;
   12ac8:	f001 bbb0 	b.w	1422c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12acc:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad4:	781b      	ldrb	r3, [r3, #0]
   12ad6:	2b04      	cmp	r3, #4
   12ad8:	d169      	bne.n	12bae <auto_nav+0xb26>
       {
          nav_stage = 4;
   12ada:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae2:	2204      	movs	r2, #4
   12ae4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12ae6:	2003      	movs	r0, #3
   12ae8:	f001 fbae 	bl	14248 <approaching>
   12aec:	4603      	mov	r3, r0
   12aee:	2b00      	cmp	r3, #0
   12af0:	d034      	beq.n	12b5c <auto_nav+0xad4>
   12af2:	f64a 6314 	movw	r3, #44564	; 0xae14
   12af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afa:	2203      	movs	r2, #3
   12afc:	701a      	strb	r2, [r3, #0]
   12afe:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b06:	781b      	ldrb	r3, [r3, #0]
   12b08:	3301      	adds	r3, #1
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b14:	701a      	strb	r2, [r3, #0]
   12b16:	f24b 0364 	movw	r3, #45156	; 0xb064
   12b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1e:	681a      	ldr	r2, [r3, #0]
   12b20:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b28:	601a      	str	r2, [r3, #0]
   12b2a:	f24b 0368 	movw	r3, #45160	; 0xb068
   12b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b32:	681a      	ldr	r2, [r3, #0]
   12b34:	f64a 6310 	movw	r3, #44560	; 0xae10
   12b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b3c:	601a      	str	r2, [r3, #0]
   12b3e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b46:	2200      	movs	r2, #0
   12b48:	801a      	strh	r2, [r3, #0]
   12b4a:	f64a 6320 	movw	r3, #44576	; 0xae20
   12b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b52:	f04f 0200 	mov.w	r2, #0
   12b56:	601a      	str	r2, [r3, #0]
   12b58:	f001 bb68 	b.w	1422c <auto_nav+0x21a4>
            fly_to(3);
   12b5c:	2003      	movs	r0, #3
   12b5e:	f001 fca7 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   12b62:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6a:	2200      	movs	r2, #0
   12b6c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b6e:	f64a 6334 	movw	r3, #44596	; 0xae34
   12b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b76:	f04f 0200 	mov.w	r2, #0
   12b7a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b7c:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b84:	2203      	movs	r2, #3
   12b86:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12b88:	f240 23bc 	movw	r3, #700	; 0x2bc
   12b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12b92:	f240 23b8 	movw	r3, #696	; 0x2b8
   12b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b9a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b9c:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba4:	f04f 0200 	mov.w	r2, #0
   12ba8:	601a      	str	r2, [r3, #0]
          }
          return;
   12baa:	f001 bb3f 	b.w	1422c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12bae:	f64a 6308 	movw	r3, #44552	; 0xae08
   12bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb6:	781b      	ldrb	r3, [r3, #0]
   12bb8:	2b05      	cmp	r3, #5
   12bba:	d169      	bne.n	12c90 <auto_nav+0xc08>
       {
          nav_stage =5;
   12bbc:	f64a 6308 	movw	r3, #44552	; 0xae08
   12bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc4:	2205      	movs	r2, #5
   12bc6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12bc8:	2004      	movs	r0, #4
   12bca:	f001 fb3d 	bl	14248 <approaching>
   12bce:	4603      	mov	r3, r0
   12bd0:	2b00      	cmp	r3, #0
   12bd2:	d034      	beq.n	12c3e <auto_nav+0xbb6>
   12bd4:	f64a 6314 	movw	r3, #44564	; 0xae14
   12bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bdc:	2204      	movs	r2, #4
   12bde:	701a      	strb	r2, [r3, #0]
   12be0:	f64a 6308 	movw	r3, #44552	; 0xae08
   12be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be8:	781b      	ldrb	r3, [r3, #0]
   12bea:	3301      	adds	r3, #1
   12bec:	b2da      	uxtb	r2, r3
   12bee:	f64a 6308 	movw	r3, #44552	; 0xae08
   12bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf6:	701a      	strb	r2, [r3, #0]
   12bf8:	f24b 0364 	movw	r3, #45156	; 0xb064
   12bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c00:	681a      	ldr	r2, [r3, #0]
   12c02:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c0a:	601a      	str	r2, [r3, #0]
   12c0c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c14:	681a      	ldr	r2, [r3, #0]
   12c16:	f64a 6310 	movw	r3, #44560	; 0xae10
   12c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c1e:	601a      	str	r2, [r3, #0]
   12c20:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c28:	2200      	movs	r2, #0
   12c2a:	801a      	strh	r2, [r3, #0]
   12c2c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c34:	f04f 0200 	mov.w	r2, #0
   12c38:	601a      	str	r2, [r3, #0]
   12c3a:	f001 baf7 	b.w	1422c <auto_nav+0x21a4>
            fly_to(4);
   12c3e:	2004      	movs	r0, #4
   12c40:	f001 fc36 	bl	144b0 <fly_to>
            auto_pitch = FALSE;
   12c44:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4c:	2200      	movs	r2, #0
   12c4e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c50:	f64a 6334 	movw	r3, #44596	; 0xae34
   12c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c58:	f04f 0200 	mov.w	r2, #0
   12c5c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c5e:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c66:	2203      	movs	r2, #3
   12c68:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12c6a:	f240 23bc 	movw	r3, #700	; 0x2bc
   12c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c74:	f240 23b8 	movw	r3, #696	; 0x2b8
   12c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c7e:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c86:	f04f 0200 	mov.w	r2, #0
   12c8a:	601a      	str	r2, [r3, #0]
          }
          return;
   12c8c:	f001 bace 	b.w	1422c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12c90:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c98:	781b      	ldrb	r3, [r3, #0]
   12c9a:	2b06      	cmp	r3, #6
   12c9c:	d16f      	bne.n	12d7e <auto_nav+0xcf6>
       {
          nav_stage =6;
   12c9e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca6:	2206      	movs	r2, #6
   12ca8:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12caa:	2005      	movs	r0, #5
   12cac:	f001 facc 	bl	14248 <approaching>
   12cb0:	4603      	mov	r3, r0
   12cb2:	2b00      	cmp	r3, #0
   12cb4:	d034      	beq.n	12d20 <auto_nav+0xc98>
   12cb6:	f64a 6314 	movw	r3, #44564	; 0xae14
   12cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cbe:	2205      	movs	r2, #5
   12cc0:	701a      	strb	r2, [r3, #0]
   12cc2:	f64a 6308 	movw	r3, #44552	; 0xae08
   12cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cca:	781b      	ldrb	r3, [r3, #0]
   12ccc:	3301      	adds	r3, #1
   12cce:	b2da      	uxtb	r2, r3
   12cd0:	f64a 6308 	movw	r3, #44552	; 0xae08
   12cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd8:	701a      	strb	r2, [r3, #0]
   12cda:	f24b 0364 	movw	r3, #45156	; 0xb064
   12cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce2:	681a      	ldr	r2, [r3, #0]
   12ce4:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cec:	601a      	str	r2, [r3, #0]
   12cee:	f24b 0368 	movw	r3, #45160	; 0xb068
   12cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf6:	681a      	ldr	r2, [r3, #0]
   12cf8:	f64a 6310 	movw	r3, #44560	; 0xae10
   12cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d00:	601a      	str	r2, [r3, #0]
   12d02:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d0a:	2200      	movs	r2, #0
   12d0c:	801a      	strh	r2, [r3, #0]
   12d0e:	f64a 6320 	movw	r3, #44576	; 0xae20
   12d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d16:	f04f 0200 	mov.w	r2, #0
   12d1a:	601a      	str	r2, [r3, #0]
   12d1c:	f001 ba86 	b.w	1422c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12d20:	f64a 6314 	movw	r3, #44564	; 0xae14
   12d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d28:	781b      	ldrb	r3, [r3, #0]
   12d2a:	4618      	mov	r0, r3
   12d2c:	2105      	movs	r1, #5
   12d2e:	f001 fbe1 	bl	144f4 <route_to>
            auto_pitch = FALSE;
   12d32:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d3a:	2200      	movs	r2, #0
   12d3c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d3e:	f64a 6334 	movw	r3, #44596	; 0xae34
   12d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d46:	f04f 0200 	mov.w	r2, #0
   12d4a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d4c:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d54:	2203      	movs	r2, #3
   12d56:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12d58:	f240 23bc 	movw	r3, #700	; 0x2bc
   12d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12d62:	f240 23b8 	movw	r3, #696	; 0x2b8
   12d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d6a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d6c:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d74:	f04f 0200 	mov.w	r2, #0
   12d78:	601a      	str	r2, [r3, #0]
          }
          return;
   12d7a:	f001 ba57 	b.w	1422c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12d7e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d86:	781b      	ldrb	r3, [r3, #0]
   12d88:	2b07      	cmp	r3, #7
   12d8a:	d106      	bne.n	12d9a <auto_nav+0xd12>
       {
	   nav_stage =7;
   12d8c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d94:	2207      	movs	r2, #7
   12d96:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12d98:	e50a      	b.n	127b0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12d9a:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da2:	781b      	ldrb	r3, [r3, #0]
   12da4:	2b08      	cmp	r3, #8
   12da6:	f041 8241 	bne.w	1422c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12daa:	f64a 6308 	movw	r3, #44552	; 0xae08
   12dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db2:	2208      	movs	r2, #8
   12db4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12db6:	f64a 6309 	movw	r3, #44553	; 0xae09
   12dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dbe:	781b      	ldrb	r3, [r3, #0]
   12dc0:	3301      	adds	r3, #1
   12dc2:	b2da      	uxtb	r2, r3
   12dc4:	f64a 6309 	movw	r3, #44553	; 0xae09
   12dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dcc:	701a      	strb	r2, [r3, #0]
   12dce:	f64a 6308 	movw	r3, #44552	; 0xae08
   12dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd6:	2200      	movs	r2, #0
   12dd8:	701a      	strb	r2, [r3, #0]
   12dda:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de2:	2200      	movs	r2, #0
   12de4:	801a      	strh	r2, [r3, #0]
   12de6:	f24b 0364 	movw	r3, #45156	; 0xb064
   12dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dee:	681a      	ldr	r2, [r3, #0]
   12df0:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df8:	601a      	str	r2, [r3, #0]
   12dfa:	f24b 0368 	movw	r3, #45160	; 0xb068
   12dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e02:	681a      	ldr	r2, [r3, #0]
   12e04:	f64a 6310 	movw	r3, #44560	; 0xae10
   12e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e0c:	601a      	str	r2, [r3, #0]
   12e0e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e16:	2200      	movs	r2, #0
   12e18:	801a      	strh	r2, [r3, #0]
   12e1a:	f64a 6320 	movw	r3, #44576	; 0xae20
   12e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e22:	f04f 0200 	mov.w	r2, #0
   12e26:	601a      	str	r2, [r3, #0]
   12e28:	f001 ba00 	b.w	1422c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12e2c:	f64a 6309 	movw	r3, #44553	; 0xae09
   12e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e34:	781b      	ldrb	r3, [r3, #0]
   12e36:	2b03      	cmp	r3, #3
   12e38:	f040 8388 	bne.w	1354c <auto_nav+0x14c4>
{
    nav_block = 3;
   12e3c:	f64a 6309 	movw	r3, #44553	; 0xae09
   12e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e44:	2203      	movs	r2, #3
   12e46:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12e48:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	2b00      	cmp	r3, #0
   12e54:	d007      	beq.n	12e66 <auto_nav+0xdde>
   12e56:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e5e:	2200      	movs	r2, #0
   12e60:	701a      	strb	r2, [r3, #0]
   12e62:	2301      	movs	r3, #1
   12e64:	e000      	b.n	12e68 <auto_nav+0xde0>
   12e66:	2300      	movs	r3, #0
   12e68:	2b00      	cmp	r3, #0
   12e6a:	d034      	beq.n	12ed6 <auto_nav+0xe4e>
   12e6c:	f64a 6309 	movw	r3, #44553	; 0xae09
   12e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e74:	2204      	movs	r2, #4
   12e76:	701a      	strb	r2, [r3, #0]
   12e78:	f64a 6308 	movw	r3, #44552	; 0xae08
   12e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e80:	2200      	movs	r2, #0
   12e82:	701a      	strb	r2, [r3, #0]
   12e84:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e8c:	2200      	movs	r2, #0
   12e8e:	801a      	strh	r2, [r3, #0]
   12e90:	f24b 0364 	movw	r3, #45156	; 0xb064
   12e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e98:	681a      	ldr	r2, [r3, #0]
   12e9a:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea2:	601a      	str	r2, [r3, #0]
   12ea4:	f24b 0368 	movw	r3, #45160	; 0xb068
   12ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eac:	681a      	ldr	r2, [r3, #0]
   12eae:	f64a 6310 	movw	r3, #44560	; 0xae10
   12eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb6:	601a      	str	r2, [r3, #0]
   12eb8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec0:	2200      	movs	r2, #0
   12ec2:	801a      	strh	r2, [r3, #0]
   12ec4:	f64a 6320 	movw	r3, #44576	; 0xae20
   12ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ecc:	f04f 0200 	mov.w	r2, #0
   12ed0:	601a      	str	r2, [r3, #0]
   12ed2:	f001 b9ab 	b.w	1422c <auto_nav+0x21a4>
    if(nav_stage == 0)
   12ed6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ede:	781b      	ldrb	r3, [r3, #0]
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	f040 82ea 	bne.w	134ba <auto_nav+0x1432>
    {
        nav_stage = 0;
   12ee6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eee:	2200      	movs	r2, #0
   12ef0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12ef2:	f64a 2394 	movw	r3, #43668	; 0xaa94
   12ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efa:	781b      	ldrb	r3, [r3, #0]
   12efc:	2b02      	cmp	r3, #2
   12efe:	f040 81a5 	bne.w	1324c <auto_nav+0x11c4>
   12f02:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   12f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f0a:	88db      	ldrh	r3, [r3, #6]
   12f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
   12f0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12f12:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12f16:	dc04      	bgt.n	12f22 <auto_nav+0xe9a>
   12f18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12f1c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12f20:	da7e      	bge.n	13020 <auto_nav+0xf98>
   12f22:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2a:	681b      	ldr	r3, [r3, #0]
   12f2c:	4618      	mov	r0, r3
   12f2e:	f004 fd47 	bl	179c0 <__aeabi_f2d>
   12f32:	4604      	mov	r4, r0
   12f34:	460d      	mov	r5, r1
   12f36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12f3a:	4618      	mov	r0, r3
   12f3c:	f005 f980 	bl	18240 <__aeabi_i2f>
   12f40:	4603      	mov	r3, r0
   12f42:	4618      	mov	r0, r3
   12f44:	f04f 0100 	mov.w	r1, #0
   12f48:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12f4c:	f005 fa80 	bl	18450 <__aeabi_fdiv>
   12f50:	4603      	mov	r3, r0
   12f52:	4618      	mov	r0, r3
   12f54:	f004 fd34 	bl	179c0 <__aeabi_f2d>
   12f58:	4602      	mov	r2, r0
   12f5a:	460b      	mov	r3, r1
   12f5c:	4610      	mov	r0, r2
   12f5e:	4619      	mov	r1, r3
   12f60:	f04f 0200 	mov.w	r2, #0
   12f64:	f04f 0300 	mov.w	r3, #0
   12f68:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12f6c:	f004 fd7c 	bl	17a68 <__aeabi_dmul>
   12f70:	4602      	mov	r2, r0
   12f72:	460b      	mov	r3, r1
   12f74:	4610      	mov	r0, r2
   12f76:	4619      	mov	r1, r3
   12f78:	f04f 0200 	mov.w	r2, #0
   12f7c:	f04f 0300 	mov.w	r3, #0
   12f80:	f004 fbc0 	bl	17704 <__adddf3>
   12f84:	4602      	mov	r2, r0
   12f86:	460b      	mov	r3, r1
   12f88:	4620      	mov	r0, r4
   12f8a:	4629      	mov	r1, r5
   12f8c:	f004 fbba 	bl	17704 <__adddf3>
   12f90:	4602      	mov	r2, r0
   12f92:	460b      	mov	r3, r1
   12f94:	4610      	mov	r0, r2
   12f96:	4619      	mov	r1, r3
   12f98:	f005 f848 	bl	1802c <__aeabi_d2f>
   12f9c:	4602      	mov	r2, r0
   12f9e:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa6:	601a      	str	r2, [r3, #0]
   12fa8:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb0:	681b      	ldr	r3, [r3, #0]
   12fb2:	4618      	mov	r0, r3
   12fb4:	f04f 0100 	mov.w	r1, #0
   12fb8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12fbc:	f005 fb3c 	bl	18638 <__aeabi_fcmple>
   12fc0:	4603      	mov	r3, r0
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d005      	beq.n	12fd2 <auto_nav+0xf4a>
   12fc6:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fce:	681a      	ldr	r2, [r3, #0]
   12fd0:	e003      	b.n	12fda <auto_nav+0xf52>
   12fd2:	f04f 0200 	mov.w	r2, #0
   12fd6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12fda:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe2:	601a      	str	r2, [r3, #0]
   12fe4:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fec:	681b      	ldr	r3, [r3, #0]
   12fee:	4618      	mov	r0, r3
   12ff0:	f04f 0100 	mov.w	r1, #0
   12ff4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12ff8:	f005 fb28 	bl	1864c <__aeabi_fcmpge>
   12ffc:	4603      	mov	r3, r0
   12ffe:	2b00      	cmp	r3, #0
   13000:	d005      	beq.n	1300e <auto_nav+0xf86>
   13002:	f64a 6354 	movw	r3, #44628	; 0xae54
   13006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1300a:	681a      	ldr	r2, [r3, #0]
   1300c:	e003      	b.n	13016 <auto_nav+0xf8e>
   1300e:	f04f 0200 	mov.w	r2, #0
   13012:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13016:	f64a 6354 	movw	r3, #44628	; 0xae54
   1301a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1301e:	601a      	str	r2, [r3, #0]
   13020:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   13024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13028:	889b      	ldrh	r3, [r3, #4]
   1302a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1302c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13030:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13034:	dc04      	bgt.n	13040 <auto_nav+0xfb8>
   13036:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1303a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1303e:	da7e      	bge.n	1313e <auto_nav+0x10b6>
   13040:	f64a 6358 	movw	r3, #44632	; 0xae58
   13044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13048:	681b      	ldr	r3, [r3, #0]
   1304a:	4618      	mov	r0, r3
   1304c:	f004 fcb8 	bl	179c0 <__aeabi_f2d>
   13050:	4604      	mov	r4, r0
   13052:	460d      	mov	r5, r1
   13054:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13058:	4618      	mov	r0, r3
   1305a:	f005 f8f1 	bl	18240 <__aeabi_i2f>
   1305e:	4603      	mov	r3, r0
   13060:	4618      	mov	r0, r3
   13062:	f04f 0100 	mov.w	r1, #0
   13066:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1306a:	f005 f9f1 	bl	18450 <__aeabi_fdiv>
   1306e:	4603      	mov	r3, r0
   13070:	4618      	mov	r0, r3
   13072:	f004 fca5 	bl	179c0 <__aeabi_f2d>
   13076:	4602      	mov	r2, r0
   13078:	460b      	mov	r3, r1
   1307a:	4610      	mov	r0, r2
   1307c:	4619      	mov	r1, r3
   1307e:	f04f 0200 	mov.w	r2, #0
   13082:	f04f 0300 	mov.w	r3, #0
   13086:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1308a:	f004 fced 	bl	17a68 <__aeabi_dmul>
   1308e:	4602      	mov	r2, r0
   13090:	460b      	mov	r3, r1
   13092:	4610      	mov	r0, r2
   13094:	4619      	mov	r1, r3
   13096:	f04f 0200 	mov.w	r2, #0
   1309a:	f04f 0300 	mov.w	r3, #0
   1309e:	f004 fb31 	bl	17704 <__adddf3>
   130a2:	4602      	mov	r2, r0
   130a4:	460b      	mov	r3, r1
   130a6:	4620      	mov	r0, r4
   130a8:	4629      	mov	r1, r5
   130aa:	f004 fb2b 	bl	17704 <__adddf3>
   130ae:	4602      	mov	r2, r0
   130b0:	460b      	mov	r3, r1
   130b2:	4610      	mov	r0, r2
   130b4:	4619      	mov	r1, r3
   130b6:	f004 ffb9 	bl	1802c <__aeabi_d2f>
   130ba:	4602      	mov	r2, r0
   130bc:	f64a 6358 	movw	r3, #44632	; 0xae58
   130c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c4:	601a      	str	r2, [r3, #0]
   130c6:	f64a 6358 	movw	r3, #44632	; 0xae58
   130ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ce:	681b      	ldr	r3, [r3, #0]
   130d0:	4618      	mov	r0, r3
   130d2:	f04f 0100 	mov.w	r1, #0
   130d6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   130da:	f005 faad 	bl	18638 <__aeabi_fcmple>
   130de:	4603      	mov	r3, r0
   130e0:	2b00      	cmp	r3, #0
   130e2:	d005      	beq.n	130f0 <auto_nav+0x1068>
   130e4:	f64a 6358 	movw	r3, #44632	; 0xae58
   130e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ec:	681a      	ldr	r2, [r3, #0]
   130ee:	e003      	b.n	130f8 <auto_nav+0x1070>
   130f0:	f04f 0200 	mov.w	r2, #0
   130f4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   130f8:	f64a 6358 	movw	r3, #44632	; 0xae58
   130fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13100:	601a      	str	r2, [r3, #0]
   13102:	f64a 6358 	movw	r3, #44632	; 0xae58
   13106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310a:	681b      	ldr	r3, [r3, #0]
   1310c:	4618      	mov	r0, r3
   1310e:	f04f 0100 	mov.w	r1, #0
   13112:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13116:	f005 fa99 	bl	1864c <__aeabi_fcmpge>
   1311a:	4603      	mov	r3, r0
   1311c:	2b00      	cmp	r3, #0
   1311e:	d005      	beq.n	1312c <auto_nav+0x10a4>
   13120:	f64a 6358 	movw	r3, #44632	; 0xae58
   13124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13128:	681a      	ldr	r2, [r3, #0]
   1312a:	e003      	b.n	13134 <auto_nav+0x10ac>
   1312c:	f04f 0200 	mov.w	r2, #0
   13130:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13134:	f64a 6358 	movw	r3, #44632	; 0xae58
   13138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1313c:	601a      	str	r2, [r3, #0]
   1313e:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13146:	2203      	movs	r2, #3
   13148:	701a      	strb	r2, [r3, #0]
   1314a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1314e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13152:	885b      	ldrh	r3, [r3, #2]
   13154:	847b      	strh	r3, [r7, #34]	; 0x22
   13156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1315a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1315e:	dc04      	bgt.n	1316a <auto_nav+0x10e2>
   13160:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13164:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13168:	da70      	bge.n	1324c <auto_nav+0x11c4>
   1316a:	f240 23b8 	movw	r3, #696	; 0x2b8
   1316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13172:	681b      	ldr	r3, [r3, #0]
   13174:	4618      	mov	r0, r3
   13176:	f004 fc23 	bl	179c0 <__aeabi_f2d>
   1317a:	4604      	mov	r4, r0
   1317c:	460d      	mov	r5, r1
   1317e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13182:	4618      	mov	r0, r3
   13184:	f005 f85c 	bl	18240 <__aeabi_i2f>
   13188:	4603      	mov	r3, r0
   1318a:	4618      	mov	r0, r3
   1318c:	f04f 0100 	mov.w	r1, #0
   13190:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13194:	f005 f95c 	bl	18450 <__aeabi_fdiv>
   13198:	4603      	mov	r3, r0
   1319a:	4618      	mov	r0, r3
   1319c:	f004 fc10 	bl	179c0 <__aeabi_f2d>
   131a0:	4602      	mov	r2, r0
   131a2:	460b      	mov	r3, r1
   131a4:	f04f 0000 	mov.w	r0, #0
   131a8:	f04f 0100 	mov.w	r1, #0
   131ac:	f004 faa8 	bl	17700 <__aeabi_dsub>
   131b0:	4602      	mov	r2, r0
   131b2:	460b      	mov	r3, r1
   131b4:	4620      	mov	r0, r4
   131b6:	4629      	mov	r1, r5
   131b8:	f004 faa4 	bl	17704 <__adddf3>
   131bc:	4602      	mov	r2, r0
   131be:	460b      	mov	r3, r1
   131c0:	4610      	mov	r0, r2
   131c2:	4619      	mov	r1, r3
   131c4:	f004 ff32 	bl	1802c <__aeabi_d2f>
   131c8:	4602      	mov	r2, r0
   131ca:	f240 23b8 	movw	r3, #696	; 0x2b8
   131ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131d2:	601a      	str	r2, [r3, #0]
   131d4:	f240 23b8 	movw	r3, #696	; 0x2b8
   131d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131dc:	681b      	ldr	r3, [r3, #0]
   131de:	4618      	mov	r0, r3
   131e0:	f04f 0100 	mov.w	r1, #0
   131e4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   131e8:	f005 fa30 	bl	1864c <__aeabi_fcmpge>
   131ec:	4603      	mov	r3, r0
   131ee:	2b00      	cmp	r3, #0
   131f0:	d005      	beq.n	131fe <auto_nav+0x1176>
   131f2:	f240 23b8 	movw	r3, #696	; 0x2b8
   131f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fa:	681a      	ldr	r2, [r3, #0]
   131fc:	e003      	b.n	13206 <auto_nav+0x117e>
   131fe:	f04f 0200 	mov.w	r2, #0
   13202:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13206:	f240 23b8 	movw	r3, #696	; 0x2b8
   1320a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320e:	601a      	str	r2, [r3, #0]
   13210:	f240 23b8 	movw	r3, #696	; 0x2b8
   13214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13218:	681b      	ldr	r3, [r3, #0]
   1321a:	4618      	mov	r0, r3
   1321c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13220:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13224:	f005 fa08 	bl	18638 <__aeabi_fcmple>
   13228:	4603      	mov	r3, r0
   1322a:	2b00      	cmp	r3, #0
   1322c:	d005      	beq.n	1323a <auto_nav+0x11b2>
   1322e:	f240 23b8 	movw	r3, #696	; 0x2b8
   13232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13236:	681a      	ldr	r2, [r3, #0]
   13238:	e003      	b.n	13242 <auto_nav+0x11ba>
   1323a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1323e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13242:	f240 23b8 	movw	r3, #696	; 0x2b8
   13246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1324a:	601a      	str	r2, [r3, #0]
   1324c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13254:	681a      	ldr	r2, [r3, #0]
   13256:	f64a 6358 	movw	r3, #44632	; 0xae58
   1325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1325e:	681b      	ldr	r3, [r3, #0]
   13260:	4610      	mov	r0, r2
   13262:	4619      	mov	r1, r3
   13264:	f004 ff36 	bl	180d4 <__aeabi_fsub>
   13268:	4603      	mov	r3, r0
   1326a:	4618      	mov	r0, r3
   1326c:	f004 fba8 	bl	179c0 <__aeabi_f2d>
   13270:	4604      	mov	r4, r0
   13272:	460d      	mov	r5, r1
   13274:	f24b 0364 	movw	r3, #45156	; 0xb064
   13278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1327c:	681a      	ldr	r2, [r3, #0]
   1327e:	f64a 6354 	movw	r3, #44628	; 0xae54
   13282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13286:	681b      	ldr	r3, [r3, #0]
   13288:	4610      	mov	r0, r2
   1328a:	4619      	mov	r1, r3
   1328c:	f004 ff22 	bl	180d4 <__aeabi_fsub>
   13290:	4603      	mov	r3, r0
   13292:	4618      	mov	r0, r3
   13294:	f004 fb94 	bl	179c0 <__aeabi_f2d>
   13298:	4602      	mov	r2, r0
   1329a:	460b      	mov	r3, r1
   1329c:	4620      	mov	r0, r4
   1329e:	4629      	mov	r1, r5
   132a0:	f002 fa12 	bl	156c8 <pp_atan2>
   132a4:	4602      	mov	r2, r0
   132a6:	460b      	mov	r3, r1
   132a8:	4610      	mov	r0, r2
   132aa:	4619      	mov	r1, r3
   132ac:	f004 febe 	bl	1802c <__aeabi_d2f>
   132b0:	4603      	mov	r3, r0
   132b2:	61fb      	str	r3, [r7, #28]
   132b4:	69f8      	ldr	r0, [r7, #28]
   132b6:	f004 fb83 	bl	179c0 <__aeabi_f2d>
   132ba:	4604      	mov	r4, r0
   132bc:	460d      	mov	r5, r1
   132be:	f24b 039c 	movw	r3, #45212	; 0xb09c
   132c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c6:	681b      	ldr	r3, [r3, #0]
   132c8:	4618      	mov	r0, r3
   132ca:	f04f 0100 	mov.w	r1, #0
   132ce:	f2cc 2148 	movt	r1, #49736	; 0xc248
   132d2:	f005 f809 	bl	182e8 <__aeabi_fmul>
   132d6:	4603      	mov	r3, r0
   132d8:	4618      	mov	r0, r3
   132da:	f004 fb71 	bl	179c0 <__aeabi_f2d>
   132de:	4602      	mov	r2, r0
   132e0:	460b      	mov	r3, r1
   132e2:	f04f 0000 	mov.w	r0, #0
   132e6:	f04f 0100 	mov.w	r1, #0
   132ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
   132ee:	f004 fce5 	bl	17cbc <__aeabi_ddiv>
   132f2:	4602      	mov	r2, r0
   132f4:	460b      	mov	r3, r1
   132f6:	4620      	mov	r0, r4
   132f8:	4629      	mov	r1, r5
   132fa:	f004 fa03 	bl	17704 <__adddf3>
   132fe:	4602      	mov	r2, r0
   13300:	460b      	mov	r3, r1
   13302:	4610      	mov	r0, r2
   13304:	4619      	mov	r1, r3
   13306:	f004 fe91 	bl	1802c <__aeabi_d2f>
   1330a:	4603      	mov	r3, r0
   1330c:	61bb      	str	r3, [r7, #24]
   1330e:	f64a 6354 	movw	r3, #44628	; 0xae54
   13312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13316:	681b      	ldr	r3, [r3, #0]
   13318:	4618      	mov	r0, r3
   1331a:	f004 fb51 	bl	179c0 <__aeabi_f2d>
   1331e:	4604      	mov	r4, r0
   13320:	460d      	mov	r5, r1
   13322:	69b8      	ldr	r0, [r7, #24]
   13324:	f004 fb4c 	bl	179c0 <__aeabi_f2d>
   13328:	4602      	mov	r2, r0
   1332a:	460b      	mov	r3, r1
   1332c:	4610      	mov	r0, r2
   1332e:	4619      	mov	r1, r3
   13330:	a3b1      	add	r3, pc, #708	; (adr r3, 135f8 <auto_nav+0x1570>)
   13332:	e9d3 2300 	ldrd	r2, r3, [r3]
   13336:	f004 f9e5 	bl	17704 <__adddf3>
   1333a:	4602      	mov	r2, r0
   1333c:	460b      	mov	r3, r1
   1333e:	4610      	mov	r0, r2
   13340:	4619      	mov	r1, r3
   13342:	f002 fa81 	bl	15848 <pp_sin>
   13346:	4602      	mov	r2, r0
   13348:	460b      	mov	r3, r1
   1334a:	4610      	mov	r0, r2
   1334c:	4619      	mov	r1, r3
   1334e:	f04f 0200 	mov.w	r2, #0
   13352:	f04f 0300 	mov.w	r3, #0
   13356:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1335a:	f004 fb85 	bl	17a68 <__aeabi_dmul>
   1335e:	4602      	mov	r2, r0
   13360:	460b      	mov	r3, r1
   13362:	4620      	mov	r0, r4
   13364:	4629      	mov	r1, r5
   13366:	f004 f9cd 	bl	17704 <__adddf3>
   1336a:	4602      	mov	r2, r0
   1336c:	460b      	mov	r3, r1
   1336e:	4610      	mov	r0, r2
   13370:	4619      	mov	r1, r3
   13372:	f004 fe5b 	bl	1802c <__aeabi_d2f>
   13376:	4606      	mov	r6, r0
   13378:	f64a 6358 	movw	r3, #44632	; 0xae58
   1337c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13380:	681b      	ldr	r3, [r3, #0]
   13382:	4618      	mov	r0, r3
   13384:	f004 fb1c 	bl	179c0 <__aeabi_f2d>
   13388:	4604      	mov	r4, r0
   1338a:	460d      	mov	r5, r1
   1338c:	69b8      	ldr	r0, [r7, #24]
   1338e:	f004 fb17 	bl	179c0 <__aeabi_f2d>
   13392:	4602      	mov	r2, r0
   13394:	460b      	mov	r3, r1
   13396:	4610      	mov	r0, r2
   13398:	4619      	mov	r1, r3
   1339a:	f002 fa55 	bl	15848 <pp_sin>
   1339e:	4602      	mov	r2, r0
   133a0:	460b      	mov	r3, r1
   133a2:	4610      	mov	r0, r2
   133a4:	4619      	mov	r1, r3
   133a6:	f04f 0200 	mov.w	r2, #0
   133aa:	f04f 0300 	mov.w	r3, #0
   133ae:	f2c4 0349 	movt	r3, #16457	; 0x4049
   133b2:	f004 fb59 	bl	17a68 <__aeabi_dmul>
   133b6:	4602      	mov	r2, r0
   133b8:	460b      	mov	r3, r1
   133ba:	4620      	mov	r0, r4
   133bc:	4629      	mov	r1, r5
   133be:	f004 f9a1 	bl	17704 <__adddf3>
   133c2:	4602      	mov	r2, r0
   133c4:	460b      	mov	r3, r1
   133c6:	4610      	mov	r0, r2
   133c8:	4619      	mov	r1, r3
   133ca:	f004 fe2f 	bl	1802c <__aeabi_d2f>
   133ce:	4603      	mov	r3, r0
   133d0:	4630      	mov	r0, r6
   133d2:	4619      	mov	r1, r3
   133d4:	f001 f81c 	bl	14410 <fly_to_xy>
   133d8:	69b8      	ldr	r0, [r7, #24]
   133da:	f004 faf1 	bl	179c0 <__aeabi_f2d>
   133de:	4602      	mov	r2, r0
   133e0:	460b      	mov	r3, r1
   133e2:	a185      	add	r1, pc, #532	; (adr r1, 135f8 <auto_nav+0x1570>)
   133e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   133e8:	f004 f98a 	bl	17700 <__aeabi_dsub>
   133ec:	4602      	mov	r2, r0
   133ee:	460b      	mov	r3, r1
   133f0:	4610      	mov	r0, r2
   133f2:	4619      	mov	r1, r3
   133f4:	a382      	add	r3, pc, #520	; (adr r3, 13600 <auto_nav+0x1578>)
   133f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   133fa:	f004 fc5f 	bl	17cbc <__aeabi_ddiv>
   133fe:	4602      	mov	r2, r0
   13400:	460b      	mov	r3, r1
   13402:	4610      	mov	r0, r2
   13404:	4619      	mov	r1, r3
   13406:	f04f 0200 	mov.w	r2, #0
   1340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1340e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13412:	f004 fb29 	bl	17a68 <__aeabi_dmul>
   13416:	4602      	mov	r2, r0
   13418:	460b      	mov	r3, r1
   1341a:	4610      	mov	r0, r2
   1341c:	4619      	mov	r1, r3
   1341e:	f004 fe05 	bl	1802c <__aeabi_d2f>
   13422:	4602      	mov	r2, r0
   13424:	f64a 6324 	movw	r3, #44580	; 0xae24
   13428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1342c:	601a      	str	r2, [r3, #0]
   1342e:	e012      	b.n	13456 <auto_nav+0x13ce>
   13430:	f64a 6324 	movw	r3, #44580	; 0xae24
   13434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13438:	681b      	ldr	r3, [r3, #0]
   1343a:	4618      	mov	r0, r3
   1343c:	f04f 0100 	mov.w	r1, #0
   13440:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13444:	f004 fe48 	bl	180d8 <__addsf3>
   13448:	4603      	mov	r3, r0
   1344a:	461a      	mov	r2, r3
   1344c:	f64a 6324 	movw	r3, #44580	; 0xae24
   13450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13454:	601a      	str	r2, [r3, #0]
   13456:	f64a 6324 	movw	r3, #44580	; 0xae24
   1345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1345e:	681b      	ldr	r3, [r3, #0]
   13460:	4618      	mov	r0, r3
   13462:	f04f 0100 	mov.w	r1, #0
   13466:	f005 f8dd 	bl	18624 <__aeabi_fcmplt>
   1346a:	4603      	mov	r3, r0
   1346c:	2b00      	cmp	r3, #0
   1346e:	d1df      	bne.n	13430 <auto_nav+0x13a8>
   13470:	e012      	b.n	13498 <auto_nav+0x1410>
   13472:	f64a 6324 	movw	r3, #44580	; 0xae24
   13476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1347a:	681b      	ldr	r3, [r3, #0]
   1347c:	4618      	mov	r0, r3
   1347e:	f04f 0100 	mov.w	r1, #0
   13482:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13486:	f004 fe25 	bl	180d4 <__aeabi_fsub>
   1348a:	4603      	mov	r3, r0
   1348c:	461a      	mov	r2, r3
   1348e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13496:	601a      	str	r2, [r3, #0]
   13498:	f64a 6324 	movw	r3, #44580	; 0xae24
   1349c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134a0:	681b      	ldr	r3, [r3, #0]
   134a2:	4618      	mov	r0, r3
   134a4:	f04f 0100 	mov.w	r1, #0
   134a8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   134ac:	f005 f8ce 	bl	1864c <__aeabi_fcmpge>
   134b0:	4603      	mov	r3, r0
   134b2:	2b00      	cmp	r3, #0
   134b4:	d1dd      	bne.n	13472 <auto_nav+0x13ea>
        return;
   134b6:	f000 beb9 	b.w	1422c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   134ba:	f64a 6308 	movw	r3, #44552	; 0xae08
   134be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134c2:	781b      	ldrb	r3, [r3, #0]
   134c4:	2b01      	cmp	r3, #1
   134c6:	f040 86b1 	bne.w	1422c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   134ca:	f64a 6308 	movw	r3, #44552	; 0xae08
   134ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134d2:	2201      	movs	r2, #1
   134d4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   134d6:	f64a 6309 	movw	r3, #44553	; 0xae09
   134da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134de:	781b      	ldrb	r3, [r3, #0]
   134e0:	3301      	adds	r3, #1
   134e2:	b2da      	uxtb	r2, r3
   134e4:	f64a 6309 	movw	r3, #44553	; 0xae09
   134e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ec:	701a      	strb	r2, [r3, #0]
   134ee:	f64a 6308 	movw	r3, #44552	; 0xae08
   134f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f6:	2200      	movs	r2, #0
   134f8:	701a      	strb	r2, [r3, #0]
   134fa:	f64a 631e 	movw	r3, #44574	; 0xae1e
   134fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13502:	2200      	movs	r2, #0
   13504:	801a      	strh	r2, [r3, #0]
   13506:	f24b 0364 	movw	r3, #45156	; 0xb064
   1350a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1350e:	681a      	ldr	r2, [r3, #0]
   13510:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13518:	601a      	str	r2, [r3, #0]
   1351a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1351e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13522:	681a      	ldr	r2, [r3, #0]
   13524:	f64a 6310 	movw	r3, #44560	; 0xae10
   13528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1352c:	601a      	str	r2, [r3, #0]
   1352e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13536:	2200      	movs	r2, #0
   13538:	801a      	strh	r2, [r3, #0]
   1353a:	f64a 6320 	movw	r3, #44576	; 0xae20
   1353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13542:	f04f 0200 	mov.w	r2, #0
   13546:	601a      	str	r2, [r3, #0]
   13548:	f000 be70 	b.w	1422c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1354c:	f64a 6309 	movw	r3, #44553	; 0xae09
   13550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13554:	781b      	ldrb	r3, [r3, #0]
   13556:	2b04      	cmp	r3, #4
   13558:	f040 8202 	bne.w	13960 <auto_nav+0x18d8>
{
    nav_block = 4;
   1355c:	f64a 6309 	movw	r3, #44553	; 0xae09
   13560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13564:	2204      	movs	r2, #4
   13566:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13568:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1356c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	2b00      	cmp	r3, #0
   13574:	d007      	beq.n	13586 <auto_nav+0x14fe>
   13576:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1357a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1357e:	2200      	movs	r2, #0
   13580:	701a      	strb	r2, [r3, #0]
   13582:	2301      	movs	r3, #1
   13584:	e000      	b.n	13588 <auto_nav+0x1500>
   13586:	2300      	movs	r3, #0
   13588:	2b00      	cmp	r3, #0
   1358a:	d03d      	beq.n	13608 <auto_nav+0x1580>
   1358c:	f64a 6309 	movw	r3, #44553	; 0xae09
   13590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13594:	2205      	movs	r2, #5
   13596:	701a      	strb	r2, [r3, #0]
   13598:	f64a 6308 	movw	r3, #44552	; 0xae08
   1359c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a0:	2200      	movs	r2, #0
   135a2:	701a      	strb	r2, [r3, #0]
   135a4:	f64a 631e 	movw	r3, #44574	; 0xae1e
   135a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ac:	2200      	movs	r2, #0
   135ae:	801a      	strh	r2, [r3, #0]
   135b0:	f24b 0364 	movw	r3, #45156	; 0xb064
   135b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135b8:	681a      	ldr	r2, [r3, #0]
   135ba:	f64a 630c 	movw	r3, #44556	; 0xae0c
   135be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c2:	601a      	str	r2, [r3, #0]
   135c4:	f24b 0368 	movw	r3, #45160	; 0xb068
   135c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135cc:	681a      	ldr	r2, [r3, #0]
   135ce:	f64a 6310 	movw	r3, #44560	; 0xae10
   135d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d6:	601a      	str	r2, [r3, #0]
   135d8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   135dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e0:	2200      	movs	r2, #0
   135e2:	801a      	strh	r2, [r3, #0]
   135e4:	f64a 6320 	movw	r3, #44576	; 0xae20
   135e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ec:	f04f 0200 	mov.w	r2, #0
   135f0:	601a      	str	r2, [r3, #0]
   135f2:	f000 be1b 	b.w	1422c <auto_nav+0x21a4>
   135f6:	bf00      	nop
   135f8:	54442d18 	.word	0x54442d18
   135fc:	3ff921fb 	.word	0x3ff921fb
   13600:	54442d18 	.word	0x54442d18
   13604:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13608:	f64a 6308 	movw	r3, #44552	; 0xae08
   1360c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13610:	781b      	ldrb	r3, [r3, #0]
   13612:	2b00      	cmp	r3, #0
   13614:	f040 815b 	bne.w	138ce <auto_nav+0x1846>
    {
        nav_stage = 0;
   13618:	f64a 6308 	movw	r3, #44552	; 0xae08
   1361c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13620:	2200      	movs	r2, #0
   13622:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13624:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1362c:	2200      	movs	r2, #0
   1362e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13630:	f64a 6334 	movw	r3, #44596	; 0xae34
   13634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13638:	f04f 0200 	mov.w	r2, #0
   1363c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1363e:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13646:	2203      	movs	r2, #3
   13648:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1364a:	f240 23bc 	movw	r3, #700	; 0x2bc
   1364e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13652:	689a      	ldr	r2, [r3, #8]
   13654:	f240 23b8 	movw	r3, #696	; 0x2b8
   13658:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1365c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1365e:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13666:	f04f 0200 	mov.w	r2, #0
   1366a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1366c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13674:	681a      	ldr	r2, [r3, #0]
   13676:	f240 23bc 	movw	r3, #700	; 0x2bc
   1367a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1367e:	685b      	ldr	r3, [r3, #4]
   13680:	4610      	mov	r0, r2
   13682:	4619      	mov	r1, r3
   13684:	f004 fd26 	bl	180d4 <__aeabi_fsub>
   13688:	4603      	mov	r3, r0
   1368a:	4618      	mov	r0, r3
   1368c:	f004 f998 	bl	179c0 <__aeabi_f2d>
   13690:	4604      	mov	r4, r0
   13692:	460d      	mov	r5, r1
   13694:	f24b 0364 	movw	r3, #45156	; 0xb064
   13698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369c:	681a      	ldr	r2, [r3, #0]
   1369e:	f240 23bc 	movw	r3, #700	; 0x2bc
   136a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136a6:	681b      	ldr	r3, [r3, #0]
   136a8:	4610      	mov	r0, r2
   136aa:	4619      	mov	r1, r3
   136ac:	f004 fd12 	bl	180d4 <__aeabi_fsub>
   136b0:	4603      	mov	r3, r0
   136b2:	4618      	mov	r0, r3
   136b4:	f004 f984 	bl	179c0 <__aeabi_f2d>
   136b8:	4602      	mov	r2, r0
   136ba:	460b      	mov	r3, r1
   136bc:	4620      	mov	r0, r4
   136be:	4629      	mov	r1, r5
   136c0:	f002 f802 	bl	156c8 <pp_atan2>
   136c4:	4602      	mov	r2, r0
   136c6:	460b      	mov	r3, r1
   136c8:	4610      	mov	r0, r2
   136ca:	4619      	mov	r1, r3
   136cc:	f004 fcae 	bl	1802c <__aeabi_d2f>
   136d0:	4603      	mov	r3, r0
   136d2:	617b      	str	r3, [r7, #20]
   136d4:	6978      	ldr	r0, [r7, #20]
   136d6:	f004 f973 	bl	179c0 <__aeabi_f2d>
   136da:	4604      	mov	r4, r0
   136dc:	460d      	mov	r5, r1
   136de:	f24b 039c 	movw	r3, #45212	; 0xb09c
   136e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e6:	681b      	ldr	r3, [r3, #0]
   136e8:	4618      	mov	r0, r3
   136ea:	f04f 0100 	mov.w	r1, #0
   136ee:	f2cc 3116 	movt	r1, #49942	; 0xc316
   136f2:	f004 fdf9 	bl	182e8 <__aeabi_fmul>
   136f6:	4603      	mov	r3, r0
   136f8:	4618      	mov	r0, r3
   136fa:	f004 f961 	bl	179c0 <__aeabi_f2d>
   136fe:	4602      	mov	r2, r0
   13700:	460b      	mov	r3, r1
   13702:	f04f 0000 	mov.w	r0, #0
   13706:	f04f 0100 	mov.w	r1, #0
   1370a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1370e:	f004 fad5 	bl	17cbc <__aeabi_ddiv>
   13712:	4602      	mov	r2, r0
   13714:	460b      	mov	r3, r1
   13716:	4620      	mov	r0, r4
   13718:	4629      	mov	r1, r5
   1371a:	f003 fff3 	bl	17704 <__adddf3>
   1371e:	4602      	mov	r2, r0
   13720:	460b      	mov	r3, r1
   13722:	4610      	mov	r0, r2
   13724:	4619      	mov	r1, r3
   13726:	f004 fc81 	bl	1802c <__aeabi_d2f>
   1372a:	4603      	mov	r3, r0
   1372c:	613b      	str	r3, [r7, #16]
   1372e:	f240 23bc 	movw	r3, #700	; 0x2bc
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	681b      	ldr	r3, [r3, #0]
   13738:	4618      	mov	r0, r3
   1373a:	f004 f941 	bl	179c0 <__aeabi_f2d>
   1373e:	4604      	mov	r4, r0
   13740:	460d      	mov	r5, r1
   13742:	6938      	ldr	r0, [r7, #16]
   13744:	f004 f93c 	bl	179c0 <__aeabi_f2d>
   13748:	4602      	mov	r2, r0
   1374a:	460b      	mov	r3, r1
   1374c:	4610      	mov	r0, r2
   1374e:	4619      	mov	r1, r3
   13750:	a3af      	add	r3, pc, #700	; (adr r3, 13a10 <auto_nav+0x1988>)
   13752:	e9d3 2300 	ldrd	r2, r3, [r3]
   13756:	f003 ffd5 	bl	17704 <__adddf3>
   1375a:	4602      	mov	r2, r0
   1375c:	460b      	mov	r3, r1
   1375e:	4610      	mov	r0, r2
   13760:	4619      	mov	r1, r3
   13762:	f002 f871 	bl	15848 <pp_sin>
   13766:	4602      	mov	r2, r0
   13768:	460b      	mov	r3, r1
   1376a:	4610      	mov	r0, r2
   1376c:	4619      	mov	r1, r3
   1376e:	a3aa      	add	r3, pc, #680	; (adr r3, 13a18 <auto_nav+0x1990>)
   13770:	e9d3 2300 	ldrd	r2, r3, [r3]
   13774:	f004 f978 	bl	17a68 <__aeabi_dmul>
   13778:	4602      	mov	r2, r0
   1377a:	460b      	mov	r3, r1
   1377c:	4620      	mov	r0, r4
   1377e:	4629      	mov	r1, r5
   13780:	f003 ffc0 	bl	17704 <__adddf3>
   13784:	4602      	mov	r2, r0
   13786:	460b      	mov	r3, r1
   13788:	4610      	mov	r0, r2
   1378a:	4619      	mov	r1, r3
   1378c:	f004 fc4e 	bl	1802c <__aeabi_d2f>
   13790:	4606      	mov	r6, r0
   13792:	f240 23bc 	movw	r3, #700	; 0x2bc
   13796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1379a:	685b      	ldr	r3, [r3, #4]
   1379c:	4618      	mov	r0, r3
   1379e:	f004 f90f 	bl	179c0 <__aeabi_f2d>
   137a2:	4604      	mov	r4, r0
   137a4:	460d      	mov	r5, r1
   137a6:	6938      	ldr	r0, [r7, #16]
   137a8:	f004 f90a 	bl	179c0 <__aeabi_f2d>
   137ac:	4602      	mov	r2, r0
   137ae:	460b      	mov	r3, r1
   137b0:	4610      	mov	r0, r2
   137b2:	4619      	mov	r1, r3
   137b4:	f002 f848 	bl	15848 <pp_sin>
   137b8:	4602      	mov	r2, r0
   137ba:	460b      	mov	r3, r1
   137bc:	4610      	mov	r0, r2
   137be:	4619      	mov	r1, r3
   137c0:	a395      	add	r3, pc, #596	; (adr r3, 13a18 <auto_nav+0x1990>)
   137c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   137c6:	f004 f94f 	bl	17a68 <__aeabi_dmul>
   137ca:	4602      	mov	r2, r0
   137cc:	460b      	mov	r3, r1
   137ce:	4620      	mov	r0, r4
   137d0:	4629      	mov	r1, r5
   137d2:	f003 ff97 	bl	17704 <__adddf3>
   137d6:	4602      	mov	r2, r0
   137d8:	460b      	mov	r3, r1
   137da:	4610      	mov	r0, r2
   137dc:	4619      	mov	r1, r3
   137de:	f004 fc25 	bl	1802c <__aeabi_d2f>
   137e2:	4603      	mov	r3, r0
   137e4:	4630      	mov	r0, r6
   137e6:	4619      	mov	r1, r3
   137e8:	f000 fe12 	bl	14410 <fly_to_xy>
   137ec:	6938      	ldr	r0, [r7, #16]
   137ee:	f004 f8e7 	bl	179c0 <__aeabi_f2d>
   137f2:	4602      	mov	r2, r0
   137f4:	460b      	mov	r3, r1
   137f6:	a186      	add	r1, pc, #536	; (adr r1, 13a10 <auto_nav+0x1988>)
   137f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   137fc:	f003 ff80 	bl	17700 <__aeabi_dsub>
   13800:	4602      	mov	r2, r0
   13802:	460b      	mov	r3, r1
   13804:	4610      	mov	r0, r2
   13806:	4619      	mov	r1, r3
   13808:	a385      	add	r3, pc, #532	; (adr r3, 13a20 <auto_nav+0x1998>)
   1380a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1380e:	f004 fa55 	bl	17cbc <__aeabi_ddiv>
   13812:	4602      	mov	r2, r0
   13814:	460b      	mov	r3, r1
   13816:	4610      	mov	r0, r2
   13818:	4619      	mov	r1, r3
   1381a:	f04f 0200 	mov.w	r2, #0
   1381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13822:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13826:	f004 f91f 	bl	17a68 <__aeabi_dmul>
   1382a:	4602      	mov	r2, r0
   1382c:	460b      	mov	r3, r1
   1382e:	4610      	mov	r0, r2
   13830:	4619      	mov	r1, r3
   13832:	f004 fbfb 	bl	1802c <__aeabi_d2f>
   13836:	4602      	mov	r2, r0
   13838:	f64a 6324 	movw	r3, #44580	; 0xae24
   1383c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13840:	601a      	str	r2, [r3, #0]
   13842:	e012      	b.n	1386a <auto_nav+0x17e2>
   13844:	f64a 6324 	movw	r3, #44580	; 0xae24
   13848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384c:	681b      	ldr	r3, [r3, #0]
   1384e:	4618      	mov	r0, r3
   13850:	f04f 0100 	mov.w	r1, #0
   13854:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13858:	f004 fc3e 	bl	180d8 <__addsf3>
   1385c:	4603      	mov	r3, r0
   1385e:	461a      	mov	r2, r3
   13860:	f64a 6324 	movw	r3, #44580	; 0xae24
   13864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13868:	601a      	str	r2, [r3, #0]
   1386a:	f64a 6324 	movw	r3, #44580	; 0xae24
   1386e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13872:	681b      	ldr	r3, [r3, #0]
   13874:	4618      	mov	r0, r3
   13876:	f04f 0100 	mov.w	r1, #0
   1387a:	f004 fed3 	bl	18624 <__aeabi_fcmplt>
   1387e:	4603      	mov	r3, r0
   13880:	2b00      	cmp	r3, #0
   13882:	d1df      	bne.n	13844 <auto_nav+0x17bc>
   13884:	e012      	b.n	138ac <auto_nav+0x1824>
   13886:	f64a 6324 	movw	r3, #44580	; 0xae24
   1388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388e:	681b      	ldr	r3, [r3, #0]
   13890:	4618      	mov	r0, r3
   13892:	f04f 0100 	mov.w	r1, #0
   13896:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1389a:	f004 fc1b 	bl	180d4 <__aeabi_fsub>
   1389e:	4603      	mov	r3, r0
   138a0:	461a      	mov	r2, r3
   138a2:	f64a 6324 	movw	r3, #44580	; 0xae24
   138a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138aa:	601a      	str	r2, [r3, #0]
   138ac:	f64a 6324 	movw	r3, #44580	; 0xae24
   138b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138b4:	681b      	ldr	r3, [r3, #0]
   138b6:	4618      	mov	r0, r3
   138b8:	f04f 0100 	mov.w	r1, #0
   138bc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   138c0:	f004 fec4 	bl	1864c <__aeabi_fcmpge>
   138c4:	4603      	mov	r3, r0
   138c6:	2b00      	cmp	r3, #0
   138c8:	d1dd      	bne.n	13886 <auto_nav+0x17fe>
        return;
   138ca:	f000 bcaf 	b.w	1422c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   138ce:	f64a 6308 	movw	r3, #44552	; 0xae08
   138d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138d6:	781b      	ldrb	r3, [r3, #0]
   138d8:	2b01      	cmp	r3, #1
   138da:	f040 84a7 	bne.w	1422c <auto_nav+0x21a4>
    {
        nav_stage =1;
   138de:	f64a 6308 	movw	r3, #44552	; 0xae08
   138e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138e6:	2201      	movs	r2, #1
   138e8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   138ea:	f64a 6309 	movw	r3, #44553	; 0xae09
   138ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	3301      	adds	r3, #1
   138f6:	b2da      	uxtb	r2, r3
   138f8:	f64a 6309 	movw	r3, #44553	; 0xae09
   138fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13900:	701a      	strb	r2, [r3, #0]
   13902:	f64a 6308 	movw	r3, #44552	; 0xae08
   13906:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390a:	2200      	movs	r2, #0
   1390c:	701a      	strb	r2, [r3, #0]
   1390e:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13916:	2200      	movs	r2, #0
   13918:	801a      	strh	r2, [r3, #0]
   1391a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13922:	681a      	ldr	r2, [r3, #0]
   13924:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1392c:	601a      	str	r2, [r3, #0]
   1392e:	f24b 0368 	movw	r3, #45160	; 0xb068
   13932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13936:	681a      	ldr	r2, [r3, #0]
   13938:	f64a 6310 	movw	r3, #44560	; 0xae10
   1393c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13940:	601a      	str	r2, [r3, #0]
   13942:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13946:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1394a:	2200      	movs	r2, #0
   1394c:	801a      	strh	r2, [r3, #0]
   1394e:	f64a 6320 	movw	r3, #44576	; 0xae20
   13952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13956:	f04f 0200 	mov.w	r2, #0
   1395a:	601a      	str	r2, [r3, #0]
   1395c:	f000 bc66 	b.w	1422c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13960:	f64a 6309 	movw	r3, #44553	; 0xae09
   13964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13968:	781b      	ldrb	r3, [r3, #0]
   1396a:	2b05      	cmp	r3, #5
   1396c:	f040 845e 	bne.w	1422c <auto_nav+0x21a4>
{
    nav_block = 5;
   13970:	f64a 6309 	movw	r3, #44553	; 0xae09
   13974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13978:	2205      	movs	r2, #5
   1397a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   1397c:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	2b00      	cmp	r3, #0
   13988:	d007      	beq.n	1399a <auto_nav+0x1912>
   1398a:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1398e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13992:	2200      	movs	r2, #0
   13994:	701a      	strb	r2, [r3, #0]
   13996:	2301      	movs	r3, #1
   13998:	e000      	b.n	1399c <auto_nav+0x1914>
   1399a:	2300      	movs	r3, #0
   1399c:	2b00      	cmp	r3, #0
   1399e:	d043      	beq.n	13a28 <auto_nav+0x19a0>
   139a0:	f64a 6309 	movw	r3, #44553	; 0xae09
   139a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139a8:	2201      	movs	r2, #1
   139aa:	701a      	strb	r2, [r3, #0]
   139ac:	f64a 6308 	movw	r3, #44552	; 0xae08
   139b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139b4:	2200      	movs	r2, #0
   139b6:	701a      	strb	r2, [r3, #0]
   139b8:	f64a 631e 	movw	r3, #44574	; 0xae1e
   139bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139c0:	2200      	movs	r2, #0
   139c2:	801a      	strh	r2, [r3, #0]
   139c4:	f24b 0364 	movw	r3, #45156	; 0xb064
   139c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139cc:	681a      	ldr	r2, [r3, #0]
   139ce:	f64a 630c 	movw	r3, #44556	; 0xae0c
   139d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d6:	601a      	str	r2, [r3, #0]
   139d8:	f24b 0368 	movw	r3, #45160	; 0xb068
   139dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e0:	681a      	ldr	r2, [r3, #0]
   139e2:	f64a 6310 	movw	r3, #44560	; 0xae10
   139e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ea:	601a      	str	r2, [r3, #0]
   139ec:	f64a 631c 	movw	r3, #44572	; 0xae1c
   139f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139f4:	2200      	movs	r2, #0
   139f6:	801a      	strh	r2, [r3, #0]
   139f8:	f64a 6320 	movw	r3, #44576	; 0xae20
   139fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a00:	f04f 0200 	mov.w	r2, #0
   13a04:	601a      	str	r2, [r3, #0]
   13a06:	f000 bc11 	b.w	1422c <auto_nav+0x21a4>
   13a0a:	bf00      	nop
   13a0c:	f3af 8000 	nop.w
   13a10:	54442d18 	.word	0x54442d18
   13a14:	3ff921fb 	.word	0x3ff921fb
   13a18:	00000000 	.word	0x00000000
   13a1c:	4062c000 	.word	0x4062c000
   13a20:	54442d18 	.word	0x54442d18
   13a24:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13a28:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	2b00      	cmp	r3, #0
   13a34:	d133      	bne.n	13a9e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13a36:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a3e:	2200      	movs	r2, #0
   13a40:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13a42:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4a:	781b      	ldrb	r3, [r3, #0]
   13a4c:	3301      	adds	r3, #1
   13a4e:	b2da      	uxtb	r2, r3
   13a50:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a58:	701a      	strb	r2, [r3, #0]
   13a5a:	f24b 0364 	movw	r3, #45156	; 0xb064
   13a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a62:	681a      	ldr	r2, [r3, #0]
   13a64:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a6c:	601a      	str	r2, [r3, #0]
   13a6e:	f24b 0368 	movw	r3, #45160	; 0xb068
   13a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a76:	681a      	ldr	r2, [r3, #0]
   13a78:	f64a 6310 	movw	r3, #44560	; 0xae10
   13a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a80:	601a      	str	r2, [r3, #0]
   13a82:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8a:	2200      	movs	r2, #0
   13a8c:	801a      	strh	r2, [r3, #0]
   13a8e:	f64a 6320 	movw	r3, #44576	; 0xae20
   13a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a96:	f04f 0200 	mov.w	r2, #0
   13a9a:	601a      	str	r2, [r3, #0]
   13a9c:	e3c6      	b.n	1422c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13a9e:	f64a 6308 	movw	r3, #44552	; 0xae08
   13aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa6:	781b      	ldrb	r3, [r3, #0]
   13aa8:	2b01      	cmp	r3, #1
   13aaa:	f040 81b5 	bne.w	13e18 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13aae:	f64a 6308 	movw	r3, #44552	; 0xae08
   13ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab6:	2201      	movs	r2, #1
   13ab8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13aba:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ac2:	2200      	movs	r2, #0
   13ac4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13ac6:	f64a 6334 	movw	r3, #44596	; 0xae34
   13aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ace:	f04f 0200 	mov.w	r2, #0
   13ad2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13ad4:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13adc:	2203      	movs	r2, #3
   13ade:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13ae0:	f240 23bc 	movw	r3, #700	; 0x2bc
   13ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae8:	695a      	ldr	r2, [r3, #20]
   13aea:	f240 23b8 	movw	r3, #696	; 0x2b8
   13aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13af4:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13afc:	f04f 0200 	mov.w	r2, #0
   13b00:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13b02:	f24b 0368 	movw	r3, #45160	; 0xb068
   13b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b0a:	681a      	ldr	r2, [r3, #0]
   13b0c:	f240 23bc 	movw	r3, #700	; 0x2bc
   13b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b14:	691b      	ldr	r3, [r3, #16]
   13b16:	4610      	mov	r0, r2
   13b18:	4619      	mov	r1, r3
   13b1a:	f004 fadb 	bl	180d4 <__aeabi_fsub>
   13b1e:	4603      	mov	r3, r0
   13b20:	4618      	mov	r0, r3
   13b22:	f003 ff4d 	bl	179c0 <__aeabi_f2d>
   13b26:	4604      	mov	r4, r0
   13b28:	460d      	mov	r5, r1
   13b2a:	f24b 0364 	movw	r3, #45156	; 0xb064
   13b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b32:	681a      	ldr	r2, [r3, #0]
   13b34:	f240 23bc 	movw	r3, #700	; 0x2bc
   13b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b3c:	68db      	ldr	r3, [r3, #12]
   13b3e:	4610      	mov	r0, r2
   13b40:	4619      	mov	r1, r3
   13b42:	f004 fac7 	bl	180d4 <__aeabi_fsub>
   13b46:	4603      	mov	r3, r0
   13b48:	4618      	mov	r0, r3
   13b4a:	f003 ff39 	bl	179c0 <__aeabi_f2d>
   13b4e:	4602      	mov	r2, r0
   13b50:	460b      	mov	r3, r1
   13b52:	4620      	mov	r0, r4
   13b54:	4629      	mov	r1, r5
   13b56:	f001 fdb7 	bl	156c8 <pp_atan2>
   13b5a:	4602      	mov	r2, r0
   13b5c:	460b      	mov	r3, r1
   13b5e:	4610      	mov	r0, r2
   13b60:	4619      	mov	r1, r3
   13b62:	f004 fa63 	bl	1802c <__aeabi_d2f>
   13b66:	4603      	mov	r3, r0
   13b68:	60fb      	str	r3, [r7, #12]
   13b6a:	68f8      	ldr	r0, [r7, #12]
   13b6c:	f003 ff28 	bl	179c0 <__aeabi_f2d>
   13b70:	4604      	mov	r4, r0
   13b72:	460d      	mov	r5, r1
   13b74:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7c:	681b      	ldr	r3, [r3, #0]
   13b7e:	4618      	mov	r0, r3
   13b80:	f04f 0100 	mov.w	r1, #0
   13b84:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13b88:	f004 fbae 	bl	182e8 <__aeabi_fmul>
   13b8c:	4603      	mov	r3, r0
   13b8e:	4618      	mov	r0, r3
   13b90:	f003 ff16 	bl	179c0 <__aeabi_f2d>
   13b94:	4602      	mov	r2, r0
   13b96:	460b      	mov	r3, r1
   13b98:	f04f 0000 	mov.w	r0, #0
   13b9c:	f04f 0100 	mov.w	r1, #0
   13ba0:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13ba4:	f004 f88a 	bl	17cbc <__aeabi_ddiv>
   13ba8:	4602      	mov	r2, r0
   13baa:	460b      	mov	r3, r1
   13bac:	4620      	mov	r0, r4
   13bae:	4629      	mov	r1, r5
   13bb0:	f003 fda8 	bl	17704 <__adddf3>
   13bb4:	4602      	mov	r2, r0
   13bb6:	460b      	mov	r3, r1
   13bb8:	4610      	mov	r0, r2
   13bba:	4619      	mov	r1, r3
   13bbc:	f004 fa36 	bl	1802c <__aeabi_d2f>
   13bc0:	4603      	mov	r3, r0
   13bc2:	60bb      	str	r3, [r7, #8]
   13bc4:	f240 23bc 	movw	r3, #700	; 0x2bc
   13bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bcc:	68db      	ldr	r3, [r3, #12]
   13bce:	4618      	mov	r0, r3
   13bd0:	f003 fef6 	bl	179c0 <__aeabi_f2d>
   13bd4:	4604      	mov	r4, r0
   13bd6:	460d      	mov	r5, r1
   13bd8:	68b8      	ldr	r0, [r7, #8]
   13bda:	f003 fef1 	bl	179c0 <__aeabi_f2d>
   13bde:	4602      	mov	r2, r0
   13be0:	460b      	mov	r3, r1
   13be2:	4610      	mov	r0, r2
   13be4:	4619      	mov	r1, r3
   13be6:	a388      	add	r3, pc, #544	; (adr r3, 13e08 <auto_nav+0x1d80>)
   13be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bec:	f003 fd8a 	bl	17704 <__adddf3>
   13bf0:	4602      	mov	r2, r0
   13bf2:	460b      	mov	r3, r1
   13bf4:	4610      	mov	r0, r2
   13bf6:	4619      	mov	r1, r3
   13bf8:	f001 fe26 	bl	15848 <pp_sin>
   13bfc:	4602      	mov	r2, r0
   13bfe:	460b      	mov	r3, r1
   13c00:	4610      	mov	r0, r2
   13c02:	4619      	mov	r1, r3
   13c04:	f04f 0200 	mov.w	r2, #0
   13c08:	f04f 0300 	mov.w	r3, #0
   13c0c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13c10:	f003 ff2a 	bl	17a68 <__aeabi_dmul>
   13c14:	4602      	mov	r2, r0
   13c16:	460b      	mov	r3, r1
   13c18:	4620      	mov	r0, r4
   13c1a:	4629      	mov	r1, r5
   13c1c:	f003 fd72 	bl	17704 <__adddf3>
   13c20:	4602      	mov	r2, r0
   13c22:	460b      	mov	r3, r1
   13c24:	4610      	mov	r0, r2
   13c26:	4619      	mov	r1, r3
   13c28:	f004 fa00 	bl	1802c <__aeabi_d2f>
   13c2c:	4606      	mov	r6, r0
   13c2e:	f240 23bc 	movw	r3, #700	; 0x2bc
   13c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c36:	691b      	ldr	r3, [r3, #16]
   13c38:	4618      	mov	r0, r3
   13c3a:	f003 fec1 	bl	179c0 <__aeabi_f2d>
   13c3e:	4604      	mov	r4, r0
   13c40:	460d      	mov	r5, r1
   13c42:	68b8      	ldr	r0, [r7, #8]
   13c44:	f003 febc 	bl	179c0 <__aeabi_f2d>
   13c48:	4602      	mov	r2, r0
   13c4a:	460b      	mov	r3, r1
   13c4c:	4610      	mov	r0, r2
   13c4e:	4619      	mov	r1, r3
   13c50:	f001 fdfa 	bl	15848 <pp_sin>
   13c54:	4602      	mov	r2, r0
   13c56:	460b      	mov	r3, r1
   13c58:	4610      	mov	r0, r2
   13c5a:	4619      	mov	r1, r3
   13c5c:	f04f 0200 	mov.w	r2, #0
   13c60:	f04f 0300 	mov.w	r3, #0
   13c64:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13c68:	f003 fefe 	bl	17a68 <__aeabi_dmul>
   13c6c:	4602      	mov	r2, r0
   13c6e:	460b      	mov	r3, r1
   13c70:	4620      	mov	r0, r4
   13c72:	4629      	mov	r1, r5
   13c74:	f003 fd46 	bl	17704 <__adddf3>
   13c78:	4602      	mov	r2, r0
   13c7a:	460b      	mov	r3, r1
   13c7c:	4610      	mov	r0, r2
   13c7e:	4619      	mov	r1, r3
   13c80:	f004 f9d4 	bl	1802c <__aeabi_d2f>
   13c84:	4603      	mov	r3, r0
   13c86:	4630      	mov	r0, r6
   13c88:	4619      	mov	r1, r3
   13c8a:	f000 fbc1 	bl	14410 <fly_to_xy>
   13c8e:	68b8      	ldr	r0, [r7, #8]
   13c90:	f003 fe96 	bl	179c0 <__aeabi_f2d>
   13c94:	4602      	mov	r2, r0
   13c96:	460b      	mov	r3, r1
   13c98:	a15b      	add	r1, pc, #364	; (adr r1, 13e08 <auto_nav+0x1d80>)
   13c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
   13c9e:	f003 fd2f 	bl	17700 <__aeabi_dsub>
   13ca2:	4602      	mov	r2, r0
   13ca4:	460b      	mov	r3, r1
   13ca6:	4610      	mov	r0, r2
   13ca8:	4619      	mov	r1, r3
   13caa:	a359      	add	r3, pc, #356	; (adr r3, 13e10 <auto_nav+0x1d88>)
   13cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cb0:	f004 f804 	bl	17cbc <__aeabi_ddiv>
   13cb4:	4602      	mov	r2, r0
   13cb6:	460b      	mov	r3, r1
   13cb8:	4610      	mov	r0, r2
   13cba:	4619      	mov	r1, r3
   13cbc:	f04f 0200 	mov.w	r2, #0
   13cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13cc4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13cc8:	f003 fece 	bl	17a68 <__aeabi_dmul>
   13ccc:	4602      	mov	r2, r0
   13cce:	460b      	mov	r3, r1
   13cd0:	4610      	mov	r0, r2
   13cd2:	4619      	mov	r1, r3
   13cd4:	f004 f9aa 	bl	1802c <__aeabi_d2f>
   13cd8:	4602      	mov	r2, r0
   13cda:	f64a 6324 	movw	r3, #44580	; 0xae24
   13cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce2:	601a      	str	r2, [r3, #0]
   13ce4:	e012      	b.n	13d0c <auto_nav+0x1c84>
   13ce6:	f64a 6324 	movw	r3, #44580	; 0xae24
   13cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cee:	681b      	ldr	r3, [r3, #0]
   13cf0:	4618      	mov	r0, r3
   13cf2:	f04f 0100 	mov.w	r1, #0
   13cf6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13cfa:	f004 f9ed 	bl	180d8 <__addsf3>
   13cfe:	4603      	mov	r3, r0
   13d00:	461a      	mov	r2, r3
   13d02:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d0a:	601a      	str	r2, [r3, #0]
   13d0c:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d14:	681b      	ldr	r3, [r3, #0]
   13d16:	4618      	mov	r0, r3
   13d18:	f04f 0100 	mov.w	r1, #0
   13d1c:	f004 fc82 	bl	18624 <__aeabi_fcmplt>
   13d20:	4603      	mov	r3, r0
   13d22:	2b00      	cmp	r3, #0
   13d24:	d1df      	bne.n	13ce6 <auto_nav+0x1c5e>
   13d26:	e012      	b.n	13d4e <auto_nav+0x1cc6>
   13d28:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d30:	681b      	ldr	r3, [r3, #0]
   13d32:	4618      	mov	r0, r3
   13d34:	f04f 0100 	mov.w	r1, #0
   13d38:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d3c:	f004 f9ca 	bl	180d4 <__aeabi_fsub>
   13d40:	4603      	mov	r3, r0
   13d42:	461a      	mov	r2, r3
   13d44:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4c:	601a      	str	r2, [r3, #0]
   13d4e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d56:	681b      	ldr	r3, [r3, #0]
   13d58:	4618      	mov	r0, r3
   13d5a:	f04f 0100 	mov.w	r1, #0
   13d5e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d62:	f004 fc73 	bl	1864c <__aeabi_fcmpge>
   13d66:	4603      	mov	r3, r0
   13d68:	2b00      	cmp	r3, #0
   13d6a:	d1dd      	bne.n	13d28 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13d6c:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d74:	681b      	ldr	r3, [r3, #0]
   13d76:	4618      	mov	r0, r3
   13d78:	f04f 0100 	mov.w	r1, #0
   13d7c:	f004 fc70 	bl	18660 <__aeabi_fcmpgt>
   13d80:	4603      	mov	r3, r0
   13d82:	2b00      	cmp	r3, #0
   13d84:	d100      	bne.n	13d88 <auto_nav+0x1d00>
        return;
   13d86:	e251      	b.n	1422c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13d88:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d90:	681b      	ldr	r3, [r3, #0]
   13d92:	4618      	mov	r0, r3
   13d94:	f04f 0100 	mov.w	r1, #0
   13d98:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13d9c:	f004 fc42 	bl	18624 <__aeabi_fcmplt>
   13da0:	4603      	mov	r3, r0
   13da2:	2b00      	cmp	r3, #0
   13da4:	d100      	bne.n	13da8 <auto_nav+0x1d20>
        return;
   13da6:	e241      	b.n	1422c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13da8:	f64a 6308 	movw	r3, #44552	; 0xae08
   13dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13db0:	781b      	ldrb	r3, [r3, #0]
   13db2:	3301      	adds	r3, #1
   13db4:	b2da      	uxtb	r2, r3
   13db6:	f64a 6308 	movw	r3, #44552	; 0xae08
   13dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dbe:	701a      	strb	r2, [r3, #0]
   13dc0:	f24b 0364 	movw	r3, #45156	; 0xb064
   13dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dc8:	681a      	ldr	r2, [r3, #0]
   13dca:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dd2:	601a      	str	r2, [r3, #0]
   13dd4:	f24b 0368 	movw	r3, #45160	; 0xb068
   13dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ddc:	681a      	ldr	r2, [r3, #0]
   13dde:	f64a 6310 	movw	r3, #44560	; 0xae10
   13de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13de6:	601a      	str	r2, [r3, #0]
   13de8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13df0:	2200      	movs	r2, #0
   13df2:	801a      	strh	r2, [r3, #0]
   13df4:	f64a 6320 	movw	r3, #44576	; 0xae20
   13df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dfc:	f04f 0200 	mov.w	r2, #0
   13e00:	601a      	str	r2, [r3, #0]
   13e02:	e213      	b.n	1422c <auto_nav+0x21a4>
   13e04:	f3af 8000 	nop.w
   13e08:	54442d18 	.word	0x54442d18
   13e0c:	3ff921fb 	.word	0x3ff921fb
   13e10:	54442d18 	.word	0x54442d18
   13e14:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13e18:	f64a 6308 	movw	r3, #44552	; 0xae08
   13e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e20:	781b      	ldrb	r3, [r3, #0]
   13e22:	2b02      	cmp	r3, #2
   13e24:	f040 81ad 	bne.w	14182 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13e28:	f64a 6308 	movw	r3, #44552	; 0xae08
   13e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e30:	2202      	movs	r2, #2
   13e32:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13e34:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e3c:	2200      	movs	r2, #0
   13e3e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13e40:	f64a 6334 	movw	r3, #44596	; 0xae34
   13e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e48:	f04f 0200 	mov.w	r2, #0
   13e4c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13e4e:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e56:	2203      	movs	r2, #3
   13e58:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13e5a:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13e64:	f240 23b8 	movw	r3, #696	; 0x2b8
   13e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e6c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13e6e:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e76:	f04f 0200 	mov.w	r2, #0
   13e7a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13e7c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e84:	681a      	ldr	r2, [r3, #0]
   13e86:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13e90:	4610      	mov	r0, r2
   13e92:	4619      	mov	r1, r3
   13e94:	f004 f91e 	bl	180d4 <__aeabi_fsub>
   13e98:	4603      	mov	r3, r0
   13e9a:	4618      	mov	r0, r3
   13e9c:	f003 fd90 	bl	179c0 <__aeabi_f2d>
   13ea0:	4604      	mov	r4, r0
   13ea2:	460d      	mov	r5, r1
   13ea4:	f24b 0364 	movw	r3, #45156	; 0xb064
   13ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eac:	681a      	ldr	r2, [r3, #0]
   13eae:	f240 23bc 	movw	r3, #700	; 0x2bc
   13eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13eb8:	4610      	mov	r0, r2
   13eba:	4619      	mov	r1, r3
   13ebc:	f004 f90a 	bl	180d4 <__aeabi_fsub>
   13ec0:	4603      	mov	r3, r0
   13ec2:	4618      	mov	r0, r3
   13ec4:	f003 fd7c 	bl	179c0 <__aeabi_f2d>
   13ec8:	4602      	mov	r2, r0
   13eca:	460b      	mov	r3, r1
   13ecc:	4620      	mov	r0, r4
   13ece:	4629      	mov	r1, r5
   13ed0:	f001 fbfa 	bl	156c8 <pp_atan2>
   13ed4:	4602      	mov	r2, r0
   13ed6:	460b      	mov	r3, r1
   13ed8:	4610      	mov	r0, r2
   13eda:	4619      	mov	r1, r3
   13edc:	f004 f8a6 	bl	1802c <__aeabi_d2f>
   13ee0:	4603      	mov	r3, r0
   13ee2:	607b      	str	r3, [r7, #4]
   13ee4:	6878      	ldr	r0, [r7, #4]
   13ee6:	f003 fd6b 	bl	179c0 <__aeabi_f2d>
   13eea:	4604      	mov	r4, r0
   13eec:	460d      	mov	r5, r1
   13eee:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ef6:	681b      	ldr	r3, [r3, #0]
   13ef8:	4618      	mov	r0, r3
   13efa:	f04f 0100 	mov.w	r1, #0
   13efe:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13f02:	f004 f9f1 	bl	182e8 <__aeabi_fmul>
   13f06:	4603      	mov	r3, r0
   13f08:	4618      	mov	r0, r3
   13f0a:	f003 fd59 	bl	179c0 <__aeabi_f2d>
   13f0e:	4602      	mov	r2, r0
   13f10:	460b      	mov	r3, r1
   13f12:	f04f 0000 	mov.w	r0, #0
   13f16:	f04f 0100 	mov.w	r1, #0
   13f1a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13f1e:	f003 fecd 	bl	17cbc <__aeabi_ddiv>
   13f22:	4602      	mov	r2, r0
   13f24:	460b      	mov	r3, r1
   13f26:	4620      	mov	r0, r4
   13f28:	4629      	mov	r1, r5
   13f2a:	f003 fbeb 	bl	17704 <__adddf3>
   13f2e:	4602      	mov	r2, r0
   13f30:	460b      	mov	r3, r1
   13f32:	4610      	mov	r0, r2
   13f34:	4619      	mov	r1, r3
   13f36:	f004 f879 	bl	1802c <__aeabi_d2f>
   13f3a:	4603      	mov	r3, r0
   13f3c:	603b      	str	r3, [r7, #0]
   13f3e:	f240 23bc 	movw	r3, #700	; 0x2bc
   13f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13f48:	4618      	mov	r0, r3
   13f4a:	f003 fd39 	bl	179c0 <__aeabi_f2d>
   13f4e:	4604      	mov	r4, r0
   13f50:	460d      	mov	r5, r1
   13f52:	6838      	ldr	r0, [r7, #0]
   13f54:	f003 fd34 	bl	179c0 <__aeabi_f2d>
   13f58:	4602      	mov	r2, r0
   13f5a:	460b      	mov	r3, r1
   13f5c:	4610      	mov	r0, r2
   13f5e:	4619      	mov	r1, r3
   13f60:	a3b5      	add	r3, pc, #724	; (adr r3, 14238 <auto_nav+0x21b0>)
   13f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f66:	f003 fbcd 	bl	17704 <__adddf3>
   13f6a:	4602      	mov	r2, r0
   13f6c:	460b      	mov	r3, r1
   13f6e:	4610      	mov	r0, r2
   13f70:	4619      	mov	r1, r3
   13f72:	f001 fc69 	bl	15848 <pp_sin>
   13f76:	4602      	mov	r2, r0
   13f78:	460b      	mov	r3, r1
   13f7a:	4610      	mov	r0, r2
   13f7c:	4619      	mov	r1, r3
   13f7e:	f04f 0200 	mov.w	r2, #0
   13f82:	f04f 0300 	mov.w	r3, #0
   13f86:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f8a:	f003 fd6d 	bl	17a68 <__aeabi_dmul>
   13f8e:	4602      	mov	r2, r0
   13f90:	460b      	mov	r3, r1
   13f92:	4620      	mov	r0, r4
   13f94:	4629      	mov	r1, r5
   13f96:	f003 fbb5 	bl	17704 <__adddf3>
   13f9a:	4602      	mov	r2, r0
   13f9c:	460b      	mov	r3, r1
   13f9e:	4610      	mov	r0, r2
   13fa0:	4619      	mov	r1, r3
   13fa2:	f004 f843 	bl	1802c <__aeabi_d2f>
   13fa6:	4606      	mov	r6, r0
   13fa8:	f240 23bc 	movw	r3, #700	; 0x2bc
   13fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13fb2:	4618      	mov	r0, r3
   13fb4:	f003 fd04 	bl	179c0 <__aeabi_f2d>
   13fb8:	4604      	mov	r4, r0
   13fba:	460d      	mov	r5, r1
   13fbc:	6838      	ldr	r0, [r7, #0]
   13fbe:	f003 fcff 	bl	179c0 <__aeabi_f2d>
   13fc2:	4602      	mov	r2, r0
   13fc4:	460b      	mov	r3, r1
   13fc6:	4610      	mov	r0, r2
   13fc8:	4619      	mov	r1, r3
   13fca:	f001 fc3d 	bl	15848 <pp_sin>
   13fce:	4602      	mov	r2, r0
   13fd0:	460b      	mov	r3, r1
   13fd2:	4610      	mov	r0, r2
   13fd4:	4619      	mov	r1, r3
   13fd6:	f04f 0200 	mov.w	r2, #0
   13fda:	f04f 0300 	mov.w	r3, #0
   13fde:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13fe2:	f003 fd41 	bl	17a68 <__aeabi_dmul>
   13fe6:	4602      	mov	r2, r0
   13fe8:	460b      	mov	r3, r1
   13fea:	4620      	mov	r0, r4
   13fec:	4629      	mov	r1, r5
   13fee:	f003 fb89 	bl	17704 <__adddf3>
   13ff2:	4602      	mov	r2, r0
   13ff4:	460b      	mov	r3, r1
   13ff6:	4610      	mov	r0, r2
   13ff8:	4619      	mov	r1, r3
   13ffa:	f004 f817 	bl	1802c <__aeabi_d2f>
   13ffe:	4603      	mov	r3, r0
   14000:	4630      	mov	r0, r6
   14002:	4619      	mov	r1, r3
   14004:	f000 fa04 	bl	14410 <fly_to_xy>
   14008:	6838      	ldr	r0, [r7, #0]
   1400a:	f003 fcd9 	bl	179c0 <__aeabi_f2d>
   1400e:	4602      	mov	r2, r0
   14010:	460b      	mov	r3, r1
   14012:	a189      	add	r1, pc, #548	; (adr r1, 14238 <auto_nav+0x21b0>)
   14014:	e9d1 0100 	ldrd	r0, r1, [r1]
   14018:	f003 fb72 	bl	17700 <__aeabi_dsub>
   1401c:	4602      	mov	r2, r0
   1401e:	460b      	mov	r3, r1
   14020:	4610      	mov	r0, r2
   14022:	4619      	mov	r1, r3
   14024:	a386      	add	r3, pc, #536	; (adr r3, 14240 <auto_nav+0x21b8>)
   14026:	e9d3 2300 	ldrd	r2, r3, [r3]
   1402a:	f003 fe47 	bl	17cbc <__aeabi_ddiv>
   1402e:	4602      	mov	r2, r0
   14030:	460b      	mov	r3, r1
   14032:	4610      	mov	r0, r2
   14034:	4619      	mov	r1, r3
   14036:	f04f 0200 	mov.w	r2, #0
   1403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1403e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14042:	f003 fd11 	bl	17a68 <__aeabi_dmul>
   14046:	4602      	mov	r2, r0
   14048:	460b      	mov	r3, r1
   1404a:	4610      	mov	r0, r2
   1404c:	4619      	mov	r1, r3
   1404e:	f003 ffed 	bl	1802c <__aeabi_d2f>
   14052:	4602      	mov	r2, r0
   14054:	f64a 6324 	movw	r3, #44580	; 0xae24
   14058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1405c:	601a      	str	r2, [r3, #0]
   1405e:	e012      	b.n	14086 <auto_nav+0x1ffe>
   14060:	f64a 6324 	movw	r3, #44580	; 0xae24
   14064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14068:	681b      	ldr	r3, [r3, #0]
   1406a:	4618      	mov	r0, r3
   1406c:	f04f 0100 	mov.w	r1, #0
   14070:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14074:	f004 f830 	bl	180d8 <__addsf3>
   14078:	4603      	mov	r3, r0
   1407a:	461a      	mov	r2, r3
   1407c:	f64a 6324 	movw	r3, #44580	; 0xae24
   14080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14084:	601a      	str	r2, [r3, #0]
   14086:	f64a 6324 	movw	r3, #44580	; 0xae24
   1408a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1408e:	681b      	ldr	r3, [r3, #0]
   14090:	4618      	mov	r0, r3
   14092:	f04f 0100 	mov.w	r1, #0
   14096:	f004 fac5 	bl	18624 <__aeabi_fcmplt>
   1409a:	4603      	mov	r3, r0
   1409c:	2b00      	cmp	r3, #0
   1409e:	d1df      	bne.n	14060 <auto_nav+0x1fd8>
   140a0:	e012      	b.n	140c8 <auto_nav+0x2040>
   140a2:	f64a 6324 	movw	r3, #44580	; 0xae24
   140a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140aa:	681b      	ldr	r3, [r3, #0]
   140ac:	4618      	mov	r0, r3
   140ae:	f04f 0100 	mov.w	r1, #0
   140b2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   140b6:	f004 f80d 	bl	180d4 <__aeabi_fsub>
   140ba:	4603      	mov	r3, r0
   140bc:	461a      	mov	r2, r3
   140be:	f64a 6324 	movw	r3, #44580	; 0xae24
   140c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c6:	601a      	str	r2, [r3, #0]
   140c8:	f64a 6324 	movw	r3, #44580	; 0xae24
   140cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d0:	681b      	ldr	r3, [r3, #0]
   140d2:	4618      	mov	r0, r3
   140d4:	f04f 0100 	mov.w	r1, #0
   140d8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   140dc:	f004 fab6 	bl	1864c <__aeabi_fcmpge>
   140e0:	4603      	mov	r3, r0
   140e2:	2b00      	cmp	r3, #0
   140e4:	d1dd      	bne.n	140a2 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   140e6:	f64a 6324 	movw	r3, #44580	; 0xae24
   140ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ee:	681b      	ldr	r3, [r3, #0]
   140f0:	4618      	mov	r0, r3
   140f2:	f04f 0100 	mov.w	r1, #0
   140f6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   140fa:	f004 fab1 	bl	18660 <__aeabi_fcmpgt>
   140fe:	4603      	mov	r3, r0
   14100:	2b00      	cmp	r3, #0
   14102:	d100      	bne.n	14106 <auto_nav+0x207e>
          return;
   14104:	e092      	b.n	1422c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14106:	f64a 6324 	movw	r3, #44580	; 0xae24
   1410a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	4618      	mov	r0, r3
   14112:	f04f 0100 	mov.w	r1, #0
   14116:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1411a:	f004 fa83 	bl	18624 <__aeabi_fcmplt>
   1411e:	4603      	mov	r3, r0
   14120:	2b00      	cmp	r3, #0
   14122:	d100      	bne.n	14126 <auto_nav+0x209e>
          return;
   14124:	e082      	b.n	1422c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14126:	f64a 6308 	movw	r3, #44552	; 0xae08
   1412a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1412e:	781b      	ldrb	r3, [r3, #0]
   14130:	3301      	adds	r3, #1
   14132:	b2da      	uxtb	r2, r3
   14134:	f64a 6308 	movw	r3, #44552	; 0xae08
   14138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1413c:	701a      	strb	r2, [r3, #0]
   1413e:	f24b 0364 	movw	r3, #45156	; 0xb064
   14142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14146:	681a      	ldr	r2, [r3, #0]
   14148:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1414c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14150:	601a      	str	r2, [r3, #0]
   14152:	f24b 0368 	movw	r3, #45160	; 0xb068
   14156:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1415a:	681a      	ldr	r2, [r3, #0]
   1415c:	f64a 6310 	movw	r3, #44560	; 0xae10
   14160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14164:	601a      	str	r2, [r3, #0]
   14166:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1416a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1416e:	2200      	movs	r2, #0
   14170:	801a      	strh	r2, [r3, #0]
   14172:	f64a 6320 	movw	r3, #44576	; 0xae20
   14176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417a:	f04f 0200 	mov.w	r2, #0
   1417e:	601a      	str	r2, [r3, #0]
   14180:	e054      	b.n	1422c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14182:	f64a 6308 	movw	r3, #44552	; 0xae08
   14186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1418a:	781b      	ldrb	r3, [r3, #0]
   1418c:	2b03      	cmp	r3, #3
   1418e:	d106      	bne.n	1419e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14190:	f64a 6308 	movw	r3, #44552	; 0xae08
   14194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14198:	2203      	movs	r2, #3
   1419a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1419c:	e44b      	b.n	13a36 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1419e:	f64a 6308 	movw	r3, #44552	; 0xae08
   141a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141a6:	781b      	ldrb	r3, [r3, #0]
   141a8:	2b04      	cmp	r3, #4
   141aa:	d13f      	bne.n	1422c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   141ac:	f64a 6308 	movw	r3, #44552	; 0xae08
   141b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141b4:	2204      	movs	r2, #4
   141b6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   141b8:	f64a 6309 	movw	r3, #44553	; 0xae09
   141bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c0:	781b      	ldrb	r3, [r3, #0]
   141c2:	3301      	adds	r3, #1
   141c4:	b2da      	uxtb	r2, r3
   141c6:	f64a 6309 	movw	r3, #44553	; 0xae09
   141ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141ce:	701a      	strb	r2, [r3, #0]
   141d0:	f64a 6308 	movw	r3, #44552	; 0xae08
   141d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141d8:	2200      	movs	r2, #0
   141da:	701a      	strb	r2, [r3, #0]
   141dc:	f64a 631e 	movw	r3, #44574	; 0xae1e
   141e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141e4:	2200      	movs	r2, #0
   141e6:	801a      	strh	r2, [r3, #0]
   141e8:	f24b 0364 	movw	r3, #45156	; 0xb064
   141ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f0:	681a      	ldr	r2, [r3, #0]
   141f2:	f64a 630c 	movw	r3, #44556	; 0xae0c
   141f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141fa:	601a      	str	r2, [r3, #0]
   141fc:	f24b 0368 	movw	r3, #45160	; 0xb068
   14200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14204:	681a      	ldr	r2, [r3, #0]
   14206:	f64a 6310 	movw	r3, #44560	; 0xae10
   1420a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1420e:	601a      	str	r2, [r3, #0]
   14210:	f64a 631c 	movw	r3, #44572	; 0xae1c
   14214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14218:	2200      	movs	r2, #0
   1421a:	801a      	strh	r2, [r3, #0]
   1421c:	f64a 6320 	movw	r3, #44576	; 0xae20
   14220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14224:	f04f 0200 	mov.w	r2, #0
   14228:	601a      	str	r2, [r3, #0]
   1422a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1422c:	372c      	adds	r7, #44	; 0x2c
   1422e:	46bd      	mov	sp, r7
   14230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14232:	bf00      	nop
   14234:	f3af 8000 	nop.w
   14238:	54442d18 	.word	0x54442d18
   1423c:	3ff921fb 	.word	0x3ff921fb
   14240:	54442d18 	.word	0x54442d18
   14244:	400921fb 	.word	0x400921fb

00014248 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14248:	b590      	push	{r4, r7, lr}
   1424a:	b087      	sub	sp, #28
   1424c:	af00      	add	r7, sp, #0
   1424e:	4603      	mov	r3, r0
   14250:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14252:	79f9      	ldrb	r1, [r7, #7]
   14254:	f240 22bc 	movw	r2, #700	; 0x2bc
   14258:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1425c:	460b      	mov	r3, r1
   1425e:	005b      	lsls	r3, r3, #1
   14260:	440b      	add	r3, r1
   14262:	009b      	lsls	r3, r3, #2
   14264:	4413      	add	r3, r2
   14266:	681a      	ldr	r2, [r3, #0]
   14268:	f24b 0364 	movw	r3, #45156	; 0xb064
   1426c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14270:	681b      	ldr	r3, [r3, #0]
   14272:	4610      	mov	r0, r2
   14274:	4619      	mov	r1, r3
   14276:	f003 ff2d 	bl	180d4 <__aeabi_fsub>
   1427a:	4603      	mov	r3, r0
   1427c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1427e:	79f9      	ldrb	r1, [r7, #7]
   14280:	f240 22bc 	movw	r2, #700	; 0x2bc
   14284:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14288:	460b      	mov	r3, r1
   1428a:	005b      	lsls	r3, r3, #1
   1428c:	440b      	add	r3, r1
   1428e:	009b      	lsls	r3, r3, #2
   14290:	4413      	add	r3, r2
   14292:	3304      	adds	r3, #4
   14294:	681a      	ldr	r2, [r3, #0]
   14296:	f24b 0368 	movw	r3, #45160	; 0xb068
   1429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	4610      	mov	r0, r2
   142a2:	4619      	mov	r1, r3
   142a4:	f003 ff16 	bl	180d4 <__aeabi_fsub>
   142a8:	4603      	mov	r3, r0
   142aa:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   142ac:	6978      	ldr	r0, [r7, #20]
   142ae:	6979      	ldr	r1, [r7, #20]
   142b0:	f004 f81a 	bl	182e8 <__aeabi_fmul>
   142b4:	4603      	mov	r3, r0
   142b6:	461c      	mov	r4, r3
   142b8:	6938      	ldr	r0, [r7, #16]
   142ba:	6939      	ldr	r1, [r7, #16]
   142bc:	f004 f814 	bl	182e8 <__aeabi_fmul>
   142c0:	4603      	mov	r3, r0
   142c2:	4620      	mov	r0, r4
   142c4:	4619      	mov	r1, r3
   142c6:	f003 ff07 	bl	180d8 <__addsf3>
   142ca:	4603      	mov	r3, r0
   142cc:	461a      	mov	r2, r3
   142ce:	f64a 633c 	movw	r3, #44604	; 0xae3c
   142d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142d6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   142d8:	f24b 039c 	movw	r3, #45212	; 0xb09c
   142dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e0:	681b      	ldr	r3, [r3, #0]
   142e2:	4618      	mov	r0, r3
   142e4:	f04f 0100 	mov.w	r1, #0
   142e8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   142ec:	f003 fffc 	bl	182e8 <__aeabi_fmul>
   142f0:	4603      	mov	r3, r0
   142f2:	461a      	mov	r2, r3
   142f4:	f64a 6348 	movw	r3, #44616	; 0xae48
   142f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   142fe:	f64a 6348 	movw	r3, #44616	; 0xae48
   14302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	4618      	mov	r0, r3
   1430a:	f04f 0100 	mov.w	r1, #0
   1430e:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14312:	f004 f987 	bl	18624 <__aeabi_fcmplt>
   14316:	4603      	mov	r3, r0
   14318:	2b00      	cmp	r3, #0
   1431a:	d004      	beq.n	14326 <approaching+0xde>
   1431c:	f04f 0200 	mov.w	r2, #0
   14320:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14324:	e004      	b.n	14330 <approaching+0xe8>
   14326:	f64a 6348 	movw	r3, #44616	; 0xae48
   1432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1432e:	681a      	ldr	r2, [r3, #0]
   14330:	f64a 6348 	movw	r3, #44616	; 0xae48
   14334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14338:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1433a:	f64a 6348 	movw	r3, #44616	; 0xae48
   1433e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14342:	681a      	ldr	r2, [r3, #0]
   14344:	f64a 6348 	movw	r3, #44616	; 0xae48
   14348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434c:	681b      	ldr	r3, [r3, #0]
   1434e:	4610      	mov	r0, r2
   14350:	4619      	mov	r1, r3
   14352:	f003 ffc9 	bl	182e8 <__aeabi_fmul>
   14356:	4603      	mov	r3, r0
   14358:	461a      	mov	r2, r3
   1435a:	f64a 633c 	movw	r3, #44604	; 0xae3c
   1435e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14362:	681b      	ldr	r3, [r3, #0]
   14364:	4610      	mov	r0, r2
   14366:	4619      	mov	r1, r3
   14368:	f004 f97a 	bl	18660 <__aeabi_fcmpgt>
   1436c:	4603      	mov	r3, r0
   1436e:	2b00      	cmp	r3, #0
   14370:	d001      	beq.n	14376 <approaching+0x12e>
    return TRUE;
   14372:	2301      	movs	r3, #1
   14374:	e048      	b.n	14408 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14376:	79f9      	ldrb	r1, [r7, #7]
   14378:	f240 22bc 	movw	r2, #700	; 0x2bc
   1437c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14380:	460b      	mov	r3, r1
   14382:	005b      	lsls	r3, r3, #1
   14384:	440b      	add	r3, r1
   14386:	009b      	lsls	r3, r3, #2
   14388:	4413      	add	r3, r2
   1438a:	681a      	ldr	r2, [r3, #0]
   1438c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   14390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14394:	681b      	ldr	r3, [r3, #0]
   14396:	4610      	mov	r0, r2
   14398:	4619      	mov	r1, r3
   1439a:	f003 fe9b 	bl	180d4 <__aeabi_fsub>
   1439e:	4603      	mov	r3, r0
   143a0:	4618      	mov	r0, r3
   143a2:	6979      	ldr	r1, [r7, #20]
   143a4:	f003 ffa0 	bl	182e8 <__aeabi_fmul>
   143a8:	4603      	mov	r3, r0
   143aa:	461c      	mov	r4, r3
   143ac:	79f9      	ldrb	r1, [r7, #7]
   143ae:	f240 22bc 	movw	r2, #700	; 0x2bc
   143b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   143b6:	460b      	mov	r3, r1
   143b8:	005b      	lsls	r3, r3, #1
   143ba:	440b      	add	r3, r1
   143bc:	009b      	lsls	r3, r3, #2
   143be:	4413      	add	r3, r2
   143c0:	3304      	adds	r3, #4
   143c2:	681a      	ldr	r2, [r3, #0]
   143c4:	f64a 6310 	movw	r3, #44560	; 0xae10
   143c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143cc:	681b      	ldr	r3, [r3, #0]
   143ce:	4610      	mov	r0, r2
   143d0:	4619      	mov	r1, r3
   143d2:	f003 fe7f 	bl	180d4 <__aeabi_fsub>
   143d6:	4603      	mov	r3, r0
   143d8:	4618      	mov	r0, r3
   143da:	6939      	ldr	r1, [r7, #16]
   143dc:	f003 ff84 	bl	182e8 <__aeabi_fmul>
   143e0:	4603      	mov	r3, r0
   143e2:	4620      	mov	r0, r4
   143e4:	4619      	mov	r1, r3
   143e6:	f003 fe77 	bl	180d8 <__addsf3>
   143ea:	4603      	mov	r3, r0
   143ec:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   143ee:	2301      	movs	r3, #1
   143f0:	461c      	mov	r4, r3
   143f2:	68f8      	ldr	r0, [r7, #12]
   143f4:	f04f 0100 	mov.w	r1, #0
   143f8:	f004 f914 	bl	18624 <__aeabi_fcmplt>
   143fc:	4603      	mov	r3, r0
   143fe:	2b00      	cmp	r3, #0
   14400:	d101      	bne.n	14406 <approaching+0x1be>
   14402:	2300      	movs	r3, #0
   14404:	461c      	mov	r4, r3
   14406:	b2e3      	uxtb	r3, r4
}
   14408:	4618      	mov	r0, r3
   1440a:	371c      	adds	r7, #28
   1440c:	46bd      	mov	sp, r7
   1440e:	bd90      	pop	{r4, r7, pc}

00014410 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14410:	b5b0      	push	{r4, r5, r7, lr}
   14412:	b082      	sub	sp, #8
   14414:	af00      	add	r7, sp, #0
   14416:	6078      	str	r0, [r7, #4]
   14418:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1441a:	f64a 6328 	movw	r3, #44584	; 0xae28
   1441e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14422:	687a      	ldr	r2, [r7, #4]
   14424:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14426:	f64a 632c 	movw	r3, #44588	; 0xae2c
   1442a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1442e:	683a      	ldr	r2, [r7, #0]
   14430:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14432:	f24b 0368 	movw	r3, #45160	; 0xb068
   14436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443a:	681b      	ldr	r3, [r3, #0]
   1443c:	6838      	ldr	r0, [r7, #0]
   1443e:	4619      	mov	r1, r3
   14440:	f003 fe48 	bl	180d4 <__aeabi_fsub>
   14444:	4603      	mov	r3, r0
   14446:	4618      	mov	r0, r3
   14448:	f003 faba 	bl	179c0 <__aeabi_f2d>
   1444c:	4604      	mov	r4, r0
   1444e:	460d      	mov	r5, r1
   14450:	f24b 0364 	movw	r3, #45156	; 0xb064
   14454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14458:	681b      	ldr	r3, [r3, #0]
   1445a:	6878      	ldr	r0, [r7, #4]
   1445c:	4619      	mov	r1, r3
   1445e:	f003 fe39 	bl	180d4 <__aeabi_fsub>
   14462:	4603      	mov	r3, r0
   14464:	4618      	mov	r0, r3
   14466:	f003 faab 	bl	179c0 <__aeabi_f2d>
   1446a:	4602      	mov	r2, r0
   1446c:	460b      	mov	r3, r1
   1446e:	4620      	mov	r0, r4
   14470:	4629      	mov	r1, r5
   14472:	f001 f929 	bl	156c8 <pp_atan2>
   14476:	4602      	mov	r2, r0
   14478:	460b      	mov	r3, r1
   1447a:	a10b      	add	r1, pc, #44	; (adr r1, 144a8 <fly_to_xy+0x98>)
   1447c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14480:	f003 f93e 	bl	17700 <__aeabi_dsub>
   14484:	4602      	mov	r2, r0
   14486:	460b      	mov	r3, r1
   14488:	4610      	mov	r0, r2
   1448a:	4619      	mov	r1, r3
   1448c:	f003 fdce 	bl	1802c <__aeabi_d2f>
   14490:	4602      	mov	r2, r0
   14492:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   14496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1449a:	601a      	str	r2, [r3, #0]
}
   1449c:	3708      	adds	r7, #8
   1449e:	46bd      	mov	sp, r7
   144a0:	bdb0      	pop	{r4, r5, r7, pc}
   144a2:	bf00      	nop
   144a4:	f3af 8000 	nop.w
   144a8:	54442d18 	.word	0x54442d18
   144ac:	3ff921fb 	.word	0x3ff921fb

000144b0 <fly_to>:

static void fly_to(uint8_t wp) { 
   144b0:	b580      	push	{r7, lr}
   144b2:	b082      	sub	sp, #8
   144b4:	af00      	add	r7, sp, #0
   144b6:	4603      	mov	r3, r0
   144b8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   144ba:	79f9      	ldrb	r1, [r7, #7]
   144bc:	f240 22bc 	movw	r2, #700	; 0x2bc
   144c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144c4:	460b      	mov	r3, r1
   144c6:	005b      	lsls	r3, r3, #1
   144c8:	440b      	add	r3, r1
   144ca:	009b      	lsls	r3, r3, #2
   144cc:	4413      	add	r3, r2
   144ce:	6818      	ldr	r0, [r3, #0]
   144d0:	79f9      	ldrb	r1, [r7, #7]
   144d2:	f240 22bc 	movw	r2, #700	; 0x2bc
   144d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144da:	460b      	mov	r3, r1
   144dc:	005b      	lsls	r3, r3, #1
   144de:	440b      	add	r3, r1
   144e0:	009b      	lsls	r3, r3, #2
   144e2:	4413      	add	r3, r2
   144e4:	3304      	adds	r3, #4
   144e6:	681b      	ldr	r3, [r3, #0]
   144e8:	4619      	mov	r1, r3
   144ea:	f7ff ff91 	bl	14410 <fly_to_xy>
}
   144ee:	3708      	adds	r7, #8
   144f0:	46bd      	mov	sp, r7
   144f2:	bd80      	pop	{r7, pc}

000144f4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   144f4:	b5b0      	push	{r4, r5, r7, lr}
   144f6:	b088      	sub	sp, #32
   144f8:	af00      	add	r7, sp, #0
   144fa:	4602      	mov	r2, r0
   144fc:	460b      	mov	r3, r1
   144fe:	71fa      	strb	r2, [r7, #7]
   14500:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14502:	79f9      	ldrb	r1, [r7, #7]
   14504:	f240 22bc 	movw	r2, #700	; 0x2bc
   14508:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1450c:	460b      	mov	r3, r1
   1450e:	005b      	lsls	r3, r3, #1
   14510:	440b      	add	r3, r1
   14512:	009b      	lsls	r3, r3, #2
   14514:	4413      	add	r3, r2
   14516:	681b      	ldr	r3, [r3, #0]
   14518:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   1451a:	79f9      	ldrb	r1, [r7, #7]
   1451c:	f240 22bc 	movw	r2, #700	; 0x2bc
   14520:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14524:	460b      	mov	r3, r1
   14526:	005b      	lsls	r3, r3, #1
   14528:	440b      	add	r3, r1
   1452a:	009b      	lsls	r3, r3, #2
   1452c:	4413      	add	r3, r2
   1452e:	3304      	adds	r3, #4
   14530:	681b      	ldr	r3, [r3, #0]
   14532:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14534:	79b9      	ldrb	r1, [r7, #6]
   14536:	f240 22bc 	movw	r2, #700	; 0x2bc
   1453a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1453e:	460b      	mov	r3, r1
   14540:	005b      	lsls	r3, r3, #1
   14542:	440b      	add	r3, r1
   14544:	009b      	lsls	r3, r3, #2
   14546:	4413      	add	r3, r2
   14548:	681b      	ldr	r3, [r3, #0]
   1454a:	4618      	mov	r0, r3
   1454c:	69f9      	ldr	r1, [r7, #28]
   1454e:	f003 fdc1 	bl	180d4 <__aeabi_fsub>
   14552:	4603      	mov	r3, r0
   14554:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14556:	79b9      	ldrb	r1, [r7, #6]
   14558:	f240 22bc 	movw	r2, #700	; 0x2bc
   1455c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14560:	460b      	mov	r3, r1
   14562:	005b      	lsls	r3, r3, #1
   14564:	440b      	add	r3, r1
   14566:	009b      	lsls	r3, r3, #2
   14568:	4413      	add	r3, r2
   1456a:	3304      	adds	r3, #4
   1456c:	681b      	ldr	r3, [r3, #0]
   1456e:	4618      	mov	r0, r3
   14570:	69b9      	ldr	r1, [r7, #24]
   14572:	f003 fdaf 	bl	180d4 <__aeabi_fsub>
   14576:	4603      	mov	r3, r0
   14578:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1457a:	6978      	ldr	r0, [r7, #20]
   1457c:	6979      	ldr	r1, [r7, #20]
   1457e:	f003 feb3 	bl	182e8 <__aeabi_fmul>
   14582:	4603      	mov	r3, r0
   14584:	461c      	mov	r4, r3
   14586:	6938      	ldr	r0, [r7, #16]
   14588:	6939      	ldr	r1, [r7, #16]
   1458a:	f003 fead 	bl	182e8 <__aeabi_fmul>
   1458e:	4603      	mov	r3, r0
   14590:	4620      	mov	r0, r4
   14592:	4619      	mov	r1, r3
   14594:	f003 fda0 	bl	180d8 <__addsf3>
   14598:	4603      	mov	r3, r0
   1459a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1459c:	f24b 0364 	movw	r3, #45156	; 0xb064
   145a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a4:	681b      	ldr	r3, [r3, #0]
   145a6:	4618      	mov	r0, r3
   145a8:	69f9      	ldr	r1, [r7, #28]
   145aa:	f003 fd93 	bl	180d4 <__aeabi_fsub>
   145ae:	4603      	mov	r3, r0
   145b0:	4618      	mov	r0, r3
   145b2:	6979      	ldr	r1, [r7, #20]
   145b4:	f003 fe98 	bl	182e8 <__aeabi_fmul>
   145b8:	4603      	mov	r3, r0
   145ba:	461c      	mov	r4, r3
   145bc:	f24b 0368 	movw	r3, #45160	; 0xb068
   145c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145c4:	681b      	ldr	r3, [r3, #0]
   145c6:	4618      	mov	r0, r3
   145c8:	69b9      	ldr	r1, [r7, #24]
   145ca:	f003 fd83 	bl	180d4 <__aeabi_fsub>
   145ce:	4603      	mov	r3, r0
   145d0:	4618      	mov	r0, r3
   145d2:	6939      	ldr	r1, [r7, #16]
   145d4:	f003 fe88 	bl	182e8 <__aeabi_fmul>
   145d8:	4603      	mov	r3, r0
   145da:	4620      	mov	r0, r4
   145dc:	4619      	mov	r1, r3
   145de:	f003 fd7b 	bl	180d8 <__addsf3>
   145e2:	4603      	mov	r3, r0
   145e4:	4618      	mov	r0, r3
   145e6:	68f9      	ldr	r1, [r7, #12]
   145e8:	f003 ff32 	bl	18450 <__aeabi_fdiv>
   145ec:	4603      	mov	r3, r0
   145ee:	461a      	mov	r2, r3
   145f0:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145f8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   145fa:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14602:	681b      	ldr	r3, [r3, #0]
   14604:	4618      	mov	r0, r3
   14606:	f04f 0100 	mov.w	r1, #0
   1460a:	f004 f81f 	bl	1864c <__aeabi_fcmpge>
   1460e:	4603      	mov	r3, r0
   14610:	2b00      	cmp	r3, #0
   14612:	d005      	beq.n	14620 <route_to+0x12c>
   14614:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1461c:	681a      	ldr	r2, [r3, #0]
   1461e:	e001      	b.n	14624 <route_to+0x130>
   14620:	f04f 0200 	mov.w	r2, #0
   14624:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1462c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   1462e:	68f8      	ldr	r0, [r7, #12]
   14630:	f003 f9c6 	bl	179c0 <__aeabi_f2d>
   14634:	4602      	mov	r2, r0
   14636:	460b      	mov	r3, r1
   14638:	4610      	mov	r0, r2
   1463a:	4619      	mov	r1, r3
   1463c:	f001 f9f4 	bl	15a28 <pp_sqrt>
   14640:	4602      	mov	r2, r0
   14642:	460b      	mov	r3, r1
   14644:	4610      	mov	r0, r2
   14646:	4619      	mov	r1, r3
   14648:	f003 fcf0 	bl	1802c <__aeabi_d2f>
   1464c:	4602      	mov	r2, r0
   1464e:	f64a 6350 	movw	r3, #44624	; 0xae50
   14652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14656:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14658:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14660:	681b      	ldr	r3, [r3, #0]
   14662:	4618      	mov	r0, r3
   14664:	f003 f9ac 	bl	179c0 <__aeabi_f2d>
   14668:	4604      	mov	r4, r0
   1466a:	460d      	mov	r5, r1
   1466c:	f64a 6348 	movw	r3, #44616	; 0xae48
   14670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14674:	681a      	ldr	r2, [r3, #0]
   14676:	f64a 6350 	movw	r3, #44624	; 0xae50
   1467a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	4610      	mov	r0, r2
   14682:	4619      	mov	r1, r3
   14684:	f003 fee4 	bl	18450 <__aeabi_fdiv>
   14688:	4603      	mov	r3, r0
   1468a:	4618      	mov	r0, r3
   1468c:	f04f 0100 	mov.w	r1, #0
   14690:	f003 ffdc 	bl	1864c <__aeabi_fcmpge>
   14694:	4603      	mov	r3, r0
   14696:	2b00      	cmp	r3, #0
   14698:	d014      	beq.n	146c4 <route_to+0x1d0>
   1469a:	f64a 6348 	movw	r3, #44616	; 0xae48
   1469e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146a2:	681a      	ldr	r2, [r3, #0]
   146a4:	f64a 6350 	movw	r3, #44624	; 0xae50
   146a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	4610      	mov	r0, r2
   146b0:	4619      	mov	r1, r3
   146b2:	f003 fecd 	bl	18450 <__aeabi_fdiv>
   146b6:	4603      	mov	r3, r0
   146b8:	4618      	mov	r0, r3
   146ba:	f003 f981 	bl	179c0 <__aeabi_f2d>
   146be:	4602      	mov	r2, r0
   146c0:	460b      	mov	r3, r1
   146c2:	e003      	b.n	146cc <route_to+0x1d8>
   146c4:	f04f 0200 	mov.w	r2, #0
   146c8:	f04f 0300 	mov.w	r3, #0
   146cc:	4620      	mov	r0, r4
   146ce:	4629      	mov	r1, r5
   146d0:	f003 f818 	bl	17704 <__adddf3>
   146d4:	4602      	mov	r2, r0
   146d6:	460b      	mov	r3, r1
   146d8:	4610      	mov	r0, r2
   146da:	4619      	mov	r1, r3
   146dc:	f003 fca6 	bl	1802c <__aeabi_d2f>
   146e0:	4602      	mov	r2, r0
   146e2:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ea:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   146ec:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146f4:	681b      	ldr	r3, [r3, #0]
   146f6:	4618      	mov	r0, r3
   146f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   146fc:	f003 ffa6 	bl	1864c <__aeabi_fcmpge>
   14700:	4603      	mov	r3, r0
   14702:	2b00      	cmp	r3, #0
   14704:	d002      	beq.n	1470c <route_to+0x218>
   14706:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1470a:	e004      	b.n	14716 <route_to+0x222>
   1470c:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14710:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14714:	681a      	ldr	r2, [r3, #0]
   14716:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1471a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1471e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14720:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14728:	681b      	ldr	r3, [r3, #0]
   1472a:	4618      	mov	r0, r3
   1472c:	6979      	ldr	r1, [r7, #20]
   1472e:	f003 fddb 	bl	182e8 <__aeabi_fmul>
   14732:	4603      	mov	r3, r0
   14734:	4618      	mov	r0, r3
   14736:	69f9      	ldr	r1, [r7, #28]
   14738:	f003 fcce 	bl	180d8 <__addsf3>
   1473c:	4603      	mov	r3, r0
   1473e:	461c      	mov	r4, r3
   14740:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14748:	681b      	ldr	r3, [r3, #0]
   1474a:	4618      	mov	r0, r3
   1474c:	6939      	ldr	r1, [r7, #16]
   1474e:	f003 fdcb 	bl	182e8 <__aeabi_fmul>
   14752:	4603      	mov	r3, r0
   14754:	4618      	mov	r0, r3
   14756:	69b9      	ldr	r1, [r7, #24]
   14758:	f003 fcbe 	bl	180d8 <__addsf3>
   1475c:	4603      	mov	r3, r0
   1475e:	4620      	mov	r0, r4
   14760:	4619      	mov	r1, r3
   14762:	f7ff fe55 	bl	14410 <fly_to_xy>
}
   14766:	3720      	adds	r7, #32
   14768:	46bd      	mov	sp, r7
   1476a:	bdb0      	pop	{r4, r5, r7, pc}

0001476c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   1476c:	b590      	push	{r4, r7, lr}
   1476e:	b083      	sub	sp, #12
   14770:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14772:	f240 23bc 	movw	r3, #700	; 0x2bc
   14776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1477a:	681a      	ldr	r2, [r3, #0]
   1477c:	f24b 0364 	movw	r3, #45156	; 0xb064
   14780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14784:	681b      	ldr	r3, [r3, #0]
   14786:	4610      	mov	r0, r2
   14788:	4619      	mov	r1, r3
   1478a:	f003 fca3 	bl	180d4 <__aeabi_fsub>
   1478e:	4603      	mov	r3, r0
   14790:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14792:	f240 23bc 	movw	r3, #700	; 0x2bc
   14796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1479a:	685a      	ldr	r2, [r3, #4]
   1479c:	f24b 0368 	movw	r3, #45160	; 0xb068
   147a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147a4:	681b      	ldr	r3, [r3, #0]
   147a6:	4610      	mov	r0, r2
   147a8:	4619      	mov	r1, r3
   147aa:	f003 fc93 	bl	180d4 <__aeabi_fsub>
   147ae:	4603      	mov	r3, r0
   147b0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   147b2:	6878      	ldr	r0, [r7, #4]
   147b4:	6879      	ldr	r1, [r7, #4]
   147b6:	f003 fd97 	bl	182e8 <__aeabi_fmul>
   147ba:	4603      	mov	r3, r0
   147bc:	461c      	mov	r4, r3
   147be:	6838      	ldr	r0, [r7, #0]
   147c0:	6839      	ldr	r1, [r7, #0]
   147c2:	f003 fd91 	bl	182e8 <__aeabi_fmul>
   147c6:	4603      	mov	r3, r0
   147c8:	4620      	mov	r0, r4
   147ca:	4619      	mov	r1, r3
   147cc:	f003 fc84 	bl	180d8 <__addsf3>
   147d0:	4603      	mov	r3, r0
   147d2:	461a      	mov	r2, r3
   147d4:	f64a 6340 	movw	r3, #44608	; 0xae40
   147d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147dc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   147de:	f64a 6340 	movw	r3, #44608	; 0xae40
   147e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147e6:	681b      	ldr	r3, [r3, #0]
   147e8:	2201      	movs	r2, #1
   147ea:	4614      	mov	r4, r2
   147ec:	4618      	mov	r0, r3
   147ee:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   147f2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   147f6:	f003 ff33 	bl	18660 <__aeabi_fcmpgt>
   147fa:	4603      	mov	r3, r0
   147fc:	2b00      	cmp	r3, #0
   147fe:	d101      	bne.n	14804 <compute_dist2_to_home+0x98>
   14800:	2300      	movs	r3, #0
   14802:	461c      	mov	r4, r3
   14804:	b2e3      	uxtb	r3, r4
   14806:	461a      	mov	r2, r3
   14808:	f64a 6344 	movw	r3, #44612	; 0xae44
   1480c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14810:	701a      	strb	r2, [r3, #0]
}
   14812:	370c      	adds	r7, #12
   14814:	46bd      	mov	sp, r7
   14816:	bd90      	pop	{r4, r7, pc}

00014818 <nav_home>:

void nav_home(void) {
   14818:	b580      	push	{r7, lr}
   1481a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   1481c:	f64a 6334 	movw	r3, #44596	; 0xae34
   14820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14824:	f04f 0200 	mov.w	r2, #0
   14828:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1482a:	f64a 2395 	movw	r3, #43669	; 0xaa95
   1482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14832:	2203      	movs	r2, #3
   14834:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14836:	f240 23b8 	movw	r3, #696	; 0x2b8
   1483a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1483e:	f04f 0200 	mov.w	r2, #0
   14842:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14846:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14848:	f7ff ff90 	bl	1476c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   1484c:	f64a 6340 	movw	r3, #44608	; 0xae40
   14850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14854:	681a      	ldr	r2, [r3, #0]
   14856:	f64a 633c 	movw	r3, #44604	; 0xae3c
   1485a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485e:	601a      	str	r2, [r3, #0]
}
   14860:	bd80      	pop	{r7, pc}
   14862:	bf00      	nop

00014864 <nav_update>:

void nav_update(void) {
   14864:	b580      	push	{r7, lr}
   14866:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14868:	f7ff ff80 	bl	1476c <compute_dist2_to_home>

  auto_nav();
   1486c:	f7fd fc0c 	bl	12088 <auto_nav>
}
   14870:	bd80      	pop	{r7, pc}
   14872:	bf00      	nop

00014874 <nav_init>:


void nav_init(void) {
   14874:	b480      	push	{r7}
   14876:	af00      	add	r7, sp, #0
  nav_block = 0;
   14878:	f64a 6309 	movw	r3, #44553	; 0xae09
   1487c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14880:	2200      	movs	r2, #0
   14882:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14884:	f64a 6308 	movw	r3, #44552	; 0xae08
   14888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1488c:	2200      	movs	r2, #0
   1488e:	701a      	strb	r2, [r3, #0]
}
   14890:	46bd      	mov	sp, r7
   14892:	f85d 7b04 	ldr.w	r7, [sp], #4
   14896:	4770      	bx	lr

00014898 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14898:	b480      	push	{r7}
   1489a:	b083      	sub	sp, #12
   1489c:	af00      	add	r7, sp, #0
   1489e:	4603      	mov	r3, r0
   148a0:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   148a2:	f242 030a 	movw	r3, #8202	; 0x200a
   148a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148aa:	781b      	ldrb	r3, [r3, #0]
   148ac:	b2db      	uxtb	r3, r3
   148ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   148b2:	2b00      	cmp	r3, #0
   148b4:	d028      	beq.n	14908 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   148b6:	f64a 635d 	movw	r3, #44637	; 0xae5d
   148ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148be:	781b      	ldrb	r3, [r3, #0]
   148c0:	b2db      	uxtb	r3, r3
   148c2:	461a      	mov	r2, r3
   148c4:	f64a 635c 	movw	r3, #44636	; 0xae5c
   148c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148cc:	781b      	ldrb	r3, [r3, #0]
   148ce:	3301      	adds	r3, #1
   148d0:	429a      	cmp	r2, r3
   148d2:	d100      	bne.n	148d6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   148d4:	e02c      	b.n	14930 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   148d6:	f64a 635c 	movw	r3, #44636	; 0xae5c
   148da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	461a      	mov	r2, r3
   148e2:	f64a 6360 	movw	r3, #44640	; 0xae60
   148e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ea:	79f9      	ldrb	r1, [r7, #7]
   148ec:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   148ee:	f64a 635c 	movw	r3, #44636	; 0xae5c
   148f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f6:	781b      	ldrb	r3, [r3, #0]
   148f8:	3301      	adds	r3, #1
   148fa:	b2da      	uxtb	r2, r3
   148fc:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14904:	701a      	strb	r2, [r3, #0]
   14906:	e013      	b.n	14930 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14908:	f242 030c 	movw	r3, #8204	; 0x200c
   1490c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14910:	79fa      	ldrb	r2, [r7, #7]
   14912:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14914:	f242 030a 	movw	r3, #8202	; 0x200a
   14918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1491c:	f242 020a 	movw	r2, #8202	; 0x200a
   14920:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14924:	7812      	ldrb	r2, [r2, #0]
   14926:	b2d2      	uxtb	r2, r2
   14928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1492c:	b2d2      	uxtb	r2, r2
   1492e:	701a      	strb	r2, [r3, #0]
  }
}
   14930:	370c      	adds	r7, #12
   14932:	46bd      	mov	sp, r7
   14934:	f85d 7b04 	ldr.w	r7, [sp], #4
   14938:	4770      	bx	lr
   1493a:	bf00      	nop

0001493c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   1493c:	b480      	push	{r7}
   1493e:	b083      	sub	sp, #12
   14940:	af00      	add	r7, sp, #0
   14942:	4603      	mov	r3, r0
   14944:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14946:	f242 039a 	movw	r3, #8346	; 0x209a
   1494a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1494e:	781b      	ldrb	r3, [r3, #0]
   14950:	b2db      	uxtb	r3, r3
   14952:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14956:	2b00      	cmp	r3, #0
   14958:	d028      	beq.n	149ac <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   1495a:	f64a 7361 	movw	r3, #44897	; 0xaf61
   1495e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14962:	781b      	ldrb	r3, [r3, #0]
   14964:	b2db      	uxtb	r3, r3
   14966:	461a      	mov	r2, r3
   14968:	f64a 7360 	movw	r3, #44896	; 0xaf60
   1496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14970:	781b      	ldrb	r3, [r3, #0]
   14972:	3301      	adds	r3, #1
   14974:	429a      	cmp	r2, r3
   14976:	d100      	bne.n	1497a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14978:	e02c      	b.n	149d4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   1497a:	f64a 7360 	movw	r3, #44896	; 0xaf60
   1497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14982:	781b      	ldrb	r3, [r3, #0]
   14984:	461a      	mov	r2, r3
   14986:	f64a 7364 	movw	r3, #44900	; 0xaf64
   1498a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1498e:	79f9      	ldrb	r1, [r7, #7]
   14990:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14992:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1499a:	781b      	ldrb	r3, [r3, #0]
   1499c:	3301      	adds	r3, #1
   1499e:	b2da      	uxtb	r2, r3
   149a0:	f64a 7360 	movw	r3, #44896	; 0xaf60
   149a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149a8:	701a      	strb	r2, [r3, #0]
   149aa:	e013      	b.n	149d4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   149ac:	f242 039c 	movw	r3, #8348	; 0x209c
   149b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149b4:	79fa      	ldrb	r2, [r7, #7]
   149b6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   149b8:	f242 039a 	movw	r3, #8346	; 0x209a
   149bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c0:	f242 029a 	movw	r2, #8346	; 0x209a
   149c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149c8:	7812      	ldrb	r2, [r2, #0]
   149ca:	b2d2      	uxtb	r2, r2
   149cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   149d0:	b2d2      	uxtb	r2, r2
   149d2:	701a      	strb	r2, [r3, #0]
  }
}
   149d4:	370c      	adds	r7, #12
   149d6:	46bd      	mov	sp, r7
   149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   149dc:	4770      	bx	lr
   149de:	bf00      	nop

000149e0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   149e0:	b580      	push	{r7, lr}
   149e2:	b084      	sub	sp, #16
   149e4:	af00      	add	r7, sp, #0
   149e6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   149e8:	2300      	movs	r3, #0
   149ea:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   149ec:	e009      	b.n	14a02 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   149ee:	7bfb      	ldrb	r3, [r7, #15]
   149f0:	687a      	ldr	r2, [r7, #4]
   149f2:	4413      	add	r3, r2
   149f4:	781b      	ldrb	r3, [r3, #0]
   149f6:	4618      	mov	r0, r3
   149f8:	f7ff ff4e 	bl	14898 <uart0_transmit>
    i++;
   149fc:	7bfb      	ldrb	r3, [r7, #15]
   149fe:	3301      	adds	r3, #1
   14a00:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14a02:	7bfb      	ldrb	r3, [r7, #15]
   14a04:	687a      	ldr	r2, [r7, #4]
   14a06:	4413      	add	r3, r2
   14a08:	781b      	ldrb	r3, [r3, #0]
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d1ef      	bne.n	149ee <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14a0e:	3710      	adds	r7, #16
   14a10:	46bd      	mov	sp, r7
   14a12:	bd80      	pop	{r7, pc}

00014a14 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14a14:	b590      	push	{r4, r7, lr}
   14a16:	b089      	sub	sp, #36	; 0x24
   14a18:	af00      	add	r7, sp, #0
   14a1a:	4603      	mov	r3, r0
   14a1c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14a1e:	f648 1378 	movw	r3, #35192	; 0x8978
   14a22:	f2c0 0301 	movt	r3, #1
   14a26:	f107 040c 	add.w	r4, r7, #12
   14a2a:	6818      	ldr	r0, [r3, #0]
   14a2c:	6859      	ldr	r1, [r3, #4]
   14a2e:	689a      	ldr	r2, [r3, #8]
   14a30:	68db      	ldr	r3, [r3, #12]
   14a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14a34:	79fb      	ldrb	r3, [r7, #7]
   14a36:	091b      	lsrs	r3, r3, #4
   14a38:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14a3a:	79fb      	ldrb	r3, [r7, #7]
   14a3c:	f003 030f 	and.w	r3, r3, #15
   14a40:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14a42:	230f      	movs	r3, #15
   14a44:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14a46:	230f      	movs	r3, #15
   14a48:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14a4a:	7ffb      	ldrb	r3, [r7, #31]
   14a4c:	f107 0220 	add.w	r2, r7, #32
   14a50:	4413      	add	r3, r2
   14a52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14a56:	4618      	mov	r0, r3
   14a58:	f7ff ff1e 	bl	14898 <uart0_transmit>
  uart0_transmit(hex[low]);
   14a5c:	7fbb      	ldrb	r3, [r7, #30]
   14a5e:	f107 0220 	add.w	r2, r7, #32
   14a62:	4413      	add	r3, r2
   14a64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14a68:	4618      	mov	r0, r3
   14a6a:	f7ff ff15 	bl	14898 <uart0_transmit>
}
   14a6e:	3724      	adds	r7, #36	; 0x24
   14a70:	46bd      	mov	sp, r7
   14a72:	bd90      	pop	{r4, r7, pc}

00014a74 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14a74:	b480      	push	{r7}
   14a76:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14a78:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a80:	781a      	ldrb	r2, [r3, #0]
   14a82:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a8a:	781b      	ldrb	r3, [r3, #0]
   14a8c:	b2db      	uxtb	r3, r3
   14a8e:	429a      	cmp	r2, r3
   14a90:	d10e      	bne.n	14ab0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14a92:	f242 030a 	movw	r3, #8202	; 0x200a
   14a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a9a:	f242 020a 	movw	r2, #8202	; 0x200a
   14a9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aa2:	7812      	ldrb	r2, [r2, #0]
   14aa4:	b2d2      	uxtb	r2, r2
   14aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14aaa:	b2d2      	uxtb	r2, r2
   14aac:	701a      	strb	r2, [r3, #0]
   14aae:	e01d      	b.n	14aec <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14ab0:	f242 030c 	movw	r3, #8204	; 0x200c
   14ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab8:	f64a 625d 	movw	r2, #44637	; 0xae5d
   14abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ac0:	7812      	ldrb	r2, [r2, #0]
   14ac2:	b2d2      	uxtb	r2, r2
   14ac4:	4611      	mov	r1, r2
   14ac6:	f64a 6260 	movw	r2, #44640	; 0xae60
   14aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ace:	5c52      	ldrb	r2, [r2, r1]
   14ad0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14ad2:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ada:	781b      	ldrb	r3, [r3, #0]
   14adc:	b2db      	uxtb	r3, r3
   14ade:	3301      	adds	r3, #1
   14ae0:	b2da      	uxtb	r2, r3
   14ae2:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aea:	701a      	strb	r2, [r3, #0]
  }
}
   14aec:	46bd      	mov	sp, r7
   14aee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14af2:	4770      	bx	lr

00014af4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14af4:	b480      	push	{r7}
   14af6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14af8:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b00:	781a      	ldrb	r2, [r3, #0]
   14b02:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b0a:	781b      	ldrb	r3, [r3, #0]
   14b0c:	b2db      	uxtb	r3, r3
   14b0e:	429a      	cmp	r2, r3
   14b10:	d10e      	bne.n	14b30 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14b12:	f242 039a 	movw	r3, #8346	; 0x209a
   14b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b1a:	f242 029a 	movw	r2, #8346	; 0x209a
   14b1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b22:	7812      	ldrb	r2, [r2, #0]
   14b24:	b2d2      	uxtb	r2, r2
   14b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14b2a:	b2d2      	uxtb	r2, r2
   14b2c:	701a      	strb	r2, [r3, #0]
   14b2e:	e01d      	b.n	14b6c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14b30:	f242 039c 	movw	r3, #8348	; 0x209c
   14b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b38:	f64a 7261 	movw	r2, #44897	; 0xaf61
   14b3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b40:	7812      	ldrb	r2, [r2, #0]
   14b42:	b2d2      	uxtb	r2, r2
   14b44:	4611      	mov	r1, r2
   14b46:	f64a 7264 	movw	r2, #44900	; 0xaf64
   14b4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b4e:	5c52      	ldrb	r2, [r2, r1]
   14b50:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14b52:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5a:	781b      	ldrb	r3, [r3, #0]
   14b5c:	b2db      	uxtb	r3, r3
   14b5e:	3301      	adds	r3, #1
   14b60:	b2da      	uxtb	r2, r3
   14b62:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6a:	701a      	strb	r2, [r3, #0]
  }
}
   14b6c:	46bd      	mov	sp, r7
   14b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b72:	4770      	bx	lr

00014b74 <uart0_init>:

void uart0_init( void ) {
   14b74:	b480      	push	{r7}
   14b76:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14b78:	f242 0390 	movw	r3, #8336	; 0x2090
   14b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b80:	2200      	movs	r2, #0
   14b82:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14b84:	f242 0309 	movw	r3, #8201	; 0x2009
   14b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8c:	2219      	movs	r2, #25
   14b8e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14b90:	f242 030b 	movw	r3, #8203	; 0x200b
   14b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b98:	2200      	movs	r2, #0
   14b9a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14b9c:	f242 030a 	movw	r3, #8202	; 0x200a
   14ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba4:	2218      	movs	r2, #24
   14ba6:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14ba8:	f242 0395 	movw	r3, #8341	; 0x2095
   14bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb0:	2206      	movs	r2, #6
   14bb2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14bb4:	f242 030a 	movw	r3, #8202	; 0x200a
   14bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bbc:	f242 020a 	movw	r2, #8202	; 0x200a
   14bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bc4:	7812      	ldrb	r2, [r2, #0]
   14bc6:	b2d2      	uxtb	r2, r2
   14bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14bcc:	b2d2      	uxtb	r2, r2
   14bce:	701a      	strb	r2, [r3, #0]
}
   14bd0:	46bd      	mov	sp, r7
   14bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bd6:	4770      	bx	lr

00014bd8 <uart1_init>:

void uart1_init( void ) {
   14bd8:	b480      	push	{r7}
   14bda:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14bdc:	f242 0398 	movw	r3, #8344	; 0x2098
   14be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14be4:	2200      	movs	r2, #0
   14be6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14be8:	f242 0399 	movw	r3, #8345	; 0x2099
   14bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf0:	2219      	movs	r2, #25
   14bf2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14bf4:	f242 039b 	movw	r3, #8347	; 0x209b
   14bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bfc:	2200      	movs	r2, #0
   14bfe:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14c00:	f242 039a 	movw	r3, #8346	; 0x209a
   14c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c08:	2218      	movs	r2, #24
   14c0a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14c0c:	f242 039d 	movw	r3, #8349	; 0x209d
   14c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c14:	2206      	movs	r2, #6
   14c16:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14c18:	f242 039a 	movw	r3, #8346	; 0x209a
   14c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c20:	f242 029a 	movw	r2, #8346	; 0x209a
   14c24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c28:	7812      	ldrb	r2, [r2, #0]
   14c2a:	b2d2      	uxtb	r2, r2
   14c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14c30:	b2d2      	uxtb	r2, r2
   14c32:	701a      	strb	r2, [r3, #0]
}
   14c34:	46bd      	mov	sp, r7
   14c36:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c3a:	4770      	bx	lr
   14c3c:	0000      	movs	r0, r0
	...

00014c40 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14c40:	b480      	push	{r7}
   14c42:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14c44:	f24b 0364 	movw	r3, #45156	; 0xb064
   14c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c4c:	f04f 0200 	mov.w	r2, #0
   14c50:	601a      	str	r2, [r3, #0]
   14c52:	f24b 0368 	movw	r3, #45160	; 0xb068
   14c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c5a:	f04f 0200 	mov.w	r2, #0
   14c5e:	601a      	str	r2, [r3, #0]
   14c60:	f24b 036c 	movw	r3, #45164	; 0xb06c
   14c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c68:	f04f 0200 	mov.w	r2, #0
   14c6c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14c6e:	f24b 0370 	movw	r3, #45168	; 0xb070
   14c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c76:	f04f 0200 	mov.w	r2, #0
   14c7a:	601a      	str	r2, [r3, #0]
   14c7c:	f24b 0374 	movw	r3, #45172	; 0xb074
   14c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c84:	f04f 0200 	mov.w	r2, #0
   14c88:	601a      	str	r2, [r3, #0]
   14c8a:	f24b 0378 	movw	r3, #45176	; 0xb078
   14c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c92:	f04f 0200 	mov.w	r2, #0
   14c96:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14c98:	f24b 039c 	movw	r3, #45212	; 0xb09c
   14c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca0:	f04f 0200 	mov.w	r2, #0
   14ca4:	601a      	str	r2, [r3, #0]
   14ca6:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cae:	f04f 0200 	mov.w	r2, #0
   14cb2:	601a      	str	r2, [r3, #0]
   14cb4:	f24b 0384 	movw	r3, #45188	; 0xb084
   14cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cbc:	f04f 0200 	mov.w	r2, #0
   14cc0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14cc2:	f24b 0388 	movw	r3, #45192	; 0xb088
   14cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cca:	f04f 0200 	mov.w	r2, #0
   14cce:	601a      	str	r2, [r3, #0]
   14cd0:	f24b 038c 	movw	r3, #45196	; 0xb08c
   14cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd8:	f04f 0200 	mov.w	r2, #0
   14cdc:	601a      	str	r2, [r3, #0]
   14cde:	f24b 0390 	movw	r3, #45200	; 0xb090
   14ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ce6:	f04f 0200 	mov.w	r2, #0
   14cea:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14cec:	f24b 0394 	movw	r3, #45204	; 0xb094
   14cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cf4:	2200      	movs	r2, #0
   14cf6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14cf8:	f240 238c 	movw	r3, #652	; 0x28c
   14cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d00:	681a      	ldr	r2, [r3, #0]
   14d02:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d0a:	601a      	str	r2, [r3, #0]
}
   14d0c:	46bd      	mov	sp, r7
   14d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d12:	4770      	bx	lr

00014d14 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14d14:	b580      	push	{r7, lr}
   14d16:	b082      	sub	sp, #8
   14d18:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14d1a:	f240 2380 	movw	r3, #640	; 0x280
   14d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d22:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14d24:	2b01      	cmp	r3, #1
   14d26:	d105      	bne.n	14d34 <estimator_update_state_infrared+0x20>
   14d28:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d30:	681b      	ldr	r3, [r3, #0]
   14d32:	e004      	b.n	14d3e <estimator_update_state_infrared+0x2a>
   14d34:	f240 238c 	movw	r3, #652	; 0x28c
   14d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d3c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14d3e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14d40:	f64a 5350 	movw	r3, #44368	; 0xad50
   14d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d48:	881b      	ldrh	r3, [r3, #0]
   14d4a:	b21b      	sxth	r3, r3
   14d4c:	4618      	mov	r0, r3
   14d4e:	f003 fa77 	bl	18240 <__aeabi_i2f>
   14d52:	4603      	mov	r3, r0
   14d54:	4618      	mov	r0, r3
   14d56:	6879      	ldr	r1, [r7, #4]
   14d58:	f003 fac6 	bl	182e8 <__aeabi_fmul>
   14d5c:	4603      	mov	r3, r0
   14d5e:	461a      	mov	r2, r3
   14d60:	f24b 0370 	movw	r3, #45168	; 0xb070
   14d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d68:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14d6a:	f64a 5352 	movw	r3, #44370	; 0xad52
   14d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d72:	881b      	ldrh	r3, [r3, #0]
   14d74:	b21b      	sxth	r3, r3
   14d76:	4618      	mov	r0, r3
   14d78:	f003 fa62 	bl	18240 <__aeabi_i2f>
   14d7c:	4603      	mov	r3, r0
   14d7e:	4618      	mov	r0, r3
   14d80:	6879      	ldr	r1, [r7, #4]
   14d82:	f003 fab1 	bl	182e8 <__aeabi_fmul>
   14d86:	4603      	mov	r3, r0
   14d88:	461a      	mov	r2, r3
   14d8a:	f24b 0378 	movw	r3, #45176	; 0xb078
   14d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d92:	601a      	str	r2, [r3, #0]
}
   14d94:	3708      	adds	r7, #8
   14d96:	46bd      	mov	sp, r7
   14d98:	bd80      	pop	{r7, pc}
   14d9a:	bf00      	nop

00014d9c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14d9c:	b5b0      	push	{r4, r5, r7, lr}
   14d9e:	b084      	sub	sp, #16
   14da0:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14da2:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   14da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14daa:	781b      	ldrb	r3, [r3, #0]
   14dac:	2b00      	cmp	r3, #0
   14dae:	f000 81e8 	beq.w	15182 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14db2:	f64a 4320 	movw	r3, #44064	; 0xac20
   14db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dba:	681a      	ldr	r2, [r3, #0]
   14dbc:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   14dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc4:	681b      	ldr	r3, [r3, #0]
   14dc6:	4610      	mov	r0, r2
   14dc8:	4619      	mov	r1, r3
   14dca:	f003 f983 	bl	180d4 <__aeabi_fsub>
   14dce:	4603      	mov	r3, r0
   14dd0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14dd2:	68b8      	ldr	r0, [r7, #8]
   14dd4:	f002 fdf4 	bl	179c0 <__aeabi_f2d>
   14dd8:	4602      	mov	r2, r0
   14dda:	460b      	mov	r3, r1
   14ddc:	4610      	mov	r0, r2
   14dde:	4619      	mov	r1, r3
   14de0:	a385      	add	r3, pc, #532	; (adr r3, 14ff8 <estimator_update_ir_estim+0x25c>)
   14de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14de6:	f003 f8cf 	bl	17f88 <__aeabi_dcmpgt>
   14dea:	4603      	mov	r3, r0
   14dec:	2b00      	cmp	r3, #0
   14dee:	d100      	bne.n	14df2 <estimator_update_ir_estim+0x56>
   14df0:	e219      	b.n	15226 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14df2:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfa:	681a      	ldr	r2, [r3, #0]
   14dfc:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   14e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e04:	681b      	ldr	r3, [r3, #0]
   14e06:	4610      	mov	r0, r2
   14e08:	4619      	mov	r1, r3
   14e0a:	f003 f963 	bl	180d4 <__aeabi_fsub>
   14e0e:	4603      	mov	r3, r0
   14e10:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14e12:	e013      	b.n	14e3c <estimator_update_ir_estim+0xa0>
   14e14:	68f8      	ldr	r0, [r7, #12]
   14e16:	f002 fdd3 	bl	179c0 <__aeabi_f2d>
   14e1a:	4602      	mov	r2, r0
   14e1c:	460b      	mov	r3, r1
   14e1e:	4610      	mov	r0, r2
   14e20:	4619      	mov	r1, r3
   14e22:	a377      	add	r3, pc, #476	; (adr r3, 15000 <estimator_update_ir_estim+0x264>)
   14e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e28:	f002 fc6a 	bl	17700 <__aeabi_dsub>
   14e2c:	4602      	mov	r2, r0
   14e2e:	460b      	mov	r3, r1
   14e30:	4610      	mov	r0, r2
   14e32:	4619      	mov	r1, r3
   14e34:	f003 f8fa 	bl	1802c <__aeabi_d2f>
   14e38:	4603      	mov	r3, r0
   14e3a:	60fb      	str	r3, [r7, #12]
   14e3c:	68f8      	ldr	r0, [r7, #12]
   14e3e:	f002 fdbf 	bl	179c0 <__aeabi_f2d>
   14e42:	4602      	mov	r2, r0
   14e44:	460b      	mov	r3, r1
   14e46:	4610      	mov	r0, r2
   14e48:	4619      	mov	r1, r3
   14e4a:	a36f      	add	r3, pc, #444	; (adr r3, 15008 <estimator_update_ir_estim+0x26c>)
   14e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e50:	f003 f89a 	bl	17f88 <__aeabi_dcmpgt>
   14e54:	4603      	mov	r3, r0
   14e56:	2b00      	cmp	r3, #0
   14e58:	d1dc      	bne.n	14e14 <estimator_update_ir_estim+0x78>
   14e5a:	e013      	b.n	14e84 <estimator_update_ir_estim+0xe8>
   14e5c:	68f8      	ldr	r0, [r7, #12]
   14e5e:	f002 fdaf 	bl	179c0 <__aeabi_f2d>
   14e62:	4602      	mov	r2, r0
   14e64:	460b      	mov	r3, r1
   14e66:	4610      	mov	r0, r2
   14e68:	4619      	mov	r1, r3
   14e6a:	a365      	add	r3, pc, #404	; (adr r3, 15000 <estimator_update_ir_estim+0x264>)
   14e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e70:	f002 fc48 	bl	17704 <__adddf3>
   14e74:	4602      	mov	r2, r0
   14e76:	460b      	mov	r3, r1
   14e78:	4610      	mov	r0, r2
   14e7a:	4619      	mov	r1, r3
   14e7c:	f003 f8d6 	bl	1802c <__aeabi_d2f>
   14e80:	4603      	mov	r3, r0
   14e82:	60fb      	str	r3, [r7, #12]
   14e84:	68f8      	ldr	r0, [r7, #12]
   14e86:	f002 fd9b 	bl	179c0 <__aeabi_f2d>
   14e8a:	4602      	mov	r2, r0
   14e8c:	460b      	mov	r3, r1
   14e8e:	4610      	mov	r0, r2
   14e90:	4619      	mov	r1, r3
   14e92:	a35f      	add	r3, pc, #380	; (adr r3, 15010 <estimator_update_ir_estim+0x274>)
   14e94:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e98:	f003 f858 	bl	17f4c <__aeabi_dcmplt>
   14e9c:	4603      	mov	r3, r0
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	d1dc      	bne.n	14e5c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14ea2:	68f8      	ldr	r0, [r7, #12]
   14ea4:	68b9      	ldr	r1, [r7, #8]
   14ea6:	f003 fad3 	bl	18450 <__aeabi_fdiv>
   14eaa:	4603      	mov	r3, r0
   14eac:	4618      	mov	r0, r3
   14eae:	f002 fd87 	bl	179c0 <__aeabi_f2d>
   14eb2:	4602      	mov	r2, r0
   14eb4:	460b      	mov	r3, r1
   14eb6:	4610      	mov	r0, r2
   14eb8:	4619      	mov	r1, r3
   14eba:	f04f 0200 	mov.w	r2, #0
   14ebe:	f04f 0300 	mov.w	r3, #0
   14ec2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14ec6:	f002 fdcf 	bl	17a68 <__aeabi_dmul>
   14eca:	4602      	mov	r2, r0
   14ecc:	460b      	mov	r3, r1
   14ece:	4610      	mov	r0, r2
   14ed0:	4619      	mov	r1, r3
   14ed2:	a351      	add	r3, pc, #324	; (adr r3, 15018 <estimator_update_ir_estim+0x27c>)
   14ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ed8:	f002 fef0 	bl	17cbc <__aeabi_ddiv>
   14edc:	4602      	mov	r2, r0
   14ede:	460b      	mov	r3, r1
   14ee0:	4610      	mov	r0, r2
   14ee2:	4619      	mov	r1, r3
   14ee4:	f003 f8a2 	bl	1802c <__aeabi_d2f>
   14ee8:	4603      	mov	r3, r0
   14eea:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14eec:	e013      	b.n	14f16 <estimator_update_ir_estim+0x17a>
   14eee:	68f8      	ldr	r0, [r7, #12]
   14ef0:	f002 fd66 	bl	179c0 <__aeabi_f2d>
   14ef4:	4602      	mov	r2, r0
   14ef6:	460b      	mov	r3, r1
   14ef8:	4610      	mov	r0, r2
   14efa:	4619      	mov	r1, r3
   14efc:	a340      	add	r3, pc, #256	; (adr r3, 15000 <estimator_update_ir_estim+0x264>)
   14efe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f02:	f002 fbfd 	bl	17700 <__aeabi_dsub>
   14f06:	4602      	mov	r2, r0
   14f08:	460b      	mov	r3, r1
   14f0a:	4610      	mov	r0, r2
   14f0c:	4619      	mov	r1, r3
   14f0e:	f003 f88d 	bl	1802c <__aeabi_d2f>
   14f12:	4603      	mov	r3, r0
   14f14:	60fb      	str	r3, [r7, #12]
   14f16:	68f8      	ldr	r0, [r7, #12]
   14f18:	f002 fd52 	bl	179c0 <__aeabi_f2d>
   14f1c:	4602      	mov	r2, r0
   14f1e:	460b      	mov	r3, r1
   14f20:	4610      	mov	r0, r2
   14f22:	4619      	mov	r1, r3
   14f24:	a338      	add	r3, pc, #224	; (adr r3, 15008 <estimator_update_ir_estim+0x26c>)
   14f26:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f2a:	f003 f82d 	bl	17f88 <__aeabi_dcmpgt>
   14f2e:	4603      	mov	r3, r0
   14f30:	2b00      	cmp	r3, #0
   14f32:	d1dc      	bne.n	14eee <estimator_update_ir_estim+0x152>
   14f34:	e013      	b.n	14f5e <estimator_update_ir_estim+0x1c2>
   14f36:	68f8      	ldr	r0, [r7, #12]
   14f38:	f002 fd42 	bl	179c0 <__aeabi_f2d>
   14f3c:	4602      	mov	r2, r0
   14f3e:	460b      	mov	r3, r1
   14f40:	4610      	mov	r0, r2
   14f42:	4619      	mov	r1, r3
   14f44:	a32e      	add	r3, pc, #184	; (adr r3, 15000 <estimator_update_ir_estim+0x264>)
   14f46:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f4a:	f002 fbdb 	bl	17704 <__adddf3>
   14f4e:	4602      	mov	r2, r0
   14f50:	460b      	mov	r3, r1
   14f52:	4610      	mov	r0, r2
   14f54:	4619      	mov	r1, r3
   14f56:	f003 f869 	bl	1802c <__aeabi_d2f>
   14f5a:	4603      	mov	r3, r0
   14f5c:	60fb      	str	r3, [r7, #12]
   14f5e:	68f8      	ldr	r0, [r7, #12]
   14f60:	f002 fd2e 	bl	179c0 <__aeabi_f2d>
   14f64:	4602      	mov	r2, r0
   14f66:	460b      	mov	r3, r1
   14f68:	4610      	mov	r0, r2
   14f6a:	4619      	mov	r1, r3
   14f6c:	a328      	add	r3, pc, #160	; (adr r3, 15010 <estimator_update_ir_estim+0x274>)
   14f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f72:	f002 ffeb 	bl	17f4c <__aeabi_dcmplt>
   14f76:	4603      	mov	r3, r0
   14f78:	2b00      	cmp	r3, #0
   14f7a:	d1dc      	bne.n	14f36 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   14f7c:	f64a 5350 	movw	r3, #44368	; 0xad50
   14f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f84:	881b      	ldrh	r3, [r3, #0]
   14f86:	b21b      	sxth	r3, r3
   14f88:	4618      	mov	r0, r3
   14f8a:	f003 f959 	bl	18240 <__aeabi_i2f>
   14f8e:	4602      	mov	r2, r0
   14f90:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   14f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f98:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   14f9a:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   14f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa2:	68fa      	ldr	r2, [r7, #12]
   14fa4:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   14fa6:	68f8      	ldr	r0, [r7, #12]
   14fa8:	f04f 0100 	mov.w	r1, #0
   14fac:	f003 fb3a 	bl	18624 <__aeabi_fcmplt>
   14fb0:	4603      	mov	r3, r0
   14fb2:	2b00      	cmp	r3, #0
   14fb4:	d003      	beq.n	14fbe <estimator_update_ir_estim+0x222>
   14fb6:	68fb      	ldr	r3, [r7, #12]
   14fb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   14fbc:	e000      	b.n	14fc0 <estimator_update_ir_estim+0x224>
   14fbe:	68fb      	ldr	r3, [r7, #12]
   14fc0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   14fc2:	6878      	ldr	r0, [r7, #4]
   14fc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14fc8:	f003 fb2c 	bl	18624 <__aeabi_fcmplt>
   14fcc:	4603      	mov	r3, r0
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d100      	bne.n	14fd4 <estimator_update_ir_estim+0x238>
   14fd2:	e128      	b.n	15226 <estimator_update_ir_estim+0x48a>
   14fd4:	6878      	ldr	r0, [r7, #4]
   14fd6:	f002 fcf3 	bl	179c0 <__aeabi_f2d>
   14fda:	4602      	mov	r2, r0
   14fdc:	460b      	mov	r3, r1
   14fde:	4610      	mov	r0, r2
   14fe0:	4619      	mov	r1, r3
   14fe2:	a30f      	add	r3, pc, #60	; (adr r3, 15020 <estimator_update_ir_estim+0x284>)
   14fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fe8:	f002 ffce 	bl	17f88 <__aeabi_dcmpgt>
   14fec:	4603      	mov	r3, r0
   14fee:	2b00      	cmp	r3, #0
   14ff0:	d11a      	bne.n	15028 <estimator_update_ir_estim+0x28c>
   14ff2:	e118      	b.n	15226 <estimator_update_ir_estim+0x48a>
   14ff4:	f3af 8000 	nop.w
   14ff8:	9999999a 	.word	0x9999999a
   14ffc:	3fb99999 	.word	0x3fb99999
   15000:	54442d18 	.word	0x54442d18
   15004:	401921fb 	.word	0x401921fb
   15008:	54442d18 	.word	0x54442d18
   1500c:	400921fb 	.word	0x400921fb
   15010:	54442d18 	.word	0x54442d18
   15014:	c00921fb 	.word	0xc00921fb
   15018:	51eb851f 	.word	0x51eb851f
   1501c:	40239eb8 	.word	0x40239eb8
   15020:	9999999a 	.word	0x9999999a
   15024:	3fa99999 	.word	0x3fa99999
   15028:	f240 2384 	movw	r3, #644	; 0x284
   1502c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15030:	881b      	ldrh	r3, [r3, #0]
   15032:	b21b      	sxth	r3, r3
   15034:	425b      	negs	r3, r3
   15036:	0fda      	lsrs	r2, r3, #31
   15038:	4413      	add	r3, r2
   1503a:	105b      	asrs	r3, r3, #1
   1503c:	461a      	mov	r2, r3
   1503e:	f64a 5350 	movw	r3, #44368	; 0xad50
   15042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15046:	881b      	ldrh	r3, [r3, #0]
   15048:	b21b      	sxth	r3, r3
   1504a:	429a      	cmp	r2, r3
   1504c:	f280 8098 	bge.w	15180 <estimator_update_ir_estim+0x3e4>
   15050:	f240 2384 	movw	r3, #644	; 0x284
   15054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15058:	881b      	ldrh	r3, [r3, #0]
   1505a:	b21b      	sxth	r3, r3
   1505c:	0fda      	lsrs	r2, r3, #31
   1505e:	4413      	add	r3, r2
   15060:	105b      	asrs	r3, r3, #1
   15062:	b29a      	uxth	r2, r3
   15064:	f64a 5350 	movw	r3, #44368	; 0xad50
   15068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1506c:	881b      	ldrh	r3, [r3, #0]
   1506e:	b212      	sxth	r2, r2
   15070:	b21b      	sxth	r3, r3
   15072:	429a      	cmp	r2, r3
   15074:	f340 8084 	ble.w	15180 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15078:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   1507c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15080:	681a      	ldr	r2, [r3, #0]
   15082:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   15086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1508a:	681b      	ldr	r3, [r3, #0]
   1508c:	4610      	mov	r0, r2
   1508e:	4619      	mov	r1, r3
   15090:	f003 f92a 	bl	182e8 <__aeabi_fmul>
   15094:	4603      	mov	r3, r0
   15096:	4618      	mov	r0, r3
   15098:	f002 fc92 	bl	179c0 <__aeabi_f2d>
   1509c:	4604      	mov	r4, r0
   1509e:	460d      	mov	r5, r1
   150a0:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   150a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a8:	681b      	ldr	r3, [r3, #0]
   150aa:	4618      	mov	r0, r3
   150ac:	f002 fc88 	bl	179c0 <__aeabi_f2d>
   150b0:	4602      	mov	r2, r0
   150b2:	460b      	mov	r3, r1
   150b4:	4610      	mov	r0, r2
   150b6:	4619      	mov	r1, r3
   150b8:	a367      	add	r3, pc, #412	; (adr r3, 15258 <estimator_update_ir_estim+0x4bc>)
   150ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   150be:	f002 fcd3 	bl	17a68 <__aeabi_dmul>
   150c2:	4602      	mov	r2, r0
   150c4:	460b      	mov	r3, r1
   150c6:	4620      	mov	r0, r4
   150c8:	4629      	mov	r1, r5
   150ca:	f002 fb1b 	bl	17704 <__adddf3>
   150ce:	4602      	mov	r2, r0
   150d0:	460b      	mov	r3, r1
   150d2:	4610      	mov	r0, r2
   150d4:	4619      	mov	r1, r3
   150d6:	f002 ffa9 	bl	1802c <__aeabi_d2f>
   150da:	4602      	mov	r2, r0
   150dc:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   150e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   150e6:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   150ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ee:	681a      	ldr	r2, [r3, #0]
   150f0:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   150f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f8:	681b      	ldr	r3, [r3, #0]
   150fa:	4610      	mov	r0, r2
   150fc:	4619      	mov	r1, r3
   150fe:	f003 f8f3 	bl	182e8 <__aeabi_fmul>
   15102:	4603      	mov	r3, r0
   15104:	4618      	mov	r0, r3
   15106:	f002 fc5b 	bl	179c0 <__aeabi_f2d>
   1510a:	4604      	mov	r4, r0
   1510c:	460d      	mov	r5, r1
   1510e:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   15112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15116:	681b      	ldr	r3, [r3, #0]
   15118:	4618      	mov	r0, r3
   1511a:	f002 fc51 	bl	179c0 <__aeabi_f2d>
   1511e:	4602      	mov	r2, r0
   15120:	460b      	mov	r3, r1
   15122:	4610      	mov	r0, r2
   15124:	4619      	mov	r1, r3
   15126:	a34c      	add	r3, pc, #304	; (adr r3, 15258 <estimator_update_ir_estim+0x4bc>)
   15128:	e9d3 2300 	ldrd	r2, r3, [r3]
   1512c:	f002 fc9c 	bl	17a68 <__aeabi_dmul>
   15130:	4602      	mov	r2, r0
   15132:	460b      	mov	r3, r1
   15134:	4620      	mov	r0, r4
   15136:	4629      	mov	r1, r5
   15138:	f002 fae4 	bl	17704 <__adddf3>
   1513c:	4602      	mov	r2, r0
   1513e:	460b      	mov	r3, r1
   15140:	4610      	mov	r0, r2
   15142:	4619      	mov	r1, r3
   15144:	f002 ff72 	bl	1802c <__aeabi_d2f>
   15148:	4602      	mov	r2, r0
   1514a:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   1514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15152:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15154:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   15158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1515c:	681a      	ldr	r2, [r3, #0]
   1515e:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   15162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15166:	681b      	ldr	r3, [r3, #0]
   15168:	4610      	mov	r0, r2
   1516a:	4619      	mov	r1, r3
   1516c:	f003 f970 	bl	18450 <__aeabi_fdiv>
   15170:	4603      	mov	r3, r0
   15172:	461a      	mov	r2, r3
   15174:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   15178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517c:	601a      	str	r2, [r3, #0]
   1517e:	e052      	b.n	15226 <estimator_update_ir_estim+0x48a>
   15180:	e051      	b.n	15226 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15182:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   15186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1518a:	2201      	movs	r2, #1
   1518c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1518e:	f240 2384 	movw	r3, #644	; 0x284
   15192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15196:	881b      	ldrh	r3, [r3, #0]
   15198:	b21b      	sxth	r3, r3
   1519a:	4618      	mov	r0, r3
   1519c:	f003 f850 	bl	18240 <__aeabi_i2f>
   151a0:	4603      	mov	r3, r0
   151a2:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   151a4:	6838      	ldr	r0, [r7, #0]
   151a6:	6839      	ldr	r1, [r7, #0]
   151a8:	f003 f89e 	bl	182e8 <__aeabi_fmul>
   151ac:	4603      	mov	r3, r0
   151ae:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   151b0:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   151b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b8:	681b      	ldr	r3, [r3, #0]
   151ba:	4618      	mov	r0, r3
   151bc:	f002 fc00 	bl	179c0 <__aeabi_f2d>
   151c0:	4602      	mov	r2, r0
   151c2:	460b      	mov	r3, r1
   151c4:	4610      	mov	r0, r2
   151c6:	4619      	mov	r1, r3
   151c8:	f04f 0200 	mov.w	r2, #0
   151cc:	f04f 0300 	mov.w	r3, #0
   151d0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   151d4:	f002 fc48 	bl	17a68 <__aeabi_dmul>
   151d8:	4602      	mov	r2, r0
   151da:	460b      	mov	r3, r1
   151dc:	4614      	mov	r4, r2
   151de:	461d      	mov	r5, r3
   151e0:	6838      	ldr	r0, [r7, #0]
   151e2:	f002 fbed 	bl	179c0 <__aeabi_f2d>
   151e6:	4602      	mov	r2, r0
   151e8:	460b      	mov	r3, r1
   151ea:	4620      	mov	r0, r4
   151ec:	4629      	mov	r1, r5
   151ee:	f002 fc3b 	bl	17a68 <__aeabi_dmul>
   151f2:	4602      	mov	r2, r0
   151f4:	460b      	mov	r3, r1
   151f6:	4610      	mov	r0, r2
   151f8:	4619      	mov	r1, r3
   151fa:	f002 ff17 	bl	1802c <__aeabi_d2f>
   151fe:	4602      	mov	r2, r0
   15200:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   15204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15208:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1520a:	6838      	ldr	r0, [r7, #0]
   1520c:	f04f 0100 	mov.w	r1, #0
   15210:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15214:	f003 f868 	bl	182e8 <__aeabi_fmul>
   15218:	4603      	mov	r3, r0
   1521a:	461a      	mov	r2, r3
   1521c:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   15220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15224:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15226:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   1522a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1522e:	681a      	ldr	r2, [r3, #0]
   15230:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   15234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15238:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1523a:	f64a 4320 	movw	r3, #44064	; 0xac20
   1523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15242:	681a      	ldr	r2, [r3, #0]
   15244:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   15248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524c:	601a      	str	r2, [r3, #0]
}
   1524e:	3710      	adds	r7, #16
   15250:	46bd      	mov	sp, r7
   15252:	bdb0      	pop	{r4, r5, r7, pc}
   15254:	f3af 8000 	nop.w
   15258:	d916872b 	.word	0xd916872b
   1525c:	3feff7ce 	.word	0x3feff7ce

00015260 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15260:	b580      	push	{r7, lr}
   15262:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15264:	f64a 4344 	movw	r3, #44100	; 0xac44
   15268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1526c:	781b      	ldrb	r3, [r3, #0]
   1526e:	f003 0320 	and.w	r3, r3, #32
   15272:	2b00      	cmp	r3, #0
   15274:	d044      	beq.n	15300 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15276:	f64a 433c 	movw	r3, #44092	; 0xac3c
   1527a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1527e:	681a      	ldr	r2, [r3, #0]
   15280:	f24b 0364 	movw	r3, #45156	; 0xb064
   15284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15288:	601a      	str	r2, [r3, #0]
   1528a:	f64a 4340 	movw	r3, #44096	; 0xac40
   1528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15292:	681a      	ldr	r2, [r3, #0]
   15294:	f24b 0368 	movw	r3, #45160	; 0xb068
   15298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1529c:	601a      	str	r2, [r3, #0]
   1529e:	f64a 4324 	movw	r3, #44068	; 0xac24
   152a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152a6:	681a      	ldr	r2, [r3, #0]
   152a8:	f24b 036c 	movw	r3, #45164	; 0xb06c
   152ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152b0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   152b2:	f64a 4328 	movw	r3, #44072	; 0xac28
   152b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ba:	681a      	ldr	r2, [r3, #0]
   152bc:	f24b 039c 	movw	r3, #45212	; 0xb09c
   152c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c4:	601a      	str	r2, [r3, #0]
   152c6:	f64a 4330 	movw	r3, #44080	; 0xac30
   152ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ce:	681a      	ldr	r2, [r3, #0]
   152d0:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   152d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d8:	601a      	str	r2, [r3, #0]
   152da:	f64a 432c 	movw	r3, #44076	; 0xac2c
   152de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152e2:	681a      	ldr	r2, [r3, #0]
   152e4:	f24b 0384 	movw	r3, #45188	; 0xb084
   152e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ec:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   152ee:	f24b 0394 	movw	r3, #45204	; 0xb094
   152f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f6:	881b      	ldrh	r3, [r3, #0]
   152f8:	2b00      	cmp	r3, #0
   152fa:	d001      	beq.n	15300 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   152fc:	f7ff fd4e 	bl	14d9c <estimator_update_ir_estim>
  }
}
   15300:	bd80      	pop	{r7, pc}
   15302:	bf00      	nop

00015304 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   15304:	b480      	push	{r7}
   15306:	af00      	add	r7, sp, #0
  
}
   15308:	46bd      	mov	sp, r7
   1530a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1530e:	4770      	bx	lr

00015310 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15310:	b5b0      	push	{r4, r5, r7, lr}
   15312:	b082      	sub	sp, #8
   15314:	af00      	add	r7, sp, #0
   15316:	4603      	mov	r3, r0
   15318:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1531a:	f64a 2394 	movw	r3, #43668	; 0xaa94
   1531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	2b01      	cmp	r3, #1
   15326:	f040 80e0 	bne.w	154ea <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1532a:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   1532e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	2b02      	cmp	r3, #2
   15336:	d168      	bne.n	1540a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15338:	79fb      	ldrb	r3, [r7, #7]
   1533a:	2b00      	cmp	r3, #0
   1533c:	d013      	beq.n	15366 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1533e:	f240 2388 	movw	r3, #648	; 0x288
   15342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15346:	881a      	ldrh	r2, [r3, #0]
   15348:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   1534c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15350:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15352:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1535a:	895a      	ldrh	r2, [r3, #10]
   1535c:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15364:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15366:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1536e:	895b      	ldrh	r3, [r3, #10]
   15370:	b21a      	sxth	r2, r3
   15372:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1537a:	881b      	ldrh	r3, [r3, #0]
   1537c:	b21b      	sxth	r3, r3
   1537e:	1ad3      	subs	r3, r2, r3
   15380:	4618      	mov	r0, r3
   15382:	f002 ff5d 	bl	18240 <__aeabi_i2f>
   15386:	4603      	mov	r3, r0
   15388:	4618      	mov	r0, r3
   1538a:	f002 fb19 	bl	179c0 <__aeabi_f2d>
   1538e:	4602      	mov	r2, r0
   15390:	460b      	mov	r3, r1
   15392:	4610      	mov	r0, r2
   15394:	4619      	mov	r1, r3
   15396:	f04f 0200 	mov.w	r2, #0
   1539a:	f04f 0300 	mov.w	r3, #0
   1539e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   153a2:	f002 fb61 	bl	17a68 <__aeabi_dmul>
   153a6:	4602      	mov	r2, r0
   153a8:	460b      	mov	r3, r1
   153aa:	4610      	mov	r0, r2
   153ac:	4619      	mov	r1, r3
   153ae:	f04f 0200 	mov.w	r2, #0
   153b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   153b6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   153ba:	f002 fc7f 	bl	17cbc <__aeabi_ddiv>
   153be:	4602      	mov	r2, r0
   153c0:	460b      	mov	r3, r1
   153c2:	4610      	mov	r0, r2
   153c4:	4619      	mov	r1, r3
   153c6:	f002 fde9 	bl	17f9c <__aeabi_d2iz>
   153ca:	4603      	mov	r3, r0
   153cc:	b29b      	uxth	r3, r3
   153ce:	b29a      	uxth	r2, r3
   153d0:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   153d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153d8:	881b      	ldrh	r3, [r3, #0]
   153da:	b29b      	uxth	r3, r3
   153dc:	4413      	add	r3, r2
   153de:	b29b      	uxth	r3, r3
   153e0:	b29a      	uxth	r2, r3
   153e2:	f240 2388 	movw	r3, #648	; 0x288
   153e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ea:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   153ec:	f240 2388 	movw	r3, #648	; 0x288
   153f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f4:	881b      	ldrh	r3, [r3, #0]
   153f6:	b21b      	sxth	r3, r3
   153f8:	4618      	mov	r0, r3
   153fa:	f002 ff21 	bl	18240 <__aeabi_i2f>
   153fe:	4602      	mov	r2, r0
   15400:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   15404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15408:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1540a:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   1540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15412:	781b      	ldrb	r3, [r3, #0]
   15414:	2b02      	cmp	r3, #2
   15416:	d168      	bne.n	154ea <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15418:	79fb      	ldrb	r3, [r7, #7]
   1541a:	2b00      	cmp	r3, #0
   1541c:	d013      	beq.n	15446 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1541e:	f240 2386 	movw	r3, #646	; 0x286
   15422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15426:	881a      	ldrh	r2, [r3, #0]
   15428:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   1542c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15430:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15432:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1543a:	899a      	ldrh	r2, [r3, #12]
   1543c:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   15440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15444:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15446:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1544a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1544e:	899b      	ldrh	r3, [r3, #12]
   15450:	b21a      	sxth	r2, r3
   15452:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   15456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1545a:	881b      	ldrh	r3, [r3, #0]
   1545c:	b21b      	sxth	r3, r3
   1545e:	1ad3      	subs	r3, r2, r3
   15460:	4618      	mov	r0, r3
   15462:	f002 feed 	bl	18240 <__aeabi_i2f>
   15466:	4603      	mov	r3, r0
   15468:	4618      	mov	r0, r3
   1546a:	f002 faa9 	bl	179c0 <__aeabi_f2d>
   1546e:	4602      	mov	r2, r0
   15470:	460b      	mov	r3, r1
   15472:	4610      	mov	r0, r2
   15474:	4619      	mov	r1, r3
   15476:	f04f 0200 	mov.w	r2, #0
   1547a:	f04f 0300 	mov.w	r3, #0
   1547e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15482:	f002 faf1 	bl	17a68 <__aeabi_dmul>
   15486:	4602      	mov	r2, r0
   15488:	460b      	mov	r3, r1
   1548a:	4610      	mov	r0, r2
   1548c:	4619      	mov	r1, r3
   1548e:	f04f 0200 	mov.w	r2, #0
   15492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15496:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1549a:	f002 fc0f 	bl	17cbc <__aeabi_ddiv>
   1549e:	4602      	mov	r2, r0
   154a0:	460b      	mov	r3, r1
   154a2:	4610      	mov	r0, r2
   154a4:	4619      	mov	r1, r3
   154a6:	f002 fd79 	bl	17f9c <__aeabi_d2iz>
   154aa:	4603      	mov	r3, r0
   154ac:	b29b      	uxth	r3, r3
   154ae:	b29a      	uxth	r2, r3
   154b0:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   154b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154b8:	881b      	ldrh	r3, [r3, #0]
   154ba:	b29b      	uxth	r3, r3
   154bc:	4413      	add	r3, r2
   154be:	b29b      	uxth	r3, r3
   154c0:	b29a      	uxth	r2, r3
   154c2:	f240 2386 	movw	r3, #646	; 0x286
   154c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ca:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   154cc:	f240 2386 	movw	r3, #646	; 0x286
   154d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154d4:	881b      	ldrh	r3, [r3, #0]
   154d6:	b21b      	sxth	r3, r3
   154d8:	4618      	mov	r0, r3
   154da:	f002 feb1 	bl	18240 <__aeabi_i2f>
   154de:	4602      	mov	r2, r0
   154e0:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   154e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   154ea:	f64a 2394 	movw	r3, #43668	; 0xaa94
   154ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f2:	781b      	ldrb	r3, [r3, #0]
   154f4:	2b02      	cmp	r3, #2
   154f6:	f040 80da 	bne.w	156ae <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   154fa:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   154fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15502:	781b      	ldrb	r3, [r3, #0]
   15504:	2b02      	cmp	r3, #2
   15506:	d165      	bne.n	155d4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15508:	79fb      	ldrb	r3, [r7, #7]
   1550a:	2b00      	cmp	r3, #0
   1550c:	d013      	beq.n	15536 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   1550e:	f240 239c 	movw	r3, #668	; 0x29c
   15512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15516:	681a      	ldr	r2, [r3, #0]
   15518:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   1551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15520:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15522:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1552a:	895a      	ldrh	r2, [r3, #10]
   1552c:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15534:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15536:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   1553a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1553e:	681b      	ldr	r3, [r3, #0]
   15540:	4618      	mov	r0, r3
   15542:	f002 fa3d 	bl	179c0 <__aeabi_f2d>
   15546:	4604      	mov	r4, r0
   15548:	460d      	mov	r5, r1
   1554a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1554e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15552:	895b      	ldrh	r3, [r3, #10]
   15554:	b21a      	sxth	r2, r3
   15556:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   1555a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1555e:	881b      	ldrh	r3, [r3, #0]
   15560:	b21b      	sxth	r3, r3
   15562:	1ad3      	subs	r3, r2, r3
   15564:	4618      	mov	r0, r3
   15566:	f002 fe6b 	bl	18240 <__aeabi_i2f>
   1556a:	4603      	mov	r3, r0
   1556c:	4618      	mov	r0, r3
   1556e:	f002 fa27 	bl	179c0 <__aeabi_f2d>
   15572:	4602      	mov	r2, r0
   15574:	460b      	mov	r3, r1
   15576:	4610      	mov	r0, r2
   15578:	4619      	mov	r1, r3
   1557a:	a34f      	add	r3, pc, #316	; (adr r3, 156b8 <inflight_calib+0x3a8>)
   1557c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15580:	f002 fa72 	bl	17a68 <__aeabi_dmul>
   15584:	4602      	mov	r2, r0
   15586:	460b      	mov	r3, r1
   15588:	4610      	mov	r0, r2
   1558a:	4619      	mov	r1, r3
   1558c:	f04f 0200 	mov.w	r2, #0
   15590:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15594:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15598:	f002 fb90 	bl	17cbc <__aeabi_ddiv>
   1559c:	4602      	mov	r2, r0
   1559e:	460b      	mov	r3, r1
   155a0:	4620      	mov	r0, r4
   155a2:	4629      	mov	r1, r5
   155a4:	f002 f8ae 	bl	17704 <__adddf3>
   155a8:	4602      	mov	r2, r0
   155aa:	460b      	mov	r3, r1
   155ac:	4610      	mov	r0, r2
   155ae:	4619      	mov	r1, r3
   155b0:	f002 fd3c 	bl	1802c <__aeabi_d2f>
   155b4:	4602      	mov	r2, r0
   155b6:	f240 239c 	movw	r3, #668	; 0x29c
   155ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155be:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   155c0:	f240 239c 	movw	r3, #668	; 0x29c
   155c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155c8:	681a      	ldr	r2, [r3, #0]
   155ca:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   155ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   155d4:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   155d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155dc:	781b      	ldrb	r3, [r3, #0]
   155de:	2b02      	cmp	r3, #2
   155e0:	d165      	bne.n	156ae <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   155e2:	79fb      	ldrb	r3, [r7, #7]
   155e4:	2b00      	cmp	r3, #0
   155e6:	d013      	beq.n	15610 <inflight_calib+0x300>
        max_roll_init = max_roll;
   155e8:	f240 23a0 	movw	r3, #672	; 0x2a0
   155ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155f0:	681a      	ldr	r2, [r3, #0]
   155f2:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   155f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155fa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   155fc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15604:	899a      	ldrh	r2, [r3, #12]
   15606:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   1560a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1560e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15610:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   15614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15618:	681b      	ldr	r3, [r3, #0]
   1561a:	4618      	mov	r0, r3
   1561c:	f002 f9d0 	bl	179c0 <__aeabi_f2d>
   15620:	4604      	mov	r4, r0
   15622:	460d      	mov	r5, r1
   15624:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1562c:	899b      	ldrh	r3, [r3, #12]
   1562e:	b21a      	sxth	r2, r3
   15630:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   15634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15638:	881b      	ldrh	r3, [r3, #0]
   1563a:	b21b      	sxth	r3, r3
   1563c:	1ad3      	subs	r3, r2, r3
   1563e:	4618      	mov	r0, r3
   15640:	f002 fdfe 	bl	18240 <__aeabi_i2f>
   15644:	4603      	mov	r3, r0
   15646:	4618      	mov	r0, r3
   15648:	f002 f9ba 	bl	179c0 <__aeabi_f2d>
   1564c:	4602      	mov	r2, r0
   1564e:	460b      	mov	r3, r1
   15650:	4610      	mov	r0, r2
   15652:	4619      	mov	r1, r3
   15654:	a31a      	add	r3, pc, #104	; (adr r3, 156c0 <inflight_calib+0x3b0>)
   15656:	e9d3 2300 	ldrd	r2, r3, [r3]
   1565a:	f002 fa05 	bl	17a68 <__aeabi_dmul>
   1565e:	4602      	mov	r2, r0
   15660:	460b      	mov	r3, r1
   15662:	4610      	mov	r0, r2
   15664:	4619      	mov	r1, r3
   15666:	f04f 0200 	mov.w	r2, #0
   1566a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1566e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15672:	f002 fb23 	bl	17cbc <__aeabi_ddiv>
   15676:	4602      	mov	r2, r0
   15678:	460b      	mov	r3, r1
   1567a:	4620      	mov	r0, r4
   1567c:	4629      	mov	r1, r5
   1567e:	f002 f841 	bl	17704 <__adddf3>
   15682:	4602      	mov	r2, r0
   15684:	460b      	mov	r3, r1
   15686:	4610      	mov	r0, r2
   15688:	4619      	mov	r1, r3
   1568a:	f002 fccf 	bl	1802c <__aeabi_d2f>
   1568e:	4602      	mov	r2, r0
   15690:	f240 23a0 	movw	r3, #672	; 0x2a0
   15694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15698:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1569a:	f240 23a0 	movw	r3, #672	; 0x2a0
   1569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156a2:	681a      	ldr	r2, [r3, #0]
   156a4:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   156a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ac:	601a      	str	r2, [r3, #0]
    }
  }
}
   156ae:	3708      	adds	r7, #8
   156b0:	46bd      	mov	sp, r7
   156b2:	bdb0      	pop	{r4, r5, r7, pc}
   156b4:	f3af 8000 	nop.w
   156b8:	9999999a 	.word	0x9999999a
   156bc:	3fb99999 	.word	0x3fb99999
   156c0:	9999999a 	.word	0x9999999a
   156c4:	bfc99999 	.word	0xbfc99999

000156c8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   156c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   156cc:	b08e      	sub	sp, #56	; 0x38
   156ce:	af00      	add	r7, sp, #0
   156d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   156d4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   156d8:	a357      	add	r3, pc, #348	; (adr r3, 15838 <pp_atan2+0x170>)
   156da:	e9d3 2300 	ldrd	r2, r3, [r3]
   156de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   156e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   156e6:	f04f 0200 	mov.w	r2, #0
   156ea:	f04f 0300 	mov.w	r3, #0
   156ee:	f2c4 0308 	movt	r3, #16392	; 0x4008
   156f2:	f002 f9b9 	bl	17a68 <__aeabi_dmul>
   156f6:	4602      	mov	r2, r0
   156f8:	460b      	mov	r3, r1
   156fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   156fe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15702:	f04f 0200 	mov.w	r2, #0
   15706:	f04f 0300 	mov.w	r3, #0
   1570a:	f002 fc1f 	bl	17f4c <__aeabi_dcmplt>
   1570e:	4603      	mov	r3, r0
   15710:	2b00      	cmp	r3, #0
   15712:	d009      	beq.n	15728 <pp_atan2+0x60>
   15714:	a14a      	add	r1, pc, #296	; (adr r1, 15840 <pp_atan2+0x178>)
   15716:	e9d1 0100 	ldrd	r0, r1, [r1]
   1571a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1571e:	f001 ffef 	bl	17700 <__aeabi_dsub>
   15722:	4602      	mov	r2, r0
   15724:	460b      	mov	r3, r1
   15726:	e008      	b.n	1573a <pp_atan2+0x72>
   15728:	e9d7 0100 	ldrd	r0, r1, [r7]
   1572c:	a344      	add	r3, pc, #272	; (adr r3, 15840 <pp_atan2+0x178>)
   1572e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15732:	f001 ffe7 	bl	17704 <__adddf3>
   15736:	4602      	mov	r2, r0
   15738:	460b      	mov	r3, r1
   1573a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   1573e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15742:	f04f 0200 	mov.w	r2, #0
   15746:	f04f 0300 	mov.w	r3, #0
   1574a:	f002 fc1d 	bl	17f88 <__aeabi_dcmpgt>
   1574e:	4603      	mov	r3, r0
   15750:	2b00      	cmp	r3, #0
   15752:	d02a      	beq.n	157aa <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1575c:	f001 ffd0 	bl	17700 <__aeabi_dsub>
   15760:	4602      	mov	r2, r0
   15762:	460b      	mov	r3, r1
   15764:	4690      	mov	r8, r2
   15766:	4699      	mov	r9, r3
   15768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1576c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15770:	f001 ffc8 	bl	17704 <__adddf3>
   15774:	4602      	mov	r2, r0
   15776:	460b      	mov	r3, r1
   15778:	4640      	mov	r0, r8
   1577a:	4649      	mov	r1, r9
   1577c:	f002 fa9e 	bl	17cbc <__aeabi_ddiv>
   15780:	4602      	mov	r2, r0
   15782:	460b      	mov	r3, r1
   15784:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15788:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1578c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15790:	f002 f96a 	bl	17a68 <__aeabi_dmul>
   15794:	4602      	mov	r2, r0
   15796:	460b      	mov	r3, r1
   15798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1579c:	f001 ffb0 	bl	17700 <__aeabi_dsub>
   157a0:	4602      	mov	r2, r0
   157a2:	460b      	mov	r3, r1
   157a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   157a8:	e029      	b.n	157fe <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   157aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   157ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   157b2:	f001 ffa7 	bl	17704 <__adddf3>
   157b6:	4602      	mov	r2, r0
   157b8:	460b      	mov	r3, r1
   157ba:	4690      	mov	r8, r2
   157bc:	4699      	mov	r9, r3
   157be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   157c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   157c6:	f001 ff9b 	bl	17700 <__aeabi_dsub>
   157ca:	4602      	mov	r2, r0
   157cc:	460b      	mov	r3, r1
   157ce:	4640      	mov	r0, r8
   157d0:	4649      	mov	r1, r9
   157d2:	f002 fa73 	bl	17cbc <__aeabi_ddiv>
   157d6:	4602      	mov	r2, r0
   157d8:	460b      	mov	r3, r1
   157da:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   157de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   157e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   157e6:	f002 f93f 	bl	17a68 <__aeabi_dmul>
   157ea:	4602      	mov	r2, r0
   157ec:	460b      	mov	r3, r1
   157ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   157f2:	f001 ff85 	bl	17700 <__aeabi_dsub>
   157f6:	4602      	mov	r2, r0
   157f8:	460b      	mov	r3, r1
   157fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   157fe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15802:	f04f 0200 	mov.w	r2, #0
   15806:	f04f 0300 	mov.w	r3, #0
   1580a:	f002 fb9f 	bl	17f4c <__aeabi_dcmplt>
   1580e:	4603      	mov	r3, r0
   15810:	2b00      	cmp	r3, #0
   15812:	d004      	beq.n	1581e <pp_atan2+0x156>
		return (-angle);
   15814:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15818:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1581c:	e001      	b.n	15822 <pp_atan2+0x15a>
	else
		return angle;
   1581e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15822:	4622      	mov	r2, r4
   15824:	462b      	mov	r3, r5
}
   15826:	4610      	mov	r0, r2
   15828:	4619      	mov	r1, r3
   1582a:	3738      	adds	r7, #56	; 0x38
   1582c:	46bd      	mov	sp, r7
   1582e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15832:	bf00      	nop
   15834:	f3af 8000 	nop.w
   15838:	54442d18 	.word	0x54442d18
   1583c:	3fe921fb 	.word	0x3fe921fb
   15840:	d9d7bdbb 	.word	0xd9d7bdbb
   15844:	3ddb7cdf 	.word	0x3ddb7cdf

00015848 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15848:	b5b0      	push	{r4, r5, r7, lr}
   1584a:	b08c      	sub	sp, #48	; 0x30
   1584c:	af00      	add	r7, sp, #0
   1584e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15852:	e9d7 2300 	ldrd	r2, r3, [r7]
   15856:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1585a:	2301      	movs	r3, #1
   1585c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   1585e:	e00a      	b.n	15876 <pp_sin+0x2e>
   15860:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15864:	a35a      	add	r3, pc, #360	; (adr r3, 159d0 <pp_sin+0x188>)
   15866:	e9d3 2300 	ldrd	r2, r3, [r3]
   1586a:	f001 ff4b 	bl	17704 <__adddf3>
   1586e:	4602      	mov	r2, r0
   15870:	460b      	mov	r3, r1
   15872:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1587a:	a357      	add	r3, pc, #348	; (adr r3, 159d8 <pp_sin+0x190>)
   1587c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15880:	f002 fb64 	bl	17f4c <__aeabi_dcmplt>
   15884:	4603      	mov	r3, r0
   15886:	2b00      	cmp	r3, #0
   15888:	d1ea      	bne.n	15860 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   1588a:	e00a      	b.n	158a2 <pp_sin+0x5a>
   1588c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15890:	a34f      	add	r3, pc, #316	; (adr r3, 159d0 <pp_sin+0x188>)
   15892:	e9d3 2300 	ldrd	r2, r3, [r3]
   15896:	f001 ff33 	bl	17700 <__aeabi_dsub>
   1589a:	4602      	mov	r2, r0
   1589c:	460b      	mov	r3, r1
   1589e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   158a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158a6:	a34e      	add	r3, pc, #312	; (adr r3, 159e0 <pp_sin+0x198>)
   158a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   158ac:	f002 fb6c 	bl	17f88 <__aeabi_dcmpgt>
   158b0:	4603      	mov	r3, r0
   158b2:	2b00      	cmp	r3, #0
   158b4:	d1ea      	bne.n	1588c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   158b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158ba:	a34b      	add	r3, pc, #300	; (adr r3, 159e8 <pp_sin+0x1a0>)
   158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   158c0:	f002 fb62 	bl	17f88 <__aeabi_dcmpgt>
   158c4:	4603      	mov	r3, r0
   158c6:	2b00      	cmp	r3, #0
   158c8:	d00d      	beq.n	158e6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   158ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158ce:	a348      	add	r3, pc, #288	; (adr r3, 159f0 <pp_sin+0x1a8>)
   158d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   158d4:	f001 ff14 	bl	17700 <__aeabi_dsub>
   158d8:	4602      	mov	r2, r0
   158da:	460b      	mov	r3, r1
   158dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   158e0:	f04f 33ff 	mov.w	r3, #4294967295
   158e4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   158e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158ea:	a343      	add	r3, pc, #268	; (adr r3, 159f8 <pp_sin+0x1b0>)
   158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   158f0:	f002 f9e4 	bl	17cbc <__aeabi_ddiv>
   158f4:	4602      	mov	r2, r0
   158f6:	460b      	mov	r3, r1
   158f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   158fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15904:	f002 f8b0 	bl	17a68 <__aeabi_dmul>
   15908:	4602      	mov	r2, r0
   1590a:	460b      	mov	r3, r1
   1590c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15914:	a33a      	add	r3, pc, #232	; (adr r3, 15a00 <pp_sin+0x1b8>)
   15916:	e9d3 2300 	ldrd	r2, r3, [r3]
   1591a:	f002 f8a5 	bl	17a68 <__aeabi_dmul>
   1591e:	4602      	mov	r2, r0
   15920:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15922:	4610      	mov	r0, r2
   15924:	4619      	mov	r1, r3
   15926:	a338      	add	r3, pc, #224	; (adr r3, 15a08 <pp_sin+0x1c0>)
   15928:	e9d3 2300 	ldrd	r2, r3, [r3]
   1592c:	f001 fee8 	bl	17700 <__aeabi_dsub>
   15930:	4602      	mov	r2, r0
   15932:	460b      	mov	r3, r1
   15934:	4610      	mov	r0, r2
   15936:	4619      	mov	r1, r3
   15938:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1593c:	f002 f894 	bl	17a68 <__aeabi_dmul>
   15940:	4602      	mov	r2, r0
   15942:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15944:	4610      	mov	r0, r2
   15946:	4619      	mov	r1, r3
   15948:	a331      	add	r3, pc, #196	; (adr r3, 15a10 <pp_sin+0x1c8>)
   1594a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1594e:	f001 fed9 	bl	17704 <__adddf3>
   15952:	4602      	mov	r2, r0
   15954:	460b      	mov	r3, r1
   15956:	4610      	mov	r0, r2
   15958:	4619      	mov	r1, r3
   1595a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1595e:	f002 f883 	bl	17a68 <__aeabi_dmul>
   15962:	4602      	mov	r2, r0
   15964:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15966:	4610      	mov	r0, r2
   15968:	4619      	mov	r1, r3
   1596a:	a32b      	add	r3, pc, #172	; (adr r3, 15a18 <pp_sin+0x1d0>)
   1596c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15970:	f001 fec6 	bl	17700 <__aeabi_dsub>
   15974:	4602      	mov	r2, r0
   15976:	460b      	mov	r3, r1
   15978:	4610      	mov	r0, r2
   1597a:	4619      	mov	r1, r3
   1597c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15980:	f002 f872 	bl	17a68 <__aeabi_dmul>
   15984:	4602      	mov	r2, r0
   15986:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15988:	4610      	mov	r0, r2
   1598a:	4619      	mov	r1, r3
   1598c:	a324      	add	r3, pc, #144	; (adr r3, 15a20 <pp_sin+0x1d8>)
   1598e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15992:	f001 feb7 	bl	17704 <__adddf3>
   15996:	4602      	mov	r2, r0
   15998:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   1599a:	4610      	mov	r0, r2
   1599c:	4619      	mov	r1, r3
   1599e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   159a2:	f002 f861 	bl	17a68 <__aeabi_dmul>
   159a6:	4602      	mov	r2, r0
   159a8:	460b      	mov	r3, r1
   159aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   159ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159b0:	2b00      	cmp	r3, #0
   159b2:	da04      	bge.n	159be <pp_sin+0x176>
   159b4:	68bc      	ldr	r4, [r7, #8]
   159b6:	68fb      	ldr	r3, [r7, #12]
   159b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   159bc:	e001      	b.n	159c2 <pp_sin+0x17a>
   159be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   159c2:	4622      	mov	r2, r4
   159c4:	462b      	mov	r3, r5
}
   159c6:	4610      	mov	r0, r2
   159c8:	4619      	mov	r1, r3
   159ca:	3730      	adds	r7, #48	; 0x30
   159cc:	46bd      	mov	sp, r7
   159ce:	bdb0      	pop	{r4, r5, r7, pc}
   159d0:	54442d18 	.word	0x54442d18
   159d4:	401921fb 	.word	0x401921fb
   159d8:	54442d18 	.word	0x54442d18
   159dc:	bff921fb 	.word	0xbff921fb
   159e0:	7f3321d2 	.word	0x7f3321d2
   159e4:	4012d97c 	.word	0x4012d97c
   159e8:	54442d18 	.word	0x54442d18
   159ec:	3ff921fb 	.word	0x3ff921fb
   159f0:	54442d18 	.word	0x54442d18
   159f4:	400921fb 	.word	0x400921fb
   159f8:	5443d6f4 	.word	0x5443d6f4
   159fc:	3ff921fb 	.word	0x3ff921fb
   15a00:	48a890af 	.word	0x48a890af
   15a04:	3f23daf7 	.word	0x3f23daf7
   15a08:	645b6d0e 	.word	0x645b6d0e
   15a0c:	3f7324cc 	.word	0x3f7324cc
   15a10:	f65619a5 	.word	0xf65619a5
   15a14:	3fb4668a 	.word	0x3fb4668a
   15a18:	16acf9cd 	.word	0x16acf9cd
   15a1c:	3fe4abbc 	.word	0x3fe4abbc
   15a20:	520817f7 	.word	0x520817f7
   15a24:	3ff921fb 	.word	0x3ff921fb

00015a28 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15a28:	b480      	push	{r7}
   15a2a:	b083      	sub	sp, #12
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15a32:	4610      	mov	r0, r2
   15a34:	4619      	mov	r1, r3
   15a36:	370c      	adds	r7, #12
   15a38:	46bd      	mov	sp, r7
   15a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a3e:	4770      	bx	lr

00015a40 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15a40:	b480      	push	{r7}
   15a42:	b083      	sub	sp, #12
   15a44:	af00      	add	r7, sp, #0
   15a46:	4603      	mov	r3, r0
   15a48:	6039      	str	r1, [r7, #0]
   15a4a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15a4c:	79fa      	ldrb	r2, [r7, #7]
   15a4e:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   15a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a56:	6839      	ldr	r1, [r7, #0]
   15a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15a5c:	370c      	adds	r7, #12
   15a5e:	46bd      	mov	sp, r7
   15a60:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a64:	4770      	bx	lr
   15a66:	bf00      	nop

00015a68 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15a68:	b480      	push	{r7}
   15a6a:	b083      	sub	sp, #12
   15a6c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15a6e:	f242 0315 	movw	r3, #8213	; 0x2015
   15a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a76:	2200      	movs	r2, #0
   15a78:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15a7a:	f242 0314 	movw	r3, #8212	; 0x2014
   15a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a82:	2200      	movs	r2, #0
   15a84:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15a86:	f242 0307 	movw	r3, #8199	; 0x2007
   15a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a8e:	22c0      	movs	r2, #192	; 0xc0
   15a90:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15a92:	f242 0306 	movw	r3, #8198	; 0x2006
   15a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a9a:	22cf      	movs	r2, #207	; 0xcf
   15a9c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15a9e:	2300      	movs	r3, #0
   15aa0:	71fb      	strb	r3, [r7, #7]
   15aa2:	e00a      	b.n	15aba <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15aa4:	79fa      	ldrb	r2, [r7, #7]
   15aa6:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   15aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aae:	2100      	movs	r1, #0
   15ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15ab4:	79fb      	ldrb	r3, [r7, #7]
   15ab6:	3301      	adds	r3, #1
   15ab8:	71fb      	strb	r3, [r7, #7]
   15aba:	79fb      	ldrb	r3, [r7, #7]
   15abc:	2b07      	cmp	r3, #7
   15abe:	d9f1      	bls.n	15aa4 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15ac0:	370c      	adds	r7, #12
   15ac2:	46bd      	mov	sp, r7
   15ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ac8:	4770      	bx	lr
   15aca:	bf00      	nop

00015acc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15acc:	b480      	push	{r7}
   15ace:	b083      	sub	sp, #12
   15ad0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15ad2:	f242 0326 	movw	r3, #8230	; 0x2026
   15ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ada:	881b      	ldrh	r3, [r3, #0]
   15adc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15ade:	f24b 1344 	movw	r3, #45380	; 0xb144
   15ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae6:	881b      	ldrh	r3, [r3, #0]
   15ae8:	88fa      	ldrh	r2, [r7, #6]
   15aea:	1ad3      	subs	r3, r2, r3
   15aec:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15aee:	f24b 1344 	movw	r3, #45380	; 0xb144
   15af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af6:	88fa      	ldrh	r2, [r7, #6]
   15af8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15afa:	f24b 1346 	movw	r3, #45382	; 0xb146
   15afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b02:	781b      	ldrb	r3, [r3, #0]
   15b04:	2b00      	cmp	r3, #0
   15b06:	d11e      	bne.n	15b46 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15b08:	f242 0324 	movw	r3, #8228	; 0x2024
   15b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b10:	781b      	ldrb	r3, [r3, #0]
   15b12:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15b14:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b1c:	781b      	ldrb	r3, [r3, #0]
   15b1e:	78fa      	ldrb	r2, [r7, #3]
   15b20:	1ad3      	subs	r3, r2, r3
   15b22:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15b24:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b2c:	78fa      	ldrb	r2, [r7, #3]
   15b2e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15b30:	78bb      	ldrb	r3, [r7, #2]
   15b32:	2b6d      	cmp	r3, #109	; 0x6d
   15b34:	d906      	bls.n	15b44 <__vector_34+0x78>
      state = 1;
   15b36:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b3e:	2201      	movs	r2, #1
   15b40:	701a      	strb	r2, [r3, #0]
   15b42:	e053      	b.n	15bec <__vector_34+0x120>
   15b44:	e052      	b.n	15bec <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15b46:	88bb      	ldrh	r3, [r7, #4]
   15b48:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15b4c:	d304      	bcc.n	15b58 <__vector_34+0x8c>
   15b4e:	88ba      	ldrh	r2, [r7, #4]
   15b50:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15b54:	429a      	cmp	r2, r3
   15b56:	d911      	bls.n	15b7c <__vector_34+0xb0>
      RestartPpmCycle();
   15b58:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b60:	2200      	movs	r2, #0
   15b62:	701a      	strb	r2, [r3, #0]
   15b64:	f242 0324 	movw	r3, #8228	; 0x2024
   15b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b6c:	781b      	ldrb	r3, [r3, #0]
   15b6e:	b2da      	uxtb	r2, r3
   15b70:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b78:	701a      	strb	r2, [r3, #0]
   15b7a:	e038      	b.n	15bee <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15b7c:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b84:	781b      	ldrb	r3, [r3, #0]
   15b86:	1e5a      	subs	r2, r3, #1
   15b88:	f24b 1308 	movw	r3, #45320	; 0xb108
   15b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b90:	88b9      	ldrh	r1, [r7, #4]
   15b92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15b96:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b9e:	781b      	ldrb	r3, [r3, #0]
   15ba0:	2b08      	cmp	r3, #8
   15ba2:	d917      	bls.n	15bd4 <__vector_34+0x108>
      ppm_valid	= 1;
   15ba4:	f24b 1343 	movw	r3, #45379	; 0xb143
   15ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bac:	2201      	movs	r2, #1
   15bae:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15bb0:	f24b 1346 	movw	r3, #45382	; 0xb146
   15bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bb8:	2200      	movs	r2, #0
   15bba:	701a      	strb	r2, [r3, #0]
   15bbc:	f242 0324 	movw	r3, #8228	; 0x2024
   15bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bc4:	781b      	ldrb	r3, [r3, #0]
   15bc6:	b2da      	uxtb	r2, r3
   15bc8:	f24b 1347 	movw	r3, #45383	; 0xb147
   15bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bd0:	701a      	strb	r2, [r3, #0]
   15bd2:	e00c      	b.n	15bee <__vector_34+0x122>
    } else 
      state++;
   15bd4:	f24b 1346 	movw	r3, #45382	; 0xb146
   15bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bdc:	781b      	ldrb	r3, [r3, #0]
   15bde:	3301      	adds	r3, #1
   15be0:	b2da      	uxtb	r2, r3
   15be2:	f24b 1346 	movw	r3, #45382	; 0xb146
   15be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bea:	701a      	strb	r2, [r3, #0]
  }
  return;
   15bec:	bf00      	nop
}
   15bee:	370c      	adds	r7, #12
   15bf0:	46bd      	mov	sp, r7
   15bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bf6:	4770      	bx	lr

00015bf8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15bf8:	b590      	push	{r4, r7, lr}
   15bfa:	b083      	sub	sp, #12
   15bfc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15bfe:	f24b 1308 	movw	r3, #45320	; 0xb108
   15c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c06:	881b      	ldrh	r3, [r3, #0]
   15c08:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15c0c:	b29b      	uxth	r3, r3
   15c0e:	80fb      	strh	r3, [r7, #6]
   15c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c14:	4618      	mov	r0, r3
   15c16:	f002 fb13 	bl	18240 <__aeabi_i2f>
   15c1a:	4603      	mov	r3, r0
   15c1c:	4618      	mov	r0, r3
   15c1e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15c22:	f002 fb61 	bl	182e8 <__aeabi_fmul>
   15c26:	4603      	mov	r3, r0
   15c28:	4618      	mov	r0, r3
   15c2a:	f002 fd23 	bl	18674 <__aeabi_f2iz>
   15c2e:	4603      	mov	r3, r0
   15c30:	b29a      	uxth	r2, r3
   15c32:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c3a:	801a      	strh	r2, [r3, #0]
   15c3c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c44:	881b      	ldrh	r3, [r3, #0]
   15c46:	b21b      	sxth	r3, r3
   15c48:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c4c:	dd07      	ble.n	15c5e <last_radio_from_ppm+0x66>
   15c4e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c56:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15c5a:	801a      	strh	r2, [r3, #0]
   15c5c:	e00d      	b.n	15c7a <last_radio_from_ppm+0x82>
   15c5e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c66:	881b      	ldrh	r3, [r3, #0]
   15c68:	b21b      	sxth	r3, r3
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	da05      	bge.n	15c7a <last_radio_from_ppm+0x82>
   15c6e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c76:	2200      	movs	r2, #0
   15c78:	801a      	strh	r2, [r3, #0]
   15c7a:	f24b 1308 	movw	r3, #45320	; 0xb108
   15c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c82:	885b      	ldrh	r3, [r3, #2]
   15c84:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c88:	b29b      	uxth	r3, r3
   15c8a:	80fb      	strh	r3, [r7, #6]
   15c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c90:	4618      	mov	r0, r3
   15c92:	f002 fad5 	bl	18240 <__aeabi_i2f>
   15c96:	4603      	mov	r3, r0
   15c98:	4618      	mov	r0, r3
   15c9a:	f002 fceb 	bl	18674 <__aeabi_f2iz>
   15c9e:	4603      	mov	r3, r0
   15ca0:	b29a      	uxth	r2, r3
   15ca2:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15caa:	805a      	strh	r2, [r3, #2]
   15cac:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cb4:	885b      	ldrh	r3, [r3, #2]
   15cb6:	b21b      	sxth	r3, r3
   15cb8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15cbc:	dd07      	ble.n	15cce <last_radio_from_ppm+0xd6>
   15cbe:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cc6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15cca:	805a      	strh	r2, [r3, #2]
   15ccc:	e00f      	b.n	15cee <last_radio_from_ppm+0xf6>
   15cce:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cd6:	885b      	ldrh	r3, [r3, #2]
   15cd8:	b21b      	sxth	r3, r3
   15cda:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15cde:	da06      	bge.n	15cee <last_radio_from_ppm+0xf6>
   15ce0:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ce8:	f64d 2280 	movw	r2, #55936	; 0xda80
   15cec:	805a      	strh	r2, [r3, #2]
   15cee:	f24b 1308 	movw	r3, #45320	; 0xb108
   15cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf6:	889b      	ldrh	r3, [r3, #4]
   15cf8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15cfc:	b29b      	uxth	r3, r3
   15cfe:	80fb      	strh	r3, [r7, #6]
   15d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d04:	4618      	mov	r0, r3
   15d06:	f002 fa9b 	bl	18240 <__aeabi_i2f>
   15d0a:	4603      	mov	r3, r0
   15d0c:	4618      	mov	r0, r3
   15d0e:	f002 fcb1 	bl	18674 <__aeabi_f2iz>
   15d12:	4603      	mov	r3, r0
   15d14:	b29a      	uxth	r2, r3
   15d16:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d1e:	809a      	strh	r2, [r3, #4]
   15d20:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d28:	889b      	ldrh	r3, [r3, #4]
   15d2a:	b21b      	sxth	r3, r3
   15d2c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d30:	dd07      	ble.n	15d42 <last_radio_from_ppm+0x14a>
   15d32:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d3a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d3e:	809a      	strh	r2, [r3, #4]
   15d40:	e00f      	b.n	15d62 <last_radio_from_ppm+0x16a>
   15d42:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d4a:	889b      	ldrh	r3, [r3, #4]
   15d4c:	b21b      	sxth	r3, r3
   15d4e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d52:	da06      	bge.n	15d62 <last_radio_from_ppm+0x16a>
   15d54:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d5c:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d60:	809a      	strh	r2, [r3, #4]
   15d62:	f24b 1308 	movw	r3, #45320	; 0xb108
   15d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d6a:	88db      	ldrh	r3, [r3, #6]
   15d6c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d70:	b29b      	uxth	r3, r3
   15d72:	80fb      	strh	r3, [r7, #6]
   15d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d78:	4618      	mov	r0, r3
   15d7a:	f002 fa61 	bl	18240 <__aeabi_i2f>
   15d7e:	4603      	mov	r3, r0
   15d80:	4618      	mov	r0, r3
   15d82:	f002 fc77 	bl	18674 <__aeabi_f2iz>
   15d86:	4603      	mov	r3, r0
   15d88:	b29a      	uxth	r2, r3
   15d8a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d92:	80da      	strh	r2, [r3, #6]
   15d94:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d9c:	88db      	ldrh	r3, [r3, #6]
   15d9e:	b21b      	sxth	r3, r3
   15da0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15da4:	dd07      	ble.n	15db6 <last_radio_from_ppm+0x1be>
   15da6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15db2:	80da      	strh	r2, [r3, #6]
   15db4:	e00f      	b.n	15dd6 <last_radio_from_ppm+0x1de>
   15db6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dbe:	88db      	ldrh	r3, [r3, #6]
   15dc0:	b21b      	sxth	r3, r3
   15dc2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15dc6:	da06      	bge.n	15dd6 <last_radio_from_ppm+0x1de>
   15dc8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dd0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15dd4:	80da      	strh	r2, [r3, #6]
   15dd6:	f24b 1308 	movw	r3, #45320	; 0xb108
   15dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dde:	891b      	ldrh	r3, [r3, #8]
   15de0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15de4:	b29b      	uxth	r3, r3
   15de6:	80fb      	strh	r3, [r7, #6]
   15de8:	f24b 1330 	movw	r3, #45360	; 0xb130
   15dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df0:	891b      	ldrh	r3, [r3, #8]
   15df2:	b21b      	sxth	r3, r3
   15df4:	4618      	mov	r0, r3
   15df6:	f002 fa23 	bl	18240 <__aeabi_i2f>
   15dfa:	4604      	mov	r4, r0
   15dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e00:	4618      	mov	r0, r3
   15e02:	f002 fa1d 	bl	18240 <__aeabi_i2f>
   15e06:	4603      	mov	r3, r0
   15e08:	4618      	mov	r0, r3
   15e0a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e0e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e12:	f002 fa69 	bl	182e8 <__aeabi_fmul>
   15e16:	4603      	mov	r3, r0
   15e18:	4620      	mov	r0, r4
   15e1a:	4619      	mov	r1, r3
   15e1c:	f002 f95c 	bl	180d8 <__addsf3>
   15e20:	4603      	mov	r3, r0
   15e22:	4618      	mov	r0, r3
   15e24:	f002 fc26 	bl	18674 <__aeabi_f2iz>
   15e28:	4603      	mov	r3, r0
   15e2a:	b29a      	uxth	r2, r3
   15e2c:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e34:	811a      	strh	r2, [r3, #8]
   15e36:	f24b 1308 	movw	r3, #45320	; 0xb108
   15e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e3e:	895b      	ldrh	r3, [r3, #10]
   15e40:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e44:	b29b      	uxth	r3, r3
   15e46:	80fb      	strh	r3, [r7, #6]
   15e48:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e50:	895b      	ldrh	r3, [r3, #10]
   15e52:	b21b      	sxth	r3, r3
   15e54:	4618      	mov	r0, r3
   15e56:	f002 f9f3 	bl	18240 <__aeabi_i2f>
   15e5a:	4604      	mov	r4, r0
   15e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e60:	4618      	mov	r0, r3
   15e62:	f002 f9ed 	bl	18240 <__aeabi_i2f>
   15e66:	4603      	mov	r3, r0
   15e68:	4618      	mov	r0, r3
   15e6a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e6e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e72:	f002 fa39 	bl	182e8 <__aeabi_fmul>
   15e76:	4603      	mov	r3, r0
   15e78:	4620      	mov	r0, r4
   15e7a:	4619      	mov	r1, r3
   15e7c:	f002 f92c 	bl	180d8 <__addsf3>
   15e80:	4603      	mov	r3, r0
   15e82:	4618      	mov	r0, r3
   15e84:	f002 fbf6 	bl	18674 <__aeabi_f2iz>
   15e88:	4603      	mov	r3, r0
   15e8a:	b29a      	uxth	r2, r3
   15e8c:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e94:	815a      	strh	r2, [r3, #10]
   15e96:	f24b 1308 	movw	r3, #45320	; 0xb108
   15e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e9e:	899b      	ldrh	r3, [r3, #12]
   15ea0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ea4:	b29b      	uxth	r3, r3
   15ea6:	80fb      	strh	r3, [r7, #6]
   15ea8:	f24b 1330 	movw	r3, #45360	; 0xb130
   15eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb0:	899b      	ldrh	r3, [r3, #12]
   15eb2:	b21b      	sxth	r3, r3
   15eb4:	4618      	mov	r0, r3
   15eb6:	f002 f9c3 	bl	18240 <__aeabi_i2f>
   15eba:	4604      	mov	r4, r0
   15ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ec0:	4618      	mov	r0, r3
   15ec2:	f002 f9bd 	bl	18240 <__aeabi_i2f>
   15ec6:	4603      	mov	r3, r0
   15ec8:	4618      	mov	r0, r3
   15eca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15ece:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15ed2:	f002 fa09 	bl	182e8 <__aeabi_fmul>
   15ed6:	4603      	mov	r3, r0
   15ed8:	4620      	mov	r0, r4
   15eda:	4619      	mov	r1, r3
   15edc:	f002 f8fc 	bl	180d8 <__addsf3>
   15ee0:	4603      	mov	r3, r0
   15ee2:	4618      	mov	r0, r3
   15ee4:	f002 fbc6 	bl	18674 <__aeabi_f2iz>
   15ee8:	4603      	mov	r3, r0
   15eea:	b29a      	uxth	r2, r3
   15eec:	f24b 1330 	movw	r3, #45360	; 0xb130
   15ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef4:	819a      	strh	r2, [r3, #12]
   15ef6:	f24b 1308 	movw	r3, #45320	; 0xb108
   15efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15efe:	89db      	ldrh	r3, [r3, #14]
   15f00:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f04:	b29b      	uxth	r3, r3
   15f06:	80fb      	strh	r3, [r7, #6]
   15f08:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f10:	89db      	ldrh	r3, [r3, #14]
   15f12:	b21b      	sxth	r3, r3
   15f14:	4618      	mov	r0, r3
   15f16:	f002 f993 	bl	18240 <__aeabi_i2f>
   15f1a:	4604      	mov	r4, r0
   15f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f20:	4618      	mov	r0, r3
   15f22:	f002 f98d 	bl	18240 <__aeabi_i2f>
   15f26:	4603      	mov	r3, r0
   15f28:	4618      	mov	r0, r3
   15f2a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15f2e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15f32:	f002 f9d9 	bl	182e8 <__aeabi_fmul>
   15f36:	4603      	mov	r3, r0
   15f38:	4620      	mov	r0, r4
   15f3a:	4619      	mov	r1, r3
   15f3c:	f002 f8cc 	bl	180d8 <__addsf3>
   15f40:	4603      	mov	r3, r0
   15f42:	4618      	mov	r0, r3
   15f44:	f002 fb96 	bl	18674 <__aeabi_f2iz>
   15f48:	4603      	mov	r3, r0
   15f4a:	b29a      	uxth	r2, r3
   15f4c:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f54:	81da      	strh	r2, [r3, #14]
   15f56:	f24b 1308 	movw	r3, #45320	; 0xb108
   15f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f5e:	8a1b      	ldrh	r3, [r3, #16]
   15f60:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f64:	b29b      	uxth	r3, r3
   15f66:	80fb      	strh	r3, [r7, #6]
   15f68:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f70:	8a1b      	ldrh	r3, [r3, #16]
   15f72:	b21b      	sxth	r3, r3
   15f74:	4618      	mov	r0, r3
   15f76:	f002 f963 	bl	18240 <__aeabi_i2f>
   15f7a:	4604      	mov	r4, r0
   15f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f80:	4618      	mov	r0, r3
   15f82:	f002 f95d 	bl	18240 <__aeabi_i2f>
   15f86:	4603      	mov	r3, r0
   15f88:	4618      	mov	r0, r3
   15f8a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15f8e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15f92:	f002 f9a9 	bl	182e8 <__aeabi_fmul>
   15f96:	4603      	mov	r3, r0
   15f98:	4620      	mov	r0, r4
   15f9a:	4619      	mov	r1, r3
   15f9c:	f002 f89c 	bl	180d8 <__addsf3>
   15fa0:	4603      	mov	r3, r0
   15fa2:	4618      	mov	r0, r3
   15fa4:	f002 fb66 	bl	18674 <__aeabi_f2iz>
   15fa8:	4603      	mov	r3, r0
   15faa:	b29a      	uxth	r2, r3
   15fac:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb4:	821a      	strh	r2, [r3, #16]
   15fb6:	f24b 1348 	movw	r3, #45384	; 0xb148
   15fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fbe:	781b      	ldrb	r3, [r3, #0]
   15fc0:	3301      	adds	r3, #1
   15fc2:	b2da      	uxtb	r2, r3
   15fc4:	f24b 1348 	movw	r3, #45384	; 0xb148
   15fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fcc:	701a      	strb	r2, [r3, #0]
   15fce:	f24b 1348 	movw	r3, #45384	; 0xb148
   15fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd6:	781b      	ldrb	r3, [r3, #0]
   15fd8:	2b0a      	cmp	r3, #10
   15fda:	f040 8101 	bne.w	161e0 <last_radio_from_ppm+0x5e8>
   15fde:	f24b 1348 	movw	r3, #45384	; 0xb148
   15fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fe6:	2200      	movs	r2, #0
   15fe8:	701a      	strb	r2, [r3, #0]
   15fea:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ff2:	891a      	ldrh	r2, [r3, #8]
   15ff4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffc:	811a      	strh	r2, [r3, #8]
   15ffe:	f24b 1330 	movw	r3, #45360	; 0xb130
   16002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16006:	2200      	movs	r2, #0
   16008:	811a      	strh	r2, [r3, #8]
   1600a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1600e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16012:	891b      	ldrh	r3, [r3, #8]
   16014:	b21b      	sxth	r3, r3
   16016:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1601a:	dd07      	ble.n	1602c <last_radio_from_ppm+0x434>
   1601c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16028:	811a      	strh	r2, [r3, #8]
   1602a:	e00f      	b.n	1604c <last_radio_from_ppm+0x454>
   1602c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16034:	891b      	ldrh	r3, [r3, #8]
   16036:	b21b      	sxth	r3, r3
   16038:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1603c:	da06      	bge.n	1604c <last_radio_from_ppm+0x454>
   1603e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16046:	f64d 2280 	movw	r2, #55936	; 0xda80
   1604a:	811a      	strh	r2, [r3, #8]
   1604c:	f24b 1330 	movw	r3, #45360	; 0xb130
   16050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16054:	895a      	ldrh	r2, [r3, #10]
   16056:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1605e:	815a      	strh	r2, [r3, #10]
   16060:	f24b 1330 	movw	r3, #45360	; 0xb130
   16064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16068:	2200      	movs	r2, #0
   1606a:	815a      	strh	r2, [r3, #10]
   1606c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16074:	895b      	ldrh	r3, [r3, #10]
   16076:	b21b      	sxth	r3, r3
   16078:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1607c:	dd07      	ble.n	1608e <last_radio_from_ppm+0x496>
   1607e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16086:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1608a:	815a      	strh	r2, [r3, #10]
   1608c:	e00f      	b.n	160ae <last_radio_from_ppm+0x4b6>
   1608e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16096:	895b      	ldrh	r3, [r3, #10]
   16098:	b21b      	sxth	r3, r3
   1609a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1609e:	da06      	bge.n	160ae <last_radio_from_ppm+0x4b6>
   160a0:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160a8:	f64d 2280 	movw	r2, #55936	; 0xda80
   160ac:	815a      	strh	r2, [r3, #10]
   160ae:	f24b 1330 	movw	r3, #45360	; 0xb130
   160b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b6:	899a      	ldrh	r2, [r3, #12]
   160b8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c0:	819a      	strh	r2, [r3, #12]
   160c2:	f24b 1330 	movw	r3, #45360	; 0xb130
   160c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ca:	2200      	movs	r2, #0
   160cc:	819a      	strh	r2, [r3, #12]
   160ce:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d6:	899b      	ldrh	r3, [r3, #12]
   160d8:	b21b      	sxth	r3, r3
   160da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160de:	dd07      	ble.n	160f0 <last_radio_from_ppm+0x4f8>
   160e0:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160ec:	819a      	strh	r2, [r3, #12]
   160ee:	e00f      	b.n	16110 <last_radio_from_ppm+0x518>
   160f0:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f8:	899b      	ldrh	r3, [r3, #12]
   160fa:	b21b      	sxth	r3, r3
   160fc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16100:	da06      	bge.n	16110 <last_radio_from_ppm+0x518>
   16102:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1610a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1610e:	819a      	strh	r2, [r3, #12]
   16110:	f24b 1330 	movw	r3, #45360	; 0xb130
   16114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16118:	89da      	ldrh	r2, [r3, #14]
   1611a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1611e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16122:	81da      	strh	r2, [r3, #14]
   16124:	f24b 1330 	movw	r3, #45360	; 0xb130
   16128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1612c:	2200      	movs	r2, #0
   1612e:	81da      	strh	r2, [r3, #14]
   16130:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16138:	89db      	ldrh	r3, [r3, #14]
   1613a:	b21b      	sxth	r3, r3
   1613c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16140:	dd07      	ble.n	16152 <last_radio_from_ppm+0x55a>
   16142:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1614a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1614e:	81da      	strh	r2, [r3, #14]
   16150:	e00f      	b.n	16172 <last_radio_from_ppm+0x57a>
   16152:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16156:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1615a:	89db      	ldrh	r3, [r3, #14]
   1615c:	b21b      	sxth	r3, r3
   1615e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16162:	da06      	bge.n	16172 <last_radio_from_ppm+0x57a>
   16164:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1616c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16170:	81da      	strh	r2, [r3, #14]
   16172:	f24b 1330 	movw	r3, #45360	; 0xb130
   16176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1617a:	8a1a      	ldrh	r2, [r3, #16]
   1617c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16184:	821a      	strh	r2, [r3, #16]
   16186:	f24b 1330 	movw	r3, #45360	; 0xb130
   1618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1618e:	2200      	movs	r2, #0
   16190:	821a      	strh	r2, [r3, #16]
   16192:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1619a:	8a1b      	ldrh	r3, [r3, #16]
   1619c:	b21b      	sxth	r3, r3
   1619e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161a2:	dd07      	ble.n	161b4 <last_radio_from_ppm+0x5bc>
   161a4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   161a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161b0:	821a      	strh	r2, [r3, #16]
   161b2:	e00f      	b.n	161d4 <last_radio_from_ppm+0x5dc>
   161b4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   161b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161bc:	8a1b      	ldrh	r3, [r3, #16]
   161be:	b21b      	sxth	r3, r3
   161c0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161c4:	da06      	bge.n	161d4 <last_radio_from_ppm+0x5dc>
   161c6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   161ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ce:	f64d 2280 	movw	r2, #55936	; 0xda80
   161d2:	821a      	strh	r2, [r3, #16]
   161d4:	f24b 1342 	movw	r3, #45378	; 0xb142
   161d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161dc:	2201      	movs	r2, #1
   161de:	701a      	strb	r2, [r3, #0]
}
   161e0:	370c      	adds	r7, #12
   161e2:	46bd      	mov	sp, r7
   161e4:	bd90      	pop	{r4, r7, pc}
   161e6:	bf00      	nop

000161e8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   161e8:	b480      	push	{r7}
   161ea:	af00      	add	r7, sp, #0
  idx_buf = 0;
   161ec:	f24b 137c 	movw	r3, #45436	; 0xb17c
   161f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f4:	2200      	movs	r2, #0
   161f6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   161f8:	f24b 137d 	movw	r3, #45437	; 0xb17d
   161fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16200:	2200      	movs	r2, #0
   16202:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   16204:	f24b 137c 	movw	r3, #45436	; 0xb17c
   16208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1620c:	781b      	ldrb	r3, [r3, #0]
   1620e:	b2db      	uxtb	r3, r3
   16210:	461a      	mov	r2, r3
   16212:	f24b 1364 	movw	r3, #45412	; 0xb164
   16216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1621a:	4413      	add	r3, r2
   1621c:	781a      	ldrb	r2, [r3, #0]
   1621e:	f24b 137e 	movw	r3, #45438	; 0xb17e
   16222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16226:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16228:	f242 030f 	movw	r3, #8207	; 0x200f
   1622c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16230:	f24b 127e 	movw	r2, #45438	; 0xb17e
   16234:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16238:	7812      	ldrb	r2, [r2, #0]
   1623a:	b2d2      	uxtb	r2, r2
   1623c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1623e:	f24b 137a 	movw	r3, #45434	; 0xb17a
   16242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16246:	2200      	movs	r2, #0
   16248:	701a      	strb	r2, [r3, #0]
}
   1624a:	46bd      	mov	sp, r7
   1624c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16250:	4770      	bx	lr
   16252:	bf00      	nop

00016254 <fbw_spi_init>:

void fbw_spi_init(void) {
   16254:	b480      	push	{r7}
   16256:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16258:	f24b 1364 	movw	r3, #45412	; 0xb164
   1625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16260:	2200      	movs	r2, #0
   16262:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16264:	f24b 1364 	movw	r3, #45412	; 0xb164
   16268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1626c:	2200      	movs	r2, #0
   1626e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16270:	f242 0317 	movw	r3, #8215	; 0x2017
   16274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16278:	f242 0217 	movw	r2, #8215	; 0x2017
   1627c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16280:	7812      	ldrb	r2, [r2, #0]
   16282:	b2d2      	uxtb	r2, r2
   16284:	f042 0210 	orr.w	r2, r2, #16
   16288:	b2d2      	uxtb	r2, r2
   1628a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1628c:	f242 030d 	movw	r3, #8205	; 0x200d
   16290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16294:	2240      	movs	r2, #64	; 0x40
   16296:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16298:	f242 030d 	movw	r3, #8205	; 0x200d
   1629c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a0:	f242 020d 	movw	r2, #8205	; 0x200d
   162a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162a8:	7812      	ldrb	r2, [r2, #0]
   162aa:	b2d2      	uxtb	r2, r2
   162ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   162b0:	b2d2      	uxtb	r2, r2
   162b2:	701a      	strb	r2, [r3, #0]
}
   162b4:	46bd      	mov	sp, r7
   162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   162ba:	4770      	bx	lr
   162bc:	0000      	movs	r0, r0
	...

000162c0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   162c0:	b480      	push	{r7}
   162c2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   162c4:	f242 032f 	movw	r3, #8239	; 0x202f
   162c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162cc:	2200      	movs	r2, #0
   162ce:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   162d0:	f242 032e 	movw	r3, #8238	; 0x202e
   162d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d8:	2201      	movs	r2, #1
   162da:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   162dc:	f242 0325 	movw	r3, #8229	; 0x2025
   162e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e4:	2207      	movs	r2, #7
   162e6:	701a      	strb	r2, [r3, #0]
}
   162e8:	46bd      	mov	sp, r7
   162ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   162ee:	4770      	bx	lr

000162f0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   162f0:	b480      	push	{r7}
   162f2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   162f4:	f242 032e 	movw	r3, #8238	; 0x202e
   162f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162fc:	f242 022e 	movw	r2, #8238	; 0x202e
   16300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16304:	7812      	ldrb	r2, [r2, #0]
   16306:	b2d2      	uxtb	r2, r2
   16308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1630c:	b2d2      	uxtb	r2, r2
   1630e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16310:	f242 032e 	movw	r3, #8238	; 0x202e
   16314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16318:	f242 022e 	movw	r2, #8238	; 0x202e
   1631c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16320:	7812      	ldrb	r2, [r2, #0]
   16322:	b2d2      	uxtb	r2, r2
   16324:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16328:	b2d2      	uxtb	r2, r2
   1632a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1632c:	f242 0317 	movw	r3, #8215	; 0x2017
   16330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16334:	f242 0217 	movw	r2, #8215	; 0x2017
   16338:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1633c:	7812      	ldrb	r2, [r2, #0]
   1633e:	b2d2      	uxtb	r2, r2
   16340:	f022 0201 	bic.w	r2, r2, #1
   16344:	b2d2      	uxtb	r2, r2
   16346:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16348:	f242 0337 	movw	r3, #8247	; 0x2037
   1634c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16350:	f242 0237 	movw	r2, #8247	; 0x2037
   16354:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16358:	7812      	ldrb	r2, [r2, #0]
   1635a:	b2d2      	uxtb	r2, r2
   1635c:	f042 0220 	orr.w	r2, r2, #32
   16360:	b2d2      	uxtb	r2, r2
   16362:	701a      	strb	r2, [r3, #0]
}
   16364:	46bd      	mov	sp, r7
   16366:	f85d 7b04 	ldr.w	r7, [sp], #4
   1636a:	4770      	bx	lr

0001636c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1636c:	b580      	push	{r7, lr}
   1636e:	b082      	sub	sp, #8
   16370:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16372:	2300      	movs	r3, #0
   16374:	71fb      	strb	r3, [r7, #7]
   16376:	e010      	b.n	1639a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16378:	79fa      	ldrb	r2, [r7, #7]
   1637a:	79f9      	ldrb	r1, [r7, #7]
   1637c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16384:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16388:	f24b 1364 	movw	r3, #45412	; 0xb164
   1638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16390:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16394:	79fb      	ldrb	r3, [r7, #7]
   16396:	3301      	adds	r3, #1
   16398:	71fb      	strb	r3, [r7, #7]
   1639a:	79fb      	ldrb	r3, [r7, #7]
   1639c:	2b08      	cmp	r3, #8
   1639e:	d9eb      	bls.n	16378 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   163a0:	f24b 230c 	movw	r3, #45580	; 0xb20c
   163a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163a8:	781b      	ldrb	r3, [r3, #0]
   163aa:	2b00      	cmp	r3, #0
   163ac:	bf0c      	ite	eq
   163ae:	2300      	moveq	r3, #0
   163b0:	2301      	movne	r3, #1
   163b2:	b2db      	uxtb	r3, r3
   163b4:	461a      	mov	r2, r3
   163b6:	f24b 1364 	movw	r3, #45412	; 0xb164
   163ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163be:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   163c0:	f24b 1364 	movw	r3, #45412	; 0xb164
   163c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163c8:	7cdb      	ldrb	r3, [r3, #19]
   163ca:	b2da      	uxtb	r2, r3
   163cc:	f24b 230e 	movw	r3, #45582	; 0xb20e
   163d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d4:	781b      	ldrb	r3, [r3, #0]
   163d6:	2b00      	cmp	r3, #0
   163d8:	d001      	beq.n	163de <to_autopilot_from_last_radio+0x72>
   163da:	2302      	movs	r3, #2
   163dc:	e000      	b.n	163e0 <to_autopilot_from_last_radio+0x74>
   163de:	2300      	movs	r3, #0
   163e0:	4313      	orrs	r3, r2
   163e2:	b2db      	uxtb	r3, r3
   163e4:	b2da      	uxtb	r2, r3
   163e6:	f24b 1364 	movw	r3, #45412	; 0xb164
   163ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ee:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   163f0:	f24b 1342 	movw	r3, #45378	; 0xb142
   163f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163f8:	781b      	ldrb	r3, [r3, #0]
   163fa:	2b00      	cmp	r3, #0
   163fc:	d012      	beq.n	16424 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   163fe:	f24b 1364 	movw	r3, #45412	; 0xb164
   16402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16406:	7cdb      	ldrb	r3, [r3, #19]
   16408:	f043 0304 	orr.w	r3, r3, #4
   1640c:	b2da      	uxtb	r2, r3
   1640e:	f24b 1364 	movw	r3, #45412	; 0xb164
   16412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16416:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16418:	f24b 1342 	movw	r3, #45378	; 0xb142
   1641c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16420:	2200      	movs	r2, #0
   16422:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16424:	f24b 2310 	movw	r3, #45584	; 0xb210
   16428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1642c:	781a      	ldrb	r2, [r3, #0]
   1642e:	f24b 1364 	movw	r3, #45412	; 0xb164
   16432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16436:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16438:	f24b 1380 	movw	r3, #45440	; 0xb180
   1643c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16440:	881b      	ldrh	r3, [r3, #0]
   16442:	4618      	mov	r0, r3
   16444:	f001 faaa 	bl	1799c <__aeabi_i2d>
   16448:	4602      	mov	r2, r0
   1644a:	460b      	mov	r3, r1
   1644c:	4610      	mov	r0, r2
   1644e:	4619      	mov	r1, r3
   16450:	a31b      	add	r3, pc, #108	; (adr r3, 164c0 <to_autopilot_from_last_radio+0x154>)
   16452:	e9d3 2300 	ldrd	r2, r3, [r3]
   16456:	f001 fb07 	bl	17a68 <__aeabi_dmul>
   1645a:	4602      	mov	r2, r0
   1645c:	460b      	mov	r3, r1
   1645e:	4610      	mov	r0, r2
   16460:	4619      	mov	r1, r3
   16462:	f04f 0200 	mov.w	r2, #0
   16466:	f04f 0300 	mov.w	r3, #0
   1646a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1646e:	f001 fc25 	bl	17cbc <__aeabi_ddiv>
   16472:	4602      	mov	r2, r0
   16474:	460b      	mov	r3, r1
   16476:	4610      	mov	r0, r2
   16478:	4619      	mov	r1, r3
   1647a:	a313      	add	r3, pc, #76	; (adr r3, 164c8 <to_autopilot_from_last_radio+0x15c>)
   1647c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16480:	f001 f940 	bl	17704 <__adddf3>
   16484:	4602      	mov	r2, r0
   16486:	460b      	mov	r3, r1
   16488:	4610      	mov	r0, r2
   1648a:	4619      	mov	r1, r3
   1648c:	f04f 0200 	mov.w	r2, #0
   16490:	f04f 0300 	mov.w	r3, #0
   16494:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16498:	f001 fae6 	bl	17a68 <__aeabi_dmul>
   1649c:	4602      	mov	r2, r0
   1649e:	460b      	mov	r3, r1
   164a0:	4610      	mov	r0, r2
   164a2:	4619      	mov	r1, r3
   164a4:	f001 fda2 	bl	17fec <__aeabi_d2uiz>
   164a8:	4603      	mov	r3, r0
   164aa:	b2da      	uxtb	r2, r3
   164ac:	f24b 1364 	movw	r3, #45412	; 0xb164
   164b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164b4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   164b6:	3708      	adds	r7, #8
   164b8:	46bd      	mov	sp, r7
   164ba:	bd80      	pop	{r7, pc}
   164bc:	f3af 8000 	nop.w
   164c0:	1eb851ec 	.word	0x1eb851ec
   164c4:	3f91eb85 	.word	0x3f91eb85
   164c8:	020c49ba 	.word	0x020c49ba
   164cc:	3fb6872b 	.word	0x3fb6872b

000164d0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   164d0:	b580      	push	{r7, lr}
   164d2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   164d4:	f24b 137b 	movw	r3, #45435	; 0xb17b
   164d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164dc:	2200      	movs	r2, #0
   164de:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   164e0:	f7ff ff44 	bl	1636c <to_autopilot_from_last_radio>
      spi_reset();
   164e4:	f7ff fe80 	bl	161e8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   164e8:	bd80      	pop	{r7, pc}
   164ea:	bf00      	nop

000164ec <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   164ec:	b580      	push	{r7, lr}
   164ee:	af00      	add	r7, sp, #0
  uart_init_tx();
   164f0:	f000 fb02 	bl	16af8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   164f4:	f648 109c 	movw	r0, #35228	; 0x899c
   164f8:	f2c0 0001 	movt	r0, #1
   164fc:	f000 fbda 	bl	16cb4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16500:	f7ff fab2 	bl	15a68 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16504:	2003      	movs	r0, #3
   16506:	f24b 1180 	movw	r1, #45440	; 0xb180
   1650a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1650e:	f7ff fa97 	bl	15a40 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16512:	2006      	movs	r0, #6
   16514:	f24b 11c4 	movw	r1, #45508	; 0xb1c4
   16518:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1651c:	f7ff fa90 	bl	15a40 <fbw_adc_buf_channel>
#endif
  timer_init();
   16520:	f7ff fece 	bl	162c0 <timer_init>
  servo_init();
   16524:	f000 f894 	bl	16650 <servo_init>
  ppm_init();
   16528:	f7ff fee2 	bl	162f0 <ppm_init>
  fbw_spi_init();
   1652c:	f7ff fe92 	bl	16254 <fbw_spi_init>
  //sei(); //FN
}
   16530:	bd80      	pop	{r7, pc}
   16532:	bf00      	nop

00016534 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16534:	b580      	push	{r7, lr}
   16536:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16538:	f24b 1343 	movw	r3, #45379	; 0xb143
   1653c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16540:	2200      	movs	r2, #0
   16542:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16544:	f24b 230f 	movw	r3, #45583	; 0xb20f
   16548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1654c:	781b      	ldrb	r3, [r3, #0]
   1654e:	3301      	adds	r3, #1
   16550:	b2da      	uxtb	r2, r3
   16552:	f24b 230f 	movw	r3, #45583	; 0xb20f
   16556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1655a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1655c:	f24b 230c 	movw	r3, #45580	; 0xb20c
   16560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16564:	2201      	movs	r2, #1
   16566:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16568:	f24b 230e 	movw	r3, #45582	; 0xb20e
   1656c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16570:	2200      	movs	r2, #0
   16572:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16574:	f24b 230a 	movw	r3, #45578	; 0xb20a
   16578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1657c:	2200      	movs	r2, #0
   1657e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16580:	f7ff fb3a 	bl	15bf8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16584:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1658c:	891b      	ldrh	r3, [r3, #8]
   1658e:	b21b      	sxth	r3, r3
   16590:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16594:	bfb4      	ite	lt
   16596:	2300      	movlt	r3, #0
   16598:	2301      	movge	r3, #1
   1659a:	b2db      	uxtb	r3, r3
   1659c:	461a      	mov	r2, r3
   1659e:	f24b 2308 	movw	r3, #45576	; 0xb208
   165a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165a6:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   165a8:	f24b 2308 	movw	r3, #45576	; 0xb208
   165ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165b0:	781b      	ldrb	r3, [r3, #0]
   165b2:	2b00      	cmp	r3, #0
   165b4:	d105      	bne.n	165c2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   165b6:	f24b 101c 	movw	r0, #45340	; 0xb11c
   165ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   165be:	f000 f925 	bl	1680c <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   165c2:	f24b 2308 	movw	r3, #45576	; 0xb208
   165c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165ca:	2201      	movs	r2, #1
   165cc:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   165ce:	f24b 230c 	movw	r3, #45580	; 0xb20c
   165d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d6:	2200      	movs	r2, #0
   165d8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   165da:	f24b 230e 	movw	r3, #45582	; 0xb20e
   165de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165e2:	2201      	movs	r2, #1
   165e4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   165e6:	bd80      	pop	{r7, pc}

000165e8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   165e8:	b580      	push	{r7, lr}
   165ea:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   165ec:	f648 1088 	movw	r0, #35208	; 0x8988
   165f0:	f2c0 0001 	movt	r0, #1
   165f4:	f000 f90a 	bl	1680c <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   165f8:	bd80      	pop	{r7, pc}
   165fa:	bf00      	nop

000165fc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   165fc:	b580      	push	{r7, lr}
   165fe:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16600:	f24b 137a 	movw	r3, #45434	; 0xb17a
   16604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16608:	781b      	ldrb	r3, [r3, #0]
   1660a:	b2db      	uxtb	r3, r3
   1660c:	2b00      	cmp	r3, #0
   1660e:	d018      	beq.n	16642 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16610:	f24b 2309 	movw	r3, #45577	; 0xb209
   16614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16618:	2200      	movs	r2, #0
   1661a:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   1661c:	f24b 230d 	movw	r3, #45581	; 0xb20d
   16620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16624:	2201      	movs	r2, #1
   16626:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16628:	f24b 2308 	movw	r3, #45576	; 0xb208
   1662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16630:	781b      	ldrb	r3, [r3, #0]
   16632:	2b01      	cmp	r3, #1
   16634:	d105      	bne.n	16642 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16636:	f24b 104c 	movw	r0, #45388	; 0xb14c
   1663a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1663e:	f000 f8e5 	bl	1680c <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16642:	f24b 230d 	movw	r3, #45581	; 0xb20d
   16646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1664a:	2200      	movs	r2, #0
   1664c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1664e:	bd80      	pop	{r7, pc}

00016650 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16650:	b480      	push	{r7}
   16652:	b083      	sub	sp, #12
   16654:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16656:	f242 0311 	movw	r3, #8209	; 0x2011
   1665a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1665e:	f242 0211 	movw	r2, #8209	; 0x2011
   16662:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16666:	7812      	ldrb	r2, [r2, #0]
   16668:	b2d2      	uxtb	r2, r2
   1666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1666e:	b2d2      	uxtb	r2, r2
   16670:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16672:	f242 0317 	movw	r3, #8215	; 0x2017
   16676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1667a:	f242 0217 	movw	r2, #8215	; 0x2017
   1667e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16682:	7812      	ldrb	r2, [r2, #0]
   16684:	b2d2      	uxtb	r2, r2
   16686:	f042 0202 	orr.w	r2, r2, #2
   1668a:	b2d2      	uxtb	r2, r2
   1668c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1668e:	f242 0312 	movw	r3, #8210	; 0x2012
   16692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16696:	f242 0212 	movw	r2, #8210	; 0x2012
   1669a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1669e:	7812      	ldrb	r2, [r2, #0]
   166a0:	b2d2      	uxtb	r2, r2
   166a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   166a6:	b2d2      	uxtb	r2, r2
   166a8:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   166aa:	f242 0318 	movw	r3, #8216	; 0x2018
   166ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b2:	f242 0218 	movw	r2, #8216	; 0x2018
   166b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166ba:	7812      	ldrb	r2, [r2, #0]
   166bc:	b2d2      	uxtb	r2, r2
   166be:	f022 0202 	bic.w	r2, r2, #2
   166c2:	b2d2      	uxtb	r2, r2
   166c4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   166c6:	2300      	movs	r3, #0
   166c8:	71fb      	strb	r3, [r7, #7]
   166ca:	e00b      	b.n	166e4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   166cc:	79fa      	ldrb	r2, [r7, #7]
   166ce:	f24b 2314 	movw	r3, #45588	; 0xb214
   166d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   166da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   166de:	79fb      	ldrb	r3, [r7, #7]
   166e0:	3301      	adds	r3, #1
   166e2:	71fb      	strb	r3, [r7, #7]
   166e4:	79fb      	ldrb	r3, [r7, #7]
   166e6:	2b09      	cmp	r3, #9
   166e8:	d9f0      	bls.n	166cc <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   166ea:	f242 032a 	movw	r3, #8234	; 0x202a
   166ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   166f6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   166f8:	f242 032f 	movw	r3, #8239	; 0x202f
   166fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16700:	f242 022f 	movw	r2, #8239	; 0x202f
   16704:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16708:	7812      	ldrb	r2, [r2, #0]
   1670a:	b2d2      	uxtb	r2, r2
   1670c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16710:	b2d2      	uxtb	r2, r2
   16712:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16714:	f242 0336 	movw	r3, #8246	; 0x2036
   16718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1671c:	2210      	movs	r2, #16
   1671e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16720:	f242 0312 	movw	r3, #8210	; 0x2012
   16724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16728:	f242 0212 	movw	r2, #8210	; 0x2012
   1672c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16730:	7812      	ldrb	r2, [r2, #0]
   16732:	b2d2      	uxtb	r2, r2
   16734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16738:	b2d2      	uxtb	r2, r2
   1673a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   1673c:	f242 0337 	movw	r3, #8247	; 0x2037
   16740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16744:	f242 0237 	movw	r2, #8247	; 0x2037
   16748:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1674c:	7812      	ldrb	r2, [r2, #0]
   1674e:	b2d2      	uxtb	r2, r2
   16750:	f042 0210 	orr.w	r2, r2, #16
   16754:	b2d2      	uxtb	r2, r2
   16756:	701a      	strb	r2, [r3, #0]
}
   16758:	370c      	adds	r7, #12
   1675a:	46bd      	mov	sp, r7
   1675c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16760:	4770      	bx	lr
   16762:	bf00      	nop

00016764 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16764:	b480      	push	{r7}
   16766:	b083      	sub	sp, #12
   16768:	af00      	add	r7, sp, #0
   1676a:	4602      	mov	r2, r0
   1676c:	460b      	mov	r3, r1
   1676e:	71fa      	strb	r2, [r7, #7]
   16770:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16772:	79f9      	ldrb	r1, [r7, #7]
   16774:	88bb      	ldrh	r3, [r7, #4]
   16776:	011b      	lsls	r3, r3, #4
   16778:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1677c:	d308      	bcc.n	16790 <servo_set_one+0x2c>
   1677e:	88bb      	ldrh	r3, [r7, #4]
   16780:	011b      	lsls	r3, r3, #4
   16782:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16786:	bf28      	it	cs
   16788:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1678c:	b29a      	uxth	r2, r3
   1678e:	e001      	b.n	16794 <servo_set_one+0x30>
   16790:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16794:	f24b 2314 	movw	r3, #45588	; 0xb214
   16798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1679c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   167a0:	370c      	adds	r7, #12
   167a2:	46bd      	mov	sp, r7
   167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   167a8:	4770      	bx	lr
   167aa:	bf00      	nop

000167ac <servo_transmit>:

void 
servo_transmit(void) {
   167ac:	b580      	push	{r7, lr}
   167ae:	b082      	sub	sp, #8
   167b0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   167b2:	2000      	movs	r0, #0
   167b4:	f000 f9e6 	bl	16b84 <uart_transmit>
   167b8:	2000      	movs	r0, #0
   167ba:	f000 f9e3 	bl	16b84 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   167be:	2300      	movs	r3, #0
   167c0:	71fb      	strb	r3, [r7, #7]
   167c2:	e01a      	b.n	167fa <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   167c4:	79fa      	ldrb	r2, [r7, #7]
   167c6:	f24b 2314 	movw	r3, #45588	; 0xb214
   167ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   167d2:	0a1b      	lsrs	r3, r3, #8
   167d4:	b29b      	uxth	r3, r3
   167d6:	b2db      	uxtb	r3, r3
   167d8:	4618      	mov	r0, r3
   167da:	f000 f9d3 	bl	16b84 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   167de:	79fa      	ldrb	r2, [r7, #7]
   167e0:	f24b 2314 	movw	r3, #45588	; 0xb214
   167e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   167ec:	b2db      	uxtb	r3, r3
   167ee:	4618      	mov	r0, r3
   167f0:	f000 f9c8 	bl	16b84 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   167f4:	79fb      	ldrb	r3, [r7, #7]
   167f6:	3301      	adds	r3, #1
   167f8:	71fb      	strb	r3, [r7, #7]
   167fa:	79fb      	ldrb	r3, [r7, #7]
   167fc:	2b09      	cmp	r3, #9
   167fe:	d9e1      	bls.n	167c4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16800:	200a      	movs	r0, #10
   16802:	f000 f9bf 	bl	16b84 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16806:	3708      	adds	r7, #8
   16808:	46bd      	mov	sp, r7
   1680a:	bd80      	pop	{r7, pc}

0001680c <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   1680c:	b5b0      	push	{r4, r5, r7, lr}
   1680e:	b084      	sub	sp, #16
   16810:	af00      	add	r7, sp, #0
   16812:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16814:	687b      	ldr	r3, [r7, #4]
   16816:	330a      	adds	r3, #10
   16818:	881b      	ldrh	r3, [r3, #0]
   1681a:	b21b      	sxth	r3, r3
   1681c:	005b      	lsls	r3, r3, #1
   1681e:	4618      	mov	r0, r3
   16820:	f001 f8bc 	bl	1799c <__aeabi_i2d>
   16824:	4602      	mov	r2, r0
   16826:	460b      	mov	r3, r1
   16828:	4610      	mov	r0, r2
   1682a:	4619      	mov	r1, r3
   1682c:	a3a6      	add	r3, pc, #664	; (adr r3, 16ac8 <servo_set+0x2bc>)
   1682e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16832:	f001 f919 	bl	17a68 <__aeabi_dmul>
   16836:	4602      	mov	r2, r0
   16838:	460b      	mov	r3, r1
   1683a:	4610      	mov	r0, r2
   1683c:	4619      	mov	r1, r3
   1683e:	f001 fbad 	bl	17f9c <__aeabi_d2iz>
   16842:	4603      	mov	r3, r0
   16844:	b29b      	uxth	r3, r3
   16846:	b29b      	uxth	r3, r3
   16848:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1684c:	81fb      	strh	r3, [r7, #14]
   1684e:	89fb      	ldrh	r3, [r7, #14]
   16850:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16854:	d307      	bcc.n	16866 <servo_set+0x5a>
   16856:	89fb      	ldrh	r3, [r7, #14]
   16858:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1685c:	bf28      	it	cs
   1685e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16862:	b29a      	uxth	r2, r3
   16864:	e001      	b.n	1686a <servo_set+0x5e>
   16866:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1686a:	f24b 2314 	movw	r3, #45588	; 0xb214
   1686e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16872:	80da      	strh	r2, [r3, #6]
   16874:	687b      	ldr	r3, [r7, #4]
   16876:	881b      	ldrh	r3, [r3, #0]
   16878:	b21b      	sxth	r3, r3
   1687a:	005b      	lsls	r3, r3, #1
   1687c:	4618      	mov	r0, r3
   1687e:	f001 f88d 	bl	1799c <__aeabi_i2d>
   16882:	4602      	mov	r2, r0
   16884:	460b      	mov	r3, r1
   16886:	4610      	mov	r0, r2
   16888:	4619      	mov	r1, r3
   1688a:	a38f      	add	r3, pc, #572	; (adr r3, 16ac8 <servo_set+0x2bc>)
   1688c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16890:	f001 f8ea 	bl	17a68 <__aeabi_dmul>
   16894:	4602      	mov	r2, r0
   16896:	460b      	mov	r3, r1
   16898:	4610      	mov	r0, r2
   1689a:	4619      	mov	r1, r3
   1689c:	f001 fb7e 	bl	17f9c <__aeabi_d2iz>
   168a0:	4603      	mov	r3, r0
   168a2:	b29b      	uxth	r3, r3
   168a4:	b29b      	uxth	r3, r3
   168a6:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   168aa:	81fb      	strh	r3, [r7, #14]
   168ac:	89fb      	ldrh	r3, [r7, #14]
   168ae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   168b2:	d307      	bcc.n	168c4 <servo_set+0xb8>
   168b4:	89fb      	ldrh	r3, [r7, #14]
   168b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   168ba:	bf28      	it	cs
   168bc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   168c0:	b29a      	uxth	r2, r3
   168c2:	e001      	b.n	168c8 <servo_set+0xbc>
   168c4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   168c8:	f24b 2314 	movw	r3, #45588	; 0xb214
   168cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d0:	825a      	strh	r2, [r3, #18]
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	3304      	adds	r3, #4
   168d6:	881b      	ldrh	r3, [r3, #0]
   168d8:	b21b      	sxth	r3, r3
   168da:	4618      	mov	r0, r3
   168dc:	f001 f85e 	bl	1799c <__aeabi_i2d>
   168e0:	4602      	mov	r2, r0
   168e2:	460b      	mov	r3, r1
   168e4:	4610      	mov	r0, r2
   168e6:	4619      	mov	r1, r3
   168e8:	a379      	add	r3, pc, #484	; (adr r3, 16ad0 <servo_set+0x2c4>)
   168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   168ee:	f001 f8bb 	bl	17a68 <__aeabi_dmul>
   168f2:	4602      	mov	r2, r0
   168f4:	460b      	mov	r3, r1
   168f6:	4610      	mov	r0, r2
   168f8:	4619      	mov	r1, r3
   168fa:	f001 fb4f 	bl	17f9c <__aeabi_d2iz>
   168fe:	4603      	mov	r3, r0
   16900:	b29b      	uxth	r3, r3
   16902:	b29b      	uxth	r3, r3
   16904:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16908:	3320      	adds	r3, #32
   1690a:	81fb      	strh	r3, [r7, #14]
   1690c:	89fb      	ldrh	r3, [r7, #14]
   1690e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16912:	d307      	bcc.n	16924 <servo_set+0x118>
   16914:	89fb      	ldrh	r3, [r7, #14]
   16916:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1691a:	bf28      	it	cs
   1691c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16920:	b29a      	uxth	r2, r3
   16922:	e001      	b.n	16928 <servo_set+0x11c>
   16924:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16928:	f24b 2314 	movw	r3, #45588	; 0xb214
   1692c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16930:	819a      	strh	r2, [r3, #12]
   16932:	687b      	ldr	r3, [r7, #4]
   16934:	885b      	ldrh	r3, [r3, #2]
   16936:	81bb      	strh	r3, [r7, #12]
   16938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1693c:	2b00      	cmp	r3, #0
   1693e:	dd06      	ble.n	1694e <servo_set+0x142>
   16940:	f04f 0400 	mov.w	r4, #0
   16944:	f04f 0500 	mov.w	r5, #0
   16948:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1694c:	e002      	b.n	16954 <servo_set+0x148>
   1694e:	a562      	add	r5, pc, #392	; (adr r5, 16ad8 <servo_set+0x2cc>)
   16950:	e9d5 4500 	ldrd	r4, r5, [r5]
   16954:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16958:	4618      	mov	r0, r3
   1695a:	f001 f81f 	bl	1799c <__aeabi_i2d>
   1695e:	4602      	mov	r2, r0
   16960:	460b      	mov	r3, r1
   16962:	4620      	mov	r0, r4
   16964:	4629      	mov	r1, r5
   16966:	f001 f87f 	bl	17a68 <__aeabi_dmul>
   1696a:	4602      	mov	r2, r0
   1696c:	460b      	mov	r3, r1
   1696e:	4610      	mov	r0, r2
   16970:	4619      	mov	r1, r3
   16972:	a35b      	add	r3, pc, #364	; (adr r3, 16ae0 <servo_set+0x2d4>)
   16974:	e9d3 2300 	ldrd	r2, r3, [r3]
   16978:	f001 f876 	bl	17a68 <__aeabi_dmul>
   1697c:	4602      	mov	r2, r0
   1697e:	460b      	mov	r3, r1
   16980:	4610      	mov	r0, r2
   16982:	4619      	mov	r1, r3
   16984:	f001 fb0a 	bl	17f9c <__aeabi_d2iz>
   16988:	4603      	mov	r3, r0
   1698a:	b29b      	uxth	r3, r3
   1698c:	b29b      	uxth	r3, r3
   1698e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16992:	81fb      	strh	r3, [r7, #14]
   16994:	89fb      	ldrh	r3, [r7, #14]
   16996:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1699a:	d307      	bcc.n	169ac <servo_set+0x1a0>
   1699c:	89fb      	ldrh	r3, [r7, #14]
   1699e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   169a2:	bf28      	it	cs
   169a4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   169a8:	b29a      	uxth	r2, r3
   169aa:	e001      	b.n	169b0 <servo_set+0x1a4>
   169ac:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   169b0:	f24b 2314 	movw	r3, #45588	; 0xb214
   169b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169b8:	801a      	strh	r2, [r3, #0]
   169ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   169be:	2b00      	cmp	r3, #0
   169c0:	dd03      	ble.n	169ca <servo_set+0x1be>
   169c2:	a545      	add	r5, pc, #276	; (adr r5, 16ad8 <servo_set+0x2cc>)
   169c4:	e9d5 4500 	ldrd	r4, r5, [r5]
   169c8:	e005      	b.n	169d6 <servo_set+0x1ca>
   169ca:	f04f 0400 	mov.w	r4, #0
   169ce:	f04f 0500 	mov.w	r5, #0
   169d2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   169d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   169da:	4618      	mov	r0, r3
   169dc:	f000 ffde 	bl	1799c <__aeabi_i2d>
   169e0:	4602      	mov	r2, r0
   169e2:	460b      	mov	r3, r1
   169e4:	4620      	mov	r0, r4
   169e6:	4629      	mov	r1, r5
   169e8:	f001 f83e 	bl	17a68 <__aeabi_dmul>
   169ec:	4602      	mov	r2, r0
   169ee:	460b      	mov	r3, r1
   169f0:	4610      	mov	r0, r2
   169f2:	4619      	mov	r1, r3
   169f4:	a33c      	add	r3, pc, #240	; (adr r3, 16ae8 <servo_set+0x2dc>)
   169f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   169fa:	f001 f835 	bl	17a68 <__aeabi_dmul>
   169fe:	4602      	mov	r2, r0
   16a00:	460b      	mov	r3, r1
   16a02:	4610      	mov	r0, r2
   16a04:	4619      	mov	r1, r3
   16a06:	f001 fac9 	bl	17f9c <__aeabi_d2iz>
   16a0a:	4603      	mov	r3, r0
   16a0c:	b29b      	uxth	r3, r3
   16a0e:	b29b      	uxth	r3, r3
   16a10:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16a14:	3320      	adds	r3, #32
   16a16:	81fb      	strh	r3, [r7, #14]
   16a18:	89fb      	ldrh	r3, [r7, #14]
   16a1a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a1e:	d307      	bcc.n	16a30 <servo_set+0x224>
   16a20:	89fb      	ldrh	r3, [r7, #14]
   16a22:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a26:	bf28      	it	cs
   16a28:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a2c:	b29a      	uxth	r2, r3
   16a2e:	e001      	b.n	16a34 <servo_set+0x228>
   16a30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a34:	f24b 2314 	movw	r3, #45588	; 0xb214
   16a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a3c:	809a      	strh	r2, [r3, #4]
   16a3e:	687b      	ldr	r3, [r7, #4]
   16a40:	3306      	adds	r3, #6
   16a42:	881b      	ldrh	r3, [r3, #0]
   16a44:	b21b      	sxth	r3, r3
   16a46:	4618      	mov	r0, r3
   16a48:	f000 ffa8 	bl	1799c <__aeabi_i2d>
   16a4c:	4604      	mov	r4, r0
   16a4e:	460d      	mov	r5, r1
   16a50:	687b      	ldr	r3, [r7, #4]
   16a52:	3302      	adds	r3, #2
   16a54:	881b      	ldrh	r3, [r3, #0]
   16a56:	b21b      	sxth	r3, r3
   16a58:	4618      	mov	r0, r3
   16a5a:	f000 ff9f 	bl	1799c <__aeabi_i2d>
   16a5e:	4602      	mov	r2, r0
   16a60:	460b      	mov	r3, r1
   16a62:	4620      	mov	r0, r4
   16a64:	4629      	mov	r1, r5
   16a66:	f000 fe4d 	bl	17704 <__adddf3>
   16a6a:	4602      	mov	r2, r0
   16a6c:	460b      	mov	r3, r1
   16a6e:	4610      	mov	r0, r2
   16a70:	4619      	mov	r1, r3
   16a72:	a31f      	add	r3, pc, #124	; (adr r3, 16af0 <servo_set+0x2e4>)
   16a74:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a78:	f000 fff6 	bl	17a68 <__aeabi_dmul>
   16a7c:	4602      	mov	r2, r0
   16a7e:	460b      	mov	r3, r1
   16a80:	4610      	mov	r0, r2
   16a82:	4619      	mov	r1, r3
   16a84:	f001 fa8a 	bl	17f9c <__aeabi_d2iz>
   16a88:	4603      	mov	r3, r0
   16a8a:	b29b      	uxth	r3, r3
   16a8c:	b29b      	uxth	r3, r3
   16a8e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16a92:	3320      	adds	r3, #32
   16a94:	81fb      	strh	r3, [r7, #14]
   16a96:	89fb      	ldrh	r3, [r7, #14]
   16a98:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a9c:	d307      	bcc.n	16aae <servo_set+0x2a2>
   16a9e:	89fb      	ldrh	r3, [r7, #14]
   16aa0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16aa4:	bf28      	it	cs
   16aa6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16aaa:	b29a      	uxth	r2, r3
   16aac:	e001      	b.n	16ab2 <servo_set+0x2a6>
   16aae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ab2:	f24b 2314 	movw	r3, #45588	; 0xb214
   16ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aba:	81da      	strh	r2, [r3, #14]
}
   16abc:	3710      	adds	r7, #16
   16abe:	46bd      	mov	sp, r7
   16ac0:	bdb0      	pop	{r4, r5, r7, pc}
   16ac2:	bf00      	nop
   16ac4:	f3af 8000 	nop.w
   16ac8:	aaaa9ef0 	.word	0xaaaa9ef0
   16acc:	3feaaaaa 	.word	0x3feaaaaa
   16ad0:	fc96473e 	.word	0xfc96473e
   16ad4:	3fdfc962 	.word	0x3fdfc962
   16ad8:	51eb851f 	.word	0x51eb851f
   16adc:	3fe51eb8 	.word	0x3fe51eb8
   16ae0:	9999999a 	.word	0x9999999a
   16ae4:	bfe19999 	.word	0xbfe19999
   16ae8:	aaaa9ef0 	.word	0xaaaa9ef0
   16aec:	bfe0aaaa 	.word	0xbfe0aaaa
   16af0:	eeeed77a 	.word	0xeeeed77a
   16af4:	bfdeeeee 	.word	0xbfdeeeee

00016af8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16af8:	b480      	push	{r7}
   16afa:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16afc:	f242 0320 	movw	r3, #8224	; 0x2020
   16b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b04:	2200      	movs	r2, #0
   16b06:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16b08:	f242 0309 	movw	r3, #8201	; 0x2009
   16b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b10:	2219      	movs	r2, #25
   16b12:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16b14:	f242 030b 	movw	r3, #8203	; 0x200b
   16b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b1c:	2200      	movs	r2, #0
   16b1e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16b20:	f242 030a 	movw	r3, #8202	; 0x200a
   16b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b28:	2208      	movs	r2, #8
   16b2a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16b2c:	f242 0320 	movw	r3, #8224	; 0x2020
   16b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b34:	2286      	movs	r2, #134	; 0x86
   16b36:	701a      	strb	r2, [r3, #0]
}
   16b38:	46bd      	mov	sp, r7
   16b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b3e:	4770      	bx	lr

00016b40 <uart_init_rx>:

void uart_init_rx() {
   16b40:	b480      	push	{r7}
   16b42:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16b44:	f242 030a 	movw	r3, #8202	; 0x200a
   16b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b4c:	f242 020a 	movw	r2, #8202	; 0x200a
   16b50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b54:	7812      	ldrb	r2, [r2, #0]
   16b56:	b2d2      	uxtb	r2, r2
   16b58:	f042 0210 	orr.w	r2, r2, #16
   16b5c:	b2d2      	uxtb	r2, r2
   16b5e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16b60:	f242 030a 	movw	r3, #8202	; 0x200a
   16b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b68:	f242 020a 	movw	r2, #8202	; 0x200a
   16b6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b70:	7812      	ldrb	r2, [r2, #0]
   16b72:	b2d2      	uxtb	r2, r2
   16b74:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16b78:	b2d2      	uxtb	r2, r2
   16b7a:	701a      	strb	r2, [r3, #0]
}
   16b7c:	46bd      	mov	sp, r7
   16b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b82:	4770      	bx	lr

00016b84 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16b84:	b480      	push	{r7}
   16b86:	b083      	sub	sp, #12
   16b88:	af00      	add	r7, sp, #0
   16b8a:	4603      	mov	r3, r0
   16b8c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16b8e:	f242 030a 	movw	r3, #8202	; 0x200a
   16b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b96:	781b      	ldrb	r3, [r3, #0]
   16b98:	b2db      	uxtb	r3, r3
   16b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16b9e:	2b00      	cmp	r3, #0
   16ba0:	d028      	beq.n	16bf4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16ba2:	f24b 2329 	movw	r3, #45609	; 0xb229
   16ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16baa:	781b      	ldrb	r3, [r3, #0]
   16bac:	b2db      	uxtb	r3, r3
   16bae:	461a      	mov	r2, r3
   16bb0:	f24b 2328 	movw	r3, #45608	; 0xb228
   16bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bb8:	781b      	ldrb	r3, [r3, #0]
   16bba:	3301      	adds	r3, #1
   16bbc:	429a      	cmp	r2, r3
   16bbe:	d100      	bne.n	16bc2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16bc0:	e02c      	b.n	16c1c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16bc2:	f24b 2328 	movw	r3, #45608	; 0xb228
   16bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bca:	781b      	ldrb	r3, [r3, #0]
   16bcc:	461a      	mov	r2, r3
   16bce:	f24b 232c 	movw	r3, #45612	; 0xb22c
   16bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bd6:	79f9      	ldrb	r1, [r7, #7]
   16bd8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16bda:	f24b 2328 	movw	r3, #45608	; 0xb228
   16bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16be2:	781b      	ldrb	r3, [r3, #0]
   16be4:	3301      	adds	r3, #1
   16be6:	b2da      	uxtb	r2, r3
   16be8:	f24b 2328 	movw	r3, #45608	; 0xb228
   16bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bf0:	701a      	strb	r2, [r3, #0]
   16bf2:	e013      	b.n	16c1c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16bf4:	f242 030c 	movw	r3, #8204	; 0x200c
   16bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bfc:	79fa      	ldrb	r2, [r7, #7]
   16bfe:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16c00:	f242 030a 	movw	r3, #8202	; 0x200a
   16c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c08:	f242 020a 	movw	r2, #8202	; 0x200a
   16c0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c10:	7812      	ldrb	r2, [r2, #0]
   16c12:	b2d2      	uxtb	r2, r2
   16c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16c18:	b2d2      	uxtb	r2, r2
   16c1a:	701a      	strb	r2, [r3, #0]
  }
}
   16c1c:	370c      	adds	r7, #12
   16c1e:	46bd      	mov	sp, r7
   16c20:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c24:	4770      	bx	lr
   16c26:	bf00      	nop

00016c28 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16c28:	b590      	push	{r4, r7, lr}
   16c2a:	b089      	sub	sp, #36	; 0x24
   16c2c:	af00      	add	r7, sp, #0
   16c2e:	4603      	mov	r3, r0
   16c30:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16c32:	f648 13dc 	movw	r3, #35292	; 0x89dc
   16c36:	f2c0 0301 	movt	r3, #1
   16c3a:	f107 040c 	add.w	r4, r7, #12
   16c3e:	6818      	ldr	r0, [r3, #0]
   16c40:	6859      	ldr	r1, [r3, #4]
   16c42:	689a      	ldr	r2, [r3, #8]
   16c44:	68db      	ldr	r3, [r3, #12]
   16c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16c48:	79fb      	ldrb	r3, [r7, #7]
   16c4a:	091b      	lsrs	r3, r3, #4
   16c4c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16c4e:	79fb      	ldrb	r3, [r7, #7]
   16c50:	f003 030f 	and.w	r3, r3, #15
   16c54:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16c56:	230f      	movs	r3, #15
   16c58:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16c5a:	230f      	movs	r3, #15
   16c5c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16c5e:	7ffb      	ldrb	r3, [r7, #31]
   16c60:	f107 0220 	add.w	r2, r7, #32
   16c64:	4413      	add	r3, r2
   16c66:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16c6a:	4618      	mov	r0, r3
   16c6c:	f7ff ff8a 	bl	16b84 <uart_transmit>
  uart_transmit(hex[low]);
   16c70:	7fbb      	ldrb	r3, [r7, #30]
   16c72:	f107 0220 	add.w	r2, r7, #32
   16c76:	4413      	add	r3, r2
   16c78:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16c7c:	4618      	mov	r0, r3
   16c7e:	f7ff ff81 	bl	16b84 <uart_transmit>
} 
   16c82:	3724      	adds	r7, #36	; 0x24
   16c84:	46bd      	mov	sp, r7
   16c86:	bd90      	pop	{r4, r7, pc}

00016c88 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16c88:	b580      	push	{r7, lr}
   16c8a:	b084      	sub	sp, #16
   16c8c:	af00      	add	r7, sp, #0
   16c8e:	4603      	mov	r3, r0
   16c90:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16c92:	88fb      	ldrh	r3, [r7, #6]
   16c94:	0a1b      	lsrs	r3, r3, #8
   16c96:	b29b      	uxth	r3, r3
   16c98:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16c9a:	88fb      	ldrh	r3, [r7, #6]
   16c9c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16c9e:	7bfb      	ldrb	r3, [r7, #15]
   16ca0:	4618      	mov	r0, r3
   16ca2:	f7ff ffc1 	bl	16c28 <uart_print_hex>
  uart_print_hex(low);
   16ca6:	7bbb      	ldrb	r3, [r7, #14]
   16ca8:	4618      	mov	r0, r3
   16caa:	f7ff ffbd 	bl	16c28 <uart_print_hex>
}
   16cae:	3710      	adds	r7, #16
   16cb0:	46bd      	mov	sp, r7
   16cb2:	bd80      	pop	{r7, pc}

00016cb4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16cb4:	b580      	push	{r7, lr}
   16cb6:	b084      	sub	sp, #16
   16cb8:	af00      	add	r7, sp, #0
   16cba:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16cbc:	2300      	movs	r3, #0
   16cbe:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16cc0:	e009      	b.n	16cd6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   16cc2:	7bfb      	ldrb	r3, [r7, #15]
   16cc4:	687a      	ldr	r2, [r7, #4]
   16cc6:	4413      	add	r3, r2
   16cc8:	781b      	ldrb	r3, [r3, #0]
   16cca:	4618      	mov	r0, r3
   16ccc:	f7ff ff5a 	bl	16b84 <uart_transmit>
    i++;
   16cd0:	7bfb      	ldrb	r3, [r7, #15]
   16cd2:	3301      	adds	r3, #1
   16cd4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16cd6:	7bfb      	ldrb	r3, [r7, #15]
   16cd8:	687a      	ldr	r2, [r7, #4]
   16cda:	4413      	add	r3, r2
   16cdc:	781b      	ldrb	r3, [r3, #0]
   16cde:	2b00      	cmp	r3, #0
   16ce0:	d1ef      	bne.n	16cc2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16ce2:	3710      	adds	r7, #16
   16ce4:	46bd      	mov	sp, r7
   16ce6:	bd80      	pop	{r7, pc}

00016ce8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16ce8:	b480      	push	{r7}
   16cea:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16cec:	f24b 2328 	movw	r3, #45608	; 0xb228
   16cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cf4:	781a      	ldrb	r2, [r3, #0]
   16cf6:	f24b 2329 	movw	r3, #45609	; 0xb229
   16cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cfe:	781b      	ldrb	r3, [r3, #0]
   16d00:	b2db      	uxtb	r3, r3
   16d02:	429a      	cmp	r2, r3
   16d04:	d10e      	bne.n	16d24 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16d06:	f242 030a 	movw	r3, #8202	; 0x200a
   16d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d0e:	f242 020a 	movw	r2, #8202	; 0x200a
   16d12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d16:	7812      	ldrb	r2, [r2, #0]
   16d18:	b2d2      	uxtb	r2, r2
   16d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16d1e:	b2d2      	uxtb	r2, r2
   16d20:	701a      	strb	r2, [r3, #0]
   16d22:	e01d      	b.n	16d60 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16d24:	f242 030c 	movw	r3, #8204	; 0x200c
   16d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d2c:	f24b 2229 	movw	r2, #45609	; 0xb229
   16d30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d34:	7812      	ldrb	r2, [r2, #0]
   16d36:	b2d2      	uxtb	r2, r2
   16d38:	4611      	mov	r1, r2
   16d3a:	f24b 222c 	movw	r2, #45612	; 0xb22c
   16d3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d42:	5c52      	ldrb	r2, [r2, r1]
   16d44:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16d46:	f24b 2329 	movw	r3, #45609	; 0xb229
   16d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d4e:	781b      	ldrb	r3, [r3, #0]
   16d50:	b2db      	uxtb	r3, r3
   16d52:	3301      	adds	r3, #1
   16d54:	b2da      	uxtb	r2, r3
   16d56:	f24b 2329 	movw	r3, #45609	; 0xb229
   16d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d5e:	701a      	strb	r2, [r3, #0]
  }
}
   16d60:	46bd      	mov	sp, r7
   16d62:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d66:	4770      	bx	lr

00016d68 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16d68:	b580      	push	{r7, lr}
   16d6a:	b082      	sub	sp, #8
   16d6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16d6e:	2010      	movs	r0, #16
   16d70:	2101      	movs	r1, #1
   16d72:	f7ea f825 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16d76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d7a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16d82:	2201      	movs	r2, #1
   16d84:	f7ea fb2c 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16d8c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16d8e:	2310      	movs	r3, #16
   16d90:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16d92:	2303      	movs	r3, #3
   16d94:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16d96:	1d3b      	adds	r3, r7, #4
   16d98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d9c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16da0:	4619      	mov	r1, r3
   16da2:	f7ea f9e1 	bl	1168 <GPIO_Init>
}
   16da6:	3708      	adds	r7, #8
   16da8:	46bd      	mov	sp, r7
   16daa:	bd80      	pop	{r7, pc}

00016dac <init_button>:

void init_button(void)
{
   16dac:	b580      	push	{r7, lr}
   16dae:	b082      	sub	sp, #8
   16db0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16db2:	2004      	movs	r0, #4
   16db4:	2101      	movs	r1, #1
   16db6:	f7ea f803 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16dba:	2301      	movs	r3, #1
   16dbc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16dbe:	2304      	movs	r3, #4
   16dc0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16dc2:	2303      	movs	r3, #3
   16dc4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16dc6:	1d3b      	adds	r3, r7, #4
   16dc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16dcc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16dd0:	4619      	mov	r1, r3
   16dd2:	f7ea f9c9 	bl	1168 <GPIO_Init>
}
   16dd6:	3708      	adds	r7, #8
   16dd8:	46bd      	mov	sp, r7
   16dda:	bd80      	pop	{r7, pc}

00016ddc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16ddc:	b580      	push	{r7, lr}
   16dde:	b084      	sub	sp, #16
   16de0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16de2:	2001      	movs	r0, #1
   16de4:	2101      	movs	r1, #1
   16de6:	f7e9 ffeb 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16dea:	2000      	movs	r0, #0
   16dec:	2100      	movs	r1, #0
   16dee:	f7ea fbef 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16df2:	2301      	movs	r3, #1
   16df4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16df6:	2300      	movs	r3, #0
   16df8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16dfa:	2308      	movs	r3, #8
   16dfc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16dfe:	2301      	movs	r3, #1
   16e00:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16e02:	f107 0308 	add.w	r3, r7, #8
   16e06:	4618      	mov	r0, r3
   16e08:	f7eb f8e8 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16e0c:	2306      	movs	r3, #6
   16e0e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16e10:	230f      	movs	r3, #15
   16e12:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16e14:	230f      	movs	r3, #15
   16e16:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16e18:	2301      	movs	r3, #1
   16e1a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16e1c:	1d3b      	adds	r3, r7, #4
   16e1e:	4618      	mov	r0, r3
   16e20:	f7eb fa16 	bl	2250 <NVIC_Init>
}
   16e24:	3710      	adds	r7, #16
   16e26:	46bd      	mov	sp, r7
   16e28:	bd80      	pop	{r7, pc}
   16e2a:	bf00      	nop

00016e2c <init_rs232>:

void init_rs232(void)
{
   16e2c:	b580      	push	{r7, lr}
   16e2e:	b086      	sub	sp, #24
   16e30:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16e32:	2005      	movs	r0, #5
   16e34:	2101      	movs	r1, #1
   16e36:	f7e9 ffc3 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16e3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16e3e:	2101      	movs	r1, #1
   16e40:	f7e9 ffe6 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16e44:	2308      	movs	r3, #8
   16e46:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16e48:	2304      	movs	r3, #4
   16e4a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16e4c:	1d3b      	adds	r3, r7, #4
   16e4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16e52:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e56:	4619      	mov	r1, r3
   16e58:	f7ea f986 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16e5c:	2304      	movs	r3, #4
   16e5e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16e60:	2303      	movs	r3, #3
   16e62:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16e64:	2318      	movs	r3, #24
   16e66:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16e68:	1d3b      	adds	r3, r7, #4
   16e6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16e6e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e72:	4619      	mov	r1, r3
   16e74:	f7ea f978 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16e78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16e7c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16e7e:	2300      	movs	r3, #0
   16e80:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16e82:	2300      	movs	r3, #0
   16e84:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16e86:	2300      	movs	r3, #0
   16e88:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16e8a:	2300      	movs	r3, #0
   16e8c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16e8e:	230c      	movs	r3, #12
   16e90:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16e92:	f107 0308 	add.w	r3, r7, #8
   16e96:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e9a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e9e:	4619      	mov	r1, r3
   16ea0:	f7ea fc4a 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16ea4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ea8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16eac:	2101      	movs	r1, #1
   16eae:	f7ea fd61 	bl	1974 <USART_Cmd>
}
   16eb2:	3718      	adds	r7, #24
   16eb4:	46bd      	mov	sp, r7
   16eb6:	bd80      	pop	{r7, pc}

00016eb8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16eb8:	b580      	push	{r7, lr}
   16eba:	b082      	sub	sp, #8
   16ebc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16ebe:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ec2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16ec6:	f240 7127 	movw	r1, #1831	; 0x727
   16eca:	2200      	movs	r2, #0
   16ecc:	f7ea fd72 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16ed0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ed4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16ed8:	f240 5125 	movw	r1, #1317	; 0x525
   16edc:	2201      	movs	r2, #1
   16ede:	f7ea fd69 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16ee2:	2326      	movs	r3, #38	; 0x26
   16ee4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16ee6:	2300      	movs	r3, #0
   16ee8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16eea:	2301      	movs	r3, #1
   16eec:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16eee:	1d3b      	adds	r3, r7, #4
   16ef0:	4618      	mov	r0, r3
   16ef2:	f7eb f9ad 	bl	2250 <NVIC_Init>
}
   16ef6:	3708      	adds	r7, #8
   16ef8:	46bd      	mov	sp, r7
   16efa:	bd80      	pop	{r7, pc}

00016efc <enable_rs232>:

void enable_rs232(void)
{
   16efc:	b580      	push	{r7, lr}
   16efe:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16f00:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f04:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f08:	2101      	movs	r1, #1
   16f0a:	f7ea fd33 	bl	1974 <USART_Cmd>
}
   16f0e:	bd80      	pop	{r7, pc}

00016f10 <send_byte>:

void send_byte(uint8_t b)
{
   16f10:	b580      	push	{r7, lr}
   16f12:	b082      	sub	sp, #8
   16f14:	af00      	add	r7, sp, #0
   16f16:	4603      	mov	r3, r0
   16f18:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16f1a:	bf00      	nop
   16f1c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f20:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f24:	2180      	movs	r1, #128	; 0x80
   16f26:	f7ea ff91 	bl	1e4c <USART_GetFlagStatus>
   16f2a:	4603      	mov	r3, r0
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d0f5      	beq.n	16f1c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f34:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16f3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16f40:	68d2      	ldr	r2, [r2, #12]
   16f42:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16f46:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   16f48:	79fb      	ldrb	r3, [r7, #7]
   16f4a:	b29b      	uxth	r3, r3
   16f4c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f50:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f54:	4619      	mov	r1, r3
   16f56:	f7ea fe2d 	bl	1bb4 <USART_SendData>
}
   16f5a:	3708      	adds	r7, #8
   16f5c:	46bd      	mov	sp, r7
   16f5e:	bd80      	pop	{r7, pc}

00016f60 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   16f60:	b580      	push	{r7, lr}
   16f62:	b082      	sub	sp, #8
   16f64:	af00      	add	r7, sp, #0
   16f66:	4603      	mov	r3, r0
   16f68:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   16f6a:	79fb      	ldrb	r3, [r7, #7]
   16f6c:	3330      	adds	r3, #48	; 0x30
   16f6e:	b2db      	uxtb	r3, r3
   16f70:	4618      	mov	r0, r3
   16f72:	f7ff ffcd 	bl	16f10 <send_byte>
}
   16f76:	3708      	adds	r7, #8
   16f78:	46bd      	mov	sp, r7
   16f7a:	bd80      	pop	{r7, pc}

00016f7c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   16f7c:	b580      	push	{r7, lr}
   16f7e:	b084      	sub	sp, #16
   16f80:	af00      	add	r7, sp, #0
   16f82:	6078      	str	r0, [r7, #4]
    int i = 0;
   16f84:	2300      	movs	r3, #0
   16f86:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   16f88:	e009      	b.n	16f9e <vPrintString+0x22>
    {
        send_byte(string[i]);
   16f8a:	68fb      	ldr	r3, [r7, #12]
   16f8c:	687a      	ldr	r2, [r7, #4]
   16f8e:	4413      	add	r3, r2
   16f90:	781b      	ldrb	r3, [r3, #0]
   16f92:	4618      	mov	r0, r3
   16f94:	f7ff ffbc 	bl	16f10 <send_byte>
        i++;
   16f98:	68fb      	ldr	r3, [r7, #12]
   16f9a:	3301      	adds	r3, #1
   16f9c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   16f9e:	68fb      	ldr	r3, [r7, #12]
   16fa0:	687a      	ldr	r2, [r7, #4]
   16fa2:	4413      	add	r3, r2
   16fa4:	781b      	ldrb	r3, [r3, #0]
   16fa6:	2b00      	cmp	r3, #0
   16fa8:	d1ef      	bne.n	16f8a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   16faa:	3710      	adds	r7, #16
   16fac:	46bd      	mov	sp, r7
   16fae:	bd80      	pop	{r7, pc}

00016fb0 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   16fb0:	b580      	push	{r7, lr}
   16fb2:	b08a      	sub	sp, #40	; 0x28
   16fb4:	af00      	add	r7, sp, #0
   16fb6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   16fb8:	2300      	movs	r3, #0
   16fba:	623b      	str	r3, [r7, #32]
    long num = c_num;
   16fbc:	687b      	ldr	r3, [r7, #4]
   16fbe:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   16fc0:	69fb      	ldr	r3, [r7, #28]
   16fc2:	2b00      	cmp	r3, #0
   16fc4:	d106      	bne.n	16fd4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   16fc6:	f648 10ec 	movw	r0, #35308	; 0x89ec
   16fca:	f2c0 0001 	movt	r0, #1
   16fce:	f7ff ffd5 	bl	16f7c <vPrintString>
   16fd2:	e062      	b.n	1709a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   16fd4:	e024      	b.n	17020 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   16fd6:	69f9      	ldr	r1, [r7, #28]
   16fd8:	f246 6367 	movw	r3, #26215	; 0x6667
   16fdc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16fe0:	fb83 2301 	smull	r2, r3, r3, r1
   16fe4:	109a      	asrs	r2, r3, #2
   16fe6:	17cb      	asrs	r3, r1, #31
   16fe8:	1ad2      	subs	r2, r2, r3
   16fea:	4613      	mov	r3, r2
   16fec:	009b      	lsls	r3, r3, #2
   16fee:	4413      	add	r3, r2
   16ff0:	005b      	lsls	r3, r3, #1
   16ff2:	1aca      	subs	r2, r1, r3
   16ff4:	b2d3      	uxtb	r3, r2
   16ff6:	3330      	adds	r3, #48	; 0x30
   16ff8:	b2da      	uxtb	r2, r3
   16ffa:	f107 010c 	add.w	r1, r7, #12
   16ffe:	6a3b      	ldr	r3, [r7, #32]
   17000:	440b      	add	r3, r1
   17002:	701a      	strb	r2, [r3, #0]
            count ++;
   17004:	6a3b      	ldr	r3, [r7, #32]
   17006:	3301      	adds	r3, #1
   17008:	623b      	str	r3, [r7, #32]
            num /= 10;
   1700a:	69fa      	ldr	r2, [r7, #28]
   1700c:	f246 6367 	movw	r3, #26215	; 0x6667
   17010:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17014:	fb83 1302 	smull	r1, r3, r3, r2
   17018:	1099      	asrs	r1, r3, #2
   1701a:	17d3      	asrs	r3, r2, #31
   1701c:	1acb      	subs	r3, r1, r3
   1701e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17020:	69fb      	ldr	r3, [r7, #28]
   17022:	2b00      	cmp	r3, #0
   17024:	d1d7      	bne.n	16fd6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17026:	f107 020c 	add.w	r2, r7, #12
   1702a:	6a3b      	ldr	r3, [r7, #32]
   1702c:	4413      	add	r3, r2
   1702e:	2200      	movs	r2, #0
   17030:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17032:	2300      	movs	r3, #0
   17034:	627b      	str	r3, [r7, #36]	; 0x24
   17036:	e020      	b.n	1707a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17038:	f107 020c 	add.w	r2, r7, #12
   1703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1703e:	4413      	add	r3, r2
   17040:	781b      	ldrb	r3, [r3, #0]
   17042:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17044:	6a3a      	ldr	r2, [r7, #32]
   17046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17048:	1ad3      	subs	r3, r2, r3
   1704a:	3b01      	subs	r3, #1
   1704c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17050:	4413      	add	r3, r2
   17052:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17056:	f107 010c 	add.w	r1, r7, #12
   1705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1705c:	440b      	add	r3, r1
   1705e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17060:	6a3a      	ldr	r2, [r7, #32]
   17062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17064:	1ad3      	subs	r3, r2, r3
   17066:	3b01      	subs	r3, #1
   17068:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1706c:	440b      	add	r3, r1
   1706e:	7efa      	ldrb	r2, [r7, #27]
   17070:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17076:	3301      	adds	r3, #1
   17078:	627b      	str	r3, [r7, #36]	; 0x24
   1707a:	6a3b      	ldr	r3, [r7, #32]
   1707c:	085a      	lsrs	r2, r3, #1
   1707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17080:	429a      	cmp	r2, r3
   17082:	d8d9      	bhi.n	17038 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17084:	f107 030c 	add.w	r3, r7, #12
   17088:	4618      	mov	r0, r3
   1708a:	f7ff ff77 	bl	16f7c <vPrintString>
        vPrintString("\n\r");
   1708e:	f648 10f0 	movw	r0, #35312	; 0x89f0
   17092:	f2c0 0001 	movt	r0, #1
   17096:	f7ff ff71 	bl	16f7c <vPrintString>
    }
}
   1709a:	3728      	adds	r7, #40	; 0x28
   1709c:	46bd      	mov	sp, r7
   1709e:	bd80      	pop	{r7, pc}

000170a0 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   170a0:	b580      	push	{r7, lr}
   170a2:	b084      	sub	sp, #16
   170a4:	af04      	add	r7, sp, #16
    init_led();
   170a6:	f7ff fe5f 	bl	16d68 <init_led>
    init_rs232();
   170aa:	f7ff febf 	bl	16e2c <init_rs232>
    enable_rs232_interrupts();
   170ae:	f7ff ff03 	bl	16eb8 <enable_rs232_interrupts>
    enable_rs232();
   170b2:	f7ff ff23 	bl	16efc <enable_rs232>

    //vTaskCompleteInitialise();
    vSemaphoreInitialise();
   170b6:	f7eb fea3 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
   170ba:	f7eb fee1 	bl	2e80 <vParameterInitialise>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   170be:	2301      	movs	r3, #1
   170c0:	9300      	str	r3, [sp, #0]
   170c2:	4bc4      	ldr	r3, [pc, #784]	; (173d4 <main+0x334>)
   170c4:	9301      	str	r3, [sp, #4]
   170c6:	2300      	movs	r3, #0
   170c8:	9302      	str	r3, [sp, #8]
   170ca:	2300      	movs	r3, #0
   170cc:	9303      	str	r3, [sp, #12]
   170ce:	f243 7019 	movw	r0, #14105	; 0x3719
   170d2:	f2c0 0000 	movt	r0, #0
   170d6:	f648 11f4 	movw	r1, #35316	; 0x89f4
   170da:	f2c0 0101 	movt	r1, #1
   170de:	2280      	movs	r2, #128	; 0x80
   170e0:	4bbd      	ldr	r3, [pc, #756]	; (173d8 <main+0x338>)
   170e2:	f7ed fa21 	bl	4528 <xTaskGenericCreate>

    // task 1, 100ms,
    xTaskCreate( vSensor, "Sensor 0", SERVANT_STACK_SIZE, (void *)&pvParameters[0], tskIDLE_PRIORITY + 15, &xTaskOfHandle[0]);
   170e6:	230f      	movs	r3, #15
   170e8:	9300      	str	r3, [sp, #0]
   170ea:	f240 73f0 	movw	r3, #2032	; 0x7f0
   170ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170f2:	9301      	str	r3, [sp, #4]
   170f4:	2300      	movs	r3, #0
   170f6:	9302      	str	r3, [sp, #8]
   170f8:	2300      	movs	r3, #0
   170fa:	9303      	str	r3, [sp, #12]
   170fc:	f243 3019 	movw	r0, #13081	; 0x3319
   17100:	f2c0 0000 	movt	r0, #0
   17104:	f648 2100 	movw	r1, #35328	; 0x8a00
   17108:	f2c0 0101 	movt	r1, #1
   1710c:	2280      	movs	r2, #128	; 0x80
   1710e:	f240 33d0 	movw	r3, #976	; 0x3d0
   17112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17116:	f7ed fa07 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 1", SERVANT_STACK_SIZE, (void *)&pvParameters[1], tskIDLE_PRIORITY + 15, &xTaskOfHandle[1]);
   1711a:	230f      	movs	r3, #15
   1711c:	9300      	str	r3, [sp, #0]
   1711e:	4baf      	ldr	r3, [pc, #700]	; (173dc <main+0x33c>)
   17120:	9301      	str	r3, [sp, #4]
   17122:	2300      	movs	r3, #0
   17124:	9302      	str	r3, [sp, #8]
   17126:	2300      	movs	r3, #0
   17128:	9303      	str	r3, [sp, #12]
   1712a:	f243 502d 	movw	r0, #13613	; 0x352d
   1712e:	f2c0 0000 	movt	r0, #0
   17132:	f648 210c 	movw	r1, #35340	; 0x8a0c
   17136:	f2c0 0101 	movt	r1, #1
   1713a:	2280      	movs	r2, #128	; 0x80
   1713c:	4ba8      	ldr	r3, [pc, #672]	; (173e0 <main+0x340>)
   1713e:	f7ed f9f3 	bl	4528 <xTaskGenericCreate>

    // task 2 100ms,
    xTaskCreate( vSensor, "Sensor 2", SERVANT_STACK_SIZE, (void *)&pvParameters[2], tskIDLE_PRIORITY + 14, &xTaskOfHandle[2]);
   17142:	230e      	movs	r3, #14
   17144:	9300      	str	r3, [sp, #0]
   17146:	4ba7      	ldr	r3, [pc, #668]	; (173e4 <main+0x344>)
   17148:	9301      	str	r3, [sp, #4]
   1714a:	2300      	movs	r3, #0
   1714c:	9302      	str	r3, [sp, #8]
   1714e:	2300      	movs	r3, #0
   17150:	9303      	str	r3, [sp, #12]
   17152:	f243 3019 	movw	r0, #13081	; 0x3319
   17156:	f2c0 0000 	movt	r0, #0
   1715a:	f648 2118 	movw	r1, #35352	; 0x8a18
   1715e:	f2c0 0101 	movt	r1, #1
   17162:	2280      	movs	r2, #128	; 0x80
   17164:	4ba0      	ldr	r3, [pc, #640]	; (173e8 <main+0x348>)
   17166:	f7ed f9df 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 3", SERVANT_STACK_SIZE, (void *)&pvParameters[3], tskIDLE_PRIORITY + 14,&xTaskOfHandle[3]);
   1716a:	230e      	movs	r3, #14
   1716c:	9300      	str	r3, [sp, #0]
   1716e:	4b9f      	ldr	r3, [pc, #636]	; (173ec <main+0x34c>)
   17170:	9301      	str	r3, [sp, #4]
   17172:	2300      	movs	r3, #0
   17174:	9302      	str	r3, [sp, #8]
   17176:	2300      	movs	r3, #0
   17178:	9303      	str	r3, [sp, #12]
   1717a:	f243 502d 	movw	r0, #13613	; 0x352d
   1717e:	f2c0 0000 	movt	r0, #0
   17182:	f648 2124 	movw	r1, #35364	; 0x8a24
   17186:	f2c0 0101 	movt	r1, #1
   1718a:	2280      	movs	r2, #128	; 0x80
   1718c:	4b98      	ldr	r3, [pc, #608]	; (173f0 <main+0x350>)
   1718e:	f7ed f9cb 	bl	4528 <xTaskGenericCreate>

    // task 6 100ms,
    xTaskCreate( vSensor, "Sensor 7", SERVANT_STACK_SIZE, (void *)&pvParameters[7], tskIDLE_PRIORITY + 13, &xTaskOfHandle[7]);
   17192:	230d      	movs	r3, #13
   17194:	9300      	str	r3, [sp, #0]
   17196:	4b97      	ldr	r3, [pc, #604]	; (173f4 <main+0x354>)
   17198:	9301      	str	r3, [sp, #4]
   1719a:	2300      	movs	r3, #0
   1719c:	9302      	str	r3, [sp, #8]
   1719e:	2300      	movs	r3, #0
   171a0:	9303      	str	r3, [sp, #12]
   171a2:	f243 3019 	movw	r0, #13081	; 0x3319
   171a6:	f2c0 0000 	movt	r0, #0
   171aa:	f648 2130 	movw	r1, #35376	; 0x8a30
   171ae:	f2c0 0101 	movt	r1, #1
   171b2:	2280      	movs	r2, #128	; 0x80
   171b4:	4b90      	ldr	r3, [pc, #576]	; (173f8 <main+0x358>)
   171b6:	f7ed f9b7 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 8", SERVANT_STACK_SIZE, (void *)&pvParameters[8], tskIDLE_PRIORITY + 13,&xTaskOfHandle[8]);
   171ba:	230d      	movs	r3, #13
   171bc:	9300      	str	r3, [sp, #0]
   171be:	4b8f      	ldr	r3, [pc, #572]	; (173fc <main+0x35c>)
   171c0:	9301      	str	r3, [sp, #4]
   171c2:	2300      	movs	r3, #0
   171c4:	9302      	str	r3, [sp, #8]
   171c6:	2300      	movs	r3, #0
   171c8:	9303      	str	r3, [sp, #12]
   171ca:	f243 502d 	movw	r0, #13613	; 0x352d
   171ce:	f2c0 0000 	movt	r0, #0
   171d2:	f648 213c 	movw	r1, #35388	; 0x8a3c
   171d6:	f2c0 0101 	movt	r1, #1
   171da:	2280      	movs	r2, #128	; 0x80
   171dc:	4b88      	ldr	r3, [pc, #544]	; (17400 <main+0x360>)
   171de:	f7ed f9a3 	bl	4528 <xTaskGenericCreate>

    // task 3, 200ms, 
    xTaskCreate( vSensor, "Sensor 4", SERVANT_STACK_SIZE, (void *)&pvParameters[4], tskIDLE_PRIORITY + 12, &xTaskOfHandle[4]); 
   171e2:	230c      	movs	r3, #12
   171e4:	9300      	str	r3, [sp, #0]
   171e6:	4b87      	ldr	r3, [pc, #540]	; (17404 <main+0x364>)
   171e8:	9301      	str	r3, [sp, #4]
   171ea:	2300      	movs	r3, #0
   171ec:	9302      	str	r3, [sp, #8]
   171ee:	2300      	movs	r3, #0
   171f0:	9303      	str	r3, [sp, #12]
   171f2:	f243 3019 	movw	r0, #13081	; 0x3319
   171f6:	f2c0 0000 	movt	r0, #0
   171fa:	f648 2148 	movw	r1, #35400	; 0x8a48
   171fe:	f2c0 0101 	movt	r1, #1
   17202:	2280      	movs	r2, #128	; 0x80
   17204:	4b80      	ldr	r3, [pc, #512]	; (17408 <main+0x368>)
   17206:	f7ed f98f 	bl	4528 <xTaskGenericCreate>

    // task 4, 200ms
    xTaskCreate( vSensor, "Sensor 5", SERVANT_STACK_SIZE, (void *)&pvParameters[5], tskIDLE_PRIORITY + 11, &xTaskOfHandle[5]); 
   1720a:	230b      	movs	r3, #11
   1720c:	9300      	str	r3, [sp, #0]
   1720e:	4b7f      	ldr	r3, [pc, #508]	; (1740c <main+0x36c>)
   17210:	9301      	str	r3, [sp, #4]
   17212:	2300      	movs	r3, #0
   17214:	9302      	str	r3, [sp, #8]
   17216:	2300      	movs	r3, #0
   17218:	9303      	str	r3, [sp, #12]
   1721a:	f243 3019 	movw	r0, #13081	; 0x3319
   1721e:	f2c0 0000 	movt	r0, #0
   17222:	f648 2154 	movw	r1, #35412	; 0x8a54
   17226:	f2c0 0101 	movt	r1, #1
   1722a:	2280      	movs	r2, #128	; 0x80
   1722c:	4b78      	ldr	r3, [pc, #480]	; (17410 <main+0x370>)
   1722e:	f7ed f97b 	bl	4528 <xTaskGenericCreate>

    // task 5, 200ms
    xTaskCreate( vSensor, "Sensor 6", SERVANT_STACK_SIZE, (void *)&pvParameters[6], tskIDLE_PRIORITY + 10, &xTaskOfHandle[6]); 
   17232:	230a      	movs	r3, #10
   17234:	9300      	str	r3, [sp, #0]
   17236:	4b77      	ldr	r3, [pc, #476]	; (17414 <main+0x374>)
   17238:	9301      	str	r3, [sp, #4]
   1723a:	2300      	movs	r3, #0
   1723c:	9302      	str	r3, [sp, #8]
   1723e:	2300      	movs	r3, #0
   17240:	9303      	str	r3, [sp, #12]
   17242:	f243 3019 	movw	r0, #13081	; 0x3319
   17246:	f2c0 0000 	movt	r0, #0
   1724a:	f648 2160 	movw	r1, #35424	; 0x8a60
   1724e:	f2c0 0101 	movt	r1, #1
   17252:	2280      	movs	r2, #128	; 0x80
   17254:	4b70      	ldr	r3, [pc, #448]	; (17418 <main+0x378>)
   17256:	f7ed f967 	bl	4528 <xTaskGenericCreate>

    // task 7, 200ms
    xTaskCreate( vSensor, "Sensor 9", SERVANT_STACK_SIZE, (void *)&pvParameters[9], tskIDLE_PRIORITY + 9, &xTaskOfHandle[9]); 
   1725a:	2309      	movs	r3, #9
   1725c:	9300      	str	r3, [sp, #0]
   1725e:	4b6f      	ldr	r3, [pc, #444]	; (1741c <main+0x37c>)
   17260:	9301      	str	r3, [sp, #4]
   17262:	2300      	movs	r3, #0
   17264:	9302      	str	r3, [sp, #8]
   17266:	2300      	movs	r3, #0
   17268:	9303      	str	r3, [sp, #12]
   1726a:	f243 3019 	movw	r0, #13081	; 0x3319
   1726e:	f2c0 0000 	movt	r0, #0
   17272:	f648 216c 	movw	r1, #35436	; 0x8a6c
   17276:	f2c0 0101 	movt	r1, #1
   1727a:	2280      	movs	r2, #128	; 0x80
   1727c:	4b68      	ldr	r3, [pc, #416]	; (17420 <main+0x380>)
   1727e:	f7ed f953 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 10", SERVANT_STACK_SIZE, (void *)&pvParameters[10], tskIDLE_PRIORITY + 9,&xTaskOfHandle[10]);
   17282:	2309      	movs	r3, #9
   17284:	9300      	str	r3, [sp, #0]
   17286:	4b67      	ldr	r3, [pc, #412]	; (17424 <main+0x384>)
   17288:	9301      	str	r3, [sp, #4]
   1728a:	2300      	movs	r3, #0
   1728c:	9302      	str	r3, [sp, #8]
   1728e:	2300      	movs	r3, #0
   17290:	9303      	str	r3, [sp, #12]
   17292:	f243 502d 	movw	r0, #13613	; 0x352d
   17296:	f2c0 0000 	movt	r0, #0
   1729a:	f648 2178 	movw	r1, #35448	; 0x8a78
   1729e:	f2c0 0101 	movt	r1, #1
   172a2:	2280      	movs	r2, #128	; 0x80
   172a4:	4b60      	ldr	r3, [pc, #384]	; (17428 <main+0x388>)
   172a6:	f7ed f93f 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 11", SERVANT_STACK_SIZE, (void *)&pvParameters[11], tskIDLE_PRIORITY + 9,&xTaskOfHandle[11]);
   172aa:	2309      	movs	r3, #9
   172ac:	9300      	str	r3, [sp, #0]
   172ae:	4b5f      	ldr	r3, [pc, #380]	; (1742c <main+0x38c>)
   172b0:	9301      	str	r3, [sp, #4]
   172b2:	2300      	movs	r3, #0
   172b4:	9302      	str	r3, [sp, #8]
   172b6:	2300      	movs	r3, #0
   172b8:	9303      	str	r3, [sp, #12]
   172ba:	f243 502d 	movw	r0, #13613	; 0x352d
   172be:	f2c0 0000 	movt	r0, #0
   172c2:	f648 2184 	movw	r1, #35460	; 0x8a84
   172c6:	f2c0 0101 	movt	r1, #1
   172ca:	2280      	movs	r2, #128	; 0x80
   172cc:	4b58      	ldr	r3, [pc, #352]	; (17430 <main+0x390>)
   172ce:	f7ed f92b 	bl	4528 <xTaskGenericCreate>

    // task 8 200ms
    xTaskCreate( vSensor, "Sensor 12", SERVANT_STACK_SIZE, (void *)&pvParameters[12], tskIDLE_PRIORITY + 8, &xTaskOfHandle[12]); 
   172d2:	2308      	movs	r3, #8
   172d4:	9300      	str	r3, [sp, #0]
   172d6:	4b57      	ldr	r3, [pc, #348]	; (17434 <main+0x394>)
   172d8:	9301      	str	r3, [sp, #4]
   172da:	2300      	movs	r3, #0
   172dc:	9302      	str	r3, [sp, #8]
   172de:	2300      	movs	r3, #0
   172e0:	9303      	str	r3, [sp, #12]
   172e2:	f243 3019 	movw	r0, #13081	; 0x3319
   172e6:	f2c0 0000 	movt	r0, #0
   172ea:	f648 2190 	movw	r1, #35472	; 0x8a90
   172ee:	f2c0 0101 	movt	r1, #1
   172f2:	2280      	movs	r2, #128	; 0x80
   172f4:	4b50      	ldr	r3, [pc, #320]	; (17438 <main+0x398>)
   172f6:	f7ed f917 	bl	4528 <xTaskGenericCreate>

    // task 13 400ms
    xTaskCreate( vSensor, "Sensor 20", SERVANT_STACK_SIZE, (void *)&pvParameters[20], tskIDLE_PRIORITY + 7, &xTaskOfHandle[20]); 
   172fa:	2307      	movs	r3, #7
   172fc:	9300      	str	r3, [sp, #0]
   172fe:	4b4f      	ldr	r3, [pc, #316]	; (1743c <main+0x39c>)
   17300:	9301      	str	r3, [sp, #4]
   17302:	2300      	movs	r3, #0
   17304:	9302      	str	r3, [sp, #8]
   17306:	2300      	movs	r3, #0
   17308:	9303      	str	r3, [sp, #12]
   1730a:	f243 3019 	movw	r0, #13081	; 0x3319
   1730e:	f2c0 0000 	movt	r0, #0
   17312:	f648 219c 	movw	r1, #35484	; 0x8a9c
   17316:	f2c0 0101 	movt	r1, #1
   1731a:	2280      	movs	r2, #128	; 0x80
   1731c:	4b48      	ldr	r3, [pc, #288]	; (17440 <main+0x3a0>)
   1731e:	f7ed f903 	bl	4528 <xTaskGenericCreate>

    // task 9 1000ms
    xTaskCreate( vSensor, "Sensor 13", SERVANT_STACK_SIZE, (void *)&pvParameters[13], tskIDLE_PRIORITY + 6, &xTaskOfHandle[13]); 
   17322:	2306      	movs	r3, #6
   17324:	9300      	str	r3, [sp, #0]
   17326:	4b47      	ldr	r3, [pc, #284]	; (17444 <main+0x3a4>)
   17328:	9301      	str	r3, [sp, #4]
   1732a:	2300      	movs	r3, #0
   1732c:	9302      	str	r3, [sp, #8]
   1732e:	2300      	movs	r3, #0
   17330:	9303      	str	r3, [sp, #12]
   17332:	f243 3019 	movw	r0, #13081	; 0x3319
   17336:	f2c0 0000 	movt	r0, #0
   1733a:	f648 21a8 	movw	r1, #35496	; 0x8aa8
   1733e:	f2c0 0101 	movt	r1, #1
   17342:	2280      	movs	r2, #128	; 0x80
   17344:	4b40      	ldr	r3, [pc, #256]	; (17448 <main+0x3a8>)
   17346:	f7ed f8ef 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 14", SERVANT_STACK_SIZE, (void *)&pvParameters[14], tskIDLE_PRIORITY + 6,&xTaskOfHandle[14]);
   1734a:	2306      	movs	r3, #6
   1734c:	9300      	str	r3, [sp, #0]
   1734e:	4b3f      	ldr	r3, [pc, #252]	; (1744c <main+0x3ac>)
   17350:	9301      	str	r3, [sp, #4]
   17352:	2300      	movs	r3, #0
   17354:	9302      	str	r3, [sp, #8]
   17356:	2300      	movs	r3, #0
   17358:	9303      	str	r3, [sp, #12]
   1735a:	f243 502d 	movw	r0, #13613	; 0x352d
   1735e:	f2c0 0000 	movt	r0, #0
   17362:	f648 21b4 	movw	r1, #35508	; 0x8ab4
   17366:	f2c0 0101 	movt	r1, #1
   1736a:	2280      	movs	r2, #128	; 0x80
   1736c:	4b38      	ldr	r3, [pc, #224]	; (17450 <main+0x3b0>)
   1736e:	f7ed f8db 	bl	4528 <xTaskGenericCreate>

    // task 10 1000ms
    xTaskCreate( vSensor, "Sensor 15", SERVANT_STACK_SIZE, (void *)&pvParameters[15], tskIDLE_PRIORITY + 5, &xTaskOfHandle[15]); 
   17372:	2305      	movs	r3, #5
   17374:	9300      	str	r3, [sp, #0]
   17376:	4b37      	ldr	r3, [pc, #220]	; (17454 <main+0x3b4>)
   17378:	9301      	str	r3, [sp, #4]
   1737a:	2300      	movs	r3, #0
   1737c:	9302      	str	r3, [sp, #8]
   1737e:	2300      	movs	r3, #0
   17380:	9303      	str	r3, [sp, #12]
   17382:	f243 3019 	movw	r0, #13081	; 0x3319
   17386:	f2c0 0000 	movt	r0, #0
   1738a:	f648 21c0 	movw	r1, #35520	; 0x8ac0
   1738e:	f2c0 0101 	movt	r1, #1
   17392:	2280      	movs	r2, #128	; 0x80
   17394:	4b30      	ldr	r3, [pc, #192]	; (17458 <main+0x3b8>)
   17396:	f7ed f8c7 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 16", SERVANT_STACK_SIZE, (void *)&pvParameters[16], tskIDLE_PRIORITY + 5,&xTaskOfHandle[16]);
   1739a:	2305      	movs	r3, #5
   1739c:	9300      	str	r3, [sp, #0]
   1739e:	4b2f      	ldr	r3, [pc, #188]	; (1745c <main+0x3bc>)
   173a0:	9301      	str	r3, [sp, #4]
   173a2:	2300      	movs	r3, #0
   173a4:	9302      	str	r3, [sp, #8]
   173a6:	2300      	movs	r3, #0
   173a8:	9303      	str	r3, [sp, #12]
   173aa:	f243 502d 	movw	r0, #13613	; 0x352d
   173ae:	f2c0 0000 	movt	r0, #0
   173b2:	f648 21cc 	movw	r1, #35532	; 0x8acc
   173b6:	f2c0 0101 	movt	r1, #1
   173ba:	2280      	movs	r2, #128	; 0x80
   173bc:	4b28      	ldr	r3, [pc, #160]	; (17460 <main+0x3c0>)
   173be:	f7ed f8b3 	bl	4528 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 17", SERVANT_STACK_SIZE, (void *)&pvParameters[17], tskIDLE_PRIORITY + 5,&xTaskOfHandle[17]);
   173c2:	2305      	movs	r3, #5
   173c4:	9300      	str	r3, [sp, #0]
   173c6:	4b27      	ldr	r3, [pc, #156]	; (17464 <main+0x3c4>)
   173c8:	9301      	str	r3, [sp, #4]
   173ca:	2300      	movs	r3, #0
   173cc:	9302      	str	r3, [sp, #8]
   173ce:	2300      	movs	r3, #0
   173d0:	9303      	str	r3, [sp, #12]
   173d2:	e049      	b.n	17468 <main+0x3c8>
   173d4:	20000844 	.word	0x20000844
   173d8:	2000076c 	.word	0x2000076c
   173dc:	200007f4 	.word	0x200007f4
   173e0:	200003fc 	.word	0x200003fc
   173e4:	200007f8 	.word	0x200007f8
   173e8:	20000428 	.word	0x20000428
   173ec:	200007fc 	.word	0x200007fc
   173f0:	20000454 	.word	0x20000454
   173f4:	2000080c 	.word	0x2000080c
   173f8:	20000504 	.word	0x20000504
   173fc:	20000810 	.word	0x20000810
   17400:	20000530 	.word	0x20000530
   17404:	20000800 	.word	0x20000800
   17408:	20000480 	.word	0x20000480
   1740c:	20000804 	.word	0x20000804
   17410:	200004ac 	.word	0x200004ac
   17414:	20000808 	.word	0x20000808
   17418:	200004d8 	.word	0x200004d8
   1741c:	20000814 	.word	0x20000814
   17420:	2000055c 	.word	0x2000055c
   17424:	20000818 	.word	0x20000818
   17428:	20000588 	.word	0x20000588
   1742c:	2000081c 	.word	0x2000081c
   17430:	200005b4 	.word	0x200005b4
   17434:	20000820 	.word	0x20000820
   17438:	200005e0 	.word	0x200005e0
   1743c:	20000840 	.word	0x20000840
   17440:	20000740 	.word	0x20000740
   17444:	20000824 	.word	0x20000824
   17448:	2000060c 	.word	0x2000060c
   1744c:	20000828 	.word	0x20000828
   17450:	20000638 	.word	0x20000638
   17454:	2000082c 	.word	0x2000082c
   17458:	20000664 	.word	0x20000664
   1745c:	20000830 	.word	0x20000830
   17460:	20000690 	.word	0x20000690
   17464:	20000834 	.word	0x20000834
   17468:	f243 502d 	movw	r0, #13613	; 0x352d
   1746c:	f2c0 0000 	movt	r0, #0
   17470:	f648 21d8 	movw	r1, #35544	; 0x8ad8
   17474:	f2c0 0101 	movt	r1, #1
   17478:	2280      	movs	r2, #128	; 0x80
   1747a:	4b18      	ldr	r3, [pc, #96]	; (174dc <main+0x43c>)
   1747c:	f7ed f854 	bl	4528 <xTaskGenericCreate>

    // task 11 1000ms
    xTaskCreate( vSensor, "Sensor 18", SERVANT_STACK_SIZE, (void *)&pvParameters[18], tskIDLE_PRIORITY + 4, &xTaskOfHandle[18]); 
   17480:	2304      	movs	r3, #4
   17482:	9300      	str	r3, [sp, #0]
   17484:	4b16      	ldr	r3, [pc, #88]	; (174e0 <main+0x440>)
   17486:	9301      	str	r3, [sp, #4]
   17488:	2300      	movs	r3, #0
   1748a:	9302      	str	r3, [sp, #8]
   1748c:	2300      	movs	r3, #0
   1748e:	9303      	str	r3, [sp, #12]
   17490:	f243 3019 	movw	r0, #13081	; 0x3319
   17494:	f2c0 0000 	movt	r0, #0
   17498:	f648 21e4 	movw	r1, #35556	; 0x8ae4
   1749c:	f2c0 0101 	movt	r1, #1
   174a0:	2280      	movs	r2, #128	; 0x80
   174a2:	4b10      	ldr	r3, [pc, #64]	; (174e4 <main+0x444>)
   174a4:	f7ed f840 	bl	4528 <xTaskGenericCreate>

    // task 12 1000ms
    xTaskCreate( vSensor, "Sensor 19", SERVANT_STACK_SIZE, (void *)&pvParameters[19], tskIDLE_PRIORITY + 3, &xTaskOfHandle[19]); 
   174a8:	2303      	movs	r3, #3
   174aa:	9300      	str	r3, [sp, #0]
   174ac:	4b0e      	ldr	r3, [pc, #56]	; (174e8 <main+0x448>)
   174ae:	9301      	str	r3, [sp, #4]
   174b0:	2300      	movs	r3, #0
   174b2:	9302      	str	r3, [sp, #8]
   174b4:	2300      	movs	r3, #0
   174b6:	9303      	str	r3, [sp, #12]
   174b8:	f243 3019 	movw	r0, #13081	; 0x3319
   174bc:	f2c0 0000 	movt	r0, #0
   174c0:	f648 21f0 	movw	r1, #35568	; 0x8af0
   174c4:	f2c0 0101 	movt	r1, #1
   174c8:	2280      	movs	r2, #128	; 0x80
   174ca:	4b08      	ldr	r3, [pc, #32]	; (174ec <main+0x44c>)
   174cc:	f7ed f82c 	bl	4528 <xTaskGenericCreate>


    /* Start running the task. */
    vTaskStartScheduler();
   174d0:	f7ed fba8 	bl	4c24 <vTaskStartScheduler>

    return 0;
   174d4:	2300      	movs	r3, #0
}
   174d6:	4618      	mov	r0, r3
   174d8:	46bd      	mov	sp, r7
   174da:	bd80      	pop	{r7, pc}
   174dc:	200006bc 	.word	0x200006bc
   174e0:	20000838 	.word	0x20000838
   174e4:	200006e8 	.word	0x200006e8
   174e8:	2000083c 	.word	0x2000083c
   174ec:	20000714 	.word	0x20000714

000174f0 <myTraceCreate>:

void myTraceCreate      (){
   174f0:	b480      	push	{r7}
   174f2:	af00      	add	r7, sp, #0
}
   174f4:	46bd      	mov	sp, r7
   174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   174fa:	4770      	bx	lr

000174fc <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   174fc:	b480      	push	{r7}
   174fe:	af00      	add	r7, sp, #0
}
   17500:	46bd      	mov	sp, r7
   17502:	f85d 7b04 	ldr.w	r7, [sp], #4
   17506:	4770      	bx	lr

00017508 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17508:	b480      	push	{r7}
   1750a:	af00      	add	r7, sp, #0
}
   1750c:	46bd      	mov	sp, r7
   1750e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17512:	4770      	bx	lr

00017514 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17514:	b580      	push	{r7, lr}
   17516:	b082      	sub	sp, #8
   17518:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   1751a:	f7ed fc6d 	bl	4df8 <xTaskGetTickCount>
   1751e:	6078      	str	r0, [r7, #4]
    if( IS_INIT == 1 && xCurrentTime == 100 )
   17520:	f240 331c 	movw	r3, #796	; 0x31c
   17524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17528:	681b      	ldr	r3, [r3, #0]
   1752a:	2b01      	cmp	r3, #1
   1752c:	f040 8099 	bne.w	17662 <vApplicationTickHook+0x14e>
   17530:	687b      	ldr	r3, [r7, #4]
   17532:	2b64      	cmp	r3, #100	; 0x64
   17534:	f040 8095 	bne.w	17662 <vApplicationTickHook+0x14e>
    {
        xSemaphoreGive( xBinarySemaphore[0] );
   17538:	f240 7398 	movw	r3, #1944	; 0x798
   1753c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17540:	681b      	ldr	r3, [r3, #0]
   17542:	4618      	mov	r0, r3
   17544:	2100      	movs	r1, #0
   17546:	2200      	movs	r2, #0
   17548:	2300      	movs	r3, #0
   1754a:	f7ec fcdb 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[2] );
   1754e:	f240 7398 	movw	r3, #1944	; 0x798
   17552:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17556:	689b      	ldr	r3, [r3, #8]
   17558:	4618      	mov	r0, r3
   1755a:	2100      	movs	r1, #0
   1755c:	2200      	movs	r2, #0
   1755e:	2300      	movs	r3, #0
   17560:	f7ec fcd0 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[7] );
   17564:	f240 7398 	movw	r3, #1944	; 0x798
   17568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1756c:	69db      	ldr	r3, [r3, #28]
   1756e:	4618      	mov	r0, r3
   17570:	2100      	movs	r1, #0
   17572:	2200      	movs	r2, #0
   17574:	2300      	movs	r3, #0
   17576:	f7ec fcc5 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[4] );
   1757a:	f240 7398 	movw	r3, #1944	; 0x798
   1757e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17582:	691b      	ldr	r3, [r3, #16]
   17584:	4618      	mov	r0, r3
   17586:	2100      	movs	r1, #0
   17588:	2200      	movs	r2, #0
   1758a:	2300      	movs	r3, #0
   1758c:	f7ec fcba 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[5] );
   17590:	f240 7398 	movw	r3, #1944	; 0x798
   17594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17598:	695b      	ldr	r3, [r3, #20]
   1759a:	4618      	mov	r0, r3
   1759c:	2100      	movs	r1, #0
   1759e:	2200      	movs	r2, #0
   175a0:	2300      	movs	r3, #0
   175a2:	f7ec fcaf 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[6] );
   175a6:	f240 7398 	movw	r3, #1944	; 0x798
   175aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ae:	699b      	ldr	r3, [r3, #24]
   175b0:	4618      	mov	r0, r3
   175b2:	2100      	movs	r1, #0
   175b4:	2200      	movs	r2, #0
   175b6:	2300      	movs	r3, #0
   175b8:	f7ec fca4 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[9] );
   175bc:	f240 7398 	movw	r3, #1944	; 0x798
   175c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   175c6:	4618      	mov	r0, r3
   175c8:	2100      	movs	r1, #0
   175ca:	2200      	movs	r2, #0
   175cc:	2300      	movs	r3, #0
   175ce:	f7ec fc99 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[12] );
   175d2:	f240 7398 	movw	r3, #1944	; 0x798
   175d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   175dc:	4618      	mov	r0, r3
   175de:	2100      	movs	r1, #0
   175e0:	2200      	movs	r2, #0
   175e2:	2300      	movs	r3, #0
   175e4:	f7ec fc8e 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[13] );
   175e8:	f240 7398 	movw	r3, #1944	; 0x798
   175ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175f2:	4618      	mov	r0, r3
   175f4:	2100      	movs	r1, #0
   175f6:	2200      	movs	r2, #0
   175f8:	2300      	movs	r3, #0
   175fa:	f7ec fc83 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[15] );
   175fe:	f240 7398 	movw	r3, #1944	; 0x798
   17602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17608:	4618      	mov	r0, r3
   1760a:	2100      	movs	r1, #0
   1760c:	2200      	movs	r2, #0
   1760e:	2300      	movs	r3, #0
   17610:	f7ec fc78 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[18] );
   17614:	f240 7398 	movw	r3, #1944	; 0x798
   17618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1761c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1761e:	4618      	mov	r0, r3
   17620:	2100      	movs	r1, #0
   17622:	2200      	movs	r2, #0
   17624:	2300      	movs	r3, #0
   17626:	f7ec fc6d 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[19] );
   1762a:	f240 7398 	movw	r3, #1944	; 0x798
   1762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   17634:	4618      	mov	r0, r3
   17636:	2100      	movs	r1, #0
   17638:	2200      	movs	r2, #0
   1763a:	2300      	movs	r3, #0
   1763c:	f7ec fc62 	bl	3f04 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[20] );
   17640:	f240 7398 	movw	r3, #1944	; 0x798
   17644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1764a:	4618      	mov	r0, r3
   1764c:	2100      	movs	r1, #0
   1764e:	2200      	movs	r2, #0
   17650:	2300      	movs	r3, #0
   17652:	f7ec fc57 	bl	3f04 <xQueueGenericSend>
        IS_INIT = 0;
   17656:	f240 331c 	movw	r3, #796	; 0x31c
   1765a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1765e:	2200      	movs	r2, #0
   17660:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17662:	f240 032c 	movw	r3, #44	; 0x2c
   17666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	005a      	lsls	r2, r3, #1
   1766e:	687b      	ldr	r3, [r7, #4]
   17670:	429a      	cmp	r2, r3
   17672:	d83e      	bhi.n	176f2 <vApplicationTickHook+0x1de>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17674:	f240 032c 	movw	r3, #44	; 0x2c
   17678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1767c:	681a      	ldr	r2, [r3, #0]
   1767e:	687b      	ldr	r3, [r7, #4]
   17680:	fbb3 f1f2 	udiv	r1, r3, r2
   17684:	fb02 f201 	mul.w	r2, r2, r1
   17688:	1a9b      	subs	r3, r3, r2
   1768a:	2b00      	cmp	r3, #0
   1768c:	d026      	beq.n	176dc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   1768e:	f240 032c 	movw	r3, #44	; 0x2c
   17692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17696:	689a      	ldr	r2, [r3, #8]
   17698:	687b      	ldr	r3, [r7, #4]
   1769a:	fbb3 f1f2 	udiv	r1, r3, r2
   1769e:	fb02 f201 	mul.w	r2, r2, r1
   176a2:	1a9b      	subs	r3, r3, r2
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   176a4:	2b00      	cmp	r3, #0
   176a6:	d019      	beq.n	176dc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   176a8:	f240 032c 	movw	r3, #44	; 0x2c
   176ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   176b2:	687b      	ldr	r3, [r7, #4]
   176b4:	fbb3 f1f2 	udiv	r1, r3, r2
   176b8:	fb02 f201 	mul.w	r2, r2, r1
   176bc:	1a9b      	subs	r3, r3, r2
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   176be:	2b00      	cmp	r3, #0
   176c0:	d00c      	beq.n	176dc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[12] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0)
   176c2:	f240 032c 	movw	r3, #44	; 0x2c
   176c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ca:	6a1a      	ldr	r2, [r3, #32]
   176cc:	687b      	ldr	r3, [r7, #4]
   176ce:	fbb3 f1f2 	udiv	r1, r3, r2
   176d2:	fb02 f201 	mul.w	r2, r2, r1
   176d6:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   176d8:	2b00      	cmp	r3, #0
   176da:	d10a      	bne.n	176f2 <vApplicationTickHook+0x1de>
            xCurrentTime % xPeriodOfTask[8] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[21] ); 
   176dc:	f240 7398 	movw	r3, #1944	; 0x798
   176e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   176e6:	4618      	mov	r0, r3
   176e8:	2100      	movs	r1, #0
   176ea:	2200      	movs	r2, #0
   176ec:	2300      	movs	r3, #0
   176ee:	f7ec fc09 	bl	3f04 <xQueueGenericSend>
        }
    }
}
   176f2:	3708      	adds	r7, #8
   176f4:	46bd      	mov	sp, r7
   176f6:	bd80      	pop	{r7, pc}

000176f8 <__aeabi_drsub>:
   176f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   176fc:	e002      	b.n	17704 <__adddf3>
   176fe:	bf00      	nop

00017700 <__aeabi_dsub>:
   17700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017704 <__adddf3>:
   17704:	b530      	push	{r4, r5, lr}
   17706:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1770a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1770e:	ea94 0f05 	teq	r4, r5
   17712:	bf08      	it	eq
   17714:	ea90 0f02 	teqeq	r0, r2
   17718:	bf1f      	itttt	ne
   1771a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1771e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17722:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17726:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1772a:	f000 80e2 	beq.w	178f2 <__adddf3+0x1ee>
   1772e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17732:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17736:	bfb8      	it	lt
   17738:	426d      	neglt	r5, r5
   1773a:	dd0c      	ble.n	17756 <__adddf3+0x52>
   1773c:	442c      	add	r4, r5
   1773e:	ea80 0202 	eor.w	r2, r0, r2
   17742:	ea81 0303 	eor.w	r3, r1, r3
   17746:	ea82 0000 	eor.w	r0, r2, r0
   1774a:	ea83 0101 	eor.w	r1, r3, r1
   1774e:	ea80 0202 	eor.w	r2, r0, r2
   17752:	ea81 0303 	eor.w	r3, r1, r3
   17756:	2d36      	cmp	r5, #54	; 0x36
   17758:	bf88      	it	hi
   1775a:	bd30      	pophi	{r4, r5, pc}
   1775c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17760:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17764:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17768:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1776c:	d002      	beq.n	17774 <__adddf3+0x70>
   1776e:	4240      	negs	r0, r0
   17770:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17774:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17778:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1777c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17780:	d002      	beq.n	17788 <__adddf3+0x84>
   17782:	4252      	negs	r2, r2
   17784:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17788:	ea94 0f05 	teq	r4, r5
   1778c:	f000 80a7 	beq.w	178de <__adddf3+0x1da>
   17790:	f1a4 0401 	sub.w	r4, r4, #1
   17794:	f1d5 0e20 	rsbs	lr, r5, #32
   17798:	db0d      	blt.n	177b6 <__adddf3+0xb2>
   1779a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1779e:	fa22 f205 	lsr.w	r2, r2, r5
   177a2:	1880      	adds	r0, r0, r2
   177a4:	f141 0100 	adc.w	r1, r1, #0
   177a8:	fa03 f20e 	lsl.w	r2, r3, lr
   177ac:	1880      	adds	r0, r0, r2
   177ae:	fa43 f305 	asr.w	r3, r3, r5
   177b2:	4159      	adcs	r1, r3
   177b4:	e00e      	b.n	177d4 <__adddf3+0xd0>
   177b6:	f1a5 0520 	sub.w	r5, r5, #32
   177ba:	f10e 0e20 	add.w	lr, lr, #32
   177be:	2a01      	cmp	r2, #1
   177c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   177c4:	bf28      	it	cs
   177c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   177ca:	fa43 f305 	asr.w	r3, r3, r5
   177ce:	18c0      	adds	r0, r0, r3
   177d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   177d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   177d8:	d507      	bpl.n	177ea <__adddf3+0xe6>
   177da:	f04f 0e00 	mov.w	lr, #0
   177de:	f1dc 0c00 	rsbs	ip, ip, #0
   177e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   177e6:	eb6e 0101 	sbc.w	r1, lr, r1
   177ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   177ee:	d31b      	bcc.n	17828 <__adddf3+0x124>
   177f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   177f4:	d30c      	bcc.n	17810 <__adddf3+0x10c>
   177f6:	0849      	lsrs	r1, r1, #1
   177f8:	ea5f 0030 	movs.w	r0, r0, rrx
   177fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17800:	f104 0401 	add.w	r4, r4, #1
   17804:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17808:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1780c:	f080 809a 	bcs.w	17944 <__adddf3+0x240>
   17810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17814:	bf08      	it	eq
   17816:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1781a:	f150 0000 	adcs.w	r0, r0, #0
   1781e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17822:	ea41 0105 	orr.w	r1, r1, r5
   17826:	bd30      	pop	{r4, r5, pc}
   17828:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1782c:	4140      	adcs	r0, r0
   1782e:	eb41 0101 	adc.w	r1, r1, r1
   17832:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17836:	f1a4 0401 	sub.w	r4, r4, #1
   1783a:	d1e9      	bne.n	17810 <__adddf3+0x10c>
   1783c:	f091 0f00 	teq	r1, #0
   17840:	bf04      	itt	eq
   17842:	4601      	moveq	r1, r0
   17844:	2000      	moveq	r0, #0
   17846:	fab1 f381 	clz	r3, r1
   1784a:	bf08      	it	eq
   1784c:	3320      	addeq	r3, #32
   1784e:	f1a3 030b 	sub.w	r3, r3, #11
   17852:	f1b3 0220 	subs.w	r2, r3, #32
   17856:	da0c      	bge.n	17872 <__adddf3+0x16e>
   17858:	320c      	adds	r2, #12
   1785a:	dd08      	ble.n	1786e <__adddf3+0x16a>
   1785c:	f102 0c14 	add.w	ip, r2, #20
   17860:	f1c2 020c 	rsb	r2, r2, #12
   17864:	fa01 f00c 	lsl.w	r0, r1, ip
   17868:	fa21 f102 	lsr.w	r1, r1, r2
   1786c:	e00c      	b.n	17888 <__adddf3+0x184>
   1786e:	f102 0214 	add.w	r2, r2, #20
   17872:	bfd8      	it	le
   17874:	f1c2 0c20 	rsble	ip, r2, #32
   17878:	fa01 f102 	lsl.w	r1, r1, r2
   1787c:	fa20 fc0c 	lsr.w	ip, r0, ip
   17880:	bfdc      	itt	le
   17882:	ea41 010c 	orrle.w	r1, r1, ip
   17886:	4090      	lslle	r0, r2
   17888:	1ae4      	subs	r4, r4, r3
   1788a:	bfa2      	ittt	ge
   1788c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17890:	4329      	orrge	r1, r5
   17892:	bd30      	popge	{r4, r5, pc}
   17894:	ea6f 0404 	mvn.w	r4, r4
   17898:	3c1f      	subs	r4, #31
   1789a:	da1c      	bge.n	178d6 <__adddf3+0x1d2>
   1789c:	340c      	adds	r4, #12
   1789e:	dc0e      	bgt.n	178be <__adddf3+0x1ba>
   178a0:	f104 0414 	add.w	r4, r4, #20
   178a4:	f1c4 0220 	rsb	r2, r4, #32
   178a8:	fa20 f004 	lsr.w	r0, r0, r4
   178ac:	fa01 f302 	lsl.w	r3, r1, r2
   178b0:	ea40 0003 	orr.w	r0, r0, r3
   178b4:	fa21 f304 	lsr.w	r3, r1, r4
   178b8:	ea45 0103 	orr.w	r1, r5, r3
   178bc:	bd30      	pop	{r4, r5, pc}
   178be:	f1c4 040c 	rsb	r4, r4, #12
   178c2:	f1c4 0220 	rsb	r2, r4, #32
   178c6:	fa20 f002 	lsr.w	r0, r0, r2
   178ca:	fa01 f304 	lsl.w	r3, r1, r4
   178ce:	ea40 0003 	orr.w	r0, r0, r3
   178d2:	4629      	mov	r1, r5
   178d4:	bd30      	pop	{r4, r5, pc}
   178d6:	fa21 f004 	lsr.w	r0, r1, r4
   178da:	4629      	mov	r1, r5
   178dc:	bd30      	pop	{r4, r5, pc}
   178de:	f094 0f00 	teq	r4, #0
   178e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   178e6:	bf06      	itte	eq
   178e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   178ec:	3401      	addeq	r4, #1
   178ee:	3d01      	subne	r5, #1
   178f0:	e74e      	b.n	17790 <__adddf3+0x8c>
   178f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   178f6:	bf18      	it	ne
   178f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178fc:	d029      	beq.n	17952 <__adddf3+0x24e>
   178fe:	ea94 0f05 	teq	r4, r5
   17902:	bf08      	it	eq
   17904:	ea90 0f02 	teqeq	r0, r2
   17908:	d005      	beq.n	17916 <__adddf3+0x212>
   1790a:	ea54 0c00 	orrs.w	ip, r4, r0
   1790e:	bf04      	itt	eq
   17910:	4619      	moveq	r1, r3
   17912:	4610      	moveq	r0, r2
   17914:	bd30      	pop	{r4, r5, pc}
   17916:	ea91 0f03 	teq	r1, r3
   1791a:	bf1e      	ittt	ne
   1791c:	2100      	movne	r1, #0
   1791e:	2000      	movne	r0, #0
   17920:	bd30      	popne	{r4, r5, pc}
   17922:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17926:	d105      	bne.n	17934 <__adddf3+0x230>
   17928:	0040      	lsls	r0, r0, #1
   1792a:	4149      	adcs	r1, r1
   1792c:	bf28      	it	cs
   1792e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17932:	bd30      	pop	{r4, r5, pc}
   17934:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17938:	bf3c      	itt	cc
   1793a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1793e:	bd30      	popcc	{r4, r5, pc}
   17940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17944:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1794c:	f04f 0000 	mov.w	r0, #0
   17950:	bd30      	pop	{r4, r5, pc}
   17952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17956:	bf1a      	itte	ne
   17958:	4619      	movne	r1, r3
   1795a:	4610      	movne	r0, r2
   1795c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17960:	bf1c      	itt	ne
   17962:	460b      	movne	r3, r1
   17964:	4602      	movne	r2, r0
   17966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1796a:	bf06      	itte	eq
   1796c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17970:	ea91 0f03 	teqeq	r1, r3
   17974:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17978:	bd30      	pop	{r4, r5, pc}
   1797a:	bf00      	nop

0001797c <__aeabi_ui2d>:
   1797c:	f090 0f00 	teq	r0, #0
   17980:	bf04      	itt	eq
   17982:	2100      	moveq	r1, #0
   17984:	4770      	bxeq	lr
   17986:	b530      	push	{r4, r5, lr}
   17988:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1798c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17990:	f04f 0500 	mov.w	r5, #0
   17994:	f04f 0100 	mov.w	r1, #0
   17998:	e750      	b.n	1783c <__adddf3+0x138>
   1799a:	bf00      	nop

0001799c <__aeabi_i2d>:
   1799c:	f090 0f00 	teq	r0, #0
   179a0:	bf04      	itt	eq
   179a2:	2100      	moveq	r1, #0
   179a4:	4770      	bxeq	lr
   179a6:	b530      	push	{r4, r5, lr}
   179a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   179b4:	bf48      	it	mi
   179b6:	4240      	negmi	r0, r0
   179b8:	f04f 0100 	mov.w	r1, #0
   179bc:	e73e      	b.n	1783c <__adddf3+0x138>
   179be:	bf00      	nop

000179c0 <__aeabi_f2d>:
   179c0:	0042      	lsls	r2, r0, #1
   179c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   179c6:	ea4f 0131 	mov.w	r1, r1, rrx
   179ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   179ce:	bf1f      	itttt	ne
   179d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   179d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   179dc:	4770      	bxne	lr
   179de:	f092 0f00 	teq	r2, #0
   179e2:	bf14      	ite	ne
   179e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179e8:	4770      	bxeq	lr
   179ea:	b530      	push	{r4, r5, lr}
   179ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   179f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   179f8:	e720      	b.n	1783c <__adddf3+0x138>
   179fa:	bf00      	nop

000179fc <__aeabi_ul2d>:
   179fc:	ea50 0201 	orrs.w	r2, r0, r1
   17a00:	bf08      	it	eq
   17a02:	4770      	bxeq	lr
   17a04:	b530      	push	{r4, r5, lr}
   17a06:	f04f 0500 	mov.w	r5, #0
   17a0a:	e00a      	b.n	17a22 <__aeabi_l2d+0x16>

00017a0c <__aeabi_l2d>:
   17a0c:	ea50 0201 	orrs.w	r2, r0, r1
   17a10:	bf08      	it	eq
   17a12:	4770      	bxeq	lr
   17a14:	b530      	push	{r4, r5, lr}
   17a16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17a1a:	d502      	bpl.n	17a22 <__aeabi_l2d+0x16>
   17a1c:	4240      	negs	r0, r0
   17a1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17a2e:	f43f aedc 	beq.w	177ea <__adddf3+0xe6>
   17a32:	f04f 0203 	mov.w	r2, #3
   17a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a3a:	bf18      	it	ne
   17a3c:	3203      	addne	r2, #3
   17a3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a42:	bf18      	it	ne
   17a44:	3203      	addne	r2, #3
   17a46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a4a:	f1c2 0320 	rsb	r3, r2, #32
   17a4e:	fa00 fc03 	lsl.w	ip, r0, r3
   17a52:	fa20 f002 	lsr.w	r0, r0, r2
   17a56:	fa01 fe03 	lsl.w	lr, r1, r3
   17a5a:	ea40 000e 	orr.w	r0, r0, lr
   17a5e:	fa21 f102 	lsr.w	r1, r1, r2
   17a62:	4414      	add	r4, r2
   17a64:	e6c1      	b.n	177ea <__adddf3+0xe6>
   17a66:	bf00      	nop

00017a68 <__aeabi_dmul>:
   17a68:	b570      	push	{r4, r5, r6, lr}
   17a6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17a6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17a72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17a76:	bf1d      	ittte	ne
   17a78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17a7c:	ea94 0f0c 	teqne	r4, ip
   17a80:	ea95 0f0c 	teqne	r5, ip
   17a84:	f000 f8de 	bleq	17c44 <__aeabi_dmul+0x1dc>
   17a88:	442c      	add	r4, r5
   17a8a:	ea81 0603 	eor.w	r6, r1, r3
   17a8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17a92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17a96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17a9a:	bf18      	it	ne
   17a9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17aa8:	d038      	beq.n	17b1c <__aeabi_dmul+0xb4>
   17aaa:	fba0 ce02 	umull	ip, lr, r0, r2
   17aae:	f04f 0500 	mov.w	r5, #0
   17ab2:	fbe1 e502 	umlal	lr, r5, r1, r2
   17ab6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17aba:	fbe0 e503 	umlal	lr, r5, r0, r3
   17abe:	f04f 0600 	mov.w	r6, #0
   17ac2:	fbe1 5603 	umlal	r5, r6, r1, r3
   17ac6:	f09c 0f00 	teq	ip, #0
   17aca:	bf18      	it	ne
   17acc:	f04e 0e01 	orrne.w	lr, lr, #1
   17ad0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17ad4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17ad8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17adc:	d204      	bcs.n	17ae8 <__aeabi_dmul+0x80>
   17ade:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17ae2:	416d      	adcs	r5, r5
   17ae4:	eb46 0606 	adc.w	r6, r6, r6
   17ae8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17aec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17af0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17af4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17af8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17afc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17b00:	bf88      	it	hi
   17b02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17b06:	d81e      	bhi.n	17b46 <__aeabi_dmul+0xde>
   17b08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17b0c:	bf08      	it	eq
   17b0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17b12:	f150 0000 	adcs.w	r0, r0, #0
   17b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b1a:	bd70      	pop	{r4, r5, r6, pc}
   17b1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17b20:	ea46 0101 	orr.w	r1, r6, r1
   17b24:	ea40 0002 	orr.w	r0, r0, r2
   17b28:	ea81 0103 	eor.w	r1, r1, r3
   17b2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17b30:	bfc2      	ittt	gt
   17b32:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b3a:	bd70      	popgt	{r4, r5, r6, pc}
   17b3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b40:	f04f 0e00 	mov.w	lr, #0
   17b44:	3c01      	subs	r4, #1
   17b46:	f300 80ab 	bgt.w	17ca0 <__aeabi_dmul+0x238>
   17b4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b4e:	bfde      	ittt	le
   17b50:	2000      	movle	r0, #0
   17b52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17b56:	bd70      	pople	{r4, r5, r6, pc}
   17b58:	f1c4 0400 	rsb	r4, r4, #0
   17b5c:	3c20      	subs	r4, #32
   17b5e:	da35      	bge.n	17bcc <__aeabi_dmul+0x164>
   17b60:	340c      	adds	r4, #12
   17b62:	dc1b      	bgt.n	17b9c <__aeabi_dmul+0x134>
   17b64:	f104 0414 	add.w	r4, r4, #20
   17b68:	f1c4 0520 	rsb	r5, r4, #32
   17b6c:	fa00 f305 	lsl.w	r3, r0, r5
   17b70:	fa20 f004 	lsr.w	r0, r0, r4
   17b74:	fa01 f205 	lsl.w	r2, r1, r5
   17b78:	ea40 0002 	orr.w	r0, r0, r2
   17b7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b88:	fa21 f604 	lsr.w	r6, r1, r4
   17b8c:	eb42 0106 	adc.w	r1, r2, r6
   17b90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b94:	bf08      	it	eq
   17b96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b9a:	bd70      	pop	{r4, r5, r6, pc}
   17b9c:	f1c4 040c 	rsb	r4, r4, #12
   17ba0:	f1c4 0520 	rsb	r5, r4, #32
   17ba4:	fa00 f304 	lsl.w	r3, r0, r4
   17ba8:	fa20 f005 	lsr.w	r0, r0, r5
   17bac:	fa01 f204 	lsl.w	r2, r1, r4
   17bb0:	ea40 0002 	orr.w	r0, r0, r2
   17bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17bbc:	f141 0100 	adc.w	r1, r1, #0
   17bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bc4:	bf08      	it	eq
   17bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bca:	bd70      	pop	{r4, r5, r6, pc}
   17bcc:	f1c4 0520 	rsb	r5, r4, #32
   17bd0:	fa00 f205 	lsl.w	r2, r0, r5
   17bd4:	ea4e 0e02 	orr.w	lr, lr, r2
   17bd8:	fa20 f304 	lsr.w	r3, r0, r4
   17bdc:	fa01 f205 	lsl.w	r2, r1, r5
   17be0:	ea43 0302 	orr.w	r3, r3, r2
   17be4:	fa21 f004 	lsr.w	r0, r1, r4
   17be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bec:	fa21 f204 	lsr.w	r2, r1, r4
   17bf0:	ea20 0002 	bic.w	r0, r0, r2
   17bf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17bf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bfc:	bf08      	it	eq
   17bfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c02:	bd70      	pop	{r4, r5, r6, pc}
   17c04:	f094 0f00 	teq	r4, #0
   17c08:	d10f      	bne.n	17c2a <__aeabi_dmul+0x1c2>
   17c0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17c0e:	0040      	lsls	r0, r0, #1
   17c10:	eb41 0101 	adc.w	r1, r1, r1
   17c14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c18:	bf08      	it	eq
   17c1a:	3c01      	subeq	r4, #1
   17c1c:	d0f7      	beq.n	17c0e <__aeabi_dmul+0x1a6>
   17c1e:	ea41 0106 	orr.w	r1, r1, r6
   17c22:	f095 0f00 	teq	r5, #0
   17c26:	bf18      	it	ne
   17c28:	4770      	bxne	lr
   17c2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17c2e:	0052      	lsls	r2, r2, #1
   17c30:	eb43 0303 	adc.w	r3, r3, r3
   17c34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c38:	bf08      	it	eq
   17c3a:	3d01      	subeq	r5, #1
   17c3c:	d0f7      	beq.n	17c2e <__aeabi_dmul+0x1c6>
   17c3e:	ea43 0306 	orr.w	r3, r3, r6
   17c42:	4770      	bx	lr
   17c44:	ea94 0f0c 	teq	r4, ip
   17c48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c4c:	bf18      	it	ne
   17c4e:	ea95 0f0c 	teqne	r5, ip
   17c52:	d00c      	beq.n	17c6e <__aeabi_dmul+0x206>
   17c54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c58:	bf18      	it	ne
   17c5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c5e:	d1d1      	bne.n	17c04 <__aeabi_dmul+0x19c>
   17c60:	ea81 0103 	eor.w	r1, r1, r3
   17c64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c68:	f04f 0000 	mov.w	r0, #0
   17c6c:	bd70      	pop	{r4, r5, r6, pc}
   17c6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c72:	bf06      	itte	eq
   17c74:	4610      	moveq	r0, r2
   17c76:	4619      	moveq	r1, r3
   17c78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c7c:	d019      	beq.n	17cb2 <__aeabi_dmul+0x24a>
   17c7e:	ea94 0f0c 	teq	r4, ip
   17c82:	d102      	bne.n	17c8a <__aeabi_dmul+0x222>
   17c84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17c88:	d113      	bne.n	17cb2 <__aeabi_dmul+0x24a>
   17c8a:	ea95 0f0c 	teq	r5, ip
   17c8e:	d105      	bne.n	17c9c <__aeabi_dmul+0x234>
   17c90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17c94:	bf1c      	itt	ne
   17c96:	4610      	movne	r0, r2
   17c98:	4619      	movne	r1, r3
   17c9a:	d10a      	bne.n	17cb2 <__aeabi_dmul+0x24a>
   17c9c:	ea81 0103 	eor.w	r1, r1, r3
   17ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ca4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ca8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17cac:	f04f 0000 	mov.w	r0, #0
   17cb0:	bd70      	pop	{r4, r5, r6, pc}
   17cb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17cb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17cba:	bd70      	pop	{r4, r5, r6, pc}

00017cbc <__aeabi_ddiv>:
   17cbc:	b570      	push	{r4, r5, r6, lr}
   17cbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17cc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17cc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17cca:	bf1d      	ittte	ne
   17ccc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17cd0:	ea94 0f0c 	teqne	r4, ip
   17cd4:	ea95 0f0c 	teqne	r5, ip
   17cd8:	f000 f8a7 	bleq	17e2a <__aeabi_ddiv+0x16e>
   17cdc:	eba4 0405 	sub.w	r4, r4, r5
   17ce0:	ea81 0e03 	eor.w	lr, r1, r3
   17ce4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17ce8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17cec:	f000 8088 	beq.w	17e00 <__aeabi_ddiv+0x144>
   17cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17cf4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17cf8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17cfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17d00:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17d04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17d08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17d0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17d10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17d14:	429d      	cmp	r5, r3
   17d16:	bf08      	it	eq
   17d18:	4296      	cmpeq	r6, r2
   17d1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17d1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17d22:	d202      	bcs.n	17d2a <__aeabi_ddiv+0x6e>
   17d24:	085b      	lsrs	r3, r3, #1
   17d26:	ea4f 0232 	mov.w	r2, r2, rrx
   17d2a:	1ab6      	subs	r6, r6, r2
   17d2c:	eb65 0503 	sbc.w	r5, r5, r3
   17d30:	085b      	lsrs	r3, r3, #1
   17d32:	ea4f 0232 	mov.w	r2, r2, rrx
   17d36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d3e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d42:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d46:	bf22      	ittt	cs
   17d48:	1ab6      	subcs	r6, r6, r2
   17d4a:	4675      	movcs	r5, lr
   17d4c:	ea40 000c 	orrcs.w	r0, r0, ip
   17d50:	085b      	lsrs	r3, r3, #1
   17d52:	ea4f 0232 	mov.w	r2, r2, rrx
   17d56:	ebb6 0e02 	subs.w	lr, r6, r2
   17d5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d5e:	bf22      	ittt	cs
   17d60:	1ab6      	subcs	r6, r6, r2
   17d62:	4675      	movcs	r5, lr
   17d64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17d68:	085b      	lsrs	r3, r3, #1
   17d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   17d6e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d72:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d76:	bf22      	ittt	cs
   17d78:	1ab6      	subcs	r6, r6, r2
   17d7a:	4675      	movcs	r5, lr
   17d7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17d80:	085b      	lsrs	r3, r3, #1
   17d82:	ea4f 0232 	mov.w	r2, r2, rrx
   17d86:	ebb6 0e02 	subs.w	lr, r6, r2
   17d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d8e:	bf22      	ittt	cs
   17d90:	1ab6      	subcs	r6, r6, r2
   17d92:	4675      	movcs	r5, lr
   17d94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17d98:	ea55 0e06 	orrs.w	lr, r5, r6
   17d9c:	d018      	beq.n	17dd0 <__aeabi_ddiv+0x114>
   17d9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17da2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17da6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17daa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17dae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17db2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17db6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17dba:	d1c0      	bne.n	17d3e <__aeabi_ddiv+0x82>
   17dbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17dc0:	d10b      	bne.n	17dda <__aeabi_ddiv+0x11e>
   17dc2:	ea41 0100 	orr.w	r1, r1, r0
   17dc6:	f04f 0000 	mov.w	r0, #0
   17dca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17dce:	e7b6      	b.n	17d3e <__aeabi_ddiv+0x82>
   17dd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17dd4:	bf04      	itt	eq
   17dd6:	4301      	orreq	r1, r0
   17dd8:	2000      	moveq	r0, #0
   17dda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17dde:	bf88      	it	hi
   17de0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17de4:	f63f aeaf 	bhi.w	17b46 <__aeabi_dmul+0xde>
   17de8:	ebb5 0c03 	subs.w	ip, r5, r3
   17dec:	bf04      	itt	eq
   17dee:	ebb6 0c02 	subseq.w	ip, r6, r2
   17df2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17df6:	f150 0000 	adcs.w	r0, r0, #0
   17dfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17dfe:	bd70      	pop	{r4, r5, r6, pc}
   17e00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17e04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17e08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17e0c:	bfc2      	ittt	gt
   17e0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e16:	bd70      	popgt	{r4, r5, r6, pc}
   17e18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e1c:	f04f 0e00 	mov.w	lr, #0
   17e20:	3c01      	subs	r4, #1
   17e22:	e690      	b.n	17b46 <__aeabi_dmul+0xde>
   17e24:	ea45 0e06 	orr.w	lr, r5, r6
   17e28:	e68d      	b.n	17b46 <__aeabi_dmul+0xde>
   17e2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e2e:	ea94 0f0c 	teq	r4, ip
   17e32:	bf08      	it	eq
   17e34:	ea95 0f0c 	teqeq	r5, ip
   17e38:	f43f af3b 	beq.w	17cb2 <__aeabi_dmul+0x24a>
   17e3c:	ea94 0f0c 	teq	r4, ip
   17e40:	d10a      	bne.n	17e58 <__aeabi_ddiv+0x19c>
   17e42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e46:	f47f af34 	bne.w	17cb2 <__aeabi_dmul+0x24a>
   17e4a:	ea95 0f0c 	teq	r5, ip
   17e4e:	f47f af25 	bne.w	17c9c <__aeabi_dmul+0x234>
   17e52:	4610      	mov	r0, r2
   17e54:	4619      	mov	r1, r3
   17e56:	e72c      	b.n	17cb2 <__aeabi_dmul+0x24a>
   17e58:	ea95 0f0c 	teq	r5, ip
   17e5c:	d106      	bne.n	17e6c <__aeabi_ddiv+0x1b0>
   17e5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e62:	f43f aefd 	beq.w	17c60 <__aeabi_dmul+0x1f8>
   17e66:	4610      	mov	r0, r2
   17e68:	4619      	mov	r1, r3
   17e6a:	e722      	b.n	17cb2 <__aeabi_dmul+0x24a>
   17e6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e70:	bf18      	it	ne
   17e72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e76:	f47f aec5 	bne.w	17c04 <__aeabi_dmul+0x19c>
   17e7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17e7e:	f47f af0d 	bne.w	17c9c <__aeabi_dmul+0x234>
   17e82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17e86:	f47f aeeb 	bne.w	17c60 <__aeabi_dmul+0x1f8>
   17e8a:	e712      	b.n	17cb2 <__aeabi_dmul+0x24a>

00017e8c <__gedf2>:
   17e8c:	f04f 3cff 	mov.w	ip, #4294967295
   17e90:	e006      	b.n	17ea0 <__cmpdf2+0x4>
   17e92:	bf00      	nop

00017e94 <__ledf2>:
   17e94:	f04f 0c01 	mov.w	ip, #1
   17e98:	e002      	b.n	17ea0 <__cmpdf2+0x4>
   17e9a:	bf00      	nop

00017e9c <__cmpdf2>:
   17e9c:	f04f 0c01 	mov.w	ip, #1
   17ea0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17ea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17eb0:	bf18      	it	ne
   17eb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17eb6:	d01b      	beq.n	17ef0 <__cmpdf2+0x54>
   17eb8:	b001      	add	sp, #4
   17eba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17ebe:	bf0c      	ite	eq
   17ec0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17ec4:	ea91 0f03 	teqne	r1, r3
   17ec8:	bf02      	ittt	eq
   17eca:	ea90 0f02 	teqeq	r0, r2
   17ece:	2000      	moveq	r0, #0
   17ed0:	4770      	bxeq	lr
   17ed2:	f110 0f00 	cmn.w	r0, #0
   17ed6:	ea91 0f03 	teq	r1, r3
   17eda:	bf58      	it	pl
   17edc:	4299      	cmppl	r1, r3
   17ede:	bf08      	it	eq
   17ee0:	4290      	cmpeq	r0, r2
   17ee2:	bf2c      	ite	cs
   17ee4:	17d8      	asrcs	r0, r3, #31
   17ee6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17eea:	f040 0001 	orr.w	r0, r0, #1
   17eee:	4770      	bx	lr
   17ef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ef8:	d102      	bne.n	17f00 <__cmpdf2+0x64>
   17efa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17efe:	d107      	bne.n	17f10 <__cmpdf2+0x74>
   17f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f08:	d1d6      	bne.n	17eb8 <__cmpdf2+0x1c>
   17f0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17f0e:	d0d3      	beq.n	17eb8 <__cmpdf2+0x1c>
   17f10:	f85d 0b04 	ldr.w	r0, [sp], #4
   17f14:	4770      	bx	lr
   17f16:	bf00      	nop

00017f18 <__aeabi_cdrcmple>:
   17f18:	4684      	mov	ip, r0
   17f1a:	4610      	mov	r0, r2
   17f1c:	4662      	mov	r2, ip
   17f1e:	468c      	mov	ip, r1
   17f20:	4619      	mov	r1, r3
   17f22:	4663      	mov	r3, ip
   17f24:	e000      	b.n	17f28 <__aeabi_cdcmpeq>
   17f26:	bf00      	nop

00017f28 <__aeabi_cdcmpeq>:
   17f28:	b501      	push	{r0, lr}
   17f2a:	f7ff ffb7 	bl	17e9c <__cmpdf2>
   17f2e:	2800      	cmp	r0, #0
   17f30:	bf48      	it	mi
   17f32:	f110 0f00 	cmnmi.w	r0, #0
   17f36:	bd01      	pop	{r0, pc}

00017f38 <__aeabi_dcmpeq>:
   17f38:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f3c:	f7ff fff4 	bl	17f28 <__aeabi_cdcmpeq>
   17f40:	bf0c      	ite	eq
   17f42:	2001      	moveq	r0, #1
   17f44:	2000      	movne	r0, #0
   17f46:	f85d fb08 	ldr.w	pc, [sp], #8
   17f4a:	bf00      	nop

00017f4c <__aeabi_dcmplt>:
   17f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f50:	f7ff ffea 	bl	17f28 <__aeabi_cdcmpeq>
   17f54:	bf34      	ite	cc
   17f56:	2001      	movcc	r0, #1
   17f58:	2000      	movcs	r0, #0
   17f5a:	f85d fb08 	ldr.w	pc, [sp], #8
   17f5e:	bf00      	nop

00017f60 <__aeabi_dcmple>:
   17f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f64:	f7ff ffe0 	bl	17f28 <__aeabi_cdcmpeq>
   17f68:	bf94      	ite	ls
   17f6a:	2001      	movls	r0, #1
   17f6c:	2000      	movhi	r0, #0
   17f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   17f72:	bf00      	nop

00017f74 <__aeabi_dcmpge>:
   17f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f78:	f7ff ffce 	bl	17f18 <__aeabi_cdrcmple>
   17f7c:	bf94      	ite	ls
   17f7e:	2001      	movls	r0, #1
   17f80:	2000      	movhi	r0, #0
   17f82:	f85d fb08 	ldr.w	pc, [sp], #8
   17f86:	bf00      	nop

00017f88 <__aeabi_dcmpgt>:
   17f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f8c:	f7ff ffc4 	bl	17f18 <__aeabi_cdrcmple>
   17f90:	bf34      	ite	cc
   17f92:	2001      	movcc	r0, #1
   17f94:	2000      	movcs	r0, #0
   17f96:	f85d fb08 	ldr.w	pc, [sp], #8
   17f9a:	bf00      	nop

00017f9c <__aeabi_d2iz>:
   17f9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17fa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17fa4:	d215      	bcs.n	17fd2 <__aeabi_d2iz+0x36>
   17fa6:	d511      	bpl.n	17fcc <__aeabi_d2iz+0x30>
   17fa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17fac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17fb0:	d912      	bls.n	17fd8 <__aeabi_d2iz+0x3c>
   17fb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17fba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17fc2:	fa23 f002 	lsr.w	r0, r3, r2
   17fc6:	bf18      	it	ne
   17fc8:	4240      	negne	r0, r0
   17fca:	4770      	bx	lr
   17fcc:	f04f 0000 	mov.w	r0, #0
   17fd0:	4770      	bx	lr
   17fd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17fd6:	d105      	bne.n	17fe4 <__aeabi_d2iz+0x48>
   17fd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17fdc:	bf08      	it	eq
   17fde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17fe2:	4770      	bx	lr
   17fe4:	f04f 0000 	mov.w	r0, #0
   17fe8:	4770      	bx	lr
   17fea:	bf00      	nop

00017fec <__aeabi_d2uiz>:
   17fec:	004a      	lsls	r2, r1, #1
   17fee:	d211      	bcs.n	18014 <__aeabi_d2uiz+0x28>
   17ff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17ff4:	d211      	bcs.n	1801a <__aeabi_d2uiz+0x2e>
   17ff6:	d50d      	bpl.n	18014 <__aeabi_d2uiz+0x28>
   17ff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17ffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18000:	d40e      	bmi.n	18020 <__aeabi_d2uiz+0x34>
   18002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1800a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1800e:	fa23 f002 	lsr.w	r0, r3, r2
   18012:	4770      	bx	lr
   18014:	f04f 0000 	mov.w	r0, #0
   18018:	4770      	bx	lr
   1801a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1801e:	d102      	bne.n	18026 <__aeabi_d2uiz+0x3a>
   18020:	f04f 30ff 	mov.w	r0, #4294967295
   18024:	4770      	bx	lr
   18026:	f04f 0000 	mov.w	r0, #0
   1802a:	4770      	bx	lr

0001802c <__aeabi_d2f>:
   1802c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18030:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18034:	bf24      	itt	cs
   18036:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1803a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1803e:	d90d      	bls.n	1805c <__aeabi_d2f+0x30>
   18040:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18044:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18048:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1804c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18050:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18054:	bf08      	it	eq
   18056:	f020 0001 	biceq.w	r0, r0, #1
   1805a:	4770      	bx	lr
   1805c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18060:	d121      	bne.n	180a6 <__aeabi_d2f+0x7a>
   18062:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18066:	bfbc      	itt	lt
   18068:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1806c:	4770      	bxlt	lr
   1806e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18072:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18076:	f1c2 0218 	rsb	r2, r2, #24
   1807a:	f1c2 0c20 	rsb	ip, r2, #32
   1807e:	fa10 f30c 	lsls.w	r3, r0, ip
   18082:	fa20 f002 	lsr.w	r0, r0, r2
   18086:	bf18      	it	ne
   18088:	f040 0001 	orrne.w	r0, r0, #1
   1808c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18090:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18094:	fa03 fc0c 	lsl.w	ip, r3, ip
   18098:	ea40 000c 	orr.w	r0, r0, ip
   1809c:	fa23 f302 	lsr.w	r3, r3, r2
   180a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   180a4:	e7cc      	b.n	18040 <__aeabi_d2f+0x14>
   180a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   180aa:	d107      	bne.n	180bc <__aeabi_d2f+0x90>
   180ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   180b0:	bf1e      	ittt	ne
   180b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   180b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   180ba:	4770      	bxne	lr
   180bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   180c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   180c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180c8:	4770      	bx	lr
   180ca:	bf00      	nop

000180cc <__aeabi_frsub>:
   180cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   180d0:	e002      	b.n	180d8 <__addsf3>
   180d2:	bf00      	nop

000180d4 <__aeabi_fsub>:
   180d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000180d8 <__addsf3>:
   180d8:	0042      	lsls	r2, r0, #1
   180da:	bf1f      	itttt	ne
   180dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   180e0:	ea92 0f03 	teqne	r2, r3
   180e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   180e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   180ec:	d06a      	beq.n	181c4 <__addsf3+0xec>
   180ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
   180f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   180f6:	bfc1      	itttt	gt
   180f8:	18d2      	addgt	r2, r2, r3
   180fa:	4041      	eorgt	r1, r0
   180fc:	4048      	eorgt	r0, r1
   180fe:	4041      	eorgt	r1, r0
   18100:	bfb8      	it	lt
   18102:	425b      	neglt	r3, r3
   18104:	2b19      	cmp	r3, #25
   18106:	bf88      	it	hi
   18108:	4770      	bxhi	lr
   1810a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1810e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18112:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18116:	bf18      	it	ne
   18118:	4240      	negne	r0, r0
   1811a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1811e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18122:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18126:	bf18      	it	ne
   18128:	4249      	negne	r1, r1
   1812a:	ea92 0f03 	teq	r2, r3
   1812e:	d03f      	beq.n	181b0 <__addsf3+0xd8>
   18130:	f1a2 0201 	sub.w	r2, r2, #1
   18134:	fa41 fc03 	asr.w	ip, r1, r3
   18138:	eb10 000c 	adds.w	r0, r0, ip
   1813c:	f1c3 0320 	rsb	r3, r3, #32
   18140:	fa01 f103 	lsl.w	r1, r1, r3
   18144:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18148:	d502      	bpl.n	18150 <__addsf3+0x78>
   1814a:	4249      	negs	r1, r1
   1814c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18150:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18154:	d313      	bcc.n	1817e <__addsf3+0xa6>
   18156:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1815a:	d306      	bcc.n	1816a <__addsf3+0x92>
   1815c:	0840      	lsrs	r0, r0, #1
   1815e:	ea4f 0131 	mov.w	r1, r1, rrx
   18162:	f102 0201 	add.w	r2, r2, #1
   18166:	2afe      	cmp	r2, #254	; 0xfe
   18168:	d251      	bcs.n	1820e <__addsf3+0x136>
   1816a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1816e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18172:	bf08      	it	eq
   18174:	f020 0001 	biceq.w	r0, r0, #1
   18178:	ea40 0003 	orr.w	r0, r0, r3
   1817c:	4770      	bx	lr
   1817e:	0049      	lsls	r1, r1, #1
   18180:	eb40 0000 	adc.w	r0, r0, r0
   18184:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18188:	f1a2 0201 	sub.w	r2, r2, #1
   1818c:	d1ed      	bne.n	1816a <__addsf3+0x92>
   1818e:	fab0 fc80 	clz	ip, r0
   18192:	f1ac 0c08 	sub.w	ip, ip, #8
   18196:	ebb2 020c 	subs.w	r2, r2, ip
   1819a:	fa00 f00c 	lsl.w	r0, r0, ip
   1819e:	bfaa      	itet	ge
   181a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   181a4:	4252      	neglt	r2, r2
   181a6:	4318      	orrge	r0, r3
   181a8:	bfbc      	itt	lt
   181aa:	40d0      	lsrlt	r0, r2
   181ac:	4318      	orrlt	r0, r3
   181ae:	4770      	bx	lr
   181b0:	f092 0f00 	teq	r2, #0
   181b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   181b8:	bf06      	itte	eq
   181ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   181be:	3201      	addeq	r2, #1
   181c0:	3b01      	subne	r3, #1
   181c2:	e7b5      	b.n	18130 <__addsf3+0x58>
   181c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   181c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   181cc:	bf18      	it	ne
   181ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   181d2:	d021      	beq.n	18218 <__addsf3+0x140>
   181d4:	ea92 0f03 	teq	r2, r3
   181d8:	d004      	beq.n	181e4 <__addsf3+0x10c>
   181da:	f092 0f00 	teq	r2, #0
   181de:	bf08      	it	eq
   181e0:	4608      	moveq	r0, r1
   181e2:	4770      	bx	lr
   181e4:	ea90 0f01 	teq	r0, r1
   181e8:	bf1c      	itt	ne
   181ea:	2000      	movne	r0, #0
   181ec:	4770      	bxne	lr
   181ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   181f2:	d104      	bne.n	181fe <__addsf3+0x126>
   181f4:	0040      	lsls	r0, r0, #1
   181f6:	bf28      	it	cs
   181f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   181fc:	4770      	bx	lr
   181fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18202:	bf3c      	itt	cc
   18204:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18208:	4770      	bxcc	lr
   1820a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1820e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18216:	4770      	bx	lr
   18218:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1821c:	bf16      	itet	ne
   1821e:	4608      	movne	r0, r1
   18220:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18224:	4601      	movne	r1, r0
   18226:	0242      	lsls	r2, r0, #9
   18228:	bf06      	itte	eq
   1822a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1822e:	ea90 0f01 	teqeq	r0, r1
   18232:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18236:	4770      	bx	lr

00018238 <__aeabi_ui2f>:
   18238:	f04f 0300 	mov.w	r3, #0
   1823c:	e004      	b.n	18248 <__aeabi_i2f+0x8>
   1823e:	bf00      	nop

00018240 <__aeabi_i2f>:
   18240:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18244:	bf48      	it	mi
   18246:	4240      	negmi	r0, r0
   18248:	ea5f 0c00 	movs.w	ip, r0
   1824c:	bf08      	it	eq
   1824e:	4770      	bxeq	lr
   18250:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18254:	4601      	mov	r1, r0
   18256:	f04f 0000 	mov.w	r0, #0
   1825a:	e01c      	b.n	18296 <__aeabi_l2f+0x2a>

0001825c <__aeabi_ul2f>:
   1825c:	ea50 0201 	orrs.w	r2, r0, r1
   18260:	bf08      	it	eq
   18262:	4770      	bxeq	lr
   18264:	f04f 0300 	mov.w	r3, #0
   18268:	e00a      	b.n	18280 <__aeabi_l2f+0x14>
   1826a:	bf00      	nop

0001826c <__aeabi_l2f>:
   1826c:	ea50 0201 	orrs.w	r2, r0, r1
   18270:	bf08      	it	eq
   18272:	4770      	bxeq	lr
   18274:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18278:	d502      	bpl.n	18280 <__aeabi_l2f+0x14>
   1827a:	4240      	negs	r0, r0
   1827c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18280:	ea5f 0c01 	movs.w	ip, r1
   18284:	bf02      	ittt	eq
   18286:	4684      	moveq	ip, r0
   18288:	4601      	moveq	r1, r0
   1828a:	2000      	moveq	r0, #0
   1828c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18290:	bf08      	it	eq
   18292:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18296:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1829a:	fabc f28c 	clz	r2, ip
   1829e:	3a08      	subs	r2, #8
   182a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   182a4:	db10      	blt.n	182c8 <__aeabi_l2f+0x5c>
   182a6:	fa01 fc02 	lsl.w	ip, r1, r2
   182aa:	4463      	add	r3, ip
   182ac:	fa00 fc02 	lsl.w	ip, r0, r2
   182b0:	f1c2 0220 	rsb	r2, r2, #32
   182b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   182b8:	fa20 f202 	lsr.w	r2, r0, r2
   182bc:	eb43 0002 	adc.w	r0, r3, r2
   182c0:	bf08      	it	eq
   182c2:	f020 0001 	biceq.w	r0, r0, #1
   182c6:	4770      	bx	lr
   182c8:	f102 0220 	add.w	r2, r2, #32
   182cc:	fa01 fc02 	lsl.w	ip, r1, r2
   182d0:	f1c2 0220 	rsb	r2, r2, #32
   182d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   182d8:	fa21 f202 	lsr.w	r2, r1, r2
   182dc:	eb43 0002 	adc.w	r0, r3, r2
   182e0:	bf08      	it	eq
   182e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182e6:	4770      	bx	lr

000182e8 <__aeabi_fmul>:
   182e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   182ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   182f0:	bf1e      	ittt	ne
   182f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   182f6:	ea92 0f0c 	teqne	r2, ip
   182fa:	ea93 0f0c 	teqne	r3, ip
   182fe:	d06f      	beq.n	183e0 <__aeabi_fmul+0xf8>
   18300:	441a      	add	r2, r3
   18302:	ea80 0c01 	eor.w	ip, r0, r1
   18306:	0240      	lsls	r0, r0, #9
   18308:	bf18      	it	ne
   1830a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1830e:	d01e      	beq.n	1834e <__aeabi_fmul+0x66>
   18310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18314:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18318:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1831c:	fba0 3101 	umull	r3, r1, r0, r1
   18320:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18324:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18328:	bf3e      	ittt	cc
   1832a:	0049      	lslcc	r1, r1, #1
   1832c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18330:	005b      	lslcc	r3, r3, #1
   18332:	ea40 0001 	orr.w	r0, r0, r1
   18336:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1833a:	2afd      	cmp	r2, #253	; 0xfd
   1833c:	d81d      	bhi.n	1837a <__aeabi_fmul+0x92>
   1833e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18342:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18346:	bf08      	it	eq
   18348:	f020 0001 	biceq.w	r0, r0, #1
   1834c:	4770      	bx	lr
   1834e:	f090 0f00 	teq	r0, #0
   18352:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18356:	bf08      	it	eq
   18358:	0249      	lsleq	r1, r1, #9
   1835a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1835e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18362:	3a7f      	subs	r2, #127	; 0x7f
   18364:	bfc2      	ittt	gt
   18366:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1836a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1836e:	4770      	bxgt	lr
   18370:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18374:	f04f 0300 	mov.w	r3, #0
   18378:	3a01      	subs	r2, #1
   1837a:	dc5d      	bgt.n	18438 <__aeabi_fmul+0x150>
   1837c:	f112 0f19 	cmn.w	r2, #25
   18380:	bfdc      	itt	le
   18382:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18386:	4770      	bxle	lr
   18388:	f1c2 0200 	rsb	r2, r2, #0
   1838c:	0041      	lsls	r1, r0, #1
   1838e:	fa21 f102 	lsr.w	r1, r1, r2
   18392:	f1c2 0220 	rsb	r2, r2, #32
   18396:	fa00 fc02 	lsl.w	ip, r0, r2
   1839a:	ea5f 0031 	movs.w	r0, r1, rrx
   1839e:	f140 0000 	adc.w	r0, r0, #0
   183a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   183a6:	bf08      	it	eq
   183a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   183ac:	4770      	bx	lr
   183ae:	f092 0f00 	teq	r2, #0
   183b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   183b6:	bf02      	ittt	eq
   183b8:	0040      	lsleq	r0, r0, #1
   183ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   183be:	3a01      	subeq	r2, #1
   183c0:	d0f9      	beq.n	183b6 <__aeabi_fmul+0xce>
   183c2:	ea40 000c 	orr.w	r0, r0, ip
   183c6:	f093 0f00 	teq	r3, #0
   183ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   183ce:	bf02      	ittt	eq
   183d0:	0049      	lsleq	r1, r1, #1
   183d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183d6:	3b01      	subeq	r3, #1
   183d8:	d0f9      	beq.n	183ce <__aeabi_fmul+0xe6>
   183da:	ea41 010c 	orr.w	r1, r1, ip
   183de:	e78f      	b.n	18300 <__aeabi_fmul+0x18>
   183e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   183e4:	ea92 0f0c 	teq	r2, ip
   183e8:	bf18      	it	ne
   183ea:	ea93 0f0c 	teqne	r3, ip
   183ee:	d00a      	beq.n	18406 <__aeabi_fmul+0x11e>
   183f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   183f4:	bf18      	it	ne
   183f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   183fa:	d1d8      	bne.n	183ae <__aeabi_fmul+0xc6>
   183fc:	ea80 0001 	eor.w	r0, r0, r1
   18400:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18404:	4770      	bx	lr
   18406:	f090 0f00 	teq	r0, #0
   1840a:	bf17      	itett	ne
   1840c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18410:	4608      	moveq	r0, r1
   18412:	f091 0f00 	teqne	r1, #0
   18416:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1841a:	d014      	beq.n	18446 <__aeabi_fmul+0x15e>
   1841c:	ea92 0f0c 	teq	r2, ip
   18420:	d101      	bne.n	18426 <__aeabi_fmul+0x13e>
   18422:	0242      	lsls	r2, r0, #9
   18424:	d10f      	bne.n	18446 <__aeabi_fmul+0x15e>
   18426:	ea93 0f0c 	teq	r3, ip
   1842a:	d103      	bne.n	18434 <__aeabi_fmul+0x14c>
   1842c:	024b      	lsls	r3, r1, #9
   1842e:	bf18      	it	ne
   18430:	4608      	movne	r0, r1
   18432:	d108      	bne.n	18446 <__aeabi_fmul+0x15e>
   18434:	ea80 0001 	eor.w	r0, r0, r1
   18438:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1843c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18440:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18444:	4770      	bx	lr
   18446:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1844a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1844e:	4770      	bx	lr

00018450 <__aeabi_fdiv>:
   18450:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18458:	bf1e      	ittt	ne
   1845a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1845e:	ea92 0f0c 	teqne	r2, ip
   18462:	ea93 0f0c 	teqne	r3, ip
   18466:	d069      	beq.n	1853c <__aeabi_fdiv+0xec>
   18468:	eba2 0203 	sub.w	r2, r2, r3
   1846c:	ea80 0c01 	eor.w	ip, r0, r1
   18470:	0249      	lsls	r1, r1, #9
   18472:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18476:	d037      	beq.n	184e8 <__aeabi_fdiv+0x98>
   18478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1847c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18480:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18488:	428b      	cmp	r3, r1
   1848a:	bf38      	it	cc
   1848c:	005b      	lslcc	r3, r3, #1
   1848e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18492:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18496:	428b      	cmp	r3, r1
   18498:	bf24      	itt	cs
   1849a:	1a5b      	subcs	r3, r3, r1
   1849c:	ea40 000c 	orrcs.w	r0, r0, ip
   184a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   184a4:	bf24      	itt	cs
   184a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   184aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   184ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   184b2:	bf24      	itt	cs
   184b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   184b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   184bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   184c0:	bf24      	itt	cs
   184c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   184c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   184ca:	011b      	lsls	r3, r3, #4
   184cc:	bf18      	it	ne
   184ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   184d2:	d1e0      	bne.n	18496 <__aeabi_fdiv+0x46>
   184d4:	2afd      	cmp	r2, #253	; 0xfd
   184d6:	f63f af50 	bhi.w	1837a <__aeabi_fmul+0x92>
   184da:	428b      	cmp	r3, r1
   184dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184e0:	bf08      	it	eq
   184e2:	f020 0001 	biceq.w	r0, r0, #1
   184e6:	4770      	bx	lr
   184e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184f0:	327f      	adds	r2, #127	; 0x7f
   184f2:	bfc2      	ittt	gt
   184f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184fc:	4770      	bxgt	lr
   184fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18502:	f04f 0300 	mov.w	r3, #0
   18506:	3a01      	subs	r2, #1
   18508:	e737      	b.n	1837a <__aeabi_fmul+0x92>
   1850a:	f092 0f00 	teq	r2, #0
   1850e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18512:	bf02      	ittt	eq
   18514:	0040      	lsleq	r0, r0, #1
   18516:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1851a:	3a01      	subeq	r2, #1
   1851c:	d0f9      	beq.n	18512 <__aeabi_fdiv+0xc2>
   1851e:	ea40 000c 	orr.w	r0, r0, ip
   18522:	f093 0f00 	teq	r3, #0
   18526:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1852a:	bf02      	ittt	eq
   1852c:	0049      	lsleq	r1, r1, #1
   1852e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18532:	3b01      	subeq	r3, #1
   18534:	d0f9      	beq.n	1852a <__aeabi_fdiv+0xda>
   18536:	ea41 010c 	orr.w	r1, r1, ip
   1853a:	e795      	b.n	18468 <__aeabi_fdiv+0x18>
   1853c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18540:	ea92 0f0c 	teq	r2, ip
   18544:	d108      	bne.n	18558 <__aeabi_fdiv+0x108>
   18546:	0242      	lsls	r2, r0, #9
   18548:	f47f af7d 	bne.w	18446 <__aeabi_fmul+0x15e>
   1854c:	ea93 0f0c 	teq	r3, ip
   18550:	f47f af70 	bne.w	18434 <__aeabi_fmul+0x14c>
   18554:	4608      	mov	r0, r1
   18556:	e776      	b.n	18446 <__aeabi_fmul+0x15e>
   18558:	ea93 0f0c 	teq	r3, ip
   1855c:	d104      	bne.n	18568 <__aeabi_fdiv+0x118>
   1855e:	024b      	lsls	r3, r1, #9
   18560:	f43f af4c 	beq.w	183fc <__aeabi_fmul+0x114>
   18564:	4608      	mov	r0, r1
   18566:	e76e      	b.n	18446 <__aeabi_fmul+0x15e>
   18568:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1856c:	bf18      	it	ne
   1856e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18572:	d1ca      	bne.n	1850a <__aeabi_fdiv+0xba>
   18574:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18578:	f47f af5c 	bne.w	18434 <__aeabi_fmul+0x14c>
   1857c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18580:	f47f af3c 	bne.w	183fc <__aeabi_fmul+0x114>
   18584:	e75f      	b.n	18446 <__aeabi_fmul+0x15e>
   18586:	bf00      	nop

00018588 <__gesf2>:
   18588:	f04f 3cff 	mov.w	ip, #4294967295
   1858c:	e006      	b.n	1859c <__cmpsf2+0x4>
   1858e:	bf00      	nop

00018590 <__lesf2>:
   18590:	f04f 0c01 	mov.w	ip, #1
   18594:	e002      	b.n	1859c <__cmpsf2+0x4>
   18596:	bf00      	nop

00018598 <__cmpsf2>:
   18598:	f04f 0c01 	mov.w	ip, #1
   1859c:	f84d cd04 	str.w	ip, [sp, #-4]!
   185a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   185a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185ac:	bf18      	it	ne
   185ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   185b2:	d011      	beq.n	185d8 <__cmpsf2+0x40>
   185b4:	b001      	add	sp, #4
   185b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   185ba:	bf18      	it	ne
   185bc:	ea90 0f01 	teqne	r0, r1
   185c0:	bf58      	it	pl
   185c2:	ebb2 0003 	subspl.w	r0, r2, r3
   185c6:	bf88      	it	hi
   185c8:	17c8      	asrhi	r0, r1, #31
   185ca:	bf38      	it	cc
   185cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   185d0:	bf18      	it	ne
   185d2:	f040 0001 	orrne.w	r0, r0, #1
   185d6:	4770      	bx	lr
   185d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185dc:	d102      	bne.n	185e4 <__cmpsf2+0x4c>
   185de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   185e2:	d105      	bne.n	185f0 <__cmpsf2+0x58>
   185e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   185e8:	d1e4      	bne.n	185b4 <__cmpsf2+0x1c>
   185ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   185ee:	d0e1      	beq.n	185b4 <__cmpsf2+0x1c>
   185f0:	f85d 0b04 	ldr.w	r0, [sp], #4
   185f4:	4770      	bx	lr
   185f6:	bf00      	nop

000185f8 <__aeabi_cfrcmple>:
   185f8:	4684      	mov	ip, r0
   185fa:	4608      	mov	r0, r1
   185fc:	4661      	mov	r1, ip
   185fe:	e7ff      	b.n	18600 <__aeabi_cfcmpeq>

00018600 <__aeabi_cfcmpeq>:
   18600:	b50f      	push	{r0, r1, r2, r3, lr}
   18602:	f7ff ffc9 	bl	18598 <__cmpsf2>
   18606:	2800      	cmp	r0, #0
   18608:	bf48      	it	mi
   1860a:	f110 0f00 	cmnmi.w	r0, #0
   1860e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018610 <__aeabi_fcmpeq>:
   18610:	f84d ed08 	str.w	lr, [sp, #-8]!
   18614:	f7ff fff4 	bl	18600 <__aeabi_cfcmpeq>
   18618:	bf0c      	ite	eq
   1861a:	2001      	moveq	r0, #1
   1861c:	2000      	movne	r0, #0
   1861e:	f85d fb08 	ldr.w	pc, [sp], #8
   18622:	bf00      	nop

00018624 <__aeabi_fcmplt>:
   18624:	f84d ed08 	str.w	lr, [sp, #-8]!
   18628:	f7ff ffea 	bl	18600 <__aeabi_cfcmpeq>
   1862c:	bf34      	ite	cc
   1862e:	2001      	movcc	r0, #1
   18630:	2000      	movcs	r0, #0
   18632:	f85d fb08 	ldr.w	pc, [sp], #8
   18636:	bf00      	nop

00018638 <__aeabi_fcmple>:
   18638:	f84d ed08 	str.w	lr, [sp, #-8]!
   1863c:	f7ff ffe0 	bl	18600 <__aeabi_cfcmpeq>
   18640:	bf94      	ite	ls
   18642:	2001      	movls	r0, #1
   18644:	2000      	movhi	r0, #0
   18646:	f85d fb08 	ldr.w	pc, [sp], #8
   1864a:	bf00      	nop

0001864c <__aeabi_fcmpge>:
   1864c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18650:	f7ff ffd2 	bl	185f8 <__aeabi_cfrcmple>
   18654:	bf94      	ite	ls
   18656:	2001      	movls	r0, #1
   18658:	2000      	movhi	r0, #0
   1865a:	f85d fb08 	ldr.w	pc, [sp], #8
   1865e:	bf00      	nop

00018660 <__aeabi_fcmpgt>:
   18660:	f84d ed08 	str.w	lr, [sp, #-8]!
   18664:	f7ff ffc8 	bl	185f8 <__aeabi_cfrcmple>
   18668:	bf34      	ite	cc
   1866a:	2001      	movcc	r0, #1
   1866c:	2000      	movcs	r0, #0
   1866e:	f85d fb08 	ldr.w	pc, [sp], #8
   18672:	bf00      	nop

00018674 <__aeabi_f2iz>:
   18674:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18678:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1867c:	d30f      	bcc.n	1869e <__aeabi_f2iz+0x2a>
   1867e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18682:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18686:	d90d      	bls.n	186a4 <__aeabi_f2iz+0x30>
   18688:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1868c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18690:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18694:	fa23 f002 	lsr.w	r0, r3, r2
   18698:	bf18      	it	ne
   1869a:	4240      	negne	r0, r0
   1869c:	4770      	bx	lr
   1869e:	f04f 0000 	mov.w	r0, #0
   186a2:	4770      	bx	lr
   186a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   186a8:	d101      	bne.n	186ae <__aeabi_f2iz+0x3a>
   186aa:	0242      	lsls	r2, r0, #9
   186ac:	d105      	bne.n	186ba <__aeabi_f2iz+0x46>
   186ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   186b2:	bf08      	it	eq
   186b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   186b8:	4770      	bx	lr
   186ba:	f04f 0000 	mov.w	r0, #0
   186be:	4770      	bx	lr

000186c0 <memcpy>:
   186c0:	2a0f      	cmp	r2, #15
   186c2:	b4f0      	push	{r4, r5, r6, r7}
   186c4:	d945      	bls.n	18752 <memcpy+0x92>
   186c6:	ea40 0301 	orr.w	r3, r0, r1
   186ca:	079b      	lsls	r3, r3, #30
   186cc:	d145      	bne.n	1875a <memcpy+0x9a>
   186ce:	f1a2 0710 	sub.w	r7, r2, #16
   186d2:	460c      	mov	r4, r1
   186d4:	4603      	mov	r3, r0
   186d6:	093f      	lsrs	r7, r7, #4
   186d8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   186dc:	3610      	adds	r6, #16
   186de:	6825      	ldr	r5, [r4, #0]
   186e0:	3310      	adds	r3, #16
   186e2:	3410      	adds	r4, #16
   186e4:	f843 5c10 	str.w	r5, [r3, #-16]
   186e8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   186ec:	f843 5c0c 	str.w	r5, [r3, #-12]
   186f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   186f4:	f843 5c08 	str.w	r5, [r3, #-8]
   186f8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   186fc:	f843 5c04 	str.w	r5, [r3, #-4]
   18700:	42b3      	cmp	r3, r6
   18702:	d1ec      	bne.n	186de <memcpy+0x1e>
   18704:	1c7b      	adds	r3, r7, #1
   18706:	f002 0c0f 	and.w	ip, r2, #15
   1870a:	f1bc 0f03 	cmp.w	ip, #3
   1870e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18712:	4419      	add	r1, r3
   18714:	4403      	add	r3, r0
   18716:	d922      	bls.n	1875e <memcpy+0x9e>
   18718:	460e      	mov	r6, r1
   1871a:	461d      	mov	r5, r3
   1871c:	4664      	mov	r4, ip
   1871e:	f856 7b04 	ldr.w	r7, [r6], #4
   18722:	3c04      	subs	r4, #4
   18724:	2c03      	cmp	r4, #3
   18726:	f845 7b04 	str.w	r7, [r5], #4
   1872a:	d8f8      	bhi.n	1871e <memcpy+0x5e>
   1872c:	f1ac 0404 	sub.w	r4, ip, #4
   18730:	f002 0203 	and.w	r2, r2, #3
   18734:	f024 0403 	bic.w	r4, r4, #3
   18738:	3404      	adds	r4, #4
   1873a:	4423      	add	r3, r4
   1873c:	4421      	add	r1, r4
   1873e:	b132      	cbz	r2, 1874e <memcpy+0x8e>
   18740:	440a      	add	r2, r1
   18742:	f811 4b01 	ldrb.w	r4, [r1], #1
   18746:	4291      	cmp	r1, r2
   18748:	f803 4b01 	strb.w	r4, [r3], #1
   1874c:	d1f9      	bne.n	18742 <memcpy+0x82>
   1874e:	bcf0      	pop	{r4, r5, r6, r7}
   18750:	4770      	bx	lr
   18752:	4603      	mov	r3, r0
   18754:	2a00      	cmp	r2, #0
   18756:	d1f3      	bne.n	18740 <memcpy+0x80>
   18758:	e7f9      	b.n	1874e <memcpy+0x8e>
   1875a:	4603      	mov	r3, r0
   1875c:	e7f0      	b.n	18740 <memcpy+0x80>
   1875e:	4662      	mov	r2, ip
   18760:	2a00      	cmp	r2, #0
   18762:	d1ed      	bne.n	18740 <memcpy+0x80>
   18764:	e7f3      	b.n	1874e <memcpy+0x8e>
   18766:	bf00      	nop

00018768 <memset>:
   18768:	0783      	lsls	r3, r0, #30
   1876a:	b4f0      	push	{r4, r5, r6, r7}
   1876c:	d048      	beq.n	18800 <memset+0x98>
   1876e:	1e54      	subs	r4, r2, #1
   18770:	2a00      	cmp	r2, #0
   18772:	d043      	beq.n	187fc <memset+0x94>
   18774:	b2cd      	uxtb	r5, r1
   18776:	4603      	mov	r3, r0
   18778:	e002      	b.n	18780 <memset+0x18>
   1877a:	2c00      	cmp	r4, #0
   1877c:	d03e      	beq.n	187fc <memset+0x94>
   1877e:	4614      	mov	r4, r2
   18780:	f803 5b01 	strb.w	r5, [r3], #1
   18784:	f013 0f03 	tst.w	r3, #3
   18788:	f104 32ff 	add.w	r2, r4, #4294967295
   1878c:	d1f5      	bne.n	1877a <memset+0x12>
   1878e:	2c03      	cmp	r4, #3
   18790:	d92d      	bls.n	187ee <memset+0x86>
   18792:	b2cd      	uxtb	r5, r1
   18794:	2c0f      	cmp	r4, #15
   18796:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1879a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1879e:	d918      	bls.n	187d2 <memset+0x6a>
   187a0:	f1a4 0710 	sub.w	r7, r4, #16
   187a4:	f103 0610 	add.w	r6, r3, #16
   187a8:	461a      	mov	r2, r3
   187aa:	093f      	lsrs	r7, r7, #4
   187ac:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   187b0:	6015      	str	r5, [r2, #0]
   187b2:	3210      	adds	r2, #16
   187b4:	f842 5c0c 	str.w	r5, [r2, #-12]
   187b8:	f842 5c08 	str.w	r5, [r2, #-8]
   187bc:	f842 5c04 	str.w	r5, [r2, #-4]
   187c0:	42b2      	cmp	r2, r6
   187c2:	d1f5      	bne.n	187b0 <memset+0x48>
   187c4:	f004 040f 	and.w	r4, r4, #15
   187c8:	3701      	adds	r7, #1
   187ca:	2c03      	cmp	r4, #3
   187cc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   187d0:	d90d      	bls.n	187ee <memset+0x86>
   187d2:	461e      	mov	r6, r3
   187d4:	4622      	mov	r2, r4
   187d6:	3a04      	subs	r2, #4
   187d8:	f846 5b04 	str.w	r5, [r6], #4
   187dc:	2a03      	cmp	r2, #3
   187de:	d8fa      	bhi.n	187d6 <memset+0x6e>
   187e0:	1f22      	subs	r2, r4, #4
   187e2:	f004 0403 	and.w	r4, r4, #3
   187e6:	f022 0203 	bic.w	r2, r2, #3
   187ea:	3204      	adds	r2, #4
   187ec:	4413      	add	r3, r2
   187ee:	b12c      	cbz	r4, 187fc <memset+0x94>
   187f0:	b2c9      	uxtb	r1, r1
   187f2:	441c      	add	r4, r3
   187f4:	f803 1b01 	strb.w	r1, [r3], #1
   187f8:	42a3      	cmp	r3, r4
   187fa:	d1fb      	bne.n	187f4 <memset+0x8c>
   187fc:	bcf0      	pop	{r4, r5, r6, r7}
   187fe:	4770      	bx	lr
   18800:	4614      	mov	r4, r2
   18802:	4603      	mov	r3, r0
   18804:	e7c3      	b.n	1878e <memset+0x26>
   18806:	bf00      	nop

00018808 <strncpy>:
   18808:	ea40 0301 	orr.w	r3, r0, r1
   1880c:	079b      	lsls	r3, r3, #30
   1880e:	b470      	push	{r4, r5, r6}
   18810:	d12b      	bne.n	1886a <strncpy+0x62>
   18812:	2a03      	cmp	r2, #3
   18814:	bf84      	itt	hi
   18816:	460b      	movhi	r3, r1
   18818:	4605      	movhi	r5, r0
   1881a:	d926      	bls.n	1886a <strncpy+0x62>
   1881c:	4619      	mov	r1, r3
   1881e:	f853 4b04 	ldr.w	r4, [r3], #4
   18822:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18826:	ea26 0604 	bic.w	r6, r6, r4
   1882a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1882e:	d105      	bne.n	1883c <strncpy+0x34>
   18830:	3a04      	subs	r2, #4
   18832:	f845 4b04 	str.w	r4, [r5], #4
   18836:	2a03      	cmp	r2, #3
   18838:	4619      	mov	r1, r3
   1883a:	d8ef      	bhi.n	1881c <strncpy+0x14>
   1883c:	b19a      	cbz	r2, 18866 <strncpy+0x5e>
   1883e:	780c      	ldrb	r4, [r1, #0]
   18840:	3a01      	subs	r2, #1
   18842:	1c6b      	adds	r3, r5, #1
   18844:	702c      	strb	r4, [r5, #0]
   18846:	b13c      	cbz	r4, 18858 <strncpy+0x50>
   18848:	b16a      	cbz	r2, 18866 <strncpy+0x5e>
   1884a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1884e:	3a01      	subs	r2, #1
   18850:	f803 4b01 	strb.w	r4, [r3], #1
   18854:	2c00      	cmp	r4, #0
   18856:	d1f7      	bne.n	18848 <strncpy+0x40>
   18858:	b12a      	cbz	r2, 18866 <strncpy+0x5e>
   1885a:	441a      	add	r2, r3
   1885c:	2100      	movs	r1, #0
   1885e:	f803 1b01 	strb.w	r1, [r3], #1
   18862:	4293      	cmp	r3, r2
   18864:	d1fb      	bne.n	1885e <strncpy+0x56>
   18866:	bc70      	pop	{r4, r5, r6}
   18868:	4770      	bx	lr
   1886a:	4605      	mov	r5, r0
   1886c:	e7e6      	b.n	1883c <strncpy+0x34>
   1886e:	bf00      	nop

00018870 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18872:	e003      	b.n	1887c <LoopCopyDataInit>

00018874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18874:	4b0a      	ldr	r3, [pc, #40]	; (188a0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   1887a:	3104      	adds	r1, #4

0001887c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1887c:	4809      	ldr	r0, [pc, #36]	; (188a4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1887e:	4b0a      	ldr	r3, [pc, #40]	; (188a8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18884:	d3f6      	bcc.n	18874 <CopyDataInit>
	ldr	r2, =_sbss
   18886:	4a09      	ldr	r2, [pc, #36]	; (188ac <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18888:	e002      	b.n	18890 <LoopFillZerobss>

0001888a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   1888a:	2300      	movs	r3, #0
	str	r3, [r2], #4
   1888c:	f842 3b04 	str.w	r3, [r2], #4

00018890 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18890:	4b07      	ldr	r3, [pc, #28]	; (188b0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18892:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18894:	d3f9      	bcc.n	1888a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18896:	f7e7 fd51 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   1889a:	f7fe fc01 	bl	170a0 <main>
	bx	lr    
   1889e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   188a0:	00018afc 	.word	0x00018afc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   188a8:	20000320 	.word	0x20000320
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   188ac:	20000320 	.word	0x20000320
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188b0:	2000b32c 	.word	0x2000b32c

000188b4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   188b4:	e7fe      	b.n	188b4 <ADC1_2_IRQHandler>
   188b6:	0000      	movs	r0, r0
   188b8:	6c6c616d 	.word	0x6c6c616d
   188bc:	6620636f 	.word	0x6620636f
   188c0:	6520726f 	.word	0x6520726f
   188c4:	746e6576 	.word	0x746e6576
   188c8:	61747320 	.word	0x61747320
   188cc:	66206b63 	.word	0x66206b63
   188d0:	656c6961 	.word	0x656c6961
   188d4:	000d0a64 	.word	0x000d0a64
   188d8:	72656874 	.word	0x72656874
   188dc:	72612065 	.word	0x72612065
   188e0:	65732065 	.word	0x65732065
   188e4:	726f736e 	.word	0x726f736e
   188e8:	73696d20 	.word	0x73696d20
   188ec:	676e6973 	.word	0x676e6973
   188f0:	61656420 	.word	0x61656420
   188f4:	6e696c64 	.word	0x6e696c64
   188f8:	000d0a65 	.word	0x000d0a65
   188fc:	72656874 	.word	0x72656874
   18900:	72612065 	.word	0x72612065
   18904:	65732065 	.word	0x65732065
   18908:	6e617672 	.word	0x6e617672
   1890c:	6d207374 	.word	0x6d207374
   18910:	69737369 	.word	0x69737369
   18914:	6420676e 	.word	0x6420676e
   18918:	6c646165 	.word	0x6c646165
   1891c:	0a656e69 	.word	0x0a656e69
   18920:	0000000d 	.word	0x0000000d
   18924:	6f727245 	.word	0x6f727245
   18928:	54203a72 	.word	0x54203a72
   1892c:	20736968 	.word	0x20736968
   18930:	6e657665 	.word	0x6e657665
   18934:	61682074 	.word	0x61682074
   18938:	72612073 	.word	0x72612073
   1893c:	65766972 	.word	0x65766972
   18940:	0a212164 	.word	0x0a212164
   18944:	0000000d 	.word	0x0000000d
   18948:	454c4449 	.word	0x454c4449
   1894c:	00000000 	.word	0x00000000

00018950 <ulKernelPriority>:
   18950:	0000007f                                ....

00018954 <heapSTRUCT_SIZE>:
   18954:	00010010                                         ..

00018956 <version>:
   18956:	3d5a0001                                         ..

00018958 <utm_east0>:
   18958:	00093d5a                                Z=..

0001895c <utm_north0>:
   1895c:	005875e6                                .uX.

00018960 <climb_pgain>:
   18960:	bcf5c28f                                ....

00018964 <climb_igain>:
   18964:	3dcccccd                                ...=

00018968 <level_gaz>:
   18968:	3e9eb852                                R..>

0001896c <nav_east0>:
   1896c:	00093d5a                                Z=..

00018970 <nav_north0>:
   18970:	005875e6                                .uX.

00018974 <nb_waypoint>:
   18974:	00000007 33323130 37363534 42413938     ....0123456789AB
   18984:	46454443                                CDEF

00018988 <failsafe>:
	...
   1899c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   189ac:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   189bc:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   189cc:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   189dc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   189ec:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   189fc:	00000074 736e6553 3020726f 00000000     t...Sensor 0....
   18a0c:	76726553 20746e61 00000031 736e6553     Servant 1...Sens
   18a1c:	3220726f 00000000 76726553 20746e61     or 2....Servant 
   18a2c:	00000033 736e6553 3720726f 00000000     3...Sensor 7....
   18a3c:	76726553 20746e61 00000038 736e6553     Servant 8...Sens
   18a4c:	3420726f 00000000 736e6553 3520726f     or 4....Sensor 5
   18a5c:	00000000 736e6553 3620726f 00000000     ....Sensor 6....
   18a6c:	736e6553 3920726f 00000000 76726553     Sensor 9....Serv
   18a7c:	20746e61 00003031 76726553 20746e61     ant 10..Servant 
   18a8c:	00003131 736e6553 3120726f 00000032     11..Sensor 12...
   18a9c:	736e6553 3220726f 00000030 736e6553     Sensor 20...Sens
   18aac:	3120726f 00000033 76726553 20746e61     or 13...Servant 
   18abc:	00003431 736e6553 3120726f 00000035     14..Sensor 15...
   18acc:	76726553 20746e61 00003631 76726553     Servant 16..Serv
   18adc:	20746e61 00003731 736e6553 3120726f     ant 17..Sensor 1
   18aec:	00000038 736e6553 3120726f 00000039     8...Sensor 19...
