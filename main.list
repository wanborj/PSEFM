
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 41 61 00 00 85 61 00 00 85 61 00 00     ... Aa...a...a..
      10:	85 61 00 00 85 61 00 00 85 61 00 00 00 00 00 00     .a...a...a......
	...
      2c:	9d 56 00 00 85 61 00 00 00 00 00 00 a9 57 00 00     .V...a.......W..
      3c:	e5 57 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .W...a...a...a..
      4c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      5c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      6c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      7c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      8c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      9c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      ac:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      bc:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      cc:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
      dc:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	0000624c 	.word	0x0000624c
     6d0:	20000000 	.word	0x20000000
     6d4:	2000003c 	.word	0x2000003c
     6d8:	20000040 	.word	0x20000040
     6dc:	20012f30 	.word	0x20012f30

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fa1d 	bl	5838 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 03ac 	movw	r3, #172	; 0xac
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 03ac 	movw	r3, #172	; 0xac
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fb5c 	bl	3b08 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fb57 	bl	3b08 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 03b0 	movw	r3, #176	; 0xb0
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 03b0 	movw	r3, #176	; 0xb0
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 0240 	movw	r2, #64	; 0x40
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fb37 	bl	3b20 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 03b4 	movw	r3, #180	; 0xb4
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 03ac 	movw	r3, #172	; 0xac
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fb76 	bl	3be0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 03ac 	movw	r3, #172	; 0xac
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 03b4 	movw	r3, #180	; 0xb4
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 0394 	movw	r3, #148	; 0x94
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 03ac 	movw	r3, #172	; 0xac
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fb20 	bl	3b70 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 0390 	movw	r3, #144	; 0x90
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 03ac 	movw	r3, #172	; 0xac
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fb10 	bl	3b70 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 03ac 	movw	r3, #172	; 0xac
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fb03 	bl	3b70 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 0398 	movw	r3, #152	; 0x98
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fb24 	bl	3be0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fb1b 	bl	3be0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 03b0 	movw	r3, #176	; 0xb0
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 03b0 	movw	r3, #176	; 0xb0
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 0240 	movw	r2, #64	; 0x40
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fa9a 	bl	3b20 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 0398 	movw	r3, #152	; 0x98
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fb69 	bl	4cdc <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 03b8 	movw	r3, #184	; 0xb8
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 03bc 	movw	r3, #188	; 0xbc
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 03b4 	movw	r3, #180	; 0xb4
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 03b4 	movw	r3, #180	; 0xb4
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 03bc 	movw	r3, #188	; 0xbc
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 03bc 	movw	r3, #188	; 0xbc
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 03b4 	movw	r3, #180	; 0xb4
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 0390 	movw	r3, #144	; 0x90
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 0394 	movw	r3, #148	; 0x94
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 0390 	movw	r3, #144	; 0x90
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 0394 	movw	r3, #148	; 0x94
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 0390 	movw	r3, #144	; 0x90
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 03b4 	movw	r3, #180	; 0xb4
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fa8e 	bl	3be0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fa85 	bl	3be0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 03b0 	movw	r3, #176	; 0xb0
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 03b0 	movw	r3, #176	; 0xb0
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 0240 	movw	r2, #64	; 0x40
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fa00 	bl	3b20 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 0390 	movw	r3, #144	; 0x90
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 03bc 	movw	r3, #188	; 0xbc
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 03b4 	movw	r3, #180	; 0xb4
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 03b8 	movw	r3, #184	; 0xb8
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 03b0 	movw	r3, #176	; 0xb0
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 03b0 	movw	r3, #176	; 0xb0
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 03b0 	movw	r3, #176	; 0xb0
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 03b0 	movw	r3, #176	; 0xb0
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 0240 	movw	r2, #64	; 0x40
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 03b0 	movw	r3, #176	; 0xb0
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 0240 	movw	r2, #64	; 0x40
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 03ac 	movw	r3, #172	; 0xac
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 03ac 	movw	r3, #172	; 0xac
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 03ac 	movw	r3, #172	; 0xac
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 03ac 	movw	r3, #172	; 0xac
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 0240 	movw	r2, #64	; 0x40
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f937 	bl	3ac8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 0068 	movw	r0, #104	; 0x68
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f92b 	bl	3ac8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 007c 	movw	r0, #124	; 0x7c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f925 	bl	3ac8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 0098 	movw	r0, #152	; 0x98
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f91f 	bl	3ac8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 0390 	movw	r3, #144	; 0x90
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 0268 	movw	r2, #104	; 0x68
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 0394 	movw	r3, #148	; 0x94
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 027c 	movw	r2, #124	; 0x7c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 f989 	bl	3be0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 0098 	movw	r0, #152	; 0x98
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f920 	bl	3b20 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 03ac 	movw	r3, #172	; 0xac
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 00c0 	movw	r0, #192	; 0xc0
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 f8d7 	bl	3ac8 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 02d4 	movw	r2, #212	; 0xd4
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f001 f8c7 	bl	3ac8 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fde9 	bl	55f8 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 f955 	bl	4cdc <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f240 03e8 	movw	r3, #232	; 0xe8
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f240 03e8 	movw	r3, #232	; 0xe8
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f240 03e8 	movw	r3, #232	; 0xe8
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f240 03d4 	movw	r3, #212	; 0xd4
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f240 03c0 	movw	r3, #192	; 0xc0
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 fe23 	bl	5744 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 fe19 	bl	5770 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 fdcf 	bl	5744 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 fe37 	bl	5838 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f240 00c0 	movw	r0, #192	; 0xc0
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f000 ff88 	bl	3b20 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fc30 	bl	5474 <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fe0e 	bl	5838 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f246 1088 	movw	r0, #24968	; 0x6188
    2c28:	f2c0 0000 	movt	r0, #0
    2c2c:	f003 f822 	bl	5c74 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>
        //vPrintString("event creating\n\r");

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fd7f 	bl	5770 <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f240 03c0 	movw	r3, #192	; 0xc0
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f240 03c0 	movw	r3, #192	; 0xc0
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f002 f802 	bl	4cdc <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fd27 	bl	5744 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f000 ff70 	bl	3be0 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 ff08 	bl	3b20 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fd2e 	bl	5770 <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fcfd 	bl	5744 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 fb93 	bl	5474 <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f000 ff2e 	bl	3be0 <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fcf4 	bl	5770 <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 ff0a 	bl	3be0 <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fcd0 	bl	5770 <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fcca 	bl	5770 <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fcaa 	bl	5744 <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fde5 	bl	59c0 <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fcbb 	bl	5770 <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f000 ff5b 	bl	3ccc <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f243 13b4 	movw	r3, #12724	; 0x31b4
    2e1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f243 13b4 	movw	r3, #12724	; 0x31b4
    2e2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f243 13b4 	movw	r3, #12724	; 0x31b4
    2e3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f000 ffcb 	bl	3de8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f243 13b4 	movw	r3, #12724	; 0x31b4
    2e56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f001 f883 	bl	3f74 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b04      	cmp	r3, #4
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e061      	b.n	2f50 <vParameterInitialise+0xd0>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f642 7330 	movw	r3, #12080	; 0x2f30
    2e90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	216c      	movs	r1, #108	; 0x6c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f642 7330 	movw	r3, #12080	; 0x2f30
    2ea6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	216c      	movs	r1, #108	; 0x6c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f642 7330 	movw	r3, #12080	; 0x2f30
    2ebe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	216c      	movs	r1, #108	; 0x6c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f243 13c8 	movw	r3, #12744	; 0x31c8
    2ed6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f642 7330 	movw	r3, #12080	; 0x2f30
    2ee4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	206c      	movs	r0, #108	; 0x6c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	335c      	adds	r3, #92	; 0x5c
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2ef6:	f243 1350 	movw	r3, #12624	; 0x3150
    2efa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f642 7330 	movw	r3, #12080	; 0x2f30
    2f08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	206c      	movs	r0, #108	; 0x6c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3368      	adds	r3, #104	; 0x68
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f1a:	f243 1350 	movw	r3, #12624	; 0x3150
    2f1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f243 1364 	movw	r3, #12644	; 0x3164
    2f2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f34:	f642 7330 	movw	r3, #12080	; 0x2f30
    2f38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2f3c:	68f9      	ldr	r1, [r7, #12]
    2f3e:	206c      	movs	r0, #108	; 0x6c
    2f40:	fb00 f101 	mul.w	r1, r0, r1
    2f44:	440b      	add	r3, r1
    2f46:	3364      	adds	r3, #100	; 0x64
    2f48:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	3301      	adds	r3, #1
    2f4e:	60fb      	str	r3, [r7, #12]
    2f50:	68fb      	ldr	r3, [r7, #12]
    2f52:	2b04      	cmp	r3, #4
    2f54:	dd9a      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f56:	2300      	movs	r3, #0
    2f58:	60fb      	str	r3, [r7, #12]
    2f5a:	e080      	b.n	305e <vParameterInitialise+0x1de>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f5c:	f243 1268 	movw	r2, #12648	; 0x3168
    2f60:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2f64:	68f9      	ldr	r1, [r7, #12]
    2f66:	460b      	mov	r3, r1
    2f68:	005b      	lsls	r3, r3, #1
    2f6a:	440b      	add	r3, r1
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4413      	add	r3, r2
    2f70:	3304      	adds	r3, #4
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f76:	f243 1268 	movw	r2, #12648	; 0x3168
    2f7a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2f7e:	68f9      	ldr	r1, [r7, #12]
    2f80:	460b      	mov	r3, r1
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	440b      	add	r3, r1
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4413      	add	r3, r2
    2f8a:	3308      	adds	r3, #8
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2f90:	f642 7330 	movw	r3, #12080	; 0x2f30
    2f94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2f98:	68ba      	ldr	r2, [r7, #8]
    2f9a:	216c      	movs	r1, #108	; 0x6c
    2f9c:	fb01 f202 	mul.w	r2, r1, r2
    2fa0:	4413      	add	r3, r2
    2fa2:	3308      	adds	r3, #8
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	f642 7230 	movw	r2, #12080	; 0x2f30
    2faa:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2fae:	68b9      	ldr	r1, [r7, #8]
    2fb0:	460b      	mov	r3, r1
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	440b      	add	r3, r1
    2fb6:	00d9      	lsls	r1, r3, #3
    2fb8:	440b      	add	r3, r1
    2fba:	4403      	add	r3, r0
    2fbc:	330c      	adds	r3, #12
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4413      	add	r3, r2
    2fc2:	687a      	ldr	r2, [r7, #4]
    2fc4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fc6:	f642 7330 	movw	r3, #12080	; 0x2f30
    2fca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2fce:	68ba      	ldr	r2, [r7, #8]
    2fd0:	216c      	movs	r1, #108	; 0x6c
    2fd2:	fb01 f202 	mul.w	r2, r1, r2
    2fd6:	4413      	add	r3, r2
    2fd8:	3308      	adds	r3, #8
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	1c5a      	adds	r2, r3, #1
    2fde:	f642 7330 	movw	r3, #12080	; 0x2f30
    2fe2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2fe6:	68b9      	ldr	r1, [r7, #8]
    2fe8:	206c      	movs	r0, #108	; 0x6c
    2fea:	fb00 f101 	mul.w	r1, r0, r1
    2fee:	440b      	add	r3, r1
    2ff0:	3308      	adds	r3, #8
    2ff2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    2ff4:	f642 7330 	movw	r3, #12080	; 0x2f30
    2ff8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	216c      	movs	r1, #108	; 0x6c
    3000:	fb01 f202 	mul.w	r2, r1, r2
    3004:	4413      	add	r3, r2
    3006:	3304      	adds	r3, #4
    3008:	6818      	ldr	r0, [r3, #0]
    300a:	f642 7230 	movw	r2, #12080	; 0x2f30
    300e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3012:	6879      	ldr	r1, [r7, #4]
    3014:	460b      	mov	r3, r1
    3016:	005b      	lsls	r3, r3, #1
    3018:	440b      	add	r3, r1
    301a:	00d9      	lsls	r1, r3, #3
    301c:	440b      	add	r3, r1
    301e:	4403      	add	r3, r0
    3020:	3302      	adds	r3, #2
    3022:	009b      	lsls	r3, r3, #2
    3024:	4413      	add	r3, r2
    3026:	68ba      	ldr	r2, [r7, #8]
    3028:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    302a:	f642 7330 	movw	r3, #12080	; 0x2f30
    302e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	216c      	movs	r1, #108	; 0x6c
    3036:	fb01 f202 	mul.w	r2, r1, r2
    303a:	4413      	add	r3, r2
    303c:	3304      	adds	r3, #4
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	1c5a      	adds	r2, r3, #1
    3042:	f642 7330 	movw	r3, #12080	; 0x2f30
    3046:	f2c2 0301 	movt	r3, #8193	; 0x2001
    304a:	6879      	ldr	r1, [r7, #4]
    304c:	206c      	movs	r0, #108	; 0x6c
    304e:	fb00 f101 	mul.w	r1, r0, r1
    3052:	440b      	add	r3, r1
    3054:	3304      	adds	r3, #4
    3056:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	3301      	adds	r3, #1
    305c:	60fb      	str	r3, [r7, #12]
    305e:	f243 1368 	movw	r3, #12648	; 0x3168
    3062:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	429a      	cmp	r2, r3
    306c:	f73f af76 	bgt.w	2f5c <vParameterInitialise+0xdc>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr
    307a:	bf00      	nop

0000307c <vTaskDelayLET>:

void vTaskDelayLET()
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3082:	f002 f9f7 	bl	5474 <xTaskGetCurrentTaskHandle>
    3086:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3088:	68b8      	ldr	r0, [r7, #8]
    308a:	f002 faa9 	bl	55e0 <xTaskGetxStartTime>
    308e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3090:	68b8      	ldr	r0, [r7, #8]
    3092:	f002 fab1 	bl	55f8 <xTaskGetxLet>
    3096:	4602      	mov	r2, r0
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	4413      	add	r3, r2
    309c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    309e:	f001 fe1d 	bl	4cdc <xTaskGetTickCount>
    30a2:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30a4:	e002      	b.n	30ac <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30a6:	f001 fe19 	bl	4cdc <xTaskGetTickCount>
    30aa:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30ac:	68fa      	ldr	r2, [r7, #12]
    30ae:	683b      	ldr	r3, [r7, #0]
    30b0:	429a      	cmp	r2, r3
    30b2:	d3f8      	bcc.n	30a6 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30b4:	3710      	adds	r7, #16
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop

000030bc <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c0:	b088      	sub	sp, #32
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
    30c6:	6039      	str	r1, [r7, #0]
    30c8:	4669      	mov	r1, sp
    30ca:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30cc:	6879      	ldr	r1, [r7, #4]
    30ce:	6849      	ldr	r1, [r1, #4]
    30d0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30d2:	69be      	ldr	r6, [r7, #24]
    30d4:	1e71      	subs	r1, r6, #1
    30d6:	6179      	str	r1, [r7, #20]
    30d8:	4631      	mov	r1, r6
    30da:	4608      	mov	r0, r1
    30dc:	f04f 0100 	mov.w	r1, #0
    30e0:	014d      	lsls	r5, r1, #5
    30e2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    30e6:	0144      	lsls	r4, r0, #5
    30e8:	4631      	mov	r1, r6
    30ea:	4608      	mov	r0, r1
    30ec:	f04f 0100 	mov.w	r1, #0
    30f0:	014b      	lsls	r3, r1, #5
    30f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    30f6:	0142      	lsls	r2, r0, #5
    30f8:	4633      	mov	r3, r6
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	3303      	adds	r3, #3
    30fe:	3307      	adds	r3, #7
    3100:	08db      	lsrs	r3, r3, #3
    3102:	00db      	lsls	r3, r3, #3
    3104:	ebad 0d03 	sub.w	sp, sp, r3
    3108:	466b      	mov	r3, sp
    310a:	3303      	adds	r3, #3
    310c:	089b      	lsrs	r3, r3, #2
    310e:	009b      	lsls	r3, r3, #2
    3110:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    3118:	f243 13b4 	movw	r3, #12724	; 0x31b4
    311c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3120:	68fa      	ldr	r2, [r7, #12]
    3122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3126:	4618      	mov	r0, r3
    3128:	2100      	movs	r1, #0
    312a:	f04f 32ff 	mov.w	r2, #4294967295
    312e:	2300      	movs	r3, #0
    3130:	f000 ff20 	bl	3f74 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3134:	f001 fdd2 	bl	4cdc <xTaskGetTickCount>
    3138:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    313a:	f243 13dc 	movw	r3, #12764	; 0x31dc
    313e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3142:	68fa      	ldr	r2, [r7, #12]
    3144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3148:	4618      	mov	r0, r3
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	f002 fa60 	bl	5610 <vTaskSetxStartTime>

    vPrintNumber(300);
    3150:	f44f 7096 	mov.w	r0, #300	; 0x12c
    3154:	f002 fda8 	bl	5ca8 <vPrintNumber>
    for( i = 0; i < NUM; i ++ )
    3158:	2300      	movs	r3, #0
    315a:	61fb      	str	r3, [r7, #28]
    315c:	e024      	b.n	31a8 <vEventReceiveAll+0xec>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    315e:	687a      	ldr	r2, [r7, #4]
    3160:	69fb      	ldr	r3, [r7, #28]
    3162:	3302      	adds	r3, #2
    3164:	009b      	lsls	r3, r3, #2
    3166:	4413      	add	r3, r2
    3168:	6859      	ldr	r1, [r3, #4]
    316a:	693b      	ldr	r3, [r7, #16]
    316c:	69fa      	ldr	r2, [r7, #28]
    316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    3172:	69fb      	ldr	r3, [r7, #28]
    3174:	009b      	lsls	r3, r3, #2
    3176:	683a      	ldr	r2, [r7, #0]
    3178:	18d1      	adds	r1, r2, r3
    317a:	693b      	ldr	r3, [r7, #16]
    317c:	69fa      	ldr	r2, [r7, #28]
    317e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3182:	f243 13dc 	movw	r3, #12764	; 0x31dc
    3186:	f2c2 0301 	movt	r3, #8193	; 0x2001
    318a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    318e:	f243 134c 	movw	r3, #12620	; 0x314c
    3192:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	4608      	mov	r0, r1
    319a:	4611      	mov	r1, r2
    319c:	461a      	mov	r2, r3
    319e:	f7ff fdbf 	bl	2d20 <vEventGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    vPrintNumber(300);
    for( i = 0; i < NUM; i ++ )
    31a2:	69fb      	ldr	r3, [r7, #28]
    31a4:	3301      	adds	r3, #1
    31a6:	61fb      	str	r3, [r7, #28]
    31a8:	69fa      	ldr	r2, [r7, #28]
    31aa:	69bb      	ldr	r3, [r7, #24]
    31ac:	429a      	cmp	r2, r3
    31ae:	dbd6      	blt.n	315e <vEventReceiveAll+0xa2>
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
    vPrintNumber(300);
    31b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
    31b4:	f002 fd78 	bl	5ca8 <vPrintNumber>
    31b8:	46c5      	mov	sp, r8
}
    31ba:	3720      	adds	r7, #32
    31bc:	46bd      	mov	sp, r7
    31be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31c2:	bf00      	nop

000031c4 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31d4:	2300      	movs	r3, #0
    31d6:	60fb      	str	r3, [r7, #12]
    31d8:	e00a      	b.n	31f0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	009b      	lsls	r3, r3, #2
    31de:	683a      	ldr	r2, [r7, #0]
    31e0:	4413      	add	r3, r2
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	4618      	mov	r0, r3
    31e6:	f7ff fdfd 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	3301      	adds	r3, #1
    31ee:	60fb      	str	r3, [r7, #12]
    31f0:	68fa      	ldr	r2, [r7, #12]
    31f2:	68bb      	ldr	r3, [r7, #8]
    31f4:	429a      	cmp	r2, r3
    31f6:	dbf0      	blt.n	31da <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    31f8:	3710      	adds	r7, #16
    31fa:	46bd      	mov	sp, r7
    31fc:	bd80      	pop	{r7, pc}
    31fe:	bf00      	nop

00003200 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3204:	b08a      	sub	sp, #40	; 0x28
    3206:	af02      	add	r7, sp, #8
    3208:	6078      	str	r0, [r7, #4]
    320a:	6039      	str	r1, [r7, #0]
    320c:	4669      	mov	r1, sp
    320e:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3210:	6879      	ldr	r1, [r7, #4]
    3212:	6889      	ldr	r1, [r1, #8]
    3214:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    3216:	6879      	ldr	r1, [r7, #4]
    3218:	6809      	ldr	r1, [r1, #0]
    321a:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    321c:	6879      	ldr	r1, [r7, #4]
    321e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3220:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3222:	69be      	ldr	r6, [r7, #24]
    3224:	1e71      	subs	r1, r6, #1
    3226:	60f9      	str	r1, [r7, #12]
    3228:	4631      	mov	r1, r6
    322a:	4608      	mov	r0, r1
    322c:	f04f 0100 	mov.w	r1, #0
    3230:	014d      	lsls	r5, r1, #5
    3232:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3236:	0144      	lsls	r4, r0, #5
    3238:	4631      	mov	r1, r6
    323a:	4608      	mov	r0, r1
    323c:	f04f 0100 	mov.w	r1, #0
    3240:	014b      	lsls	r3, r1, #5
    3242:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3246:	0142      	lsls	r2, r0, #5
    3248:	4633      	mov	r3, r6
    324a:	009b      	lsls	r3, r3, #2
    324c:	3303      	adds	r3, #3
    324e:	3307      	adds	r3, #7
    3250:	08db      	lsrs	r3, r3, #3
    3252:	00db      	lsls	r3, r3, #3
    3254:	ebad 0d03 	sub.w	sp, sp, r3
    3258:	ab02      	add	r3, sp, #8
    325a:	3303      	adds	r3, #3
    325c:	089b      	lsrs	r3, r3, #2
    325e:	009b      	lsls	r3, r3, #2
    3260:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3262:	2300      	movs	r3, #0
    3264:	61fb      	str	r3, [r7, #28]
    3266:	e033      	b.n	32d0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3268:	687a      	ldr	r2, [r7, #4]
    326a:	69fb      	ldr	r3, [r7, #28]
    326c:	330c      	adds	r3, #12
    326e:	009b      	lsls	r3, r3, #2
    3270:	4413      	add	r3, r2
    3272:	6859      	ldr	r1, [r3, #4]
    3274:	68bb      	ldr	r3, [r7, #8]
    3276:	69fa      	ldr	r2, [r7, #28]
    3278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    327c:	68bb      	ldr	r3, [r7, #8]
    327e:	69fa      	ldr	r2, [r7, #28]
    3280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3284:	697b      	ldr	r3, [r7, #20]
    3286:	429a      	cmp	r2, r3
    3288:	dc06      	bgt.n	3298 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    328a:	69fb      	ldr	r3, [r7, #28]
    328c:	011b      	lsls	r3, r3, #4
    328e:	683a      	ldr	r2, [r7, #0]
    3290:	4413      	add	r3, r2
    3292:	2201      	movs	r2, #1
    3294:	609a      	str	r2, [r3, #8]
    3296:	e005      	b.n	32a4 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3298:	69fb      	ldr	r3, [r7, #28]
    329a:	011b      	lsls	r3, r3, #4
    329c:	683a      	ldr	r2, [r7, #0]
    329e:	4413      	add	r3, r2
    32a0:	2200      	movs	r2, #0
    32a2:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    32a4:	68bb      	ldr	r3, [r7, #8]
    32a6:	69fa      	ldr	r2, [r7, #28]
    32a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32ac:	f243 13dc 	movw	r3, #12764	; 0x31dc
    32b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    32b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32b8:	69fb      	ldr	r3, [r7, #28]
    32ba:	011b      	lsls	r3, r3, #4
    32bc:	683a      	ldr	r2, [r7, #0]
    32be:	4413      	add	r3, r2
    32c0:	68da      	ldr	r2, [r3, #12]
    32c2:	9200      	str	r2, [sp, #0]
    32c4:	cb0e      	ldmia	r3, {r1, r2, r3}
    32c6:	f7ff fc61 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32ca:	69fb      	ldr	r3, [r7, #28]
    32cc:	3301      	adds	r3, #1
    32ce:	61fb      	str	r3, [r7, #28]
    32d0:	69fa      	ldr	r2, [r7, #28]
    32d2:	69bb      	ldr	r3, [r7, #24]
    32d4:	429a      	cmp	r2, r3
    32d6:	dbc7      	blt.n	3268 <vEventCreateAll+0x68>
    32d8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32da:	3720      	adds	r7, #32
    32dc:	46bd      	mov	sp, r7
    32de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32e2:	bf00      	nop

000032e4 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32e4:	b480      	push	{r7}
    32e6:	b083      	sub	sp, #12
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    32ec:	370c      	adds	r7, #12
    32ee:	46bd      	mov	sp, r7
    32f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f4:	4770      	bx	lr
    32f6:	bf00      	nop

000032f8 <vDoSensor>:

static void vDoSensor()
{
    32f8:	b480      	push	{r7}
    32fa:	af00      	add	r7, sp, #0

}
    32fc:	46bd      	mov	sp, r7
    32fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3302:	4770      	bx	lr

00003304 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    3308:	b092      	sub	sp, #72	; 0x48
    330a:	af00      	add	r7, sp, #0
    330c:	60f8      	str	r0, [r7, #12]
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    330e:	2301      	movs	r3, #1
    3310:	643b      	str	r3, [r7, #64]	; 0x40
    portBASE_TYPE xCount = 1;
    3312:	2301      	movs	r3, #1
    3314:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    331c:	689b      	ldr	r3, [r3, #8]
    331e:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    332a:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    332e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3330:	62bb      	str	r3, [r7, #40]	; 0x28

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3332:	f243 13dc 	movw	r3, #12764	; 0x31dc
    3336:	f2c2 0301 	movt	r3, #8193	; 0x2001
    333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3340:	4618      	mov	r0, r3
    3342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3344:	f002 f972 	bl	562c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3348:	6b79      	ldr	r1, [r7, #52]	; 0x34
    334a:	1e4b      	subs	r3, r1, #1
    334c:	627b      	str	r3, [r7, #36]	; 0x24
    334e:	460b      	mov	r3, r1
    3350:	461a      	mov	r2, r3
    3352:	f04f 0300 	mov.w	r3, #0
    3356:	0158      	lsls	r0, r3, #5
    3358:	6078      	str	r0, [r7, #4]
    335a:	6878      	ldr	r0, [r7, #4]
    335c:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3360:	6078      	str	r0, [r7, #4]
    3362:	0150      	lsls	r0, r2, #5
    3364:	460b      	mov	r3, r1
    3366:	461a      	mov	r2, r3
    3368:	f04f 0300 	mov.w	r3, #0
    336c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3370:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3374:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3378:	460b      	mov	r3, r1
    337a:	009b      	lsls	r3, r3, #2
    337c:	3303      	adds	r3, #3
    337e:	3307      	adds	r3, #7
    3380:	08db      	lsrs	r3, r3, #3
    3382:	00db      	lsls	r3, r3, #3
    3384:	ebad 0d03 	sub.w	sp, sp, r3
    3388:	466b      	mov	r3, sp
    338a:	3303      	adds	r3, #3
    338c:	089b      	lsrs	r3, r3, #2
    338e:	009b      	lsls	r3, r3, #2
    3390:	623b      	str	r3, [r7, #32]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3392:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3394:	1e4b      	subs	r3, r1, #1
    3396:	61fb      	str	r3, [r7, #28]
    3398:	460b      	mov	r3, r1
    339a:	461a      	mov	r2, r3
    339c:	f04f 0300 	mov.w	r3, #0
    33a0:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    33a4:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    33a8:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33ac:	460b      	mov	r3, r1
    33ae:	461a      	mov	r2, r3
    33b0:	f04f 0300 	mov.w	r3, #0
    33b4:	01dd      	lsls	r5, r3, #7
    33b6:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33ba:	01d4      	lsls	r4, r2, #7
    33bc:	460b      	mov	r3, r1
    33be:	011b      	lsls	r3, r3, #4
    33c0:	3303      	adds	r3, #3
    33c2:	3307      	adds	r3, #7
    33c4:	08db      	lsrs	r3, r3, #3
    33c6:	00db      	lsls	r3, r3, #3
    33c8:	ebad 0d03 	sub.w	sp, sp, r3
    33cc:	466b      	mov	r3, sp
    33ce:	3303      	adds	r3, #3
    33d0:	089b      	lsrs	r3, r3, #2
    33d2:	009b      	lsls	r3, r3, #2
    33d4:	61bb      	str	r3, [r7, #24]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    33d8:	2b01      	cmp	r3, #1
    33da:	d110      	bne.n	33fe <vSensor+0xfa>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33dc:	f243 13b4 	movw	r3, #12724	; 0x31b4
    33e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    33e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    33e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33ea:	4618      	mov	r0, r3
    33ec:	2100      	movs	r1, #0
    33ee:	f04f 32ff 	mov.w	r2, #4294967295
    33f2:	2300      	movs	r3, #0
    33f4:	f000 fdbe 	bl	3f74 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    33f8:	2300      	movs	r3, #0
    33fa:	643b      	str	r3, [r7, #64]	; 0x40
    33fc:	e00d      	b.n	341a <vSensor+0x116>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    33fe:	6a3b      	ldr	r3, [r7, #32]
    3400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3402:	4619      	mov	r1, r3
    3404:	f7ff fe5a 	bl	30bc <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    3408:	6a3b      	ldr	r3, [r7, #32]
    340a:	4618      	mov	r0, r3
    340c:	f7ff ff6a 	bl	32e4 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    3410:	6a3b      	ldr	r3, [r7, #32]
    3412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3414:	4619      	mov	r1, r3
    3416:	f7ff fed5 	bl	31c4 <vEventDeleteAll>
        }

        //vPrintNumber( xMyFlag );

        xCurrentTime = xTaskGetTickCount();
    341a:	f001 fc5f 	bl	4cdc <xTaskGetTickCount>
    341e:	6178      	str	r0, [r7, #20]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3420:	f243 13dc 	movw	r3, #12764	; 0x31dc
    3424:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    342e:	4618      	mov	r0, r3
    3430:	6979      	ldr	r1, [r7, #20]
    3432:	f002 f8ed 	bl	5610 <vTaskSetxStartTime>

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3438:	3301      	adds	r3, #1
    343a:	63fb      	str	r3, [r7, #60]	; 0x3c
        deadline = xCount * xPeriod; 
    343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3440:	fb02 f303 	mul.w	r3, r2, r3
    3444:	613b      	str	r3, [r7, #16]

        for( i = 0; i < NUM; i ++ )
    3446:	2300      	movs	r3, #0
    3448:	647b      	str	r3, [r7, #68]	; 0x44
    344a:	e011      	b.n	3470 <vSensor+0x16c>
        {
            xDatas[i].xNextPeriod = deadline;
    344c:	69ba      	ldr	r2, [r7, #24]
    344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3450:	011b      	lsls	r3, r3, #4
    3452:	4413      	add	r3, r2
    3454:	693a      	ldr	r2, [r7, #16]
    3456:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3458:	697a      	ldr	r2, [r7, #20]
    345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    345c:	441a      	add	r2, r3
    345e:	69b9      	ldr	r1, [r7, #24]
    3460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3462:	011b      	lsls	r3, r3, #4
    3464:	440b      	add	r3, r1
    3466:	3304      	adds	r3, #4
    3468:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    346a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    346c:	3301      	adds	r3, #1
    346e:	647b      	str	r3, [r7, #68]	; 0x44
    3470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3474:	429a      	cmp	r2, r3
    3476:	dbe9      	blt.n	344c <vSensor+0x148>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vPrintNumber(200);
    3478:	20c8      	movs	r0, #200	; 0xc8
    347a:	f002 fc15 	bl	5ca8 <vPrintNumber>
        vEventCreateAll( pvMyParameter, xDatas );
    347e:	69bb      	ldr	r3, [r7, #24]
    3480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3482:	4619      	mov	r1, r3
    3484:	f7ff febc 	bl	3200 <vEventCreateAll>
        vPrintNumber(200);
    3488:	20c8      	movs	r0, #200	; 0xc8
    348a:	f002 fc0d 	bl	5ca8 <vPrintNumber>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    348e:	2300      	movs	r3, #0
    3490:	647b      	str	r3, [r7, #68]	; 0x44
    3492:	e002      	b.n	349a <vSensor+0x196>
    3494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3496:	3301      	adds	r3, #1
    3498:	647b      	str	r3, [r7, #68]	; 0x44
    349a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    349c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    34a0:	dbf8      	blt.n	3494 <vSensor+0x190>
        {
            //xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    34a2:	f7ff fdeb 	bl	307c <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    34a6:	f001 fc19 	bl	4cdc <xTaskGetTickCount>
    34aa:	6178      	str	r0, [r7, #20]
        */
        //vPrintNumber( ( xMyFlag + 10 ) * 3 );

        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34ac:	69bb      	ldr	r3, [r7, #24]
    34ae:	681a      	ldr	r2, [r3, #0]
    34b0:	697b      	ldr	r3, [r7, #20]
    34b2:	429a      	cmp	r2, r3
    34b4:	d20a      	bcs.n	34cc <vSensor+0x1c8>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34b6:	69bb      	ldr	r3, [r7, #24]
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	4618      	mov	r0, r3
    34bc:	f002 fbf4 	bl	5ca8 <vPrintNumber>

            vPrintString("there are sensor missing deadline\n\r");
    34c0:	f246 10a8 	movw	r0, #25000	; 0x61a8
    34c4:	f2c0 0000 	movt	r0, #0
    34c8:	f002 fbd4 	bl	5c74 <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    34cc:	f243 13b4 	movw	r3, #12724	; 0x31b4
    34d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    34d4:	691b      	ldr	r3, [r3, #16]
    34d6:	4618      	mov	r0, r3
    34d8:	2100      	movs	r1, #0
    34da:	2200      	movs	r2, #0
    34dc:	2300      	movs	r3, #0
    34de:	f000 fc83 	bl	3de8 <xQueueGenericSend>
    }
    34e2:	e778      	b.n	33d6 <vSensor+0xd2>

000034e4 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    34e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34e8:	b093      	sub	sp, #76	; 0x4c
    34ea:	af00      	add	r7, sp, #0
    34ec:	6178      	str	r0, [r7, #20]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    34ee:	6979      	ldr	r1, [r7, #20]
    34f0:	6439      	str	r1, [r7, #64]	; 0x40
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    34f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34f4:	6849      	ldr	r1, [r1, #4]
    34f6:	63f9      	str	r1, [r7, #60]	; 0x3c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    34f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34fa:	6889      	ldr	r1, [r1, #8]
    34fc:	63b9      	str	r1, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3500:	6809      	ldr	r1, [r1, #0]
    3502:	6379      	str	r1, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3504:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3506:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3508:	6339      	str	r1, [r7, #48]	; 0x30

    xEventHandle pxEvent[xNumOfIn];
    350a:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    350c:	1e71      	subs	r1, r6, #1
    350e:	62f9      	str	r1, [r7, #44]	; 0x2c
    3510:	4631      	mov	r1, r6
    3512:	4608      	mov	r0, r1
    3514:	f04f 0100 	mov.w	r1, #0
    3518:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    351c:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3520:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3524:	4631      	mov	r1, r6
    3526:	4608      	mov	r0, r1
    3528:	f04f 0100 	mov.w	r1, #0
    352c:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3530:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3534:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3538:	4631      	mov	r1, r6
    353a:	0089      	lsls	r1, r1, #2
    353c:	3103      	adds	r1, #3
    353e:	3107      	adds	r1, #7
    3540:	08c9      	lsrs	r1, r1, #3
    3542:	00c9      	lsls	r1, r1, #3
    3544:	ebad 0d01 	sub.w	sp, sp, r1
    3548:	4669      	mov	r1, sp
    354a:	3103      	adds	r1, #3
    354c:	0889      	lsrs	r1, r1, #2
    354e:	0089      	lsls	r1, r1, #2
    3550:	62b9      	str	r1, [r7, #40]	; 0x28
    struct eventData xDatas[xNumOfOut];
    3552:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3554:	1e71      	subs	r1, r6, #1
    3556:	6279      	str	r1, [r7, #36]	; 0x24
    3558:	4631      	mov	r1, r6
    355a:	4608      	mov	r0, r1
    355c:	f04f 0100 	mov.w	r1, #0
    3560:	01cd      	lsls	r5, r1, #7
    3562:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3566:	01c4      	lsls	r4, r0, #7
    3568:	4631      	mov	r1, r6
    356a:	4608      	mov	r0, r1
    356c:	f04f 0100 	mov.w	r1, #0
    3570:	01cb      	lsls	r3, r1, #7
    3572:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3576:	01c2      	lsls	r2, r0, #7
    3578:	4633      	mov	r3, r6
    357a:	011b      	lsls	r3, r3, #4
    357c:	3303      	adds	r3, #3
    357e:	3307      	adds	r3, #7
    3580:	08db      	lsrs	r3, r3, #3
    3582:	00db      	lsls	r3, r3, #3
    3584:	ebad 0d03 	sub.w	sp, sp, r3
    3588:	466b      	mov	r3, sp
    358a:	3303      	adds	r3, #3
    358c:	089b      	lsrs	r3, r3, #2
    358e:	009b      	lsls	r3, r3, #2
    3590:	623b      	str	r3, [r7, #32]

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3596:	61fb      	str	r3, [r7, #28]
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3598:	f243 13dc 	movw	r3, #12764	; 0x31dc
    359c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    35a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35a6:	4618      	mov	r0, r3
    35a8:	69f9      	ldr	r1, [r7, #28]
    35aa:	f002 f83f 	bl	562c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    35ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    35b2:	4619      	mov	r1, r3
    35b4:	f7ff fd82 	bl	30bc <vEventReceiveAll>

        //vPrintNumber(xMyFlag);

        xCurrentTime = xTaskGetTickCount();
    35b8:	f001 fb90 	bl	4cdc <xTaskGetTickCount>
    35bc:	61b8      	str	r0, [r7, #24]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35be:	f243 13dc 	movw	r3, #12764	; 0x31dc
    35c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    35c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35cc:	4618      	mov	r0, r3
    35ce:	69b9      	ldr	r1, [r7, #24]
    35d0:	f002 f81e 	bl	5610 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    35d4:	2300      	movs	r3, #0
    35d6:	647b      	str	r3, [r7, #68]	; 0x44
    35d8:	e01c      	b.n	3614 <vServant+0x130>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    35da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e2:	6a39      	ldr	r1, [r7, #32]
    35e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35e6:	0112      	lsls	r2, r2, #4
    35e8:	188c      	adds	r4, r1, r2
    35ea:	463a      	mov	r2, r7
    35ec:	4610      	mov	r0, r2
    35ee:	4619      	mov	r1, r3
    35f0:	f7ff f9fc 	bl	29ec <xEventGetxData>
    35f4:	463b      	mov	r3, r7
    35f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    35f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    35fc:	69ba      	ldr	r2, [r7, #24]
    35fe:	69fb      	ldr	r3, [r7, #28]
    3600:	441a      	add	r2, r3
    3602:	6a39      	ldr	r1, [r7, #32]
    3604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3606:	011b      	lsls	r3, r3, #4
    3608:	440b      	add	r3, r1
    360a:	3304      	adds	r3, #4
    360c:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCount();
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    360e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3610:	3301      	adds	r3, #1
    3612:	647b      	str	r3, [r7, #68]	; 0x44
    3614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3618:	429a      	cmp	r2, r3
    361a:	dbde      	blt.n	35da <vServant+0xf6>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    361c:	2300      	movs	r3, #0
    361e:	647b      	str	r3, [r7, #68]	; 0x44
    3620:	e002      	b.n	3628 <vServant+0x144>
    3622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3624:	3301      	adds	r3, #1
    3626:	647b      	str	r3, [r7, #68]	; 0x44
    3628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    362a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    362e:	dbf8      	blt.n	3622 <vServant+0x13e>
        {
            //xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3632:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3634:	4619      	mov	r1, r3
    3636:	f7ff fdc5 	bl	31c4 <vEventDeleteAll>

        vPrintNumber(200);
    363a:	20c8      	movs	r0, #200	; 0xc8
    363c:	f002 fb34 	bl	5ca8 <vPrintNumber>
        vEventCreateAll( pvMyParameter, xDatas );
    3640:	6a3b      	ldr	r3, [r7, #32]
    3642:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3644:	4619      	mov	r1, r3
    3646:	f7ff fddb 	bl	3200 <vEventCreateAll>
        vPrintNumber(200);
    364a:	20c8      	movs	r0, #200	; 0xc8
    364c:	f002 fb2c 	bl	5ca8 <vPrintNumber>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3650:	6a3b      	ldr	r3, [r7, #32]
    3652:	681a      	ldr	r2, [r3, #0]
    3654:	69bb      	ldr	r3, [r7, #24]
    3656:	429a      	cmp	r2, r3
    3658:	d210      	bcs.n	367c <vServant+0x198>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    365a:	6a3b      	ldr	r3, [r7, #32]
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	4618      	mov	r0, r3
    3660:	f002 fb22 	bl	5ca8 <vPrintNumber>
            vPrintNumber(xCurrentTime);
    3664:	69b8      	ldr	r0, [r7, #24]
    3666:	f002 fb1f 	bl	5ca8 <vPrintNumber>
            vPrintNumber(xMyFlag);
    366a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    366c:	f002 fb1c 	bl	5ca8 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    3670:	f246 10cc 	movw	r0, #25036	; 0x61cc
    3674:	f2c0 0000 	movt	r0, #0
    3678:	f002 fafc 	bl	5c74 <vPrintString>
        }

        vTaskDelayLET();
    367c:	f7ff fcfe 	bl	307c <vTaskDelayLET>

        xCurrentTime = xTaskGetTickCount();
    3680:	f001 fb2c 	bl	4cdc <xTaskGetTickCount>
    3684:	61b8      	str	r0, [r7, #24]
        */
        //vPrintNumber( (xMyFlag + 10) * 3 );


        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3686:	f243 13b4 	movw	r3, #12724	; 0x31b4
    368a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    368e:	691b      	ldr	r3, [r3, #16]
    3690:	4618      	mov	r0, r3
    3692:	2100      	movs	r1, #0
    3694:	2200      	movs	r2, #0
    3696:	2300      	movs	r3, #0
    3698:	f000 fba6 	bl	3de8 <xQueueGenericSend>
        
    }
    369c:	e787      	b.n	35ae <vServant+0xca>
    369e:	bf00      	nop

000036a0 <vR_Servant>:
}

void vR_Servant( void * pvParameter)
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b090      	sub	sp, #64	; 0x40
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    36ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    36b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    36b6:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    36b8:	f243 13dc 	movw	r3, #12764	; 0x31dc
    36bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    36c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36c6:	4618      	mov	r0, r3
    36c8:	6a39      	ldr	r1, [r7, #32]
    36ca:	f001 ffaf 	bl	562c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    36ce:	f243 13b4 	movw	r3, #12724	; 0x31b4
    36d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    36d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36dc:	4618      	mov	r0, r3
    36de:	2100      	movs	r1, #0
    36e0:	f04f 32ff 	mov.w	r2, #4294967295
    36e4:	2300      	movs	r3, #0
    36e6:	f000 fc45 	bl	3f74 <xQueueGenericReceive>

        vPrintNumber( 400 );
    36ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
    36ee:	f002 fadb 	bl	5ca8 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
    36f2:	f001 faf3 	bl	4cdc <xTaskGetTickCount>
    36f6:	61f8      	str	r0, [r7, #28]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36f8:	f243 13dc 	movw	r3, #12764	; 0x31dc
    36fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3706:	4618      	mov	r0, r3
    3708:	69f9      	ldr	r1, [r7, #28]
    370a:	f001 ff81 	bl	5610 <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    370e:	2300      	movs	r3, #0
    3710:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3712:	e094      	b.n	383e <vR_Servant+0x19e>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3714:	f107 030c 	add.w	r3, r7, #12
    3718:	4618      	mov	r0, r3
    371a:	f243 114c 	movw	r1, #12620	; 0x314c
    371e:	f2c2 0101 	movt	r1, #8193	; 0x2001
    3722:	f7ff faad 	bl	2c80 <xEventListGenericTransit>
    3726:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    372a:	f1b3 3fff 	cmp.w	r3, #4294967295
    372e:	d100      	bne.n	3732 <vR_Servant+0x92>
            {
                // no event
                break;
    3730:	e089      	b.n	3846 <vR_Servant+0x1a6>
            }
            else if( xResult == 0 )
    3732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3734:	2b00      	cmp	r3, #0
    3736:	d100      	bne.n	373a <vR_Servant+0x9a>
            {
                // not time yet
                break;
    3738:	e085      	b.n	3846 <vR_Servant+0x1a6>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    373a:	68fb      	ldr	r3, [r7, #12]
    373c:	68db      	ldr	r3, [r3, #12]
    373e:	4618      	mov	r0, r3
    3740:	f7ff f936 	bl	29b0 <xEventGetpxDestination>
    3744:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3746:	68fb      	ldr	r3, [r7, #12]
    3748:	68db      	ldr	r3, [r3, #12]
    374a:	4618      	mov	r0, r3
    374c:	f7ff f924 	bl	2998 <xEventGetpxSource>
    3750:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3752:	2301      	movs	r3, #1
    3754:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3756:	2300      	movs	r3, #0
    3758:	63fb      	str	r3, [r7, #60]	; 0x3c
    375a:	e068      	b.n	382e <vR_Servant+0x18e>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    375c:	f243 1268 	movw	r2, #12648	; 0x3168
    3760:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3766:	460b      	mov	r3, r1
    3768:	005b      	lsls	r3, r3, #1
    376a:	440b      	add	r3, r1
    376c:	009b      	lsls	r3, r3, #2
    376e:	4413      	add	r3, r2
    3770:	3304      	adds	r3, #4
    3772:	681b      	ldr	r3, [r3, #0]
    3774:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3776:	f243 1268 	movw	r2, #12648	; 0x3168
    377a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    377e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3780:	460b      	mov	r3, r1
    3782:	005b      	lsls	r3, r3, #1
    3784:	440b      	add	r3, r1
    3786:	009b      	lsls	r3, r3, #2
    3788:	4413      	add	r3, r2
    378a:	3308      	adds	r3, #8
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3790:	f243 13dc 	movw	r3, #12764	; 0x31dc
    3794:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3798:	693a      	ldr	r2, [r7, #16]
    379a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37a0:	429a      	cmp	r2, r3
    37a2:	d141      	bne.n	3828 <vR_Servant+0x188>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    37a4:	f243 13dc 	movw	r3, #12764	; 0x31dc
    37a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    37ac:	697a      	ldr	r2, [r7, #20]
    37ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37b2:	69bb      	ldr	r3, [r7, #24]
    37b4:	429a      	cmp	r2, r3
    37b6:	d127      	bne.n	3808 <vR_Servant+0x168>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    37b8:	f243 1268 	movw	r2, #12648	; 0x3168
    37bc:	f2c2 0201 	movt	r2, #8193	; 0x2001
    37c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37c2:	460b      	mov	r3, r1
    37c4:	005b      	lsls	r3, r3, #1
    37c6:	440b      	add	r3, r1
    37c8:	009b      	lsls	r3, r3, #2
    37ca:	4413      	add	r3, r2
    37cc:	330c      	adds	r3, #12
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	2b02      	cmp	r3, #2
    37d2:	d10b      	bne.n	37ec <vR_Servant+0x14c>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    37d4:	f246 10f4 	movw	r0, #25076	; 0x61f4
    37d8:	f2c0 0000 	movt	r0, #0
    37dc:	f002 fa4a 	bl	5c74 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	68db      	ldr	r3, [r3, #12]
    37e4:	4618      	mov	r0, r3
    37e6:	f7ff fafd 	bl	2de4 <vEventGenericDelete>
    37ea:	e01d      	b.n	3828 <vR_Servant+0x188>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    37ec:	f243 1268 	movw	r2, #12648	; 0x3168
    37f0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    37f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37f6:	460b      	mov	r3, r1
    37f8:	005b      	lsls	r3, r3, #1
    37fa:	440b      	add	r3, r1
    37fc:	009b      	lsls	r3, r3, #2
    37fe:	4413      	add	r3, r2
    3800:	330c      	adds	r3, #12
    3802:	2202      	movs	r2, #2
    3804:	601a      	str	r2, [r3, #0]
    3806:	e00f      	b.n	3828 <vR_Servant+0x188>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3808:	f243 1268 	movw	r2, #12648	; 0x3168
    380c:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3812:	460b      	mov	r3, r1
    3814:	005b      	lsls	r3, r3, #1
    3816:	440b      	add	r3, r1
    3818:	009b      	lsls	r3, r3, #2
    381a:	4413      	add	r3, r2
    381c:	330c      	adds	r3, #12
    381e:	681b      	ldr	r3, [r3, #0]
    3820:	2b01      	cmp	r3, #1
    3822:	d101      	bne.n	3828 <vR_Servant+0x188>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3824:	2300      	movs	r3, #0
    3826:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    382a:	3301      	adds	r3, #1
    382c:	63fb      	str	r3, [r7, #60]	; 0x3c
    382e:	f243 1368 	movw	r3, #12648	; 0x3168
    3832:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3836:	681a      	ldr	r2, [r3, #0]
    3838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    383a:	429a      	cmp	r2, r3
    383c:	dc8e      	bgt.n	375c <vR_Servant+0xbc>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3840:	2b00      	cmp	r3, #0
    3842:	f43f af67 	beq.w	3714 <vR_Servant+0x74>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3848:	f1b3 3fff 	cmp.w	r3, #4294967295
    384c:	d100      	bne.n	3850 <vR_Servant+0x1b0>
        {
            //vTaskDelayLET();
            continue; 
    384e:	e04d      	b.n	38ec <vR_Servant+0x24c>
        }
        else if ( xResult == 0 )
    3850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3852:	2b00      	cmp	r3, #0
    3854:	d104      	bne.n	3860 <vR_Servant+0x1c0>
        {
            //vTaskDelayLET();
            vPrintNumber( 400 );
    3856:	f44f 70c8 	mov.w	r0, #400	; 0x190
    385a:	f002 fa25 	bl	5ca8 <vPrintNumber>
            //vPrintString("not time yet\n\r");
            continue;
    385e:	e045      	b.n	38ec <vR_Servant+0x24c>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3860:	2300      	movs	r3, #0
    3862:	63fb      	str	r3, [r7, #60]	; 0x3c
    3864:	e028      	b.n	38b8 <vR_Servant+0x218>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3866:	f243 1268 	movw	r2, #12648	; 0x3168
    386a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    386e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3870:	460b      	mov	r3, r1
    3872:	005b      	lsls	r3, r3, #1
    3874:	440b      	add	r3, r1
    3876:	009b      	lsls	r3, r3, #2
    3878:	4413      	add	r3, r2
    387a:	3308      	adds	r3, #8
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3880:	f243 13dc 	movw	r3, #12764	; 0x31dc
    3884:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3888:	693a      	ldr	r2, [r7, #16]
    388a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3890:	429a      	cmp	r2, r3
    3892:	d10e      	bne.n	38b2 <vR_Servant+0x212>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3894:	f243 1268 	movw	r2, #12648	; 0x3168
    3898:	f2c2 0201 	movt	r2, #8193	; 0x2001
    389c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    389e:	460b      	mov	r3, r1
    38a0:	005b      	lsls	r3, r3, #1
    38a2:	440b      	add	r3, r1
    38a4:	009b      	lsls	r3, r3, #2
    38a6:	4413      	add	r3, r2
    38a8:	330c      	adds	r3, #12
    38aa:	2201      	movs	r2, #1
    38ac:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    38ae:	693b      	ldr	r3, [r7, #16]
    38b0:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38b4:	3301      	adds	r3, #1
    38b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    38b8:	f243 1368 	movw	r3, #12648	; 0x3168
    38bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    38c0:	681a      	ldr	r2, [r3, #0]
    38c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38c4:	429a      	cmp	r2, r3
    38c6:	dcce      	bgt.n	3866 <vR_Servant+0x1c6>
                }
            }

            //vTaskDelayLET();

            vPrintNumber( 400 );
    38c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    38cc:	f002 f9ec 	bl	5ca8 <vPrintNumber>

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    38d0:	f243 13b4 	movw	r3, #12724	; 0x31b4
    38d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    38d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    38da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38de:	4618      	mov	r0, r3
    38e0:	2100      	movs	r1, #0
    38e2:	2200      	movs	r2, #0
    38e4:	2300      	movs	r3, #0
    38e6:	f000 fa7f 	bl	3de8 <xQueueGenericSend>
        }
    }
    38ea:	e6f0      	b.n	36ce <vR_Servant+0x2e>
    38ec:	e6ef      	b.n	36ce <vR_Servant+0x2e>
    38ee:	bf00      	nop

000038f0 <vAppInitialise>:


struct xRelationship xRelations;

void vAppInitialise()
{
    38f0:	b480      	push	{r7}
    38f2:	b083      	sub	sp, #12
    38f4:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;

    for( i = 0; i < NUMBEROFTASK; ++ i )
    38f6:	2300      	movs	r3, #0
    38f8:	607b      	str	r3, [r7, #4]
    38fa:	e00b      	b.n	3914 <vAppInitialise+0x24>
    {
        xPeriodOfTask[i] = 600;
    38fc:	f243 1364 	movw	r3, #12644	; 0x3164
    3900:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3904:	687a      	ldr	r2, [r7, #4]
    3906:	f44f 7116 	mov.w	r1, #600	; 0x258
    390a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

void vAppInitialise()
{
    portBASE_TYPE i, j;

    for( i = 0; i < NUMBEROFTASK; ++ i )
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	3301      	adds	r3, #1
    3912:	607b      	str	r3, [r7, #4]
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	2b00      	cmp	r3, #0
    3918:	ddf0      	ble.n	38fc <vAppInitialise+0xc>
    {
        xPeriodOfTask[i] = 600;
    }

    /* init the LET of all servants including R-servant */
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    391a:	2300      	movs	r3, #0
    391c:	607b      	str	r3, [r7, #4]
    391e:	e00a      	b.n	3936 <vAppInitialise+0x46>
    {
        xLetOfServant[i] = 1;
    3920:	f243 13c8 	movw	r3, #12744	; 0x31c8
    3924:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3928:	687a      	ldr	r2, [r7, #4]
    392a:	2101      	movs	r1, #1
    392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    {
        xPeriodOfTask[i] = 600;
    }

    /* init the LET of all servants including R-servant */
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	3301      	adds	r3, #1
    3934:	607b      	str	r3, [r7, #4]
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	2b04      	cmp	r3, #4
    393a:	ddf1      	ble.n	3920 <vAppInitialise+0x30>
    {
        xLetOfServant[i] = 1;
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    393c:	2300      	movs	r3, #0
    393e:	607b      	str	r3, [r7, #4]
    3940:	e016      	b.n	3970 <vAppInitialise+0x80>
    {
        for( j = 0; j <= xConcurrents; ++ j )
    3942:	2300      	movs	r3, #0
    3944:	603b      	str	r3, [r7, #0]
    3946:	e00d      	b.n	3964 <vAppInitialise+0x74>
        {
            xTaskOfServant[i*(xConcurrents + 1)+j] = i;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	009a      	lsls	r2, r3, #2
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	441a      	add	r2, r3
    3950:	f243 1350 	movw	r3, #12624	; 0x3150
    3954:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3958:	6879      	ldr	r1, [r7, #4]
    395a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 0; j <= xConcurrents; ++ j )
    395e:	683b      	ldr	r3, [r7, #0]
    3960:	3301      	adds	r3, #1
    3962:	603b      	str	r3, [r7, #0]
    3964:	683b      	ldr	r3, [r7, #0]
    3966:	2b03      	cmp	r3, #3
    3968:	ddee      	ble.n	3948 <vAppInitialise+0x58>
    {
        xLetOfServant[i] = 1;
    }
    
    /* init the task id that every servant belong to */ 
    for( i = 0; i < NUMBEROFTASK; ++ i )
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	3301      	adds	r3, #1
    396e:	607b      	str	r3, [r7, #4]
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	2b00      	cmp	r3, #0
    3974:	dde5      	ble.n	3942 <vAppInitialise+0x52>
        {
            xTaskOfServant[i*(xConcurrents + 1)+j] = i;
        }
    }

    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor
    3976:	f243 1368 	movw	r3, #12648	; 0x3168
    397a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    397e:	2206      	movs	r2, #6
    3980:	601a      	str	r2, [r3, #0]

    /* from 0 to NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3982:	2300      	movs	r3, #0
    3984:	607b      	str	r3, [r7, #4]
    3986:	e048      	b.n	3a1a <vAppInitialise+0x12a>
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3988:	2301      	movs	r3, #1
    398a:	603b      	str	r3, [r7, #0]
    398c:	e03f      	b.n	3a0e <vAppInitialise+0x11e>
        {
            xRelations.xRelation[i*(xConcurrents) + j - 1].xInFlag = i*(xConcurrents + 1);
    398e:	687a      	ldr	r2, [r7, #4]
    3990:	4613      	mov	r3, r2
    3992:	005b      	lsls	r3, r3, #1
    3994:	441a      	add	r2, r3
    3996:	683b      	ldr	r3, [r7, #0]
    3998:	4413      	add	r3, r2
    399a:	1e59      	subs	r1, r3, #1
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	0098      	lsls	r0, r3, #2
    39a0:	f243 1268 	movw	r2, #12648	; 0x3168
    39a4:	f2c2 0201 	movt	r2, #8193	; 0x2001
    39a8:	460b      	mov	r3, r1
    39aa:	005b      	lsls	r3, r3, #1
    39ac:	440b      	add	r3, r1
    39ae:	009b      	lsls	r3, r3, #2
    39b0:	4413      	add	r3, r2
    39b2:	3304      	adds	r3, #4
    39b4:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1].xOutFlag = i*(xConcurrents + 1) + j;
    39b6:	687a      	ldr	r2, [r7, #4]
    39b8:	4613      	mov	r3, r2
    39ba:	005b      	lsls	r3, r3, #1
    39bc:	441a      	add	r2, r3
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	4413      	add	r3, r2
    39c2:	1e59      	subs	r1, r3, #1
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	009a      	lsls	r2, r3, #2
    39c8:	683b      	ldr	r3, [r7, #0]
    39ca:	18d0      	adds	r0, r2, r3
    39cc:	f243 1268 	movw	r2, #12648	; 0x3168
    39d0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    39d4:	460b      	mov	r3, r1
    39d6:	005b      	lsls	r3, r3, #1
    39d8:	440b      	add	r3, r1
    39da:	009b      	lsls	r3, r3, #2
    39dc:	4413      	add	r3, r2
    39de:	3308      	adds	r3, #8
    39e0:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
    39e2:	687a      	ldr	r2, [r7, #4]
    39e4:	4613      	mov	r3, r2
    39e6:	005b      	lsls	r3, r3, #1
    39e8:	441a      	add	r2, r3
    39ea:	683b      	ldr	r3, [r7, #0]
    39ec:	4413      	add	r3, r2
    39ee:	1e59      	subs	r1, r3, #1
    39f0:	f243 1268 	movw	r2, #12648	; 0x3168
    39f4:	f2c2 0201 	movt	r2, #8193	; 0x2001
    39f8:	460b      	mov	r3, r1
    39fa:	005b      	lsls	r3, r3, #1
    39fc:	440b      	add	r3, r1
    39fe:	009b      	lsls	r3, r3, #2
    3a00:	4413      	add	r3, r2
    3a02:	330c      	adds	r3, #12
    3a04:	2201      	movs	r2, #1
    3a06:	601a      	str	r2, [r3, #0]
    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor

    /* from 0 to NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3a08:	683b      	ldr	r3, [r7, #0]
    3a0a:	3301      	adds	r3, #1
    3a0c:	603b      	str	r3, [r7, #0]
    3a0e:	683b      	ldr	r3, [r7, #0]
    3a10:	2b03      	cmp	r3, #3
    3a12:	ddbc      	ble.n	398e <vAppInitialise+0x9e>
    }

    xRelations.xNumOfRelation = xConcurrents * 2 * NUMBEROFTASK; // every task has 6 S-Servant and one Sensor

    /* from 0 to NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	3301      	adds	r3, #1
    3a18:	607b      	str	r3, [r7, #4]
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	ddb3      	ble.n	3988 <vAppInitialise+0x98>
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
        }
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3a20:	2300      	movs	r3, #0
    3a22:	607b      	str	r3, [r7, #4]
    3a24:	e048      	b.n	3ab8 <vAppInitialise+0x1c8>
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3a26:	2301      	movs	r3, #1
    3a28:	603b      	str	r3, [r7, #0]
    3a2a:	e03f      	b.n	3aac <vAppInitialise+0x1bc>
        {
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xInFlag = i*(xConcurrents + 1) + j;
    3a2c:	687a      	ldr	r2, [r7, #4]
    3a2e:	4613      	mov	r3, r2
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	441a      	add	r2, r3
    3a34:	683b      	ldr	r3, [r7, #0]
    3a36:	4413      	add	r3, r2
    3a38:	1c99      	adds	r1, r3, #2
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	009a      	lsls	r2, r3, #2
    3a3e:	683b      	ldr	r3, [r7, #0]
    3a40:	18d0      	adds	r0, r2, r3
    3a42:	f243 1268 	movw	r2, #12648	; 0x3168
    3a46:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3a4a:	460b      	mov	r3, r1
    3a4c:	005b      	lsls	r3, r3, #1
    3a4e:	440b      	add	r3, r1
    3a50:	009b      	lsls	r3, r3, #2
    3a52:	4413      	add	r3, r2
    3a54:	3304      	adds	r3, #4
    3a56:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xOutFlag = i*(xConcurrents + 1) ;
    3a58:	687a      	ldr	r2, [r7, #4]
    3a5a:	4613      	mov	r3, r2
    3a5c:	005b      	lsls	r3, r3, #1
    3a5e:	441a      	add	r2, r3
    3a60:	683b      	ldr	r3, [r7, #0]
    3a62:	4413      	add	r3, r2
    3a64:	1c99      	adds	r1, r3, #2
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	0098      	lsls	r0, r3, #2
    3a6a:	f243 1268 	movw	r2, #12648	; 0x3168
    3a6e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3a72:	460b      	mov	r3, r1
    3a74:	005b      	lsls	r3, r3, #1
    3a76:	440b      	add	r3, r1
    3a78:	009b      	lsls	r3, r3, #2
    3a7a:	4413      	add	r3, r2
    3a7c:	3308      	adds	r3, #8
    3a7e:	6018      	str	r0, [r3, #0]
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xFlag = 1;
    3a80:	687a      	ldr	r2, [r7, #4]
    3a82:	4613      	mov	r3, r2
    3a84:	005b      	lsls	r3, r3, #1
    3a86:	441a      	add	r2, r3
    3a88:	683b      	ldr	r3, [r7, #0]
    3a8a:	4413      	add	r3, r2
    3a8c:	1c99      	adds	r1, r3, #2
    3a8e:	f243 1268 	movw	r2, #12648	; 0x3168
    3a92:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3a96:	460b      	mov	r3, r1
    3a98:	005b      	lsls	r3, r3, #1
    3a9a:	440b      	add	r3, r1
    3a9c:	009b      	lsls	r3, r3, #2
    3a9e:	4413      	add	r3, r2
    3aa0:	330c      	adds	r3, #12
    3aa2:	2201      	movs	r2, #1
    3aa4:	601a      	str	r2, [r3, #0]
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    {
        for( j = 1; j <= xConcurrents; ++ j )
    3aa6:	683b      	ldr	r3, [r7, #0]
    3aa8:	3301      	adds	r3, #1
    3aaa:	603b      	str	r3, [r7, #0]
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	2b03      	cmp	r3, #3
    3ab0:	ddbc      	ble.n	3a2c <vAppInitialise+0x13c>
            xRelations.xRelation[i*(xConcurrents) + j - 1].xFlag = 1;
        }
    }

    /* from NUMBEROFTASK*xConcurrents to 2*NUMBEROFTASK*xConcurrents */
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	3301      	adds	r3, #1
    3ab6:	607b      	str	r3, [r7, #4]
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	2b00      	cmp	r3, #0
    3abc:	ddb3      	ble.n	3a26 <vAppInitialise+0x136>
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xInFlag = i*(xConcurrents + 1) + j;
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xOutFlag = i*(xConcurrents + 1) ;
            xRelations.xRelation[i*(xConcurrents) + j - 1 + NUMBEROFTASK*xConcurrents].xFlag = 1;
        }
    }
}
    3abe:	370c      	adds	r7, #12
    3ac0:	46bd      	mov	sp, r7
    3ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac6:	4770      	bx	lr

00003ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3ac8:	b480      	push	{r7}
    3aca:	b083      	sub	sp, #12
    3acc:	af00      	add	r7, sp, #0
    3ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	f103 0208 	add.w	r2, r3, #8
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	f04f 32ff 	mov.w	r2, #4294967295
    3ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	f103 0208 	add.w	r2, r3, #8
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3aec:	687b      	ldr	r3, [r7, #4]
    3aee:	f103 0208 	add.w	r2, r3, #8
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	2200      	movs	r2, #0
    3afa:	601a      	str	r2, [r3, #0]
}
    3afc:	370c      	adds	r7, #12
    3afe:	46bd      	mov	sp, r7
    3b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop

00003b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3b08:	b480      	push	{r7}
    3b0a:	b083      	sub	sp, #12
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	2200      	movs	r2, #0
    3b14:	611a      	str	r2, [r3, #16]
}
    3b16:	370c      	adds	r7, #12
    3b18:	46bd      	mov	sp, r7
    3b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b1e:	4770      	bx	lr

00003b20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3b20:	b480      	push	{r7}
    3b22:	b085      	sub	sp, #20
    3b24:	af00      	add	r7, sp, #0
    3b26:	6078      	str	r0, [r7, #4]
    3b28:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	685b      	ldr	r3, [r3, #4]
    3b2e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3b30:	68fb      	ldr	r3, [r7, #12]
    3b32:	685a      	ldr	r2, [r3, #4]
    3b34:	683b      	ldr	r3, [r7, #0]
    3b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	685a      	ldr	r2, [r3, #4]
    3b3c:	683b      	ldr	r3, [r7, #0]
    3b3e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3b40:	68fb      	ldr	r3, [r7, #12]
    3b42:	685b      	ldr	r3, [r3, #4]
    3b44:	683a      	ldr	r2, [r7, #0]
    3b46:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3b48:	68fb      	ldr	r3, [r7, #12]
    3b4a:	683a      	ldr	r2, [r7, #0]
    3b4c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	683a      	ldr	r2, [r7, #0]
    3b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3b54:	683b      	ldr	r3, [r7, #0]
    3b56:	687a      	ldr	r2, [r7, #4]
    3b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	1c5a      	adds	r2, r3, #1
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	601a      	str	r2, [r3, #0]
}
    3b64:	3714      	adds	r7, #20
    3b66:	46bd      	mov	sp, r7
    3b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop

00003b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3b70:	b480      	push	{r7}
    3b72:	b085      	sub	sp, #20
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
    3b78:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3b7a:	683b      	ldr	r3, [r7, #0]
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3b80:	68bb      	ldr	r3, [r7, #8]
    3b82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b86:	d103      	bne.n	3b90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	691b      	ldr	r3, [r3, #16]
    3b8c:	60fb      	str	r3, [r7, #12]
    3b8e:	e00c      	b.n	3baa <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3b90:	687b      	ldr	r3, [r7, #4]
    3b92:	3308      	adds	r3, #8
    3b94:	60fb      	str	r3, [r7, #12]
    3b96:	e002      	b.n	3b9e <vListInsert+0x2e>
    3b98:	68fb      	ldr	r3, [r7, #12]
    3b9a:	685b      	ldr	r3, [r3, #4]
    3b9c:	60fb      	str	r3, [r7, #12]
    3b9e:	68fb      	ldr	r3, [r7, #12]
    3ba0:	685b      	ldr	r3, [r3, #4]
    3ba2:	681a      	ldr	r2, [r3, #0]
    3ba4:	68bb      	ldr	r3, [r7, #8]
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d9f6      	bls.n	3b98 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	685a      	ldr	r2, [r3, #4]
    3bae:	683b      	ldr	r3, [r7, #0]
    3bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3bb2:	683b      	ldr	r3, [r7, #0]
    3bb4:	685b      	ldr	r3, [r3, #4]
    3bb6:	683a      	ldr	r2, [r7, #0]
    3bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3bba:	683b      	ldr	r3, [r7, #0]
    3bbc:	68fa      	ldr	r2, [r7, #12]
    3bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	683a      	ldr	r2, [r7, #0]
    3bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	687a      	ldr	r2, [r7, #4]
    3bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	1c5a      	adds	r2, r3, #1
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	601a      	str	r2, [r3, #0]
}
    3bd6:	3714      	adds	r7, #20
    3bd8:	46bd      	mov	sp, r7
    3bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bde:	4770      	bx	lr

00003be0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3be0:	b480      	push	{r7}
    3be2:	b085      	sub	sp, #20
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	685b      	ldr	r3, [r3, #4]
    3bec:	687a      	ldr	r2, [r7, #4]
    3bee:	6892      	ldr	r2, [r2, #8]
    3bf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	689b      	ldr	r3, [r3, #8]
    3bf6:	687a      	ldr	r2, [r7, #4]
    3bf8:	6852      	ldr	r2, [r2, #4]
    3bfa:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	691b      	ldr	r3, [r3, #16]
    3c00:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3c02:	68fb      	ldr	r3, [r7, #12]
    3c04:	685a      	ldr	r2, [r3, #4]
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	429a      	cmp	r2, r3
    3c0a:	d103      	bne.n	3c14 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	689a      	ldr	r2, [r3, #8]
    3c10:	68fb      	ldr	r3, [r7, #12]
    3c12:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	2200      	movs	r2, #0
    3c18:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3c1a:	68fb      	ldr	r3, [r7, #12]
    3c1c:	681b      	ldr	r3, [r3, #0]
    3c1e:	1e5a      	subs	r2, r3, #1
    3c20:	68fb      	ldr	r3, [r7, #12]
    3c22:	601a      	str	r2, [r3, #0]
}
    3c24:	3714      	adds	r7, #20
    3c26:	46bd      	mov	sp, r7
    3c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop

00003c30 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b084      	sub	sp, #16
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
    3c38:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3c3a:	2301      	movs	r3, #1
    3c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3c3e:	683b      	ldr	r3, [r7, #0]
    3c40:	2b01      	cmp	r3, #1
    3c42:	d00b      	beq.n	3c5c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3c48:	2b00      	cmp	r3, #0
    3c4a:	d001      	beq.n	3c50 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3c4c:	2300      	movs	r3, #0
    3c4e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	691b      	ldr	r3, [r3, #16]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d001      	beq.n	3c5c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3c58:	2300      	movs	r3, #0
    3c5a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3c5c:	68fb      	ldr	r3, [r7, #12]
    3c5e:	2b01      	cmp	r3, #1
    3c60:	d12f      	bne.n	3cc2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	681a      	ldr	r2, [r3, #0]
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3c6a:	6879      	ldr	r1, [r7, #4]
    3c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3c6e:	fb01 f303 	mul.w	r3, r1, r3
    3c72:	441a      	add	r2, r3
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	2200      	movs	r2, #0
    3c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	681a      	ldr	r2, [r3, #0]
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	681a      	ldr	r2, [r3, #0]
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3c8e:	3b01      	subs	r3, #1
    3c90:	6879      	ldr	r1, [r7, #4]
    3c92:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3c94:	fb01 f303 	mul.w	r3, r1, r3
    3c98:	441a      	add	r2, r3
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	f04f 32ff 	mov.w	r2, #4294967295
    3ca4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	f04f 32ff 	mov.w	r2, #4294967295
    3cac:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	3310      	adds	r3, #16
    3cb2:	4618      	mov	r0, r3
    3cb4:	f7ff ff08 	bl	3ac8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3cb8:	687b      	ldr	r3, [r7, #4]
    3cba:	3324      	adds	r3, #36	; 0x24
    3cbc:	4618      	mov	r0, r3
    3cbe:	f7ff ff03 	bl	3ac8 <vListInitialise>
	}

	return xReturn;
    3cc2:	68fb      	ldr	r3, [r7, #12]
}
    3cc4:	4618      	mov	r0, r3
    3cc6:	3710      	adds	r7, #16
    3cc8:	46bd      	mov	sp, r7
    3cca:	bd80      	pop	{r7, pc}

00003ccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3ccc:	b580      	push	{r7, lr}
    3cce:	b088      	sub	sp, #32
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	60f8      	str	r0, [r7, #12]
    3cd4:	60b9      	str	r1, [r7, #8]
    3cd6:	4613      	mov	r3, r2
    3cd8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3cda:	2300      	movs	r3, #0
    3cdc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3cde:	68fb      	ldr	r3, [r7, #12]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d026      	beq.n	3d32 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3ce4:	204c      	movs	r0, #76	; 0x4c
    3ce6:	f001 fda7 	bl	5838 <pvPortMalloc>
    3cea:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3cec:	69bb      	ldr	r3, [r7, #24]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d01f      	beq.n	3d32 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	68ba      	ldr	r2, [r7, #8]
    3cf6:	fb02 f303 	mul.w	r3, r2, r3
    3cfa:	3301      	adds	r3, #1
    3cfc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3cfe:	6978      	ldr	r0, [r7, #20]
    3d00:	f001 fd9a 	bl	5838 <pvPortMalloc>
    3d04:	4602      	mov	r2, r0
    3d06:	69bb      	ldr	r3, [r7, #24]
    3d08:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3d0a:	69bb      	ldr	r3, [r7, #24]
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d00c      	beq.n	3d2c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3d12:	69bb      	ldr	r3, [r7, #24]
    3d14:	68fa      	ldr	r2, [r7, #12]
    3d16:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3d18:	69bb      	ldr	r3, [r7, #24]
    3d1a:	68ba      	ldr	r2, [r7, #8]
    3d1c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3d1e:	69b8      	ldr	r0, [r7, #24]
    3d20:	2101      	movs	r1, #1
    3d22:	f7ff ff85 	bl	3c30 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3d26:	69bb      	ldr	r3, [r7, #24]
    3d28:	61fb      	str	r3, [r7, #28]
    3d2a:	e002      	b.n	3d32 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3d2c:	69b8      	ldr	r0, [r7, #24]
    3d2e:	f001 fe47 	bl	59c0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3d32:	69fb      	ldr	r3, [r7, #28]
}
    3d34:	4618      	mov	r0, r3
    3d36:	3720      	adds	r7, #32
    3d38:	46bd      	mov	sp, r7
    3d3a:	bd80      	pop	{r7, pc}

00003d3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b084      	sub	sp, #16
    3d40:	af00      	add	r7, sp, #0
    3d42:	4603      	mov	r3, r0
    3d44:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3d46:	204c      	movs	r0, #76	; 0x4c
    3d48:	f001 fd76 	bl	5838 <pvPortMalloc>
    3d4c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3d4e:	68fb      	ldr	r3, [r7, #12]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d02c      	beq.n	3dae <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3d54:	68fb      	ldr	r3, [r7, #12]
    3d56:	2200      	movs	r2, #0
    3d58:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3d5a:	68fb      	ldr	r3, [r7, #12]
    3d5c:	2200      	movs	r2, #0
    3d5e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3d60:	68fb      	ldr	r3, [r7, #12]
    3d62:	2200      	movs	r2, #0
    3d64:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3d66:	68fb      	ldr	r3, [r7, #12]
    3d68:	2200      	movs	r2, #0
    3d6a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3d6c:	68fb      	ldr	r3, [r7, #12]
    3d6e:	2200      	movs	r2, #0
    3d70:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3d72:	68fb      	ldr	r3, [r7, #12]
    3d74:	2201      	movs	r2, #1
    3d76:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	2200      	movs	r2, #0
    3d7c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3d7e:	68fb      	ldr	r3, [r7, #12]
    3d80:	f04f 32ff 	mov.w	r2, #4294967295
    3d84:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	f04f 32ff 	mov.w	r2, #4294967295
    3d8c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3d8e:	68fb      	ldr	r3, [r7, #12]
    3d90:	3310      	adds	r3, #16
    3d92:	4618      	mov	r0, r3
    3d94:	f7ff fe98 	bl	3ac8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3d98:	68fb      	ldr	r3, [r7, #12]
    3d9a:	3324      	adds	r3, #36	; 0x24
    3d9c:	4618      	mov	r0, r3
    3d9e:	f7ff fe93 	bl	3ac8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3da2:	68f8      	ldr	r0, [r7, #12]
    3da4:	2100      	movs	r1, #0
    3da6:	2200      	movs	r2, #0
    3da8:	2300      	movs	r3, #0
    3daa:	f000 f81d 	bl	3de8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3dae:	68fb      	ldr	r3, [r7, #12]
	}
    3db0:	4618      	mov	r0, r3
    3db2:	3710      	adds	r7, #16
    3db4:	46bd      	mov	sp, r7
    3db6:	bd80      	pop	{r7, pc}

00003db8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3db8:	b580      	push	{r7, lr}
    3dba:	b084      	sub	sp, #16
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3dc0:	f001 fcc0 	bl	5744 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	681b      	ldr	r3, [r3, #0]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d103      	bne.n	3dd4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	685b      	ldr	r3, [r3, #4]
    3dd0:	60fb      	str	r3, [r7, #12]
    3dd2:	e001      	b.n	3dd8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3dd4:	2300      	movs	r3, #0
    3dd6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3dd8:	f001 fcca 	bl	5770 <vPortExitCritical>
		
		return pxReturn;
    3ddc:	68fb      	ldr	r3, [r7, #12]
	}
    3dde:	4618      	mov	r0, r3
    3de0:	3710      	adds	r7, #16
    3de2:	46bd      	mov	sp, r7
    3de4:	bd80      	pop	{r7, pc}
    3de6:	bf00      	nop

00003de8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3de8:	b580      	push	{r7, lr}
    3dea:	b088      	sub	sp, #32
    3dec:	af00      	add	r7, sp, #0
    3dee:	60f8      	str	r0, [r7, #12]
    3df0:	60b9      	str	r1, [r7, #8]
    3df2:	607a      	str	r2, [r7, #4]
    3df4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3df6:	2300      	movs	r3, #0
    3df8:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3dfa:	f001 fca3 	bl	5744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3dfe:	68fb      	ldr	r3, [r7, #12]
    3e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3e02:	68fb      	ldr	r3, [r7, #12]
    3e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3e06:	429a      	cmp	r2, r3
    3e08:	d216      	bcs.n	3e38 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3e0a:	68f8      	ldr	r0, [r7, #12]
    3e0c:	68b9      	ldr	r1, [r7, #8]
    3e0e:	683a      	ldr	r2, [r7, #0]
    3e10:	f000 f9d6 	bl	41c0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e14:	68fb      	ldr	r3, [r7, #12]
    3e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d009      	beq.n	3e30 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3e1c:	68fb      	ldr	r3, [r7, #12]
    3e1e:	3324      	adds	r3, #36	; 0x24
    3e20:	4618      	mov	r0, r3
    3e22:	f001 f905 	bl	5030 <xTaskRemoveFromEventList>
    3e26:	4603      	mov	r3, r0
    3e28:	2b01      	cmp	r3, #1
    3e2a:	d101      	bne.n	3e30 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3e2c:	f001 fc7c 	bl	5728 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3e30:	f001 fc9e 	bl	5770 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3e34:	2301      	movs	r3, #1
    3e36:	e059      	b.n	3eec <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d103      	bne.n	3e46 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3e3e:	f001 fc97 	bl	5770 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3e42:	2300      	movs	r3, #0
    3e44:	e052      	b.n	3eec <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3e46:	69fb      	ldr	r3, [r7, #28]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d106      	bne.n	3e5a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3e4c:	f107 0314 	add.w	r3, r7, #20
    3e50:	4618      	mov	r0, r3
    3e52:	f001 f945 	bl	50e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3e56:	2301      	movs	r3, #1
    3e58:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3e5a:	f001 fc89 	bl	5770 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3e5e:	f000 fe93 	bl	4b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3e62:	f001 fc6f 	bl	5744 <vPortEnterCritical>
    3e66:	68fb      	ldr	r3, [r7, #12]
    3e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e6e:	d102      	bne.n	3e76 <xQueueGenericSend+0x8e>
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	2200      	movs	r2, #0
    3e74:	645a      	str	r2, [r3, #68]	; 0x44
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e7e:	d102      	bne.n	3e86 <xQueueGenericSend+0x9e>
    3e80:	68fb      	ldr	r3, [r7, #12]
    3e82:	2200      	movs	r2, #0
    3e84:	649a      	str	r2, [r3, #72]	; 0x48
    3e86:	f001 fc73 	bl	5770 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e8a:	f107 0214 	add.w	r2, r7, #20
    3e8e:	1d3b      	adds	r3, r7, #4
    3e90:	4610      	mov	r0, r2
    3e92:	4619      	mov	r1, r3
    3e94:	f001 f93c 	bl	5110 <xTaskCheckForTimeOut>
    3e98:	4603      	mov	r3, r0
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d11e      	bne.n	3edc <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3e9e:	68f8      	ldr	r0, [r7, #12]
    3ea0:	f000 fa86 	bl	43b0 <prvIsQueueFull>
    3ea4:	4603      	mov	r3, r0
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d012      	beq.n	3ed0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	f103 0210 	add.w	r2, r3, #16
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	4610      	mov	r0, r2
    3eb4:	4619      	mov	r1, r3
    3eb6:	f001 f883 	bl	4fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3eba:	68f8      	ldr	r0, [r7, #12]
    3ebc:	f000 fa02 	bl	42c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3ec0:	f000 fe74 	bl	4bac <xTaskResumeAll>
    3ec4:	4603      	mov	r3, r0
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d10f      	bne.n	3eea <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3eca:	f001 fc2d 	bl	5728 <vPortYieldFromISR>
    3ece:	e00c      	b.n	3eea <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3ed0:	68f8      	ldr	r0, [r7, #12]
    3ed2:	f000 f9f7 	bl	42c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3ed6:	f000 fe69 	bl	4bac <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3eda:	e78e      	b.n	3dfa <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3edc:	68f8      	ldr	r0, [r7, #12]
    3ede:	f000 f9f1 	bl	42c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3ee2:	f000 fe63 	bl	4bac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3ee6:	2300      	movs	r3, #0
    3ee8:	e000      	b.n	3eec <xQueueGenericSend+0x104>
		}
	}
    3eea:	e786      	b.n	3dfa <xQueueGenericSend+0x12>
}
    3eec:	4618      	mov	r0, r3
    3eee:	3720      	adds	r7, #32
    3ef0:	46bd      	mov	sp, r7
    3ef2:	bd80      	pop	{r7, pc}

00003ef4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b086      	sub	sp, #24
    3ef8:	af00      	add	r7, sp, #0
    3efa:	60f8      	str	r0, [r7, #12]
    3efc:	60b9      	str	r1, [r7, #8]
    3efe:	607a      	str	r2, [r7, #4]
    3f00:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f02:	2300      	movs	r3, #0
    3f04:	613b      	str	r3, [r7, #16]
    3f06:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f0a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3f0e:	68fb      	ldr	r3, [r7, #12]
    3f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3f12:	68fb      	ldr	r3, [r7, #12]
    3f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f16:	429a      	cmp	r2, r3
    3f18:	d221      	bcs.n	3f5e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3f1a:	68f8      	ldr	r0, [r7, #12]
    3f1c:	68b9      	ldr	r1, [r7, #8]
    3f1e:	683a      	ldr	r2, [r7, #0]
    3f20:	f000 f94e 	bl	41c0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3f24:	68fb      	ldr	r3, [r7, #12]
    3f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f28:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f2c:	d10f      	bne.n	3f4e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f32:	2b00      	cmp	r3, #0
    3f34:	d010      	beq.n	3f58 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3f36:	68fb      	ldr	r3, [r7, #12]
    3f38:	3324      	adds	r3, #36	; 0x24
    3f3a:	4618      	mov	r0, r3
    3f3c:	f001 f878 	bl	5030 <xTaskRemoveFromEventList>
    3f40:	4603      	mov	r3, r0
    3f42:	2b00      	cmp	r3, #0
    3f44:	d008      	beq.n	3f58 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	2201      	movs	r2, #1
    3f4a:	601a      	str	r2, [r3, #0]
    3f4c:	e004      	b.n	3f58 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3f4e:	68fb      	ldr	r3, [r7, #12]
    3f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f52:	1c5a      	adds	r2, r3, #1
    3f54:	68fb      	ldr	r3, [r7, #12]
    3f56:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3f58:	2301      	movs	r3, #1
    3f5a:	617b      	str	r3, [r7, #20]
    3f5c:	e001      	b.n	3f62 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3f5e:	2300      	movs	r3, #0
    3f60:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3f62:	f04f 0000 	mov.w	r0, #0
    3f66:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3f6a:	697b      	ldr	r3, [r7, #20]
}
    3f6c:	4618      	mov	r0, r3
    3f6e:	3718      	adds	r7, #24
    3f70:	46bd      	mov	sp, r7
    3f72:	bd80      	pop	{r7, pc}

00003f74 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b088      	sub	sp, #32
    3f78:	af00      	add	r7, sp, #0
    3f7a:	60f8      	str	r0, [r7, #12]
    3f7c:	60b9      	str	r1, [r7, #8]
    3f7e:	607a      	str	r2, [r7, #4]
    3f80:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3f82:	2300      	movs	r3, #0
    3f84:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3f86:	f001 fbdd 	bl	5744 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3f8a:	68fb      	ldr	r3, [r7, #12]
    3f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d03b      	beq.n	400a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3f92:	68fb      	ldr	r3, [r7, #12]
    3f94:	68db      	ldr	r3, [r3, #12]
    3f96:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3f98:	68f8      	ldr	r0, [r7, #12]
    3f9a:	68b9      	ldr	r1, [r7, #8]
    3f9c:	f000 f96c 	bl	4278 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3fa0:	683b      	ldr	r3, [r7, #0]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d11c      	bne.n	3fe0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3fa6:	68fb      	ldr	r3, [r7, #12]
    3fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3faa:	1e5a      	subs	r2, r3, #1
    3fac:	68fb      	ldr	r3, [r7, #12]
    3fae:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3fb0:	68fb      	ldr	r3, [r7, #12]
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d104      	bne.n	3fc2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3fb8:	f001 fa5c 	bl	5474 <xTaskGetCurrentTaskHandle>
    3fbc:	4602      	mov	r2, r0
    3fbe:	68fb      	ldr	r3, [r7, #12]
    3fc0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3fc2:	68fb      	ldr	r3, [r7, #12]
    3fc4:	691b      	ldr	r3, [r3, #16]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d01b      	beq.n	4002 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	3310      	adds	r3, #16
    3fce:	4618      	mov	r0, r3
    3fd0:	f001 f82e 	bl	5030 <xTaskRemoveFromEventList>
    3fd4:	4603      	mov	r3, r0
    3fd6:	2b01      	cmp	r3, #1
    3fd8:	d113      	bne.n	4002 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    3fda:	f001 fba5 	bl	5728 <vPortYieldFromISR>
    3fde:	e010      	b.n	4002 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	69ba      	ldr	r2, [r7, #24]
    3fe4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fe6:	68fb      	ldr	r3, [r7, #12]
    3fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3fea:	2b00      	cmp	r3, #0
    3fec:	d009      	beq.n	4002 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	3324      	adds	r3, #36	; 0x24
    3ff2:	4618      	mov	r0, r3
    3ff4:	f001 f81c 	bl	5030 <xTaskRemoveFromEventList>
    3ff8:	4603      	mov	r3, r0
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d001      	beq.n	4002 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3ffe:	f001 fb93 	bl	5728 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4002:	f001 fbb5 	bl	5770 <vPortExitCritical>
				return pdPASS;
    4006:	2301      	movs	r3, #1
    4008:	e066      	b.n	40d8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	2b00      	cmp	r3, #0
    400e:	d103      	bne.n	4018 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4010:	f001 fbae 	bl	5770 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4014:	2300      	movs	r3, #0
    4016:	e05f      	b.n	40d8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4018:	69fb      	ldr	r3, [r7, #28]
    401a:	2b00      	cmp	r3, #0
    401c:	d106      	bne.n	402c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    401e:	f107 0310 	add.w	r3, r7, #16
    4022:	4618      	mov	r0, r3
    4024:	f001 f85c 	bl	50e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4028:	2301      	movs	r3, #1
    402a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    402c:	f001 fba0 	bl	5770 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4030:	f000 fdaa 	bl	4b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4034:	f001 fb86 	bl	5744 <vPortEnterCritical>
    4038:	68fb      	ldr	r3, [r7, #12]
    403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    403c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4040:	d102      	bne.n	4048 <xQueueGenericReceive+0xd4>
    4042:	68fb      	ldr	r3, [r7, #12]
    4044:	2200      	movs	r2, #0
    4046:	645a      	str	r2, [r3, #68]	; 0x44
    4048:	68fb      	ldr	r3, [r7, #12]
    404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    404c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4050:	d102      	bne.n	4058 <xQueueGenericReceive+0xe4>
    4052:	68fb      	ldr	r3, [r7, #12]
    4054:	2200      	movs	r2, #0
    4056:	649a      	str	r2, [r3, #72]	; 0x48
    4058:	f001 fb8a 	bl	5770 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    405c:	f107 0210 	add.w	r2, r7, #16
    4060:	1d3b      	adds	r3, r7, #4
    4062:	4610      	mov	r0, r2
    4064:	4619      	mov	r1, r3
    4066:	f001 f853 	bl	5110 <xTaskCheckForTimeOut>
    406a:	4603      	mov	r3, r0
    406c:	2b00      	cmp	r3, #0
    406e:	d12b      	bne.n	40c8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4070:	68f8      	ldr	r0, [r7, #12]
    4072:	f000 f973 	bl	435c <prvIsQueueEmpty>
    4076:	4603      	mov	r3, r0
    4078:	2b00      	cmp	r3, #0
    407a:	d01f      	beq.n	40bc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    407c:	68fb      	ldr	r3, [r7, #12]
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	2b00      	cmp	r3, #0
    4082:	d108      	bne.n	4096 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4084:	f001 fb5e 	bl	5744 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	685b      	ldr	r3, [r3, #4]
    408c:	4618      	mov	r0, r3
    408e:	f001 fa01 	bl	5494 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4092:	f001 fb6d 	bl	5770 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	f103 0224 	add.w	r2, r3, #36	; 0x24
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	4610      	mov	r0, r2
    40a0:	4619      	mov	r1, r3
    40a2:	f000 ff8d 	bl	4fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    40a6:	68f8      	ldr	r0, [r7, #12]
    40a8:	f000 f90c 	bl	42c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    40ac:	f000 fd7e 	bl	4bac <xTaskResumeAll>
    40b0:	4603      	mov	r3, r0
    40b2:	2b00      	cmp	r3, #0
    40b4:	d10f      	bne.n	40d6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    40b6:	f001 fb37 	bl	5728 <vPortYieldFromISR>
    40ba:	e00c      	b.n	40d6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    40bc:	68f8      	ldr	r0, [r7, #12]
    40be:	f000 f901 	bl	42c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    40c2:	f000 fd73 	bl	4bac <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    40c6:	e75e      	b.n	3f86 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    40c8:	68f8      	ldr	r0, [r7, #12]
    40ca:	f000 f8fb 	bl	42c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    40ce:	f000 fd6d 	bl	4bac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    40d2:	2300      	movs	r3, #0
    40d4:	e000      	b.n	40d8 <xQueueGenericReceive+0x164>
		}
	}
    40d6:	e756      	b.n	3f86 <xQueueGenericReceive+0x12>
}
    40d8:	4618      	mov	r0, r3
    40da:	3720      	adds	r7, #32
    40dc:	46bd      	mov	sp, r7
    40de:	bd80      	pop	{r7, pc}

000040e0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    40e0:	b580      	push	{r7, lr}
    40e2:	b086      	sub	sp, #24
    40e4:	af00      	add	r7, sp, #0
    40e6:	60f8      	str	r0, [r7, #12]
    40e8:	60b9      	str	r1, [r7, #8]
    40ea:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    40ec:	2300      	movs	r3, #0
    40ee:	613b      	str	r3, [r7, #16]
    40f0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    40f4:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    40f8:	68fb      	ldr	r3, [r7, #12]
    40fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40fc:	2b00      	cmp	r3, #0
    40fe:	d025      	beq.n	414c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4100:	68f8      	ldr	r0, [r7, #12]
    4102:	68b9      	ldr	r1, [r7, #8]
    4104:	f000 f8b8 	bl	4278 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4108:	68fb      	ldr	r3, [r7, #12]
    410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    410c:	1e5a      	subs	r2, r3, #1
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4116:	f1b3 3fff 	cmp.w	r3, #4294967295
    411a:	d10f      	bne.n	413c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    411c:	68fb      	ldr	r3, [r7, #12]
    411e:	691b      	ldr	r3, [r3, #16]
    4120:	2b00      	cmp	r3, #0
    4122:	d010      	beq.n	4146 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	3310      	adds	r3, #16
    4128:	4618      	mov	r0, r3
    412a:	f000 ff81 	bl	5030 <xTaskRemoveFromEventList>
    412e:	4603      	mov	r3, r0
    4130:	2b00      	cmp	r3, #0
    4132:	d008      	beq.n	4146 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	2201      	movs	r2, #1
    4138:	601a      	str	r2, [r3, #0]
    413a:	e004      	b.n	4146 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    413c:	68fb      	ldr	r3, [r7, #12]
    413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4140:	1c5a      	adds	r2, r3, #1
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4146:	2301      	movs	r3, #1
    4148:	617b      	str	r3, [r7, #20]
    414a:	e001      	b.n	4150 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    414c:	2300      	movs	r3, #0
    414e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4150:	f04f 0000 	mov.w	r0, #0
    4154:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4158:	697b      	ldr	r3, [r7, #20]
}
    415a:	4618      	mov	r0, r3
    415c:	3718      	adds	r7, #24
    415e:	46bd      	mov	sp, r7
    4160:	bd80      	pop	{r7, pc}
    4162:	bf00      	nop

00004164 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4164:	b580      	push	{r7, lr}
    4166:	b084      	sub	sp, #16
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    416c:	f001 faea 	bl	5744 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4174:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4176:	f001 fafb 	bl	5770 <vPortExitCritical>

	return uxReturn;
    417a:	68fb      	ldr	r3, [r7, #12]
}
    417c:	4618      	mov	r0, r3
    417e:	3710      	adds	r7, #16
    4180:	46bd      	mov	sp, r7
    4182:	bd80      	pop	{r7, pc}

00004184 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4184:	b480      	push	{r7}
    4186:	b085      	sub	sp, #20
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4190:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4192:	68fb      	ldr	r3, [r7, #12]
}
    4194:	4618      	mov	r0, r3
    4196:	3714      	adds	r7, #20
    4198:	46bd      	mov	sp, r7
    419a:	f85d 7b04 	ldr.w	r7, [sp], #4
    419e:	4770      	bx	lr

000041a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b082      	sub	sp, #8
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	4618      	mov	r0, r3
    41ae:	f001 fc07 	bl	59c0 <vPortFree>
	vPortFree( pxQueue );
    41b2:	6878      	ldr	r0, [r7, #4]
    41b4:	f001 fc04 	bl	59c0 <vPortFree>
}
    41b8:	3708      	adds	r7, #8
    41ba:	46bd      	mov	sp, r7
    41bc:	bd80      	pop	{r7, pc}
    41be:	bf00      	nop

000041c0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b084      	sub	sp, #16
    41c4:	af00      	add	r7, sp, #0
    41c6:	60f8      	str	r0, [r7, #12]
    41c8:	60b9      	str	r1, [r7, #8]
    41ca:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    41cc:	68fb      	ldr	r3, [r7, #12]
    41ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    41d0:	2b00      	cmp	r3, #0
    41d2:	d10c      	bne.n	41ee <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    41d4:	68fb      	ldr	r3, [r7, #12]
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	2b00      	cmp	r3, #0
    41da:	d145      	bne.n	4268 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    41dc:	68fb      	ldr	r3, [r7, #12]
    41de:	685b      	ldr	r3, [r3, #4]
    41e0:	4618      	mov	r0, r3
    41e2:	f001 f9bb 	bl	555c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    41e6:	68fb      	ldr	r3, [r7, #12]
    41e8:	2200      	movs	r2, #0
    41ea:	605a      	str	r2, [r3, #4]
    41ec:	e03c      	b.n	4268 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d11a      	bne.n	422a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    41f4:	68fb      	ldr	r3, [r7, #12]
    41f6:	689a      	ldr	r2, [r3, #8]
    41f8:	68fb      	ldr	r3, [r7, #12]
    41fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    41fc:	4610      	mov	r0, r2
    41fe:	68b9      	ldr	r1, [r7, #8]
    4200:	461a      	mov	r2, r3
    4202:	f001 fec5 	bl	5f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4206:	68fb      	ldr	r3, [r7, #12]
    4208:	689a      	ldr	r2, [r3, #8]
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    420e:	441a      	add	r2, r3
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	689a      	ldr	r2, [r3, #8]
    4218:	68fb      	ldr	r3, [r7, #12]
    421a:	685b      	ldr	r3, [r3, #4]
    421c:	429a      	cmp	r2, r3
    421e:	d323      	bcc.n	4268 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	681a      	ldr	r2, [r3, #0]
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	609a      	str	r2, [r3, #8]
    4228:	e01e      	b.n	4268 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	68da      	ldr	r2, [r3, #12]
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4232:	4610      	mov	r0, r2
    4234:	68b9      	ldr	r1, [r7, #8]
    4236:	461a      	mov	r2, r3
    4238:	f001 feaa 	bl	5f90 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    423c:	68fb      	ldr	r3, [r7, #12]
    423e:	68da      	ldr	r2, [r3, #12]
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4244:	425b      	negs	r3, r3
    4246:	441a      	add	r2, r3
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	68da      	ldr	r2, [r3, #12]
    4250:	68fb      	ldr	r3, [r7, #12]
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	429a      	cmp	r2, r3
    4256:	d207      	bcs.n	4268 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	685a      	ldr	r2, [r3, #4]
    425c:	68fb      	ldr	r3, [r7, #12]
    425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4260:	425b      	negs	r3, r3
    4262:	441a      	add	r2, r3
    4264:	68fb      	ldr	r3, [r7, #12]
    4266:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4268:	68fb      	ldr	r3, [r7, #12]
    426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    426c:	1c5a      	adds	r2, r3, #1
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	639a      	str	r2, [r3, #56]	; 0x38
}
    4272:	3710      	adds	r7, #16
    4274:	46bd      	mov	sp, r7
    4276:	bd80      	pop	{r7, pc}

00004278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4278:	b580      	push	{r7, lr}
    427a:	b082      	sub	sp, #8
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
    4280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d019      	beq.n	42be <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	68da      	ldr	r2, [r3, #12]
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4292:	441a      	add	r2, r3
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4298:	687b      	ldr	r3, [r7, #4]
    429a:	68da      	ldr	r2, [r3, #12]
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	685b      	ldr	r3, [r3, #4]
    42a0:	429a      	cmp	r2, r3
    42a2:	d303      	bcc.n	42ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	681a      	ldr	r2, [r3, #0]
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	68da      	ldr	r2, [r3, #12]
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42b4:	6838      	ldr	r0, [r7, #0]
    42b6:	4611      	mov	r1, r2
    42b8:	461a      	mov	r2, r3
    42ba:	f001 fe69 	bl	5f90 <memcpy>
	}
}
    42be:	3708      	adds	r7, #8
    42c0:	46bd      	mov	sp, r7
    42c2:	bd80      	pop	{r7, pc}

000042c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b082      	sub	sp, #8
    42c8:	af00      	add	r7, sp, #0
    42ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    42cc:	f001 fa3a 	bl	5744 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    42d0:	e014      	b.n	42fc <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42d6:	2b00      	cmp	r3, #0
    42d8:	d00f      	beq.n	42fa <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42da:	687b      	ldr	r3, [r7, #4]
    42dc:	3324      	adds	r3, #36	; 0x24
    42de:	4618      	mov	r0, r3
    42e0:	f000 fea6 	bl	5030 <xTaskRemoveFromEventList>
    42e4:	4603      	mov	r3, r0
    42e6:	2b00      	cmp	r3, #0
    42e8:	d001      	beq.n	42ee <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    42ea:	f000 ff5d 	bl	51a8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    42f2:	1e5a      	subs	r2, r3, #1
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	649a      	str	r2, [r3, #72]	; 0x48
    42f8:	e000      	b.n	42fc <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    42fa:	e003      	b.n	4304 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4300:	2b00      	cmp	r3, #0
    4302:	dce6      	bgt.n	42d2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	f04f 32ff 	mov.w	r2, #4294967295
    430a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    430c:	f001 fa30 	bl	5770 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4310:	f001 fa18 	bl	5744 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4314:	e014      	b.n	4340 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	691b      	ldr	r3, [r3, #16]
    431a:	2b00      	cmp	r3, #0
    431c:	d00f      	beq.n	433e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	3310      	adds	r3, #16
    4322:	4618      	mov	r0, r3
    4324:	f000 fe84 	bl	5030 <xTaskRemoveFromEventList>
    4328:	4603      	mov	r3, r0
    432a:	2b00      	cmp	r3, #0
    432c:	d001      	beq.n	4332 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    432e:	f000 ff3b 	bl	51a8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4336:	1e5a      	subs	r2, r3, #1
    4338:	687b      	ldr	r3, [r7, #4]
    433a:	645a      	str	r2, [r3, #68]	; 0x44
    433c:	e000      	b.n	4340 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    433e:	e003      	b.n	4348 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4344:	2b00      	cmp	r3, #0
    4346:	dce6      	bgt.n	4316 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	f04f 32ff 	mov.w	r2, #4294967295
    434e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4350:	f001 fa0e 	bl	5770 <vPortExitCritical>
}
    4354:	3708      	adds	r7, #8
    4356:	46bd      	mov	sp, r7
    4358:	bd80      	pop	{r7, pc}
    435a:	bf00      	nop

0000435c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    435c:	b580      	push	{r7, lr}
    435e:	b084      	sub	sp, #16
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4364:	f001 f9ee 	bl	5744 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    436c:	2b00      	cmp	r3, #0
    436e:	bf14      	ite	ne
    4370:	2300      	movne	r3, #0
    4372:	2301      	moveq	r3, #1
    4374:	b2db      	uxtb	r3, r3
    4376:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4378:	f001 f9fa 	bl	5770 <vPortExitCritical>

	return xReturn;
    437c:	68fb      	ldr	r3, [r7, #12]
}
    437e:	4618      	mov	r0, r3
    4380:	3710      	adds	r7, #16
    4382:	46bd      	mov	sp, r7
    4384:	bd80      	pop	{r7, pc}
    4386:	bf00      	nop

00004388 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4388:	b480      	push	{r7}
    438a:	b085      	sub	sp, #20
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4394:	2b00      	cmp	r3, #0
    4396:	bf14      	ite	ne
    4398:	2300      	movne	r3, #0
    439a:	2301      	moveq	r3, #1
    439c:	b2db      	uxtb	r3, r3
    439e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    43a0:	68fb      	ldr	r3, [r7, #12]
}
    43a2:	4618      	mov	r0, r3
    43a4:	3714      	adds	r7, #20
    43a6:	46bd      	mov	sp, r7
    43a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop

000043b0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    43b8:	f001 f9c4 	bl	5744 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43c4:	429a      	cmp	r2, r3
    43c6:	bf14      	ite	ne
    43c8:	2300      	movne	r3, #0
    43ca:	2301      	moveq	r3, #1
    43cc:	b2db      	uxtb	r3, r3
    43ce:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    43d0:	f001 f9ce 	bl	5770 <vPortExitCritical>

	return xReturn;
    43d4:	68fb      	ldr	r3, [r7, #12]
}
    43d6:	4618      	mov	r0, r3
    43d8:	3710      	adds	r7, #16
    43da:	46bd      	mov	sp, r7
    43dc:	bd80      	pop	{r7, pc}
    43de:	bf00      	nop

000043e0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    43e0:	b480      	push	{r7}
    43e2:	b085      	sub	sp, #20
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    43e8:	687b      	ldr	r3, [r7, #4]
    43ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43f0:	429a      	cmp	r2, r3
    43f2:	bf14      	ite	ne
    43f4:	2300      	movne	r3, #0
    43f6:	2301      	moveq	r3, #1
    43f8:	b2db      	uxtb	r3, r3
    43fa:	60fb      	str	r3, [r7, #12]

	return xReturn;
    43fc:	68fb      	ldr	r3, [r7, #12]
}
    43fe:	4618      	mov	r0, r3
    4400:	3714      	adds	r7, #20
    4402:	46bd      	mov	sp, r7
    4404:	f85d 7b04 	ldr.w	r7, [sp], #4
    4408:	4770      	bx	lr
    440a:	bf00      	nop

0000440c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    440c:	b580      	push	{r7, lr}
    440e:	b08a      	sub	sp, #40	; 0x28
    4410:	af02      	add	r7, sp, #8
    4412:	60f8      	str	r0, [r7, #12]
    4414:	60b9      	str	r1, [r7, #8]
    4416:	603b      	str	r3, [r7, #0]
    4418:	4613      	mov	r3, r2
    441a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    441c:	88fb      	ldrh	r3, [r7, #6]
    441e:	4618      	mov	r0, r3
    4420:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4422:	f000 ffe5 	bl	53f0 <prvAllocateTCBAndStack>
    4426:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4428:	69bb      	ldr	r3, [r7, #24]
    442a:	2b00      	cmp	r3, #0
    442c:	f000 80a1 	beq.w	4572 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4430:	69bb      	ldr	r3, [r7, #24]
    4432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4434:	88fb      	ldrh	r3, [r7, #6]
    4436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    443a:	3b01      	subs	r3, #1
    443c:	009b      	lsls	r3, r3, #2
    443e:	4413      	add	r3, r2
    4440:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4442:	697b      	ldr	r3, [r7, #20]
    4444:	f023 0307 	bic.w	r3, r3, #7
    4448:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    444a:	88fb      	ldrh	r3, [r7, #6]
    444c:	9300      	str	r3, [sp, #0]
    444e:	69b8      	ldr	r0, [r7, #24]
    4450:	68b9      	ldr	r1, [r7, #8]
    4452:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4456:	f000 febd 	bl	51d4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    445a:	6978      	ldr	r0, [r7, #20]
    445c:	68f9      	ldr	r1, [r7, #12]
    445e:	683a      	ldr	r2, [r7, #0]
    4460:	f001 f8f2 	bl	5648 <pxPortInitialiseStack>
    4464:	4602      	mov	r2, r0
    4466:	69bb      	ldr	r3, [r7, #24]
    4468:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    446c:	2b00      	cmp	r3, #0
    446e:	d002      	beq.n	4476 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4472:	69ba      	ldr	r2, [r7, #24]
    4474:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4476:	f001 f965 	bl	5744 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    447a:	f240 23f0 	movw	r3, #752	; 0x2f0
    447e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	1c5a      	adds	r2, r3, #1
    4486:	f240 23f0 	movw	r3, #752	; 0x2f0
    448a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    448e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4490:	f240 03ec 	movw	r3, #236	; 0xec
    4494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	2b00      	cmp	r3, #0
    449c:	d10f      	bne.n	44be <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    449e:	f240 03ec 	movw	r3, #236	; 0xec
    44a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a6:	69ba      	ldr	r2, [r7, #24]
    44a8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    44aa:	f240 23f0 	movw	r3, #752	; 0x2f0
    44ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	2b01      	cmp	r3, #1
    44b6:	d118      	bne.n	44ea <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    44b8:	f000 fec2 	bl	5240 <prvInitialiseTaskLists>
    44bc:	e015      	b.n	44ea <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    44be:	f240 3300 	movw	r3, #768	; 0x300
    44c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d10e      	bne.n	44ea <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    44cc:	f240 03ec 	movw	r3, #236	; 0xec
    44d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44da:	429a      	cmp	r2, r3
    44dc:	d805      	bhi.n	44ea <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    44de:	f240 03ec 	movw	r3, #236	; 0xec
    44e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44e6:	69ba      	ldr	r2, [r7, #24]
    44e8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    44ea:	69bb      	ldr	r3, [r7, #24]
    44ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44ee:	f240 23f8 	movw	r3, #760	; 0x2f8
    44f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	429a      	cmp	r2, r3
    44fa:	d906      	bls.n	450a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    44fc:	69bb      	ldr	r3, [r7, #24]
    44fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4500:	f240 23f8 	movw	r3, #760	; 0x2f8
    4504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4508:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    450a:	f240 3314 	movw	r3, #788	; 0x314
    450e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	1c5a      	adds	r2, r3, #1
    4516:	f240 3314 	movw	r3, #788	; 0x314
    451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    451e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4520:	69bb      	ldr	r3, [r7, #24]
    4522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4524:	f240 23fc 	movw	r3, #764	; 0x2fc
    4528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	429a      	cmp	r2, r3
    4530:	d906      	bls.n	4540 <xTaskGenericCreate+0x134>
    4532:	69bb      	ldr	r3, [r7, #24]
    4534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4536:	f240 23fc 	movw	r3, #764	; 0x2fc
    453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453e:	601a      	str	r2, [r3, #0]
    4540:	69bb      	ldr	r3, [r7, #24]
    4542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4544:	4613      	mov	r3, r2
    4546:	009b      	lsls	r3, r3, #2
    4548:	4413      	add	r3, r2
    454a:	009b      	lsls	r3, r3, #2
    454c:	f240 02f0 	movw	r2, #240	; 0xf0
    4550:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4554:	441a      	add	r2, r3
    4556:	69bb      	ldr	r3, [r7, #24]
    4558:	3304      	adds	r3, #4
    455a:	4610      	mov	r0, r2
    455c:	4619      	mov	r1, r3
    455e:	f7ff fadf 	bl	3b20 <vListInsertEnd>

			xReturn = pdPASS;
    4562:	2301      	movs	r3, #1
    4564:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4566:	69b8      	ldr	r0, [r7, #24]
    4568:	f001 fcac 	bl	5ec4 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    456c:	f001 f900 	bl	5770 <vPortExitCritical>
    4570:	e002      	b.n	4578 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4572:	f04f 33ff 	mov.w	r3, #4294967295
    4576:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4578:	69fb      	ldr	r3, [r7, #28]
    457a:	2b01      	cmp	r3, #1
    457c:	d111      	bne.n	45a2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    457e:	f240 3300 	movw	r3, #768	; 0x300
    4582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	2b00      	cmp	r3, #0
    458a:	d00a      	beq.n	45a2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    458c:	f240 03ec 	movw	r3, #236	; 0xec
    4590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4598:	6abb      	ldr	r3, [r7, #40]	; 0x28
    459a:	429a      	cmp	r2, r3
    459c:	d201      	bcs.n	45a2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    459e:	f001 f8c3 	bl	5728 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    45a2:	69fb      	ldr	r3, [r7, #28]
}
    45a4:	4618      	mov	r0, r3
    45a6:	3720      	adds	r7, #32
    45a8:	46bd      	mov	sp, r7
    45aa:	bd80      	pop	{r7, pc}

000045ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    45ac:	b580      	push	{r7, lr}
    45ae:	b084      	sub	sp, #16
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    45b4:	f001 f8c6 	bl	5744 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    45b8:	f240 03ec 	movw	r3, #236	; 0xec
    45bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	429a      	cmp	r2, r3
    45c6:	d101      	bne.n	45cc <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    45c8:	2300      	movs	r3, #0
    45ca:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d105      	bne.n	45de <vTaskDelete+0x32>
    45d2:	f240 03ec 	movw	r3, #236	; 0xec
    45d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	e000      	b.n	45e0 <vTaskDelete+0x34>
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	3304      	adds	r3, #4
    45e6:	4618      	mov	r0, r3
    45e8:	f7ff fafa 	bl	3be0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    45ec:	68fb      	ldr	r3, [r7, #12]
    45ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45f0:	2b00      	cmp	r3, #0
    45f2:	d004      	beq.n	45fe <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    45f4:	68fb      	ldr	r3, [r7, #12]
    45f6:	3318      	adds	r3, #24
    45f8:	4618      	mov	r0, r3
    45fa:	f7ff faf1 	bl	3be0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    45fe:	68fb      	ldr	r3, [r7, #12]
    4600:	3304      	adds	r3, #4
    4602:	f240 20c4 	movw	r0, #708	; 0x2c4
    4606:	f2c2 0000 	movt	r0, #8192	; 0x2000
    460a:	4619      	mov	r1, r3
    460c:	f7ff fa88 	bl	3b20 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4610:	f240 23d8 	movw	r3, #728	; 0x2d8
    4614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	1c5a      	adds	r2, r3, #1
    461c:	f240 23d8 	movw	r3, #728	; 0x2d8
    4620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4624:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4626:	f240 3314 	movw	r3, #788	; 0x314
    462a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	1c5a      	adds	r2, r3, #1
    4632:	f240 3314 	movw	r3, #788	; 0x314
    4636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    463a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    463c:	f001 f898 	bl	5770 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4640:	f240 3300 	movw	r3, #768	; 0x300
    4644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	2b00      	cmp	r3, #0
    464c:	d004      	beq.n	4658 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	2b00      	cmp	r3, #0
    4652:	d101      	bne.n	4658 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4654:	f001 f868 	bl	5728 <vPortYieldFromISR>
			}
		}
	}
    4658:	3710      	adds	r7, #16
    465a:	46bd      	mov	sp, r7
    465c:	bd80      	pop	{r7, pc}
    465e:	bf00      	nop

00004660 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4660:	b580      	push	{r7, lr}
    4662:	b086      	sub	sp, #24
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
    4668:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    466a:	2300      	movs	r3, #0
    466c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    466e:	f000 fa8b 	bl	4b88 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	681a      	ldr	r2, [r3, #0]
    4676:	683b      	ldr	r3, [r7, #0]
    4678:	4413      	add	r3, r2
    467a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	681a      	ldr	r2, [r3, #0]
    4680:	f240 23f4 	movw	r3, #756	; 0x2f4
    4684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	429a      	cmp	r2, r3
    468c:	d90f      	bls.n	46ae <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	681a      	ldr	r2, [r3, #0]
    4692:	693b      	ldr	r3, [r7, #16]
    4694:	429a      	cmp	r2, r3
    4696:	d919      	bls.n	46cc <vTaskDelayUntil+0x6c>
    4698:	f240 23f4 	movw	r3, #756	; 0x2f4
    469c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	693a      	ldr	r2, [r7, #16]
    46a4:	429a      	cmp	r2, r3
    46a6:	d911      	bls.n	46cc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    46a8:	2301      	movs	r3, #1
    46aa:	617b      	str	r3, [r7, #20]
    46ac:	e00e      	b.n	46cc <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	681a      	ldr	r2, [r3, #0]
    46b2:	693b      	ldr	r3, [r7, #16]
    46b4:	429a      	cmp	r2, r3
    46b6:	d807      	bhi.n	46c8 <vTaskDelayUntil+0x68>
    46b8:	f240 23f4 	movw	r3, #756	; 0x2f4
    46bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46c0:	681b      	ldr	r3, [r3, #0]
    46c2:	693a      	ldr	r2, [r7, #16]
    46c4:	429a      	cmp	r2, r3
    46c6:	d901      	bls.n	46cc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    46c8:	2301      	movs	r3, #1
    46ca:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	693a      	ldr	r2, [r7, #16]
    46d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    46d2:	697b      	ldr	r3, [r7, #20]
    46d4:	2b00      	cmp	r3, #0
    46d6:	d00b      	beq.n	46f0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    46d8:	f240 03ec 	movw	r3, #236	; 0xec
    46dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	3304      	adds	r3, #4
    46e4:	4618      	mov	r0, r3
    46e6:	f7ff fa7b 	bl	3be0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    46ea:	6938      	ldr	r0, [r7, #16]
    46ec:	f000 fe3c 	bl	5368 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    46f0:	f000 fa5c 	bl	4bac <xTaskResumeAll>
    46f4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d101      	bne.n	4700 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    46fc:	f001 f814 	bl	5728 <vPortYieldFromISR>
		}
	}
    4700:	3718      	adds	r7, #24
    4702:	46bd      	mov	sp, r7
    4704:	bd80      	pop	{r7, pc}
    4706:	bf00      	nop

00004708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4708:	b580      	push	{r7, lr}
    470a:	b084      	sub	sp, #16
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4710:	2300      	movs	r3, #0
    4712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	2b00      	cmp	r3, #0
    4718:	d018      	beq.n	474c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    471a:	f000 fa35 	bl	4b88 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    471e:	f240 23f4 	movw	r3, #756	; 0x2f4
    4722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4726:	681a      	ldr	r2, [r3, #0]
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	4413      	add	r3, r2
    472c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    472e:	f240 03ec 	movw	r3, #236	; 0xec
    4732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4736:	681b      	ldr	r3, [r3, #0]
    4738:	3304      	adds	r3, #4
    473a:	4618      	mov	r0, r3
    473c:	f7ff fa50 	bl	3be0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4740:	68b8      	ldr	r0, [r7, #8]
    4742:	f000 fe11 	bl	5368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4746:	f000 fa31 	bl	4bac <xTaskResumeAll>
    474a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    474c:	68fb      	ldr	r3, [r7, #12]
    474e:	2b00      	cmp	r3, #0
    4750:	d101      	bne.n	4756 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4752:	f000 ffe9 	bl	5728 <vPortYieldFromISR>
		}
	}
    4756:	3710      	adds	r7, #16
    4758:	46bd      	mov	sp, r7
    475a:	bd80      	pop	{r7, pc}

0000475c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    475c:	b580      	push	{r7, lr}
    475e:	b084      	sub	sp, #16
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4764:	f000 ffee 	bl	5744 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2b00      	cmp	r3, #0
    476c:	d105      	bne.n	477a <uxTaskPriorityGet+0x1e>
    476e:	f240 03ec 	movw	r3, #236	; 0xec
    4772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4776:	681b      	ldr	r3, [r3, #0]
    4778:	e000      	b.n	477c <uxTaskPriorityGet+0x20>
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    477e:	68fb      	ldr	r3, [r7, #12]
    4780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4782:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4784:	f000 fff4 	bl	5770 <vPortExitCritical>

		return uxReturn;
    4788:	68bb      	ldr	r3, [r7, #8]
	}
    478a:	4618      	mov	r0, r3
    478c:	3710      	adds	r7, #16
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	bf00      	nop

00004794 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4794:	b580      	push	{r7, lr}
    4796:	b086      	sub	sp, #24
    4798:	af00      	add	r7, sp, #0
    479a:	6078      	str	r0, [r7, #4]
    479c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    479e:	2300      	movs	r3, #0
    47a0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    47a2:	683b      	ldr	r3, [r7, #0]
    47a4:	2b13      	cmp	r3, #19
    47a6:	d901      	bls.n	47ac <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    47a8:	2313      	movs	r3, #19
    47aa:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    47ac:	f000 ffca 	bl	5744 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    47b0:	f240 03ec 	movw	r3, #236	; 0xec
    47b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	687a      	ldr	r2, [r7, #4]
    47bc:	429a      	cmp	r2, r3
    47be:	d101      	bne.n	47c4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    47c0:	2300      	movs	r3, #0
    47c2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d105      	bne.n	47d6 <vTaskPrioritySet+0x42>
    47ca:	f240 03ec 	movw	r3, #236	; 0xec
    47ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d2:	681b      	ldr	r3, [r3, #0]
    47d4:	e000      	b.n	47d8 <vTaskPrioritySet+0x44>
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    47da:	693b      	ldr	r3, [r7, #16]
    47dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    47de:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	683b      	ldr	r3, [r7, #0]
    47e4:	429a      	cmp	r2, r3
    47e6:	d058      	beq.n	489a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    47e8:	683a      	ldr	r2, [r7, #0]
    47ea:	68fb      	ldr	r3, [r7, #12]
    47ec:	429a      	cmp	r2, r3
    47ee:	d905      	bls.n	47fc <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d007      	beq.n	4806 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    47f6:	2301      	movs	r3, #1
    47f8:	617b      	str	r3, [r7, #20]
    47fa:	e004      	b.n	4806 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	2b00      	cmp	r3, #0
    4800:	d101      	bne.n	4806 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4802:	2301      	movs	r3, #1
    4804:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4806:	693b      	ldr	r3, [r7, #16]
    4808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    480a:	693b      	ldr	r3, [r7, #16]
    480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    480e:	429a      	cmp	r2, r3
    4810:	d102      	bne.n	4818 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4812:	693b      	ldr	r3, [r7, #16]
    4814:	683a      	ldr	r2, [r7, #0]
    4816:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4818:	693b      	ldr	r3, [r7, #16]
    481a:	683a      	ldr	r2, [r7, #0]
    481c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    481e:	683b      	ldr	r3, [r7, #0]
    4820:	f1c3 0214 	rsb	r2, r3, #20
    4824:	693b      	ldr	r3, [r7, #16]
    4826:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4828:	693b      	ldr	r3, [r7, #16]
    482a:	6959      	ldr	r1, [r3, #20]
    482c:	68fa      	ldr	r2, [r7, #12]
    482e:	4613      	mov	r3, r2
    4830:	009b      	lsls	r3, r3, #2
    4832:	4413      	add	r3, r2
    4834:	009b      	lsls	r3, r3, #2
    4836:	f240 02f0 	movw	r2, #240	; 0xf0
    483a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    483e:	4413      	add	r3, r2
    4840:	4299      	cmp	r1, r3
    4842:	d125      	bne.n	4890 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4844:	693b      	ldr	r3, [r7, #16]
    4846:	3304      	adds	r3, #4
    4848:	4618      	mov	r0, r3
    484a:	f7ff f9c9 	bl	3be0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    484e:	693b      	ldr	r3, [r7, #16]
    4850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4852:	f240 23fc 	movw	r3, #764	; 0x2fc
    4856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	429a      	cmp	r2, r3
    485e:	d906      	bls.n	486e <vTaskPrioritySet+0xda>
    4860:	693b      	ldr	r3, [r7, #16]
    4862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4864:	f240 23fc 	movw	r3, #764	; 0x2fc
    4868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    486c:	601a      	str	r2, [r3, #0]
    486e:	693b      	ldr	r3, [r7, #16]
    4870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4872:	4613      	mov	r3, r2
    4874:	009b      	lsls	r3, r3, #2
    4876:	4413      	add	r3, r2
    4878:	009b      	lsls	r3, r3, #2
    487a:	f240 02f0 	movw	r2, #240	; 0xf0
    487e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4882:	441a      	add	r2, r3
    4884:	693b      	ldr	r3, [r7, #16]
    4886:	3304      	adds	r3, #4
    4888:	4610      	mov	r0, r2
    488a:	4619      	mov	r1, r3
    488c:	f7ff f948 	bl	3b20 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4890:	697b      	ldr	r3, [r7, #20]
    4892:	2b01      	cmp	r3, #1
    4894:	d101      	bne.n	489a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4896:	f000 ff47 	bl	5728 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    489a:	f000 ff69 	bl	5770 <vPortExitCritical>
	}
    489e:	3718      	adds	r7, #24
    48a0:	46bd      	mov	sp, r7
    48a2:	bd80      	pop	{r7, pc}

000048a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    48a4:	b580      	push	{r7, lr}
    48a6:	b084      	sub	sp, #16
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    48ac:	f000 ff4a 	bl	5744 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    48b0:	f240 03ec 	movw	r3, #236	; 0xec
    48b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b8:	681b      	ldr	r3, [r3, #0]
    48ba:	687a      	ldr	r2, [r7, #4]
    48bc:	429a      	cmp	r2, r3
    48be:	d101      	bne.n	48c4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    48c0:	2300      	movs	r3, #0
    48c2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d105      	bne.n	48d6 <vTaskSuspend+0x32>
    48ca:	f240 03ec 	movw	r3, #236	; 0xec
    48ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	e000      	b.n	48d8 <vTaskSuspend+0x34>
    48d6:	687b      	ldr	r3, [r7, #4]
    48d8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    48da:	68fb      	ldr	r3, [r7, #12]
    48dc:	3304      	adds	r3, #4
    48de:	4618      	mov	r0, r3
    48e0:	f7ff f97e 	bl	3be0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48e8:	2b00      	cmp	r3, #0
    48ea:	d004      	beq.n	48f6 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	3318      	adds	r3, #24
    48f0:	4618      	mov	r0, r3
    48f2:	f7ff f975 	bl	3be0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    48f6:	68fb      	ldr	r3, [r7, #12]
    48f8:	3304      	adds	r3, #4
    48fa:	f240 20dc 	movw	r0, #732	; 0x2dc
    48fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4902:	4619      	mov	r1, r3
    4904:	f7ff f90c 	bl	3b20 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4908:	f000 ff32 	bl	5770 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	2b00      	cmp	r3, #0
    4910:	d11e      	bne.n	4950 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4912:	f240 3300 	movw	r3, #768	; 0x300
    4916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	2b00      	cmp	r3, #0
    491e:	d002      	beq.n	4926 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4920:	f000 ff02 	bl	5728 <vPortYieldFromISR>
    4924:	e014      	b.n	4950 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4926:	f240 23dc 	movw	r3, #732	; 0x2dc
    492a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492e:	681a      	ldr	r2, [r3, #0]
    4930:	f240 23f0 	movw	r3, #752	; 0x2f0
    4934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	429a      	cmp	r2, r3
    493c:	d106      	bne.n	494c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    493e:	f240 03ec 	movw	r3, #236	; 0xec
    4942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4946:	2200      	movs	r2, #0
    4948:	601a      	str	r2, [r3, #0]
    494a:	e001      	b.n	4950 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    494c:	f000 fadc 	bl	4f08 <vTaskSwitchContext>
				}
			}
		}
	}
    4950:	3710      	adds	r7, #16
    4952:	46bd      	mov	sp, r7
    4954:	bd80      	pop	{r7, pc}
    4956:	bf00      	nop

00004958 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4958:	b480      	push	{r7}
    495a:	b085      	sub	sp, #20
    495c:	af00      	add	r7, sp, #0
    495e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4960:	2300      	movs	r3, #0
    4962:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4968:	68bb      	ldr	r3, [r7, #8]
    496a:	695a      	ldr	r2, [r3, #20]
    496c:	f240 23dc 	movw	r3, #732	; 0x2dc
    4970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4974:	429a      	cmp	r2, r3
    4976:	d10d      	bne.n	4994 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4978:	68bb      	ldr	r3, [r7, #8]
    497a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    497c:	f240 23b0 	movw	r3, #688	; 0x2b0
    4980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4984:	429a      	cmp	r2, r3
    4986:	d005      	beq.n	4994 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4988:	68bb      	ldr	r3, [r7, #8]
    498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    498c:	2b00      	cmp	r3, #0
    498e:	d101      	bne.n	4994 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4990:	2301      	movs	r3, #1
    4992:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4994:	68fb      	ldr	r3, [r7, #12]
	}
    4996:	4618      	mov	r0, r3
    4998:	3714      	adds	r7, #20
    499a:	46bd      	mov	sp, r7
    499c:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a0:	4770      	bx	lr
    49a2:	bf00      	nop

000049a4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    49a4:	b580      	push	{r7, lr}
    49a6:	b084      	sub	sp, #16
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    49b0:	68fb      	ldr	r3, [r7, #12]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d043      	beq.n	4a3e <vTaskResume+0x9a>
    49b6:	f240 03ec 	movw	r3, #236	; 0xec
    49ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49be:	681b      	ldr	r3, [r3, #0]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	429a      	cmp	r2, r3
    49c4:	d03b      	beq.n	4a3e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    49c6:	f000 febd 	bl	5744 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    49ca:	68f8      	ldr	r0, [r7, #12]
    49cc:	f7ff ffc4 	bl	4958 <xTaskIsTaskSuspended>
    49d0:	4603      	mov	r3, r0
    49d2:	2b01      	cmp	r3, #1
    49d4:	d131      	bne.n	4a3a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    49d6:	68fb      	ldr	r3, [r7, #12]
    49d8:	3304      	adds	r3, #4
    49da:	4618      	mov	r0, r3
    49dc:	f7ff f900 	bl	3be0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    49e0:	68fb      	ldr	r3, [r7, #12]
    49e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49e4:	f240 23fc 	movw	r3, #764	; 0x2fc
    49e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	429a      	cmp	r2, r3
    49f0:	d906      	bls.n	4a00 <vTaskResume+0x5c>
    49f2:	68fb      	ldr	r3, [r7, #12]
    49f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49f6:	f240 23fc 	movw	r3, #764	; 0x2fc
    49fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49fe:	601a      	str	r2, [r3, #0]
    4a00:	68fb      	ldr	r3, [r7, #12]
    4a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a04:	4613      	mov	r3, r2
    4a06:	009b      	lsls	r3, r3, #2
    4a08:	4413      	add	r3, r2
    4a0a:	009b      	lsls	r3, r3, #2
    4a0c:	f240 02f0 	movw	r2, #240	; 0xf0
    4a10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a14:	441a      	add	r2, r3
    4a16:	68fb      	ldr	r3, [r7, #12]
    4a18:	3304      	adds	r3, #4
    4a1a:	4610      	mov	r0, r2
    4a1c:	4619      	mov	r1, r3
    4a1e:	f7ff f87f 	bl	3b20 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4a22:	68fb      	ldr	r3, [r7, #12]
    4a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a26:	f240 03ec 	movw	r3, #236	; 0xec
    4a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a32:	429a      	cmp	r2, r3
    4a34:	d301      	bcc.n	4a3a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4a36:	f000 fe77 	bl	5728 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4a3a:	f000 fe99 	bl	5770 <vPortExitCritical>
		}
	}
    4a3e:	3710      	adds	r7, #16
    4a40:	46bd      	mov	sp, r7
    4a42:	bd80      	pop	{r7, pc}

00004a44 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4a44:	b580      	push	{r7, lr}
    4a46:	b086      	sub	sp, #24
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4a4c:	2300      	movs	r3, #0
    4a4e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4a50:	687b      	ldr	r3, [r7, #4]
    4a52:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4a54:	2300      	movs	r3, #0
    4a56:	60fb      	str	r3, [r7, #12]
    4a58:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4a5c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4a60:	6938      	ldr	r0, [r7, #16]
    4a62:	f7ff ff79 	bl	4958 <xTaskIsTaskSuspended>
    4a66:	4603      	mov	r3, r0
    4a68:	2b01      	cmp	r3, #1
    4a6a:	d144      	bne.n	4af6 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4a6c:	f240 3304 	movw	r3, #772	; 0x304
    4a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a74:	681b      	ldr	r3, [r3, #0]
    4a76:	2b00      	cmp	r3, #0
    4a78:	d134      	bne.n	4ae4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4a7a:	693b      	ldr	r3, [r7, #16]
    4a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a7e:	f240 03ec 	movw	r3, #236	; 0xec
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a8a:	429a      	cmp	r2, r3
    4a8c:	bf34      	ite	cc
    4a8e:	2300      	movcc	r3, #0
    4a90:	2301      	movcs	r3, #1
    4a92:	b2db      	uxtb	r3, r3
    4a94:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4a96:	693b      	ldr	r3, [r7, #16]
    4a98:	3304      	adds	r3, #4
    4a9a:	4618      	mov	r0, r3
    4a9c:	f7ff f8a0 	bl	3be0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4aa0:	693b      	ldr	r3, [r7, #16]
    4aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4aa4:	f240 23fc 	movw	r3, #764	; 0x2fc
    4aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	429a      	cmp	r2, r3
    4ab0:	d906      	bls.n	4ac0 <xTaskResumeFromISR+0x7c>
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ab6:	f240 23fc 	movw	r3, #764	; 0x2fc
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	601a      	str	r2, [r3, #0]
    4ac0:	693b      	ldr	r3, [r7, #16]
    4ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ac4:	4613      	mov	r3, r2
    4ac6:	009b      	lsls	r3, r3, #2
    4ac8:	4413      	add	r3, r2
    4aca:	009b      	lsls	r3, r3, #2
    4acc:	f240 02f0 	movw	r2, #240	; 0xf0
    4ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ad4:	441a      	add	r2, r3
    4ad6:	693b      	ldr	r3, [r7, #16]
    4ad8:	3304      	adds	r3, #4
    4ada:	4610      	mov	r0, r2
    4adc:	4619      	mov	r1, r3
    4ade:	f7ff f81f 	bl	3b20 <vListInsertEnd>
    4ae2:	e008      	b.n	4af6 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4ae4:	693b      	ldr	r3, [r7, #16]
    4ae6:	3318      	adds	r3, #24
    4ae8:	f240 20b0 	movw	r0, #688	; 0x2b0
    4aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4af0:	4619      	mov	r1, r3
    4af2:	f7ff f815 	bl	3b20 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4af6:	f04f 0000 	mov.w	r0, #0
    4afa:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4afe:	697b      	ldr	r3, [r7, #20]
	}
    4b00:	4618      	mov	r0, r3
    4b02:	3718      	adds	r7, #24
    4b04:	46bd      	mov	sp, r7
    4b06:	bd80      	pop	{r7, pc}

00004b08 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4b08:	b580      	push	{r7, lr}
    4b0a:	b086      	sub	sp, #24
    4b0c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4b0e:	2300      	movs	r3, #0
    4b10:	9300      	str	r3, [sp, #0]
    4b12:	2300      	movs	r3, #0
    4b14:	9301      	str	r3, [sp, #4]
    4b16:	2300      	movs	r3, #0
    4b18:	9302      	str	r3, [sp, #8]
    4b1a:	2300      	movs	r3, #0
    4b1c:	9303      	str	r3, [sp, #12]
    4b1e:	f245 10c1 	movw	r0, #20929	; 0x51c1
    4b22:	f2c0 0000 	movt	r0, #0
    4b26:	f246 2118 	movw	r1, #25112	; 0x6218
    4b2a:	f2c0 0100 	movt	r1, #0
    4b2e:	2280      	movs	r2, #128	; 0x80
    4b30:	2300      	movs	r3, #0
    4b32:	f7ff fc6b 	bl	440c <xTaskGenericCreate>
    4b36:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4b38:	687b      	ldr	r3, [r7, #4]
    4b3a:	2b01      	cmp	r3, #1
    4b3c:	d111      	bne.n	4b62 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4b3e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b42:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4b46:	f240 3300 	movw	r3, #768	; 0x300
    4b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4e:	2201      	movs	r2, #1
    4b50:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4b52:	f240 23f4 	movw	r3, #756	; 0x2f4
    4b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5a:	2200      	movs	r2, #0
    4b5c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4b5e:	f000 fdb5 	bl	56cc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4b62:	3708      	adds	r7, #8
    4b64:	46bd      	mov	sp, r7
    4b66:	bd80      	pop	{r7, pc}

00004b68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4b6c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b70:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4b74:	f240 3300 	movw	r3, #768	; 0x300
    4b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7c:	2200      	movs	r2, #0
    4b7e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4b80:	f000 fdcc 	bl	571c <vPortEndScheduler>
}
    4b84:	bd80      	pop	{r7, pc}
    4b86:	bf00      	nop

00004b88 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4b88:	b480      	push	{r7}
    4b8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4b8c:	f240 3304 	movw	r3, #772	; 0x304
    4b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b94:	681b      	ldr	r3, [r3, #0]
    4b96:	1c5a      	adds	r2, r3, #1
    4b98:	f240 3304 	movw	r3, #772	; 0x304
    4b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba0:	601a      	str	r2, [r3, #0]
}
    4ba2:	46bd      	mov	sp, r7
    4ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba8:	4770      	bx	lr
    4baa:	bf00      	nop

00004bac <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4bac:	b590      	push	{r4, r7, lr}
    4bae:	b083      	sub	sp, #12
    4bb0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4bb2:	2300      	movs	r3, #0
    4bb4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4bb6:	f000 fdc5 	bl	5744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4bba:	f240 3304 	movw	r3, #772	; 0x304
    4bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	1e5a      	subs	r2, r3, #1
    4bc6:	f240 3304 	movw	r3, #772	; 0x304
    4bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4bd0:	f240 3304 	movw	r3, #772	; 0x304
    4bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d177      	bne.n	4cce <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4bde:	f240 23f0 	movw	r3, #752	; 0x2f0
    4be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be6:	681b      	ldr	r3, [r3, #0]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d070      	beq.n	4cce <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4bec:	2300      	movs	r3, #0
    4bee:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4bf0:	e036      	b.n	4c60 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4bf2:	f240 23b0 	movw	r3, #688	; 0x2b0
    4bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfa:	68db      	ldr	r3, [r3, #12]
    4bfc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4bfe:	f104 0318 	add.w	r3, r4, #24
    4c02:	4618      	mov	r0, r3
    4c04:	f7fe ffec 	bl	3be0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4c08:	1d23      	adds	r3, r4, #4
    4c0a:	4618      	mov	r0, r3
    4c0c:	f7fe ffe8 	bl	3be0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c12:	f240 23fc 	movw	r3, #764	; 0x2fc
    4c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1a:	681b      	ldr	r3, [r3, #0]
    4c1c:	429a      	cmp	r2, r3
    4c1e:	d905      	bls.n	4c2c <xTaskResumeAll+0x80>
    4c20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c22:	f240 23fc 	movw	r3, #764	; 0x2fc
    4c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c2a:	601a      	str	r2, [r3, #0]
    4c2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c2e:	4613      	mov	r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	4413      	add	r3, r2
    4c34:	009b      	lsls	r3, r3, #2
    4c36:	f240 02f0 	movw	r2, #240	; 0xf0
    4c3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c3e:	441a      	add	r2, r3
    4c40:	1d23      	adds	r3, r4, #4
    4c42:	4610      	mov	r0, r2
    4c44:	4619      	mov	r1, r3
    4c46:	f7fe ff6b 	bl	3b20 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4c4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c4c:	f240 03ec 	movw	r3, #236	; 0xec
    4c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c58:	429a      	cmp	r2, r3
    4c5a:	d301      	bcc.n	4c60 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4c5c:	2301      	movs	r3, #1
    4c5e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4c60:	f240 23b0 	movw	r3, #688	; 0x2b0
    4c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d1c1      	bne.n	4bf2 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4c6e:	f240 3308 	movw	r3, #776	; 0x308
    4c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c76:	681b      	ldr	r3, [r3, #0]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d014      	beq.n	4ca6 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4c7c:	e00c      	b.n	4c98 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4c7e:	f000 f865 	bl	4d4c <vTaskIncrementTick>
						--uxMissedTicks;
    4c82:	f240 3308 	movw	r3, #776	; 0x308
    4c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	1e5a      	subs	r2, r3, #1
    4c8e:	f240 3308 	movw	r3, #776	; 0x308
    4c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c96:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4c98:	f240 3308 	movw	r3, #776	; 0x308
    4c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d1eb      	bne.n	4c7e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4ca6:	683b      	ldr	r3, [r7, #0]
    4ca8:	2b01      	cmp	r3, #1
    4caa:	d006      	beq.n	4cba <xTaskResumeAll+0x10e>
    4cac:	f240 330c 	movw	r3, #780	; 0x30c
    4cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	2b01      	cmp	r3, #1
    4cb8:	d109      	bne.n	4cce <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4cba:	2301      	movs	r3, #1
    4cbc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4cbe:	f240 330c 	movw	r3, #780	; 0x30c
    4cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc6:	2200      	movs	r2, #0
    4cc8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4cca:	f000 fd2d 	bl	5728 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4cce:	f000 fd4f 	bl	5770 <vPortExitCritical>

	return xAlreadyYielded;
    4cd2:	687b      	ldr	r3, [r7, #4]
}
    4cd4:	4618      	mov	r0, r3
    4cd6:	370c      	adds	r7, #12
    4cd8:	46bd      	mov	sp, r7
    4cda:	bd90      	pop	{r4, r7, pc}

00004cdc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	b082      	sub	sp, #8
    4ce0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4ce2:	f000 fd2f 	bl	5744 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4ce6:	f240 23f4 	movw	r3, #756	; 0x2f4
    4cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4cf2:	f000 fd3d 	bl	5770 <vPortExitCritical>

	return xTicks;
    4cf6:	687b      	ldr	r3, [r7, #4]
}
    4cf8:	4618      	mov	r0, r3
    4cfa:	3708      	adds	r7, #8
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4d00:	b480      	push	{r7}
    4d02:	b083      	sub	sp, #12
    4d04:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d06:	2300      	movs	r3, #0
    4d08:	607b      	str	r3, [r7, #4]
    4d0a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d0e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4d12:	f240 23f4 	movw	r3, #756	; 0x2f4
    4d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4d1e:	f04f 0000 	mov.w	r0, #0
    4d22:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4d26:	683b      	ldr	r3, [r7, #0]
}
    4d28:	4618      	mov	r0, r3
    4d2a:	370c      	adds	r7, #12
    4d2c:	46bd      	mov	sp, r7
    4d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d32:	4770      	bx	lr

00004d34 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4d34:	b480      	push	{r7}
    4d36:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4d38:	f240 23f0 	movw	r3, #752	; 0x2f0
    4d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d40:	681b      	ldr	r3, [r3, #0]
}
    4d42:	4618      	mov	r0, r3
    4d44:	46bd      	mov	sp, r7
    4d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4a:	4770      	bx	lr

00004d4c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b084      	sub	sp, #16
    4d50:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4d52:	f240 3304 	movw	r3, #772	; 0x304
    4d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5a:	681b      	ldr	r3, [r3, #0]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	f040 80b9 	bne.w	4ed4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4d62:	f240 23f4 	movw	r3, #756	; 0x2f4
    4d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	1c5a      	adds	r2, r3, #1
    4d6e:	f240 23f4 	movw	r3, #756	; 0x2f4
    4d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d76:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4d78:	f240 23f4 	movw	r3, #756	; 0x2f4
    4d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d13f      	bne.n	4e06 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4d86:	f240 23a8 	movw	r3, #680	; 0x2a8
    4d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d8e:	681b      	ldr	r3, [r3, #0]
    4d90:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4d92:	f240 23ac 	movw	r3, #684	; 0x2ac
    4d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9a:	681a      	ldr	r2, [r3, #0]
    4d9c:	f240 23a8 	movw	r3, #680	; 0x2a8
    4da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4da6:	f240 23ac 	movw	r3, #684	; 0x2ac
    4daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dae:	68fa      	ldr	r2, [r7, #12]
    4db0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4db2:	f240 3310 	movw	r3, #784	; 0x310
    4db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dba:	681b      	ldr	r3, [r3, #0]
    4dbc:	1c5a      	adds	r2, r3, #1
    4dbe:	f240 3310 	movw	r3, #784	; 0x310
    4dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4dc8:	f240 23a8 	movw	r3, #680	; 0x2a8
    4dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd0:	681b      	ldr	r3, [r3, #0]
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d107      	bne.n	4de8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4dd8:	f240 032c 	movw	r3, #44	; 0x2c
    4ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de0:	f04f 32ff 	mov.w	r2, #4294967295
    4de4:	601a      	str	r2, [r3, #0]
    4de6:	e00e      	b.n	4e06 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4de8:	f240 23a8 	movw	r3, #680	; 0x2a8
    4dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	68db      	ldr	r3, [r3, #12]
    4df4:	68db      	ldr	r3, [r3, #12]
    4df6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4df8:	68bb      	ldr	r3, [r7, #8]
    4dfa:	685a      	ldr	r2, [r3, #4]
    4dfc:	f240 032c 	movw	r3, #44	; 0x2c
    4e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e04:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4e06:	f240 23f4 	movw	r3, #756	; 0x2f4
    4e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0e:	681a      	ldr	r2, [r3, #0]
    4e10:	f240 032c 	movw	r3, #44	; 0x2c
    4e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e18:	681b      	ldr	r3, [r3, #0]
    4e1a:	429a      	cmp	r2, r3
    4e1c:	d359      	bcc.n	4ed2 <vTaskIncrementTick+0x186>
    4e1e:	f240 23a8 	movw	r3, #680	; 0x2a8
    4e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d107      	bne.n	4e3e <vTaskIncrementTick+0xf2>
    4e2e:	f240 032c 	movw	r3, #44	; 0x2c
    4e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e36:	f04f 32ff 	mov.w	r2, #4294967295
    4e3a:	601a      	str	r2, [r3, #0]
    4e3c:	e049      	b.n	4ed2 <vTaskIncrementTick+0x186>
    4e3e:	f240 23a8 	movw	r3, #680	; 0x2a8
    4e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	68db      	ldr	r3, [r3, #12]
    4e4a:	68db      	ldr	r3, [r3, #12]
    4e4c:	60bb      	str	r3, [r7, #8]
    4e4e:	68bb      	ldr	r3, [r7, #8]
    4e50:	685b      	ldr	r3, [r3, #4]
    4e52:	607b      	str	r3, [r7, #4]
    4e54:	f240 23f4 	movw	r3, #756	; 0x2f4
    4e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e5c:	681a      	ldr	r2, [r3, #0]
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	429a      	cmp	r2, r3
    4e62:	d206      	bcs.n	4e72 <vTaskIncrementTick+0x126>
    4e64:	f240 032c 	movw	r3, #44	; 0x2c
    4e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e6c:	687a      	ldr	r2, [r7, #4]
    4e6e:	601a      	str	r2, [r3, #0]
    4e70:	e02f      	b.n	4ed2 <vTaskIncrementTick+0x186>
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	3304      	adds	r3, #4
    4e76:	4618      	mov	r0, r3
    4e78:	f7fe feb2 	bl	3be0 <vListRemove>
    4e7c:	68bb      	ldr	r3, [r7, #8]
    4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e80:	2b00      	cmp	r3, #0
    4e82:	d004      	beq.n	4e8e <vTaskIncrementTick+0x142>
    4e84:	68bb      	ldr	r3, [r7, #8]
    4e86:	3318      	adds	r3, #24
    4e88:	4618      	mov	r0, r3
    4e8a:	f7fe fea9 	bl	3be0 <vListRemove>
    4e8e:	68bb      	ldr	r3, [r7, #8]
    4e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e92:	f240 23fc 	movw	r3, #764	; 0x2fc
    4e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	429a      	cmp	r2, r3
    4e9e:	d906      	bls.n	4eae <vTaskIncrementTick+0x162>
    4ea0:	68bb      	ldr	r3, [r7, #8]
    4ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ea4:	f240 23fc 	movw	r3, #764	; 0x2fc
    4ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eac:	601a      	str	r2, [r3, #0]
    4eae:	68bb      	ldr	r3, [r7, #8]
    4eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eb2:	4613      	mov	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	4413      	add	r3, r2
    4eb8:	009b      	lsls	r3, r3, #2
    4eba:	f240 02f0 	movw	r2, #240	; 0xf0
    4ebe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ec2:	441a      	add	r2, r3
    4ec4:	68bb      	ldr	r3, [r7, #8]
    4ec6:	3304      	adds	r3, #4
    4ec8:	4610      	mov	r0, r2
    4eca:	4619      	mov	r1, r3
    4ecc:	f7fe fe28 	bl	3b20 <vListInsertEnd>
    4ed0:	e7a5      	b.n	4e1e <vTaskIncrementTick+0xd2>
    4ed2:	e00c      	b.n	4eee <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4ed4:	f240 3308 	movw	r3, #776	; 0x308
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	1c5a      	adds	r2, r3, #1
    4ee0:	f240 3308 	movw	r3, #776	; 0x308
    4ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4eea:	f000 fffd 	bl	5ee8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4eee:	f240 3308 	movw	r3, #776	; 0x308
    4ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef6:	681b      	ldr	r3, [r3, #0]
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d101      	bne.n	4f00 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    4efc:	f000 fff4 	bl	5ee8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4f00:	3710      	adds	r7, #16
    4f02:	46bd      	mov	sp, r7
    4f04:	bd80      	pop	{r7, pc}
    4f06:	bf00      	nop

00004f08 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b082      	sub	sp, #8
    4f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4f0e:	f240 3304 	movw	r3, #772	; 0x304
    4f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d006      	beq.n	4f2a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4f1c:	f240 330c 	movw	r3, #780	; 0x30c
    4f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f24:	2201      	movs	r2, #1
    4f26:	601a      	str	r2, [r3, #0]
    4f28:	e047      	b.n	4fba <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    4f2a:	f000 ffd7 	bl	5edc <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4f2e:	e00a      	b.n	4f46 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4f30:	f240 23fc 	movw	r3, #764	; 0x2fc
    4f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	1e5a      	subs	r2, r3, #1
    4f3c:	f240 23fc 	movw	r3, #764	; 0x2fc
    4f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f44:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4f46:	f240 23fc 	movw	r3, #764	; 0x2fc
    4f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4e:	6819      	ldr	r1, [r3, #0]
    4f50:	f240 02f0 	movw	r2, #240	; 0xf0
    4f54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f58:	460b      	mov	r3, r1
    4f5a:	009b      	lsls	r3, r3, #2
    4f5c:	440b      	add	r3, r1
    4f5e:	009b      	lsls	r3, r3, #2
    4f60:	4413      	add	r3, r2
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	2b00      	cmp	r3, #0
    4f66:	d0e3      	beq.n	4f30 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4f68:	f240 23fc 	movw	r3, #764	; 0x2fc
    4f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f70:	681a      	ldr	r2, [r3, #0]
    4f72:	4613      	mov	r3, r2
    4f74:	009b      	lsls	r3, r3, #2
    4f76:	4413      	add	r3, r2
    4f78:	009b      	lsls	r3, r3, #2
    4f7a:	f240 02f0 	movw	r2, #240	; 0xf0
    4f7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f82:	4413      	add	r3, r2
    4f84:	607b      	str	r3, [r7, #4]
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	685b      	ldr	r3, [r3, #4]
    4f8a:	685a      	ldr	r2, [r3, #4]
    4f8c:	687b      	ldr	r3, [r7, #4]
    4f8e:	605a      	str	r2, [r3, #4]
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	685a      	ldr	r2, [r3, #4]
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	3308      	adds	r3, #8
    4f98:	429a      	cmp	r2, r3
    4f9a:	d104      	bne.n	4fa6 <vTaskSwitchContext+0x9e>
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	685b      	ldr	r3, [r3, #4]
    4fa0:	685a      	ldr	r2, [r3, #4]
    4fa2:	687b      	ldr	r3, [r7, #4]
    4fa4:	605a      	str	r2, [r3, #4]
    4fa6:	687b      	ldr	r3, [r7, #4]
    4fa8:	685b      	ldr	r3, [r3, #4]
    4faa:	68da      	ldr	r2, [r3, #12]
    4fac:	f240 03ec 	movw	r3, #236	; 0xec
    4fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    4fb6:	f000 ff8b 	bl	5ed0 <myTraceSwitchedIn>
	}
}
    4fba:	3708      	adds	r7, #8
    4fbc:	46bd      	mov	sp, r7
    4fbe:	bd80      	pop	{r7, pc}

00004fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	b084      	sub	sp, #16
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
    4fc8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4fca:	f240 03ec 	movw	r3, #236	; 0xec
    4fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd2:	681b      	ldr	r3, [r3, #0]
    4fd4:	3318      	adds	r3, #24
    4fd6:	6878      	ldr	r0, [r7, #4]
    4fd8:	4619      	mov	r1, r3
    4fda:	f7fe fdc9 	bl	3b70 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4fde:	f240 03ec 	movw	r3, #236	; 0xec
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	3304      	adds	r3, #4
    4fea:	4618      	mov	r0, r3
    4fec:	f7fe fdf8 	bl	3be0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4ff0:	683b      	ldr	r3, [r7, #0]
    4ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ff6:	d10d      	bne.n	5014 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4ff8:	f240 03ec 	movw	r3, #236	; 0xec
    4ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	3304      	adds	r3, #4
    5004:	f240 20dc 	movw	r0, #732	; 0x2dc
    5008:	f2c2 0000 	movt	r0, #8192	; 0x2000
    500c:	4619      	mov	r1, r3
    500e:	f7fe fd87 	bl	3b20 <vListInsertEnd>
    5012:	e00a      	b.n	502a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5014:	f240 23f4 	movw	r3, #756	; 0x2f4
    5018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501c:	681a      	ldr	r2, [r3, #0]
    501e:	683b      	ldr	r3, [r7, #0]
    5020:	4413      	add	r3, r2
    5022:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5024:	68f8      	ldr	r0, [r7, #12]
    5026:	f000 f99f 	bl	5368 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    502a:	3710      	adds	r7, #16
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}

00005030 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5030:	b580      	push	{r7, lr}
    5032:	b084      	sub	sp, #16
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	68db      	ldr	r3, [r3, #12]
    503c:	68db      	ldr	r3, [r3, #12]
    503e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5040:	68bb      	ldr	r3, [r7, #8]
    5042:	3318      	adds	r3, #24
    5044:	4618      	mov	r0, r3
    5046:	f7fe fdcb 	bl	3be0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    504a:	f240 3304 	movw	r3, #772	; 0x304
    504e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5052:	681b      	ldr	r3, [r3, #0]
    5054:	2b00      	cmp	r3, #0
    5056:	d126      	bne.n	50a6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5058:	68bb      	ldr	r3, [r7, #8]
    505a:	3304      	adds	r3, #4
    505c:	4618      	mov	r0, r3
    505e:	f7fe fdbf 	bl	3be0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5062:	68bb      	ldr	r3, [r7, #8]
    5064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5066:	f240 23fc 	movw	r3, #764	; 0x2fc
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	681b      	ldr	r3, [r3, #0]
    5070:	429a      	cmp	r2, r3
    5072:	d906      	bls.n	5082 <xTaskRemoveFromEventList+0x52>
    5074:	68bb      	ldr	r3, [r7, #8]
    5076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5078:	f240 23fc 	movw	r3, #764	; 0x2fc
    507c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5080:	601a      	str	r2, [r3, #0]
    5082:	68bb      	ldr	r3, [r7, #8]
    5084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5086:	4613      	mov	r3, r2
    5088:	009b      	lsls	r3, r3, #2
    508a:	4413      	add	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	f240 02f0 	movw	r2, #240	; 0xf0
    5092:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5096:	441a      	add	r2, r3
    5098:	68bb      	ldr	r3, [r7, #8]
    509a:	3304      	adds	r3, #4
    509c:	4610      	mov	r0, r2
    509e:	4619      	mov	r1, r3
    50a0:	f7fe fd3e 	bl	3b20 <vListInsertEnd>
    50a4:	e008      	b.n	50b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    50a6:	68bb      	ldr	r3, [r7, #8]
    50a8:	3318      	adds	r3, #24
    50aa:	f240 20b0 	movw	r0, #688	; 0x2b0
    50ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50b2:	4619      	mov	r1, r3
    50b4:	f7fe fd34 	bl	3b20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    50b8:	68bb      	ldr	r3, [r7, #8]
    50ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50bc:	f240 03ec 	movw	r3, #236	; 0xec
    50c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50c8:	429a      	cmp	r2, r3
    50ca:	d302      	bcc.n	50d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    50cc:	2301      	movs	r3, #1
    50ce:	60fb      	str	r3, [r7, #12]
    50d0:	e001      	b.n	50d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    50d2:	2300      	movs	r3, #0
    50d4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    50d6:	68fb      	ldr	r3, [r7, #12]
}
    50d8:	4618      	mov	r0, r3
    50da:	3710      	adds	r7, #16
    50dc:	46bd      	mov	sp, r7
    50de:	bd80      	pop	{r7, pc}

000050e0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    50e0:	b480      	push	{r7}
    50e2:	b083      	sub	sp, #12
    50e4:	af00      	add	r7, sp, #0
    50e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    50e8:	f240 3310 	movw	r3, #784	; 0x310
    50ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f0:	681a      	ldr	r2, [r3, #0]
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    50f6:	f240 23f4 	movw	r3, #756	; 0x2f4
    50fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fe:	681a      	ldr	r2, [r3, #0]
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	605a      	str	r2, [r3, #4]
}
    5104:	370c      	adds	r7, #12
    5106:	46bd      	mov	sp, r7
    5108:	f85d 7b04 	ldr.w	r7, [sp], #4
    510c:	4770      	bx	lr
    510e:	bf00      	nop

00005110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5110:	b580      	push	{r7, lr}
    5112:	b084      	sub	sp, #16
    5114:	af00      	add	r7, sp, #0
    5116:	6078      	str	r0, [r7, #4]
    5118:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    511a:	f000 fb13 	bl	5744 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    511e:	683b      	ldr	r3, [r7, #0]
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	f1b3 3fff 	cmp.w	r3, #4294967295
    5126:	d102      	bne.n	512e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5128:	2300      	movs	r3, #0
    512a:	60fb      	str	r3, [r7, #12]
    512c:	e035      	b.n	519a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	681a      	ldr	r2, [r3, #0]
    5132:	f240 3310 	movw	r3, #784	; 0x310
    5136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	429a      	cmp	r2, r3
    513e:	d00b      	beq.n	5158 <xTaskCheckForTimeOut+0x48>
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	685a      	ldr	r2, [r3, #4]
    5144:	f240 23f4 	movw	r3, #756	; 0x2f4
    5148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514c:	681b      	ldr	r3, [r3, #0]
    514e:	429a      	cmp	r2, r3
    5150:	d802      	bhi.n	5158 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5152:	2301      	movs	r3, #1
    5154:	60fb      	str	r3, [r7, #12]
    5156:	e020      	b.n	519a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5158:	f240 23f4 	movw	r3, #756	; 0x2f4
    515c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5160:	681a      	ldr	r2, [r3, #0]
    5162:	687b      	ldr	r3, [r7, #4]
    5164:	685b      	ldr	r3, [r3, #4]
    5166:	1ad2      	subs	r2, r2, r3
    5168:	683b      	ldr	r3, [r7, #0]
    516a:	681b      	ldr	r3, [r3, #0]
    516c:	429a      	cmp	r2, r3
    516e:	d212      	bcs.n	5196 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	681a      	ldr	r2, [r3, #0]
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	6859      	ldr	r1, [r3, #4]
    5178:	f240 23f4 	movw	r3, #756	; 0x2f4
    517c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	1acb      	subs	r3, r1, r3
    5184:	441a      	add	r2, r3
    5186:	683b      	ldr	r3, [r7, #0]
    5188:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    518a:	6878      	ldr	r0, [r7, #4]
    518c:	f7ff ffa8 	bl	50e0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5190:	2300      	movs	r3, #0
    5192:	60fb      	str	r3, [r7, #12]
    5194:	e001      	b.n	519a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5196:	2301      	movs	r3, #1
    5198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    519a:	f000 fae9 	bl	5770 <vPortExitCritical>

	return xReturn;
    519e:	68fb      	ldr	r3, [r7, #12]
}
    51a0:	4618      	mov	r0, r3
    51a2:	3710      	adds	r7, #16
    51a4:	46bd      	mov	sp, r7
    51a6:	bd80      	pop	{r7, pc}

000051a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    51a8:	b480      	push	{r7}
    51aa:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    51ac:	f240 330c 	movw	r3, #780	; 0x30c
    51b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b4:	2201      	movs	r2, #1
    51b6:	601a      	str	r2, [r3, #0]
}
    51b8:	46bd      	mov	sp, r7
    51ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    51be:	4770      	bx	lr

000051c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    51c8:	f000 f886 	bl	52d8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    51cc:	f000 faac 	bl	5728 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    51d0:	e7fa      	b.n	51c8 <prvIdleTask+0x8>
    51d2:	bf00      	nop

000051d4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b084      	sub	sp, #16
    51d8:	af00      	add	r7, sp, #0
    51da:	60f8      	str	r0, [r7, #12]
    51dc:	60b9      	str	r1, [r7, #8]
    51de:	607a      	str	r2, [r7, #4]
    51e0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    51e2:	68fb      	ldr	r3, [r7, #12]
    51e4:	3334      	adds	r3, #52	; 0x34
    51e6:	4618      	mov	r0, r3
    51e8:	68b9      	ldr	r1, [r7, #8]
    51ea:	2210      	movs	r2, #16
    51ec:	f000 ff74 	bl	60d8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	2200      	movs	r2, #0
    51f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	2b13      	cmp	r3, #19
    51fc:	d901      	bls.n	5202 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    51fe:	2313      	movs	r3, #19
    5200:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5202:	68fb      	ldr	r3, [r7, #12]
    5204:	687a      	ldr	r2, [r7, #4]
    5206:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5208:	68fb      	ldr	r3, [r7, #12]
    520a:	687a      	ldr	r2, [r7, #4]
    520c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    520e:	68fb      	ldr	r3, [r7, #12]
    5210:	3304      	adds	r3, #4
    5212:	4618      	mov	r0, r3
    5214:	f7fe fc78 	bl	3b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5218:	68fb      	ldr	r3, [r7, #12]
    521a:	3318      	adds	r3, #24
    521c:	4618      	mov	r0, r3
    521e:	f7fe fc73 	bl	3b08 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5222:	68fb      	ldr	r3, [r7, #12]
    5224:	68fa      	ldr	r2, [r7, #12]
    5226:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	f1c3 0214 	rsb	r2, r3, #20
    522e:	68fb      	ldr	r3, [r7, #12]
    5230:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5232:	68fb      	ldr	r3, [r7, #12]
    5234:	68fa      	ldr	r2, [r7, #12]
    5236:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5238:	3710      	adds	r7, #16
    523a:	46bd      	mov	sp, r7
    523c:	bd80      	pop	{r7, pc}
    523e:	bf00      	nop

00005240 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5240:	b580      	push	{r7, lr}
    5242:	b082      	sub	sp, #8
    5244:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5246:	2300      	movs	r3, #0
    5248:	607b      	str	r3, [r7, #4]
    524a:	e00f      	b.n	526c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    524c:	687a      	ldr	r2, [r7, #4]
    524e:	4613      	mov	r3, r2
    5250:	009b      	lsls	r3, r3, #2
    5252:	4413      	add	r3, r2
    5254:	009b      	lsls	r3, r3, #2
    5256:	f240 02f0 	movw	r2, #240	; 0xf0
    525a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    525e:	4413      	add	r3, r2
    5260:	4618      	mov	r0, r3
    5262:	f7fe fc31 	bl	3ac8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	3301      	adds	r3, #1
    526a:	607b      	str	r3, [r7, #4]
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	2b13      	cmp	r3, #19
    5270:	d9ec      	bls.n	524c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5272:	f240 2080 	movw	r0, #640	; 0x280
    5276:	f2c2 0000 	movt	r0, #8192	; 0x2000
    527a:	f7fe fc25 	bl	3ac8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    527e:	f240 2094 	movw	r0, #660	; 0x294
    5282:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5286:	f7fe fc1f 	bl	3ac8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    528a:	f240 20b0 	movw	r0, #688	; 0x2b0
    528e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5292:	f7fe fc19 	bl	3ac8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5296:	f240 20c4 	movw	r0, #708	; 0x2c4
    529a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    529e:	f7fe fc13 	bl	3ac8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    52a2:	f240 20dc 	movw	r0, #732	; 0x2dc
    52a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    52aa:	f7fe fc0d 	bl	3ac8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    52ae:	f240 23a8 	movw	r3, #680	; 0x2a8
    52b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b6:	f240 2280 	movw	r2, #640	; 0x280
    52ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    52c0:	f240 23ac 	movw	r3, #684	; 0x2ac
    52c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c8:	f240 2294 	movw	r2, #660	; 0x294
    52cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52d0:	601a      	str	r2, [r3, #0]
}
    52d2:	3708      	adds	r7, #8
    52d4:	46bd      	mov	sp, r7
    52d6:	bd80      	pop	{r7, pc}

000052d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    52d8:	b580      	push	{r7, lr}
    52da:	b082      	sub	sp, #8
    52dc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    52de:	f240 23d8 	movw	r3, #728	; 0x2d8
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d03a      	beq.n	5362 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    52ec:	f7ff fc4c 	bl	4b88 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    52f0:	f240 23c4 	movw	r3, #708	; 0x2c4
    52f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	2b00      	cmp	r3, #0
    52fc:	bf14      	ite	ne
    52fe:	2300      	movne	r3, #0
    5300:	2301      	moveq	r3, #1
    5302:	b2db      	uxtb	r3, r3
    5304:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5306:	f7ff fc51 	bl	4bac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    530a:	687b      	ldr	r3, [r7, #4]
    530c:	2b00      	cmp	r3, #0
    530e:	d128      	bne.n	5362 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5310:	f000 fa18 	bl	5744 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5314:	f240 23c4 	movw	r3, #708	; 0x2c4
    5318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    531c:	68db      	ldr	r3, [r3, #12]
    531e:	68db      	ldr	r3, [r3, #12]
    5320:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5322:	683b      	ldr	r3, [r7, #0]
    5324:	3304      	adds	r3, #4
    5326:	4618      	mov	r0, r3
    5328:	f7fe fc5a 	bl	3be0 <vListRemove>
					--uxCurrentNumberOfTasks;
    532c:	f240 23f0 	movw	r3, #752	; 0x2f0
    5330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	1e5a      	subs	r2, r3, #1
    5338:	f240 23f0 	movw	r3, #752	; 0x2f0
    533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5340:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5342:	f240 23d8 	movw	r3, #728	; 0x2d8
    5346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	1e5a      	subs	r2, r3, #1
    534e:	f240 23d8 	movw	r3, #728	; 0x2d8
    5352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5356:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5358:	f000 fa0a 	bl	5770 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    535c:	6838      	ldr	r0, [r7, #0]
    535e:	f000 f879 	bl	5454 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5362:	3708      	adds	r7, #8
    5364:	46bd      	mov	sp, r7
    5366:	bd80      	pop	{r7, pc}

00005368 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5368:	b580      	push	{r7, lr}
    536a:	b082      	sub	sp, #8
    536c:	af00      	add	r7, sp, #0
    536e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5370:	f240 03ec 	movw	r3, #236	; 0xec
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	687a      	ldr	r2, [r7, #4]
    537c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    537e:	f240 23f4 	movw	r3, #756	; 0x2f4
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	687a      	ldr	r2, [r7, #4]
    538a:	429a      	cmp	r2, r3
    538c:	d20f      	bcs.n	53ae <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    538e:	f240 23ac 	movw	r3, #684	; 0x2ac
    5392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5396:	681a      	ldr	r2, [r3, #0]
    5398:	f240 03ec 	movw	r3, #236	; 0xec
    539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	3304      	adds	r3, #4
    53a4:	4610      	mov	r0, r2
    53a6:	4619      	mov	r1, r3
    53a8:	f7fe fbe2 	bl	3b70 <vListInsert>
    53ac:	e01c      	b.n	53e8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53ae:	f240 23a8 	movw	r3, #680	; 0x2a8
    53b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b6:	681a      	ldr	r2, [r3, #0]
    53b8:	f240 03ec 	movw	r3, #236	; 0xec
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	3304      	adds	r3, #4
    53c4:	4610      	mov	r0, r2
    53c6:	4619      	mov	r1, r3
    53c8:	f7fe fbd2 	bl	3b70 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    53cc:	f240 032c 	movw	r3, #44	; 0x2c
    53d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d4:	681b      	ldr	r3, [r3, #0]
    53d6:	687a      	ldr	r2, [r7, #4]
    53d8:	429a      	cmp	r2, r3
    53da:	d205      	bcs.n	53e8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    53dc:	f240 032c 	movw	r3, #44	; 0x2c
    53e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e4:	687a      	ldr	r2, [r7, #4]
    53e6:	601a      	str	r2, [r3, #0]
		}
	}
}
    53e8:	3708      	adds	r7, #8
    53ea:	46bd      	mov	sp, r7
    53ec:	bd80      	pop	{r7, pc}
    53ee:	bf00      	nop

000053f0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    53f0:	b580      	push	{r7, lr}
    53f2:	b084      	sub	sp, #16
    53f4:	af00      	add	r7, sp, #0
    53f6:	4603      	mov	r3, r0
    53f8:	6039      	str	r1, [r7, #0]
    53fa:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    53fc:	2050      	movs	r0, #80	; 0x50
    53fe:	f000 fa1b 	bl	5838 <pvPortMalloc>
    5402:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5404:	68fb      	ldr	r3, [r7, #12]
    5406:	2b00      	cmp	r3, #0
    5408:	d01f      	beq.n	544a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    540a:	683b      	ldr	r3, [r7, #0]
    540c:	2b00      	cmp	r3, #0
    540e:	d106      	bne.n	541e <prvAllocateTCBAndStack+0x2e>
    5410:	88fb      	ldrh	r3, [r7, #6]
    5412:	009b      	lsls	r3, r3, #2
    5414:	4618      	mov	r0, r3
    5416:	f000 fa0f 	bl	5838 <pvPortMalloc>
    541a:	4603      	mov	r3, r0
    541c:	e000      	b.n	5420 <prvAllocateTCBAndStack+0x30>
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	68fa      	ldr	r2, [r7, #12]
    5422:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5424:	68fb      	ldr	r3, [r7, #12]
    5426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5428:	2b00      	cmp	r3, #0
    542a:	d105      	bne.n	5438 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    542c:	68f8      	ldr	r0, [r7, #12]
    542e:	f000 fac7 	bl	59c0 <vPortFree>
			pxNewTCB = NULL;
    5432:	2300      	movs	r3, #0
    5434:	60fb      	str	r3, [r7, #12]
    5436:	e008      	b.n	544a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5438:	68fb      	ldr	r3, [r7, #12]
    543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    543c:	88fb      	ldrh	r3, [r7, #6]
    543e:	009b      	lsls	r3, r3, #2
    5440:	4610      	mov	r0, r2
    5442:	21a5      	movs	r1, #165	; 0xa5
    5444:	461a      	mov	r2, r3
    5446:	f000 fdf7 	bl	6038 <memset>
		}
	}

	return pxNewTCB;
    544a:	68fb      	ldr	r3, [r7, #12]
}
    544c:	4618      	mov	r0, r3
    544e:	3710      	adds	r7, #16
    5450:	46bd      	mov	sp, r7
    5452:	bd80      	pop	{r7, pc}

00005454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5454:	b580      	push	{r7, lr}
    5456:	b082      	sub	sp, #8
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5460:	4618      	mov	r0, r3
    5462:	f000 faad 	bl	59c0 <vPortFree>
		vPortFree( pxTCB );
    5466:	6878      	ldr	r0, [r7, #4]
    5468:	f000 faaa 	bl	59c0 <vPortFree>
	}
    546c:	3708      	adds	r7, #8
    546e:	46bd      	mov	sp, r7
    5470:	bd80      	pop	{r7, pc}
    5472:	bf00      	nop

00005474 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5474:	b480      	push	{r7}
    5476:	b083      	sub	sp, #12
    5478:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    547a:	f240 03ec 	movw	r3, #236	; 0xec
    547e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	607b      	str	r3, [r7, #4]

		return xReturn;
    5486:	687b      	ldr	r3, [r7, #4]
	}
    5488:	4618      	mov	r0, r3
    548a:	370c      	adds	r7, #12
    548c:	46bd      	mov	sp, r7
    548e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5492:	4770      	bx	lr

00005494 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5494:	b580      	push	{r7, lr}
    5496:	b084      	sub	sp, #16
    5498:	af00      	add	r7, sp, #0
    549a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    549c:	687b      	ldr	r3, [r7, #4]
    549e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    54a0:	68fb      	ldr	r3, [r7, #12]
    54a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54a4:	f240 03ec 	movw	r3, #236	; 0xec
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    54b0:	429a      	cmp	r2, r3
    54b2:	d24f      	bcs.n	5554 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    54b4:	f240 03ec 	movw	r3, #236	; 0xec
    54b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    54c0:	f1c3 0214 	rsb	r2, r3, #20
    54c4:	68fb      	ldr	r3, [r7, #12]
    54c6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    54c8:	68fb      	ldr	r3, [r7, #12]
    54ca:	6959      	ldr	r1, [r3, #20]
    54cc:	68fb      	ldr	r3, [r7, #12]
    54ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54d0:	4613      	mov	r3, r2
    54d2:	009b      	lsls	r3, r3, #2
    54d4:	4413      	add	r3, r2
    54d6:	009b      	lsls	r3, r3, #2
    54d8:	f240 02f0 	movw	r2, #240	; 0xf0
    54dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54e0:	4413      	add	r3, r2
    54e2:	4299      	cmp	r1, r3
    54e4:	d12e      	bne.n	5544 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    54e6:	68fb      	ldr	r3, [r7, #12]
    54e8:	3304      	adds	r3, #4
    54ea:	4618      	mov	r0, r3
    54ec:	f7fe fb78 	bl	3be0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    54f0:	f240 03ec 	movw	r3, #236	; 0xec
    54f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54fc:	68fb      	ldr	r3, [r7, #12]
    54fe:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5500:	68fb      	ldr	r3, [r7, #12]
    5502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5504:	f240 23fc 	movw	r3, #764	; 0x2fc
    5508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	429a      	cmp	r2, r3
    5510:	d906      	bls.n	5520 <vTaskPriorityInherit+0x8c>
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5516:	f240 23fc 	movw	r3, #764	; 0x2fc
    551a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551e:	601a      	str	r2, [r3, #0]
    5520:	68fb      	ldr	r3, [r7, #12]
    5522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5524:	4613      	mov	r3, r2
    5526:	009b      	lsls	r3, r3, #2
    5528:	4413      	add	r3, r2
    552a:	009b      	lsls	r3, r3, #2
    552c:	f240 02f0 	movw	r2, #240	; 0xf0
    5530:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5534:	441a      	add	r2, r3
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	3304      	adds	r3, #4
    553a:	4610      	mov	r0, r2
    553c:	4619      	mov	r1, r3
    553e:	f7fe faef 	bl	3b20 <vListInsertEnd>
    5542:	e007      	b.n	5554 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5544:	f240 03ec 	movw	r3, #236	; 0xec
    5548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5554:	3710      	adds	r7, #16
    5556:	46bd      	mov	sp, r7
    5558:	bd80      	pop	{r7, pc}
    555a:	bf00      	nop

0000555c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    555c:	b580      	push	{r7, lr}
    555e:	b084      	sub	sp, #16
    5560:	af00      	add	r7, sp, #0
    5562:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5564:	687b      	ldr	r3, [r7, #4]
    5566:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	2b00      	cmp	r3, #0
    556c:	d035      	beq.n	55da <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5572:	68fb      	ldr	r3, [r7, #12]
    5574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5576:	429a      	cmp	r2, r3
    5578:	d02f      	beq.n	55da <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    557a:	68fb      	ldr	r3, [r7, #12]
    557c:	3304      	adds	r3, #4
    557e:	4618      	mov	r0, r3
    5580:	f7fe fb2e 	bl	3be0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5584:	68fb      	ldr	r3, [r7, #12]
    5586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    558c:	68fb      	ldr	r3, [r7, #12]
    558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5590:	f1c3 0214 	rsb	r2, r3, #20
    5594:	68fb      	ldr	r3, [r7, #12]
    5596:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5598:	68fb      	ldr	r3, [r7, #12]
    559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    559c:	f240 23fc 	movw	r3, #764	; 0x2fc
    55a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	429a      	cmp	r2, r3
    55a8:	d906      	bls.n	55b8 <vTaskPriorityDisinherit+0x5c>
    55aa:	68fb      	ldr	r3, [r7, #12]
    55ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ae:	f240 23fc 	movw	r3, #764	; 0x2fc
    55b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b6:	601a      	str	r2, [r3, #0]
    55b8:	68fb      	ldr	r3, [r7, #12]
    55ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55bc:	4613      	mov	r3, r2
    55be:	009b      	lsls	r3, r3, #2
    55c0:	4413      	add	r3, r2
    55c2:	009b      	lsls	r3, r3, #2
    55c4:	f240 02f0 	movw	r2, #240	; 0xf0
    55c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55cc:	441a      	add	r2, r3
    55ce:	68fb      	ldr	r3, [r7, #12]
    55d0:	3304      	adds	r3, #4
    55d2:	4610      	mov	r0, r2
    55d4:	4619      	mov	r1, r3
    55d6:	f7fe faa3 	bl	3b20 <vListInsertEnd>
			}
		}
	}
    55da:	3710      	adds	r7, #16
    55dc:	46bd      	mov	sp, r7
    55de:	bd80      	pop	{r7, pc}

000055e0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    55ec:	4618      	mov	r0, r3
    55ee:	370c      	adds	r7, #12
    55f0:	46bd      	mov	sp, r7
    55f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f6:	4770      	bx	lr

000055f8 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    55f8:	b480      	push	{r7}
    55fa:	b083      	sub	sp, #12
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5604:	4618      	mov	r0, r3
    5606:	370c      	adds	r7, #12
    5608:	46bd      	mov	sp, r7
    560a:	f85d 7b04 	ldr.w	r7, [sp], #4
    560e:	4770      	bx	lr

00005610 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5610:	b480      	push	{r7}
    5612:	b083      	sub	sp, #12
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
    5618:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	683a      	ldr	r2, [r7, #0]
    561e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5620:	370c      	adds	r7, #12
    5622:	46bd      	mov	sp, r7
    5624:	f85d 7b04 	ldr.w	r7, [sp], #4
    5628:	4770      	bx	lr
    562a:	bf00      	nop

0000562c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    562c:	b480      	push	{r7}
    562e:	b083      	sub	sp, #12
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
    5634:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5636:	687b      	ldr	r3, [r7, #4]
    5638:	683a      	ldr	r2, [r7, #0]
    563a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    563c:	370c      	adds	r7, #12
    563e:	46bd      	mov	sp, r7
    5640:	f85d 7b04 	ldr.w	r7, [sp], #4
    5644:	4770      	bx	lr
    5646:	bf00      	nop

00005648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5648:	b480      	push	{r7}
    564a:	b085      	sub	sp, #20
    564c:	af00      	add	r7, sp, #0
    564e:	60f8      	str	r0, [r7, #12]
    5650:	60b9      	str	r1, [r7, #8]
    5652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5654:	68fb      	ldr	r3, [r7, #12]
    5656:	3b04      	subs	r3, #4
    5658:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    565a:	68fb      	ldr	r3, [r7, #12]
    565c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5662:	68fb      	ldr	r3, [r7, #12]
    5664:	3b04      	subs	r3, #4
    5666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5668:	68ba      	ldr	r2, [r7, #8]
    566a:	68fb      	ldr	r3, [r7, #12]
    566c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	3b04      	subs	r3, #4
    5672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5674:	68fb      	ldr	r3, [r7, #12]
    5676:	2200      	movs	r2, #0
    5678:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    567a:	68fb      	ldr	r3, [r7, #12]
    567c:	3b14      	subs	r3, #20
    567e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5680:	687a      	ldr	r2, [r7, #4]
    5682:	68fb      	ldr	r3, [r7, #12]
    5684:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5686:	68fb      	ldr	r3, [r7, #12]
    5688:	3b20      	subs	r3, #32
    568a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    568c:	68fb      	ldr	r3, [r7, #12]
}
    568e:	4618      	mov	r0, r3
    5690:	3714      	adds	r7, #20
    5692:	46bd      	mov	sp, r7
    5694:	f85d 7b04 	ldr.w	r7, [sp], #4
    5698:	4770      	bx	lr
    569a:	bf00      	nop

0000569c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    569c:	4b06      	ldr	r3, [pc, #24]	; (56b8 <pxCurrentTCBConst2>)
    569e:	6819      	ldr	r1, [r3, #0]
    56a0:	6808      	ldr	r0, [r1, #0]
    56a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    56a6:	f380 8809 	msr	PSP, r0
    56aa:	f04f 0000 	mov.w	r0, #0
    56ae:	f380 8811 	msr	BASEPRI, r0
    56b2:	f04e 0e0d 	orr.w	lr, lr, #13
    56b6:	4770      	bx	lr

000056b8 <pxCurrentTCBConst2>:
    56b8:	200000ec 	.word	0x200000ec

000056bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    56bc:	485d      	ldr	r0, [pc, #372]	; (5834 <prvSetupTimerInterrupt+0x2c>)
    56be:	6800      	ldr	r0, [r0, #0]
    56c0:	6800      	ldr	r0, [r0, #0]
    56c2:	f380 8808 	msr	MSP, r0
    56c6:	b662      	cpsie	i
    56c8:	df00      	svc	0
    56ca:	bf00      	nop

000056cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    56cc:	b580      	push	{r7, lr}
    56ce:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    56d0:	f64e 5320 	movw	r3, #60704	; 0xed20
    56d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    56d8:	f64e 5220 	movw	r2, #60704	; 0xed20
    56dc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    56e0:	6812      	ldr	r2, [r2, #0]
    56e2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    56e6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    56e8:	f64e 5320 	movw	r3, #60704	; 0xed20
    56ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
    56f0:	f64e 5220 	movw	r2, #60704	; 0xed20
    56f4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    56f8:	6812      	ldr	r2, [r2, #0]
    56fa:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    56fe:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5700:	f000 f882 	bl	5808 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5704:	f240 0330 	movw	r3, #48	; 0x30
    5708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570c:	2200      	movs	r2, #0
    570e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5710:	f7ff ffd4 	bl	56bc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5714:	2300      	movs	r3, #0
}
    5716:	4618      	mov	r0, r3
    5718:	bd80      	pop	{r7, pc}
    571a:	bf00      	nop

0000571c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    571c:	b480      	push	{r7}
    571e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5720:	46bd      	mov	sp, r7
    5722:	f85d 7b04 	ldr.w	r7, [sp], #4
    5726:	4770      	bx	lr

00005728 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5728:	b480      	push	{r7}
    572a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    572c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5730:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5738:	601a      	str	r2, [r3, #0]
}
    573a:	46bd      	mov	sp, r7
    573c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5740:	4770      	bx	lr
    5742:	bf00      	nop

00005744 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5744:	b480      	push	{r7}
    5746:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5748:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    574c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5750:	f240 0330 	movw	r3, #48	; 0x30
    5754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	1c5a      	adds	r2, r3, #1
    575c:	f240 0330 	movw	r3, #48	; 0x30
    5760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5764:	601a      	str	r2, [r3, #0]
}
    5766:	46bd      	mov	sp, r7
    5768:	f85d 7b04 	ldr.w	r7, [sp], #4
    576c:	4770      	bx	lr
    576e:	bf00      	nop

00005770 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5770:	b480      	push	{r7}
    5772:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5774:	f240 0330 	movw	r3, #48	; 0x30
    5778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	1e5a      	subs	r2, r3, #1
    5780:	f240 0330 	movw	r3, #48	; 0x30
    5784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5788:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    578a:	f240 0330 	movw	r3, #48	; 0x30
    578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	2b00      	cmp	r3, #0
    5796:	d103      	bne.n	57a0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5798:	f04f 0000 	mov.w	r0, #0
    579c:	f380 8811 	msr	BASEPRI, r0
	}
}
    57a0:	46bd      	mov	sp, r7
    57a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a6:	4770      	bx	lr

000057a8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    57a8:	f3ef 8009 	mrs	r0, PSP
    57ac:	4b0c      	ldr	r3, [pc, #48]	; (57e0 <pxCurrentTCBConst>)
    57ae:	681a      	ldr	r2, [r3, #0]
    57b0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    57b4:	6010      	str	r0, [r2, #0]
    57b6:	e92d 4008 	stmdb	sp!, {r3, lr}
    57ba:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    57be:	f380 8811 	msr	BASEPRI, r0
    57c2:	f7ff fba1 	bl	4f08 <vTaskSwitchContext>
    57c6:	f04f 0000 	mov.w	r0, #0
    57ca:	f380 8811 	msr	BASEPRI, r0
    57ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    57d2:	6819      	ldr	r1, [r3, #0]
    57d4:	6808      	ldr	r0, [r1, #0]
    57d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    57da:	f380 8809 	msr	PSP, r0
    57de:	4770      	bx	lr

000057e0 <pxCurrentTCBConst>:
    57e0:	200000ec 	.word	0x200000ec

000057e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b082      	sub	sp, #8
    57e8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    57ea:	2300      	movs	r3, #0
    57ec:	607b      	str	r3, [r7, #4]
    57ee:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    57f2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    57f6:	f7ff faa9 	bl	4d4c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    57fa:	f04f 0000 	mov.w	r0, #0
    57fe:	f380 8811 	msr	BASEPRI, r0
}
    5802:	3708      	adds	r7, #8
    5804:	46bd      	mov	sp, r7
    5806:	bd80      	pop	{r7, pc}

00005808 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5808:	b480      	push	{r7}
    580a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    580c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5810:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5814:	f641 123f 	movw	r2, #6463	; 0x193f
    5818:	f2c0 0201 	movt	r2, #1
    581c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    581e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5822:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5826:	2207      	movs	r2, #7
    5828:	601a      	str	r2, [r3, #0]
}
    582a:	46bd      	mov	sp, r7
    582c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5830:	4770      	bx	lr
    5832:	0000      	.short	0x0000
    5834:	e000ed08 	.word	0xe000ed08

00005838 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5838:	b580      	push	{r7, lr}
    583a:	b08a      	sub	sp, #40	; 0x28
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5840:	2300      	movs	r3, #0
    5842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5844:	f7ff f9a0 	bl	4b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5848:	f642 7328 	movw	r3, #12072	; 0x2f28
    584c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	2b00      	cmp	r3, #0
    5854:	d130      	bne.n	58b8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5856:	f642 7318 	movw	r3, #12056	; 0x2f18
    585a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    585e:	f240 3218 	movw	r2, #792	; 0x318
    5862:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5866:	601a      	str	r2, [r3, #0]
    5868:	f642 7318 	movw	r3, #12056	; 0x2f18
    586c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5870:	2200      	movs	r2, #0
    5872:	605a      	str	r2, [r3, #4]
    5874:	f642 7320 	movw	r3, #12064	; 0x2f20
    5878:	f2c2 0301 	movt	r3, #8193	; 0x2001
    587c:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
    5880:	605a      	str	r2, [r3, #4]
    5882:	f642 7320 	movw	r3, #12064	; 0x2f20
    5886:	f2c2 0301 	movt	r3, #8193	; 0x2001
    588a:	2200      	movs	r2, #0
    588c:	601a      	str	r2, [r3, #0]
    588e:	f240 3318 	movw	r3, #792	; 0x318
    5892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5896:	617b      	str	r3, [r7, #20]
    5898:	697b      	ldr	r3, [r7, #20]
    589a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
    589e:	605a      	str	r2, [r3, #4]
    58a0:	697a      	ldr	r2, [r7, #20]
    58a2:	f642 7320 	movw	r3, #12064	; 0x2f20
    58a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58aa:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    58ac:	f642 7328 	movw	r3, #12072	; 0x2f28
    58b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58b4:	2201      	movs	r2, #1
    58b6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	2b00      	cmp	r3, #0
    58bc:	d00d      	beq.n	58da <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    58be:	2310      	movs	r3, #16
    58c0:	687a      	ldr	r2, [r7, #4]
    58c2:	4413      	add	r3, r2
    58c4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	f003 0307 	and.w	r3, r3, #7
    58cc:	2b00      	cmp	r3, #0
    58ce:	d004      	beq.n	58da <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	f023 0307 	bic.w	r3, r3, #7
    58d6:	3308      	adds	r3, #8
    58d8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	2b00      	cmp	r3, #0
    58de:	d068      	beq.n	59b2 <pvPortMalloc+0x17a>
    58e0:	687b      	ldr	r3, [r7, #4]
    58e2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    58e6:	d264      	bcs.n	59b2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    58e8:	f642 7318 	movw	r3, #12056	; 0x2f18
    58ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58f0:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    58f2:	f642 7318 	movw	r3, #12056	; 0x2f18
    58f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    58fe:	e004      	b.n	590a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5902:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    590c:	685a      	ldr	r2, [r3, #4]
    590e:	687b      	ldr	r3, [r7, #4]
    5910:	429a      	cmp	r2, r3
    5912:	d203      	bcs.n	591c <pvPortMalloc+0xe4>
    5914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	2b00      	cmp	r3, #0
    591a:	d1f1      	bne.n	5900 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    591c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    591e:	f642 7320 	movw	r3, #12064	; 0x2f20
    5922:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5926:	429a      	cmp	r2, r3
    5928:	d043      	beq.n	59b2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    592a:	6a3b      	ldr	r3, [r7, #32]
    592c:	681a      	ldr	r2, [r3, #0]
    592e:	2310      	movs	r3, #16
    5930:	4413      	add	r3, r2
    5932:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5936:	681a      	ldr	r2, [r3, #0]
    5938:	6a3b      	ldr	r3, [r7, #32]
    593a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    593e:	685a      	ldr	r2, [r3, #4]
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	1ad2      	subs	r2, r2, r3
    5944:	2310      	movs	r3, #16
    5946:	005b      	lsls	r3, r3, #1
    5948:	429a      	cmp	r2, r3
    594a:	d925      	bls.n	5998 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	4413      	add	r3, r2
    5952:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5956:	685a      	ldr	r2, [r3, #4]
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	1ad2      	subs	r2, r2, r3
    595c:	693b      	ldr	r3, [r7, #16]
    595e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5962:	687a      	ldr	r2, [r7, #4]
    5964:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5966:	693b      	ldr	r3, [r7, #16]
    5968:	685b      	ldr	r3, [r3, #4]
    596a:	60fb      	str	r3, [r7, #12]
    596c:	f642 7318 	movw	r3, #12056	; 0x2f18
    5970:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5974:	61bb      	str	r3, [r7, #24]
    5976:	e002      	b.n	597e <pvPortMalloc+0x146>
    5978:	69bb      	ldr	r3, [r7, #24]
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	61bb      	str	r3, [r7, #24]
    597e:	69bb      	ldr	r3, [r7, #24]
    5980:	681b      	ldr	r3, [r3, #0]
    5982:	685a      	ldr	r2, [r3, #4]
    5984:	68fb      	ldr	r3, [r7, #12]
    5986:	429a      	cmp	r2, r3
    5988:	d3f6      	bcc.n	5978 <pvPortMalloc+0x140>
    598a:	69bb      	ldr	r3, [r7, #24]
    598c:	681a      	ldr	r2, [r3, #0]
    598e:	693b      	ldr	r3, [r7, #16]
    5990:	601a      	str	r2, [r3, #0]
    5992:	69bb      	ldr	r3, [r7, #24]
    5994:	693a      	ldr	r2, [r7, #16]
    5996:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5998:	f240 0334 	movw	r3, #52	; 0x34
    599c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a0:	681a      	ldr	r2, [r3, #0]
    59a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59a4:	685b      	ldr	r3, [r3, #4]
    59a6:	1ad2      	subs	r2, r2, r3
    59a8:	f240 0334 	movw	r3, #52	; 0x34
    59ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    59b2:	f7ff f8fb 	bl	4bac <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    59b6:	69fb      	ldr	r3, [r7, #28]
}
    59b8:	4618      	mov	r0, r3
    59ba:	3728      	adds	r7, #40	; 0x28
    59bc:	46bd      	mov	sp, r7
    59be:	bd80      	pop	{r7, pc}

000059c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    59c0:	b580      	push	{r7, lr}
    59c2:	b086      	sub	sp, #24
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    59cc:	687b      	ldr	r3, [r7, #4]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d030      	beq.n	5a34 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    59d2:	2310      	movs	r3, #16
    59d4:	425b      	negs	r3, r3
    59d6:	693a      	ldr	r2, [r7, #16]
    59d8:	4413      	add	r3, r2
    59da:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    59dc:	693b      	ldr	r3, [r7, #16]
    59de:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    59e0:	f7ff f8d2 	bl	4b88 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    59e4:	68fb      	ldr	r3, [r7, #12]
    59e6:	685b      	ldr	r3, [r3, #4]
    59e8:	60bb      	str	r3, [r7, #8]
    59ea:	f642 7318 	movw	r3, #12056	; 0x2f18
    59ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59f2:	617b      	str	r3, [r7, #20]
    59f4:	e002      	b.n	59fc <vPortFree+0x3c>
    59f6:	697b      	ldr	r3, [r7, #20]
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	617b      	str	r3, [r7, #20]
    59fc:	697b      	ldr	r3, [r7, #20]
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	685a      	ldr	r2, [r3, #4]
    5a02:	68bb      	ldr	r3, [r7, #8]
    5a04:	429a      	cmp	r2, r3
    5a06:	d3f6      	bcc.n	59f6 <vPortFree+0x36>
    5a08:	697b      	ldr	r3, [r7, #20]
    5a0a:	681a      	ldr	r2, [r3, #0]
    5a0c:	68fb      	ldr	r3, [r7, #12]
    5a0e:	601a      	str	r2, [r3, #0]
    5a10:	697b      	ldr	r3, [r7, #20]
    5a12:	68fa      	ldr	r2, [r7, #12]
    5a14:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5a16:	68fb      	ldr	r3, [r7, #12]
    5a18:	685a      	ldr	r2, [r3, #4]
    5a1a:	f240 0334 	movw	r3, #52	; 0x34
    5a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	441a      	add	r2, r3
    5a26:	f240 0334 	movw	r3, #52	; 0x34
    5a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5a30:	f7ff f8bc 	bl	4bac <xTaskResumeAll>
	}
}
    5a34:	3718      	adds	r7, #24
    5a36:	46bd      	mov	sp, r7
    5a38:	bd80      	pop	{r7, pc}
    5a3a:	bf00      	nop

00005a3c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5a3c:	b480      	push	{r7}
    5a3e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5a40:	f240 0334 	movw	r3, #52	; 0x34
    5a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a48:	681b      	ldr	r3, [r3, #0]
}
    5a4a:	4618      	mov	r0, r3
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5a54:	b480      	push	{r7}
    5a56:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5a58:	46bd      	mov	sp, r7
    5a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5e:	4770      	bx	lr

00005a60 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b082      	sub	sp, #8
    5a64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    5a66:	2010      	movs	r0, #16
    5a68:	2101      	movs	r1, #1
    5a6a:	f7fb f9a9 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    5a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5a72:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5a7a:	2201      	movs	r2, #1
    5a7c:	f7fb fcb0 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    5a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5a84:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    5a86:	2310      	movs	r3, #16
    5a88:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5a8a:	2303      	movs	r3, #3
    5a8c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5a8e:	1d3b      	adds	r3, r7, #4
    5a90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5a94:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5a98:	4619      	mov	r1, r3
    5a9a:	f7fb fb65 	bl	1168 <GPIO_Init>
}
    5a9e:	3708      	adds	r7, #8
    5aa0:	46bd      	mov	sp, r7
    5aa2:	bd80      	pop	{r7, pc}

00005aa4 <init_button>:

void init_button(void)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    5aaa:	2004      	movs	r0, #4
    5aac:	2101      	movs	r1, #1
    5aae:	f7fb f987 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    5ab2:	2301      	movs	r3, #1
    5ab4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5ab6:	2304      	movs	r3, #4
    5ab8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5aba:	2303      	movs	r3, #3
    5abc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5abe:	1d3b      	adds	r3, r7, #4
    5ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5ac4:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5ac8:	4619      	mov	r1, r3
    5aca:	f7fb fb4d 	bl	1168 <GPIO_Init>
}
    5ace:	3708      	adds	r7, #8
    5ad0:	46bd      	mov	sp, r7
    5ad2:	bd80      	pop	{r7, pc}

00005ad4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    5ad4:	b580      	push	{r7, lr}
    5ad6:	b084      	sub	sp, #16
    5ad8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    5ada:	2001      	movs	r0, #1
    5adc:	2101      	movs	r1, #1
    5ade:	f7fb f96f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    5ae2:	2000      	movs	r0, #0
    5ae4:	2100      	movs	r1, #0
    5ae6:	f7fb fd73 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    5aea:	2301      	movs	r3, #1
    5aec:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    5aee:	2300      	movs	r3, #0
    5af0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    5af2:	2308      	movs	r3, #8
    5af4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    5af6:	2301      	movs	r3, #1
    5af8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    5afa:	f107 0308 	add.w	r3, r7, #8
    5afe:	4618      	mov	r0, r3
    5b00:	f7fc fa6c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    5b04:	2306      	movs	r3, #6
    5b06:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    5b08:	230f      	movs	r3, #15
    5b0a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    5b0c:	230f      	movs	r3, #15
    5b0e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5b10:	2301      	movs	r3, #1
    5b12:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5b14:	1d3b      	adds	r3, r7, #4
    5b16:	4618      	mov	r0, r3
    5b18:	f7fc fb9a 	bl	2250 <NVIC_Init>
}
    5b1c:	3710      	adds	r7, #16
    5b1e:	46bd      	mov	sp, r7
    5b20:	bd80      	pop	{r7, pc}
    5b22:	bf00      	nop

00005b24 <init_rs232>:

void init_rs232(void)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b086      	sub	sp, #24
    5b28:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    5b2a:	2005      	movs	r0, #5
    5b2c:	2101      	movs	r1, #1
    5b2e:	f7fb f947 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    5b32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    5b36:	2101      	movs	r1, #1
    5b38:	f7fb f96a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    5b3c:	2308      	movs	r3, #8
    5b3e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5b40:	2304      	movs	r3, #4
    5b42:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5b44:	1d3b      	adds	r3, r7, #4
    5b46:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5b4a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5b4e:	4619      	mov	r1, r3
    5b50:	f7fb fb0a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    5b54:	2304      	movs	r3, #4
    5b56:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5b58:	2303      	movs	r3, #3
    5b5a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    5b5c:	2318      	movs	r3, #24
    5b5e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5b60:	1d3b      	adds	r3, r7, #4
    5b62:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5b66:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5b6a:	4619      	mov	r1, r3
    5b6c:	f7fb fafc 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    5b70:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    5b74:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    5b76:	2300      	movs	r3, #0
    5b78:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    5b7a:	2300      	movs	r3, #0
    5b7c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    5b7e:	2300      	movs	r3, #0
    5b80:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    5b82:	2300      	movs	r3, #0
    5b84:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    5b86:	230c      	movs	r3, #12
    5b88:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    5b8a:	f107 0308 	add.w	r3, r7, #8
    5b8e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5b92:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5b96:	4619      	mov	r1, r3
    5b98:	f7fb fdce 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    5b9c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5ba0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5ba4:	2101      	movs	r1, #1
    5ba6:	f7fb fee5 	bl	1974 <USART_Cmd>
}
    5baa:	3718      	adds	r7, #24
    5bac:	46bd      	mov	sp, r7
    5bae:	bd80      	pop	{r7, pc}

00005bb0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    5bb0:	b580      	push	{r7, lr}
    5bb2:	b082      	sub	sp, #8
    5bb4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    5bb6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5bba:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5bbe:	f240 7127 	movw	r1, #1831	; 0x727
    5bc2:	2200      	movs	r2, #0
    5bc4:	f7fb fef6 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    5bc8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5bcc:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5bd0:	f240 5125 	movw	r1, #1317	; 0x525
    5bd4:	2201      	movs	r2, #1
    5bd6:	f7fb feed 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    5bda:	2326      	movs	r3, #38	; 0x26
    5bdc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    5bde:	2300      	movs	r3, #0
    5be0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5be2:	2301      	movs	r3, #1
    5be4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5be6:	1d3b      	adds	r3, r7, #4
    5be8:	4618      	mov	r0, r3
    5bea:	f7fc fb31 	bl	2250 <NVIC_Init>
}
    5bee:	3708      	adds	r7, #8
    5bf0:	46bd      	mov	sp, r7
    5bf2:	bd80      	pop	{r7, pc}

00005bf4 <enable_rs232>:

void enable_rs232(void)
{
    5bf4:	b580      	push	{r7, lr}
    5bf6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    5bf8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5bfc:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5c00:	2101      	movs	r1, #1
    5c02:	f7fb feb7 	bl	1974 <USART_Cmd>
}
    5c06:	bd80      	pop	{r7, pc}

00005c08 <send_byte>:

void send_byte(uint8_t b)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b082      	sub	sp, #8
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	4603      	mov	r3, r0
    5c10:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    5c12:	bf00      	nop
    5c14:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5c18:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5c1c:	2180      	movs	r1, #128	; 0x80
    5c1e:	f7fc f915 	bl	1e4c <USART_GetFlagStatus>
    5c22:	4603      	mov	r3, r0
    5c24:	2b00      	cmp	r3, #0
    5c26:	d0f5      	beq.n	5c14 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
    5c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5c2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5c34:	f2c4 0201 	movt	r2, #16385	; 0x4001
    5c38:	68d2      	ldr	r2, [r2, #12]
    5c3a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    5c3e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
    5c40:	79fb      	ldrb	r3, [r7, #7]
    5c42:	b29b      	uxth	r3, r3
    5c44:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5c48:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5c4c:	4619      	mov	r1, r3
    5c4e:	f7fb ffb1 	bl	1bb4 <USART_SendData>
}
    5c52:	3708      	adds	r7, #8
    5c54:	46bd      	mov	sp, r7
    5c56:	bd80      	pop	{r7, pc}

00005c58 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	4603      	mov	r3, r0
    5c60:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
    5c62:	79fb      	ldrb	r3, [r7, #7]
    5c64:	3330      	adds	r3, #48	; 0x30
    5c66:	b2db      	uxtb	r3, r3
    5c68:	4618      	mov	r0, r3
    5c6a:	f7ff ffcd 	bl	5c08 <send_byte>
}
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}

00005c74 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
    5c74:	b580      	push	{r7, lr}
    5c76:	b084      	sub	sp, #16
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
    int i = 0;
    5c7c:	2300      	movs	r3, #0
    5c7e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
    5c80:	e009      	b.n	5c96 <vPrintString+0x22>
    {
        send_byte(string[i]);
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	687a      	ldr	r2, [r7, #4]
    5c86:	4413      	add	r3, r2
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	4618      	mov	r0, r3
    5c8c:	f7ff ffbc 	bl	5c08 <send_byte>
        i++;
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	3301      	adds	r3, #1
    5c94:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
    5c96:	68fb      	ldr	r3, [r7, #12]
    5c98:	687a      	ldr	r2, [r7, #4]
    5c9a:	4413      	add	r3, r2
    5c9c:	781b      	ldrb	r3, [r3, #0]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d1ef      	bne.n	5c82 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
    5ca2:	3710      	adds	r7, #16
    5ca4:	46bd      	mov	sp, r7
    5ca6:	bd80      	pop	{r7, pc}

00005ca8 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b08a      	sub	sp, #40	; 0x28
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
    5cb0:	2300      	movs	r3, #0
    5cb2:	623b      	str	r3, [r7, #32]
    long num = c_num;
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	61fb      	str	r3, [r7, #28]

    if(num == 0)
    5cb8:	69fb      	ldr	r3, [r7, #28]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d106      	bne.n	5ccc <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
    5cbe:	f246 2028 	movw	r0, #25128	; 0x6228
    5cc2:	f2c0 0000 	movt	r0, #0
    5cc6:	f7ff ffd5 	bl	5c74 <vPrintString>
    5cca:	e062      	b.n	5d92 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
    5ccc:	e024      	b.n	5d18 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
    5cce:	69f9      	ldr	r1, [r7, #28]
    5cd0:	f246 6367 	movw	r3, #26215	; 0x6667
    5cd4:	f2c6 6366 	movt	r3, #26214	; 0x6666
    5cd8:	fb83 2301 	smull	r2, r3, r3, r1
    5cdc:	109a      	asrs	r2, r3, #2
    5cde:	17cb      	asrs	r3, r1, #31
    5ce0:	1ad2      	subs	r2, r2, r3
    5ce2:	4613      	mov	r3, r2
    5ce4:	009b      	lsls	r3, r3, #2
    5ce6:	4413      	add	r3, r2
    5ce8:	005b      	lsls	r3, r3, #1
    5cea:	1aca      	subs	r2, r1, r3
    5cec:	b2d3      	uxtb	r3, r2
    5cee:	3330      	adds	r3, #48	; 0x30
    5cf0:	b2da      	uxtb	r2, r3
    5cf2:	f107 010c 	add.w	r1, r7, #12
    5cf6:	6a3b      	ldr	r3, [r7, #32]
    5cf8:	440b      	add	r3, r1
    5cfa:	701a      	strb	r2, [r3, #0]
            count ++;
    5cfc:	6a3b      	ldr	r3, [r7, #32]
    5cfe:	3301      	adds	r3, #1
    5d00:	623b      	str	r3, [r7, #32]
            num /= 10;
    5d02:	69fa      	ldr	r2, [r7, #28]
    5d04:	f246 6367 	movw	r3, #26215	; 0x6667
    5d08:	f2c6 6366 	movt	r3, #26214	; 0x6666
    5d0c:	fb83 1302 	smull	r1, r3, r3, r2
    5d10:	1099      	asrs	r1, r3, #2
    5d12:	17d3      	asrs	r3, r2, #31
    5d14:	1acb      	subs	r3, r1, r3
    5d16:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
    5d18:	69fb      	ldr	r3, [r7, #28]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d1d7      	bne.n	5cce <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
    5d1e:	f107 020c 	add.w	r2, r7, #12
    5d22:	6a3b      	ldr	r3, [r7, #32]
    5d24:	4413      	add	r3, r2
    5d26:	2200      	movs	r2, #0
    5d28:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
    5d2a:	2300      	movs	r3, #0
    5d2c:	627b      	str	r3, [r7, #36]	; 0x24
    5d2e:	e020      	b.n	5d72 <vPrintNumber+0xca>
        {
            tmp = time[i];
    5d30:	f107 020c 	add.w	r2, r7, #12
    5d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d36:	4413      	add	r3, r2
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
    5d3c:	6a3a      	ldr	r2, [r7, #32]
    5d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d40:	1ad3      	subs	r3, r2, r3
    5d42:	3b01      	subs	r3, #1
    5d44:	f107 0228 	add.w	r2, r7, #40	; 0x28
    5d48:	4413      	add	r3, r2
    5d4a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    5d4e:	f107 010c 	add.w	r1, r7, #12
    5d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d54:	440b      	add	r3, r1
    5d56:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
    5d58:	6a3a      	ldr	r2, [r7, #32]
    5d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d5c:	1ad3      	subs	r3, r2, r3
    5d5e:	3b01      	subs	r3, #1
    5d60:	f107 0128 	add.w	r1, r7, #40	; 0x28
    5d64:	440b      	add	r3, r1
    5d66:	7efa      	ldrb	r2, [r7, #27]
    5d68:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
    5d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d6e:	3301      	adds	r3, #1
    5d70:	627b      	str	r3, [r7, #36]	; 0x24
    5d72:	6a3b      	ldr	r3, [r7, #32]
    5d74:	085a      	lsrs	r2, r3, #1
    5d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d78:	429a      	cmp	r2, r3
    5d7a:	d8d9      	bhi.n	5d30 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
    5d7c:	f107 030c 	add.w	r3, r7, #12
    5d80:	4618      	mov	r0, r3
    5d82:	f7ff ff77 	bl	5c74 <vPrintString>
        vPrintString("\n\r");
    5d86:	f246 202c 	movw	r0, #25132	; 0x622c
    5d8a:	f2c0 0000 	movt	r0, #0
    5d8e:	f7ff ff71 	bl	5c74 <vPrintString>
    }
}
    5d92:	3728      	adds	r7, #40	; 0x28
    5d94:	46bd      	mov	sp, r7
    5d96:	bd80      	pop	{r7, pc}

00005d98 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
    5d98:	b590      	push	{r4, r7, lr}
    5d9a:	b087      	sub	sp, #28
    5d9c:	af04      	add	r7, sp, #16
    init_led();
    5d9e:	f7ff fe5f 	bl	5a60 <init_led>
    init_rs232();
    5da2:	f7ff febf 	bl	5b24 <init_rs232>
    enable_rs232_interrupts();
    5da6:	f7ff ff03 	bl	5bb0 <enable_rs232_interrupts>
    enable_rs232();
    5daa:	f7ff ff23 	bl	5bf4 <enable_rs232>

    //vTaskCompleteInitialise();
    vAppInitialise();
    5dae:	f7fd fd9f 	bl	38f0 <vAppInitialise>
    vSemaphoreInitialise();
    5db2:	f7fd f825 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
    5db6:	f7fd f863 	bl	2e80 <vParameterInitialise>


    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
    5dba:	2301      	movs	r3, #1
    5dbc:	9300      	str	r3, [sp, #0]
    5dbe:	4b3f      	ldr	r3, [pc, #252]	; (5ebc <main+0x124>)
    5dc0:	9301      	str	r3, [sp, #4]
    5dc2:	2300      	movs	r3, #0
    5dc4:	9302      	str	r3, [sp, #8]
    5dc6:	2300      	movs	r3, #0
    5dc8:	9303      	str	r3, [sp, #12]
    5dca:	f243 60a1 	movw	r0, #13985	; 0x36a1
    5dce:	f2c0 0000 	movt	r0, #0
    5dd2:	f246 2130 	movw	r1, #25136	; 0x6230
    5dd6:	f2c0 0100 	movt	r1, #0
    5dda:	2280      	movs	r2, #128	; 0x80
    5ddc:	4b38      	ldr	r3, [pc, #224]	; (5ec0 <main+0x128>)
    5dde:	f7fe fb15 	bl	440c <xTaskGenericCreate>

    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    5de2:	2300      	movs	r3, #0
    5de4:	607b      	str	r3, [r7, #4]
    5de6:	e05f      	b.n	5ea8 <main+0x110>
    {
        xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1)],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1)]);
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	009b      	lsls	r3, r3, #2
    5dec:	226c      	movs	r2, #108	; 0x6c
    5dee:	fb02 f203 	mul.w	r2, r2, r3
    5df2:	f642 7330 	movw	r3, #12080	; 0x2f30
    5df6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dfa:	18d4      	adds	r4, r2, r3
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	f1c3 0302 	rsb	r3, r3, #2
    5e02:	461a      	mov	r2, r3
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	009b      	lsls	r3, r3, #2
    5e08:	0099      	lsls	r1, r3, #2
    5e0a:	f243 13dc 	movw	r3, #12764	; 0x31dc
    5e0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e12:	440b      	add	r3, r1
    5e14:	9200      	str	r2, [sp, #0]
    5e16:	9301      	str	r3, [sp, #4]
    5e18:	2300      	movs	r3, #0
    5e1a:	9302      	str	r3, [sp, #8]
    5e1c:	2300      	movs	r3, #0
    5e1e:	9303      	str	r3, [sp, #12]
    5e20:	f243 3005 	movw	r0, #13061	; 0x3305
    5e24:	f2c0 0000 	movt	r0, #0
    5e28:	f246 213c 	movw	r1, #25148	; 0x623c
    5e2c:	f2c0 0100 	movt	r1, #0
    5e30:	2280      	movs	r2, #128	; 0x80
    5e32:	4623      	mov	r3, r4
    5e34:	f7fe faea 	bl	440c <xTaskGenericCreate>
        for( j = 1; j <= xConcurrents; ++j )
    5e38:	2301      	movs	r3, #1
    5e3a:	603b      	str	r3, [r7, #0]
    5e3c:	e02e      	b.n	5e9c <main+0x104>
        {
            /* j is the number of concurrent servants in one task*/
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1) + j],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1) + j]);
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	009a      	lsls	r2, r3, #2
    5e42:	683b      	ldr	r3, [r7, #0]
    5e44:	4413      	add	r3, r2
    5e46:	226c      	movs	r2, #108	; 0x6c
    5e48:	fb02 f203 	mul.w	r2, r2, r3
    5e4c:	f642 7330 	movw	r3, #12080	; 0x2f30
    5e50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e54:	18d4      	adds	r4, r2, r3
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	f1c3 0302 	rsb	r3, r3, #2
    5e5c:	461a      	mov	r2, r3
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	0099      	lsls	r1, r3, #2
    5e62:	683b      	ldr	r3, [r7, #0]
    5e64:	440b      	add	r3, r1
    5e66:	0099      	lsls	r1, r3, #2
    5e68:	f243 13dc 	movw	r3, #12764	; 0x31dc
    5e6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e70:	440b      	add	r3, r1
    5e72:	9200      	str	r2, [sp, #0]
    5e74:	9301      	str	r3, [sp, #4]
    5e76:	2300      	movs	r3, #0
    5e78:	9302      	str	r3, [sp, #8]
    5e7a:	2300      	movs	r3, #0
    5e7c:	9303      	str	r3, [sp, #12]
    5e7e:	f243 40e5 	movw	r0, #13541	; 0x34e5
    5e82:	f2c0 0000 	movt	r0, #0
    5e86:	f246 2144 	movw	r1, #25156	; 0x6244
    5e8a:	f2c0 0100 	movt	r1, #0
    5e8e:	2280      	movs	r2, #128	; 0x80
    5e90:	4623      	mov	r3, r4
    5e92:	f7fe fabb 	bl	440c <xTaskGenericCreate>
    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    {
        xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i*(xConcurrents + 1)],NUMBEROFTASK - i + 1, &xTaskOfHandle[i*(xConcurrents + 1)]);
        for( j = 1; j <= xConcurrents; ++j )
    5e96:	683b      	ldr	r3, [r7, #0]
    5e98:	3301      	adds	r3, #1
    5e9a:	603b      	str	r3, [r7, #0]
    5e9c:	683b      	ldr	r3, [r7, #0]
    5e9e:	2b03      	cmp	r3, #3
    5ea0:	ddcd      	ble.n	5e3e <main+0xa6>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    portBASE_TYPE i,j;
    
    for( i = 0; i < NUMBEROFTASK; ++i )
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	3301      	adds	r3, #1
    5ea6:	607b      	str	r3, [r7, #4]
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	dd9c      	ble.n	5de8 <main+0x50>
        }
    }


    /* Start running the task. */
    vTaskStartScheduler();
    5eae:	f7fe fe2b 	bl	4b08 <vTaskStartScheduler>

    return 0;
    5eb2:	2300      	movs	r3, #0
}
    5eb4:	4618      	mov	r0, r3
    5eb6:	370c      	adds	r7, #12
    5eb8:	46bd      	mov	sp, r7
    5eba:	bd90      	pop	{r4, r7, pc}
    5ebc:	200131ec 	.word	0x200131ec
    5ec0:	200130e0 	.word	0x200130e0

00005ec4 <myTraceCreate>:

void myTraceCreate      (){
    5ec4:	b480      	push	{r7}
    5ec6:	af00      	add	r7, sp, #0
}
    5ec8:	46bd      	mov	sp, r7
    5eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ece:	4770      	bx	lr

00005ed0 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    5ed0:	b480      	push	{r7}
    5ed2:	af00      	add	r7, sp, #0
}
    5ed4:	46bd      	mov	sp, r7
    5ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eda:	4770      	bx	lr

00005edc <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    5edc:	b480      	push	{r7}
    5ede:	af00      	add	r7, sp, #0
}
    5ee0:	46bd      	mov	sp, r7
    5ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee6:	4770      	bx	lr

00005ee8 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b082      	sub	sp, #8
    5eec:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
    5eee:	f7fe fef5 	bl	4cdc <xTaskGetTickCount>
    5ef2:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i ;
    if( IS_INIT == 1 && xCurrentTime == 100 )
    5ef4:	f240 0338 	movw	r3, #56	; 0x38
    5ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	2b01      	cmp	r3, #1
    5f00:	d121      	bne.n	5f46 <vApplicationTickHook+0x5e>
    5f02:	683b      	ldr	r3, [r7, #0]
    5f04:	2b64      	cmp	r3, #100	; 0x64
    5f06:	d11e      	bne.n	5f46 <vApplicationTickHook+0x5e>
    {
        
        for( i = 0; i < NUMBEROFTASK; ++ i )
    5f08:	2300      	movs	r3, #0
    5f0a:	607b      	str	r3, [r7, #4]
    5f0c:	e012      	b.n	5f34 <vApplicationTickHook+0x4c>
            xSemaphoreGive( xBinarySemaphore[i*xConcurrents] );
    5f0e:	687a      	ldr	r2, [r7, #4]
    5f10:	4613      	mov	r3, r2
    5f12:	005b      	lsls	r3, r3, #1
    5f14:	441a      	add	r2, r3
    5f16:	f243 13b4 	movw	r3, #12724	; 0x31b4
    5f1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f22:	4618      	mov	r0, r3
    5f24:	2100      	movs	r1, #0
    5f26:	2200      	movs	r2, #0
    5f28:	2300      	movs	r3, #0
    5f2a:	f7fd ff5d 	bl	3de8 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i ;
    if( IS_INIT == 1 && xCurrentTime == 100 )
    {
        
        for( i = 0; i < NUMBEROFTASK; ++ i )
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	3301      	adds	r3, #1
    5f32:	607b      	str	r3, [r7, #4]
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	2b00      	cmp	r3, #0
    5f38:	dde9      	ble.n	5f0e <vApplicationTickHook+0x26>
            xSemaphoreGive( xBinarySemaphore[i*xConcurrents] );

        IS_INIT = 0;
    5f3a:	f240 0338 	movw	r3, #56	; 0x38
    5f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f42:	2200      	movs	r2, #0
    5f44:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    5f46:	f243 1364 	movw	r3, #12644	; 0x3164
    5f4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f4e:	681b      	ldr	r3, [r3, #0]
    5f50:	005a      	lsls	r2, r3, #1
    5f52:	683b      	ldr	r3, [r7, #0]
    5f54:	429a      	cmp	r2, r3
    5f56:	d817      	bhi.n	5f88 <vApplicationTickHook+0xa0>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 )
    5f58:	f243 1364 	movw	r3, #12644	; 0x3164
    5f5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f60:	681a      	ldr	r2, [r3, #0]
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	fbb3 f1f2 	udiv	r1, r3, r2
    5f68:	fb02 f201 	mul.w	r2, r2, r1
    5f6c:	1a9b      	subs	r3, r3, r2
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d10a      	bne.n	5f88 <vApplicationTickHook+0xa0>
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] ); 
    5f72:	f243 13b4 	movw	r3, #12724	; 0x31b4
    5f76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f7a:	691b      	ldr	r3, [r3, #16]
    5f7c:	4618      	mov	r0, r3
    5f7e:	2100      	movs	r1, #0
    5f80:	2200      	movs	r2, #0
    5f82:	2300      	movs	r3, #0
    5f84:	f7fd ff30 	bl	3de8 <xQueueGenericSend>
        }
    }
}
    5f88:	3708      	adds	r7, #8
    5f8a:	46bd      	mov	sp, r7
    5f8c:	bd80      	pop	{r7, pc}
    5f8e:	bf00      	nop

00005f90 <memcpy>:
    5f90:	2a0f      	cmp	r2, #15
    5f92:	b4f0      	push	{r4, r5, r6, r7}
    5f94:	d945      	bls.n	6022 <memcpy+0x92>
    5f96:	ea40 0301 	orr.w	r3, r0, r1
    5f9a:	079b      	lsls	r3, r3, #30
    5f9c:	d145      	bne.n	602a <memcpy+0x9a>
    5f9e:	f1a2 0710 	sub.w	r7, r2, #16
    5fa2:	460c      	mov	r4, r1
    5fa4:	4603      	mov	r3, r0
    5fa6:	093f      	lsrs	r7, r7, #4
    5fa8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    5fac:	3610      	adds	r6, #16
    5fae:	6825      	ldr	r5, [r4, #0]
    5fb0:	3310      	adds	r3, #16
    5fb2:	3410      	adds	r4, #16
    5fb4:	f843 5c10 	str.w	r5, [r3, #-16]
    5fb8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    5fbc:	f843 5c0c 	str.w	r5, [r3, #-12]
    5fc0:	f854 5c08 	ldr.w	r5, [r4, #-8]
    5fc4:	f843 5c08 	str.w	r5, [r3, #-8]
    5fc8:	f854 5c04 	ldr.w	r5, [r4, #-4]
    5fcc:	f843 5c04 	str.w	r5, [r3, #-4]
    5fd0:	42b3      	cmp	r3, r6
    5fd2:	d1ec      	bne.n	5fae <memcpy+0x1e>
    5fd4:	1c7b      	adds	r3, r7, #1
    5fd6:	f002 0c0f 	and.w	ip, r2, #15
    5fda:	f1bc 0f03 	cmp.w	ip, #3
    5fde:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5fe2:	4419      	add	r1, r3
    5fe4:	4403      	add	r3, r0
    5fe6:	d922      	bls.n	602e <memcpy+0x9e>
    5fe8:	460e      	mov	r6, r1
    5fea:	461d      	mov	r5, r3
    5fec:	4664      	mov	r4, ip
    5fee:	f856 7b04 	ldr.w	r7, [r6], #4
    5ff2:	3c04      	subs	r4, #4
    5ff4:	2c03      	cmp	r4, #3
    5ff6:	f845 7b04 	str.w	r7, [r5], #4
    5ffa:	d8f8      	bhi.n	5fee <memcpy+0x5e>
    5ffc:	f1ac 0404 	sub.w	r4, ip, #4
    6000:	f002 0203 	and.w	r2, r2, #3
    6004:	f024 0403 	bic.w	r4, r4, #3
    6008:	3404      	adds	r4, #4
    600a:	4423      	add	r3, r4
    600c:	4421      	add	r1, r4
    600e:	b132      	cbz	r2, 601e <memcpy+0x8e>
    6010:	440a      	add	r2, r1
    6012:	f811 4b01 	ldrb.w	r4, [r1], #1
    6016:	4291      	cmp	r1, r2
    6018:	f803 4b01 	strb.w	r4, [r3], #1
    601c:	d1f9      	bne.n	6012 <memcpy+0x82>
    601e:	bcf0      	pop	{r4, r5, r6, r7}
    6020:	4770      	bx	lr
    6022:	4603      	mov	r3, r0
    6024:	2a00      	cmp	r2, #0
    6026:	d1f3      	bne.n	6010 <memcpy+0x80>
    6028:	e7f9      	b.n	601e <memcpy+0x8e>
    602a:	4603      	mov	r3, r0
    602c:	e7f0      	b.n	6010 <memcpy+0x80>
    602e:	4662      	mov	r2, ip
    6030:	2a00      	cmp	r2, #0
    6032:	d1ed      	bne.n	6010 <memcpy+0x80>
    6034:	e7f3      	b.n	601e <memcpy+0x8e>
    6036:	bf00      	nop

00006038 <memset>:
    6038:	0783      	lsls	r3, r0, #30
    603a:	b4f0      	push	{r4, r5, r6, r7}
    603c:	d048      	beq.n	60d0 <memset+0x98>
    603e:	1e54      	subs	r4, r2, #1
    6040:	2a00      	cmp	r2, #0
    6042:	d043      	beq.n	60cc <memset+0x94>
    6044:	b2cd      	uxtb	r5, r1
    6046:	4603      	mov	r3, r0
    6048:	e002      	b.n	6050 <memset+0x18>
    604a:	2c00      	cmp	r4, #0
    604c:	d03e      	beq.n	60cc <memset+0x94>
    604e:	4614      	mov	r4, r2
    6050:	f803 5b01 	strb.w	r5, [r3], #1
    6054:	f013 0f03 	tst.w	r3, #3
    6058:	f104 32ff 	add.w	r2, r4, #4294967295
    605c:	d1f5      	bne.n	604a <memset+0x12>
    605e:	2c03      	cmp	r4, #3
    6060:	d92d      	bls.n	60be <memset+0x86>
    6062:	b2cd      	uxtb	r5, r1
    6064:	2c0f      	cmp	r4, #15
    6066:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    606a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    606e:	d918      	bls.n	60a2 <memset+0x6a>
    6070:	f1a4 0710 	sub.w	r7, r4, #16
    6074:	f103 0610 	add.w	r6, r3, #16
    6078:	461a      	mov	r2, r3
    607a:	093f      	lsrs	r7, r7, #4
    607c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    6080:	6015      	str	r5, [r2, #0]
    6082:	3210      	adds	r2, #16
    6084:	f842 5c0c 	str.w	r5, [r2, #-12]
    6088:	f842 5c08 	str.w	r5, [r2, #-8]
    608c:	f842 5c04 	str.w	r5, [r2, #-4]
    6090:	42b2      	cmp	r2, r6
    6092:	d1f5      	bne.n	6080 <memset+0x48>
    6094:	f004 040f 	and.w	r4, r4, #15
    6098:	3701      	adds	r7, #1
    609a:	2c03      	cmp	r4, #3
    609c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    60a0:	d90d      	bls.n	60be <memset+0x86>
    60a2:	461e      	mov	r6, r3
    60a4:	4622      	mov	r2, r4
    60a6:	3a04      	subs	r2, #4
    60a8:	f846 5b04 	str.w	r5, [r6], #4
    60ac:	2a03      	cmp	r2, #3
    60ae:	d8fa      	bhi.n	60a6 <memset+0x6e>
    60b0:	1f22      	subs	r2, r4, #4
    60b2:	f004 0403 	and.w	r4, r4, #3
    60b6:	f022 0203 	bic.w	r2, r2, #3
    60ba:	3204      	adds	r2, #4
    60bc:	4413      	add	r3, r2
    60be:	b12c      	cbz	r4, 60cc <memset+0x94>
    60c0:	b2c9      	uxtb	r1, r1
    60c2:	441c      	add	r4, r3
    60c4:	f803 1b01 	strb.w	r1, [r3], #1
    60c8:	42a3      	cmp	r3, r4
    60ca:	d1fb      	bne.n	60c4 <memset+0x8c>
    60cc:	bcf0      	pop	{r4, r5, r6, r7}
    60ce:	4770      	bx	lr
    60d0:	4614      	mov	r4, r2
    60d2:	4603      	mov	r3, r0
    60d4:	e7c3      	b.n	605e <memset+0x26>
    60d6:	bf00      	nop

000060d8 <strncpy>:
    60d8:	ea40 0301 	orr.w	r3, r0, r1
    60dc:	079b      	lsls	r3, r3, #30
    60de:	b470      	push	{r4, r5, r6}
    60e0:	d12b      	bne.n	613a <strncpy+0x62>
    60e2:	2a03      	cmp	r2, #3
    60e4:	bf84      	itt	hi
    60e6:	460b      	movhi	r3, r1
    60e8:	4605      	movhi	r5, r0
    60ea:	d926      	bls.n	613a <strncpy+0x62>
    60ec:	4619      	mov	r1, r3
    60ee:	f853 4b04 	ldr.w	r4, [r3], #4
    60f2:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    60f6:	ea26 0604 	bic.w	r6, r6, r4
    60fa:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    60fe:	d105      	bne.n	610c <strncpy+0x34>
    6100:	3a04      	subs	r2, #4
    6102:	f845 4b04 	str.w	r4, [r5], #4
    6106:	2a03      	cmp	r2, #3
    6108:	4619      	mov	r1, r3
    610a:	d8ef      	bhi.n	60ec <strncpy+0x14>
    610c:	b19a      	cbz	r2, 6136 <strncpy+0x5e>
    610e:	780c      	ldrb	r4, [r1, #0]
    6110:	3a01      	subs	r2, #1
    6112:	1c6b      	adds	r3, r5, #1
    6114:	702c      	strb	r4, [r5, #0]
    6116:	b13c      	cbz	r4, 6128 <strncpy+0x50>
    6118:	b16a      	cbz	r2, 6136 <strncpy+0x5e>
    611a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    611e:	3a01      	subs	r2, #1
    6120:	f803 4b01 	strb.w	r4, [r3], #1
    6124:	2c00      	cmp	r4, #0
    6126:	d1f7      	bne.n	6118 <strncpy+0x40>
    6128:	b12a      	cbz	r2, 6136 <strncpy+0x5e>
    612a:	441a      	add	r2, r3
    612c:	2100      	movs	r1, #0
    612e:	f803 1b01 	strb.w	r1, [r3], #1
    6132:	4293      	cmp	r3, r2
    6134:	d1fb      	bne.n	612e <strncpy+0x56>
    6136:	bc70      	pop	{r4, r5, r6}
    6138:	4770      	bx	lr
    613a:	4605      	mov	r5, r0
    613c:	e7e6      	b.n	610c <strncpy+0x34>
    613e:	bf00      	nop

00006140 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6140:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    6142:	e003      	b.n	614c <LoopCopyDataInit>

00006144 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    6144:	4b0a      	ldr	r3, [pc, #40]	; (6170 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    6146:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6148:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    614a:	3104      	adds	r1, #4

0000614c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    614c:	4809      	ldr	r0, [pc, #36]	; (6174 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    614e:	4b0a      	ldr	r3, [pc, #40]	; (6178 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    6150:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    6152:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    6154:	d3f6      	bcc.n	6144 <CopyDataInit>
	ldr	r2, =_sbss
    6156:	4a09      	ldr	r2, [pc, #36]	; (617c <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    6158:	e002      	b.n	6160 <LoopFillZerobss>

0000615a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    615a:	2300      	movs	r3, #0
	str	r3, [r2], #4
    615c:	f842 3b04 	str.w	r3, [r2], #4

00006160 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6160:	4b07      	ldr	r3, [pc, #28]	; (6180 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    6162:	429a      	cmp	r2, r3
	bcc	FillZerobss
    6164:	d3f9      	bcc.n	615a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    6166:	f7fa f8e9 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    616a:	f7ff fe15 	bl	5d98 <main>
	bx	lr    
    616e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    6170:	0000624c 	.word	0x0000624c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    6178:	2000003c 	.word	0x2000003c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    617c:	20000040 	.word	0x20000040
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6180:	20012f30 	.word	0x20012f30

00006184 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6184:	e7fe      	b.n	6184 <ADC1_2_IRQHandler>
    6186:	0000      	movs	r0, r0
    6188:	6c6c616d 	.word	0x6c6c616d
    618c:	6620636f 	.word	0x6620636f
    6190:	6520726f 	.word	0x6520726f
    6194:	746e6576 	.word	0x746e6576
    6198:	61747320 	.word	0x61747320
    619c:	66206b63 	.word	0x66206b63
    61a0:	656c6961 	.word	0x656c6961
    61a4:	000d0a64 	.word	0x000d0a64
    61a8:	72656874 	.word	0x72656874
    61ac:	72612065 	.word	0x72612065
    61b0:	65732065 	.word	0x65732065
    61b4:	726f736e 	.word	0x726f736e
    61b8:	73696d20 	.word	0x73696d20
    61bc:	676e6973 	.word	0x676e6973
    61c0:	61656420 	.word	0x61656420
    61c4:	6e696c64 	.word	0x6e696c64
    61c8:	000d0a65 	.word	0x000d0a65
    61cc:	72656874 	.word	0x72656874
    61d0:	72612065 	.word	0x72612065
    61d4:	65732065 	.word	0x65732065
    61d8:	6e617672 	.word	0x6e617672
    61dc:	6d207374 	.word	0x6d207374
    61e0:	69737369 	.word	0x69737369
    61e4:	6420676e 	.word	0x6420676e
    61e8:	6c646165 	.word	0x6c646165
    61ec:	0a656e69 	.word	0x0a656e69
    61f0:	0000000d 	.word	0x0000000d
    61f4:	6f727245 	.word	0x6f727245
    61f8:	54203a72 	.word	0x54203a72
    61fc:	20736968 	.word	0x20736968
    6200:	6e657665 	.word	0x6e657665
    6204:	61682074 	.word	0x61682074
    6208:	72612073 	.word	0x72612073
    620c:	65766972 	.word	0x65766972
    6210:	0a212164 	.word	0x0a212164
    6214:	0000000d 	.word	0x0000000d
    6218:	454c4449 	.word	0x454c4449
    621c:	00000000 	.word	0x00000000

00006220 <ulKernelPriority>:
    6220:	0000007f                                ....

00006224 <heapSTRUCT_SIZE>:
    6224:	00000010 000d0a30 00000d0a 65532d52     ....0.......R-Se
    6234:	6e617672 00000074 736e6553 0000726f     rvant...Sensor..
    6244:	76726573 00746e61                       servant.
