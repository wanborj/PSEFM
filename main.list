
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 40 01 20 e5 82 01 00 29 83 01 00 29 83 01 00     .@. ....)...)...
      10:	29 83 01 00 29 83 01 00 29 83 01 00 00 00 00 00     )...)...).......
	...
      2c:	c5 54 00 00 29 83 01 00 00 00 00 00 d1 55 00 00     .T..)........U..
      3c:	0d 56 00 00 29 83 01 00 29 83 01 00 29 83 01 00     .V..)...)...)...
      4c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      5c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      6c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      7c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      8c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      9c:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      ac:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      bc:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      cc:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
      dc:	29 83 01 00 29 83 01 00 29 83 01 00 29 83 01 00     )...)...)...)...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018484 	.word	0x00018484
     6d0:	20000000 	.word	0x20000000
     6d4:	20000abc 	.word	0x20000abc
     6d8:	20000ac0 	.word	0x20000ac0
     6dc:	2001351c 	.word	0x2001351c

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 f931 	bl	5660 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f640 332c 	movw	r3, #2860	; 0xb2c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f640 332c 	movw	r3, #2860	; 0xb2c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fa70 	bl	3930 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fa6b 	bl	3930 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f640 3330 	movw	r3, #2864	; 0xb30
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f640 3330 	movw	r3, #2864	; 0xb30
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f640 22c0 	movw	r2, #2752	; 0xac0
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fa4b 	bl	3948 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f640 3334 	movw	r3, #2868	; 0xb34
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f640 332c 	movw	r3, #2860	; 0xb2c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fa8a 	bl	3a08 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f640 332c 	movw	r3, #2860	; 0xb2c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f640 3334 	movw	r3, #2868	; 0xb34
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f640 3314 	movw	r3, #2836	; 0xb14
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f640 332c 	movw	r3, #2860	; 0xb2c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fa34 	bl	3998 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f640 3310 	movw	r3, #2832	; 0xb10
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f640 332c 	movw	r3, #2860	; 0xb2c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fa24 	bl	3998 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f640 332c 	movw	r3, #2860	; 0xb2c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fa17 	bl	3998 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f640 3318 	movw	r3, #2840	; 0xb18
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fa38 	bl	3a08 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fa2f 	bl	3a08 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f640 3330 	movw	r3, #2864	; 0xb30
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f640 3330 	movw	r3, #2864	; 0xb30
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f640 22c0 	movw	r2, #2752	; 0xac0
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 f9ae 	bl	3948 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f640 3318 	movw	r3, #2840	; 0xb18
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fa7d 	bl	4b04 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f640 3338 	movw	r3, #2872	; 0xb38
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f640 333c 	movw	r3, #2876	; 0xb3c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f640 3334 	movw	r3, #2868	; 0xb34
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f640 3334 	movw	r3, #2868	; 0xb34
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f640 333c 	movw	r3, #2876	; 0xb3c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f640 333c 	movw	r3, #2876	; 0xb3c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f640 3334 	movw	r3, #2868	; 0xb34
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f640 3310 	movw	r3, #2832	; 0xb10
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f640 3314 	movw	r3, #2836	; 0xb14
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f640 3310 	movw	r3, #2832	; 0xb10
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f640 3314 	movw	r3, #2836	; 0xb14
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f640 3310 	movw	r3, #2832	; 0xb10
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f640 3334 	movw	r3, #2868	; 0xb34
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 f9a2 	bl	3a08 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 f999 	bl	3a08 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f640 3330 	movw	r3, #2864	; 0xb30
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f640 3330 	movw	r3, #2864	; 0xb30
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f640 22c0 	movw	r2, #2752	; 0xac0
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 f914 	bl	3948 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f640 3310 	movw	r3, #2832	; 0xb10
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f640 333c 	movw	r3, #2876	; 0xb3c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f640 3334 	movw	r3, #2868	; 0xb34
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f640 3338 	movw	r3, #2872	; 0xb38
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f640 3330 	movw	r3, #2864	; 0xb30
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f640 3330 	movw	r3, #2864	; 0xb30
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f640 3330 	movw	r3, #2864	; 0xb30
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f640 3330 	movw	r3, #2864	; 0xb30
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f640 22c0 	movw	r2, #2752	; 0xac0
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f640 3330 	movw	r3, #2864	; 0xb30
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f640 22c0 	movw	r2, #2752	; 0xac0
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f640 332c 	movw	r3, #2860	; 0xb2c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f640 332c 	movw	r3, #2860	; 0xb2c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f640 332c 	movw	r3, #2860	; 0xb2c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f640 332c 	movw	r3, #2860	; 0xb2c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f640 22c0 	movw	r2, #2752	; 0xac0
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f84b 	bl	38f0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f640 20e8 	movw	r0, #2792	; 0xae8
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f83f 	bl	38f0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f640 20fc 	movw	r0, #2812	; 0xafc
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f839 	bl	38f0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f640 3018 	movw	r0, #2840	; 0xb18
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f833 	bl	38f0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f640 3310 	movw	r3, #2832	; 0xb10
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f640 22e8 	movw	r2, #2792	; 0xae8
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f640 3314 	movw	r3, #2836	; 0xb14
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f640 22fc 	movw	r2, #2812	; 0xafc
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 f89d 	bl	3a08 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f640 3018 	movw	r0, #2840	; 0xb18
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f834 	bl	3948 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f640 332c 	movw	r3, #2860	; 0xb2c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f640 3040 	movw	r0, #2880	; 0xb40
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f000 ffeb 	bl	38f0 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f640 3254 	movw	r2, #2900	; 0xb54
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f000 ffdb 	bl	38f0 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fcfd 	bl	5420 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 f869 	bl	4b04 <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f640 3368 	movw	r3, #2920	; 0xb68
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f640 3368 	movw	r3, #2920	; 0xb68
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f640 3368 	movw	r3, #2920	; 0xb68
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f640 3354 	movw	r3, #2900	; 0xb54
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f640 3340 	movw	r3, #2880	; 0xb40
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 fd37 	bl	556c <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 fd2d 	bl	5598 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 fce3 	bl	556c <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 fd4b 	bl	5660 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f640 3040 	movw	r0, #2880	; 0xb40
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f000 fe9c 	bl	3948 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fb44 	bl	529c <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fd22 	bl	5660 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f248 302c 	movw	r0, #33580	; 0x832c
    2c28:	f2c0 0001 	movt	r0, #1
    2c2c:	f014 f82a 	bl	16c84 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>
        //vPrintString("event creating\n\r");

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fc93 	bl	5598 <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f640 3340 	movw	r3, #2880	; 0xb40
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f640 3340 	movw	r3, #2880	; 0xb40
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f001 ff16 	bl	4b04 <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fc3b 	bl	556c <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f000 fe84 	bl	3a08 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 fe1c 	bl	3948 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fc42 	bl	5598 <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fc11 	bl	556c <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 faa7 	bl	529c <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f000 fe42 	bl	3a08 <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fc08 	bl	5598 <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 fe1e 	bl	3a08 <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fbe4 	bl	5598 <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fbde 	bl	5598 <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fbbe 	bl	556c <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fcf9 	bl	57e8 <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fbcf 	bl	5598 <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f000 fe6f 	bl	3af4 <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f241 13c4 	movw	r3, #4548	; 0x11c4
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f241 13c4 	movw	r3, #4548	; 0x11c4
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f241 13c4 	movw	r3, #4548	; 0x11c4
    2e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f000 fedf 	bl	3c10 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f241 13c4 	movw	r3, #4548	; 0x11c4
    2e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f000 ff97 	bl	3d9c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b0e      	cmp	r3, #14
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e061      	b.n	2f50 <vParameterInitialise+0xd0>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f640 3370 	movw	r3, #2928	; 0xb70
    2e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	216c      	movs	r1, #108	; 0x6c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f640 3370 	movw	r3, #2928	; 0xb70
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	216c      	movs	r1, #108	; 0x6c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f640 3370 	movw	r3, #2928	; 0xb70
    2ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	216c      	movs	r1, #108	; 0x6c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f240 0334 	movw	r3, #52	; 0x34
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f640 3370 	movw	r3, #2928	; 0xb70
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	206c      	movs	r0, #108	; 0x6c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	335c      	adds	r3, #92	; 0x5c
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2ef6:	f240 0370 	movw	r3, #112	; 0x70
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f640 3370 	movw	r3, #2928	; 0xb70
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	206c      	movs	r0, #108	; 0x6c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3368      	adds	r3, #104	; 0x68
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f1a:	f240 0370 	movw	r3, #112	; 0x70
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 032c 	movw	r3, #44	; 0x2c
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f34:	f640 3370 	movw	r3, #2928	; 0xb70
    2f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f3c:	68f9      	ldr	r1, [r7, #12]
    2f3e:	206c      	movs	r0, #108	; 0x6c
    2f40:	fb00 f101 	mul.w	r1, r0, r1
    2f44:	440b      	add	r3, r1
    2f46:	3364      	adds	r3, #100	; 0x64
    2f48:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	3301      	adds	r3, #1
    2f4e:	60fb      	str	r3, [r7, #12]
    2f50:	68fb      	ldr	r3, [r7, #12]
    2f52:	2b0e      	cmp	r3, #14
    2f54:	dd9a      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f56:	2300      	movs	r3, #0
    2f58:	60fb      	str	r3, [r7, #12]
    2f5a:	e080      	b.n	305e <vParameterInitialise+0x1de>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f5c:	f240 02ac 	movw	r2, #172	; 0xac
    2f60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f64:	68f9      	ldr	r1, [r7, #12]
    2f66:	460b      	mov	r3, r1
    2f68:	005b      	lsls	r3, r3, #1
    2f6a:	440b      	add	r3, r1
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4413      	add	r3, r2
    2f70:	3304      	adds	r3, #4
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f76:	f240 02ac 	movw	r2, #172	; 0xac
    2f7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f7e:	68f9      	ldr	r1, [r7, #12]
    2f80:	460b      	mov	r3, r1
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	440b      	add	r3, r1
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4413      	add	r3, r2
    2f8a:	3308      	adds	r3, #8
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2f90:	f640 3370 	movw	r3, #2928	; 0xb70
    2f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f98:	68ba      	ldr	r2, [r7, #8]
    2f9a:	216c      	movs	r1, #108	; 0x6c
    2f9c:	fb01 f202 	mul.w	r2, r1, r2
    2fa0:	4413      	add	r3, r2
    2fa2:	3308      	adds	r3, #8
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	f640 3270 	movw	r2, #2928	; 0xb70
    2faa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fae:	68b9      	ldr	r1, [r7, #8]
    2fb0:	460b      	mov	r3, r1
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	440b      	add	r3, r1
    2fb6:	00d9      	lsls	r1, r3, #3
    2fb8:	440b      	add	r3, r1
    2fba:	4403      	add	r3, r0
    2fbc:	330c      	adds	r3, #12
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4413      	add	r3, r2
    2fc2:	687a      	ldr	r2, [r7, #4]
    2fc4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fc6:	f640 3370 	movw	r3, #2928	; 0xb70
    2fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fce:	68ba      	ldr	r2, [r7, #8]
    2fd0:	216c      	movs	r1, #108	; 0x6c
    2fd2:	fb01 f202 	mul.w	r2, r1, r2
    2fd6:	4413      	add	r3, r2
    2fd8:	3308      	adds	r3, #8
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	1c5a      	adds	r2, r3, #1
    2fde:	f640 3370 	movw	r3, #2928	; 0xb70
    2fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fe6:	68b9      	ldr	r1, [r7, #8]
    2fe8:	206c      	movs	r0, #108	; 0x6c
    2fea:	fb00 f101 	mul.w	r1, r0, r1
    2fee:	440b      	add	r3, r1
    2ff0:	3308      	adds	r3, #8
    2ff2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    2ff4:	f640 3370 	movw	r3, #2928	; 0xb70
    2ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	216c      	movs	r1, #108	; 0x6c
    3000:	fb01 f202 	mul.w	r2, r1, r2
    3004:	4413      	add	r3, r2
    3006:	3304      	adds	r3, #4
    3008:	6818      	ldr	r0, [r3, #0]
    300a:	f640 3270 	movw	r2, #2928	; 0xb70
    300e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3012:	6879      	ldr	r1, [r7, #4]
    3014:	460b      	mov	r3, r1
    3016:	005b      	lsls	r3, r3, #1
    3018:	440b      	add	r3, r1
    301a:	00d9      	lsls	r1, r3, #3
    301c:	440b      	add	r3, r1
    301e:	4403      	add	r3, r0
    3020:	3302      	adds	r3, #2
    3022:	009b      	lsls	r3, r3, #2
    3024:	4413      	add	r3, r2
    3026:	68ba      	ldr	r2, [r7, #8]
    3028:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    302a:	f640 3370 	movw	r3, #2928	; 0xb70
    302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	216c      	movs	r1, #108	; 0x6c
    3036:	fb01 f202 	mul.w	r2, r1, r2
    303a:	4413      	add	r3, r2
    303c:	3304      	adds	r3, #4
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	1c5a      	adds	r2, r3, #1
    3042:	f640 3370 	movw	r3, #2928	; 0xb70
    3046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304a:	6879      	ldr	r1, [r7, #4]
    304c:	206c      	movs	r0, #108	; 0x6c
    304e:	fb00 f101 	mul.w	r1, r0, r1
    3052:	440b      	add	r3, r1
    3054:	3304      	adds	r3, #4
    3056:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	3301      	adds	r3, #1
    305c:	60fb      	str	r3, [r7, #12]
    305e:	f240 03ac 	movw	r3, #172	; 0xac
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	429a      	cmp	r2, r3
    306c:	f73f af76 	bgt.w	2f5c <vParameterInitialise+0xdc>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr
    307a:	bf00      	nop

0000307c <vTaskDelayLET>:

void vTaskDelayLET()
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3082:	f002 f90b 	bl	529c <xTaskGetCurrentTaskHandle>
    3086:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3088:	68b8      	ldr	r0, [r7, #8]
    308a:	f002 f9bd 	bl	5408 <xTaskGetxStartTime>
    308e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3090:	68b8      	ldr	r0, [r7, #8]
    3092:	f002 f9c5 	bl	5420 <xTaskGetxLet>
    3096:	4602      	mov	r2, r0
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	4413      	add	r3, r2
    309c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    309e:	f001 fd31 	bl	4b04 <xTaskGetTickCount>
    30a2:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30a4:	e002      	b.n	30ac <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30a6:	f001 fd2d 	bl	4b04 <xTaskGetTickCount>
    30aa:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30ac:	68fa      	ldr	r2, [r7, #12]
    30ae:	683b      	ldr	r3, [r7, #0]
    30b0:	429a      	cmp	r2, r3
    30b2:	d3f8      	bcc.n	30a6 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30b4:	3710      	adds	r7, #16
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop

000030bc <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c0:	b088      	sub	sp, #32
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
    30c6:	6039      	str	r1, [r7, #0]
    30c8:	4669      	mov	r1, sp
    30ca:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30cc:	6879      	ldr	r1, [r7, #4]
    30ce:	6849      	ldr	r1, [r1, #4]
    30d0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30d2:	69be      	ldr	r6, [r7, #24]
    30d4:	1e71      	subs	r1, r6, #1
    30d6:	6179      	str	r1, [r7, #20]
    30d8:	4631      	mov	r1, r6
    30da:	4608      	mov	r0, r1
    30dc:	f04f 0100 	mov.w	r1, #0
    30e0:	014d      	lsls	r5, r1, #5
    30e2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    30e6:	0144      	lsls	r4, r0, #5
    30e8:	4631      	mov	r1, r6
    30ea:	4608      	mov	r0, r1
    30ec:	f04f 0100 	mov.w	r1, #0
    30f0:	014b      	lsls	r3, r1, #5
    30f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    30f6:	0142      	lsls	r2, r0, #5
    30f8:	4633      	mov	r3, r6
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	3303      	adds	r3, #3
    30fe:	3307      	adds	r3, #7
    3100:	08db      	lsrs	r3, r3, #3
    3102:	00db      	lsls	r3, r3, #3
    3104:	ebad 0d03 	sub.w	sp, sp, r3
    3108:	466b      	mov	r3, sp
    310a:	3303      	adds	r3, #3
    310c:	089b      	lsrs	r3, r3, #2
    310e:	009b      	lsls	r3, r3, #2
    3110:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    3118:	f241 13c4 	movw	r3, #4548	; 0x11c4
    311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3120:	68fa      	ldr	r2, [r7, #12]
    3122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3126:	4618      	mov	r0, r3
    3128:	2100      	movs	r1, #0
    312a:	f04f 32ff 	mov.w	r2, #4294967295
    312e:	2300      	movs	r3, #0
    3130:	f000 fe34 	bl	3d9c <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3134:	f001 fce6 	bl	4b04 <xTaskGetTickCount>
    3138:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    313a:	f241 2300 	movw	r3, #4608	; 0x1200
    313e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3142:	68fa      	ldr	r2, [r7, #12]
    3144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3148:	4618      	mov	r0, r3
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	f002 f974 	bl	5438 <vTaskSetxStartTime>

    vPrintNumber(300);
    3150:	f44f 7096 	mov.w	r0, #300	; 0x12c
    3154:	f013 fdb0 	bl	16cb8 <vPrintNumber>
    for( i = 0; i < NUM; i ++ )
    3158:	2300      	movs	r3, #0
    315a:	61fb      	str	r3, [r7, #28]
    315c:	e024      	b.n	31a8 <vEventReceiveAll+0xec>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    315e:	687a      	ldr	r2, [r7, #4]
    3160:	69fb      	ldr	r3, [r7, #28]
    3162:	3302      	adds	r3, #2
    3164:	009b      	lsls	r3, r3, #2
    3166:	4413      	add	r3, r2
    3168:	6859      	ldr	r1, [r3, #4]
    316a:	693b      	ldr	r3, [r7, #16]
    316c:	69fa      	ldr	r2, [r7, #28]
    316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    3172:	69fb      	ldr	r3, [r7, #28]
    3174:	009b      	lsls	r3, r3, #2
    3176:	683a      	ldr	r2, [r7, #0]
    3178:	18d1      	adds	r1, r2, r3
    317a:	693b      	ldr	r3, [r7, #16]
    317c:	69fa      	ldr	r2, [r7, #28]
    317e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3182:	f241 2300 	movw	r3, #4608	; 0x1200
    3186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    318e:	f640 336c 	movw	r3, #2924	; 0xb6c
    3192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	4608      	mov	r0, r1
    319a:	4611      	mov	r1, r2
    319c:	461a      	mov	r2, r3
    319e:	f7ff fdbf 	bl	2d20 <vEventGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    vPrintNumber(300);
    for( i = 0; i < NUM; i ++ )
    31a2:	69fb      	ldr	r3, [r7, #28]
    31a4:	3301      	adds	r3, #1
    31a6:	61fb      	str	r3, [r7, #28]
    31a8:	69fa      	ldr	r2, [r7, #28]
    31aa:	69bb      	ldr	r3, [r7, #24]
    31ac:	429a      	cmp	r2, r3
    31ae:	dbd6      	blt.n	315e <vEventReceiveAll+0xa2>
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
    vPrintNumber(300);
    31b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
    31b4:	f013 fd80 	bl	16cb8 <vPrintNumber>
    31b8:	46c5      	mov	sp, r8
}
    31ba:	3720      	adds	r7, #32
    31bc:	46bd      	mov	sp, r7
    31be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31c2:	bf00      	nop

000031c4 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	6078      	str	r0, [r7, #4]
    31cc:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31d4:	2300      	movs	r3, #0
    31d6:	60fb      	str	r3, [r7, #12]
    31d8:	e00a      	b.n	31f0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	009b      	lsls	r3, r3, #2
    31de:	683a      	ldr	r2, [r7, #0]
    31e0:	4413      	add	r3, r2
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	4618      	mov	r0, r3
    31e6:	f7ff fdfd 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	3301      	adds	r3, #1
    31ee:	60fb      	str	r3, [r7, #12]
    31f0:	68fa      	ldr	r2, [r7, #12]
    31f2:	68bb      	ldr	r3, [r7, #8]
    31f4:	429a      	cmp	r2, r3
    31f6:	dbf0      	blt.n	31da <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    31f8:	3710      	adds	r7, #16
    31fa:	46bd      	mov	sp, r7
    31fc:	bd80      	pop	{r7, pc}
    31fe:	bf00      	nop

00003200 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3204:	b08a      	sub	sp, #40	; 0x28
    3206:	af02      	add	r7, sp, #8
    3208:	6078      	str	r0, [r7, #4]
    320a:	6039      	str	r1, [r7, #0]
    320c:	4669      	mov	r1, sp
    320e:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3210:	6879      	ldr	r1, [r7, #4]
    3212:	6889      	ldr	r1, [r1, #8]
    3214:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    3216:	6879      	ldr	r1, [r7, #4]
    3218:	6809      	ldr	r1, [r1, #0]
    321a:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    321c:	6879      	ldr	r1, [r7, #4]
    321e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3220:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3222:	69be      	ldr	r6, [r7, #24]
    3224:	1e71      	subs	r1, r6, #1
    3226:	60f9      	str	r1, [r7, #12]
    3228:	4631      	mov	r1, r6
    322a:	4608      	mov	r0, r1
    322c:	f04f 0100 	mov.w	r1, #0
    3230:	014d      	lsls	r5, r1, #5
    3232:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3236:	0144      	lsls	r4, r0, #5
    3238:	4631      	mov	r1, r6
    323a:	4608      	mov	r0, r1
    323c:	f04f 0100 	mov.w	r1, #0
    3240:	014b      	lsls	r3, r1, #5
    3242:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3246:	0142      	lsls	r2, r0, #5
    3248:	4633      	mov	r3, r6
    324a:	009b      	lsls	r3, r3, #2
    324c:	3303      	adds	r3, #3
    324e:	3307      	adds	r3, #7
    3250:	08db      	lsrs	r3, r3, #3
    3252:	00db      	lsls	r3, r3, #3
    3254:	ebad 0d03 	sub.w	sp, sp, r3
    3258:	ab02      	add	r3, sp, #8
    325a:	3303      	adds	r3, #3
    325c:	089b      	lsrs	r3, r3, #2
    325e:	009b      	lsls	r3, r3, #2
    3260:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3262:	2300      	movs	r3, #0
    3264:	61fb      	str	r3, [r7, #28]
    3266:	e033      	b.n	32d0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3268:	687a      	ldr	r2, [r7, #4]
    326a:	69fb      	ldr	r3, [r7, #28]
    326c:	330c      	adds	r3, #12
    326e:	009b      	lsls	r3, r3, #2
    3270:	4413      	add	r3, r2
    3272:	6859      	ldr	r1, [r3, #4]
    3274:	68bb      	ldr	r3, [r7, #8]
    3276:	69fa      	ldr	r2, [r7, #28]
    3278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    327c:	68bb      	ldr	r3, [r7, #8]
    327e:	69fa      	ldr	r2, [r7, #28]
    3280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3284:	697b      	ldr	r3, [r7, #20]
    3286:	429a      	cmp	r2, r3
    3288:	dc06      	bgt.n	3298 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    328a:	69fb      	ldr	r3, [r7, #28]
    328c:	011b      	lsls	r3, r3, #4
    328e:	683a      	ldr	r2, [r7, #0]
    3290:	4413      	add	r3, r2
    3292:	2201      	movs	r2, #1
    3294:	609a      	str	r2, [r3, #8]
    3296:	e005      	b.n	32a4 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3298:	69fb      	ldr	r3, [r7, #28]
    329a:	011b      	lsls	r3, r3, #4
    329c:	683a      	ldr	r2, [r7, #0]
    329e:	4413      	add	r3, r2
    32a0:	2200      	movs	r2, #0
    32a2:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    32a4:	68bb      	ldr	r3, [r7, #8]
    32a6:	69fa      	ldr	r2, [r7, #28]
    32a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32ac:	f241 2300 	movw	r3, #4608	; 0x1200
    32b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32b8:	69fb      	ldr	r3, [r7, #28]
    32ba:	011b      	lsls	r3, r3, #4
    32bc:	683a      	ldr	r2, [r7, #0]
    32be:	4413      	add	r3, r2
    32c0:	68da      	ldr	r2, [r3, #12]
    32c2:	9200      	str	r2, [sp, #0]
    32c4:	cb0e      	ldmia	r3, {r1, r2, r3}
    32c6:	f7ff fc61 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32ca:	69fb      	ldr	r3, [r7, #28]
    32cc:	3301      	adds	r3, #1
    32ce:	61fb      	str	r3, [r7, #28]
    32d0:	69fa      	ldr	r2, [r7, #28]
    32d2:	69bb      	ldr	r3, [r7, #24]
    32d4:	429a      	cmp	r2, r3
    32d6:	dbc7      	blt.n	3268 <vEventCreateAll+0x68>
    32d8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32da:	3720      	adds	r7, #32
    32dc:	46bd      	mov	sp, r7
    32de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32e2:	bf00      	nop

000032e4 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32e4:	b480      	push	{r7}
    32e6:	b083      	sub	sp, #12
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    32ec:	370c      	adds	r7, #12
    32ee:	46bd      	mov	sp, r7
    32f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f4:	4770      	bx	lr
    32f6:	bf00      	nop

000032f8 <vDoSensor>:

static void vDoSensor()
{
    32f8:	b480      	push	{r7}
    32fa:	af00      	add	r7, sp, #0

}
    32fc:	46bd      	mov	sp, r7
    32fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3302:	4770      	bx	lr

00003304 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    3308:	b092      	sub	sp, #72	; 0x48
    330a:	af00      	add	r7, sp, #0
    330c:	60f8      	str	r0, [r7, #12]
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    330e:	2301      	movs	r3, #1
    3310:	643b      	str	r3, [r7, #64]	; 0x40
    portBASE_TYPE xCount = 1;
    3312:	2301      	movs	r3, #1
    3314:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    331c:	689b      	ldr	r3, [r3, #8]
    331e:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    332a:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    332e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3330:	62bb      	str	r3, [r7, #40]	; 0x28

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3332:	f241 2300 	movw	r3, #4608	; 0x1200
    3336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3340:	4618      	mov	r0, r3
    3342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3344:	f002 f886 	bl	5454 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3348:	6b79      	ldr	r1, [r7, #52]	; 0x34
    334a:	1e4b      	subs	r3, r1, #1
    334c:	627b      	str	r3, [r7, #36]	; 0x24
    334e:	460b      	mov	r3, r1
    3350:	461a      	mov	r2, r3
    3352:	f04f 0300 	mov.w	r3, #0
    3356:	0158      	lsls	r0, r3, #5
    3358:	6078      	str	r0, [r7, #4]
    335a:	6878      	ldr	r0, [r7, #4]
    335c:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3360:	6078      	str	r0, [r7, #4]
    3362:	0150      	lsls	r0, r2, #5
    3364:	460b      	mov	r3, r1
    3366:	461a      	mov	r2, r3
    3368:	f04f 0300 	mov.w	r3, #0
    336c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3370:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3374:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3378:	460b      	mov	r3, r1
    337a:	009b      	lsls	r3, r3, #2
    337c:	3303      	adds	r3, #3
    337e:	3307      	adds	r3, #7
    3380:	08db      	lsrs	r3, r3, #3
    3382:	00db      	lsls	r3, r3, #3
    3384:	ebad 0d03 	sub.w	sp, sp, r3
    3388:	466b      	mov	r3, sp
    338a:	3303      	adds	r3, #3
    338c:	089b      	lsrs	r3, r3, #2
    338e:	009b      	lsls	r3, r3, #2
    3390:	623b      	str	r3, [r7, #32]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3392:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3394:	1e4b      	subs	r3, r1, #1
    3396:	61fb      	str	r3, [r7, #28]
    3398:	460b      	mov	r3, r1
    339a:	461a      	mov	r2, r3
    339c:	f04f 0300 	mov.w	r3, #0
    33a0:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    33a4:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    33a8:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33ac:	460b      	mov	r3, r1
    33ae:	461a      	mov	r2, r3
    33b0:	f04f 0300 	mov.w	r3, #0
    33b4:	01dd      	lsls	r5, r3, #7
    33b6:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33ba:	01d4      	lsls	r4, r2, #7
    33bc:	460b      	mov	r3, r1
    33be:	011b      	lsls	r3, r3, #4
    33c0:	3303      	adds	r3, #3
    33c2:	3307      	adds	r3, #7
    33c4:	08db      	lsrs	r3, r3, #3
    33c6:	00db      	lsls	r3, r3, #3
    33c8:	ebad 0d03 	sub.w	sp, sp, r3
    33cc:	466b      	mov	r3, sp
    33ce:	3303      	adds	r3, #3
    33d0:	089b      	lsrs	r3, r3, #2
    33d2:	009b      	lsls	r3, r3, #2
    33d4:	61bb      	str	r3, [r7, #24]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    33d8:	2b01      	cmp	r3, #1
    33da:	d110      	bne.n	33fe <vSensor+0xfa>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33dc:	f241 13c4 	movw	r3, #4548	; 0x11c4
    33e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    33e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33ea:	4618      	mov	r0, r3
    33ec:	2100      	movs	r1, #0
    33ee:	f04f 32ff 	mov.w	r2, #4294967295
    33f2:	2300      	movs	r3, #0
    33f4:	f000 fcd2 	bl	3d9c <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    33f8:	2300      	movs	r3, #0
    33fa:	643b      	str	r3, [r7, #64]	; 0x40
    33fc:	e00d      	b.n	341a <vSensor+0x116>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    33fe:	6a3b      	ldr	r3, [r7, #32]
    3400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3402:	4619      	mov	r1, r3
    3404:	f7ff fe5a 	bl	30bc <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    3408:	6a3b      	ldr	r3, [r7, #32]
    340a:	4618      	mov	r0, r3
    340c:	f7ff ff6a 	bl	32e4 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    3410:	6a3b      	ldr	r3, [r7, #32]
    3412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3414:	4619      	mov	r1, r3
    3416:	f7ff fed5 	bl	31c4 <vEventDeleteAll>
        }

        //vPrintNumber( xMyFlag );

        xCurrentTime = xTaskGetTickCount();
    341a:	f001 fb73 	bl	4b04 <xTaskGetTickCount>
    341e:	6178      	str	r0, [r7, #20]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3420:	f241 2300 	movw	r3, #4608	; 0x1200
    3424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    342e:	4618      	mov	r0, r3
    3430:	6979      	ldr	r1, [r7, #20]
    3432:	f002 f801 	bl	5438 <vTaskSetxStartTime>

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3438:	3301      	adds	r3, #1
    343a:	63fb      	str	r3, [r7, #60]	; 0x3c
        deadline = xCount * xPeriod; 
    343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3440:	fb02 f303 	mul.w	r3, r2, r3
    3444:	613b      	str	r3, [r7, #16]

        for( i = 0; i < NUM; i ++ )
    3446:	2300      	movs	r3, #0
    3448:	647b      	str	r3, [r7, #68]	; 0x44
    344a:	e011      	b.n	3470 <vSensor+0x16c>
        {
            xDatas[i].xNextPeriod = deadline;
    344c:	69ba      	ldr	r2, [r7, #24]
    344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3450:	011b      	lsls	r3, r3, #4
    3452:	4413      	add	r3, r2
    3454:	693a      	ldr	r2, [r7, #16]
    3456:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3458:	697a      	ldr	r2, [r7, #20]
    345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    345c:	441a      	add	r2, r3
    345e:	69b9      	ldr	r1, [r7, #24]
    3460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3462:	011b      	lsls	r3, r3, #4
    3464:	440b      	add	r3, r1
    3466:	3304      	adds	r3, #4
    3468:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    346a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    346c:	3301      	adds	r3, #1
    346e:	647b      	str	r3, [r7, #68]	; 0x44
    3470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3474:	429a      	cmp	r2, r3
    3476:	dbe9      	blt.n	344c <vSensor+0x148>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vPrintNumber(200);
    3478:	20c8      	movs	r0, #200	; 0xc8
    347a:	f013 fc1d 	bl	16cb8 <vPrintNumber>
        vEventCreateAll( pvMyParameter, xDatas );
    347e:	69bb      	ldr	r3, [r7, #24]
    3480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3482:	4619      	mov	r1, r3
    3484:	f7ff febc 	bl	3200 <vEventCreateAll>
        vPrintNumber(200);
    3488:	20c8      	movs	r0, #200	; 0xc8
    348a:	f013 fc15 	bl	16cb8 <vPrintNumber>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    348e:	2300      	movs	r3, #0
    3490:	647b      	str	r3, [r7, #68]	; 0x44
    3492:	e002      	b.n	349a <vSensor+0x196>
    3494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3496:	3301      	adds	r3, #1
    3498:	647b      	str	r3, [r7, #68]	; 0x44
    349a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    349c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    34a0:	dbf8      	blt.n	3494 <vSensor+0x190>
        {
            //xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    34a2:	f7ff fdeb 	bl	307c <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    34a6:	f001 fb2d 	bl	4b04 <xTaskGetTickCount>
    34aa:	6178      	str	r0, [r7, #20]
        */
        //vPrintNumber( ( xMyFlag + 10 ) * 3 );

        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34ac:	69bb      	ldr	r3, [r7, #24]
    34ae:	681a      	ldr	r2, [r3, #0]
    34b0:	697b      	ldr	r3, [r7, #20]
    34b2:	429a      	cmp	r2, r3
    34b4:	d20a      	bcs.n	34cc <vSensor+0x1c8>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34b6:	69bb      	ldr	r3, [r7, #24]
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	4618      	mov	r0, r3
    34bc:	f013 fbfc 	bl	16cb8 <vPrintNumber>

            vPrintString("there are sensor missing deadline\n\r");
    34c0:	f248 304c 	movw	r0, #33612	; 0x834c
    34c4:	f2c0 0001 	movt	r0, #1
    34c8:	f013 fbdc 	bl	16c84 <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    34cc:	f241 13c4 	movw	r3, #4548	; 0x11c4
    34d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34d6:	4618      	mov	r0, r3
    34d8:	2100      	movs	r1, #0
    34da:	2200      	movs	r2, #0
    34dc:	2300      	movs	r3, #0
    34de:	f000 fb97 	bl	3c10 <xQueueGenericSend>
    }
    34e2:	e778      	b.n	33d6 <vSensor+0xd2>

000034e4 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    34e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34e8:	b093      	sub	sp, #76	; 0x4c
    34ea:	af00      	add	r7, sp, #0
    34ec:	6178      	str	r0, [r7, #20]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    34ee:	6979      	ldr	r1, [r7, #20]
    34f0:	6439      	str	r1, [r7, #64]	; 0x40
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    34f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34f4:	6849      	ldr	r1, [r1, #4]
    34f6:	63f9      	str	r1, [r7, #60]	; 0x3c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    34f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34fa:	6889      	ldr	r1, [r1, #8]
    34fc:	63b9      	str	r1, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3500:	6809      	ldr	r1, [r1, #0]
    3502:	6379      	str	r1, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3504:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3506:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3508:	6339      	str	r1, [r7, #48]	; 0x30

    xEventHandle pxEvent[xNumOfIn];
    350a:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    350c:	1e71      	subs	r1, r6, #1
    350e:	62f9      	str	r1, [r7, #44]	; 0x2c
    3510:	4631      	mov	r1, r6
    3512:	4608      	mov	r0, r1
    3514:	f04f 0100 	mov.w	r1, #0
    3518:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    351c:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3520:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3524:	4631      	mov	r1, r6
    3526:	4608      	mov	r0, r1
    3528:	f04f 0100 	mov.w	r1, #0
    352c:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3530:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3534:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3538:	4631      	mov	r1, r6
    353a:	0089      	lsls	r1, r1, #2
    353c:	3103      	adds	r1, #3
    353e:	3107      	adds	r1, #7
    3540:	08c9      	lsrs	r1, r1, #3
    3542:	00c9      	lsls	r1, r1, #3
    3544:	ebad 0d01 	sub.w	sp, sp, r1
    3548:	4669      	mov	r1, sp
    354a:	3103      	adds	r1, #3
    354c:	0889      	lsrs	r1, r1, #2
    354e:	0089      	lsls	r1, r1, #2
    3550:	62b9      	str	r1, [r7, #40]	; 0x28
    struct eventData xDatas[xNumOfOut];
    3552:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3554:	1e71      	subs	r1, r6, #1
    3556:	6279      	str	r1, [r7, #36]	; 0x24
    3558:	4631      	mov	r1, r6
    355a:	4608      	mov	r0, r1
    355c:	f04f 0100 	mov.w	r1, #0
    3560:	01cd      	lsls	r5, r1, #7
    3562:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3566:	01c4      	lsls	r4, r0, #7
    3568:	4631      	mov	r1, r6
    356a:	4608      	mov	r0, r1
    356c:	f04f 0100 	mov.w	r1, #0
    3570:	01cb      	lsls	r3, r1, #7
    3572:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3576:	01c2      	lsls	r2, r0, #7
    3578:	4633      	mov	r3, r6
    357a:	011b      	lsls	r3, r3, #4
    357c:	3303      	adds	r3, #3
    357e:	3307      	adds	r3, #7
    3580:	08db      	lsrs	r3, r3, #3
    3582:	00db      	lsls	r3, r3, #3
    3584:	ebad 0d03 	sub.w	sp, sp, r3
    3588:	466b      	mov	r3, sp
    358a:	3303      	adds	r3, #3
    358c:	089b      	lsrs	r3, r3, #2
    358e:	009b      	lsls	r3, r3, #2
    3590:	623b      	str	r3, [r7, #32]

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    3596:	61fb      	str	r3, [r7, #28]
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3598:	f241 2300 	movw	r3, #4608	; 0x1200
    359c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35a6:	4618      	mov	r0, r3
    35a8:	69f9      	ldr	r1, [r7, #28]
    35aa:	f001 ff53 	bl	5454 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    35ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    35b2:	4619      	mov	r1, r3
    35b4:	f7ff fd82 	bl	30bc <vEventReceiveAll>

        //vPrintNumber(xMyFlag);

        xCurrentTime = xTaskGetTickCount();
    35b8:	f001 faa4 	bl	4b04 <xTaskGetTickCount>
    35bc:	61b8      	str	r0, [r7, #24]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35be:	f241 2300 	movw	r3, #4608	; 0x1200
    35c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35cc:	4618      	mov	r0, r3
    35ce:	69b9      	ldr	r1, [r7, #24]
    35d0:	f001 ff32 	bl	5438 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    35d4:	2300      	movs	r3, #0
    35d6:	647b      	str	r3, [r7, #68]	; 0x44
    35d8:	e01c      	b.n	3614 <vServant+0x130>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    35da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e2:	6a39      	ldr	r1, [r7, #32]
    35e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35e6:	0112      	lsls	r2, r2, #4
    35e8:	188c      	adds	r4, r1, r2
    35ea:	463a      	mov	r2, r7
    35ec:	4610      	mov	r0, r2
    35ee:	4619      	mov	r1, r3
    35f0:	f7ff f9fc 	bl	29ec <xEventGetxData>
    35f4:	463b      	mov	r3, r7
    35f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    35f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    35fc:	69ba      	ldr	r2, [r7, #24]
    35fe:	69fb      	ldr	r3, [r7, #28]
    3600:	441a      	add	r2, r3
    3602:	6a39      	ldr	r1, [r7, #32]
    3604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3606:	011b      	lsls	r3, r3, #4
    3608:	440b      	add	r3, r1
    360a:	3304      	adds	r3, #4
    360c:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCount();
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    360e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3610:	3301      	adds	r3, #1
    3612:	647b      	str	r3, [r7, #68]	; 0x44
    3614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3618:	429a      	cmp	r2, r3
    361a:	dbde      	blt.n	35da <vServant+0xf6>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    361c:	2300      	movs	r3, #0
    361e:	647b      	str	r3, [r7, #68]	; 0x44
    3620:	e002      	b.n	3628 <vServant+0x144>
    3622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3624:	3301      	adds	r3, #1
    3626:	647b      	str	r3, [r7, #68]	; 0x44
    3628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    362a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    362e:	dbf8      	blt.n	3622 <vServant+0x13e>
        {
            //xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3632:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3634:	4619      	mov	r1, r3
    3636:	f7ff fdc5 	bl	31c4 <vEventDeleteAll>

        vPrintNumber(200);
    363a:	20c8      	movs	r0, #200	; 0xc8
    363c:	f013 fb3c 	bl	16cb8 <vPrintNumber>
        vEventCreateAll( pvMyParameter, xDatas );
    3640:	6a3b      	ldr	r3, [r7, #32]
    3642:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3644:	4619      	mov	r1, r3
    3646:	f7ff fddb 	bl	3200 <vEventCreateAll>
        vPrintNumber(200);
    364a:	20c8      	movs	r0, #200	; 0xc8
    364c:	f013 fb34 	bl	16cb8 <vPrintNumber>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3650:	6a3b      	ldr	r3, [r7, #32]
    3652:	681a      	ldr	r2, [r3, #0]
    3654:	69bb      	ldr	r3, [r7, #24]
    3656:	429a      	cmp	r2, r3
    3658:	d210      	bcs.n	367c <vServant+0x198>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    365a:	6a3b      	ldr	r3, [r7, #32]
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	4618      	mov	r0, r3
    3660:	f013 fb2a 	bl	16cb8 <vPrintNumber>
            vPrintNumber(xCurrentTime);
    3664:	69b8      	ldr	r0, [r7, #24]
    3666:	f013 fb27 	bl	16cb8 <vPrintNumber>
            vPrintNumber(xMyFlag);
    366a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    366c:	f013 fb24 	bl	16cb8 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    3670:	f248 3070 	movw	r0, #33648	; 0x8370
    3674:	f2c0 0001 	movt	r0, #1
    3678:	f013 fb04 	bl	16c84 <vPrintString>
        }

        vTaskDelayLET();
    367c:	f7ff fcfe 	bl	307c <vTaskDelayLET>

        xCurrentTime = xTaskGetTickCount();
    3680:	f001 fa40 	bl	4b04 <xTaskGetTickCount>
    3684:	61b8      	str	r0, [r7, #24]
        */
        //vPrintNumber( (xMyFlag + 10) * 3 );


        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3686:	f241 13c4 	movw	r3, #4548	; 0x11c4
    368a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3690:	4618      	mov	r0, r3
    3692:	2100      	movs	r1, #0
    3694:	2200      	movs	r2, #0
    3696:	2300      	movs	r3, #0
    3698:	f000 faba 	bl	3c10 <xQueueGenericSend>
        
    }
    369c:	e787      	b.n	35ae <vServant+0xca>
    369e:	bf00      	nop

000036a0 <vR_Servant>:
}

void vR_Servant( void * pvParameter)
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b090      	sub	sp, #64	; 0x40
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    36ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    36b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    36b6:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    36b8:	f241 2300 	movw	r3, #4608	; 0x1200
    36bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36c6:	4618      	mov	r0, r3
    36c8:	6a39      	ldr	r1, [r7, #32]
    36ca:	f001 fec3 	bl	5454 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    36ce:	f241 13c4 	movw	r3, #4548	; 0x11c4
    36d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36dc:	4618      	mov	r0, r3
    36de:	2100      	movs	r1, #0
    36e0:	f04f 32ff 	mov.w	r2, #4294967295
    36e4:	2300      	movs	r3, #0
    36e6:	f000 fb59 	bl	3d9c <xQueueGenericReceive>

        vPrintNumber( 400 );
    36ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
    36ee:	f013 fae3 	bl	16cb8 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
    36f2:	f001 fa07 	bl	4b04 <xTaskGetTickCount>
    36f6:	61f8      	str	r0, [r7, #28]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36f8:	f241 2300 	movw	r3, #4608	; 0x1200
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3706:	4618      	mov	r0, r3
    3708:	69f9      	ldr	r1, [r7, #28]
    370a:	f001 fe95 	bl	5438 <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    370e:	2300      	movs	r3, #0
    3710:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3712:	e094      	b.n	383e <vR_Servant+0x19e>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3714:	f107 030c 	add.w	r3, r7, #12
    3718:	4618      	mov	r0, r3
    371a:	f640 316c 	movw	r1, #2924	; 0xb6c
    371e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3722:	f7ff faad 	bl	2c80 <xEventListGenericTransit>
    3726:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    372a:	f1b3 3fff 	cmp.w	r3, #4294967295
    372e:	d100      	bne.n	3732 <vR_Servant+0x92>
            {
                // no event
                break;
    3730:	e089      	b.n	3846 <vR_Servant+0x1a6>
            }
            else if( xResult == 0 )
    3732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3734:	2b00      	cmp	r3, #0
    3736:	d100      	bne.n	373a <vR_Servant+0x9a>
            {
                // not time yet
                break;
    3738:	e085      	b.n	3846 <vR_Servant+0x1a6>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    373a:	68fb      	ldr	r3, [r7, #12]
    373c:	68db      	ldr	r3, [r3, #12]
    373e:	4618      	mov	r0, r3
    3740:	f7ff f936 	bl	29b0 <xEventGetpxDestination>
    3744:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3746:	68fb      	ldr	r3, [r7, #12]
    3748:	68db      	ldr	r3, [r3, #12]
    374a:	4618      	mov	r0, r3
    374c:	f7ff f924 	bl	2998 <xEventGetpxSource>
    3750:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3752:	2301      	movs	r3, #1
    3754:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3756:	2300      	movs	r3, #0
    3758:	63fb      	str	r3, [r7, #60]	; 0x3c
    375a:	e068      	b.n	382e <vR_Servant+0x18e>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    375c:	f240 02ac 	movw	r2, #172	; 0xac
    3760:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3766:	460b      	mov	r3, r1
    3768:	005b      	lsls	r3, r3, #1
    376a:	440b      	add	r3, r1
    376c:	009b      	lsls	r3, r3, #2
    376e:	4413      	add	r3, r2
    3770:	3304      	adds	r3, #4
    3772:	681b      	ldr	r3, [r3, #0]
    3774:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3776:	f240 02ac 	movw	r2, #172	; 0xac
    377a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    377e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3780:	460b      	mov	r3, r1
    3782:	005b      	lsls	r3, r3, #1
    3784:	440b      	add	r3, r1
    3786:	009b      	lsls	r3, r3, #2
    3788:	4413      	add	r3, r2
    378a:	3308      	adds	r3, #8
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3790:	f241 2300 	movw	r3, #4608	; 0x1200
    3794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3798:	693a      	ldr	r2, [r7, #16]
    379a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37a0:	429a      	cmp	r2, r3
    37a2:	d141      	bne.n	3828 <vR_Servant+0x188>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    37a4:	f241 2300 	movw	r3, #4608	; 0x1200
    37a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ac:	697a      	ldr	r2, [r7, #20]
    37ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37b2:	69bb      	ldr	r3, [r7, #24]
    37b4:	429a      	cmp	r2, r3
    37b6:	d127      	bne.n	3808 <vR_Servant+0x168>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    37b8:	f240 02ac 	movw	r2, #172	; 0xac
    37bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37c2:	460b      	mov	r3, r1
    37c4:	005b      	lsls	r3, r3, #1
    37c6:	440b      	add	r3, r1
    37c8:	009b      	lsls	r3, r3, #2
    37ca:	4413      	add	r3, r2
    37cc:	330c      	adds	r3, #12
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	2b02      	cmp	r3, #2
    37d2:	d10b      	bne.n	37ec <vR_Servant+0x14c>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    37d4:	f248 3098 	movw	r0, #33688	; 0x8398
    37d8:	f2c0 0001 	movt	r0, #1
    37dc:	f013 fa52 	bl	16c84 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	68db      	ldr	r3, [r3, #12]
    37e4:	4618      	mov	r0, r3
    37e6:	f7ff fafd 	bl	2de4 <vEventGenericDelete>
    37ea:	e01d      	b.n	3828 <vR_Servant+0x188>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    37ec:	f240 02ac 	movw	r2, #172	; 0xac
    37f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37f6:	460b      	mov	r3, r1
    37f8:	005b      	lsls	r3, r3, #1
    37fa:	440b      	add	r3, r1
    37fc:	009b      	lsls	r3, r3, #2
    37fe:	4413      	add	r3, r2
    3800:	330c      	adds	r3, #12
    3802:	2202      	movs	r2, #2
    3804:	601a      	str	r2, [r3, #0]
    3806:	e00f      	b.n	3828 <vR_Servant+0x188>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3808:	f240 02ac 	movw	r2, #172	; 0xac
    380c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3812:	460b      	mov	r3, r1
    3814:	005b      	lsls	r3, r3, #1
    3816:	440b      	add	r3, r1
    3818:	009b      	lsls	r3, r3, #2
    381a:	4413      	add	r3, r2
    381c:	330c      	adds	r3, #12
    381e:	681b      	ldr	r3, [r3, #0]
    3820:	2b01      	cmp	r3, #1
    3822:	d101      	bne.n	3828 <vR_Servant+0x188>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3824:	2300      	movs	r3, #0
    3826:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    382a:	3301      	adds	r3, #1
    382c:	63fb      	str	r3, [r7, #60]	; 0x3c
    382e:	f240 03ac 	movw	r3, #172	; 0xac
    3832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3836:	681a      	ldr	r2, [r3, #0]
    3838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    383a:	429a      	cmp	r2, r3
    383c:	dc8e      	bgt.n	375c <vR_Servant+0xbc>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3840:	2b00      	cmp	r3, #0
    3842:	f43f af67 	beq.w	3714 <vR_Servant+0x74>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3848:	f1b3 3fff 	cmp.w	r3, #4294967295
    384c:	d100      	bne.n	3850 <vR_Servant+0x1b0>
        {
            //vTaskDelayLET();
            continue; 
    384e:	e04d      	b.n	38ec <vR_Servant+0x24c>
        }
        else if ( xResult == 0 )
    3850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3852:	2b00      	cmp	r3, #0
    3854:	d104      	bne.n	3860 <vR_Servant+0x1c0>
        {
            //vTaskDelayLET();
            vPrintNumber( 400 );
    3856:	f44f 70c8 	mov.w	r0, #400	; 0x190
    385a:	f013 fa2d 	bl	16cb8 <vPrintNumber>
            //vPrintString("not time yet\n\r");
            continue;
    385e:	e045      	b.n	38ec <vR_Servant+0x24c>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3860:	2300      	movs	r3, #0
    3862:	63fb      	str	r3, [r7, #60]	; 0x3c
    3864:	e028      	b.n	38b8 <vR_Servant+0x218>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3866:	f240 02ac 	movw	r2, #172	; 0xac
    386a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    386e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3870:	460b      	mov	r3, r1
    3872:	005b      	lsls	r3, r3, #1
    3874:	440b      	add	r3, r1
    3876:	009b      	lsls	r3, r3, #2
    3878:	4413      	add	r3, r2
    387a:	3308      	adds	r3, #8
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3880:	f241 2300 	movw	r3, #4608	; 0x1200
    3884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3888:	693a      	ldr	r2, [r7, #16]
    388a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3890:	429a      	cmp	r2, r3
    3892:	d10e      	bne.n	38b2 <vR_Servant+0x212>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3894:	f240 02ac 	movw	r2, #172	; 0xac
    3898:	f2c2 0200 	movt	r2, #8192	; 0x2000
    389c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    389e:	460b      	mov	r3, r1
    38a0:	005b      	lsls	r3, r3, #1
    38a2:	440b      	add	r3, r1
    38a4:	009b      	lsls	r3, r3, #2
    38a6:	4413      	add	r3, r2
    38a8:	330c      	adds	r3, #12
    38aa:	2201      	movs	r2, #1
    38ac:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    38ae:	693b      	ldr	r3, [r7, #16]
    38b0:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38b4:	3301      	adds	r3, #1
    38b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    38b8:	f240 03ac 	movw	r3, #172	; 0xac
    38bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c0:	681a      	ldr	r2, [r3, #0]
    38c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38c4:	429a      	cmp	r2, r3
    38c6:	dcce      	bgt.n	3866 <vR_Servant+0x1c6>
                }
            }

            //vTaskDelayLET();

            vPrintNumber( 400 );
    38c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    38cc:	f013 f9f4 	bl	16cb8 <vPrintNumber>

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    38d0:	f241 13c4 	movw	r3, #4548	; 0x11c4
    38d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    38da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38de:	4618      	mov	r0, r3
    38e0:	2100      	movs	r1, #0
    38e2:	2200      	movs	r2, #0
    38e4:	2300      	movs	r3, #0
    38e6:	f000 f993 	bl	3c10 <xQueueGenericSend>
        }
    }
    38ea:	e6f0      	b.n	36ce <vR_Servant+0x2e>
    38ec:	e6ef      	b.n	36ce <vR_Servant+0x2e>
    38ee:	bf00      	nop

000038f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    38f0:	b480      	push	{r7}
    38f2:	b083      	sub	sp, #12
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	f103 0208 	add.w	r2, r3, #8
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	f04f 32ff 	mov.w	r2, #4294967295
    3908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	f103 0208 	add.w	r2, r3, #8
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	f103 0208 	add.w	r2, r3, #8
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	2200      	movs	r2, #0
    3922:	601a      	str	r2, [r3, #0]
}
    3924:	370c      	adds	r7, #12
    3926:	46bd      	mov	sp, r7
    3928:	f85d 7b04 	ldr.w	r7, [sp], #4
    392c:	4770      	bx	lr
    392e:	bf00      	nop

00003930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3930:	b480      	push	{r7}
    3932:	b083      	sub	sp, #12
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	2200      	movs	r2, #0
    393c:	611a      	str	r2, [r3, #16]
}
    393e:	370c      	adds	r7, #12
    3940:	46bd      	mov	sp, r7
    3942:	f85d 7b04 	ldr.w	r7, [sp], #4
    3946:	4770      	bx	lr

00003948 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3948:	b480      	push	{r7}
    394a:	b085      	sub	sp, #20
    394c:	af00      	add	r7, sp, #0
    394e:	6078      	str	r0, [r7, #4]
    3950:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	685b      	ldr	r3, [r3, #4]
    3956:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	685a      	ldr	r2, [r3, #4]
    395c:	683b      	ldr	r3, [r7, #0]
    395e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	685a      	ldr	r2, [r3, #4]
    3964:	683b      	ldr	r3, [r7, #0]
    3966:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	685b      	ldr	r3, [r3, #4]
    396c:	683a      	ldr	r2, [r7, #0]
    396e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3970:	68fb      	ldr	r3, [r7, #12]
    3972:	683a      	ldr	r2, [r7, #0]
    3974:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	683a      	ldr	r2, [r7, #0]
    397a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	1c5a      	adds	r2, r3, #1
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	601a      	str	r2, [r3, #0]
}
    398c:	3714      	adds	r7, #20
    398e:	46bd      	mov	sp, r7
    3990:	f85d 7b04 	ldr.w	r7, [sp], #4
    3994:	4770      	bx	lr
    3996:	bf00      	nop

00003998 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3998:	b480      	push	{r7}
    399a:	b085      	sub	sp, #20
    399c:	af00      	add	r7, sp, #0
    399e:	6078      	str	r0, [r7, #4]
    39a0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    39a2:	683b      	ldr	r3, [r7, #0]
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    39a8:	68bb      	ldr	r3, [r7, #8]
    39aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    39ae:	d103      	bne.n	39b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	691b      	ldr	r3, [r3, #16]
    39b4:	60fb      	str	r3, [r7, #12]
    39b6:	e00c      	b.n	39d2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	3308      	adds	r3, #8
    39bc:	60fb      	str	r3, [r7, #12]
    39be:	e002      	b.n	39c6 <vListInsert+0x2e>
    39c0:	68fb      	ldr	r3, [r7, #12]
    39c2:	685b      	ldr	r3, [r3, #4]
    39c4:	60fb      	str	r3, [r7, #12]
    39c6:	68fb      	ldr	r3, [r7, #12]
    39c8:	685b      	ldr	r3, [r3, #4]
    39ca:	681a      	ldr	r2, [r3, #0]
    39cc:	68bb      	ldr	r3, [r7, #8]
    39ce:	429a      	cmp	r2, r3
    39d0:	d9f6      	bls.n	39c0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	685a      	ldr	r2, [r3, #4]
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	685b      	ldr	r3, [r3, #4]
    39de:	683a      	ldr	r2, [r7, #0]
    39e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    39e2:	683b      	ldr	r3, [r7, #0]
    39e4:	68fa      	ldr	r2, [r7, #12]
    39e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    39e8:	68fb      	ldr	r3, [r7, #12]
    39ea:	683a      	ldr	r2, [r7, #0]
    39ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    39ee:	683b      	ldr	r3, [r7, #0]
    39f0:	687a      	ldr	r2, [r7, #4]
    39f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	1c5a      	adds	r2, r3, #1
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	601a      	str	r2, [r3, #0]
}
    39fe:	3714      	adds	r7, #20
    3a00:	46bd      	mov	sp, r7
    3a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a06:	4770      	bx	lr

00003a08 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3a08:	b480      	push	{r7}
    3a0a:	b085      	sub	sp, #20
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	687a      	ldr	r2, [r7, #4]
    3a16:	6892      	ldr	r2, [r2, #8]
    3a18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	689b      	ldr	r3, [r3, #8]
    3a1e:	687a      	ldr	r2, [r7, #4]
    3a20:	6852      	ldr	r2, [r2, #4]
    3a22:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	691b      	ldr	r3, [r3, #16]
    3a28:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	685a      	ldr	r2, [r3, #4]
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	429a      	cmp	r2, r3
    3a32:	d103      	bne.n	3a3c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3a34:	687b      	ldr	r3, [r7, #4]
    3a36:	689a      	ldr	r2, [r3, #8]
    3a38:	68fb      	ldr	r3, [r7, #12]
    3a3a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	2200      	movs	r2, #0
    3a40:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3a42:	68fb      	ldr	r3, [r7, #12]
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	1e5a      	subs	r2, r3, #1
    3a48:	68fb      	ldr	r3, [r7, #12]
    3a4a:	601a      	str	r2, [r3, #0]
}
    3a4c:	3714      	adds	r7, #20
    3a4e:	46bd      	mov	sp, r7
    3a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a54:	4770      	bx	lr
    3a56:	bf00      	nop

00003a58 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b084      	sub	sp, #16
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
    3a60:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3a62:	2301      	movs	r3, #1
    3a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3a66:	683b      	ldr	r3, [r7, #0]
    3a68:	2b01      	cmp	r3, #1
    3a6a:	d00b      	beq.n	3a84 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a70:	2b00      	cmp	r3, #0
    3a72:	d001      	beq.n	3a78 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3a74:	2300      	movs	r3, #0
    3a76:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	691b      	ldr	r3, [r3, #16]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d001      	beq.n	3a84 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3a80:	2300      	movs	r3, #0
    3a82:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3a84:	68fb      	ldr	r3, [r7, #12]
    3a86:	2b01      	cmp	r3, #1
    3a88:	d12f      	bne.n	3aea <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3a92:	6879      	ldr	r1, [r7, #4]
    3a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3a96:	fb01 f303 	mul.w	r3, r1, r3
    3a9a:	441a      	add	r2, r3
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	2200      	movs	r2, #0
    3aa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	681a      	ldr	r2, [r3, #0]
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3ab6:	3b01      	subs	r3, #1
    3ab8:	6879      	ldr	r1, [r7, #4]
    3aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3abc:	fb01 f303 	mul.w	r3, r1, r3
    3ac0:	441a      	add	r2, r3
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	f04f 32ff 	mov.w	r2, #4294967295
    3acc:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	f04f 32ff 	mov.w	r2, #4294967295
    3ad4:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	3310      	adds	r3, #16
    3ada:	4618      	mov	r0, r3
    3adc:	f7ff ff08 	bl	38f0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	3324      	adds	r3, #36	; 0x24
    3ae4:	4618      	mov	r0, r3
    3ae6:	f7ff ff03 	bl	38f0 <vListInitialise>
	}

	return xReturn;
    3aea:	68fb      	ldr	r3, [r7, #12]
}
    3aec:	4618      	mov	r0, r3
    3aee:	3710      	adds	r7, #16
    3af0:	46bd      	mov	sp, r7
    3af2:	bd80      	pop	{r7, pc}

00003af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b088      	sub	sp, #32
    3af8:	af00      	add	r7, sp, #0
    3afa:	60f8      	str	r0, [r7, #12]
    3afc:	60b9      	str	r1, [r7, #8]
    3afe:	4613      	mov	r3, r2
    3b00:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3b02:	2300      	movs	r3, #0
    3b04:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d026      	beq.n	3b5a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3b0c:	204c      	movs	r0, #76	; 0x4c
    3b0e:	f001 fda7 	bl	5660 <pvPortMalloc>
    3b12:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3b14:	69bb      	ldr	r3, [r7, #24]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d01f      	beq.n	3b5a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3b1a:	68fb      	ldr	r3, [r7, #12]
    3b1c:	68ba      	ldr	r2, [r7, #8]
    3b1e:	fb02 f303 	mul.w	r3, r2, r3
    3b22:	3301      	adds	r3, #1
    3b24:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3b26:	6978      	ldr	r0, [r7, #20]
    3b28:	f001 fd9a 	bl	5660 <pvPortMalloc>
    3b2c:	4602      	mov	r2, r0
    3b2e:	69bb      	ldr	r3, [r7, #24]
    3b30:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3b32:	69bb      	ldr	r3, [r7, #24]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	2b00      	cmp	r3, #0
    3b38:	d00c      	beq.n	3b54 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3b3a:	69bb      	ldr	r3, [r7, #24]
    3b3c:	68fa      	ldr	r2, [r7, #12]
    3b3e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3b40:	69bb      	ldr	r3, [r7, #24]
    3b42:	68ba      	ldr	r2, [r7, #8]
    3b44:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3b46:	69b8      	ldr	r0, [r7, #24]
    3b48:	2101      	movs	r1, #1
    3b4a:	f7ff ff85 	bl	3a58 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3b4e:	69bb      	ldr	r3, [r7, #24]
    3b50:	61fb      	str	r3, [r7, #28]
    3b52:	e002      	b.n	3b5a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3b54:	69b8      	ldr	r0, [r7, #24]
    3b56:	f001 fe47 	bl	57e8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3b5a:	69fb      	ldr	r3, [r7, #28]
}
    3b5c:	4618      	mov	r0, r3
    3b5e:	3720      	adds	r7, #32
    3b60:	46bd      	mov	sp, r7
    3b62:	bd80      	pop	{r7, pc}

00003b64 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3b64:	b580      	push	{r7, lr}
    3b66:	b084      	sub	sp, #16
    3b68:	af00      	add	r7, sp, #0
    3b6a:	4603      	mov	r3, r0
    3b6c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3b6e:	204c      	movs	r0, #76	; 0x4c
    3b70:	f001 fd76 	bl	5660 <pvPortMalloc>
    3b74:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d02c      	beq.n	3bd6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3b7c:	68fb      	ldr	r3, [r7, #12]
    3b7e:	2200      	movs	r2, #0
    3b80:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3b82:	68fb      	ldr	r3, [r7, #12]
    3b84:	2200      	movs	r2, #0
    3b86:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	2200      	movs	r2, #0
    3b8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3b8e:	68fb      	ldr	r3, [r7, #12]
    3b90:	2200      	movs	r2, #0
    3b92:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3b94:	68fb      	ldr	r3, [r7, #12]
    3b96:	2200      	movs	r2, #0
    3b98:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	2201      	movs	r2, #1
    3b9e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3ba0:	68fb      	ldr	r3, [r7, #12]
    3ba2:	2200      	movs	r2, #0
    3ba4:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	f04f 32ff 	mov.w	r2, #4294967295
    3bac:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	f04f 32ff 	mov.w	r2, #4294967295
    3bb4:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	3310      	adds	r3, #16
    3bba:	4618      	mov	r0, r3
    3bbc:	f7ff fe98 	bl	38f0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	3324      	adds	r3, #36	; 0x24
    3bc4:	4618      	mov	r0, r3
    3bc6:	f7ff fe93 	bl	38f0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3bca:	68f8      	ldr	r0, [r7, #12]
    3bcc:	2100      	movs	r1, #0
    3bce:	2200      	movs	r2, #0
    3bd0:	2300      	movs	r3, #0
    3bd2:	f000 f81d 	bl	3c10 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3bd6:	68fb      	ldr	r3, [r7, #12]
	}
    3bd8:	4618      	mov	r0, r3
    3bda:	3710      	adds	r7, #16
    3bdc:	46bd      	mov	sp, r7
    3bde:	bd80      	pop	{r7, pc}

00003be0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3be0:	b580      	push	{r7, lr}
    3be2:	b084      	sub	sp, #16
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3be8:	f001 fcc0 	bl	556c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d103      	bne.n	3bfc <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	685b      	ldr	r3, [r3, #4]
    3bf8:	60fb      	str	r3, [r7, #12]
    3bfa:	e001      	b.n	3c00 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3bfc:	2300      	movs	r3, #0
    3bfe:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3c00:	f001 fcca 	bl	5598 <vPortExitCritical>
		
		return pxReturn;
    3c04:	68fb      	ldr	r3, [r7, #12]
	}
    3c06:	4618      	mov	r0, r3
    3c08:	3710      	adds	r7, #16
    3c0a:	46bd      	mov	sp, r7
    3c0c:	bd80      	pop	{r7, pc}
    3c0e:	bf00      	nop

00003c10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3c10:	b580      	push	{r7, lr}
    3c12:	b088      	sub	sp, #32
    3c14:	af00      	add	r7, sp, #0
    3c16:	60f8      	str	r0, [r7, #12]
    3c18:	60b9      	str	r1, [r7, #8]
    3c1a:	607a      	str	r2, [r7, #4]
    3c1c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3c1e:	2300      	movs	r3, #0
    3c20:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3c22:	f001 fca3 	bl	556c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3c2a:	68fb      	ldr	r3, [r7, #12]
    3c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3c2e:	429a      	cmp	r2, r3
    3c30:	d216      	bcs.n	3c60 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3c32:	68f8      	ldr	r0, [r7, #12]
    3c34:	68b9      	ldr	r1, [r7, #8]
    3c36:	683a      	ldr	r2, [r7, #0]
    3c38:	f000 f9d6 	bl	3fe8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c3c:	68fb      	ldr	r3, [r7, #12]
    3c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3c40:	2b00      	cmp	r3, #0
    3c42:	d009      	beq.n	3c58 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3c44:	68fb      	ldr	r3, [r7, #12]
    3c46:	3324      	adds	r3, #36	; 0x24
    3c48:	4618      	mov	r0, r3
    3c4a:	f001 f905 	bl	4e58 <xTaskRemoveFromEventList>
    3c4e:	4603      	mov	r3, r0
    3c50:	2b01      	cmp	r3, #1
    3c52:	d101      	bne.n	3c58 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3c54:	f001 fc7c 	bl	5550 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3c58:	f001 fc9e 	bl	5598 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3c5c:	2301      	movs	r3, #1
    3c5e:	e059      	b.n	3d14 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d103      	bne.n	3c6e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3c66:	f001 fc97 	bl	5598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3c6a:	2300      	movs	r3, #0
    3c6c:	e052      	b.n	3d14 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3c6e:	69fb      	ldr	r3, [r7, #28]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d106      	bne.n	3c82 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3c74:	f107 0314 	add.w	r3, r7, #20
    3c78:	4618      	mov	r0, r3
    3c7a:	f001 f945 	bl	4f08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3c7e:	2301      	movs	r3, #1
    3c80:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3c82:	f001 fc89 	bl	5598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3c86:	f000 fe93 	bl	49b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3c8a:	f001 fc6f 	bl	556c <vPortEnterCritical>
    3c8e:	68fb      	ldr	r3, [r7, #12]
    3c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c92:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c96:	d102      	bne.n	3c9e <xQueueGenericSend+0x8e>
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	2200      	movs	r2, #0
    3c9c:	645a      	str	r2, [r3, #68]	; 0x44
    3c9e:	68fb      	ldr	r3, [r7, #12]
    3ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ca6:	d102      	bne.n	3cae <xQueueGenericSend+0x9e>
    3ca8:	68fb      	ldr	r3, [r7, #12]
    3caa:	2200      	movs	r2, #0
    3cac:	649a      	str	r2, [r3, #72]	; 0x48
    3cae:	f001 fc73 	bl	5598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3cb2:	f107 0214 	add.w	r2, r7, #20
    3cb6:	1d3b      	adds	r3, r7, #4
    3cb8:	4610      	mov	r0, r2
    3cba:	4619      	mov	r1, r3
    3cbc:	f001 f93c 	bl	4f38 <xTaskCheckForTimeOut>
    3cc0:	4603      	mov	r3, r0
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d11e      	bne.n	3d04 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3cc6:	68f8      	ldr	r0, [r7, #12]
    3cc8:	f000 fa86 	bl	41d8 <prvIsQueueFull>
    3ccc:	4603      	mov	r3, r0
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d012      	beq.n	3cf8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3cd2:	68fb      	ldr	r3, [r7, #12]
    3cd4:	f103 0210 	add.w	r2, r3, #16
    3cd8:	687b      	ldr	r3, [r7, #4]
    3cda:	4610      	mov	r0, r2
    3cdc:	4619      	mov	r1, r3
    3cde:	f001 f883 	bl	4de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3ce2:	68f8      	ldr	r0, [r7, #12]
    3ce4:	f000 fa02 	bl	40ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3ce8:	f000 fe74 	bl	49d4 <xTaskResumeAll>
    3cec:	4603      	mov	r3, r0
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d10f      	bne.n	3d12 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3cf2:	f001 fc2d 	bl	5550 <vPortYieldFromISR>
    3cf6:	e00c      	b.n	3d12 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3cf8:	68f8      	ldr	r0, [r7, #12]
    3cfa:	f000 f9f7 	bl	40ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3cfe:	f000 fe69 	bl	49d4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3d02:	e78e      	b.n	3c22 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3d04:	68f8      	ldr	r0, [r7, #12]
    3d06:	f000 f9f1 	bl	40ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3d0a:	f000 fe63 	bl	49d4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3d0e:	2300      	movs	r3, #0
    3d10:	e000      	b.n	3d14 <xQueueGenericSend+0x104>
		}
	}
    3d12:	e786      	b.n	3c22 <xQueueGenericSend+0x12>
}
    3d14:	4618      	mov	r0, r3
    3d16:	3720      	adds	r7, #32
    3d18:	46bd      	mov	sp, r7
    3d1a:	bd80      	pop	{r7, pc}

00003d1c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b086      	sub	sp, #24
    3d20:	af00      	add	r7, sp, #0
    3d22:	60f8      	str	r0, [r7, #12]
    3d24:	60b9      	str	r1, [r7, #8]
    3d26:	607a      	str	r2, [r7, #4]
    3d28:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d2a:	2300      	movs	r3, #0
    3d2c:	613b      	str	r3, [r7, #16]
    3d2e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3d32:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3d36:	68fb      	ldr	r3, [r7, #12]
    3d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3d3a:	68fb      	ldr	r3, [r7, #12]
    3d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d3e:	429a      	cmp	r2, r3
    3d40:	d221      	bcs.n	3d86 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3d42:	68f8      	ldr	r0, [r7, #12]
    3d44:	68b9      	ldr	r1, [r7, #8]
    3d46:	683a      	ldr	r2, [r7, #0]
    3d48:	f000 f94e 	bl	3fe8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3d4c:	68fb      	ldr	r3, [r7, #12]
    3d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d50:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d54:	d10f      	bne.n	3d76 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d56:	68fb      	ldr	r3, [r7, #12]
    3d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d010      	beq.n	3d80 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d5e:	68fb      	ldr	r3, [r7, #12]
    3d60:	3324      	adds	r3, #36	; 0x24
    3d62:	4618      	mov	r0, r3
    3d64:	f001 f878 	bl	4e58 <xTaskRemoveFromEventList>
    3d68:	4603      	mov	r3, r0
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d008      	beq.n	3d80 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	2201      	movs	r2, #1
    3d72:	601a      	str	r2, [r3, #0]
    3d74:	e004      	b.n	3d80 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d7a:	1c5a      	adds	r2, r3, #1
    3d7c:	68fb      	ldr	r3, [r7, #12]
    3d7e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3d80:	2301      	movs	r3, #1
    3d82:	617b      	str	r3, [r7, #20]
    3d84:	e001      	b.n	3d8a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3d86:	2300      	movs	r3, #0
    3d88:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3d8a:	f04f 0000 	mov.w	r0, #0
    3d8e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3d92:	697b      	ldr	r3, [r7, #20]
}
    3d94:	4618      	mov	r0, r3
    3d96:	3718      	adds	r7, #24
    3d98:	46bd      	mov	sp, r7
    3d9a:	bd80      	pop	{r7, pc}

00003d9c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b088      	sub	sp, #32
    3da0:	af00      	add	r7, sp, #0
    3da2:	60f8      	str	r0, [r7, #12]
    3da4:	60b9      	str	r1, [r7, #8]
    3da6:	607a      	str	r2, [r7, #4]
    3da8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3daa:	2300      	movs	r3, #0
    3dac:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3dae:	f001 fbdd 	bl	556c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3db2:	68fb      	ldr	r3, [r7, #12]
    3db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3db6:	2b00      	cmp	r3, #0
    3db8:	d03b      	beq.n	3e32 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3dba:	68fb      	ldr	r3, [r7, #12]
    3dbc:	68db      	ldr	r3, [r3, #12]
    3dbe:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3dc0:	68f8      	ldr	r0, [r7, #12]
    3dc2:	68b9      	ldr	r1, [r7, #8]
    3dc4:	f000 f96c 	bl	40a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3dc8:	683b      	ldr	r3, [r7, #0]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d11c      	bne.n	3e08 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3dce:	68fb      	ldr	r3, [r7, #12]
    3dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dd2:	1e5a      	subs	r2, r3, #1
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	681b      	ldr	r3, [r3, #0]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d104      	bne.n	3dea <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3de0:	f001 fa5c 	bl	529c <xTaskGetCurrentTaskHandle>
    3de4:	4602      	mov	r2, r0
    3de6:	68fb      	ldr	r3, [r7, #12]
    3de8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	691b      	ldr	r3, [r3, #16]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d01b      	beq.n	3e2a <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	3310      	adds	r3, #16
    3df6:	4618      	mov	r0, r3
    3df8:	f001 f82e 	bl	4e58 <xTaskRemoveFromEventList>
    3dfc:	4603      	mov	r3, r0
    3dfe:	2b01      	cmp	r3, #1
    3e00:	d113      	bne.n	3e2a <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    3e02:	f001 fba5 	bl	5550 <vPortYieldFromISR>
    3e06:	e010      	b.n	3e2a <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	69ba      	ldr	r2, [r7, #24]
    3e0c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e12:	2b00      	cmp	r3, #0
    3e14:	d009      	beq.n	3e2a <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	3324      	adds	r3, #36	; 0x24
    3e1a:	4618      	mov	r0, r3
    3e1c:	f001 f81c 	bl	4e58 <xTaskRemoveFromEventList>
    3e20:	4603      	mov	r3, r0
    3e22:	2b00      	cmp	r3, #0
    3e24:	d001      	beq.n	3e2a <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3e26:	f001 fb93 	bl	5550 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    3e2a:	f001 fbb5 	bl	5598 <vPortExitCritical>
				return pdPASS;
    3e2e:	2301      	movs	r3, #1
    3e30:	e066      	b.n	3f00 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	2b00      	cmp	r3, #0
    3e36:	d103      	bne.n	3e40 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3e38:	f001 fbae 	bl	5598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3e3c:	2300      	movs	r3, #0
    3e3e:	e05f      	b.n	3f00 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    3e40:	69fb      	ldr	r3, [r7, #28]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d106      	bne.n	3e54 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3e46:	f107 0310 	add.w	r3, r7, #16
    3e4a:	4618      	mov	r0, r3
    3e4c:	f001 f85c 	bl	4f08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3e50:	2301      	movs	r3, #1
    3e52:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3e54:	f001 fba0 	bl	5598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3e58:	f000 fdaa 	bl	49b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3e5c:	f001 fb86 	bl	556c <vPortEnterCritical>
    3e60:	68fb      	ldr	r3, [r7, #12]
    3e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e64:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e68:	d102      	bne.n	3e70 <xQueueGenericReceive+0xd4>
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	2200      	movs	r2, #0
    3e6e:	645a      	str	r2, [r3, #68]	; 0x44
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e74:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e78:	d102      	bne.n	3e80 <xQueueGenericReceive+0xe4>
    3e7a:	68fb      	ldr	r3, [r7, #12]
    3e7c:	2200      	movs	r2, #0
    3e7e:	649a      	str	r2, [r3, #72]	; 0x48
    3e80:	f001 fb8a 	bl	5598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e84:	f107 0210 	add.w	r2, r7, #16
    3e88:	1d3b      	adds	r3, r7, #4
    3e8a:	4610      	mov	r0, r2
    3e8c:	4619      	mov	r1, r3
    3e8e:	f001 f853 	bl	4f38 <xTaskCheckForTimeOut>
    3e92:	4603      	mov	r3, r0
    3e94:	2b00      	cmp	r3, #0
    3e96:	d12b      	bne.n	3ef0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e98:	68f8      	ldr	r0, [r7, #12]
    3e9a:	f000 f973 	bl	4184 <prvIsQueueEmpty>
    3e9e:	4603      	mov	r3, r0
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d01f      	beq.n	3ee4 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3ea4:	68fb      	ldr	r3, [r7, #12]
    3ea6:	681b      	ldr	r3, [r3, #0]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d108      	bne.n	3ebe <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    3eac:	f001 fb5e 	bl	556c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3eb0:	68fb      	ldr	r3, [r7, #12]
    3eb2:	685b      	ldr	r3, [r3, #4]
    3eb4:	4618      	mov	r0, r3
    3eb6:	f001 fa01 	bl	52bc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    3eba:	f001 fb6d 	bl	5598 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3ebe:	68fb      	ldr	r3, [r7, #12]
    3ec0:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	4610      	mov	r0, r2
    3ec8:	4619      	mov	r1, r3
    3eca:	f000 ff8d 	bl	4de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3ece:	68f8      	ldr	r0, [r7, #12]
    3ed0:	f000 f90c 	bl	40ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3ed4:	f000 fd7e 	bl	49d4 <xTaskResumeAll>
    3ed8:	4603      	mov	r3, r0
    3eda:	2b00      	cmp	r3, #0
    3edc:	d10f      	bne.n	3efe <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3ede:	f001 fb37 	bl	5550 <vPortYieldFromISR>
    3ee2:	e00c      	b.n	3efe <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3ee4:	68f8      	ldr	r0, [r7, #12]
    3ee6:	f000 f901 	bl	40ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3eea:	f000 fd73 	bl	49d4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3eee:	e75e      	b.n	3dae <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3ef0:	68f8      	ldr	r0, [r7, #12]
    3ef2:	f000 f8fb 	bl	40ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3ef6:	f000 fd6d 	bl	49d4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3efa:	2300      	movs	r3, #0
    3efc:	e000      	b.n	3f00 <xQueueGenericReceive+0x164>
		}
	}
    3efe:	e756      	b.n	3dae <xQueueGenericReceive+0x12>
}
    3f00:	4618      	mov	r0, r3
    3f02:	3720      	adds	r7, #32
    3f04:	46bd      	mov	sp, r7
    3f06:	bd80      	pop	{r7, pc}

00003f08 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b086      	sub	sp, #24
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	60f8      	str	r0, [r7, #12]
    3f10:	60b9      	str	r1, [r7, #8]
    3f12:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f14:	2300      	movs	r3, #0
    3f16:	613b      	str	r3, [r7, #16]
    3f18:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f1c:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3f20:	68fb      	ldr	r3, [r7, #12]
    3f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f24:	2b00      	cmp	r3, #0
    3f26:	d025      	beq.n	3f74 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3f28:	68f8      	ldr	r0, [r7, #12]
    3f2a:	68b9      	ldr	r1, [r7, #8]
    3f2c:	f000 f8b8 	bl	40a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f34:	1e5a      	subs	r2, r3, #1
    3f36:	68fb      	ldr	r3, [r7, #12]
    3f38:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3f3a:	68fb      	ldr	r3, [r7, #12]
    3f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f42:	d10f      	bne.n	3f64 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f44:	68fb      	ldr	r3, [r7, #12]
    3f46:	691b      	ldr	r3, [r3, #16]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d010      	beq.n	3f6e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f4c:	68fb      	ldr	r3, [r7, #12]
    3f4e:	3310      	adds	r3, #16
    3f50:	4618      	mov	r0, r3
    3f52:	f000 ff81 	bl	4e58 <xTaskRemoveFromEventList>
    3f56:	4603      	mov	r3, r0
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d008      	beq.n	3f6e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	2201      	movs	r2, #1
    3f60:	601a      	str	r2, [r3, #0]
    3f62:	e004      	b.n	3f6e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3f64:	68fb      	ldr	r3, [r7, #12]
    3f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f68:	1c5a      	adds	r2, r3, #1
    3f6a:	68fb      	ldr	r3, [r7, #12]
    3f6c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    3f6e:	2301      	movs	r3, #1
    3f70:	617b      	str	r3, [r7, #20]
    3f72:	e001      	b.n	3f78 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3f74:	2300      	movs	r3, #0
    3f76:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3f78:	f04f 0000 	mov.w	r0, #0
    3f7c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3f80:	697b      	ldr	r3, [r7, #20]
}
    3f82:	4618      	mov	r0, r3
    3f84:	3718      	adds	r7, #24
    3f86:	46bd      	mov	sp, r7
    3f88:	bd80      	pop	{r7, pc}
    3f8a:	bf00      	nop

00003f8c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b084      	sub	sp, #16
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3f94:	f001 faea 	bl	556c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f9c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3f9e:	f001 fafb 	bl	5598 <vPortExitCritical>

	return uxReturn;
    3fa2:	68fb      	ldr	r3, [r7, #12]
}
    3fa4:	4618      	mov	r0, r3
    3fa6:	3710      	adds	r7, #16
    3fa8:	46bd      	mov	sp, r7
    3faa:	bd80      	pop	{r7, pc}

00003fac <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3fac:	b480      	push	{r7}
    3fae:	b085      	sub	sp, #20
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3fb8:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    3fba:	68fb      	ldr	r3, [r7, #12]
}
    3fbc:	4618      	mov	r0, r3
    3fbe:	3714      	adds	r7, #20
    3fc0:	46bd      	mov	sp, r7
    3fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc6:	4770      	bx	lr

00003fc8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b082      	sub	sp, #8
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	4618      	mov	r0, r3
    3fd6:	f001 fc07 	bl	57e8 <vPortFree>
	vPortFree( pxQueue );
    3fda:	6878      	ldr	r0, [r7, #4]
    3fdc:	f001 fc04 	bl	57e8 <vPortFree>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	b084      	sub	sp, #16
    3fec:	af00      	add	r7, sp, #0
    3fee:	60f8      	str	r0, [r7, #12]
    3ff0:	60b9      	str	r1, [r7, #8]
    3ff2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3ff4:	68fb      	ldr	r3, [r7, #12]
    3ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d10c      	bne.n	4016 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3ffc:	68fb      	ldr	r3, [r7, #12]
    3ffe:	681b      	ldr	r3, [r3, #0]
    4000:	2b00      	cmp	r3, #0
    4002:	d145      	bne.n	4090 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4004:	68fb      	ldr	r3, [r7, #12]
    4006:	685b      	ldr	r3, [r3, #4]
    4008:	4618      	mov	r0, r3
    400a:	f001 f9bb 	bl	5384 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	2200      	movs	r2, #0
    4012:	605a      	str	r2, [r3, #4]
    4014:	e03c      	b.n	4090 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	2b00      	cmp	r3, #0
    401a:	d11a      	bne.n	4052 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    401c:	68fb      	ldr	r3, [r7, #12]
    401e:	689a      	ldr	r2, [r3, #8]
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4024:	4610      	mov	r0, r2
    4026:	68b9      	ldr	r1, [r7, #8]
    4028:	461a      	mov	r2, r3
    402a:	f014 f883 	bl	18134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    402e:	68fb      	ldr	r3, [r7, #12]
    4030:	689a      	ldr	r2, [r3, #8]
    4032:	68fb      	ldr	r3, [r7, #12]
    4034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4036:	441a      	add	r2, r3
    4038:	68fb      	ldr	r3, [r7, #12]
    403a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    403c:	68fb      	ldr	r3, [r7, #12]
    403e:	689a      	ldr	r2, [r3, #8]
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	685b      	ldr	r3, [r3, #4]
    4044:	429a      	cmp	r2, r3
    4046:	d323      	bcc.n	4090 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4048:	68fb      	ldr	r3, [r7, #12]
    404a:	681a      	ldr	r2, [r3, #0]
    404c:	68fb      	ldr	r3, [r7, #12]
    404e:	609a      	str	r2, [r3, #8]
    4050:	e01e      	b.n	4090 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4052:	68fb      	ldr	r3, [r7, #12]
    4054:	68da      	ldr	r2, [r3, #12]
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    405a:	4610      	mov	r0, r2
    405c:	68b9      	ldr	r1, [r7, #8]
    405e:	461a      	mov	r2, r3
    4060:	f014 f868 	bl	18134 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4064:	68fb      	ldr	r3, [r7, #12]
    4066:	68da      	ldr	r2, [r3, #12]
    4068:	68fb      	ldr	r3, [r7, #12]
    406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    406c:	425b      	negs	r3, r3
    406e:	441a      	add	r2, r3
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	68da      	ldr	r2, [r3, #12]
    4078:	68fb      	ldr	r3, [r7, #12]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	429a      	cmp	r2, r3
    407e:	d207      	bcs.n	4090 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4080:	68fb      	ldr	r3, [r7, #12]
    4082:	685a      	ldr	r2, [r3, #4]
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4088:	425b      	negs	r3, r3
    408a:	441a      	add	r2, r3
    408c:	68fb      	ldr	r3, [r7, #12]
    408e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4090:	68fb      	ldr	r3, [r7, #12]
    4092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4094:	1c5a      	adds	r2, r3, #1
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	639a      	str	r2, [r3, #56]	; 0x38
}
    409a:	3710      	adds	r7, #16
    409c:	46bd      	mov	sp, r7
    409e:	bd80      	pop	{r7, pc}

000040a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    40a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	681b      	ldr	r3, [r3, #0]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d019      	beq.n	40e6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	68da      	ldr	r2, [r3, #12]
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40ba:	441a      	add	r2, r3
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	68da      	ldr	r2, [r3, #12]
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	685b      	ldr	r3, [r3, #4]
    40c8:	429a      	cmp	r2, r3
    40ca:	d303      	bcc.n	40d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	681a      	ldr	r2, [r3, #0]
    40d0:	687b      	ldr	r3, [r7, #4]
    40d2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	68da      	ldr	r2, [r3, #12]
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40dc:	6838      	ldr	r0, [r7, #0]
    40de:	4611      	mov	r1, r2
    40e0:	461a      	mov	r2, r3
    40e2:	f014 f827 	bl	18134 <memcpy>
	}
}
    40e6:	3708      	adds	r7, #8
    40e8:	46bd      	mov	sp, r7
    40ea:	bd80      	pop	{r7, pc}

000040ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    40f4:	f001 fa3a 	bl	556c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    40f8:	e014      	b.n	4124 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    40fe:	2b00      	cmp	r3, #0
    4100:	d00f      	beq.n	4122 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	3324      	adds	r3, #36	; 0x24
    4106:	4618      	mov	r0, r3
    4108:	f000 fea6 	bl	4e58 <xTaskRemoveFromEventList>
    410c:	4603      	mov	r3, r0
    410e:	2b00      	cmp	r3, #0
    4110:	d001      	beq.n	4116 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4112:	f000 ff5d 	bl	4fd0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    411a:	1e5a      	subs	r2, r3, #1
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	649a      	str	r2, [r3, #72]	; 0x48
    4120:	e000      	b.n	4124 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4122:	e003      	b.n	412c <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4128:	2b00      	cmp	r3, #0
    412a:	dce6      	bgt.n	40fa <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	f04f 32ff 	mov.w	r2, #4294967295
    4132:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4134:	f001 fa30 	bl	5598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4138:	f001 fa18 	bl	556c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    413c:	e014      	b.n	4168 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	691b      	ldr	r3, [r3, #16]
    4142:	2b00      	cmp	r3, #0
    4144:	d00f      	beq.n	4166 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	3310      	adds	r3, #16
    414a:	4618      	mov	r0, r3
    414c:	f000 fe84 	bl	4e58 <xTaskRemoveFromEventList>
    4150:	4603      	mov	r3, r0
    4152:	2b00      	cmp	r3, #0
    4154:	d001      	beq.n	415a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4156:	f000 ff3b 	bl	4fd0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    415e:	1e5a      	subs	r2, r3, #1
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	645a      	str	r2, [r3, #68]	; 0x44
    4164:	e000      	b.n	4168 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4166:	e003      	b.n	4170 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    416c:	2b00      	cmp	r3, #0
    416e:	dce6      	bgt.n	413e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	f04f 32ff 	mov.w	r2, #4294967295
    4176:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4178:	f001 fa0e 	bl	5598 <vPortExitCritical>
}
    417c:	3708      	adds	r7, #8
    417e:	46bd      	mov	sp, r7
    4180:	bd80      	pop	{r7, pc}
    4182:	bf00      	nop

00004184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4184:	b580      	push	{r7, lr}
    4186:	b084      	sub	sp, #16
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    418c:	f001 f9ee 	bl	556c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4194:	2b00      	cmp	r3, #0
    4196:	bf14      	ite	ne
    4198:	2300      	movne	r3, #0
    419a:	2301      	moveq	r3, #1
    419c:	b2db      	uxtb	r3, r3
    419e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    41a0:	f001 f9fa 	bl	5598 <vPortExitCritical>

	return xReturn;
    41a4:	68fb      	ldr	r3, [r7, #12]
}
    41a6:	4618      	mov	r0, r3
    41a8:	3710      	adds	r7, #16
    41aa:	46bd      	mov	sp, r7
    41ac:	bd80      	pop	{r7, pc}
    41ae:	bf00      	nop

000041b0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    41b0:	b480      	push	{r7}
    41b2:	b085      	sub	sp, #20
    41b4:	af00      	add	r7, sp, #0
    41b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41bc:	2b00      	cmp	r3, #0
    41be:	bf14      	ite	ne
    41c0:	2300      	movne	r3, #0
    41c2:	2301      	moveq	r3, #1
    41c4:	b2db      	uxtb	r3, r3
    41c6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    41c8:	68fb      	ldr	r3, [r7, #12]
}
    41ca:	4618      	mov	r0, r3
    41cc:	3714      	adds	r7, #20
    41ce:	46bd      	mov	sp, r7
    41d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop

000041d8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    41d8:	b580      	push	{r7, lr}
    41da:	b084      	sub	sp, #16
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    41e0:	f001 f9c4 	bl	556c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    41ec:	429a      	cmp	r2, r3
    41ee:	bf14      	ite	ne
    41f0:	2300      	movne	r3, #0
    41f2:	2301      	moveq	r3, #1
    41f4:	b2db      	uxtb	r3, r3
    41f6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    41f8:	f001 f9ce 	bl	5598 <vPortExitCritical>

	return xReturn;
    41fc:	68fb      	ldr	r3, [r7, #12]
}
    41fe:	4618      	mov	r0, r3
    4200:	3710      	adds	r7, #16
    4202:	46bd      	mov	sp, r7
    4204:	bd80      	pop	{r7, pc}
    4206:	bf00      	nop

00004208 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4208:	b480      	push	{r7}
    420a:	b085      	sub	sp, #20
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4218:	429a      	cmp	r2, r3
    421a:	bf14      	ite	ne
    421c:	2300      	movne	r3, #0
    421e:	2301      	moveq	r3, #1
    4220:	b2db      	uxtb	r3, r3
    4222:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4224:	68fb      	ldr	r3, [r7, #12]
}
    4226:	4618      	mov	r0, r3
    4228:	3714      	adds	r7, #20
    422a:	46bd      	mov	sp, r7
    422c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4230:	4770      	bx	lr
    4232:	bf00      	nop

00004234 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4234:	b580      	push	{r7, lr}
    4236:	b08a      	sub	sp, #40	; 0x28
    4238:	af02      	add	r7, sp, #8
    423a:	60f8      	str	r0, [r7, #12]
    423c:	60b9      	str	r1, [r7, #8]
    423e:	603b      	str	r3, [r7, #0]
    4240:	4613      	mov	r3, r2
    4242:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4244:	88fb      	ldrh	r3, [r7, #6]
    4246:	4618      	mov	r0, r3
    4248:	6b39      	ldr	r1, [r7, #48]	; 0x30
    424a:	f000 ffe5 	bl	5218 <prvAllocateTCBAndStack>
    424e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4250:	69bb      	ldr	r3, [r7, #24]
    4252:	2b00      	cmp	r3, #0
    4254:	f000 80a1 	beq.w	439a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4258:	69bb      	ldr	r3, [r7, #24]
    425a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    425c:	88fb      	ldrh	r3, [r7, #6]
    425e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4262:	3b01      	subs	r3, #1
    4264:	009b      	lsls	r3, r3, #2
    4266:	4413      	add	r3, r2
    4268:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    426a:	697b      	ldr	r3, [r7, #20]
    426c:	f023 0307 	bic.w	r3, r3, #7
    4270:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4272:	88fb      	ldrh	r3, [r7, #6]
    4274:	9300      	str	r3, [sp, #0]
    4276:	69b8      	ldr	r0, [r7, #24]
    4278:	68b9      	ldr	r1, [r7, #8]
    427a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    427e:	f000 febd 	bl	4ffc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4282:	6978      	ldr	r0, [r7, #20]
    4284:	68f9      	ldr	r1, [r7, #12]
    4286:	683a      	ldr	r2, [r7, #0]
    4288:	f001 f8f2 	bl	5470 <pxPortInitialiseStack>
    428c:	4602      	mov	r2, r0
    428e:	69bb      	ldr	r3, [r7, #24]
    4290:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4294:	2b00      	cmp	r3, #0
    4296:	d002      	beq.n	429e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    429a:	69ba      	ldr	r2, [r7, #24]
    429c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    429e:	f001 f965 	bl	556c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    42a2:	f241 4340 	movw	r3, #5184	; 0x1440
    42a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	1c5a      	adds	r2, r3, #1
    42ae:	f241 4340 	movw	r3, #5184	; 0x1440
    42b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    42b8:	f241 233c 	movw	r3, #4668	; 0x123c
    42bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c0:	681b      	ldr	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d10f      	bne.n	42e6 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    42c6:	f241 233c 	movw	r3, #4668	; 0x123c
    42ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ce:	69ba      	ldr	r2, [r7, #24]
    42d0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    42d2:	f241 4340 	movw	r3, #5184	; 0x1440
    42d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	2b01      	cmp	r3, #1
    42de:	d118      	bne.n	4312 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    42e0:	f000 fec2 	bl	5068 <prvInitialiseTaskLists>
    42e4:	e015      	b.n	4312 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    42e6:	f241 4350 	movw	r3, #5200	; 0x1450
    42ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ee:	681b      	ldr	r3, [r3, #0]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d10e      	bne.n	4312 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    42f4:	f241 233c 	movw	r3, #4668	; 0x123c
    42f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42fc:	681b      	ldr	r3, [r3, #0]
    42fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4300:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4302:	429a      	cmp	r2, r3
    4304:	d805      	bhi.n	4312 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4306:	f241 233c 	movw	r3, #4668	; 0x123c
    430a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430e:	69ba      	ldr	r2, [r7, #24]
    4310:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4312:	69bb      	ldr	r3, [r7, #24]
    4314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4316:	f241 4348 	movw	r3, #5192	; 0x1448
    431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	429a      	cmp	r2, r3
    4322:	d906      	bls.n	4332 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4324:	69bb      	ldr	r3, [r7, #24]
    4326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4328:	f241 4348 	movw	r3, #5192	; 0x1448
    432c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4330:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4332:	f241 4364 	movw	r3, #5220	; 0x1464
    4336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	1c5a      	adds	r2, r3, #1
    433e:	f241 4364 	movw	r3, #5220	; 0x1464
    4342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4346:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4348:	69bb      	ldr	r3, [r7, #24]
    434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    434c:	f241 434c 	movw	r3, #5196	; 0x144c
    4350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	429a      	cmp	r2, r3
    4358:	d906      	bls.n	4368 <xTaskGenericCreate+0x134>
    435a:	69bb      	ldr	r3, [r7, #24]
    435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    435e:	f241 434c 	movw	r3, #5196	; 0x144c
    4362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4366:	601a      	str	r2, [r3, #0]
    4368:	69bb      	ldr	r3, [r7, #24]
    436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    436c:	4613      	mov	r3, r2
    436e:	009b      	lsls	r3, r3, #2
    4370:	4413      	add	r3, r2
    4372:	009b      	lsls	r3, r3, #2
    4374:	f241 2240 	movw	r2, #4672	; 0x1240
    4378:	f2c2 0200 	movt	r2, #8192	; 0x2000
    437c:	441a      	add	r2, r3
    437e:	69bb      	ldr	r3, [r7, #24]
    4380:	3304      	adds	r3, #4
    4382:	4610      	mov	r0, r2
    4384:	4619      	mov	r1, r3
    4386:	f7ff fadf 	bl	3948 <vListInsertEnd>

			xReturn = pdPASS;
    438a:	2301      	movs	r3, #1
    438c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    438e:	69b8      	ldr	r0, [r7, #24]
    4390:	f012 fe8a 	bl	170a8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4394:	f001 f900 	bl	5598 <vPortExitCritical>
    4398:	e002      	b.n	43a0 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    439a:	f04f 33ff 	mov.w	r3, #4294967295
    439e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    43a0:	69fb      	ldr	r3, [r7, #28]
    43a2:	2b01      	cmp	r3, #1
    43a4:	d111      	bne.n	43ca <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    43a6:	f241 4350 	movw	r3, #5200	; 0x1450
    43aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d00a      	beq.n	43ca <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    43b4:	f241 233c 	movw	r3, #4668	; 0x123c
    43b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43c2:	429a      	cmp	r2, r3
    43c4:	d201      	bcs.n	43ca <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    43c6:	f001 f8c3 	bl	5550 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    43ca:	69fb      	ldr	r3, [r7, #28]
}
    43cc:	4618      	mov	r0, r3
    43ce:	3720      	adds	r7, #32
    43d0:	46bd      	mov	sp, r7
    43d2:	bd80      	pop	{r7, pc}

000043d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    43d4:	b580      	push	{r7, lr}
    43d6:	b084      	sub	sp, #16
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    43dc:	f001 f8c6 	bl	556c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    43e0:	f241 233c 	movw	r3, #4668	; 0x123c
    43e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43e8:	681b      	ldr	r3, [r3, #0]
    43ea:	687a      	ldr	r2, [r7, #4]
    43ec:	429a      	cmp	r2, r3
    43ee:	d101      	bne.n	43f4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    43f0:	2300      	movs	r3, #0
    43f2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d105      	bne.n	4406 <vTaskDelete+0x32>
    43fa:	f241 233c 	movw	r3, #4668	; 0x123c
    43fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	e000      	b.n	4408 <vTaskDelete+0x34>
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	3304      	adds	r3, #4
    440e:	4618      	mov	r0, r3
    4410:	f7ff fafa 	bl	3a08 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4418:	2b00      	cmp	r3, #0
    441a:	d004      	beq.n	4426 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	3318      	adds	r3, #24
    4420:	4618      	mov	r0, r3
    4422:	f7ff faf1 	bl	3a08 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4426:	68fb      	ldr	r3, [r7, #12]
    4428:	3304      	adds	r3, #4
    442a:	f241 4014 	movw	r0, #5140	; 0x1414
    442e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4432:	4619      	mov	r1, r3
    4434:	f7ff fa88 	bl	3948 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4438:	f241 4328 	movw	r3, #5160	; 0x1428
    443c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	1c5a      	adds	r2, r3, #1
    4444:	f241 4328 	movw	r3, #5160	; 0x1428
    4448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    444c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    444e:	f241 4364 	movw	r3, #5220	; 0x1464
    4452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4456:	681b      	ldr	r3, [r3, #0]
    4458:	1c5a      	adds	r2, r3, #1
    445a:	f241 4364 	movw	r3, #5220	; 0x1464
    445e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4462:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4464:	f001 f898 	bl	5598 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4468:	f241 4350 	movw	r3, #5200	; 0x1450
    446c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	2b00      	cmp	r3, #0
    4474:	d004      	beq.n	4480 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	2b00      	cmp	r3, #0
    447a:	d101      	bne.n	4480 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    447c:	f001 f868 	bl	5550 <vPortYieldFromISR>
			}
		}
	}
    4480:	3710      	adds	r7, #16
    4482:	46bd      	mov	sp, r7
    4484:	bd80      	pop	{r7, pc}
    4486:	bf00      	nop

00004488 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4488:	b580      	push	{r7, lr}
    448a:	b086      	sub	sp, #24
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
    4490:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4492:	2300      	movs	r3, #0
    4494:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4496:	f000 fa8b 	bl	49b0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	681a      	ldr	r2, [r3, #0]
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	4413      	add	r3, r2
    44a2:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	681a      	ldr	r2, [r3, #0]
    44a8:	f241 4344 	movw	r3, #5188	; 0x1444
    44ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	429a      	cmp	r2, r3
    44b4:	d90f      	bls.n	44d6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	681a      	ldr	r2, [r3, #0]
    44ba:	693b      	ldr	r3, [r7, #16]
    44bc:	429a      	cmp	r2, r3
    44be:	d919      	bls.n	44f4 <vTaskDelayUntil+0x6c>
    44c0:	f241 4344 	movw	r3, #5188	; 0x1444
    44c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	693a      	ldr	r2, [r7, #16]
    44cc:	429a      	cmp	r2, r3
    44ce:	d911      	bls.n	44f4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    44d0:	2301      	movs	r3, #1
    44d2:	617b      	str	r3, [r7, #20]
    44d4:	e00e      	b.n	44f4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	681a      	ldr	r2, [r3, #0]
    44da:	693b      	ldr	r3, [r7, #16]
    44dc:	429a      	cmp	r2, r3
    44de:	d807      	bhi.n	44f0 <vTaskDelayUntil+0x68>
    44e0:	f241 4344 	movw	r3, #5188	; 0x1444
    44e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	693a      	ldr	r2, [r7, #16]
    44ec:	429a      	cmp	r2, r3
    44ee:	d901      	bls.n	44f4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    44f0:	2301      	movs	r3, #1
    44f2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	693a      	ldr	r2, [r7, #16]
    44f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    44fa:	697b      	ldr	r3, [r7, #20]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d00b      	beq.n	4518 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4500:	f241 233c 	movw	r3, #4668	; 0x123c
    4504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4508:	681b      	ldr	r3, [r3, #0]
    450a:	3304      	adds	r3, #4
    450c:	4618      	mov	r0, r3
    450e:	f7ff fa7b 	bl	3a08 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4512:	6938      	ldr	r0, [r7, #16]
    4514:	f000 fe3c 	bl	5190 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4518:	f000 fa5c 	bl	49d4 <xTaskResumeAll>
    451c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	2b00      	cmp	r3, #0
    4522:	d101      	bne.n	4528 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4524:	f001 f814 	bl	5550 <vPortYieldFromISR>
		}
	}
    4528:	3718      	adds	r7, #24
    452a:	46bd      	mov	sp, r7
    452c:	bd80      	pop	{r7, pc}
    452e:	bf00      	nop

00004530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4530:	b580      	push	{r7, lr}
    4532:	b084      	sub	sp, #16
    4534:	af00      	add	r7, sp, #0
    4536:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4538:	2300      	movs	r3, #0
    453a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	2b00      	cmp	r3, #0
    4540:	d018      	beq.n	4574 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4542:	f000 fa35 	bl	49b0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4546:	f241 4344 	movw	r3, #5188	; 0x1444
    454a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    454e:	681a      	ldr	r2, [r3, #0]
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	4413      	add	r3, r2
    4554:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4556:	f241 233c 	movw	r3, #4668	; 0x123c
    455a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    455e:	681b      	ldr	r3, [r3, #0]
    4560:	3304      	adds	r3, #4
    4562:	4618      	mov	r0, r3
    4564:	f7ff fa50 	bl	3a08 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4568:	68b8      	ldr	r0, [r7, #8]
    456a:	f000 fe11 	bl	5190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    456e:	f000 fa31 	bl	49d4 <xTaskResumeAll>
    4572:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	2b00      	cmp	r3, #0
    4578:	d101      	bne.n	457e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    457a:	f000 ffe9 	bl	5550 <vPortYieldFromISR>
		}
	}
    457e:	3710      	adds	r7, #16
    4580:	46bd      	mov	sp, r7
    4582:	bd80      	pop	{r7, pc}

00004584 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4584:	b580      	push	{r7, lr}
    4586:	b084      	sub	sp, #16
    4588:	af00      	add	r7, sp, #0
    458a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    458c:	f000 ffee 	bl	556c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	2b00      	cmp	r3, #0
    4594:	d105      	bne.n	45a2 <uxTaskPriorityGet+0x1e>
    4596:	f241 233c 	movw	r3, #4668	; 0x123c
    459a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	e000      	b.n	45a4 <uxTaskPriorityGet+0x20>
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45aa:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    45ac:	f000 fff4 	bl	5598 <vPortExitCritical>

		return uxReturn;
    45b0:	68bb      	ldr	r3, [r7, #8]
	}
    45b2:	4618      	mov	r0, r3
    45b4:	3710      	adds	r7, #16
    45b6:	46bd      	mov	sp, r7
    45b8:	bd80      	pop	{r7, pc}
    45ba:	bf00      	nop

000045bc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    45bc:	b580      	push	{r7, lr}
    45be:	b086      	sub	sp, #24
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    45c6:	2300      	movs	r3, #0
    45c8:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    45ca:	683b      	ldr	r3, [r7, #0]
    45cc:	2b13      	cmp	r3, #19
    45ce:	d901      	bls.n	45d4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    45d0:	2313      	movs	r3, #19
    45d2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    45d4:	f000 ffca 	bl	556c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    45d8:	f241 233c 	movw	r3, #4668	; 0x123c
    45dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45e0:	681b      	ldr	r3, [r3, #0]
    45e2:	687a      	ldr	r2, [r7, #4]
    45e4:	429a      	cmp	r2, r3
    45e6:	d101      	bne.n	45ec <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    45e8:	2300      	movs	r3, #0
    45ea:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	2b00      	cmp	r3, #0
    45f0:	d105      	bne.n	45fe <vTaskPrioritySet+0x42>
    45f2:	f241 233c 	movw	r3, #4668	; 0x123c
    45f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45fa:	681b      	ldr	r3, [r3, #0]
    45fc:	e000      	b.n	4600 <vTaskPrioritySet+0x44>
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4602:	693b      	ldr	r3, [r7, #16]
    4604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4606:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4608:	68fa      	ldr	r2, [r7, #12]
    460a:	683b      	ldr	r3, [r7, #0]
    460c:	429a      	cmp	r2, r3
    460e:	d058      	beq.n	46c2 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4610:	683a      	ldr	r2, [r7, #0]
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	429a      	cmp	r2, r3
    4616:	d905      	bls.n	4624 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	2b00      	cmp	r3, #0
    461c:	d007      	beq.n	462e <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    461e:	2301      	movs	r3, #1
    4620:	617b      	str	r3, [r7, #20]
    4622:	e004      	b.n	462e <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	2b00      	cmp	r3, #0
    4628:	d101      	bne.n	462e <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    462a:	2301      	movs	r3, #1
    462c:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    462e:	693b      	ldr	r3, [r7, #16]
    4630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4632:	693b      	ldr	r3, [r7, #16]
    4634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4636:	429a      	cmp	r2, r3
    4638:	d102      	bne.n	4640 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    463a:	693b      	ldr	r3, [r7, #16]
    463c:	683a      	ldr	r2, [r7, #0]
    463e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4640:	693b      	ldr	r3, [r7, #16]
    4642:	683a      	ldr	r2, [r7, #0]
    4644:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4646:	683b      	ldr	r3, [r7, #0]
    4648:	f1c3 0214 	rsb	r2, r3, #20
    464c:	693b      	ldr	r3, [r7, #16]
    464e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4650:	693b      	ldr	r3, [r7, #16]
    4652:	6959      	ldr	r1, [r3, #20]
    4654:	68fa      	ldr	r2, [r7, #12]
    4656:	4613      	mov	r3, r2
    4658:	009b      	lsls	r3, r3, #2
    465a:	4413      	add	r3, r2
    465c:	009b      	lsls	r3, r3, #2
    465e:	f241 2240 	movw	r2, #4672	; 0x1240
    4662:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4666:	4413      	add	r3, r2
    4668:	4299      	cmp	r1, r3
    466a:	d125      	bne.n	46b8 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    466c:	693b      	ldr	r3, [r7, #16]
    466e:	3304      	adds	r3, #4
    4670:	4618      	mov	r0, r3
    4672:	f7ff f9c9 	bl	3a08 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4676:	693b      	ldr	r3, [r7, #16]
    4678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    467a:	f241 434c 	movw	r3, #5196	; 0x144c
    467e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	429a      	cmp	r2, r3
    4686:	d906      	bls.n	4696 <vTaskPrioritySet+0xda>
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    468c:	f241 434c 	movw	r3, #5196	; 0x144c
    4690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4694:	601a      	str	r2, [r3, #0]
    4696:	693b      	ldr	r3, [r7, #16]
    4698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    469a:	4613      	mov	r3, r2
    469c:	009b      	lsls	r3, r3, #2
    469e:	4413      	add	r3, r2
    46a0:	009b      	lsls	r3, r3, #2
    46a2:	f241 2240 	movw	r2, #4672	; 0x1240
    46a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    46aa:	441a      	add	r2, r3
    46ac:	693b      	ldr	r3, [r7, #16]
    46ae:	3304      	adds	r3, #4
    46b0:	4610      	mov	r0, r2
    46b2:	4619      	mov	r1, r3
    46b4:	f7ff f948 	bl	3948 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    46b8:	697b      	ldr	r3, [r7, #20]
    46ba:	2b01      	cmp	r3, #1
    46bc:	d101      	bne.n	46c2 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    46be:	f000 ff47 	bl	5550 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    46c2:	f000 ff69 	bl	5598 <vPortExitCritical>
	}
    46c6:	3718      	adds	r7, #24
    46c8:	46bd      	mov	sp, r7
    46ca:	bd80      	pop	{r7, pc}

000046cc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    46cc:	b580      	push	{r7, lr}
    46ce:	b084      	sub	sp, #16
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    46d4:	f000 ff4a 	bl	556c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    46d8:	f241 233c 	movw	r3, #4668	; 0x123c
    46dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	687a      	ldr	r2, [r7, #4]
    46e4:	429a      	cmp	r2, r3
    46e6:	d101      	bne.n	46ec <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    46e8:	2300      	movs	r3, #0
    46ea:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    46ec:	687b      	ldr	r3, [r7, #4]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d105      	bne.n	46fe <vTaskSuspend+0x32>
    46f2:	f241 233c 	movw	r3, #4668	; 0x123c
    46f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	e000      	b.n	4700 <vTaskSuspend+0x34>
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4702:	68fb      	ldr	r3, [r7, #12]
    4704:	3304      	adds	r3, #4
    4706:	4618      	mov	r0, r3
    4708:	f7ff f97e 	bl	3a08 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    470c:	68fb      	ldr	r3, [r7, #12]
    470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4710:	2b00      	cmp	r3, #0
    4712:	d004      	beq.n	471e <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	3318      	adds	r3, #24
    4718:	4618      	mov	r0, r3
    471a:	f7ff f975 	bl	3a08 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	3304      	adds	r3, #4
    4722:	f241 402c 	movw	r0, #5164	; 0x142c
    4726:	f2c2 0000 	movt	r0, #8192	; 0x2000
    472a:	4619      	mov	r1, r3
    472c:	f7ff f90c 	bl	3948 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4730:	f000 ff32 	bl	5598 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4734:	687b      	ldr	r3, [r7, #4]
    4736:	2b00      	cmp	r3, #0
    4738:	d11e      	bne.n	4778 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    473a:	f241 4350 	movw	r3, #5200	; 0x1450
    473e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	2b00      	cmp	r3, #0
    4746:	d002      	beq.n	474e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4748:	f000 ff02 	bl	5550 <vPortYieldFromISR>
    474c:	e014      	b.n	4778 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    474e:	f241 432c 	movw	r3, #5164	; 0x142c
    4752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4756:	681a      	ldr	r2, [r3, #0]
    4758:	f241 4340 	movw	r3, #5184	; 0x1440
    475c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	429a      	cmp	r2, r3
    4764:	d106      	bne.n	4774 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4766:	f241 233c 	movw	r3, #4668	; 0x123c
    476a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    476e:	2200      	movs	r2, #0
    4770:	601a      	str	r2, [r3, #0]
    4772:	e001      	b.n	4778 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4774:	f000 fadc 	bl	4d30 <vTaskSwitchContext>
				}
			}
		}
	}
    4778:	3710      	adds	r7, #16
    477a:	46bd      	mov	sp, r7
    477c:	bd80      	pop	{r7, pc}
    477e:	bf00      	nop

00004780 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4780:	b480      	push	{r7}
    4782:	b085      	sub	sp, #20
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4788:	2300      	movs	r3, #0
    478a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4790:	68bb      	ldr	r3, [r7, #8]
    4792:	695a      	ldr	r2, [r3, #20]
    4794:	f241 432c 	movw	r3, #5164	; 0x142c
    4798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479c:	429a      	cmp	r2, r3
    479e:	d10d      	bne.n	47bc <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    47a0:	68bb      	ldr	r3, [r7, #8]
    47a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    47a4:	f241 4300 	movw	r3, #5120	; 0x1400
    47a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ac:	429a      	cmp	r2, r3
    47ae:	d005      	beq.n	47bc <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    47b0:	68bb      	ldr	r3, [r7, #8]
    47b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47b4:	2b00      	cmp	r3, #0
    47b6:	d101      	bne.n	47bc <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    47b8:	2301      	movs	r3, #1
    47ba:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    47bc:	68fb      	ldr	r3, [r7, #12]
	}
    47be:	4618      	mov	r0, r3
    47c0:	3714      	adds	r7, #20
    47c2:	46bd      	mov	sp, r7
    47c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop

000047cc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    47cc:	b580      	push	{r7, lr}
    47ce:	b084      	sub	sp, #16
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	2b00      	cmp	r3, #0
    47dc:	d043      	beq.n	4866 <vTaskResume+0x9a>
    47de:	f241 233c 	movw	r3, #4668	; 0x123c
    47e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	68fa      	ldr	r2, [r7, #12]
    47ea:	429a      	cmp	r2, r3
    47ec:	d03b      	beq.n	4866 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    47ee:	f000 febd 	bl	556c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    47f2:	68f8      	ldr	r0, [r7, #12]
    47f4:	f7ff ffc4 	bl	4780 <xTaskIsTaskSuspended>
    47f8:	4603      	mov	r3, r0
    47fa:	2b01      	cmp	r3, #1
    47fc:	d131      	bne.n	4862 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	3304      	adds	r3, #4
    4802:	4618      	mov	r0, r3
    4804:	f7ff f900 	bl	3a08 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    480c:	f241 434c 	movw	r3, #5196	; 0x144c
    4810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4814:	681b      	ldr	r3, [r3, #0]
    4816:	429a      	cmp	r2, r3
    4818:	d906      	bls.n	4828 <vTaskResume+0x5c>
    481a:	68fb      	ldr	r3, [r7, #12]
    481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    481e:	f241 434c 	movw	r3, #5196	; 0x144c
    4822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4826:	601a      	str	r2, [r3, #0]
    4828:	68fb      	ldr	r3, [r7, #12]
    482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    482c:	4613      	mov	r3, r2
    482e:	009b      	lsls	r3, r3, #2
    4830:	4413      	add	r3, r2
    4832:	009b      	lsls	r3, r3, #2
    4834:	f241 2240 	movw	r2, #4672	; 0x1240
    4838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    483c:	441a      	add	r2, r3
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	3304      	adds	r3, #4
    4842:	4610      	mov	r0, r2
    4844:	4619      	mov	r1, r3
    4846:	f7ff f87f 	bl	3948 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    484a:	68fb      	ldr	r3, [r7, #12]
    484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    484e:	f241 233c 	movw	r3, #4668	; 0x123c
    4852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4856:	681b      	ldr	r3, [r3, #0]
    4858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    485a:	429a      	cmp	r2, r3
    485c:	d301      	bcc.n	4862 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    485e:	f000 fe77 	bl	5550 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4862:	f000 fe99 	bl	5598 <vPortExitCritical>
		}
	}
    4866:	3710      	adds	r7, #16
    4868:	46bd      	mov	sp, r7
    486a:	bd80      	pop	{r7, pc}

0000486c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    486c:	b580      	push	{r7, lr}
    486e:	b086      	sub	sp, #24
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4874:	2300      	movs	r3, #0
    4876:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    487c:	2300      	movs	r3, #0
    487e:	60fb      	str	r3, [r7, #12]
    4880:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4884:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4888:	6938      	ldr	r0, [r7, #16]
    488a:	f7ff ff79 	bl	4780 <xTaskIsTaskSuspended>
    488e:	4603      	mov	r3, r0
    4890:	2b01      	cmp	r3, #1
    4892:	d144      	bne.n	491e <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4894:	f241 4354 	movw	r3, #5204	; 0x1454
    4898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    489c:	681b      	ldr	r3, [r3, #0]
    489e:	2b00      	cmp	r3, #0
    48a0:	d134      	bne.n	490c <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    48a2:	693b      	ldr	r3, [r7, #16]
    48a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48a6:	f241 233c 	movw	r3, #4668	; 0x123c
    48aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48b2:	429a      	cmp	r2, r3
    48b4:	bf34      	ite	cc
    48b6:	2300      	movcc	r3, #0
    48b8:	2301      	movcs	r3, #1
    48ba:	b2db      	uxtb	r3, r3
    48bc:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    48be:	693b      	ldr	r3, [r7, #16]
    48c0:	3304      	adds	r3, #4
    48c2:	4618      	mov	r0, r3
    48c4:	f7ff f8a0 	bl	3a08 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    48c8:	693b      	ldr	r3, [r7, #16]
    48ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48cc:	f241 434c 	movw	r3, #5196	; 0x144c
    48d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d4:	681b      	ldr	r3, [r3, #0]
    48d6:	429a      	cmp	r2, r3
    48d8:	d906      	bls.n	48e8 <xTaskResumeFromISR+0x7c>
    48da:	693b      	ldr	r3, [r7, #16]
    48dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48de:	f241 434c 	movw	r3, #5196	; 0x144c
    48e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e6:	601a      	str	r2, [r3, #0]
    48e8:	693b      	ldr	r3, [r7, #16]
    48ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48ec:	4613      	mov	r3, r2
    48ee:	009b      	lsls	r3, r3, #2
    48f0:	4413      	add	r3, r2
    48f2:	009b      	lsls	r3, r3, #2
    48f4:	f241 2240 	movw	r2, #4672	; 0x1240
    48f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48fc:	441a      	add	r2, r3
    48fe:	693b      	ldr	r3, [r7, #16]
    4900:	3304      	adds	r3, #4
    4902:	4610      	mov	r0, r2
    4904:	4619      	mov	r1, r3
    4906:	f7ff f81f 	bl	3948 <vListInsertEnd>
    490a:	e008      	b.n	491e <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    490c:	693b      	ldr	r3, [r7, #16]
    490e:	3318      	adds	r3, #24
    4910:	f241 4000 	movw	r0, #5120	; 0x1400
    4914:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4918:	4619      	mov	r1, r3
    491a:	f7ff f815 	bl	3948 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    491e:	f04f 0000 	mov.w	r0, #0
    4922:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4926:	697b      	ldr	r3, [r7, #20]
	}
    4928:	4618      	mov	r0, r3
    492a:	3718      	adds	r7, #24
    492c:	46bd      	mov	sp, r7
    492e:	bd80      	pop	{r7, pc}

00004930 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4930:	b580      	push	{r7, lr}
    4932:	b086      	sub	sp, #24
    4934:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4936:	2300      	movs	r3, #0
    4938:	9300      	str	r3, [sp, #0]
    493a:	2300      	movs	r3, #0
    493c:	9301      	str	r3, [sp, #4]
    493e:	2300      	movs	r3, #0
    4940:	9302      	str	r3, [sp, #8]
    4942:	2300      	movs	r3, #0
    4944:	9303      	str	r3, [sp, #12]
    4946:	f644 70e9 	movw	r0, #20457	; 0x4fe9
    494a:	f2c0 0000 	movt	r0, #0
    494e:	f248 31bc 	movw	r1, #33724	; 0x83bc
    4952:	f2c0 0101 	movt	r1, #1
    4956:	2280      	movs	r2, #128	; 0x80
    4958:	2300      	movs	r3, #0
    495a:	f7ff fc6b 	bl	4234 <xTaskGenericCreate>
    495e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	2b01      	cmp	r3, #1
    4964:	d111      	bne.n	498a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4966:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    496a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    496e:	f241 4350 	movw	r3, #5200	; 0x1450
    4972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4976:	2201      	movs	r2, #1
    4978:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    497a:	f241 4344 	movw	r3, #5188	; 0x1444
    497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4982:	2200      	movs	r2, #0
    4984:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4986:	f000 fdb5 	bl	54f4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    498a:	3708      	adds	r7, #8
    498c:	46bd      	mov	sp, r7
    498e:	bd80      	pop	{r7, pc}

00004990 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4990:	b580      	push	{r7, lr}
    4992:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4994:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4998:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    499c:	f241 4350 	movw	r3, #5200	; 0x1450
    49a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a4:	2200      	movs	r2, #0
    49a6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    49a8:	f000 fdcc 	bl	5544 <vPortEndScheduler>
}
    49ac:	bd80      	pop	{r7, pc}
    49ae:	bf00      	nop

000049b0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    49b0:	b480      	push	{r7}
    49b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    49b4:	f241 4354 	movw	r3, #5204	; 0x1454
    49b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	1c5a      	adds	r2, r3, #1
    49c0:	f241 4354 	movw	r3, #5204	; 0x1454
    49c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c8:	601a      	str	r2, [r3, #0]
}
    49ca:	46bd      	mov	sp, r7
    49cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d0:	4770      	bx	lr
    49d2:	bf00      	nop

000049d4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    49d4:	b590      	push	{r4, r7, lr}
    49d6:	b083      	sub	sp, #12
    49d8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    49da:	2300      	movs	r3, #0
    49dc:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    49de:	f000 fdc5 	bl	556c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    49e2:	f241 4354 	movw	r3, #5204	; 0x1454
    49e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	1e5a      	subs	r2, r3, #1
    49ee:	f241 4354 	movw	r3, #5204	; 0x1454
    49f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    49f8:	f241 4354 	movw	r3, #5204	; 0x1454
    49fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	2b00      	cmp	r3, #0
    4a04:	d177      	bne.n	4af6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4a06:	f241 4340 	movw	r3, #5184	; 0x1440
    4a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d070      	beq.n	4af6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4a14:	2300      	movs	r3, #0
    4a16:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4a18:	e036      	b.n	4a88 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4a1a:	f241 4300 	movw	r3, #5120	; 0x1400
    4a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a22:	68db      	ldr	r3, [r3, #12]
    4a24:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4a26:	f104 0318 	add.w	r3, r4, #24
    4a2a:	4618      	mov	r0, r3
    4a2c:	f7fe ffec 	bl	3a08 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4a30:	1d23      	adds	r3, r4, #4
    4a32:	4618      	mov	r0, r3
    4a34:	f7fe ffe8 	bl	3a08 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4a38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a3a:	f241 434c 	movw	r3, #5196	; 0x144c
    4a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	429a      	cmp	r2, r3
    4a46:	d905      	bls.n	4a54 <xTaskResumeAll+0x80>
    4a48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a4a:	f241 434c 	movw	r3, #5196	; 0x144c
    4a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a52:	601a      	str	r2, [r3, #0]
    4a54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a56:	4613      	mov	r3, r2
    4a58:	009b      	lsls	r3, r3, #2
    4a5a:	4413      	add	r3, r2
    4a5c:	009b      	lsls	r3, r3, #2
    4a5e:	f241 2240 	movw	r2, #4672	; 0x1240
    4a62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a66:	441a      	add	r2, r3
    4a68:	1d23      	adds	r3, r4, #4
    4a6a:	4610      	mov	r0, r2
    4a6c:	4619      	mov	r1, r3
    4a6e:	f7fe ff6b 	bl	3948 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4a72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a74:	f241 233c 	movw	r3, #4668	; 0x123c
    4a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a80:	429a      	cmp	r2, r3
    4a82:	d301      	bcc.n	4a88 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4a84:	2301      	movs	r3, #1
    4a86:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4a88:	f241 4300 	movw	r3, #5120	; 0x1400
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d1c1      	bne.n	4a1a <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4a96:	f241 4358 	movw	r3, #5208	; 0x1458
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d014      	beq.n	4ace <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4aa4:	e00c      	b.n	4ac0 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4aa6:	f000 f865 	bl	4b74 <vTaskIncrementTick>
						--uxMissedTicks;
    4aaa:	f241 4358 	movw	r3, #5208	; 0x1458
    4aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab2:	681b      	ldr	r3, [r3, #0]
    4ab4:	1e5a      	subs	r2, r3, #1
    4ab6:	f241 4358 	movw	r3, #5208	; 0x1458
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4ac0:	f241 4358 	movw	r3, #5208	; 0x1458
    4ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	2b00      	cmp	r3, #0
    4acc:	d1eb      	bne.n	4aa6 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4ace:	683b      	ldr	r3, [r7, #0]
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d006      	beq.n	4ae2 <xTaskResumeAll+0x10e>
    4ad4:	f241 435c 	movw	r3, #5212	; 0x145c
    4ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	2b01      	cmp	r3, #1
    4ae0:	d109      	bne.n	4af6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4ae2:	2301      	movs	r3, #1
    4ae4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4ae6:	f241 435c 	movw	r3, #5212	; 0x145c
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	2200      	movs	r2, #0
    4af0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4af2:	f000 fd2d 	bl	5550 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4af6:	f000 fd4f 	bl	5598 <vPortExitCritical>

	return xAlreadyYielded;
    4afa:	687b      	ldr	r3, [r7, #4]
}
    4afc:	4618      	mov	r0, r3
    4afe:	370c      	adds	r7, #12
    4b00:	46bd      	mov	sp, r7
    4b02:	bd90      	pop	{r4, r7, pc}

00004b04 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4b0a:	f000 fd2f 	bl	556c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4b0e:	f241 4344 	movw	r3, #5188	; 0x1444
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4b1a:	f000 fd3d 	bl	5598 <vPortExitCritical>

	return xTicks;
    4b1e:	687b      	ldr	r3, [r7, #4]
}
    4b20:	4618      	mov	r0, r3
    4b22:	3708      	adds	r7, #8
    4b24:	46bd      	mov	sp, r7
    4b26:	bd80      	pop	{r7, pc}

00004b28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4b28:	b480      	push	{r7}
    4b2a:	b083      	sub	sp, #12
    4b2c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b2e:	2300      	movs	r3, #0
    4b30:	607b      	str	r3, [r7, #4]
    4b32:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b36:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4b3a:	f241 4344 	movw	r3, #5188	; 0x1444
    4b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4b46:	f04f 0000 	mov.w	r0, #0
    4b4a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4b4e:	683b      	ldr	r3, [r7, #0]
}
    4b50:	4618      	mov	r0, r3
    4b52:	370c      	adds	r7, #12
    4b54:	46bd      	mov	sp, r7
    4b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5a:	4770      	bx	lr

00004b5c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4b5c:	b480      	push	{r7}
    4b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4b60:	f241 4340 	movw	r3, #5184	; 0x1440
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	681b      	ldr	r3, [r3, #0]
}
    4b6a:	4618      	mov	r0, r3
    4b6c:	46bd      	mov	sp, r7
    4b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b72:	4770      	bx	lr

00004b74 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4b74:	b580      	push	{r7, lr}
    4b76:	b084      	sub	sp, #16
    4b78:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4b7a:	f241 4354 	movw	r3, #5204	; 0x1454
    4b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	2b00      	cmp	r3, #0
    4b86:	f040 80b9 	bne.w	4cfc <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4b8a:	f241 4344 	movw	r3, #5188	; 0x1444
    4b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	1c5a      	adds	r2, r3, #1
    4b96:	f241 4344 	movw	r3, #5188	; 0x1444
    4b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4ba0:	f241 4344 	movw	r3, #5188	; 0x1444
    4ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba8:	681b      	ldr	r3, [r3, #0]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d13f      	bne.n	4c2e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4bae:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb6:	681b      	ldr	r3, [r3, #0]
    4bb8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4bba:	f241 33fc 	movw	r3, #5116	; 0x13fc
    4bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc2:	681a      	ldr	r2, [r3, #0]
    4bc4:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4bce:	f241 33fc 	movw	r3, #5116	; 0x13fc
    4bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd6:	68fa      	ldr	r2, [r7, #12]
    4bd8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4bda:	f241 4360 	movw	r3, #5216	; 0x1460
    4bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	1c5a      	adds	r2, r3, #1
    4be6:	f241 4360 	movw	r3, #5216	; 0x1460
    4bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bee:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4bf0:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf8:	681b      	ldr	r3, [r3, #0]
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d107      	bne.n	4c10 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4c00:	f640 2310 	movw	r3, #2576	; 0xa10
    4c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c08:	f04f 32ff 	mov.w	r2, #4294967295
    4c0c:	601a      	str	r2, [r3, #0]
    4c0e:	e00e      	b.n	4c2e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4c10:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c18:	681b      	ldr	r3, [r3, #0]
    4c1a:	68db      	ldr	r3, [r3, #12]
    4c1c:	68db      	ldr	r3, [r3, #12]
    4c1e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4c20:	68bb      	ldr	r3, [r7, #8]
    4c22:	685a      	ldr	r2, [r3, #4]
    4c24:	f640 2310 	movw	r3, #2576	; 0xa10
    4c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c2c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4c2e:	f241 4344 	movw	r3, #5188	; 0x1444
    4c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c36:	681a      	ldr	r2, [r3, #0]
    4c38:	f640 2310 	movw	r3, #2576	; 0xa10
    4c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	429a      	cmp	r2, r3
    4c44:	d359      	bcc.n	4cfa <vTaskIncrementTick+0x186>
    4c46:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d107      	bne.n	4c66 <vTaskIncrementTick+0xf2>
    4c56:	f640 2310 	movw	r3, #2576	; 0xa10
    4c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5e:	f04f 32ff 	mov.w	r2, #4294967295
    4c62:	601a      	str	r2, [r3, #0]
    4c64:	e049      	b.n	4cfa <vTaskIncrementTick+0x186>
    4c66:	f241 33f8 	movw	r3, #5112	; 0x13f8
    4c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6e:	681b      	ldr	r3, [r3, #0]
    4c70:	68db      	ldr	r3, [r3, #12]
    4c72:	68db      	ldr	r3, [r3, #12]
    4c74:	60bb      	str	r3, [r7, #8]
    4c76:	68bb      	ldr	r3, [r7, #8]
    4c78:	685b      	ldr	r3, [r3, #4]
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	f241 4344 	movw	r3, #5188	; 0x1444
    4c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c84:	681a      	ldr	r2, [r3, #0]
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	429a      	cmp	r2, r3
    4c8a:	d206      	bcs.n	4c9a <vTaskIncrementTick+0x126>
    4c8c:	f640 2310 	movw	r3, #2576	; 0xa10
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	687a      	ldr	r2, [r7, #4]
    4c96:	601a      	str	r2, [r3, #0]
    4c98:	e02f      	b.n	4cfa <vTaskIncrementTick+0x186>
    4c9a:	68bb      	ldr	r3, [r7, #8]
    4c9c:	3304      	adds	r3, #4
    4c9e:	4618      	mov	r0, r3
    4ca0:	f7fe feb2 	bl	3a08 <vListRemove>
    4ca4:	68bb      	ldr	r3, [r7, #8]
    4ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d004      	beq.n	4cb6 <vTaskIncrementTick+0x142>
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	3318      	adds	r3, #24
    4cb0:	4618      	mov	r0, r3
    4cb2:	f7fe fea9 	bl	3a08 <vListRemove>
    4cb6:	68bb      	ldr	r3, [r7, #8]
    4cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cba:	f241 434c 	movw	r3, #5196	; 0x144c
    4cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc2:	681b      	ldr	r3, [r3, #0]
    4cc4:	429a      	cmp	r2, r3
    4cc6:	d906      	bls.n	4cd6 <vTaskIncrementTick+0x162>
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ccc:	f241 434c 	movw	r3, #5196	; 0x144c
    4cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd4:	601a      	str	r2, [r3, #0]
    4cd6:	68bb      	ldr	r3, [r7, #8]
    4cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cda:	4613      	mov	r3, r2
    4cdc:	009b      	lsls	r3, r3, #2
    4cde:	4413      	add	r3, r2
    4ce0:	009b      	lsls	r3, r3, #2
    4ce2:	f241 2240 	movw	r2, #4672	; 0x1240
    4ce6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4cea:	441a      	add	r2, r3
    4cec:	68bb      	ldr	r3, [r7, #8]
    4cee:	3304      	adds	r3, #4
    4cf0:	4610      	mov	r0, r2
    4cf2:	4619      	mov	r1, r3
    4cf4:	f7fe fe28 	bl	3948 <vListInsertEnd>
    4cf8:	e7a5      	b.n	4c46 <vTaskIncrementTick+0xd2>
    4cfa:	e00c      	b.n	4d16 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4cfc:	f241 4358 	movw	r3, #5208	; 0x1458
    4d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	1c5a      	adds	r2, r3, #1
    4d08:	f241 4358 	movw	r3, #5208	; 0x1458
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4d12:	f012 f9db 	bl	170cc <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4d16:	f241 4358 	movw	r3, #5208	; 0x1458
    4d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d101      	bne.n	4d28 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    4d24:	f012 f9d2 	bl	170cc <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4d28:	3710      	adds	r7, #16
    4d2a:	46bd      	mov	sp, r7
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	bf00      	nop

00004d30 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b082      	sub	sp, #8
    4d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4d36:	f241 4354 	movw	r3, #5204	; 0x1454
    4d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d006      	beq.n	4d52 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4d44:	f241 435c 	movw	r3, #5212	; 0x145c
    4d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4c:	2201      	movs	r2, #1
    4d4e:	601a      	str	r2, [r3, #0]
    4d50:	e047      	b.n	4de2 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    4d52:	f012 f9b5 	bl	170c0 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4d56:	e00a      	b.n	4d6e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4d58:	f241 434c 	movw	r3, #5196	; 0x144c
    4d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d60:	681b      	ldr	r3, [r3, #0]
    4d62:	1e5a      	subs	r2, r3, #1
    4d64:	f241 434c 	movw	r3, #5196	; 0x144c
    4d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4d6e:	f241 434c 	movw	r3, #5196	; 0x144c
    4d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d76:	6819      	ldr	r1, [r3, #0]
    4d78:	f241 2240 	movw	r2, #4672	; 0x1240
    4d7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d80:	460b      	mov	r3, r1
    4d82:	009b      	lsls	r3, r3, #2
    4d84:	440b      	add	r3, r1
    4d86:	009b      	lsls	r3, r3, #2
    4d88:	4413      	add	r3, r2
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d0e3      	beq.n	4d58 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4d90:	f241 434c 	movw	r3, #5196	; 0x144c
    4d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d98:	681a      	ldr	r2, [r3, #0]
    4d9a:	4613      	mov	r3, r2
    4d9c:	009b      	lsls	r3, r3, #2
    4d9e:	4413      	add	r3, r2
    4da0:	009b      	lsls	r3, r3, #2
    4da2:	f241 2240 	movw	r2, #4672	; 0x1240
    4da6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4daa:	4413      	add	r3, r2
    4dac:	607b      	str	r3, [r7, #4]
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	685b      	ldr	r3, [r3, #4]
    4db2:	685a      	ldr	r2, [r3, #4]
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	605a      	str	r2, [r3, #4]
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	685a      	ldr	r2, [r3, #4]
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	3308      	adds	r3, #8
    4dc0:	429a      	cmp	r2, r3
    4dc2:	d104      	bne.n	4dce <vTaskSwitchContext+0x9e>
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	685b      	ldr	r3, [r3, #4]
    4dc8:	685a      	ldr	r2, [r3, #4]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	605a      	str	r2, [r3, #4]
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	685b      	ldr	r3, [r3, #4]
    4dd2:	68da      	ldr	r2, [r3, #12]
    4dd4:	f241 233c 	movw	r3, #4668	; 0x123c
    4dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ddc:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    4dde:	f012 f969 	bl	170b4 <myTraceSwitchedIn>
	}
}
    4de2:	3708      	adds	r7, #8
    4de4:	46bd      	mov	sp, r7
    4de6:	bd80      	pop	{r7, pc}

00004de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b084      	sub	sp, #16
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
    4df0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4df2:	f241 233c 	movw	r3, #4668	; 0x123c
    4df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dfa:	681b      	ldr	r3, [r3, #0]
    4dfc:	3318      	adds	r3, #24
    4dfe:	6878      	ldr	r0, [r7, #4]
    4e00:	4619      	mov	r1, r3
    4e02:	f7fe fdc9 	bl	3998 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4e06:	f241 233c 	movw	r3, #4668	; 0x123c
    4e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0e:	681b      	ldr	r3, [r3, #0]
    4e10:	3304      	adds	r3, #4
    4e12:	4618      	mov	r0, r3
    4e14:	f7fe fdf8 	bl	3a08 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4e18:	683b      	ldr	r3, [r7, #0]
    4e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e1e:	d10d      	bne.n	4e3c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4e20:	f241 233c 	movw	r3, #4668	; 0x123c
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	3304      	adds	r3, #4
    4e2c:	f241 402c 	movw	r0, #5164	; 0x142c
    4e30:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4e34:	4619      	mov	r1, r3
    4e36:	f7fe fd87 	bl	3948 <vListInsertEnd>
    4e3a:	e00a      	b.n	4e52 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4e3c:	f241 4344 	movw	r3, #5188	; 0x1444
    4e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e44:	681a      	ldr	r2, [r3, #0]
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	4413      	add	r3, r2
    4e4a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4e4c:	68f8      	ldr	r0, [r7, #12]
    4e4e:	f000 f99f 	bl	5190 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    4e52:	3710      	adds	r7, #16
    4e54:	46bd      	mov	sp, r7
    4e56:	bd80      	pop	{r7, pc}

00004e58 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b084      	sub	sp, #16
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	68db      	ldr	r3, [r3, #12]
    4e64:	68db      	ldr	r3, [r3, #12]
    4e66:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	3318      	adds	r3, #24
    4e6c:	4618      	mov	r0, r3
    4e6e:	f7fe fdcb 	bl	3a08 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e72:	f241 4354 	movw	r3, #5204	; 0x1454
    4e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d126      	bne.n	4ece <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	3304      	adds	r3, #4
    4e84:	4618      	mov	r0, r3
    4e86:	f7fe fdbf 	bl	3a08 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4e8a:	68bb      	ldr	r3, [r7, #8]
    4e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e8e:	f241 434c 	movw	r3, #5196	; 0x144c
    4e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e96:	681b      	ldr	r3, [r3, #0]
    4e98:	429a      	cmp	r2, r3
    4e9a:	d906      	bls.n	4eaa <xTaskRemoveFromEventList+0x52>
    4e9c:	68bb      	ldr	r3, [r7, #8]
    4e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ea0:	f241 434c 	movw	r3, #5196	; 0x144c
    4ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea8:	601a      	str	r2, [r3, #0]
    4eaa:	68bb      	ldr	r3, [r7, #8]
    4eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eae:	4613      	mov	r3, r2
    4eb0:	009b      	lsls	r3, r3, #2
    4eb2:	4413      	add	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	f241 2240 	movw	r2, #4672	; 0x1240
    4eba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ebe:	441a      	add	r2, r3
    4ec0:	68bb      	ldr	r3, [r7, #8]
    4ec2:	3304      	adds	r3, #4
    4ec4:	4610      	mov	r0, r2
    4ec6:	4619      	mov	r1, r3
    4ec8:	f7fe fd3e 	bl	3948 <vListInsertEnd>
    4ecc:	e008      	b.n	4ee0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4ece:	68bb      	ldr	r3, [r7, #8]
    4ed0:	3318      	adds	r3, #24
    4ed2:	f241 4000 	movw	r0, #5120	; 0x1400
    4ed6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4eda:	4619      	mov	r1, r3
    4edc:	f7fe fd34 	bl	3948 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4ee0:	68bb      	ldr	r3, [r7, #8]
    4ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ee4:	f241 233c 	movw	r3, #4668	; 0x123c
    4ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ef0:	429a      	cmp	r2, r3
    4ef2:	d302      	bcc.n	4efa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4ef4:	2301      	movs	r3, #1
    4ef6:	60fb      	str	r3, [r7, #12]
    4ef8:	e001      	b.n	4efe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    4efa:	2300      	movs	r3, #0
    4efc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4efe:	68fb      	ldr	r3, [r7, #12]
}
    4f00:	4618      	mov	r0, r3
    4f02:	3710      	adds	r7, #16
    4f04:	46bd      	mov	sp, r7
    4f06:	bd80      	pop	{r7, pc}

00004f08 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4f08:	b480      	push	{r7}
    4f0a:	b083      	sub	sp, #12
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4f10:	f241 4360 	movw	r3, #5216	; 0x1460
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	681a      	ldr	r2, [r3, #0]
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4f1e:	f241 4344 	movw	r3, #5188	; 0x1444
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	681a      	ldr	r2, [r3, #0]
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	605a      	str	r2, [r3, #4]
}
    4f2c:	370c      	adds	r7, #12
    4f2e:	46bd      	mov	sp, r7
    4f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f34:	4770      	bx	lr
    4f36:	bf00      	nop

00004f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	b084      	sub	sp, #16
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	6078      	str	r0, [r7, #4]
    4f40:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4f42:	f000 fb13 	bl	556c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4f46:	683b      	ldr	r3, [r7, #0]
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f4e:	d102      	bne.n	4f56 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4f50:	2300      	movs	r3, #0
    4f52:	60fb      	str	r3, [r7, #12]
    4f54:	e035      	b.n	4fc2 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4f56:	687b      	ldr	r3, [r7, #4]
    4f58:	681a      	ldr	r2, [r3, #0]
    4f5a:	f241 4360 	movw	r3, #5216	; 0x1460
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	429a      	cmp	r2, r3
    4f66:	d00b      	beq.n	4f80 <xTaskCheckForTimeOut+0x48>
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	685a      	ldr	r2, [r3, #4]
    4f6c:	f241 4344 	movw	r3, #5188	; 0x1444
    4f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f74:	681b      	ldr	r3, [r3, #0]
    4f76:	429a      	cmp	r2, r3
    4f78:	d802      	bhi.n	4f80 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4f7a:	2301      	movs	r3, #1
    4f7c:	60fb      	str	r3, [r7, #12]
    4f7e:	e020      	b.n	4fc2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4f80:	f241 4344 	movw	r3, #5188	; 0x1444
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	681a      	ldr	r2, [r3, #0]
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	685b      	ldr	r3, [r3, #4]
    4f8e:	1ad2      	subs	r2, r2, r3
    4f90:	683b      	ldr	r3, [r7, #0]
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	429a      	cmp	r2, r3
    4f96:	d212      	bcs.n	4fbe <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4f98:	683b      	ldr	r3, [r7, #0]
    4f9a:	681a      	ldr	r2, [r3, #0]
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	6859      	ldr	r1, [r3, #4]
    4fa0:	f241 4344 	movw	r3, #5188	; 0x1444
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	1acb      	subs	r3, r1, r3
    4fac:	441a      	add	r2, r3
    4fae:	683b      	ldr	r3, [r7, #0]
    4fb0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4fb2:	6878      	ldr	r0, [r7, #4]
    4fb4:	f7ff ffa8 	bl	4f08 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4fb8:	2300      	movs	r3, #0
    4fba:	60fb      	str	r3, [r7, #12]
    4fbc:	e001      	b.n	4fc2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4fbe:	2301      	movs	r3, #1
    4fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4fc2:	f000 fae9 	bl	5598 <vPortExitCritical>

	return xReturn;
    4fc6:	68fb      	ldr	r3, [r7, #12]
}
    4fc8:	4618      	mov	r0, r3
    4fca:	3710      	adds	r7, #16
    4fcc:	46bd      	mov	sp, r7
    4fce:	bd80      	pop	{r7, pc}

00004fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4fd0:	b480      	push	{r7}
    4fd2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4fd4:	f241 435c 	movw	r3, #5212	; 0x145c
    4fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fdc:	2201      	movs	r2, #1
    4fde:	601a      	str	r2, [r3, #0]
}
    4fe0:	46bd      	mov	sp, r7
    4fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe6:	4770      	bx	lr

00004fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4fe8:	b580      	push	{r7, lr}
    4fea:	b082      	sub	sp, #8
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4ff0:	f000 f886 	bl	5100 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4ff4:	f000 faac 	bl	5550 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4ff8:	e7fa      	b.n	4ff0 <prvIdleTask+0x8>
    4ffa:	bf00      	nop

00004ffc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b084      	sub	sp, #16
    5000:	af00      	add	r7, sp, #0
    5002:	60f8      	str	r0, [r7, #12]
    5004:	60b9      	str	r1, [r7, #8]
    5006:	607a      	str	r2, [r7, #4]
    5008:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    500a:	68fb      	ldr	r3, [r7, #12]
    500c:	3334      	adds	r3, #52	; 0x34
    500e:	4618      	mov	r0, r3
    5010:	68b9      	ldr	r1, [r7, #8]
    5012:	2210      	movs	r2, #16
    5014:	f013 f932 	bl	1827c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5018:	68fb      	ldr	r3, [r7, #12]
    501a:	2200      	movs	r2, #0
    501c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	2b13      	cmp	r3, #19
    5024:	d901      	bls.n	502a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    5026:	2313      	movs	r3, #19
    5028:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    502a:	68fb      	ldr	r3, [r7, #12]
    502c:	687a      	ldr	r2, [r7, #4]
    502e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5030:	68fb      	ldr	r3, [r7, #12]
    5032:	687a      	ldr	r2, [r7, #4]
    5034:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	3304      	adds	r3, #4
    503a:	4618      	mov	r0, r3
    503c:	f7fe fc78 	bl	3930 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5040:	68fb      	ldr	r3, [r7, #12]
    5042:	3318      	adds	r3, #24
    5044:	4618      	mov	r0, r3
    5046:	f7fe fc73 	bl	3930 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    504a:	68fb      	ldr	r3, [r7, #12]
    504c:	68fa      	ldr	r2, [r7, #12]
    504e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5050:	687b      	ldr	r3, [r7, #4]
    5052:	f1c3 0214 	rsb	r2, r3, #20
    5056:	68fb      	ldr	r3, [r7, #12]
    5058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	68fa      	ldr	r2, [r7, #12]
    505e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5060:	3710      	adds	r7, #16
    5062:	46bd      	mov	sp, r7
    5064:	bd80      	pop	{r7, pc}
    5066:	bf00      	nop

00005068 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5068:	b580      	push	{r7, lr}
    506a:	b082      	sub	sp, #8
    506c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    506e:	2300      	movs	r3, #0
    5070:	607b      	str	r3, [r7, #4]
    5072:	e00f      	b.n	5094 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5074:	687a      	ldr	r2, [r7, #4]
    5076:	4613      	mov	r3, r2
    5078:	009b      	lsls	r3, r3, #2
    507a:	4413      	add	r3, r2
    507c:	009b      	lsls	r3, r3, #2
    507e:	f241 2240 	movw	r2, #4672	; 0x1240
    5082:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5086:	4413      	add	r3, r2
    5088:	4618      	mov	r0, r3
    508a:	f7fe fc31 	bl	38f0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	3301      	adds	r3, #1
    5092:	607b      	str	r3, [r7, #4]
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	2b13      	cmp	r3, #19
    5098:	d9ec      	bls.n	5074 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    509a:	f241 30d0 	movw	r0, #5072	; 0x13d0
    509e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50a2:	f7fe fc25 	bl	38f0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    50a6:	f241 30e4 	movw	r0, #5092	; 0x13e4
    50aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50ae:	f7fe fc1f 	bl	38f0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    50b2:	f241 4000 	movw	r0, #5120	; 0x1400
    50b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50ba:	f7fe fc19 	bl	38f0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    50be:	f241 4014 	movw	r0, #5140	; 0x1414
    50c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50c6:	f7fe fc13 	bl	38f0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    50ca:	f241 402c 	movw	r0, #5164	; 0x142c
    50ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50d2:	f7fe fc0d 	bl	38f0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    50d6:	f241 33f8 	movw	r3, #5112	; 0x13f8
    50da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50de:	f241 32d0 	movw	r2, #5072	; 0x13d0
    50e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    50e8:	f241 33fc 	movw	r3, #5116	; 0x13fc
    50ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f0:	f241 32e4 	movw	r2, #5092	; 0x13e4
    50f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50f8:	601a      	str	r2, [r3, #0]
}
    50fa:	3708      	adds	r7, #8
    50fc:	46bd      	mov	sp, r7
    50fe:	bd80      	pop	{r7, pc}

00005100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5100:	b580      	push	{r7, lr}
    5102:	b082      	sub	sp, #8
    5104:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    5106:	f241 4328 	movw	r3, #5160	; 0x1428
    510a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510e:	681b      	ldr	r3, [r3, #0]
    5110:	2b00      	cmp	r3, #0
    5112:	d03a      	beq.n	518a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5114:	f7ff fc4c 	bl	49b0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5118:	f241 4314 	movw	r3, #5140	; 0x1414
    511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	2b00      	cmp	r3, #0
    5124:	bf14      	ite	ne
    5126:	2300      	movne	r3, #0
    5128:	2301      	moveq	r3, #1
    512a:	b2db      	uxtb	r3, r3
    512c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    512e:	f7ff fc51 	bl	49d4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	2b00      	cmp	r3, #0
    5136:	d128      	bne.n	518a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5138:	f000 fa18 	bl	556c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    513c:	f241 4314 	movw	r3, #5140	; 0x1414
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	68db      	ldr	r3, [r3, #12]
    5146:	68db      	ldr	r3, [r3, #12]
    5148:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    514a:	683b      	ldr	r3, [r7, #0]
    514c:	3304      	adds	r3, #4
    514e:	4618      	mov	r0, r3
    5150:	f7fe fc5a 	bl	3a08 <vListRemove>
					--uxCurrentNumberOfTasks;
    5154:	f241 4340 	movw	r3, #5184	; 0x1440
    5158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515c:	681b      	ldr	r3, [r3, #0]
    515e:	1e5a      	subs	r2, r3, #1
    5160:	f241 4340 	movw	r3, #5184	; 0x1440
    5164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5168:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    516a:	f241 4328 	movw	r3, #5160	; 0x1428
    516e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5172:	681b      	ldr	r3, [r3, #0]
    5174:	1e5a      	subs	r2, r3, #1
    5176:	f241 4328 	movw	r3, #5160	; 0x1428
    517a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5180:	f000 fa0a 	bl	5598 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5184:	6838      	ldr	r0, [r7, #0]
    5186:	f000 f879 	bl	527c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    518a:	3708      	adds	r7, #8
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}

00005190 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5198:	f241 233c 	movw	r3, #4668	; 0x123c
    519c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a0:	681b      	ldr	r3, [r3, #0]
    51a2:	687a      	ldr	r2, [r7, #4]
    51a4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    51a6:	f241 4344 	movw	r3, #5188	; 0x1444
    51aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	687a      	ldr	r2, [r7, #4]
    51b2:	429a      	cmp	r2, r3
    51b4:	d20f      	bcs.n	51d6 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    51b6:	f241 33fc 	movw	r3, #5116	; 0x13fc
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	681a      	ldr	r2, [r3, #0]
    51c0:	f241 233c 	movw	r3, #4668	; 0x123c
    51c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c8:	681b      	ldr	r3, [r3, #0]
    51ca:	3304      	adds	r3, #4
    51cc:	4610      	mov	r0, r2
    51ce:	4619      	mov	r1, r3
    51d0:	f7fe fbe2 	bl	3998 <vListInsert>
    51d4:	e01c      	b.n	5210 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    51d6:	f241 33f8 	movw	r3, #5112	; 0x13f8
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	681a      	ldr	r2, [r3, #0]
    51e0:	f241 233c 	movw	r3, #4668	; 0x123c
    51e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	3304      	adds	r3, #4
    51ec:	4610      	mov	r0, r2
    51ee:	4619      	mov	r1, r3
    51f0:	f7fe fbd2 	bl	3998 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    51f4:	f640 2310 	movw	r3, #2576	; 0xa10
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	687a      	ldr	r2, [r7, #4]
    5200:	429a      	cmp	r2, r3
    5202:	d205      	bcs.n	5210 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5204:	f640 2310 	movw	r3, #2576	; 0xa10
    5208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520c:	687a      	ldr	r2, [r7, #4]
    520e:	601a      	str	r2, [r3, #0]
		}
	}
}
    5210:	3708      	adds	r7, #8
    5212:	46bd      	mov	sp, r7
    5214:	bd80      	pop	{r7, pc}
    5216:	bf00      	nop

00005218 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5218:	b580      	push	{r7, lr}
    521a:	b084      	sub	sp, #16
    521c:	af00      	add	r7, sp, #0
    521e:	4603      	mov	r3, r0
    5220:	6039      	str	r1, [r7, #0]
    5222:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5224:	2050      	movs	r0, #80	; 0x50
    5226:	f000 fa1b 	bl	5660 <pvPortMalloc>
    522a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    522c:	68fb      	ldr	r3, [r7, #12]
    522e:	2b00      	cmp	r3, #0
    5230:	d01f      	beq.n	5272 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5232:	683b      	ldr	r3, [r7, #0]
    5234:	2b00      	cmp	r3, #0
    5236:	d106      	bne.n	5246 <prvAllocateTCBAndStack+0x2e>
    5238:	88fb      	ldrh	r3, [r7, #6]
    523a:	009b      	lsls	r3, r3, #2
    523c:	4618      	mov	r0, r3
    523e:	f000 fa0f 	bl	5660 <pvPortMalloc>
    5242:	4603      	mov	r3, r0
    5244:	e000      	b.n	5248 <prvAllocateTCBAndStack+0x30>
    5246:	683b      	ldr	r3, [r7, #0]
    5248:	68fa      	ldr	r2, [r7, #12]
    524a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5250:	2b00      	cmp	r3, #0
    5252:	d105      	bne.n	5260 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5254:	68f8      	ldr	r0, [r7, #12]
    5256:	f000 fac7 	bl	57e8 <vPortFree>
			pxNewTCB = NULL;
    525a:	2300      	movs	r3, #0
    525c:	60fb      	str	r3, [r7, #12]
    525e:	e008      	b.n	5272 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5260:	68fb      	ldr	r3, [r7, #12]
    5262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5264:	88fb      	ldrh	r3, [r7, #6]
    5266:	009b      	lsls	r3, r3, #2
    5268:	4610      	mov	r0, r2
    526a:	21a5      	movs	r1, #165	; 0xa5
    526c:	461a      	mov	r2, r3
    526e:	f012 ffb5 	bl	181dc <memset>
		}
	}

	return pxNewTCB;
    5272:	68fb      	ldr	r3, [r7, #12]
}
    5274:	4618      	mov	r0, r3
    5276:	3710      	adds	r7, #16
    5278:	46bd      	mov	sp, r7
    527a:	bd80      	pop	{r7, pc}

0000527c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    527c:	b580      	push	{r7, lr}
    527e:	b082      	sub	sp, #8
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5288:	4618      	mov	r0, r3
    528a:	f000 faad 	bl	57e8 <vPortFree>
		vPortFree( pxTCB );
    528e:	6878      	ldr	r0, [r7, #4]
    5290:	f000 faaa 	bl	57e8 <vPortFree>
	}
    5294:	3708      	adds	r7, #8
    5296:	46bd      	mov	sp, r7
    5298:	bd80      	pop	{r7, pc}
    529a:	bf00      	nop

0000529c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    529c:	b480      	push	{r7}
    529e:	b083      	sub	sp, #12
    52a0:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    52a2:	f241 233c 	movw	r3, #4668	; 0x123c
    52a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52aa:	681b      	ldr	r3, [r3, #0]
    52ac:	607b      	str	r3, [r7, #4]

		return xReturn;
    52ae:	687b      	ldr	r3, [r7, #4]
	}
    52b0:	4618      	mov	r0, r3
    52b2:	370c      	adds	r7, #12
    52b4:	46bd      	mov	sp, r7
    52b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ba:	4770      	bx	lr

000052bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    52bc:	b580      	push	{r7, lr}
    52be:	b084      	sub	sp, #16
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    52c8:	68fb      	ldr	r3, [r7, #12]
    52ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52cc:	f241 233c 	movw	r3, #4668	; 0x123c
    52d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52d8:	429a      	cmp	r2, r3
    52da:	d24f      	bcs.n	537c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    52dc:	f241 233c 	movw	r3, #4668	; 0x123c
    52e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e4:	681b      	ldr	r3, [r3, #0]
    52e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52e8:	f1c3 0214 	rsb	r2, r3, #20
    52ec:	68fb      	ldr	r3, [r7, #12]
    52ee:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    52f0:	68fb      	ldr	r3, [r7, #12]
    52f2:	6959      	ldr	r1, [r3, #20]
    52f4:	68fb      	ldr	r3, [r7, #12]
    52f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52f8:	4613      	mov	r3, r2
    52fa:	009b      	lsls	r3, r3, #2
    52fc:	4413      	add	r3, r2
    52fe:	009b      	lsls	r3, r3, #2
    5300:	f241 2240 	movw	r2, #4672	; 0x1240
    5304:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5308:	4413      	add	r3, r2
    530a:	4299      	cmp	r1, r3
    530c:	d12e      	bne.n	536c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    530e:	68fb      	ldr	r3, [r7, #12]
    5310:	3304      	adds	r3, #4
    5312:	4618      	mov	r0, r3
    5314:	f7fe fb78 	bl	3a08 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5318:	f241 233c 	movw	r3, #4668	; 0x123c
    531c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5324:	68fb      	ldr	r3, [r7, #12]
    5326:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5328:	68fb      	ldr	r3, [r7, #12]
    532a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    532c:	f241 434c 	movw	r3, #5196	; 0x144c
    5330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	429a      	cmp	r2, r3
    5338:	d906      	bls.n	5348 <vTaskPriorityInherit+0x8c>
    533a:	68fb      	ldr	r3, [r7, #12]
    533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    533e:	f241 434c 	movw	r3, #5196	; 0x144c
    5342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5346:	601a      	str	r2, [r3, #0]
    5348:	68fb      	ldr	r3, [r7, #12]
    534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    534c:	4613      	mov	r3, r2
    534e:	009b      	lsls	r3, r3, #2
    5350:	4413      	add	r3, r2
    5352:	009b      	lsls	r3, r3, #2
    5354:	f241 2240 	movw	r2, #4672	; 0x1240
    5358:	f2c2 0200 	movt	r2, #8192	; 0x2000
    535c:	441a      	add	r2, r3
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	3304      	adds	r3, #4
    5362:	4610      	mov	r0, r2
    5364:	4619      	mov	r1, r3
    5366:	f7fe faef 	bl	3948 <vListInsertEnd>
    536a:	e007      	b.n	537c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    536c:	f241 233c 	movw	r3, #4668	; 0x123c
    5370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5374:	681b      	ldr	r3, [r3, #0]
    5376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5378:	68fb      	ldr	r3, [r7, #12]
    537a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    537c:	3710      	adds	r7, #16
    537e:	46bd      	mov	sp, r7
    5380:	bd80      	pop	{r7, pc}
    5382:	bf00      	nop

00005384 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5384:	b580      	push	{r7, lr}
    5386:	b084      	sub	sp, #16
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    538c:	687b      	ldr	r3, [r7, #4]
    538e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5390:	687b      	ldr	r3, [r7, #4]
    5392:	2b00      	cmp	r3, #0
    5394:	d035      	beq.n	5402 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5396:	68fb      	ldr	r3, [r7, #12]
    5398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    539e:	429a      	cmp	r2, r3
    53a0:	d02f      	beq.n	5402 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    53a2:	68fb      	ldr	r3, [r7, #12]
    53a4:	3304      	adds	r3, #4
    53a6:	4618      	mov	r0, r3
    53a8:	f7fe fb2e 	bl	3a08 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    53ac:	68fb      	ldr	r3, [r7, #12]
    53ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    53b0:	68fb      	ldr	r3, [r7, #12]
    53b2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53b8:	f1c3 0214 	rsb	r2, r3, #20
    53bc:	68fb      	ldr	r3, [r7, #12]
    53be:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    53c0:	68fb      	ldr	r3, [r7, #12]
    53c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53c4:	f241 434c 	movw	r3, #5196	; 0x144c
    53c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53cc:	681b      	ldr	r3, [r3, #0]
    53ce:	429a      	cmp	r2, r3
    53d0:	d906      	bls.n	53e0 <vTaskPriorityDisinherit+0x5c>
    53d2:	68fb      	ldr	r3, [r7, #12]
    53d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53d6:	f241 434c 	movw	r3, #5196	; 0x144c
    53da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53de:	601a      	str	r2, [r3, #0]
    53e0:	68fb      	ldr	r3, [r7, #12]
    53e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53e4:	4613      	mov	r3, r2
    53e6:	009b      	lsls	r3, r3, #2
    53e8:	4413      	add	r3, r2
    53ea:	009b      	lsls	r3, r3, #2
    53ec:	f241 2240 	movw	r2, #4672	; 0x1240
    53f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53f4:	441a      	add	r2, r3
    53f6:	68fb      	ldr	r3, [r7, #12]
    53f8:	3304      	adds	r3, #4
    53fa:	4610      	mov	r0, r2
    53fc:	4619      	mov	r1, r3
    53fe:	f7fe faa3 	bl	3948 <vListInsertEnd>
			}
		}
	}
    5402:	3710      	adds	r7, #16
    5404:	46bd      	mov	sp, r7
    5406:	bd80      	pop	{r7, pc}

00005408 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5408:	b480      	push	{r7}
    540a:	b083      	sub	sp, #12
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5414:	4618      	mov	r0, r3
    5416:	370c      	adds	r7, #12
    5418:	46bd      	mov	sp, r7
    541a:	f85d 7b04 	ldr.w	r7, [sp], #4
    541e:	4770      	bx	lr

00005420 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5420:	b480      	push	{r7}
    5422:	b083      	sub	sp, #12
    5424:	af00      	add	r7, sp, #0
    5426:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5428:	687b      	ldr	r3, [r7, #4]
    542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    542c:	4618      	mov	r0, r3
    542e:	370c      	adds	r7, #12
    5430:	46bd      	mov	sp, r7
    5432:	f85d 7b04 	ldr.w	r7, [sp], #4
    5436:	4770      	bx	lr

00005438 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5438:	b480      	push	{r7}
    543a:	b083      	sub	sp, #12
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
    5440:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	683a      	ldr	r2, [r7, #0]
    5446:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5448:	370c      	adds	r7, #12
    544a:	46bd      	mov	sp, r7
    544c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5450:	4770      	bx	lr
    5452:	bf00      	nop

00005454 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5454:	b480      	push	{r7}
    5456:	b083      	sub	sp, #12
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    545c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	683a      	ldr	r2, [r7, #0]
    5462:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5464:	370c      	adds	r7, #12
    5466:	46bd      	mov	sp, r7
    5468:	f85d 7b04 	ldr.w	r7, [sp], #4
    546c:	4770      	bx	lr
    546e:	bf00      	nop

00005470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5470:	b480      	push	{r7}
    5472:	b085      	sub	sp, #20
    5474:	af00      	add	r7, sp, #0
    5476:	60f8      	str	r0, [r7, #12]
    5478:	60b9      	str	r1, [r7, #8]
    547a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	3b04      	subs	r3, #4
    5480:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5482:	68fb      	ldr	r3, [r7, #12]
    5484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    548a:	68fb      	ldr	r3, [r7, #12]
    548c:	3b04      	subs	r3, #4
    548e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5490:	68ba      	ldr	r2, [r7, #8]
    5492:	68fb      	ldr	r3, [r7, #12]
    5494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5496:	68fb      	ldr	r3, [r7, #12]
    5498:	3b04      	subs	r3, #4
    549a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    549c:	68fb      	ldr	r3, [r7, #12]
    549e:	2200      	movs	r2, #0
    54a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    54a2:	68fb      	ldr	r3, [r7, #12]
    54a4:	3b14      	subs	r3, #20
    54a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    54a8:	687a      	ldr	r2, [r7, #4]
    54aa:	68fb      	ldr	r3, [r7, #12]
    54ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	3b20      	subs	r3, #32
    54b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    54b4:	68fb      	ldr	r3, [r7, #12]
}
    54b6:	4618      	mov	r0, r3
    54b8:	3714      	adds	r7, #20
    54ba:	46bd      	mov	sp, r7
    54bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c0:	4770      	bx	lr
    54c2:	bf00      	nop

000054c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    54c4:	4b06      	ldr	r3, [pc, #24]	; (54e0 <pxCurrentTCBConst2>)
    54c6:	6819      	ldr	r1, [r3, #0]
    54c8:	6808      	ldr	r0, [r1, #0]
    54ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    54ce:	f380 8809 	msr	PSP, r0
    54d2:	f04f 0000 	mov.w	r0, #0
    54d6:	f380 8811 	msr	BASEPRI, r0
    54da:	f04e 0e0d 	orr.w	lr, lr, #13
    54de:	4770      	bx	lr

000054e0 <pxCurrentTCBConst2>:
    54e0:	2000123c 	.word	0x2000123c

000054e4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    54e4:	485d      	ldr	r0, [pc, #372]	; (565c <prvSetupTimerInterrupt+0x2c>)
    54e6:	6800      	ldr	r0, [r0, #0]
    54e8:	6800      	ldr	r0, [r0, #0]
    54ea:	f380 8808 	msr	MSP, r0
    54ee:	b662      	cpsie	i
    54f0:	df00      	svc	0
    54f2:	bf00      	nop

000054f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    54f4:	b580      	push	{r7, lr}
    54f6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    54f8:	f64e 5320 	movw	r3, #60704	; 0xed20
    54fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5500:	f64e 5220 	movw	r2, #60704	; 0xed20
    5504:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    550e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5510:	f64e 5320 	movw	r3, #60704	; 0xed20
    5514:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5518:	f64e 5220 	movw	r2, #60704	; 0xed20
    551c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5520:	6812      	ldr	r2, [r2, #0]
    5522:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5526:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5528:	f000 f882 	bl	5630 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    552c:	f640 2314 	movw	r3, #2580	; 0xa14
    5530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5534:	2200      	movs	r2, #0
    5536:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5538:	f7ff ffd4 	bl	54e4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    553c:	2300      	movs	r3, #0
}
    553e:	4618      	mov	r0, r3
    5540:	bd80      	pop	{r7, pc}
    5542:	bf00      	nop

00005544 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5544:	b480      	push	{r7}
    5546:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5548:	46bd      	mov	sp, r7
    554a:	f85d 7b04 	ldr.w	r7, [sp], #4
    554e:	4770      	bx	lr

00005550 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5550:	b480      	push	{r7}
    5552:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5554:	f64e 5304 	movw	r3, #60676	; 0xed04
    5558:	f2ce 0300 	movt	r3, #57344	; 0xe000
    555c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5560:	601a      	str	r2, [r3, #0]
}
    5562:	46bd      	mov	sp, r7
    5564:	f85d 7b04 	ldr.w	r7, [sp], #4
    5568:	4770      	bx	lr
    556a:	bf00      	nop

0000556c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    556c:	b480      	push	{r7}
    556e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5570:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5574:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5578:	f640 2314 	movw	r3, #2580	; 0xa14
    557c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5580:	681b      	ldr	r3, [r3, #0]
    5582:	1c5a      	adds	r2, r3, #1
    5584:	f640 2314 	movw	r3, #2580	; 0xa14
    5588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558c:	601a      	str	r2, [r3, #0]
}
    558e:	46bd      	mov	sp, r7
    5590:	f85d 7b04 	ldr.w	r7, [sp], #4
    5594:	4770      	bx	lr
    5596:	bf00      	nop

00005598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5598:	b480      	push	{r7}
    559a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    559c:	f640 2314 	movw	r3, #2580	; 0xa14
    55a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	1e5a      	subs	r2, r3, #1
    55a8:	f640 2314 	movw	r3, #2580	; 0xa14
    55ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    55b2:	f640 2314 	movw	r3, #2580	; 0xa14
    55b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ba:	681b      	ldr	r3, [r3, #0]
    55bc:	2b00      	cmp	r3, #0
    55be:	d103      	bne.n	55c8 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    55c0:	f04f 0000 	mov.w	r0, #0
    55c4:	f380 8811 	msr	BASEPRI, r0
	}
}
    55c8:	46bd      	mov	sp, r7
    55ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ce:	4770      	bx	lr

000055d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    55d0:	f3ef 8009 	mrs	r0, PSP
    55d4:	4b0c      	ldr	r3, [pc, #48]	; (5608 <pxCurrentTCBConst>)
    55d6:	681a      	ldr	r2, [r3, #0]
    55d8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    55dc:	6010      	str	r0, [r2, #0]
    55de:	e92d 4008 	stmdb	sp!, {r3, lr}
    55e2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    55e6:	f380 8811 	msr	BASEPRI, r0
    55ea:	f7ff fba1 	bl	4d30 <vTaskSwitchContext>
    55ee:	f04f 0000 	mov.w	r0, #0
    55f2:	f380 8811 	msr	BASEPRI, r0
    55f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    55fa:	6819      	ldr	r1, [r3, #0]
    55fc:	6808      	ldr	r0, [r1, #0]
    55fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5602:	f380 8809 	msr	PSP, r0
    5606:	4770      	bx	lr

00005608 <pxCurrentTCBConst>:
    5608:	2000123c 	.word	0x2000123c

0000560c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    560c:	b580      	push	{r7, lr}
    560e:	b082      	sub	sp, #8
    5610:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5612:	2300      	movs	r3, #0
    5614:	607b      	str	r3, [r7, #4]
    5616:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    561a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    561e:	f7ff faa9 	bl	4b74 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5622:	f04f 0000 	mov.w	r0, #0
    5626:	f380 8811 	msr	BASEPRI, r0
}
    562a:	3708      	adds	r7, #8
    562c:	46bd      	mov	sp, r7
    562e:	bd80      	pop	{r7, pc}

00005630 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5630:	b480      	push	{r7}
    5632:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5634:	f24e 0314 	movw	r3, #57364	; 0xe014
    5638:	f2ce 0300 	movt	r3, #57344	; 0xe000
    563c:	f641 123f 	movw	r2, #6463	; 0x193f
    5640:	f2c0 0201 	movt	r2, #1
    5644:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5646:	f24e 0310 	movw	r3, #57360	; 0xe010
    564a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    564e:	2207      	movs	r2, #7
    5650:	601a      	str	r2, [r3, #0]
}
    5652:	46bd      	mov	sp, r7
    5654:	f85d 7b04 	ldr.w	r7, [sp], #4
    5658:	4770      	bx	lr
    565a:	0000      	.short	0x0000
    565c:	e000ed08 	.word	0xe000ed08

00005660 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5660:	b580      	push	{r7, lr}
    5662:	b08a      	sub	sp, #40	; 0x28
    5664:	af00      	add	r7, sp, #0
    5666:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5668:	2300      	movs	r3, #0
    566a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    566c:	f7ff f9a0 	bl	49b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5670:	f642 4378 	movw	r3, #11384	; 0x2c78
    5674:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5678:	681b      	ldr	r3, [r3, #0]
    567a:	2b00      	cmp	r3, #0
    567c:	d130      	bne.n	56e0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    567e:	f642 4368 	movw	r3, #11368	; 0x2c68
    5682:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5686:	f241 4268 	movw	r2, #5224	; 0x1468
    568a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    568e:	601a      	str	r2, [r3, #0]
    5690:	f642 4368 	movw	r3, #11368	; 0x2c68
    5694:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5698:	2200      	movs	r2, #0
    569a:	605a      	str	r2, [r3, #4]
    569c:	f642 4370 	movw	r3, #11376	; 0x2c70
    56a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    56a4:	f44f 328c 	mov.w	r2, #71680	; 0x11800
    56a8:	605a      	str	r2, [r3, #4]
    56aa:	f642 4370 	movw	r3, #11376	; 0x2c70
    56ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    56b2:	2200      	movs	r2, #0
    56b4:	601a      	str	r2, [r3, #0]
    56b6:	f241 4368 	movw	r3, #5224	; 0x1468
    56ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56be:	617b      	str	r3, [r7, #20]
    56c0:	697b      	ldr	r3, [r7, #20]
    56c2:	f44f 328c 	mov.w	r2, #71680	; 0x11800
    56c6:	605a      	str	r2, [r3, #4]
    56c8:	697a      	ldr	r2, [r7, #20]
    56ca:	f642 4370 	movw	r3, #11376	; 0x2c70
    56ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    56d2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    56d4:	f642 4378 	movw	r3, #11384	; 0x2c78
    56d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    56dc:	2201      	movs	r2, #1
    56de:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d00d      	beq.n	5702 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    56e6:	2310      	movs	r3, #16
    56e8:	687a      	ldr	r2, [r7, #4]
    56ea:	4413      	add	r3, r2
    56ec:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	f003 0307 	and.w	r3, r3, #7
    56f4:	2b00      	cmp	r3, #0
    56f6:	d004      	beq.n	5702 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	f023 0307 	bic.w	r3, r3, #7
    56fe:	3308      	adds	r3, #8
    5700:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	2b00      	cmp	r3, #0
    5706:	d068      	beq.n	57da <pvPortMalloc+0x17a>
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
    570e:	d264      	bcs.n	57da <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5710:	f642 4368 	movw	r3, #11368	; 0x2c68
    5714:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5718:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    571a:	f642 4368 	movw	r3, #11368	; 0x2c68
    571e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5726:	e004      	b.n	5732 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    572a:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    572e:	681b      	ldr	r3, [r3, #0]
    5730:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5734:	685a      	ldr	r2, [r3, #4]
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	429a      	cmp	r2, r3
    573a:	d203      	bcs.n	5744 <pvPortMalloc+0xe4>
    573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	2b00      	cmp	r3, #0
    5742:	d1f1      	bne.n	5728 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5746:	f642 4370 	movw	r3, #11376	; 0x2c70
    574a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    574e:	429a      	cmp	r2, r3
    5750:	d043      	beq.n	57da <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5752:	6a3b      	ldr	r3, [r7, #32]
    5754:	681a      	ldr	r2, [r3, #0]
    5756:	2310      	movs	r3, #16
    5758:	4413      	add	r3, r2
    575a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    575e:	681a      	ldr	r2, [r3, #0]
    5760:	6a3b      	ldr	r3, [r7, #32]
    5762:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5766:	685a      	ldr	r2, [r3, #4]
    5768:	687b      	ldr	r3, [r7, #4]
    576a:	1ad2      	subs	r2, r2, r3
    576c:	2310      	movs	r3, #16
    576e:	005b      	lsls	r3, r3, #1
    5770:	429a      	cmp	r2, r3
    5772:	d925      	bls.n	57c0 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5776:	687b      	ldr	r3, [r7, #4]
    5778:	4413      	add	r3, r2
    577a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    577e:	685a      	ldr	r2, [r3, #4]
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	1ad2      	subs	r2, r2, r3
    5784:	693b      	ldr	r3, [r7, #16]
    5786:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    578a:	687a      	ldr	r2, [r7, #4]
    578c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    578e:	693b      	ldr	r3, [r7, #16]
    5790:	685b      	ldr	r3, [r3, #4]
    5792:	60fb      	str	r3, [r7, #12]
    5794:	f642 4368 	movw	r3, #11368	; 0x2c68
    5798:	f2c2 0301 	movt	r3, #8193	; 0x2001
    579c:	61bb      	str	r3, [r7, #24]
    579e:	e002      	b.n	57a6 <pvPortMalloc+0x146>
    57a0:	69bb      	ldr	r3, [r7, #24]
    57a2:	681b      	ldr	r3, [r3, #0]
    57a4:	61bb      	str	r3, [r7, #24]
    57a6:	69bb      	ldr	r3, [r7, #24]
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	685a      	ldr	r2, [r3, #4]
    57ac:	68fb      	ldr	r3, [r7, #12]
    57ae:	429a      	cmp	r2, r3
    57b0:	d3f6      	bcc.n	57a0 <pvPortMalloc+0x140>
    57b2:	69bb      	ldr	r3, [r7, #24]
    57b4:	681a      	ldr	r2, [r3, #0]
    57b6:	693b      	ldr	r3, [r7, #16]
    57b8:	601a      	str	r2, [r3, #0]
    57ba:	69bb      	ldr	r3, [r7, #24]
    57bc:	693a      	ldr	r2, [r7, #16]
    57be:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    57c0:	f640 2318 	movw	r3, #2584	; 0xa18
    57c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c8:	681a      	ldr	r2, [r3, #0]
    57ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57cc:	685b      	ldr	r3, [r3, #4]
    57ce:	1ad2      	subs	r2, r2, r3
    57d0:	f640 2318 	movw	r3, #2584	; 0xa18
    57d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    57da:	f7ff f8fb 	bl	49d4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    57de:	69fb      	ldr	r3, [r7, #28]
}
    57e0:	4618      	mov	r0, r3
    57e2:	3728      	adds	r7, #40	; 0x28
    57e4:	46bd      	mov	sp, r7
    57e6:	bd80      	pop	{r7, pc}

000057e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b086      	sub	sp, #24
    57ec:	af00      	add	r7, sp, #0
    57ee:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    57f4:	687b      	ldr	r3, [r7, #4]
    57f6:	2b00      	cmp	r3, #0
    57f8:	d030      	beq.n	585c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    57fa:	2310      	movs	r3, #16
    57fc:	425b      	negs	r3, r3
    57fe:	693a      	ldr	r2, [r7, #16]
    5800:	4413      	add	r3, r2
    5802:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5804:	693b      	ldr	r3, [r7, #16]
    5806:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5808:	f7ff f8d2 	bl	49b0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	685b      	ldr	r3, [r3, #4]
    5810:	60bb      	str	r3, [r7, #8]
    5812:	f642 4368 	movw	r3, #11368	; 0x2c68
    5816:	f2c2 0301 	movt	r3, #8193	; 0x2001
    581a:	617b      	str	r3, [r7, #20]
    581c:	e002      	b.n	5824 <vPortFree+0x3c>
    581e:	697b      	ldr	r3, [r7, #20]
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	617b      	str	r3, [r7, #20]
    5824:	697b      	ldr	r3, [r7, #20]
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	685a      	ldr	r2, [r3, #4]
    582a:	68bb      	ldr	r3, [r7, #8]
    582c:	429a      	cmp	r2, r3
    582e:	d3f6      	bcc.n	581e <vPortFree+0x36>
    5830:	697b      	ldr	r3, [r7, #20]
    5832:	681a      	ldr	r2, [r3, #0]
    5834:	68fb      	ldr	r3, [r7, #12]
    5836:	601a      	str	r2, [r3, #0]
    5838:	697b      	ldr	r3, [r7, #20]
    583a:	68fa      	ldr	r2, [r7, #12]
    583c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    583e:	68fb      	ldr	r3, [r7, #12]
    5840:	685a      	ldr	r2, [r3, #4]
    5842:	f640 2318 	movw	r3, #2584	; 0xa18
    5846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	441a      	add	r2, r3
    584e:	f640 2318 	movw	r3, #2584	; 0xa18
    5852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5856:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5858:	f7ff f8bc 	bl	49d4 <xTaskResumeAll>
	}
}
    585c:	3718      	adds	r7, #24
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	bf00      	nop

00005864 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5864:	b480      	push	{r7}
    5866:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5868:	f640 2318 	movw	r3, #2584	; 0xa18
    586c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5870:	681b      	ldr	r3, [r3, #0]
}
    5872:	4618      	mov	r0, r3
    5874:	46bd      	mov	sp, r7
    5876:	f85d 7b04 	ldr.w	r7, [sp], #4
    587a:	4770      	bx	lr

0000587c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    587c:	b480      	push	{r7}
    587e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5880:	46bd      	mov	sp, r7
    5882:	f85d 7b04 	ldr.w	r7, [sp], #4
    5886:	4770      	bx	lr

00005888 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5888:	b580      	push	{r7, lr}
    588a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    588c:	f642 439a 	movw	r3, #11418	; 0x2c9a
    5890:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5894:	781b      	ldrb	r3, [r3, #0]
    5896:	2b00      	cmp	r3, #0
    5898:	f040 815d 	bne.w	5b56 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    589c:	f642 4382 	movw	r3, #11394	; 0x2c82
    58a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58a4:	881b      	ldrh	r3, [r3, #0]
    58a6:	2b09      	cmp	r3, #9
    58a8:	f201 8145 	bhi.w	6b36 <ground_calibrate+0x12ae>
    58ac:	f642 4384 	movw	r3, #11396	; 0x2c84
    58b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58b4:	781b      	ldrb	r3, [r3, #0]
    58b6:	2b01      	cmp	r3, #1
    58b8:	f041 813d 	bne.w	6b36 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    58bc:	f642 439a 	movw	r3, #11418	; 0x2c9a
    58c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58c4:	2201      	movs	r2, #1
    58c6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    58c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    58cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58d0:	781a      	ldrb	r2, [r3, #0]
    58d2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    58d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	b2db      	uxtb	r3, r3
    58de:	429a      	cmp	r2, r3
    58e0:	d313      	bcc.n	590a <ground_calibrate+0x82>
    58e2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    58e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58ea:	781b      	ldrb	r3, [r3, #0]
    58ec:	b2db      	uxtb	r3, r3
    58ee:	461a      	mov	r2, r3
    58f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    58f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58f8:	781b      	ldrb	r3, [r3, #0]
    58fa:	1ad3      	subs	r3, r2, r3
    58fc:	33ff      	adds	r3, #255	; 0xff
    58fe:	2b04      	cmp	r3, #4
    5900:	bfd4      	ite	le
    5902:	2300      	movle	r3, #0
    5904:	2301      	movgt	r3, #1
    5906:	b2db      	uxtb	r3, r3
    5908:	e011      	b.n	592e <ground_calibrate+0xa6>
    590a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    590e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5912:	781b      	ldrb	r3, [r3, #0]
    5914:	b2db      	uxtb	r3, r3
    5916:	461a      	mov	r2, r3
    5918:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    591c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5920:	781b      	ldrb	r3, [r3, #0]
    5922:	1ad3      	subs	r3, r2, r3
    5924:	2b04      	cmp	r3, #4
    5926:	bfd4      	ite	le
    5928:	2300      	movle	r3, #0
    592a:	2301      	movgt	r3, #1
    592c:	b2db      	uxtb	r3, r3
    592e:	2b00      	cmp	r3, #0
    5930:	f000 8103 	beq.w	5b3a <ground_calibrate+0x2b2>
    5934:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5938:	f2c2 0301 	movt	r3, #8193	; 0x2001
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	461a      	mov	r2, r3
    5940:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5944:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5948:	2105      	movs	r1, #5
    594a:	5499      	strb	r1, [r3, r2]
    594c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5950:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	3301      	adds	r3, #1
    5958:	b2da      	uxtb	r2, r3
    595a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    595e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5962:	701a      	strb	r2, [r3, #0]
    5964:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5968:	f2c2 0301 	movt	r3, #8193	; 0x2001
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	2bff      	cmp	r3, #255	; 0xff
    5970:	d105      	bne.n	597e <ground_calibrate+0xf6>
    5972:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5976:	f2c2 0301 	movt	r3, #8193	; 0x2001
    597a:	2200      	movs	r2, #0
    597c:	701a      	strb	r2, [r3, #0]
    597e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5982:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	461a      	mov	r2, r3
    598a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    598e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5992:	2102      	movs	r1, #2
    5994:	5499      	strb	r1, [r3, r2]
    5996:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    599a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	3301      	adds	r3, #1
    59a2:	b2da      	uxtb	r2, r3
    59a4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    59a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59ac:	701a      	strb	r2, [r3, #0]
    59ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    59b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59b6:	781b      	ldrb	r3, [r3, #0]
    59b8:	2bff      	cmp	r3, #255	; 0xff
    59ba:	d105      	bne.n	59c8 <ground_calibrate+0x140>
    59bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    59c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59c4:	2200      	movs	r2, #0
    59c6:	701a      	strb	r2, [r3, #0]
    59c8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    59cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59d0:	2202      	movs	r2, #2
    59d2:	701a      	strb	r2, [r3, #0]
    59d4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    59d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59dc:	2202      	movs	r2, #2
    59de:	701a      	strb	r2, [r3, #0]
    59e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    59e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	461a      	mov	r2, r3
    59ec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    59f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59f4:	7819      	ldrb	r1, [r3, #0]
    59f6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    59fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    59fe:	5499      	strb	r1, [r3, r2]
    5a00:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	3301      	adds	r3, #1
    5a0c:	b2da      	uxtb	r2, r3
    5a0e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a16:	701a      	strb	r2, [r3, #0]
    5a18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a20:	781b      	ldrb	r3, [r3, #0]
    5a22:	2bff      	cmp	r3, #255	; 0xff
    5a24:	d105      	bne.n	5a32 <ground_calibrate+0x1aa>
    5a26:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a2e:	2200      	movs	r2, #0
    5a30:	701a      	strb	r2, [r3, #0]
    5a32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a3a:	781b      	ldrb	r3, [r3, #0]
    5a3c:	461a      	mov	r2, r3
    5a3e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5a42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a46:	7819      	ldrb	r1, [r3, #0]
    5a48:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a50:	5499      	strb	r1, [r3, r2]
    5a52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	3301      	adds	r3, #1
    5a5e:	b2da      	uxtb	r2, r3
    5a60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a68:	701a      	strb	r2, [r3, #0]
    5a6a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a72:	781b      	ldrb	r3, [r3, #0]
    5a74:	2bff      	cmp	r3, #255	; 0xff
    5a76:	d105      	bne.n	5a84 <ground_calibrate+0x1fc>
    5a78:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5a7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5a80:	2200      	movs	r2, #0
    5a82:	701a      	strb	r2, [r3, #0]
    5a84:	f242 0339 	movw	r3, #8249	; 0x2039
    5a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	b2db      	uxtb	r3, r3
    5a90:	f003 0310 	and.w	r3, r3, #16
    5a94:	2b00      	cmp	r3, #0
    5a96:	f041 804e 	bne.w	6b36 <ground_calibrate+0x12ae>
    5a9a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5a9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	b2db      	uxtb	r3, r3
    5aa6:	461a      	mov	r2, r3
    5aa8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5aac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ab0:	5c9a      	ldrb	r2, [r3, r2]
    5ab2:	f642 53a3 	movw	r3, #11683	; 0x2da3
    5ab6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5aba:	701a      	strb	r2, [r3, #0]
    5abc:	f642 53a4 	movw	r3, #11684	; 0x2da4
    5ac0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ac4:	2200      	movs	r2, #0
    5ac6:	701a      	strb	r2, [r3, #0]
    5ac8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5acc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ad0:	781b      	ldrb	r3, [r3, #0]
    5ad2:	b2db      	uxtb	r3, r3
    5ad4:	3301      	adds	r3, #1
    5ad6:	b2da      	uxtb	r2, r3
    5ad8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5adc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ae0:	701a      	strb	r2, [r3, #0]
    5ae2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5ae6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5aea:	781b      	ldrb	r3, [r3, #0]
    5aec:	b2db      	uxtb	r3, r3
    5aee:	2bff      	cmp	r3, #255	; 0xff
    5af0:	d105      	bne.n	5afe <ground_calibrate+0x276>
    5af2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5af6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5afa:	2200      	movs	r2, #0
    5afc:	701a      	strb	r2, [r3, #0]
    5afe:	f242 0338 	movw	r3, #8248	; 0x2038
    5b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b06:	f242 0238 	movw	r2, #8248	; 0x2038
    5b0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b0e:	7812      	ldrb	r2, [r2, #0]
    5b10:	b2d2      	uxtb	r2, r2
    5b12:	f042 0201 	orr.w	r2, r2, #1
    5b16:	b2d2      	uxtb	r2, r2
    5b18:	701a      	strb	r2, [r3, #0]
    5b1a:	f242 0339 	movw	r3, #8249	; 0x2039
    5b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b22:	f242 0239 	movw	r2, #8249	; 0x2039
    5b26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b2a:	7812      	ldrb	r2, [r2, #0]
    5b2c:	b2d2      	uxtb	r2, r2
    5b2e:	f042 0210 	orr.w	r2, r2, #16
    5b32:	b2d2      	uxtb	r2, r2
    5b34:	701a      	strb	r2, [r3, #0]
    5b36:	f000 bffe 	b.w	6b36 <ground_calibrate+0x12ae>
    5b3a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    5b3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	3301      	adds	r3, #1
    5b46:	b2da      	uxtb	r2, r3
    5b48:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    5b4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5b50:	701a      	strb	r2, [r3, #0]
    5b52:	f000 bff0 	b.w	6b36 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5b56:	f642 439a 	movw	r3, #11418	; 0x2c9a
    5b5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5b5e:	781b      	ldrb	r3, [r3, #0]
    5b60:	2b01      	cmp	r3, #1
    5b62:	f040 87e8 	bne.w	6b36 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5b66:	f642 53a8 	movw	r3, #11688	; 0x2da8
    5b6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5b6e:	885b      	ldrh	r3, [r3, #2]
    5b70:	b21b      	sxth	r3, r3
    5b72:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5b76:	db09      	blt.n	5b8c <ground_calibrate+0x304>
    5b78:	f642 53a8 	movw	r3, #11688	; 0x2da8
    5b7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5b80:	885b      	ldrh	r3, [r3, #2]
    5b82:	b21b      	sxth	r3, r3
    5b84:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5b88:	f340 87d5 	ble.w	6b36 <ground_calibrate+0x12ae>
      ir_gain_calib();
    5b8c:	f00b fcfc 	bl	11588 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5b90:	f640 2328 	movw	r3, #2600	; 0xa28
    5b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b98:	681a      	ldr	r2, [r3, #0]
    5b9a:	f243 2394 	movw	r3, #12948	; 0x3294
    5b9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ba2:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5ba4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5ba8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bac:	781a      	ldrb	r2, [r3, #0]
    5bae:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5bb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bb6:	781b      	ldrb	r3, [r3, #0]
    5bb8:	b2db      	uxtb	r3, r3
    5bba:	429a      	cmp	r2, r3
    5bbc:	d313      	bcc.n	5be6 <ground_calibrate+0x35e>
    5bbe:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5bc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bc6:	781b      	ldrb	r3, [r3, #0]
    5bc8:	b2db      	uxtb	r3, r3
    5bca:	461a      	mov	r2, r3
    5bcc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5bd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bd4:	781b      	ldrb	r3, [r3, #0]
    5bd6:	1ad3      	subs	r3, r2, r3
    5bd8:	33ff      	adds	r3, #255	; 0xff
    5bda:	2b14      	cmp	r3, #20
    5bdc:	bfd4      	ite	le
    5bde:	2300      	movle	r3, #0
    5be0:	2301      	movgt	r3, #1
    5be2:	b2db      	uxtb	r3, r3
    5be4:	e011      	b.n	5c0a <ground_calibrate+0x382>
    5be6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    5bea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	b2db      	uxtb	r3, r3
    5bf2:	461a      	mov	r2, r3
    5bf4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5bf8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5bfc:	781b      	ldrb	r3, [r3, #0]
    5bfe:	1ad3      	subs	r3, r2, r3
    5c00:	2b14      	cmp	r3, #20
    5c02:	bfd4      	ite	le
    5c04:	2300      	movle	r3, #0
    5c06:	2301      	movgt	r3, #1
    5c08:	b2db      	uxtb	r3, r3
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	f000 85a6 	beq.w	675c <ground_calibrate+0xed4>
    5c10:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	461a      	mov	r2, r3
    5c1c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5c20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c24:	2105      	movs	r1, #5
    5c26:	5499      	strb	r1, [r3, r2]
    5c28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	3301      	adds	r3, #1
    5c34:	b2da      	uxtb	r2, r3
    5c36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c3e:	701a      	strb	r2, [r3, #0]
    5c40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	2bff      	cmp	r3, #255	; 0xff
    5c4c:	d105      	bne.n	5c5a <ground_calibrate+0x3d2>
    5c4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c56:	2200      	movs	r2, #0
    5c58:	701a      	strb	r2, [r3, #0]
    5c5a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c62:	781b      	ldrb	r3, [r3, #0]
    5c64:	461a      	mov	r2, r3
    5c66:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5c6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c6e:	2105      	movs	r1, #5
    5c70:	5499      	strb	r1, [r3, r2]
    5c72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c7a:	781b      	ldrb	r3, [r3, #0]
    5c7c:	3301      	adds	r3, #1
    5c7e:	b2da      	uxtb	r2, r3
    5c80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c88:	701a      	strb	r2, [r3, #0]
    5c8a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	2bff      	cmp	r3, #255	; 0xff
    5c96:	d105      	bne.n	5ca4 <ground_calibrate+0x41c>
    5c98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5c9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ca0:	2200      	movs	r2, #0
    5ca2:	701a      	strb	r2, [r3, #0]
    5ca4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5ca8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cac:	2205      	movs	r2, #5
    5cae:	701a      	strb	r2, [r3, #0]
    5cb0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5cb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cb8:	2205      	movs	r2, #5
    5cba:	701a      	strb	r2, [r3, #0]
    5cbc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5cc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	461a      	mov	r2, r3
    5cc8:	f243 2398 	movw	r3, #12952	; 0x3298
    5ccc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cd0:	7819      	ldrb	r1, [r3, #0]
    5cd2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5cd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cda:	5499      	strb	r1, [r3, r2]
    5cdc:	f243 2398 	movw	r3, #12952	; 0x3298
    5ce0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ce4:	781a      	ldrb	r2, [r3, #0]
    5ce6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5cea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cee:	781b      	ldrb	r3, [r3, #0]
    5cf0:	4413      	add	r3, r2
    5cf2:	b2da      	uxtb	r2, r3
    5cf4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5cf8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5cfc:	701a      	strb	r2, [r3, #0]
    5cfe:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5d02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d06:	781a      	ldrb	r2, [r3, #0]
    5d08:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5d0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	4413      	add	r3, r2
    5d14:	b2da      	uxtb	r2, r3
    5d16:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5d1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d1e:	701a      	strb	r2, [r3, #0]
    5d20:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5d24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d28:	781b      	ldrb	r3, [r3, #0]
    5d2a:	3301      	adds	r3, #1
    5d2c:	b2da      	uxtb	r2, r3
    5d2e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5d32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d36:	701a      	strb	r2, [r3, #0]
    5d38:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5d3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d40:	781b      	ldrb	r3, [r3, #0]
    5d42:	2bff      	cmp	r3, #255	; 0xff
    5d44:	d105      	bne.n	5d52 <ground_calibrate+0x4ca>
    5d46:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5d4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d4e:	2200      	movs	r2, #0
    5d50:	701a      	strb	r2, [r3, #0]
    5d52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5d56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d5a:	781b      	ldrb	r3, [r3, #0]
    5d5c:	461a      	mov	r2, r3
    5d5e:	f243 2398 	movw	r3, #12952	; 0x3298
    5d62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d66:	7859      	ldrb	r1, [r3, #1]
    5d68:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5d6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d70:	5499      	strb	r1, [r3, r2]
    5d72:	4bd2      	ldr	r3, [pc, #840]	; (60bc <ground_calibrate+0x834>)
    5d74:	781a      	ldrb	r2, [r3, #0]
    5d76:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5d7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d7e:	781b      	ldrb	r3, [r3, #0]
    5d80:	4413      	add	r3, r2
    5d82:	b2da      	uxtb	r2, r3
    5d84:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5d88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d8c:	701a      	strb	r2, [r3, #0]
    5d8e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5d92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5d96:	781a      	ldrb	r2, [r3, #0]
    5d98:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5d9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	4413      	add	r3, r2
    5da4:	b2da      	uxtb	r2, r3
    5da6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5daa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dae:	701a      	strb	r2, [r3, #0]
    5db0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5db4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	3301      	adds	r3, #1
    5dbc:	b2da      	uxtb	r2, r3
    5dbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5dc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dc6:	701a      	strb	r2, [r3, #0]
    5dc8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5dcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dd0:	781b      	ldrb	r3, [r3, #0]
    5dd2:	2bff      	cmp	r3, #255	; 0xff
    5dd4:	d105      	bne.n	5de2 <ground_calibrate+0x55a>
    5dd6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5dda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dde:	2200      	movs	r2, #0
    5de0:	701a      	strb	r2, [r3, #0]
    5de2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5de6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	461a      	mov	r2, r3
    5dee:	f243 2398 	movw	r3, #12952	; 0x3298
    5df2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5df6:	7899      	ldrb	r1, [r3, #2]
    5df8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e00:	5499      	strb	r1, [r3, r2]
    5e02:	4baf      	ldr	r3, [pc, #700]	; (60c0 <ground_calibrate+0x838>)
    5e04:	781a      	ldrb	r2, [r3, #0]
    5e06:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5e0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	4413      	add	r3, r2
    5e12:	b2da      	uxtb	r2, r3
    5e14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5e18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e1c:	701a      	strb	r2, [r3, #0]
    5e1e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5e22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e26:	781a      	ldrb	r2, [r3, #0]
    5e28:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5e2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	4413      	add	r3, r2
    5e34:	b2da      	uxtb	r2, r3
    5e36:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5e3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e3e:	701a      	strb	r2, [r3, #0]
    5e40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5e44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e48:	781b      	ldrb	r3, [r3, #0]
    5e4a:	3301      	adds	r3, #1
    5e4c:	b2da      	uxtb	r2, r3
    5e4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5e52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e56:	701a      	strb	r2, [r3, #0]
    5e58:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5e5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	2bff      	cmp	r3, #255	; 0xff
    5e64:	d105      	bne.n	5e72 <ground_calibrate+0x5ea>
    5e66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5e6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e6e:	2200      	movs	r2, #0
    5e70:	701a      	strb	r2, [r3, #0]
    5e72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5e76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e7a:	781b      	ldrb	r3, [r3, #0]
    5e7c:	461a      	mov	r2, r3
    5e7e:	f243 2398 	movw	r3, #12952	; 0x3298
    5e82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e86:	78d9      	ldrb	r1, [r3, #3]
    5e88:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5e8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e90:	5499      	strb	r1, [r3, r2]
    5e92:	4b8c      	ldr	r3, [pc, #560]	; (60c4 <ground_calibrate+0x83c>)
    5e94:	781a      	ldrb	r2, [r3, #0]
    5e96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5e9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	4413      	add	r3, r2
    5ea2:	b2da      	uxtb	r2, r3
    5ea4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5ea8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5eac:	701a      	strb	r2, [r3, #0]
    5eae:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5eb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5eb6:	781a      	ldrb	r2, [r3, #0]
    5eb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5ebc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ec0:	781b      	ldrb	r3, [r3, #0]
    5ec2:	4413      	add	r3, r2
    5ec4:	b2da      	uxtb	r2, r3
    5ec6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5eca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ece:	701a      	strb	r2, [r3, #0]
    5ed0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5ed4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	3301      	adds	r3, #1
    5edc:	b2da      	uxtb	r2, r3
    5ede:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5ee2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ee6:	701a      	strb	r2, [r3, #0]
    5ee8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5eec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	2bff      	cmp	r3, #255	; 0xff
    5ef4:	d105      	bne.n	5f02 <ground_calibrate+0x67a>
    5ef6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5efa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5efe:	2200      	movs	r2, #0
    5f00:	701a      	strb	r2, [r3, #0]
    5f02:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f0a:	781b      	ldrb	r3, [r3, #0]
    5f0c:	461a      	mov	r2, r3
    5f0e:	f243 239c 	movw	r3, #12956	; 0x329c
    5f12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f16:	7819      	ldrb	r1, [r3, #0]
    5f18:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5f1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f20:	5499      	strb	r1, [r3, r2]
    5f22:	f243 239c 	movw	r3, #12956	; 0x329c
    5f26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f2a:	781a      	ldrb	r2, [r3, #0]
    5f2c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5f30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	4413      	add	r3, r2
    5f38:	b2da      	uxtb	r2, r3
    5f3a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5f3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f42:	701a      	strb	r2, [r3, #0]
    5f44:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5f48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f4c:	781a      	ldrb	r2, [r3, #0]
    5f4e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5f52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f56:	781b      	ldrb	r3, [r3, #0]
    5f58:	4413      	add	r3, r2
    5f5a:	b2da      	uxtb	r2, r3
    5f5c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5f60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f64:	701a      	strb	r2, [r3, #0]
    5f66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f6e:	781b      	ldrb	r3, [r3, #0]
    5f70:	3301      	adds	r3, #1
    5f72:	b2da      	uxtb	r2, r3
    5f74:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f7c:	701a      	strb	r2, [r3, #0]
    5f7e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	2bff      	cmp	r3, #255	; 0xff
    5f8a:	d105      	bne.n	5f98 <ground_calibrate+0x710>
    5f8c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5f94:	2200      	movs	r2, #0
    5f96:	701a      	strb	r2, [r3, #0]
    5f98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5f9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	461a      	mov	r2, r3
    5fa4:	f243 239c 	movw	r3, #12956	; 0x329c
    5fa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fac:	7859      	ldrb	r1, [r3, #1]
    5fae:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    5fb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fb6:	5499      	strb	r1, [r3, r2]
    5fb8:	4b43      	ldr	r3, [pc, #268]	; (60c8 <ground_calibrate+0x840>)
    5fba:	781a      	ldrb	r2, [r3, #0]
    5fbc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5fc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	4413      	add	r3, r2
    5fc8:	b2da      	uxtb	r2, r3
    5fca:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5fce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fd2:	701a      	strb	r2, [r3, #0]
    5fd4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5fd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fdc:	781a      	ldrb	r2, [r3, #0]
    5fde:	f642 53a5 	movw	r3, #11685	; 0x2da5
    5fe2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	4413      	add	r3, r2
    5fea:	b2da      	uxtb	r2, r3
    5fec:	f642 53a6 	movw	r3, #11686	; 0x2da6
    5ff0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ff4:	701a      	strb	r2, [r3, #0]
    5ff6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    5ffa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5ffe:	781b      	ldrb	r3, [r3, #0]
    6000:	3301      	adds	r3, #1
    6002:	b2da      	uxtb	r2, r3
    6004:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6008:	f2c2 0301 	movt	r3, #8193	; 0x2001
    600c:	701a      	strb	r2, [r3, #0]
    600e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6012:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	2bff      	cmp	r3, #255	; 0xff
    601a:	d105      	bne.n	6028 <ground_calibrate+0x7a0>
    601c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6020:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6024:	2200      	movs	r2, #0
    6026:	701a      	strb	r2, [r3, #0]
    6028:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    602c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6030:	781b      	ldrb	r3, [r3, #0]
    6032:	461a      	mov	r2, r3
    6034:	f243 239c 	movw	r3, #12956	; 0x329c
    6038:	f2c2 0301 	movt	r3, #8193	; 0x2001
    603c:	7899      	ldrb	r1, [r3, #2]
    603e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6042:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6046:	5499      	strb	r1, [r3, r2]
    6048:	4b20      	ldr	r3, [pc, #128]	; (60cc <ground_calibrate+0x844>)
    604a:	781a      	ldrb	r2, [r3, #0]
    604c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6050:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	4413      	add	r3, r2
    6058:	b2da      	uxtb	r2, r3
    605a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    605e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6062:	701a      	strb	r2, [r3, #0]
    6064:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6068:	f2c2 0301 	movt	r3, #8193	; 0x2001
    606c:	781a      	ldrb	r2, [r3, #0]
    606e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6072:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	4413      	add	r3, r2
    607a:	b2da      	uxtb	r2, r3
    607c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6080:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6084:	701a      	strb	r2, [r3, #0]
    6086:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    608a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	3301      	adds	r3, #1
    6092:	b2da      	uxtb	r2, r3
    6094:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6098:	f2c2 0301 	movt	r3, #8193	; 0x2001
    609c:	701a      	strb	r2, [r3, #0]
    609e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    60a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60a6:	781b      	ldrb	r3, [r3, #0]
    60a8:	2bff      	cmp	r3, #255	; 0xff
    60aa:	d111      	bne.n	60d0 <ground_calibrate+0x848>
    60ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    60b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60b4:	2200      	movs	r2, #0
    60b6:	701a      	strb	r2, [r3, #0]
    60b8:	e00a      	b.n	60d0 <ground_calibrate+0x848>
    60ba:	bf00      	nop
    60bc:	20013299 	.word	0x20013299
    60c0:	2001329a 	.word	0x2001329a
    60c4:	2001329b 	.word	0x2001329b
    60c8:	2001329d 	.word	0x2001329d
    60cc:	2001329e 	.word	0x2001329e
    60d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    60d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60d8:	781b      	ldrb	r3, [r3, #0]
    60da:	461a      	mov	r2, r3
    60dc:	f243 239c 	movw	r3, #12956	; 0x329c
    60e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60e4:	78d9      	ldrb	r1, [r3, #3]
    60e6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    60ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60ee:	5499      	strb	r1, [r3, r2]
    60f0:	4bd3      	ldr	r3, [pc, #844]	; (6440 <ground_calibrate+0xbb8>)
    60f2:	781a      	ldrb	r2, [r3, #0]
    60f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    60f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60fc:	781b      	ldrb	r3, [r3, #0]
    60fe:	4413      	add	r3, r2
    6100:	b2da      	uxtb	r2, r3
    6102:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6106:	f2c2 0301 	movt	r3, #8193	; 0x2001
    610a:	701a      	strb	r2, [r3, #0]
    610c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6110:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6114:	781a      	ldrb	r2, [r3, #0]
    6116:	f642 53a5 	movw	r3, #11685	; 0x2da5
    611a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	4413      	add	r3, r2
    6122:	b2da      	uxtb	r2, r3
    6124:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6128:	f2c2 0301 	movt	r3, #8193	; 0x2001
    612c:	701a      	strb	r2, [r3, #0]
    612e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6132:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	3301      	adds	r3, #1
    613a:	b2da      	uxtb	r2, r3
    613c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6140:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6144:	701a      	strb	r2, [r3, #0]
    6146:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    614a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    614e:	781b      	ldrb	r3, [r3, #0]
    6150:	2bff      	cmp	r3, #255	; 0xff
    6152:	d105      	bne.n	6160 <ground_calibrate+0x8d8>
    6154:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6158:	f2c2 0301 	movt	r3, #8193	; 0x2001
    615c:	2200      	movs	r2, #0
    615e:	701a      	strb	r2, [r3, #0]
    6160:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6164:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	461a      	mov	r2, r3
    616c:	f243 2394 	movw	r3, #12948	; 0x3294
    6170:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6174:	7819      	ldrb	r1, [r3, #0]
    6176:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    617a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    617e:	5499      	strb	r1, [r3, r2]
    6180:	f243 2394 	movw	r3, #12948	; 0x3294
    6184:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6188:	781a      	ldrb	r2, [r3, #0]
    618a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    618e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	4413      	add	r3, r2
    6196:	b2da      	uxtb	r2, r3
    6198:	f642 53a5 	movw	r3, #11685	; 0x2da5
    619c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61a0:	701a      	strb	r2, [r3, #0]
    61a2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    61a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61aa:	781a      	ldrb	r2, [r3, #0]
    61ac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    61b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	4413      	add	r3, r2
    61b8:	b2da      	uxtb	r2, r3
    61ba:	f642 53a6 	movw	r3, #11686	; 0x2da6
    61be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61c2:	701a      	strb	r2, [r3, #0]
    61c4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    61c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	3301      	adds	r3, #1
    61d0:	b2da      	uxtb	r2, r3
    61d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    61d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61da:	701a      	strb	r2, [r3, #0]
    61dc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    61e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	2bff      	cmp	r3, #255	; 0xff
    61e8:	d105      	bne.n	61f6 <ground_calibrate+0x96e>
    61ea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    61ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61f2:	2200      	movs	r2, #0
    61f4:	701a      	strb	r2, [r3, #0]
    61f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    61fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	461a      	mov	r2, r3
    6202:	f243 2394 	movw	r3, #12948	; 0x3294
    6206:	f2c2 0301 	movt	r3, #8193	; 0x2001
    620a:	7859      	ldrb	r1, [r3, #1]
    620c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6210:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6214:	5499      	strb	r1, [r3, r2]
    6216:	4b8b      	ldr	r3, [pc, #556]	; (6444 <ground_calibrate+0xbbc>)
    6218:	781a      	ldrb	r2, [r3, #0]
    621a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    621e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	4413      	add	r3, r2
    6226:	b2da      	uxtb	r2, r3
    6228:	f642 53a5 	movw	r3, #11685	; 0x2da5
    622c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6230:	701a      	strb	r2, [r3, #0]
    6232:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6236:	f2c2 0301 	movt	r3, #8193	; 0x2001
    623a:	781a      	ldrb	r2, [r3, #0]
    623c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6240:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6244:	781b      	ldrb	r3, [r3, #0]
    6246:	4413      	add	r3, r2
    6248:	b2da      	uxtb	r2, r3
    624a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    624e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6258:	f2c2 0301 	movt	r3, #8193	; 0x2001
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	3301      	adds	r3, #1
    6260:	b2da      	uxtb	r2, r3
    6262:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6266:	f2c2 0301 	movt	r3, #8193	; 0x2001
    626a:	701a      	strb	r2, [r3, #0]
    626c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6270:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	2bff      	cmp	r3, #255	; 0xff
    6278:	d105      	bne.n	6286 <ground_calibrate+0x9fe>
    627a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    627e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6282:	2200      	movs	r2, #0
    6284:	701a      	strb	r2, [r3, #0]
    6286:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    628a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    628e:	781b      	ldrb	r3, [r3, #0]
    6290:	461a      	mov	r2, r3
    6292:	f243 2394 	movw	r3, #12948	; 0x3294
    6296:	f2c2 0301 	movt	r3, #8193	; 0x2001
    629a:	7899      	ldrb	r1, [r3, #2]
    629c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    62a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62a4:	5499      	strb	r1, [r3, r2]
    62a6:	4b68      	ldr	r3, [pc, #416]	; (6448 <ground_calibrate+0xbc0>)
    62a8:	781a      	ldrb	r2, [r3, #0]
    62aa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    62ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	4413      	add	r3, r2
    62b6:	b2da      	uxtb	r2, r3
    62b8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    62bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    62c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62ca:	781a      	ldrb	r2, [r3, #0]
    62cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    62d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	4413      	add	r3, r2
    62d8:	b2da      	uxtb	r2, r3
    62da:	f642 53a6 	movw	r3, #11686	; 0x2da6
    62de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62e2:	701a      	strb	r2, [r3, #0]
    62e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    62e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62ec:	781b      	ldrb	r3, [r3, #0]
    62ee:	3301      	adds	r3, #1
    62f0:	b2da      	uxtb	r2, r3
    62f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    62f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    62fa:	701a      	strb	r2, [r3, #0]
    62fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6300:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6304:	781b      	ldrb	r3, [r3, #0]
    6306:	2bff      	cmp	r3, #255	; 0xff
    6308:	d105      	bne.n	6316 <ground_calibrate+0xa8e>
    630a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    630e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6312:	2200      	movs	r2, #0
    6314:	701a      	strb	r2, [r3, #0]
    6316:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    631a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    631e:	781b      	ldrb	r3, [r3, #0]
    6320:	461a      	mov	r2, r3
    6322:	f243 2394 	movw	r3, #12948	; 0x3294
    6326:	f2c2 0301 	movt	r3, #8193	; 0x2001
    632a:	78d9      	ldrb	r1, [r3, #3]
    632c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6330:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6334:	5499      	strb	r1, [r3, r2]
    6336:	4b45      	ldr	r3, [pc, #276]	; (644c <ground_calibrate+0xbc4>)
    6338:	781a      	ldrb	r2, [r3, #0]
    633a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    633e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	4413      	add	r3, r2
    6346:	b2da      	uxtb	r2, r3
    6348:	f642 53a5 	movw	r3, #11685	; 0x2da5
    634c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6356:	f2c2 0301 	movt	r3, #8193	; 0x2001
    635a:	781a      	ldrb	r2, [r3, #0]
    635c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6360:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6364:	781b      	ldrb	r3, [r3, #0]
    6366:	4413      	add	r3, r2
    6368:	b2da      	uxtb	r2, r3
    636a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    636e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6372:	701a      	strb	r2, [r3, #0]
    6374:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6378:	f2c2 0301 	movt	r3, #8193	; 0x2001
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	3301      	adds	r3, #1
    6380:	b2da      	uxtb	r2, r3
    6382:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6386:	f2c2 0301 	movt	r3, #8193	; 0x2001
    638a:	701a      	strb	r2, [r3, #0]
    638c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6390:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6394:	781b      	ldrb	r3, [r3, #0]
    6396:	2bff      	cmp	r3, #255	; 0xff
    6398:	d105      	bne.n	63a6 <ground_calibrate+0xb1e>
    639a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    639e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63a2:	2200      	movs	r2, #0
    63a4:	701a      	strb	r2, [r3, #0]
    63a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    63aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	461a      	mov	r2, r3
    63b2:	f640 2322 	movw	r3, #2594	; 0xa22
    63b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ba:	7819      	ldrb	r1, [r3, #0]
    63bc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    63c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63c4:	5499      	strb	r1, [r3, r2]
    63c6:	f640 2322 	movw	r3, #2594	; 0xa22
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	781a      	ldrb	r2, [r3, #0]
    63d0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    63d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	4413      	add	r3, r2
    63dc:	b2da      	uxtb	r2, r3
    63de:	f642 53a5 	movw	r3, #11685	; 0x2da5
    63e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63e6:	701a      	strb	r2, [r3, #0]
    63e8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    63ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63f0:	781a      	ldrb	r2, [r3, #0]
    63f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    63f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    63fa:	781b      	ldrb	r3, [r3, #0]
    63fc:	4413      	add	r3, r2
    63fe:	b2da      	uxtb	r2, r3
    6400:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6404:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6408:	701a      	strb	r2, [r3, #0]
    640a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    640e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	3301      	adds	r3, #1
    6416:	b2da      	uxtb	r2, r3
    6418:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    641c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6420:	701a      	strb	r2, [r3, #0]
    6422:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6426:	f2c2 0301 	movt	r3, #8193	; 0x2001
    642a:	781b      	ldrb	r3, [r3, #0]
    642c:	2bff      	cmp	r3, #255	; 0xff
    642e:	d10f      	bne.n	6450 <ground_calibrate+0xbc8>
    6430:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6434:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6438:	2200      	movs	r2, #0
    643a:	701a      	strb	r2, [r3, #0]
    643c:	e008      	b.n	6450 <ground_calibrate+0xbc8>
    643e:	bf00      	nop
    6440:	2001329f 	.word	0x2001329f
    6444:	20013295 	.word	0x20013295
    6448:	20013296 	.word	0x20013296
    644c:	20013297 	.word	0x20013297
    6450:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6454:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	461a      	mov	r2, r3
    645c:	f640 2322 	movw	r3, #2594	; 0xa22
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	7859      	ldrb	r1, [r3, #1]
    6466:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    646a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    646e:	5499      	strb	r1, [r3, r2]
    6470:	4bd4      	ldr	r3, [pc, #848]	; (67c4 <ground_calibrate+0xf3c>)
    6472:	781a      	ldrb	r2, [r3, #0]
    6474:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6478:	f2c2 0301 	movt	r3, #8193	; 0x2001
    647c:	781b      	ldrb	r3, [r3, #0]
    647e:	4413      	add	r3, r2
    6480:	b2da      	uxtb	r2, r3
    6482:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6486:	f2c2 0301 	movt	r3, #8193	; 0x2001
    648a:	701a      	strb	r2, [r3, #0]
    648c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6490:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6494:	781a      	ldrb	r2, [r3, #0]
    6496:	f642 53a5 	movw	r3, #11685	; 0x2da5
    649a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    649e:	781b      	ldrb	r3, [r3, #0]
    64a0:	4413      	add	r3, r2
    64a2:	b2da      	uxtb	r2, r3
    64a4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    64a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64ac:	701a      	strb	r2, [r3, #0]
    64ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    64b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64b6:	781b      	ldrb	r3, [r3, #0]
    64b8:	3301      	adds	r3, #1
    64ba:	b2da      	uxtb	r2, r3
    64bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    64c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64c4:	701a      	strb	r2, [r3, #0]
    64c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    64ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64ce:	781b      	ldrb	r3, [r3, #0]
    64d0:	2bff      	cmp	r3, #255	; 0xff
    64d2:	d105      	bne.n	64e0 <ground_calibrate+0xc58>
    64d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    64d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64dc:	2200      	movs	r2, #0
    64de:	701a      	strb	r2, [r3, #0]
    64e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    64e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	461a      	mov	r2, r3
    64ec:	f640 2324 	movw	r3, #2596	; 0xa24
    64f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f4:	7819      	ldrb	r1, [r3, #0]
    64f6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    64fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    64fe:	5499      	strb	r1, [r3, r2]
    6500:	f640 2324 	movw	r3, #2596	; 0xa24
    6504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6508:	781a      	ldrb	r2, [r3, #0]
    650a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    650e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6512:	781b      	ldrb	r3, [r3, #0]
    6514:	4413      	add	r3, r2
    6516:	b2da      	uxtb	r2, r3
    6518:	f642 53a5 	movw	r3, #11685	; 0x2da5
    651c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6520:	701a      	strb	r2, [r3, #0]
    6522:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6526:	f2c2 0301 	movt	r3, #8193	; 0x2001
    652a:	781a      	ldrb	r2, [r3, #0]
    652c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6530:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6534:	781b      	ldrb	r3, [r3, #0]
    6536:	4413      	add	r3, r2
    6538:	b2da      	uxtb	r2, r3
    653a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    653e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6542:	701a      	strb	r2, [r3, #0]
    6544:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6548:	f2c2 0301 	movt	r3, #8193	; 0x2001
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	3301      	adds	r3, #1
    6550:	b2da      	uxtb	r2, r3
    6552:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6556:	f2c2 0301 	movt	r3, #8193	; 0x2001
    655a:	701a      	strb	r2, [r3, #0]
    655c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6560:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6564:	781b      	ldrb	r3, [r3, #0]
    6566:	2bff      	cmp	r3, #255	; 0xff
    6568:	d105      	bne.n	6576 <ground_calibrate+0xcee>
    656a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    656e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6572:	2200      	movs	r2, #0
    6574:	701a      	strb	r2, [r3, #0]
    6576:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    657a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	461a      	mov	r2, r3
    6582:	f640 2324 	movw	r3, #2596	; 0xa24
    6586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658a:	7859      	ldrb	r1, [r3, #1]
    658c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6590:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6594:	5499      	strb	r1, [r3, r2]
    6596:	4b8c      	ldr	r3, [pc, #560]	; (67c8 <ground_calibrate+0xf40>)
    6598:	781a      	ldrb	r2, [r3, #0]
    659a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    659e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65a2:	781b      	ldrb	r3, [r3, #0]
    65a4:	4413      	add	r3, r2
    65a6:	b2da      	uxtb	r2, r3
    65a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    65ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65b0:	701a      	strb	r2, [r3, #0]
    65b2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    65b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65ba:	781a      	ldrb	r2, [r3, #0]
    65bc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    65c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	4413      	add	r3, r2
    65c8:	b2da      	uxtb	r2, r3
    65ca:	f642 53a6 	movw	r3, #11686	; 0x2da6
    65ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65d2:	701a      	strb	r2, [r3, #0]
    65d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    65d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	3301      	adds	r3, #1
    65e0:	b2da      	uxtb	r2, r3
    65e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    65e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65ea:	701a      	strb	r2, [r3, #0]
    65ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    65f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    65f4:	781b      	ldrb	r3, [r3, #0]
    65f6:	2bff      	cmp	r3, #255	; 0xff
    65f8:	d105      	bne.n	6606 <ground_calibrate+0xd7e>
    65fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    65fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6602:	2200      	movs	r2, #0
    6604:	701a      	strb	r2, [r3, #0]
    6606:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    660a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	461a      	mov	r2, r3
    6612:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6616:	f2c2 0301 	movt	r3, #8193	; 0x2001
    661a:	7819      	ldrb	r1, [r3, #0]
    661c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6620:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6624:	5499      	strb	r1, [r3, r2]
    6626:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    662a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    662e:	781b      	ldrb	r3, [r3, #0]
    6630:	3301      	adds	r3, #1
    6632:	b2da      	uxtb	r2, r3
    6634:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6638:	f2c2 0301 	movt	r3, #8193	; 0x2001
    663c:	701a      	strb	r2, [r3, #0]
    663e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6642:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	2bff      	cmp	r3, #255	; 0xff
    664a:	d105      	bne.n	6658 <ground_calibrate+0xdd0>
    664c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6650:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6654:	2200      	movs	r2, #0
    6656:	701a      	strb	r2, [r3, #0]
    6658:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    665c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	461a      	mov	r2, r3
    6664:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6668:	f2c2 0301 	movt	r3, #8193	; 0x2001
    666c:	7819      	ldrb	r1, [r3, #0]
    666e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6672:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6676:	5499      	strb	r1, [r3, r2]
    6678:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    667c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	3301      	adds	r3, #1
    6684:	b2da      	uxtb	r2, r3
    6686:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    668a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    668e:	701a      	strb	r2, [r3, #0]
    6690:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6694:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	2bff      	cmp	r3, #255	; 0xff
    669c:	d105      	bne.n	66aa <ground_calibrate+0xe22>
    669e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    66a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66a6:	2200      	movs	r2, #0
    66a8:	701a      	strb	r2, [r3, #0]
    66aa:	f242 0339 	movw	r3, #8249	; 0x2039
    66ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	b2db      	uxtb	r3, r3
    66b6:	f003 0310 	and.w	r3, r3, #16
    66ba:	2b00      	cmp	r3, #0
    66bc:	d15a      	bne.n	6774 <ground_calibrate+0xeec>
    66be:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    66c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	b2db      	uxtb	r3, r3
    66ca:	461a      	mov	r2, r3
    66cc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    66d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66d4:	5c9a      	ldrb	r2, [r3, r2]
    66d6:	f642 53a3 	movw	r3, #11683	; 0x2da3
    66da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66de:	701a      	strb	r2, [r3, #0]
    66e0:	f642 53a4 	movw	r3, #11684	; 0x2da4
    66e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66e8:	2200      	movs	r2, #0
    66ea:	701a      	strb	r2, [r3, #0]
    66ec:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    66f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	b2db      	uxtb	r3, r3
    66f8:	3301      	adds	r3, #1
    66fa:	b2da      	uxtb	r2, r3
    66fc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6700:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6704:	701a      	strb	r2, [r3, #0]
    6706:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    670a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	b2db      	uxtb	r3, r3
    6712:	2bff      	cmp	r3, #255	; 0xff
    6714:	d105      	bne.n	6722 <ground_calibrate+0xe9a>
    6716:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    671a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    671e:	2200      	movs	r2, #0
    6720:	701a      	strb	r2, [r3, #0]
    6722:	f242 0338 	movw	r3, #8248	; 0x2038
    6726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672a:	f242 0238 	movw	r2, #8248	; 0x2038
    672e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6732:	7812      	ldrb	r2, [r2, #0]
    6734:	b2d2      	uxtb	r2, r2
    6736:	f042 0201 	orr.w	r2, r2, #1
    673a:	b2d2      	uxtb	r2, r2
    673c:	701a      	strb	r2, [r3, #0]
    673e:	f242 0339 	movw	r3, #8249	; 0x2039
    6742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6746:	f242 0239 	movw	r2, #8249	; 0x2039
    674a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    674e:	7812      	ldrb	r2, [r2, #0]
    6750:	b2d2      	uxtb	r2, r2
    6752:	f042 0210 	orr.w	r2, r2, #16
    6756:	b2d2      	uxtb	r2, r2
    6758:	701a      	strb	r2, [r3, #0]
    675a:	e00b      	b.n	6774 <ground_calibrate+0xeec>
    675c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    6760:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6764:	781b      	ldrb	r3, [r3, #0]
    6766:	3301      	adds	r3, #1
    6768:	b2da      	uxtb	r2, r3
    676a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    676e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6772:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6774:	f642 439a 	movw	r3, #11418	; 0x2c9a
    6778:	f2c2 0301 	movt	r3, #8193	; 0x2001
    677c:	2202      	movs	r2, #2
    677e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6780:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6784:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6788:	781a      	ldrb	r2, [r3, #0]
    678a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    678e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6792:	781b      	ldrb	r3, [r3, #0]
    6794:	b2db      	uxtb	r3, r3
    6796:	429a      	cmp	r2, r3
    6798:	d318      	bcc.n	67cc <ground_calibrate+0xf44>
    679a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    679e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    67a2:	781b      	ldrb	r3, [r3, #0]
    67a4:	b2db      	uxtb	r3, r3
    67a6:	461a      	mov	r2, r3
    67a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    67ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	1ad3      	subs	r3, r2, r3
    67b4:	33ff      	adds	r3, #255	; 0xff
    67b6:	2b06      	cmp	r3, #6
    67b8:	bfd4      	ite	le
    67ba:	2300      	movle	r3, #0
    67bc:	2301      	movgt	r3, #1
    67be:	b2db      	uxtb	r3, r3
    67c0:	e016      	b.n	67f0 <ground_calibrate+0xf68>
    67c2:	bf00      	nop
    67c4:	20000a23 	.word	0x20000a23
    67c8:	20000a25 	.word	0x20000a25
    67cc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    67d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	b2db      	uxtb	r3, r3
    67d8:	461a      	mov	r2, r3
    67da:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    67de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    67e2:	781b      	ldrb	r3, [r3, #0]
    67e4:	1ad3      	subs	r3, r2, r3
    67e6:	2b06      	cmp	r3, #6
    67e8:	bfd4      	ite	le
    67ea:	2300      	movle	r3, #0
    67ec:	2301      	movgt	r3, #1
    67ee:	b2db      	uxtb	r3, r3
    67f0:	2b00      	cmp	r3, #0
    67f2:	f000 8194 	beq.w	6b1e <ground_calibrate+0x1296>
    67f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    67fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	461a      	mov	r2, r3
    6802:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6806:	f2c2 0301 	movt	r3, #8193	; 0x2001
    680a:	2105      	movs	r1, #5
    680c:	5499      	strb	r1, [r3, r2]
    680e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6812:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	3301      	adds	r3, #1
    681a:	b2da      	uxtb	r2, r3
    681c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6820:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    682a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	2bff      	cmp	r3, #255	; 0xff
    6832:	d105      	bne.n	6840 <ground_calibrate+0xfb8>
    6834:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6838:	f2c2 0301 	movt	r3, #8193	; 0x2001
    683c:	2200      	movs	r2, #0
    683e:	701a      	strb	r2, [r3, #0]
    6840:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6844:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	461a      	mov	r2, r3
    684c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6850:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6854:	2103      	movs	r1, #3
    6856:	5499      	strb	r1, [r3, r2]
    6858:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    685c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	3301      	adds	r3, #1
    6864:	b2da      	uxtb	r2, r3
    6866:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    686a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    686e:	701a      	strb	r2, [r3, #0]
    6870:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6874:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	2bff      	cmp	r3, #255	; 0xff
    687c:	d105      	bne.n	688a <ground_calibrate+0x1002>
    687e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6882:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6886:	2200      	movs	r2, #0
    6888:	701a      	strb	r2, [r3, #0]
    688a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    688e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6892:	2203      	movs	r2, #3
    6894:	701a      	strb	r2, [r3, #0]
    6896:	f642 53a6 	movw	r3, #11686	; 0x2da6
    689a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    689e:	2203      	movs	r2, #3
    68a0:	701a      	strb	r2, [r3, #0]
    68a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    68a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68aa:	781b      	ldrb	r3, [r3, #0]
    68ac:	461a      	mov	r2, r3
    68ae:	f640 2320 	movw	r3, #2592	; 0xa20
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	7819      	ldrb	r1, [r3, #0]
    68b8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    68bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68c0:	5499      	strb	r1, [r3, r2]
    68c2:	f640 2320 	movw	r3, #2592	; 0xa20
    68c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ca:	781a      	ldrb	r2, [r3, #0]
    68cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    68d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	4413      	add	r3, r2
    68d8:	b2da      	uxtb	r2, r3
    68da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    68de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68e2:	701a      	strb	r2, [r3, #0]
    68e4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    68e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68ec:	781a      	ldrb	r2, [r3, #0]
    68ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    68f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	4413      	add	r3, r2
    68fa:	b2da      	uxtb	r2, r3
    68fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6900:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6904:	701a      	strb	r2, [r3, #0]
    6906:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    690a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    690e:	781b      	ldrb	r3, [r3, #0]
    6910:	3301      	adds	r3, #1
    6912:	b2da      	uxtb	r2, r3
    6914:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6918:	f2c2 0301 	movt	r3, #8193	; 0x2001
    691c:	701a      	strb	r2, [r3, #0]
    691e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6922:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	2bff      	cmp	r3, #255	; 0xff
    692a:	d105      	bne.n	6938 <ground_calibrate+0x10b0>
    692c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6930:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6934:	2200      	movs	r2, #0
    6936:	701a      	strb	r2, [r3, #0]
    6938:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    693c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6940:	781b      	ldrb	r3, [r3, #0]
    6942:	461a      	mov	r2, r3
    6944:	f640 2320 	movw	r3, #2592	; 0xa20
    6948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694c:	7859      	ldrb	r1, [r3, #1]
    694e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6952:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6956:	5499      	strb	r1, [r3, r2]
    6958:	4b77      	ldr	r3, [pc, #476]	; (6b38 <ground_calibrate+0x12b0>)
    695a:	781a      	ldrb	r2, [r3, #0]
    695c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6960:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	4413      	add	r3, r2
    6968:	b2da      	uxtb	r2, r3
    696a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    696e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6972:	701a      	strb	r2, [r3, #0]
    6974:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6978:	f2c2 0301 	movt	r3, #8193	; 0x2001
    697c:	781a      	ldrb	r2, [r3, #0]
    697e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6982:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	4413      	add	r3, r2
    698a:	b2da      	uxtb	r2, r3
    698c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6990:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6994:	701a      	strb	r2, [r3, #0]
    6996:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    699a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	3301      	adds	r3, #1
    69a2:	b2da      	uxtb	r2, r3
    69a4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69ac:	701a      	strb	r2, [r3, #0]
    69ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	2bff      	cmp	r3, #255	; 0xff
    69ba:	d105      	bne.n	69c8 <ground_calibrate+0x1140>
    69bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69c4:	2200      	movs	r2, #0
    69c6:	701a      	strb	r2, [r3, #0]
    69c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69d0:	781b      	ldrb	r3, [r3, #0]
    69d2:	461a      	mov	r2, r3
    69d4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    69d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69dc:	7819      	ldrb	r1, [r3, #0]
    69de:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    69e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69e6:	5499      	strb	r1, [r3, r2]
    69e8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	3301      	adds	r3, #1
    69f4:	b2da      	uxtb	r2, r3
    69f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    69fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    69fe:	701a      	strb	r2, [r3, #0]
    6a00:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a08:	781b      	ldrb	r3, [r3, #0]
    6a0a:	2bff      	cmp	r3, #255	; 0xff
    6a0c:	d105      	bne.n	6a1a <ground_calibrate+0x1192>
    6a0e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a16:	2200      	movs	r2, #0
    6a18:	701a      	strb	r2, [r3, #0]
    6a1a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a22:	781b      	ldrb	r3, [r3, #0]
    6a24:	461a      	mov	r2, r3
    6a26:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6a2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a2e:	7819      	ldrb	r1, [r3, #0]
    6a30:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6a34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a38:	5499      	strb	r1, [r3, r2]
    6a3a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	3301      	adds	r3, #1
    6a46:	b2da      	uxtb	r2, r3
    6a48:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a50:	701a      	strb	r2, [r3, #0]
    6a52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	2bff      	cmp	r3, #255	; 0xff
    6a5e:	d105      	bne.n	6a6c <ground_calibrate+0x11e4>
    6a60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6a64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a68:	2200      	movs	r2, #0
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f242 0339 	movw	r3, #8249	; 0x2039
    6a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	b2db      	uxtb	r3, r3
    6a78:	f003 0310 	and.w	r3, r3, #16
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d15a      	bne.n	6b36 <ground_calibrate+0x12ae>
    6a80:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6a84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a88:	781b      	ldrb	r3, [r3, #0]
    6a8a:	b2db      	uxtb	r3, r3
    6a8c:	461a      	mov	r2, r3
    6a8e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6a92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6a96:	5c9a      	ldrb	r2, [r3, r2]
    6a98:	f642 53a3 	movw	r3, #11683	; 0x2da3
    6a9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6aa0:	701a      	strb	r2, [r3, #0]
    6aa2:	f642 53a4 	movw	r3, #11684	; 0x2da4
    6aa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6aaa:	2200      	movs	r2, #0
    6aac:	701a      	strb	r2, [r3, #0]
    6aae:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6ab2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ab6:	781b      	ldrb	r3, [r3, #0]
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	3301      	adds	r3, #1
    6abc:	b2da      	uxtb	r2, r3
    6abe:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6ac2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ac6:	701a      	strb	r2, [r3, #0]
    6ac8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6acc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ad0:	781b      	ldrb	r3, [r3, #0]
    6ad2:	b2db      	uxtb	r3, r3
    6ad4:	2bff      	cmp	r3, #255	; 0xff
    6ad6:	d105      	bne.n	6ae4 <ground_calibrate+0x125c>
    6ad8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6adc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ae0:	2200      	movs	r2, #0
    6ae2:	701a      	strb	r2, [r3, #0]
    6ae4:	f242 0338 	movw	r3, #8248	; 0x2038
    6ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aec:	f242 0238 	movw	r2, #8248	; 0x2038
    6af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6af4:	7812      	ldrb	r2, [r2, #0]
    6af6:	b2d2      	uxtb	r2, r2
    6af8:	f042 0201 	orr.w	r2, r2, #1
    6afc:	b2d2      	uxtb	r2, r2
    6afe:	701a      	strb	r2, [r3, #0]
    6b00:	f242 0339 	movw	r3, #8249	; 0x2039
    6b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b08:	f242 0239 	movw	r2, #8249	; 0x2039
    6b0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b10:	7812      	ldrb	r2, [r2, #0]
    6b12:	b2d2      	uxtb	r2, r2
    6b14:	f042 0210 	orr.w	r2, r2, #16
    6b18:	b2d2      	uxtb	r2, r2
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	e00b      	b.n	6b36 <ground_calibrate+0x12ae>
    6b1e:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    6b22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	3301      	adds	r3, #1
    6b2a:	b2da      	uxtb	r2, r3
    6b2c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    6b30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b34:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6b36:	bd80      	pop	{r7, pc}
    6b38:	20000a21 	.word	0x20000a21

00006b3c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6b3c:	b480      	push	{r7}
    6b3e:	b083      	sub	sp, #12
    6b40:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6b42:	f642 4384 	movw	r3, #11396	; 0x2c84
    6b46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	2b03      	cmp	r3, #3
    6b4e:	d10c      	bne.n	6b6a <pprz_mode_update+0x2e>
    6b50:	f642 4388 	movw	r3, #11400	; 0x2c88
    6b54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b58:	781b      	ldrb	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d032      	beq.n	6bc4 <pprz_mode_update+0x88>
    6b5e:	f642 4388 	movw	r3, #11400	; 0x2c88
    6b62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b66:	2200      	movs	r2, #0
    6b68:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6b6a:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6b6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b72:	891b      	ldrh	r3, [r3, #8]
    6b74:	b21b      	sxth	r3, r3
    6b76:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6b7a:	dc0f      	bgt.n	6b9c <pprz_mode_update+0x60>
    6b7c:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6b80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6b84:	891b      	ldrh	r3, [r3, #8]
    6b86:	b21a      	sxth	r2, r3
    6b88:	f64e 5341 	movw	r3, #60737	; 0xed41
    6b8c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6b90:	429a      	cmp	r2, r3
    6b92:	bfb4      	ite	lt
    6b94:	2300      	movlt	r3, #0
    6b96:	2301      	movge	r3, #1
    6b98:	b2db      	uxtb	r3, r3
    6b9a:	e000      	b.n	6b9e <pprz_mode_update+0x62>
    6b9c:	2302      	movs	r3, #2
    6b9e:	71fb      	strb	r3, [r7, #7]
    6ba0:	f642 4384 	movw	r3, #11396	; 0x2c84
    6ba4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	79fa      	ldrb	r2, [r7, #7]
    6bac:	429a      	cmp	r2, r3
    6bae:	d007      	beq.n	6bc0 <pprz_mode_update+0x84>
    6bb0:	f642 4384 	movw	r3, #11396	; 0x2c84
    6bb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6bb8:	79fa      	ldrb	r2, [r7, #7]
    6bba:	701a      	strb	r2, [r3, #0]
    6bbc:	2301      	movs	r3, #1
    6bbe:	e002      	b.n	6bc6 <pprz_mode_update+0x8a>
    6bc0:	2300      	movs	r3, #0
    6bc2:	e000      	b.n	6bc6 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6bc4:	2300      	movs	r3, #0
}
    6bc6:	4618      	mov	r0, r3
    6bc8:	370c      	adds	r7, #12
    6bca:	46bd      	mov	sp, r7
    6bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bd0:	4770      	bx	lr
    6bd2:	bf00      	nop

00006bd4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6bd4:	b480      	push	{r7}
    6bd6:	b083      	sub	sp, #12
    6bd8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6bda:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6bde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6be2:	89db      	ldrh	r3, [r3, #14]
    6be4:	b21a      	sxth	r2, r3
    6be6:	f640 437f 	movw	r3, #3199	; 0xc7f
    6bea:	429a      	cmp	r2, r3
    6bec:	bfd4      	ite	le
    6bee:	2300      	movle	r3, #0
    6bf0:	2301      	movgt	r3, #1
    6bf2:	b2db      	uxtb	r3, r3
    6bf4:	71fb      	strb	r3, [r7, #7]
    6bf6:	f640 231c 	movw	r3, #2588	; 0xa1c
    6bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfe:	781b      	ldrb	r3, [r3, #0]
    6c00:	79fa      	ldrb	r2, [r7, #7]
    6c02:	429a      	cmp	r2, r3
    6c04:	d007      	beq.n	6c16 <ir_estim_mode_update+0x42>
    6c06:	f640 231c 	movw	r3, #2588	; 0xa1c
    6c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c0e:	79fa      	ldrb	r2, [r7, #7]
    6c10:	701a      	strb	r2, [r3, #0]
    6c12:	2301      	movs	r3, #1
    6c14:	e000      	b.n	6c18 <ir_estim_mode_update+0x44>
    6c16:	2300      	movs	r3, #0
}
    6c18:	4618      	mov	r0, r3
    6c1a:	370c      	adds	r7, #12
    6c1c:	46bd      	mov	sp, r7
    6c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c22:	4770      	bx	lr

00006c24 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6c24:	b480      	push	{r7}
    6c26:	b083      	sub	sp, #12
    6c28:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6c2a:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6c2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c32:	7cdb      	ldrb	r3, [r3, #19]
    6c34:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6c36:	f642 438b 	movw	r3, #11403	; 0x2c8b
    6c3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c3e:	781b      	ldrb	r3, [r3, #0]
    6c40:	79fa      	ldrb	r2, [r7, #7]
    6c42:	429a      	cmp	r2, r3
    6c44:	d017      	beq.n	6c76 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6c46:	f642 438b 	movw	r3, #11403	; 0x2c8b
    6c4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	461a      	mov	r2, r3
    6c52:	79fb      	ldrb	r3, [r7, #7]
    6c54:	4053      	eors	r3, r2
    6c56:	f003 0303 	and.w	r3, r3, #3
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	bf0c      	ite	eq
    6c5e:	2300      	moveq	r3, #0
    6c60:	2301      	movne	r3, #1
    6c62:	b2db      	uxtb	r3, r3
    6c64:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    6c66:	f642 438b 	movw	r3, #11403	; 0x2c8b
    6c6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c6e:	79fa      	ldrb	r2, [r7, #7]
    6c70:	701a      	strb	r2, [r3, #0]
    return changed;
    6c72:	79bb      	ldrb	r3, [r7, #6]
    6c74:	e000      	b.n	6c78 <mcu1_status_update+0x54>
  }
  return FALSE;
    6c76:	2300      	movs	r3, #0
}
    6c78:	4618      	mov	r0, r3
    6c7a:	370c      	adds	r7, #12
    6c7c:	46bd      	mov	sp, r7
    6c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c82:	4770      	bx	lr

00006c84 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    6c84:	b480      	push	{r7}
    6c86:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    6c88:	f243 23b4 	movw	r3, #12980	; 0x32b4
    6c8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d12a      	bne.n	6cec <events_update+0x68>
    6c96:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6c9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6c9e:	895b      	ldrh	r3, [r3, #10]
    6ca0:	b21b      	sxth	r3, r3
    6ca2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    6ca6:	dd21      	ble.n	6cec <events_update+0x68>
    6ca8:	f642 439c 	movw	r3, #11420	; 0x2c9c
    6cac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6cb0:	881b      	ldrh	r3, [r3, #0]
    6cb2:	2b13      	cmp	r3, #19
    6cb4:	d819      	bhi.n	6cea <events_update+0x66>
    6cb6:	f642 439c 	movw	r3, #11420	; 0x2c9c
    6cba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6cbe:	881b      	ldrh	r3, [r3, #0]
    6cc0:	3301      	adds	r3, #1
    6cc2:	b29a      	uxth	r2, r3
    6cc4:	f642 439c 	movw	r3, #11420	; 0x2c9c
    6cc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ccc:	801a      	strh	r2, [r3, #0]
    6cce:	f642 439c 	movw	r3, #11420	; 0x2c9c
    6cd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6cd6:	881b      	ldrh	r3, [r3, #0]
    6cd8:	2b14      	cmp	r3, #20
    6cda:	d106      	bne.n	6cea <events_update+0x66>
    6cdc:	f642 4388 	movw	r3, #11400	; 0x2c88
    6ce0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ce4:	2201      	movs	r2, #1
    6ce6:	701a      	strb	r2, [r3, #0]
    6ce8:	e00c      	b.n	6d04 <events_update+0x80>
    6cea:	e00b      	b.n	6d04 <events_update+0x80>
    6cec:	f642 439c 	movw	r3, #11420	; 0x2c9c
    6cf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6cf4:	2200      	movs	r2, #0
    6cf6:	801a      	strh	r2, [r3, #0]
    6cf8:	f642 4388 	movw	r3, #11400	; 0x2c88
    6cfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d00:	2200      	movs	r2, #0
    6d02:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    6d04:	f243 23b4 	movw	r3, #12980	; 0x32b4
    6d08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d0c:	781b      	ldrb	r3, [r3, #0]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	d12a      	bne.n	6d68 <events_update+0xe4>
    6d12:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6d16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d1a:	895b      	ldrh	r3, [r3, #10]
    6d1c:	b21b      	sxth	r3, r3
    6d1e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    6d22:	da21      	bge.n	6d68 <events_update+0xe4>
    6d24:	f642 439e 	movw	r3, #11422	; 0x2c9e
    6d28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d2c:	881b      	ldrh	r3, [r3, #0]
    6d2e:	2b13      	cmp	r3, #19
    6d30:	d819      	bhi.n	6d66 <events_update+0xe2>
    6d32:	f642 439e 	movw	r3, #11422	; 0x2c9e
    6d36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d3a:	881b      	ldrh	r3, [r3, #0]
    6d3c:	3301      	adds	r3, #1
    6d3e:	b29a      	uxth	r2, r3
    6d40:	f642 439e 	movw	r3, #11422	; 0x2c9e
    6d44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d48:	801a      	strh	r2, [r3, #0]
    6d4a:	f642 439e 	movw	r3, #11422	; 0x2c9e
    6d4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d52:	881b      	ldrh	r3, [r3, #0]
    6d54:	2b14      	cmp	r3, #20
    6d56:	d106      	bne.n	6d66 <events_update+0xe2>
    6d58:	f642 4389 	movw	r3, #11401	; 0x2c89
    6d5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d60:	2201      	movs	r2, #1
    6d62:	701a      	strb	r2, [r3, #0]
    6d64:	e00c      	b.n	6d80 <events_update+0xfc>
    6d66:	e00b      	b.n	6d80 <events_update+0xfc>
    6d68:	f642 439e 	movw	r3, #11422	; 0x2c9e
    6d6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d70:	2200      	movs	r2, #0
    6d72:	801a      	strh	r2, [r3, #0]
    6d74:	f642 4389 	movw	r3, #11401	; 0x2c89
    6d78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d7c:	2200      	movs	r2, #0
    6d7e:	701a      	strb	r2, [r3, #0]
}  
    6d80:	46bd      	mov	sp, r7
    6d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d86:	4770      	bx	lr

00006d88 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    6d88:	b480      	push	{r7}
    6d8a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    6d8c:	f642 53a8 	movw	r3, #11688	; 0x2da8
    6d90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d94:	88da      	ldrh	r2, [r3, #6]
    6d96:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    6d9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6d9e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    6da0:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    6da4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6da8:	2200      	movs	r2, #0
    6daa:	74da      	strb	r2, [r3, #19]
}
    6dac:	46bd      	mov	sp, r7
    6dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    6db2:	4770      	bx	lr

00006db4 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    6db4:	b480      	push	{r7}
    6db6:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    6db8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6dbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6dc0:	781a      	ldrb	r2, [r3, #0]
    6dc2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6dc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6dca:	781b      	ldrb	r3, [r3, #0]
    6dcc:	b2db      	uxtb	r3, r3
    6dce:	429a      	cmp	r2, r3
    6dd0:	d313      	bcc.n	6dfa <send_boot+0x46>
    6dd2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6dd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	b2db      	uxtb	r3, r3
    6dde:	461a      	mov	r2, r3
    6de0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6de4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6de8:	781b      	ldrb	r3, [r3, #0]
    6dea:	1ad3      	subs	r3, r2, r3
    6dec:	33ff      	adds	r3, #255	; 0xff
    6dee:	2b06      	cmp	r3, #6
    6df0:	bfd4      	ite	le
    6df2:	2300      	movle	r3, #0
    6df4:	2301      	movgt	r3, #1
    6df6:	b2db      	uxtb	r3, r3
    6df8:	e011      	b.n	6e1e <send_boot+0x6a>
    6dfa:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    6dfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e02:	781b      	ldrb	r3, [r3, #0]
    6e04:	b2db      	uxtb	r3, r3
    6e06:	461a      	mov	r2, r3
    6e08:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	1ad3      	subs	r3, r2, r3
    6e14:	2b06      	cmp	r3, #6
    6e16:	bfd4      	ite	le
    6e18:	2300      	movle	r3, #0
    6e1a:	2301      	movgt	r3, #1
    6e1c:	b2db      	uxtb	r3, r3
    6e1e:	2b00      	cmp	r3, #0
    6e20:	f000 8194 	beq.w	714c <send_boot+0x398>
    6e24:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	461a      	mov	r2, r3
    6e30:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6e34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e38:	2105      	movs	r1, #5
    6e3a:	5499      	strb	r1, [r3, r2]
    6e3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e44:	781b      	ldrb	r3, [r3, #0]
    6e46:	3301      	adds	r3, #1
    6e48:	b2da      	uxtb	r2, r3
    6e4a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e52:	701a      	strb	r2, [r3, #0]
    6e54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	2bff      	cmp	r3, #255	; 0xff
    6e60:	d105      	bne.n	6e6e <send_boot+0xba>
    6e62:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e6a:	2200      	movs	r2, #0
    6e6c:	701a      	strb	r2, [r3, #0]
    6e6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e76:	781b      	ldrb	r3, [r3, #0]
    6e78:	461a      	mov	r2, r3
    6e7a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6e7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e82:	2101      	movs	r1, #1
    6e84:	5499      	strb	r1, [r3, r2]
    6e86:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	3301      	adds	r3, #1
    6e92:	b2da      	uxtb	r2, r3
    6e94:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6e98:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6e9c:	701a      	strb	r2, [r3, #0]
    6e9e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6ea2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	2bff      	cmp	r3, #255	; 0xff
    6eaa:	d105      	bne.n	6eb8 <send_boot+0x104>
    6eac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6eb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6eb4:	2200      	movs	r2, #0
    6eb6:	701a      	strb	r2, [r3, #0]
    6eb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6ebc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ec0:	2201      	movs	r2, #1
    6ec2:	701a      	strb	r2, [r3, #0]
    6ec4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6ec8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ecc:	2201      	movs	r2, #1
    6ece:	701a      	strb	r2, [r3, #0]
    6ed0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6ed4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	461a      	mov	r2, r3
    6edc:	f248 33ca 	movw	r3, #33738	; 0x83ca
    6ee0:	f2c0 0301 	movt	r3, #1
    6ee4:	7819      	ldrb	r1, [r3, #0]
    6ee6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6eea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6eee:	5499      	strb	r1, [r3, r2]
    6ef0:	f248 33ca 	movw	r3, #33738	; 0x83ca
    6ef4:	f2c0 0301 	movt	r3, #1
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6efe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f02:	781b      	ldrb	r3, [r3, #0]
    6f04:	4413      	add	r3, r2
    6f06:	b2da      	uxtb	r2, r3
    6f08:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6f0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f10:	701a      	strb	r2, [r3, #0]
    6f12:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6f16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f1a:	781a      	ldrb	r2, [r3, #0]
    6f1c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6f20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f24:	781b      	ldrb	r3, [r3, #0]
    6f26:	4413      	add	r3, r2
    6f28:	b2da      	uxtb	r2, r3
    6f2a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6f2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f32:	701a      	strb	r2, [r3, #0]
    6f34:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6f38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	3301      	adds	r3, #1
    6f40:	b2da      	uxtb	r2, r3
    6f42:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6f46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f4a:	701a      	strb	r2, [r3, #0]
    6f4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6f50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	2bff      	cmp	r3, #255	; 0xff
    6f58:	d105      	bne.n	6f66 <send_boot+0x1b2>
    6f5a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6f5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f62:	2200      	movs	r2, #0
    6f64:	701a      	strb	r2, [r3, #0]
    6f66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6f6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	461a      	mov	r2, r3
    6f72:	f248 33ca 	movw	r3, #33738	; 0x83ca
    6f76:	f2c0 0301 	movt	r3, #1
    6f7a:	7859      	ldrb	r1, [r3, #1]
    6f7c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    6f80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f84:	5499      	strb	r1, [r3, r2]
    6f86:	4b88      	ldr	r3, [pc, #544]	; (71a8 <send_boot+0x3f4>)
    6f88:	781a      	ldrb	r2, [r3, #0]
    6f8a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6f8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	4413      	add	r3, r2
    6f96:	b2da      	uxtb	r2, r3
    6f98:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6f9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fa0:	701a      	strb	r2, [r3, #0]
    6fa2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6fa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6faa:	781a      	ldrb	r2, [r3, #0]
    6fac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    6fb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	4413      	add	r3, r2
    6fb8:	b2da      	uxtb	r2, r3
    6fba:	f642 53a6 	movw	r3, #11686	; 0x2da6
    6fbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fc2:	701a      	strb	r2, [r3, #0]
    6fc4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6fc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	3301      	adds	r3, #1
    6fd0:	b2da      	uxtb	r2, r3
    6fd2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6fd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fda:	701a      	strb	r2, [r3, #0]
    6fdc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6fe0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	2bff      	cmp	r3, #255	; 0xff
    6fe8:	d105      	bne.n	6ff6 <send_boot+0x242>
    6fea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6fee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ff2:	2200      	movs	r2, #0
    6ff4:	701a      	strb	r2, [r3, #0]
    6ff6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    6ffa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	461a      	mov	r2, r3
    7002:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7006:	f2c2 0301 	movt	r3, #8193	; 0x2001
    700a:	7819      	ldrb	r1, [r3, #0]
    700c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7010:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7014:	5499      	strb	r1, [r3, r2]
    7016:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    701a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	3301      	adds	r3, #1
    7022:	b2da      	uxtb	r2, r3
    7024:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7028:	f2c2 0301 	movt	r3, #8193	; 0x2001
    702c:	701a      	strb	r2, [r3, #0]
    702e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7032:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	2bff      	cmp	r3, #255	; 0xff
    703a:	d105      	bne.n	7048 <send_boot+0x294>
    703c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7040:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7044:	2200      	movs	r2, #0
    7046:	701a      	strb	r2, [r3, #0]
    7048:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    704c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	461a      	mov	r2, r3
    7054:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7058:	f2c2 0301 	movt	r3, #8193	; 0x2001
    705c:	7819      	ldrb	r1, [r3, #0]
    705e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7062:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7066:	5499      	strb	r1, [r3, r2]
    7068:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    706c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	3301      	adds	r3, #1
    7074:	b2da      	uxtb	r2, r3
    7076:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    707a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    707e:	701a      	strb	r2, [r3, #0]
    7080:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7084:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	2bff      	cmp	r3, #255	; 0xff
    708c:	d105      	bne.n	709a <send_boot+0x2e6>
    708e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7092:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7096:	2200      	movs	r2, #0
    7098:	701a      	strb	r2, [r3, #0]
    709a:	f242 0339 	movw	r3, #8249	; 0x2039
    709e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a2:	781b      	ldrb	r3, [r3, #0]
    70a4:	b2db      	uxtb	r3, r3
    70a6:	f003 0310 	and.w	r3, r3, #16
    70aa:	2b00      	cmp	r3, #0
    70ac:	d15a      	bne.n	7164 <send_boot+0x3b0>
    70ae:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    70b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	b2db      	uxtb	r3, r3
    70ba:	461a      	mov	r2, r3
    70bc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    70c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70c4:	5c9a      	ldrb	r2, [r3, r2]
    70c6:	f642 53a3 	movw	r3, #11683	; 0x2da3
    70ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70ce:	701a      	strb	r2, [r3, #0]
    70d0:	f642 53a4 	movw	r3, #11684	; 0x2da4
    70d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70d8:	2200      	movs	r2, #0
    70da:	701a      	strb	r2, [r3, #0]
    70dc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    70e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70e4:	781b      	ldrb	r3, [r3, #0]
    70e6:	b2db      	uxtb	r3, r3
    70e8:	3301      	adds	r3, #1
    70ea:	b2da      	uxtb	r2, r3
    70ec:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    70f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70f4:	701a      	strb	r2, [r3, #0]
    70f6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    70fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	b2db      	uxtb	r3, r3
    7102:	2bff      	cmp	r3, #255	; 0xff
    7104:	d105      	bne.n	7112 <send_boot+0x35e>
    7106:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    710a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    710e:	2200      	movs	r2, #0
    7110:	701a      	strb	r2, [r3, #0]
    7112:	f242 0338 	movw	r3, #8248	; 0x2038
    7116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711a:	f242 0238 	movw	r2, #8248	; 0x2038
    711e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7122:	7812      	ldrb	r2, [r2, #0]
    7124:	b2d2      	uxtb	r2, r2
    7126:	f042 0201 	orr.w	r2, r2, #1
    712a:	b2d2      	uxtb	r2, r2
    712c:	701a      	strb	r2, [r3, #0]
    712e:	f242 0339 	movw	r3, #8249	; 0x2039
    7132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7136:	f242 0239 	movw	r2, #8249	; 0x2039
    713a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    713e:	7812      	ldrb	r2, [r2, #0]
    7140:	b2d2      	uxtb	r2, r2
    7142:	f042 0210 	orr.w	r2, r2, #16
    7146:	b2d2      	uxtb	r2, r2
    7148:	701a      	strb	r2, [r3, #0]
    714a:	e00b      	b.n	7164 <send_boot+0x3b0>
    714c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    7150:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	3301      	adds	r3, #1
    7158:	b2da      	uxtb	r2, r3
    715a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    715e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7162:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7164:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7168:	f2c2 0301 	movt	r3, #8193	; 0x2001
    716c:	781a      	ldrb	r2, [r3, #0]
    716e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7172:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	b2db      	uxtb	r3, r3
    717a:	429a      	cmp	r2, r3
    717c:	d316      	bcc.n	71ac <send_boot+0x3f8>
    717e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7182:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	b2db      	uxtb	r3, r3
    718a:	461a      	mov	r2, r3
    718c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7190:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	1ad3      	subs	r3, r2, r3
    7198:	33ff      	adds	r3, #255	; 0xff
    719a:	2b14      	cmp	r3, #20
    719c:	bfd4      	ite	le
    719e:	2300      	movle	r3, #0
    71a0:	2301      	movgt	r3, #1
    71a2:	b2db      	uxtb	r3, r3
    71a4:	e014      	b.n	71d0 <send_boot+0x41c>
    71a6:	bf00      	nop
    71a8:	000183cb 	.word	0x000183cb
    71ac:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    71b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    71b4:	781b      	ldrb	r3, [r3, #0]
    71b6:	b2db      	uxtb	r3, r3
    71b8:	461a      	mov	r2, r3
    71ba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    71be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	1ad3      	subs	r3, r2, r3
    71c6:	2b14      	cmp	r3, #20
    71c8:	bfd4      	ite	le
    71ca:	2300      	movle	r3, #0
    71cc:	2301      	movgt	r3, #1
    71ce:	b2db      	uxtb	r3, r3
    71d0:	2b00      	cmp	r3, #0
    71d2:	f000 85a5 	beq.w	7d20 <send_boot+0xf6c>
    71d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    71da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	461a      	mov	r2, r3
    71e2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    71e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    71ea:	2105      	movs	r1, #5
    71ec:	5499      	strb	r1, [r3, r2]
    71ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    71f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    71f6:	781b      	ldrb	r3, [r3, #0]
    71f8:	3301      	adds	r3, #1
    71fa:	b2da      	uxtb	r2, r3
    71fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7200:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7204:	701a      	strb	r2, [r3, #0]
    7206:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    720a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    720e:	781b      	ldrb	r3, [r3, #0]
    7210:	2bff      	cmp	r3, #255	; 0xff
    7212:	d105      	bne.n	7220 <send_boot+0x46c>
    7214:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7218:	f2c2 0301 	movt	r3, #8193	; 0x2001
    721c:	2200      	movs	r2, #0
    721e:	701a      	strb	r2, [r3, #0]
    7220:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7224:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	461a      	mov	r2, r3
    722c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7230:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7234:	2105      	movs	r1, #5
    7236:	5499      	strb	r1, [r3, r2]
    7238:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    723c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	3301      	adds	r3, #1
    7244:	b2da      	uxtb	r2, r3
    7246:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    724a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    724e:	701a      	strb	r2, [r3, #0]
    7250:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7254:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	2bff      	cmp	r3, #255	; 0xff
    725c:	d105      	bne.n	726a <send_boot+0x4b6>
    725e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7262:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7266:	2200      	movs	r2, #0
    7268:	701a      	strb	r2, [r3, #0]
    726a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    726e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7272:	2205      	movs	r2, #5
    7274:	701a      	strb	r2, [r3, #0]
    7276:	f642 53a6 	movw	r3, #11686	; 0x2da6
    727a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    727e:	2205      	movs	r2, #5
    7280:	701a      	strb	r2, [r3, #0]
    7282:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7286:	f2c2 0301 	movt	r3, #8193	; 0x2001
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	461a      	mov	r2, r3
    728e:	f243 2398 	movw	r3, #12952	; 0x3298
    7292:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7296:	7819      	ldrb	r1, [r3, #0]
    7298:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    729c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72a0:	5499      	strb	r1, [r3, r2]
    72a2:	f243 2398 	movw	r3, #12952	; 0x3298
    72a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72aa:	781a      	ldrb	r2, [r3, #0]
    72ac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    72b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72b4:	781b      	ldrb	r3, [r3, #0]
    72b6:	4413      	add	r3, r2
    72b8:	b2da      	uxtb	r2, r3
    72ba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    72be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72c2:	701a      	strb	r2, [r3, #0]
    72c4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    72c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72cc:	781a      	ldrb	r2, [r3, #0]
    72ce:	f642 53a5 	movw	r3, #11685	; 0x2da5
    72d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72d6:	781b      	ldrb	r3, [r3, #0]
    72d8:	4413      	add	r3, r2
    72da:	b2da      	uxtb	r2, r3
    72dc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    72e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72e4:	701a      	strb	r2, [r3, #0]
    72e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    72ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	3301      	adds	r3, #1
    72f2:	b2da      	uxtb	r2, r3
    72f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    72f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    72fc:	701a      	strb	r2, [r3, #0]
    72fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7302:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	2bff      	cmp	r3, #255	; 0xff
    730a:	d105      	bne.n	7318 <send_boot+0x564>
    730c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7310:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7314:	2200      	movs	r2, #0
    7316:	701a      	strb	r2, [r3, #0]
    7318:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    731c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7320:	781b      	ldrb	r3, [r3, #0]
    7322:	461a      	mov	r2, r3
    7324:	f243 2398 	movw	r3, #12952	; 0x3298
    7328:	f2c2 0301 	movt	r3, #8193	; 0x2001
    732c:	7859      	ldrb	r1, [r3, #1]
    732e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7332:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7336:	5499      	strb	r1, [r3, r2]
    7338:	4bd1      	ldr	r3, [pc, #836]	; (7680 <send_boot+0x8cc>)
    733a:	781a      	ldrb	r2, [r3, #0]
    733c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7340:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7344:	781b      	ldrb	r3, [r3, #0]
    7346:	4413      	add	r3, r2
    7348:	b2da      	uxtb	r2, r3
    734a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    734e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7352:	701a      	strb	r2, [r3, #0]
    7354:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7358:	f2c2 0301 	movt	r3, #8193	; 0x2001
    735c:	781a      	ldrb	r2, [r3, #0]
    735e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7362:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	4413      	add	r3, r2
    736a:	b2da      	uxtb	r2, r3
    736c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7370:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7374:	701a      	strb	r2, [r3, #0]
    7376:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    737a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    737e:	781b      	ldrb	r3, [r3, #0]
    7380:	3301      	adds	r3, #1
    7382:	b2da      	uxtb	r2, r3
    7384:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7388:	f2c2 0301 	movt	r3, #8193	; 0x2001
    738c:	701a      	strb	r2, [r3, #0]
    738e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7392:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7396:	781b      	ldrb	r3, [r3, #0]
    7398:	2bff      	cmp	r3, #255	; 0xff
    739a:	d105      	bne.n	73a8 <send_boot+0x5f4>
    739c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    73a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73a4:	2200      	movs	r2, #0
    73a6:	701a      	strb	r2, [r3, #0]
    73a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    73ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	461a      	mov	r2, r3
    73b4:	f243 2398 	movw	r3, #12952	; 0x3298
    73b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73bc:	7899      	ldrb	r1, [r3, #2]
    73be:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    73c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73c6:	5499      	strb	r1, [r3, r2]
    73c8:	4bae      	ldr	r3, [pc, #696]	; (7684 <send_boot+0x8d0>)
    73ca:	781a      	ldrb	r2, [r3, #0]
    73cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    73d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73d4:	781b      	ldrb	r3, [r3, #0]
    73d6:	4413      	add	r3, r2
    73d8:	b2da      	uxtb	r2, r3
    73da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    73de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73e2:	701a      	strb	r2, [r3, #0]
    73e4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    73e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73ec:	781a      	ldrb	r2, [r3, #0]
    73ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    73f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	4413      	add	r3, r2
    73fa:	b2da      	uxtb	r2, r3
    73fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7400:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7404:	701a      	strb	r2, [r3, #0]
    7406:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    740a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	3301      	adds	r3, #1
    7412:	b2da      	uxtb	r2, r3
    7414:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7418:	f2c2 0301 	movt	r3, #8193	; 0x2001
    741c:	701a      	strb	r2, [r3, #0]
    741e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7422:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7426:	781b      	ldrb	r3, [r3, #0]
    7428:	2bff      	cmp	r3, #255	; 0xff
    742a:	d105      	bne.n	7438 <send_boot+0x684>
    742c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7430:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7434:	2200      	movs	r2, #0
    7436:	701a      	strb	r2, [r3, #0]
    7438:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    743c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	461a      	mov	r2, r3
    7444:	f243 2398 	movw	r3, #12952	; 0x3298
    7448:	f2c2 0301 	movt	r3, #8193	; 0x2001
    744c:	78d9      	ldrb	r1, [r3, #3]
    744e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7452:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7456:	5499      	strb	r1, [r3, r2]
    7458:	4b8b      	ldr	r3, [pc, #556]	; (7688 <send_boot+0x8d4>)
    745a:	781a      	ldrb	r2, [r3, #0]
    745c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7460:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7464:	781b      	ldrb	r3, [r3, #0]
    7466:	4413      	add	r3, r2
    7468:	b2da      	uxtb	r2, r3
    746a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    746e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7472:	701a      	strb	r2, [r3, #0]
    7474:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7478:	f2c2 0301 	movt	r3, #8193	; 0x2001
    747c:	781a      	ldrb	r2, [r3, #0]
    747e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7482:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	4413      	add	r3, r2
    748a:	b2da      	uxtb	r2, r3
    748c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7490:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7494:	701a      	strb	r2, [r3, #0]
    7496:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    749a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	3301      	adds	r3, #1
    74a2:	b2da      	uxtb	r2, r3
    74a4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    74a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74ac:	701a      	strb	r2, [r3, #0]
    74ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    74b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74b6:	781b      	ldrb	r3, [r3, #0]
    74b8:	2bff      	cmp	r3, #255	; 0xff
    74ba:	d105      	bne.n	74c8 <send_boot+0x714>
    74bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    74c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74c4:	2200      	movs	r2, #0
    74c6:	701a      	strb	r2, [r3, #0]
    74c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    74cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74d0:	781b      	ldrb	r3, [r3, #0]
    74d2:	461a      	mov	r2, r3
    74d4:	f243 239c 	movw	r3, #12956	; 0x329c
    74d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74dc:	7819      	ldrb	r1, [r3, #0]
    74de:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    74e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74e6:	5499      	strb	r1, [r3, r2]
    74e8:	f243 239c 	movw	r3, #12956	; 0x329c
    74ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74f0:	781a      	ldrb	r2, [r3, #0]
    74f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    74f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	4413      	add	r3, r2
    74fe:	b2da      	uxtb	r2, r3
    7500:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7504:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7508:	701a      	strb	r2, [r3, #0]
    750a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    750e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7512:	781a      	ldrb	r2, [r3, #0]
    7514:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7518:	f2c2 0301 	movt	r3, #8193	; 0x2001
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	4413      	add	r3, r2
    7520:	b2da      	uxtb	r2, r3
    7522:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7526:	f2c2 0301 	movt	r3, #8193	; 0x2001
    752a:	701a      	strb	r2, [r3, #0]
    752c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7530:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	3301      	adds	r3, #1
    7538:	b2da      	uxtb	r2, r3
    753a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    753e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7542:	701a      	strb	r2, [r3, #0]
    7544:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7548:	f2c2 0301 	movt	r3, #8193	; 0x2001
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	2bff      	cmp	r3, #255	; 0xff
    7550:	d105      	bne.n	755e <send_boot+0x7aa>
    7552:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7556:	f2c2 0301 	movt	r3, #8193	; 0x2001
    755a:	2200      	movs	r2, #0
    755c:	701a      	strb	r2, [r3, #0]
    755e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7562:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	461a      	mov	r2, r3
    756a:	f243 239c 	movw	r3, #12956	; 0x329c
    756e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7572:	7859      	ldrb	r1, [r3, #1]
    7574:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7578:	f2c2 0301 	movt	r3, #8193	; 0x2001
    757c:	5499      	strb	r1, [r3, r2]
    757e:	4b43      	ldr	r3, [pc, #268]	; (768c <send_boot+0x8d8>)
    7580:	781a      	ldrb	r2, [r3, #0]
    7582:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7586:	f2c2 0301 	movt	r3, #8193	; 0x2001
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	4413      	add	r3, r2
    758e:	b2da      	uxtb	r2, r3
    7590:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7594:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7598:	701a      	strb	r2, [r3, #0]
    759a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    759e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75a2:	781a      	ldrb	r2, [r3, #0]
    75a4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    75a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	4413      	add	r3, r2
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    75b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    75c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	3301      	adds	r3, #1
    75c8:	b2da      	uxtb	r2, r3
    75ca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    75ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75d2:	701a      	strb	r2, [r3, #0]
    75d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    75d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	2bff      	cmp	r3, #255	; 0xff
    75e0:	d105      	bne.n	75ee <send_boot+0x83a>
    75e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    75e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75ea:	2200      	movs	r2, #0
    75ec:	701a      	strb	r2, [r3, #0]
    75ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    75f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	461a      	mov	r2, r3
    75fa:	f243 239c 	movw	r3, #12956	; 0x329c
    75fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7602:	7899      	ldrb	r1, [r3, #2]
    7604:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7608:	f2c2 0301 	movt	r3, #8193	; 0x2001
    760c:	5499      	strb	r1, [r3, r2]
    760e:	4b20      	ldr	r3, [pc, #128]	; (7690 <send_boot+0x8dc>)
    7610:	781a      	ldrb	r2, [r3, #0]
    7612:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7616:	f2c2 0301 	movt	r3, #8193	; 0x2001
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	4413      	add	r3, r2
    761e:	b2da      	uxtb	r2, r3
    7620:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7624:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7628:	701a      	strb	r2, [r3, #0]
    762a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    762e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7638:	f2c2 0301 	movt	r3, #8193	; 0x2001
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	4413      	add	r3, r2
    7640:	b2da      	uxtb	r2, r3
    7642:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7646:	f2c2 0301 	movt	r3, #8193	; 0x2001
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7650:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	3301      	adds	r3, #1
    7658:	b2da      	uxtb	r2, r3
    765a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    765e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7662:	701a      	strb	r2, [r3, #0]
    7664:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7668:	f2c2 0301 	movt	r3, #8193	; 0x2001
    766c:	781b      	ldrb	r3, [r3, #0]
    766e:	2bff      	cmp	r3, #255	; 0xff
    7670:	d110      	bne.n	7694 <send_boot+0x8e0>
    7672:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7676:	f2c2 0301 	movt	r3, #8193	; 0x2001
    767a:	2200      	movs	r2, #0
    767c:	701a      	strb	r2, [r3, #0]
    767e:	e009      	b.n	7694 <send_boot+0x8e0>
    7680:	20013299 	.word	0x20013299
    7684:	2001329a 	.word	0x2001329a
    7688:	2001329b 	.word	0x2001329b
    768c:	2001329d 	.word	0x2001329d
    7690:	2001329e 	.word	0x2001329e
    7694:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7698:	f2c2 0301 	movt	r3, #8193	; 0x2001
    769c:	781b      	ldrb	r3, [r3, #0]
    769e:	461a      	mov	r2, r3
    76a0:	f243 239c 	movw	r3, #12956	; 0x329c
    76a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76a8:	78d9      	ldrb	r1, [r3, #3]
    76aa:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    76ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76b2:	5499      	strb	r1, [r3, r2]
    76b4:	4bd3      	ldr	r3, [pc, #844]	; (7a04 <send_boot+0xc50>)
    76b6:	781a      	ldrb	r2, [r3, #0]
    76b8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    76bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	4413      	add	r3, r2
    76c4:	b2da      	uxtb	r2, r3
    76c6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    76ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76ce:	701a      	strb	r2, [r3, #0]
    76d0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    76d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76d8:	781a      	ldrb	r2, [r3, #0]
    76da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    76de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	4413      	add	r3, r2
    76e6:	b2da      	uxtb	r2, r3
    76e8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    76ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76f0:	701a      	strb	r2, [r3, #0]
    76f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    76f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	3301      	adds	r3, #1
    76fe:	b2da      	uxtb	r2, r3
    7700:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7704:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7708:	701a      	strb	r2, [r3, #0]
    770a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    770e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7712:	781b      	ldrb	r3, [r3, #0]
    7714:	2bff      	cmp	r3, #255	; 0xff
    7716:	d105      	bne.n	7724 <send_boot+0x970>
    7718:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    771c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7720:	2200      	movs	r2, #0
    7722:	701a      	strb	r2, [r3, #0]
    7724:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7728:	f2c2 0301 	movt	r3, #8193	; 0x2001
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	461a      	mov	r2, r3
    7730:	f243 2394 	movw	r3, #12948	; 0x3294
    7734:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7738:	7819      	ldrb	r1, [r3, #0]
    773a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    773e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7742:	5499      	strb	r1, [r3, r2]
    7744:	f243 2394 	movw	r3, #12948	; 0x3294
    7748:	f2c2 0301 	movt	r3, #8193	; 0x2001
    774c:	781a      	ldrb	r2, [r3, #0]
    774e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7752:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	4413      	add	r3, r2
    775a:	b2da      	uxtb	r2, r3
    775c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7760:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7764:	701a      	strb	r2, [r3, #0]
    7766:	f642 53a6 	movw	r3, #11686	; 0x2da6
    776a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    776e:	781a      	ldrb	r2, [r3, #0]
    7770:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7774:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	4413      	add	r3, r2
    777c:	b2da      	uxtb	r2, r3
    777e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7782:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    778c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	3301      	adds	r3, #1
    7794:	b2da      	uxtb	r2, r3
    7796:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    779a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    779e:	701a      	strb	r2, [r3, #0]
    77a0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    77a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77a8:	781b      	ldrb	r3, [r3, #0]
    77aa:	2bff      	cmp	r3, #255	; 0xff
    77ac:	d105      	bne.n	77ba <send_boot+0xa06>
    77ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    77b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77b6:	2200      	movs	r2, #0
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    77be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77c2:	781b      	ldrb	r3, [r3, #0]
    77c4:	461a      	mov	r2, r3
    77c6:	f243 2394 	movw	r3, #12948	; 0x3294
    77ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77ce:	7859      	ldrb	r1, [r3, #1]
    77d0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    77d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77d8:	5499      	strb	r1, [r3, r2]
    77da:	4b8b      	ldr	r3, [pc, #556]	; (7a08 <send_boot+0xc54>)
    77dc:	781a      	ldrb	r2, [r3, #0]
    77de:	f642 53a5 	movw	r3, #11685	; 0x2da5
    77e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77e6:	781b      	ldrb	r3, [r3, #0]
    77e8:	4413      	add	r3, r2
    77ea:	b2da      	uxtb	r2, r3
    77ec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    77f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77f4:	701a      	strb	r2, [r3, #0]
    77f6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    77fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    77fe:	781a      	ldrb	r2, [r3, #0]
    7800:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7804:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7808:	781b      	ldrb	r3, [r3, #0]
    780a:	4413      	add	r3, r2
    780c:	b2da      	uxtb	r2, r3
    780e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7812:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7816:	701a      	strb	r2, [r3, #0]
    7818:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    781c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	3301      	adds	r3, #1
    7824:	b2da      	uxtb	r2, r3
    7826:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    782a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    782e:	701a      	strb	r2, [r3, #0]
    7830:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7834:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	2bff      	cmp	r3, #255	; 0xff
    783c:	d105      	bne.n	784a <send_boot+0xa96>
    783e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7842:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7846:	2200      	movs	r2, #0
    7848:	701a      	strb	r2, [r3, #0]
    784a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    784e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7852:	781b      	ldrb	r3, [r3, #0]
    7854:	461a      	mov	r2, r3
    7856:	f243 2394 	movw	r3, #12948	; 0x3294
    785a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    785e:	7899      	ldrb	r1, [r3, #2]
    7860:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7864:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7868:	5499      	strb	r1, [r3, r2]
    786a:	4b68      	ldr	r3, [pc, #416]	; (7a0c <send_boot+0xc58>)
    786c:	781a      	ldrb	r2, [r3, #0]
    786e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7872:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	4413      	add	r3, r2
    787a:	b2da      	uxtb	r2, r3
    787c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7880:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7884:	701a      	strb	r2, [r3, #0]
    7886:	f642 53a6 	movw	r3, #11686	; 0x2da6
    788a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    788e:	781a      	ldrb	r2, [r3, #0]
    7890:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7894:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	4413      	add	r3, r2
    789c:	b2da      	uxtb	r2, r3
    789e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    78a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78a6:	701a      	strb	r2, [r3, #0]
    78a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    78ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78b0:	781b      	ldrb	r3, [r3, #0]
    78b2:	3301      	adds	r3, #1
    78b4:	b2da      	uxtb	r2, r3
    78b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    78ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78be:	701a      	strb	r2, [r3, #0]
    78c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    78c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78c8:	781b      	ldrb	r3, [r3, #0]
    78ca:	2bff      	cmp	r3, #255	; 0xff
    78cc:	d105      	bne.n	78da <send_boot+0xb26>
    78ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    78d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78d6:	2200      	movs	r2, #0
    78d8:	701a      	strb	r2, [r3, #0]
    78da:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    78de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78e2:	781b      	ldrb	r3, [r3, #0]
    78e4:	461a      	mov	r2, r3
    78e6:	f243 2394 	movw	r3, #12948	; 0x3294
    78ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78ee:	78d9      	ldrb	r1, [r3, #3]
    78f0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    78f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    78f8:	5499      	strb	r1, [r3, r2]
    78fa:	4b45      	ldr	r3, [pc, #276]	; (7a10 <send_boot+0xc5c>)
    78fc:	781a      	ldrb	r2, [r3, #0]
    78fe:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7902:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	4413      	add	r3, r2
    790a:	b2da      	uxtb	r2, r3
    790c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7910:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7914:	701a      	strb	r2, [r3, #0]
    7916:	f642 53a6 	movw	r3, #11686	; 0x2da6
    791a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    791e:	781a      	ldrb	r2, [r3, #0]
    7920:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7924:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	4413      	add	r3, r2
    792c:	b2da      	uxtb	r2, r3
    792e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7932:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7936:	701a      	strb	r2, [r3, #0]
    7938:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    793c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7940:	781b      	ldrb	r3, [r3, #0]
    7942:	3301      	adds	r3, #1
    7944:	b2da      	uxtb	r2, r3
    7946:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    794a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    794e:	701a      	strb	r2, [r3, #0]
    7950:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7954:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7958:	781b      	ldrb	r3, [r3, #0]
    795a:	2bff      	cmp	r3, #255	; 0xff
    795c:	d105      	bne.n	796a <send_boot+0xbb6>
    795e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7962:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7966:	2200      	movs	r2, #0
    7968:	701a      	strb	r2, [r3, #0]
    796a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    796e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7972:	781b      	ldrb	r3, [r3, #0]
    7974:	461a      	mov	r2, r3
    7976:	f640 2322 	movw	r3, #2594	; 0xa22
    797a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797e:	7819      	ldrb	r1, [r3, #0]
    7980:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7984:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7988:	5499      	strb	r1, [r3, r2]
    798a:	f640 2322 	movw	r3, #2594	; 0xa22
    798e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7992:	781a      	ldrb	r2, [r3, #0]
    7994:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7998:	f2c2 0301 	movt	r3, #8193	; 0x2001
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	4413      	add	r3, r2
    79a0:	b2da      	uxtb	r2, r3
    79a2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    79a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79aa:	701a      	strb	r2, [r3, #0]
    79ac:	f642 53a6 	movw	r3, #11686	; 0x2da6
    79b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    79ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	4413      	add	r3, r2
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    79c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    79d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	3301      	adds	r3, #1
    79da:	b2da      	uxtb	r2, r3
    79dc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    79e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79e4:	701a      	strb	r2, [r3, #0]
    79e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    79ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	2bff      	cmp	r3, #255	; 0xff
    79f2:	d10f      	bne.n	7a14 <send_boot+0xc60>
    79f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    79f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    79fc:	2200      	movs	r2, #0
    79fe:	701a      	strb	r2, [r3, #0]
    7a00:	e008      	b.n	7a14 <send_boot+0xc60>
    7a02:	bf00      	nop
    7a04:	2001329f 	.word	0x2001329f
    7a08:	20013295 	.word	0x20013295
    7a0c:	20013296 	.word	0x20013296
    7a10:	20013297 	.word	0x20013297
    7a14:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7a18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	461a      	mov	r2, r3
    7a20:	f640 2322 	movw	r3, #2594	; 0xa22
    7a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a28:	7859      	ldrb	r1, [r3, #1]
    7a2a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7a2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a32:	5499      	strb	r1, [r3, r2]
    7a34:	4bc5      	ldr	r3, [pc, #788]	; (7d4c <send_boot+0xf98>)
    7a36:	781a      	ldrb	r2, [r3, #0]
    7a38:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7a3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a40:	781b      	ldrb	r3, [r3, #0]
    7a42:	4413      	add	r3, r2
    7a44:	b2da      	uxtb	r2, r3
    7a46:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7a4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a4e:	701a      	strb	r2, [r3, #0]
    7a50:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7a54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a58:	781a      	ldrb	r2, [r3, #0]
    7a5a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7a5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a62:	781b      	ldrb	r3, [r3, #0]
    7a64:	4413      	add	r3, r2
    7a66:	b2da      	uxtb	r2, r3
    7a68:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7a6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a70:	701a      	strb	r2, [r3, #0]
    7a72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7a76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	3301      	adds	r3, #1
    7a7e:	b2da      	uxtb	r2, r3
    7a80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7a84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a88:	701a      	strb	r2, [r3, #0]
    7a8a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7a8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	2bff      	cmp	r3, #255	; 0xff
    7a96:	d105      	bne.n	7aa4 <send_boot+0xcf0>
    7a98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7a9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7aa0:	2200      	movs	r2, #0
    7aa2:	701a      	strb	r2, [r3, #0]
    7aa4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7aa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7aac:	781b      	ldrb	r3, [r3, #0]
    7aae:	461a      	mov	r2, r3
    7ab0:	f640 2324 	movw	r3, #2596	; 0xa24
    7ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab8:	7819      	ldrb	r1, [r3, #0]
    7aba:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7abe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ac2:	5499      	strb	r1, [r3, r2]
    7ac4:	f640 2324 	movw	r3, #2596	; 0xa24
    7ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7acc:	781a      	ldrb	r2, [r3, #0]
    7ace:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7ad2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	4413      	add	r3, r2
    7ada:	b2da      	uxtb	r2, r3
    7adc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7ae0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ae4:	701a      	strb	r2, [r3, #0]
    7ae6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7aea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7aee:	781a      	ldrb	r2, [r3, #0]
    7af0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7af4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	4413      	add	r3, r2
    7afc:	b2da      	uxtb	r2, r3
    7afe:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7b02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b06:	701a      	strb	r2, [r3, #0]
    7b08:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b10:	781b      	ldrb	r3, [r3, #0]
    7b12:	3301      	adds	r3, #1
    7b14:	b2da      	uxtb	r2, r3
    7b16:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b1e:	701a      	strb	r2, [r3, #0]
    7b20:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	2bff      	cmp	r3, #255	; 0xff
    7b2c:	d105      	bne.n	7b3a <send_boot+0xd86>
    7b2e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b36:	2200      	movs	r2, #0
    7b38:	701a      	strb	r2, [r3, #0]
    7b3a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b42:	781b      	ldrb	r3, [r3, #0]
    7b44:	461a      	mov	r2, r3
    7b46:	f640 2324 	movw	r3, #2596	; 0xa24
    7b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4e:	7859      	ldrb	r1, [r3, #1]
    7b50:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7b54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b58:	5499      	strb	r1, [r3, r2]
    7b5a:	4b7d      	ldr	r3, [pc, #500]	; (7d50 <send_boot+0xf9c>)
    7b5c:	781a      	ldrb	r2, [r3, #0]
    7b5e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7b62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	4413      	add	r3, r2
    7b6a:	b2da      	uxtb	r2, r3
    7b6c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7b70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b74:	701a      	strb	r2, [r3, #0]
    7b76:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7b7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b7e:	781a      	ldrb	r2, [r3, #0]
    7b80:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7b84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	4413      	add	r3, r2
    7b8c:	b2da      	uxtb	r2, r3
    7b8e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7b92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7b96:	701a      	strb	r2, [r3, #0]
    7b98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7b9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ba0:	781b      	ldrb	r3, [r3, #0]
    7ba2:	3301      	adds	r3, #1
    7ba4:	b2da      	uxtb	r2, r3
    7ba6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7baa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bae:	701a      	strb	r2, [r3, #0]
    7bb0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7bb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bb8:	781b      	ldrb	r3, [r3, #0]
    7bba:	2bff      	cmp	r3, #255	; 0xff
    7bbc:	d105      	bne.n	7bca <send_boot+0xe16>
    7bbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7bc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bc6:	2200      	movs	r2, #0
    7bc8:	701a      	strb	r2, [r3, #0]
    7bca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7bce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bd2:	781b      	ldrb	r3, [r3, #0]
    7bd4:	461a      	mov	r2, r3
    7bd6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7bda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bde:	7819      	ldrb	r1, [r3, #0]
    7be0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7be4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7be8:	5499      	strb	r1, [r3, r2]
    7bea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7bee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	3301      	adds	r3, #1
    7bf6:	b2da      	uxtb	r2, r3
    7bf8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7bfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c00:	701a      	strb	r2, [r3, #0]
    7c02:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c0a:	781b      	ldrb	r3, [r3, #0]
    7c0c:	2bff      	cmp	r3, #255	; 0xff
    7c0e:	d105      	bne.n	7c1c <send_boot+0xe68>
    7c10:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c18:	2200      	movs	r2, #0
    7c1a:	701a      	strb	r2, [r3, #0]
    7c1c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	461a      	mov	r2, r3
    7c28:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7c2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c30:	7819      	ldrb	r1, [r3, #0]
    7c32:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7c36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c3a:	5499      	strb	r1, [r3, r2]
    7c3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	3301      	adds	r3, #1
    7c48:	b2da      	uxtb	r2, r3
    7c4a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c52:	701a      	strb	r2, [r3, #0]
    7c54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	2bff      	cmp	r3, #255	; 0xff
    7c60:	d105      	bne.n	7c6e <send_boot+0xeba>
    7c62:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7c66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c6a:	2200      	movs	r2, #0
    7c6c:	701a      	strb	r2, [r3, #0]
    7c6e:	f242 0339 	movw	r3, #8249	; 0x2039
    7c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c76:	781b      	ldrb	r3, [r3, #0]
    7c78:	b2db      	uxtb	r3, r3
    7c7a:	f003 0310 	and.w	r3, r3, #16
    7c7e:	2b00      	cmp	r3, #0
    7c80:	d15a      	bne.n	7d38 <send_boot+0xf84>
    7c82:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7c86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c8a:	781b      	ldrb	r3, [r3, #0]
    7c8c:	b2db      	uxtb	r3, r3
    7c8e:	461a      	mov	r2, r3
    7c90:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7c94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7c98:	5c9a      	ldrb	r2, [r3, r2]
    7c9a:	f642 53a3 	movw	r3, #11683	; 0x2da3
    7c9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ca2:	701a      	strb	r2, [r3, #0]
    7ca4:	f642 53a4 	movw	r3, #11684	; 0x2da4
    7ca8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7cac:	2200      	movs	r2, #0
    7cae:	701a      	strb	r2, [r3, #0]
    7cb0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7cb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7cb8:	781b      	ldrb	r3, [r3, #0]
    7cba:	b2db      	uxtb	r3, r3
    7cbc:	3301      	adds	r3, #1
    7cbe:	b2da      	uxtb	r2, r3
    7cc0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7cc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7cc8:	701a      	strb	r2, [r3, #0]
    7cca:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7cce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	b2db      	uxtb	r3, r3
    7cd6:	2bff      	cmp	r3, #255	; 0xff
    7cd8:	d105      	bne.n	7ce6 <send_boot+0xf32>
    7cda:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7cde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ce2:	2200      	movs	r2, #0
    7ce4:	701a      	strb	r2, [r3, #0]
    7ce6:	f242 0338 	movw	r3, #8248	; 0x2038
    7cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cee:	f242 0238 	movw	r2, #8248	; 0x2038
    7cf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7cf6:	7812      	ldrb	r2, [r2, #0]
    7cf8:	b2d2      	uxtb	r2, r2
    7cfa:	f042 0201 	orr.w	r2, r2, #1
    7cfe:	b2d2      	uxtb	r2, r2
    7d00:	701a      	strb	r2, [r3, #0]
    7d02:	f242 0339 	movw	r3, #8249	; 0x2039
    7d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d0a:	f242 0239 	movw	r2, #8249	; 0x2039
    7d0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7d12:	7812      	ldrb	r2, [r2, #0]
    7d14:	b2d2      	uxtb	r2, r2
    7d16:	f042 0210 	orr.w	r2, r2, #16
    7d1a:	b2d2      	uxtb	r2, r2
    7d1c:	701a      	strb	r2, [r3, #0]
    7d1e:	e00b      	b.n	7d38 <send_boot+0xf84>
    7d20:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    7d24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d28:	781b      	ldrb	r3, [r3, #0]
    7d2a:	3301      	adds	r3, #1
    7d2c:	b2da      	uxtb	r2, r3
    7d2e:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    7d32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d36:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    7d38:	f640 231d 	movw	r3, #2589	; 0xa1d
    7d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d40:	2200      	movs	r2, #0
    7d42:	701a      	strb	r2, [r3, #0]
  }
}
    7d44:	46bd      	mov	sp, r7
    7d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4a:	4770      	bx	lr
    7d4c:	20000a23 	.word	0x20000a23
    7d50:	20000a25 	.word	0x20000a25

00007d54 <send_attitude>:
void send_attitude(void){ //499ms
    7d54:	b480      	push	{r7}
    7d56:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    7d58:	f642 4399 	movw	r3, #11417	; 0x2c99
    7d5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	3301      	adds	r3, #1
    7d64:	b2da      	uxtb	r2, r3
    7d66:	f642 4399 	movw	r3, #11417	; 0x2c99
    7d6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d6e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    7d70:	f642 4399 	movw	r3, #11417	; 0x2c99
    7d74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	2bfa      	cmp	r3, #250	; 0xfa
    7d7c:	d105      	bne.n	7d8a <send_attitude+0x36>
    7d7e:	f642 4399 	movw	r3, #11417	; 0x2c99
    7d82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d86:	2200      	movs	r2, #0
    7d88:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    7d8a:	f642 4399 	movw	r3, #11417	; 0x2c99
    7d8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7d92:	781a      	ldrb	r2, [r3, #0]
    7d94:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7d98:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7d9c:	fba3 1302 	umull	r1, r3, r3, r2
    7da0:	0899      	lsrs	r1, r3, #2
    7da2:	460b      	mov	r3, r1
    7da4:	009b      	lsls	r3, r3, #2
    7da6:	440b      	add	r3, r1
    7da8:	1ad3      	subs	r3, r2, r3
    7daa:	b2db      	uxtb	r3, r3
    7dac:	2b00      	cmp	r3, #0
    7dae:	f040 84c1 	bne.w	8734 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    7db2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7db6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7dba:	781a      	ldrb	r2, [r3, #0]
    7dbc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7dc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	b2db      	uxtb	r3, r3
    7dc8:	429a      	cmp	r2, r3
    7dca:	d313      	bcc.n	7df4 <send_attitude+0xa0>
    7dcc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7dd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	b2db      	uxtb	r3, r3
    7dd8:	461a      	mov	r2, r3
    7dda:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7dde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	1ad3      	subs	r3, r2, r3
    7de6:	33ff      	adds	r3, #255	; 0xff
    7de8:	2b10      	cmp	r3, #16
    7dea:	bfd4      	ite	le
    7dec:	2300      	movle	r3, #0
    7dee:	2301      	movgt	r3, #1
    7df0:	b2db      	uxtb	r3, r3
    7df2:	e011      	b.n	7e18 <send_attitude+0xc4>
    7df4:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    7df8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	b2db      	uxtb	r3, r3
    7e00:	461a      	mov	r2, r3
    7e02:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e0a:	781b      	ldrb	r3, [r3, #0]
    7e0c:	1ad3      	subs	r3, r2, r3
    7e0e:	2b10      	cmp	r3, #16
    7e10:	bfd4      	ite	le
    7e12:	2300      	movle	r3, #0
    7e14:	2301      	movgt	r3, #1
    7e16:	b2db      	uxtb	r3, r3
    7e18:	2b00      	cmp	r3, #0
    7e1a:	f000 847f 	beq.w	871c <send_attitude+0x9c8>
    7e1e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e26:	781b      	ldrb	r3, [r3, #0]
    7e28:	461a      	mov	r2, r3
    7e2a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7e2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e32:	2105      	movs	r1, #5
    7e34:	5499      	strb	r1, [r3, r2]
    7e36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	3301      	adds	r3, #1
    7e42:	b2da      	uxtb	r2, r3
    7e44:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e4c:	701a      	strb	r2, [r3, #0]
    7e4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e56:	781b      	ldrb	r3, [r3, #0]
    7e58:	2bff      	cmp	r3, #255	; 0xff
    7e5a:	d105      	bne.n	7e68 <send_attitude+0x114>
    7e5c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e64:	2200      	movs	r2, #0
    7e66:	701a      	strb	r2, [r3, #0]
    7e68:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	461a      	mov	r2, r3
    7e74:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7e78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e7c:	2106      	movs	r1, #6
    7e7e:	5499      	strb	r1, [r3, r2]
    7e80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	3301      	adds	r3, #1
    7e8c:	b2da      	uxtb	r2, r3
    7e8e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7e96:	701a      	strb	r2, [r3, #0]
    7e98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7e9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ea0:	781b      	ldrb	r3, [r3, #0]
    7ea2:	2bff      	cmp	r3, #255	; 0xff
    7ea4:	d105      	bne.n	7eb2 <send_attitude+0x15e>
    7ea6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7eaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7eae:	2200      	movs	r2, #0
    7eb0:	701a      	strb	r2, [r3, #0]
    7eb2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7eb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7eba:	2206      	movs	r2, #6
    7ebc:	701a      	strb	r2, [r3, #0]
    7ebe:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7ec2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ec6:	2206      	movs	r2, #6
    7ec8:	701a      	strb	r2, [r3, #0]
    7eca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7ece:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	461a      	mov	r2, r3
    7ed6:	f243 2360 	movw	r3, #12896	; 0x3260
    7eda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ede:	7819      	ldrb	r1, [r3, #0]
    7ee0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7ee4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ee8:	5499      	strb	r1, [r3, r2]
    7eea:	f243 2360 	movw	r3, #12896	; 0x3260
    7eee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ef2:	781a      	ldrb	r2, [r3, #0]
    7ef4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7ef8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	4413      	add	r3, r2
    7f00:	b2da      	uxtb	r2, r3
    7f02:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7f06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f0a:	701a      	strb	r2, [r3, #0]
    7f0c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7f10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f14:	781a      	ldrb	r2, [r3, #0]
    7f16:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7f1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	4413      	add	r3, r2
    7f22:	b2da      	uxtb	r2, r3
    7f24:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7f28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f2c:	701a      	strb	r2, [r3, #0]
    7f2e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7f32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	3301      	adds	r3, #1
    7f3a:	b2da      	uxtb	r2, r3
    7f3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7f40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f44:	701a      	strb	r2, [r3, #0]
    7f46:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7f4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	2bff      	cmp	r3, #255	; 0xff
    7f52:	d105      	bne.n	7f60 <send_attitude+0x20c>
    7f54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7f58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f5c:	2200      	movs	r2, #0
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7f64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	461a      	mov	r2, r3
    7f6c:	f243 2360 	movw	r3, #12896	; 0x3260
    7f70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f74:	7859      	ldrb	r1, [r3, #1]
    7f76:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    7f7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f7e:	5499      	strb	r1, [r3, r2]
    7f80:	4bd1      	ldr	r3, [pc, #836]	; (82c8 <send_attitude+0x574>)
    7f82:	781a      	ldrb	r2, [r3, #0]
    7f84:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7f88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	4413      	add	r3, r2
    7f90:	b2da      	uxtb	r2, r3
    7f92:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7f96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7f9a:	701a      	strb	r2, [r3, #0]
    7f9c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7fa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fa4:	781a      	ldrb	r2, [r3, #0]
    7fa6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    7faa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	4413      	add	r3, r2
    7fb2:	b2da      	uxtb	r2, r3
    7fb4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    7fb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fbc:	701a      	strb	r2, [r3, #0]
    7fbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7fc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	3301      	adds	r3, #1
    7fca:	b2da      	uxtb	r2, r3
    7fcc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7fd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fd4:	701a      	strb	r2, [r3, #0]
    7fd6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7fda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	2bff      	cmp	r3, #255	; 0xff
    7fe2:	d105      	bne.n	7ff0 <send_attitude+0x29c>
    7fe4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7fe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7fec:	2200      	movs	r2, #0
    7fee:	701a      	strb	r2, [r3, #0]
    7ff0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    7ff4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	461a      	mov	r2, r3
    7ffc:	f243 2360 	movw	r3, #12896	; 0x3260
    8000:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8004:	7899      	ldrb	r1, [r3, #2]
    8006:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    800a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    800e:	5499      	strb	r1, [r3, r2]
    8010:	4bae      	ldr	r3, [pc, #696]	; (82cc <send_attitude+0x578>)
    8012:	781a      	ldrb	r2, [r3, #0]
    8014:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8018:	f2c2 0301 	movt	r3, #8193	; 0x2001
    801c:	781b      	ldrb	r3, [r3, #0]
    801e:	4413      	add	r3, r2
    8020:	b2da      	uxtb	r2, r3
    8022:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8026:	f2c2 0301 	movt	r3, #8193	; 0x2001
    802a:	701a      	strb	r2, [r3, #0]
    802c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8030:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8034:	781a      	ldrb	r2, [r3, #0]
    8036:	f642 53a5 	movw	r3, #11685	; 0x2da5
    803a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    803e:	781b      	ldrb	r3, [r3, #0]
    8040:	4413      	add	r3, r2
    8042:	b2da      	uxtb	r2, r3
    8044:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8048:	f2c2 0301 	movt	r3, #8193	; 0x2001
    804c:	701a      	strb	r2, [r3, #0]
    804e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8052:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	3301      	adds	r3, #1
    805a:	b2da      	uxtb	r2, r3
    805c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8060:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8064:	701a      	strb	r2, [r3, #0]
    8066:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    806a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	2bff      	cmp	r3, #255	; 0xff
    8072:	d105      	bne.n	8080 <send_attitude+0x32c>
    8074:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8078:	f2c2 0301 	movt	r3, #8193	; 0x2001
    807c:	2200      	movs	r2, #0
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8084:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	461a      	mov	r2, r3
    808c:	f243 2360 	movw	r3, #12896	; 0x3260
    8090:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8094:	78d9      	ldrb	r1, [r3, #3]
    8096:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    809a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    809e:	5499      	strb	r1, [r3, r2]
    80a0:	4b8b      	ldr	r3, [pc, #556]	; (82d0 <send_attitude+0x57c>)
    80a2:	781a      	ldrb	r2, [r3, #0]
    80a4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    80a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	4413      	add	r3, r2
    80b0:	b2da      	uxtb	r2, r3
    80b2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    80b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80ba:	701a      	strb	r2, [r3, #0]
    80bc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    80c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80c4:	781a      	ldrb	r2, [r3, #0]
    80c6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    80ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80ce:	781b      	ldrb	r3, [r3, #0]
    80d0:	4413      	add	r3, r2
    80d2:	b2da      	uxtb	r2, r3
    80d4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    80d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80dc:	701a      	strb	r2, [r3, #0]
    80de:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    80e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	3301      	adds	r3, #1
    80ea:	b2da      	uxtb	r2, r3
    80ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    80f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80f4:	701a      	strb	r2, [r3, #0]
    80f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    80fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	2bff      	cmp	r3, #255	; 0xff
    8102:	d105      	bne.n	8110 <send_attitude+0x3bc>
    8104:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8108:	f2c2 0301 	movt	r3, #8193	; 0x2001
    810c:	2200      	movs	r2, #0
    810e:	701a      	strb	r2, [r3, #0]
    8110:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8114:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8118:	781b      	ldrb	r3, [r3, #0]
    811a:	461a      	mov	r2, r3
    811c:	f243 2364 	movw	r3, #12900	; 0x3264
    8120:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8124:	7819      	ldrb	r1, [r3, #0]
    8126:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    812a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    812e:	5499      	strb	r1, [r3, r2]
    8130:	f243 2364 	movw	r3, #12900	; 0x3264
    8134:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8138:	781a      	ldrb	r2, [r3, #0]
    813a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    813e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	4413      	add	r3, r2
    8146:	b2da      	uxtb	r2, r3
    8148:	f642 53a5 	movw	r3, #11685	; 0x2da5
    814c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8150:	701a      	strb	r2, [r3, #0]
    8152:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8156:	f2c2 0301 	movt	r3, #8193	; 0x2001
    815a:	781a      	ldrb	r2, [r3, #0]
    815c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8160:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8164:	781b      	ldrb	r3, [r3, #0]
    8166:	4413      	add	r3, r2
    8168:	b2da      	uxtb	r2, r3
    816a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    816e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8172:	701a      	strb	r2, [r3, #0]
    8174:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8178:	f2c2 0301 	movt	r3, #8193	; 0x2001
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	3301      	adds	r3, #1
    8180:	b2da      	uxtb	r2, r3
    8182:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8186:	f2c2 0301 	movt	r3, #8193	; 0x2001
    818a:	701a      	strb	r2, [r3, #0]
    818c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8190:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8194:	781b      	ldrb	r3, [r3, #0]
    8196:	2bff      	cmp	r3, #255	; 0xff
    8198:	d105      	bne.n	81a6 <send_attitude+0x452>
    819a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    819e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81a2:	2200      	movs	r2, #0
    81a4:	701a      	strb	r2, [r3, #0]
    81a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    81aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	461a      	mov	r2, r3
    81b2:	f243 2364 	movw	r3, #12900	; 0x3264
    81b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81ba:	7859      	ldrb	r1, [r3, #1]
    81bc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    81c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81c4:	5499      	strb	r1, [r3, r2]
    81c6:	4b43      	ldr	r3, [pc, #268]	; (82d4 <send_attitude+0x580>)
    81c8:	781a      	ldrb	r2, [r3, #0]
    81ca:	f642 53a5 	movw	r3, #11685	; 0x2da5
    81ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	4413      	add	r3, r2
    81d6:	b2da      	uxtb	r2, r3
    81d8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    81dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81e0:	701a      	strb	r2, [r3, #0]
    81e2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    81e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81ea:	781a      	ldrb	r2, [r3, #0]
    81ec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    81f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	4413      	add	r3, r2
    81f8:	b2da      	uxtb	r2, r3
    81fa:	f642 53a6 	movw	r3, #11686	; 0x2da6
    81fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8202:	701a      	strb	r2, [r3, #0]
    8204:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8208:	f2c2 0301 	movt	r3, #8193	; 0x2001
    820c:	781b      	ldrb	r3, [r3, #0]
    820e:	3301      	adds	r3, #1
    8210:	b2da      	uxtb	r2, r3
    8212:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8216:	f2c2 0301 	movt	r3, #8193	; 0x2001
    821a:	701a      	strb	r2, [r3, #0]
    821c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8220:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	2bff      	cmp	r3, #255	; 0xff
    8228:	d105      	bne.n	8236 <send_attitude+0x4e2>
    822a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    822e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8232:	2200      	movs	r2, #0
    8234:	701a      	strb	r2, [r3, #0]
    8236:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    823a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    823e:	781b      	ldrb	r3, [r3, #0]
    8240:	461a      	mov	r2, r3
    8242:	f243 2364 	movw	r3, #12900	; 0x3264
    8246:	f2c2 0301 	movt	r3, #8193	; 0x2001
    824a:	7899      	ldrb	r1, [r3, #2]
    824c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8250:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8254:	5499      	strb	r1, [r3, r2]
    8256:	4b20      	ldr	r3, [pc, #128]	; (82d8 <send_attitude+0x584>)
    8258:	781a      	ldrb	r2, [r3, #0]
    825a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    825e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	4413      	add	r3, r2
    8266:	b2da      	uxtb	r2, r3
    8268:	f642 53a5 	movw	r3, #11685	; 0x2da5
    826c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8270:	701a      	strb	r2, [r3, #0]
    8272:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8276:	f2c2 0301 	movt	r3, #8193	; 0x2001
    827a:	781a      	ldrb	r2, [r3, #0]
    827c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8280:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	4413      	add	r3, r2
    8288:	b2da      	uxtb	r2, r3
    828a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    828e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8292:	701a      	strb	r2, [r3, #0]
    8294:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8298:	f2c2 0301 	movt	r3, #8193	; 0x2001
    829c:	781b      	ldrb	r3, [r3, #0]
    829e:	3301      	adds	r3, #1
    82a0:	b2da      	uxtb	r2, r3
    82a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    82a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82aa:	701a      	strb	r2, [r3, #0]
    82ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    82b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	2bff      	cmp	r3, #255	; 0xff
    82b8:	d110      	bne.n	82dc <send_attitude+0x588>
    82ba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    82be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82c2:	2200      	movs	r2, #0
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	e009      	b.n	82dc <send_attitude+0x588>
    82c8:	20013261 	.word	0x20013261
    82cc:	20013262 	.word	0x20013262
    82d0:	20013263 	.word	0x20013263
    82d4:	20013265 	.word	0x20013265
    82d8:	20013266 	.word	0x20013266
    82dc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    82e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	461a      	mov	r2, r3
    82e8:	f243 2364 	movw	r3, #12900	; 0x3264
    82ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82f0:	78d9      	ldrb	r1, [r3, #3]
    82f2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    82f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    82fa:	5499      	strb	r1, [r3, r2]
    82fc:	4bc2      	ldr	r3, [pc, #776]	; (8608 <send_attitude+0x8b4>)
    82fe:	781a      	ldrb	r2, [r3, #0]
    8300:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8304:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	4413      	add	r3, r2
    830c:	b2da      	uxtb	r2, r3
    830e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8312:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8316:	701a      	strb	r2, [r3, #0]
    8318:	f642 53a6 	movw	r3, #11686	; 0x2da6
    831c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8320:	781a      	ldrb	r2, [r3, #0]
    8322:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8326:	f2c2 0301 	movt	r3, #8193	; 0x2001
    832a:	781b      	ldrb	r3, [r3, #0]
    832c:	4413      	add	r3, r2
    832e:	b2da      	uxtb	r2, r3
    8330:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8334:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8338:	701a      	strb	r2, [r3, #0]
    833a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    833e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	3301      	adds	r3, #1
    8346:	b2da      	uxtb	r2, r3
    8348:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    834c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8350:	701a      	strb	r2, [r3, #0]
    8352:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8356:	f2c2 0301 	movt	r3, #8193	; 0x2001
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2bff      	cmp	r3, #255	; 0xff
    835e:	d105      	bne.n	836c <send_attitude+0x618>
    8360:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8364:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8368:	2200      	movs	r2, #0
    836a:	701a      	strb	r2, [r3, #0]
    836c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8370:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8374:	781b      	ldrb	r3, [r3, #0]
    8376:	461a      	mov	r2, r3
    8378:	f243 2368 	movw	r3, #12904	; 0x3268
    837c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8380:	7819      	ldrb	r1, [r3, #0]
    8382:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8386:	f2c2 0301 	movt	r3, #8193	; 0x2001
    838a:	5499      	strb	r1, [r3, r2]
    838c:	f243 2368 	movw	r3, #12904	; 0x3268
    8390:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8394:	781a      	ldrb	r2, [r3, #0]
    8396:	f642 53a5 	movw	r3, #11685	; 0x2da5
    839a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	4413      	add	r3, r2
    83a2:	b2da      	uxtb	r2, r3
    83a4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    83a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83ac:	701a      	strb	r2, [r3, #0]
    83ae:	f642 53a6 	movw	r3, #11686	; 0x2da6
    83b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83b6:	781a      	ldrb	r2, [r3, #0]
    83b8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    83bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	4413      	add	r3, r2
    83c4:	b2da      	uxtb	r2, r3
    83c6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    83ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83ce:	701a      	strb	r2, [r3, #0]
    83d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    83d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	3301      	adds	r3, #1
    83dc:	b2da      	uxtb	r2, r3
    83de:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    83e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83e6:	701a      	strb	r2, [r3, #0]
    83e8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    83ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83f0:	781b      	ldrb	r3, [r3, #0]
    83f2:	2bff      	cmp	r3, #255	; 0xff
    83f4:	d105      	bne.n	8402 <send_attitude+0x6ae>
    83f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    83fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    83fe:	2200      	movs	r2, #0
    8400:	701a      	strb	r2, [r3, #0]
    8402:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8406:	f2c2 0301 	movt	r3, #8193	; 0x2001
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	461a      	mov	r2, r3
    840e:	f243 2368 	movw	r3, #12904	; 0x3268
    8412:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8416:	7859      	ldrb	r1, [r3, #1]
    8418:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    841c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8420:	5499      	strb	r1, [r3, r2]
    8422:	4b7a      	ldr	r3, [pc, #488]	; (860c <send_attitude+0x8b8>)
    8424:	781a      	ldrb	r2, [r3, #0]
    8426:	f642 53a5 	movw	r3, #11685	; 0x2da5
    842a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    842e:	781b      	ldrb	r3, [r3, #0]
    8430:	4413      	add	r3, r2
    8432:	b2da      	uxtb	r2, r3
    8434:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8438:	f2c2 0301 	movt	r3, #8193	; 0x2001
    843c:	701a      	strb	r2, [r3, #0]
    843e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8442:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8446:	781a      	ldrb	r2, [r3, #0]
    8448:	f642 53a5 	movw	r3, #11685	; 0x2da5
    844c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	4413      	add	r3, r2
    8454:	b2da      	uxtb	r2, r3
    8456:	f642 53a6 	movw	r3, #11686	; 0x2da6
    845a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    845e:	701a      	strb	r2, [r3, #0]
    8460:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8464:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	3301      	adds	r3, #1
    846c:	b2da      	uxtb	r2, r3
    846e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8472:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8476:	701a      	strb	r2, [r3, #0]
    8478:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    847c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	2bff      	cmp	r3, #255	; 0xff
    8484:	d105      	bne.n	8492 <send_attitude+0x73e>
    8486:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    848a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    848e:	2200      	movs	r2, #0
    8490:	701a      	strb	r2, [r3, #0]
    8492:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8496:	f2c2 0301 	movt	r3, #8193	; 0x2001
    849a:	781b      	ldrb	r3, [r3, #0]
    849c:	461a      	mov	r2, r3
    849e:	f243 2368 	movw	r3, #12904	; 0x3268
    84a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84a6:	7899      	ldrb	r1, [r3, #2]
    84a8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    84ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84b0:	5499      	strb	r1, [r3, r2]
    84b2:	4b57      	ldr	r3, [pc, #348]	; (8610 <send_attitude+0x8bc>)
    84b4:	781a      	ldrb	r2, [r3, #0]
    84b6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    84ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84be:	781b      	ldrb	r3, [r3, #0]
    84c0:	4413      	add	r3, r2
    84c2:	b2da      	uxtb	r2, r3
    84c4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    84c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84cc:	701a      	strb	r2, [r3, #0]
    84ce:	f642 53a6 	movw	r3, #11686	; 0x2da6
    84d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84d6:	781a      	ldrb	r2, [r3, #0]
    84d8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    84dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84e0:	781b      	ldrb	r3, [r3, #0]
    84e2:	4413      	add	r3, r2
    84e4:	b2da      	uxtb	r2, r3
    84e6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    84ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84ee:	701a      	strb	r2, [r3, #0]
    84f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    84f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	3301      	adds	r3, #1
    84fc:	b2da      	uxtb	r2, r3
    84fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8502:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8506:	701a      	strb	r2, [r3, #0]
    8508:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    850c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	2bff      	cmp	r3, #255	; 0xff
    8514:	d105      	bne.n	8522 <send_attitude+0x7ce>
    8516:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    851a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    851e:	2200      	movs	r2, #0
    8520:	701a      	strb	r2, [r3, #0]
    8522:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8526:	f2c2 0301 	movt	r3, #8193	; 0x2001
    852a:	781b      	ldrb	r3, [r3, #0]
    852c:	461a      	mov	r2, r3
    852e:	f243 2368 	movw	r3, #12904	; 0x3268
    8532:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8536:	78d9      	ldrb	r1, [r3, #3]
    8538:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    853c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8540:	5499      	strb	r1, [r3, r2]
    8542:	4b34      	ldr	r3, [pc, #208]	; (8614 <send_attitude+0x8c0>)
    8544:	781a      	ldrb	r2, [r3, #0]
    8546:	f642 53a5 	movw	r3, #11685	; 0x2da5
    854a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    854e:	781b      	ldrb	r3, [r3, #0]
    8550:	4413      	add	r3, r2
    8552:	b2da      	uxtb	r2, r3
    8554:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8558:	f2c2 0301 	movt	r3, #8193	; 0x2001
    855c:	701a      	strb	r2, [r3, #0]
    855e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8562:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8566:	781a      	ldrb	r2, [r3, #0]
    8568:	f642 53a5 	movw	r3, #11685	; 0x2da5
    856c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	4413      	add	r3, r2
    8574:	b2da      	uxtb	r2, r3
    8576:	f642 53a6 	movw	r3, #11686	; 0x2da6
    857a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    857e:	701a      	strb	r2, [r3, #0]
    8580:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8584:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	3301      	adds	r3, #1
    858c:	b2da      	uxtb	r2, r3
    858e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8592:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8596:	701a      	strb	r2, [r3, #0]
    8598:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    859c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	2bff      	cmp	r3, #255	; 0xff
    85a4:	d105      	bne.n	85b2 <send_attitude+0x85e>
    85a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85ae:	2200      	movs	r2, #0
    85b0:	701a      	strb	r2, [r3, #0]
    85b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85ba:	781b      	ldrb	r3, [r3, #0]
    85bc:	461a      	mov	r2, r3
    85be:	f642 53a5 	movw	r3, #11685	; 0x2da5
    85c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85c6:	7819      	ldrb	r1, [r3, #0]
    85c8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    85cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85d0:	5499      	strb	r1, [r3, r2]
    85d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	3301      	adds	r3, #1
    85de:	b2da      	uxtb	r2, r3
    85e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85e8:	701a      	strb	r2, [r3, #0]
    85ea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    85f2:	781b      	ldrb	r3, [r3, #0]
    85f4:	2bff      	cmp	r3, #255	; 0xff
    85f6:	d10f      	bne.n	8618 <send_attitude+0x8c4>
    85f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    85fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8600:	2200      	movs	r2, #0
    8602:	701a      	strb	r2, [r3, #0]
    8604:	e008      	b.n	8618 <send_attitude+0x8c4>
    8606:	bf00      	nop
    8608:	20013267 	.word	0x20013267
    860c:	20013269 	.word	0x20013269
    8610:	2001326a 	.word	0x2001326a
    8614:	2001326b 	.word	0x2001326b
    8618:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    861c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	461a      	mov	r2, r3
    8624:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8628:	f2c2 0301 	movt	r3, #8193	; 0x2001
    862c:	7819      	ldrb	r1, [r3, #0]
    862e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8632:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8636:	5499      	strb	r1, [r3, r2]
    8638:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    863c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	3301      	adds	r3, #1
    8644:	b2da      	uxtb	r2, r3
    8646:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    864a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    864e:	701a      	strb	r2, [r3, #0]
    8650:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8654:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8658:	781b      	ldrb	r3, [r3, #0]
    865a:	2bff      	cmp	r3, #255	; 0xff
    865c:	d105      	bne.n	866a <send_attitude+0x916>
    865e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8662:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8666:	2200      	movs	r2, #0
    8668:	701a      	strb	r2, [r3, #0]
    866a:	f242 0339 	movw	r3, #8249	; 0x2039
    866e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	b2db      	uxtb	r3, r3
    8676:	f003 0310 	and.w	r3, r3, #16
    867a:	2b00      	cmp	r3, #0
    867c:	d15a      	bne.n	8734 <send_attitude+0x9e0>
    867e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8682:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	b2db      	uxtb	r3, r3
    868a:	461a      	mov	r2, r3
    868c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8690:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8694:	5c9a      	ldrb	r2, [r3, r2]
    8696:	f642 53a3 	movw	r3, #11683	; 0x2da3
    869a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    869e:	701a      	strb	r2, [r3, #0]
    86a0:	f642 53a4 	movw	r3, #11684	; 0x2da4
    86a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86a8:	2200      	movs	r2, #0
    86aa:	701a      	strb	r2, [r3, #0]
    86ac:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    86b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	b2db      	uxtb	r3, r3
    86b8:	3301      	adds	r3, #1
    86ba:	b2da      	uxtb	r2, r3
    86bc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    86c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86c4:	701a      	strb	r2, [r3, #0]
    86c6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    86ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	b2db      	uxtb	r3, r3
    86d2:	2bff      	cmp	r3, #255	; 0xff
    86d4:	d105      	bne.n	86e2 <send_attitude+0x98e>
    86d6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    86da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86de:	2200      	movs	r2, #0
    86e0:	701a      	strb	r2, [r3, #0]
    86e2:	f242 0338 	movw	r3, #8248	; 0x2038
    86e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ea:	f242 0238 	movw	r2, #8248	; 0x2038
    86ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    86f2:	7812      	ldrb	r2, [r2, #0]
    86f4:	b2d2      	uxtb	r2, r2
    86f6:	f042 0201 	orr.w	r2, r2, #1
    86fa:	b2d2      	uxtb	r2, r2
    86fc:	701a      	strb	r2, [r3, #0]
    86fe:	f242 0339 	movw	r3, #8249	; 0x2039
    8702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8706:	f242 0239 	movw	r2, #8249	; 0x2039
    870a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    870e:	7812      	ldrb	r2, [r2, #0]
    8710:	b2d2      	uxtb	r2, r2
    8712:	f042 0210 	orr.w	r2, r2, #16
    8716:	b2d2      	uxtb	r2, r2
    8718:	701a      	strb	r2, [r3, #0]
    871a:	e00b      	b.n	8734 <send_attitude+0x9e0>
    871c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    8720:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	3301      	adds	r3, #1
    8728:	b2da      	uxtb	r2, r3
    872a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    872e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8732:	701a      	strb	r2, [r3, #0]
  }
}
    8734:	46bd      	mov	sp, r7
    8736:	f85d 7b04 	ldr.w	r7, [sp], #4
    873a:	4770      	bx	lr

0000873c <send_adc>:
  
void send_adc(void){  //500ms
    873c:	b480      	push	{r7}
    873e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8740:	f642 4399 	movw	r3, #11417	; 0x2c99
    8744:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8748:	781a      	ldrb	r2, [r3, #0]
    874a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    874e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8752:	fba3 1302 	umull	r1, r3, r3, r2
    8756:	0899      	lsrs	r1, r3, #2
    8758:	460b      	mov	r3, r1
    875a:	009b      	lsls	r3, r3, #2
    875c:	440b      	add	r3, r1
    875e:	1ad3      	subs	r3, r2, r3
    8760:	b2db      	uxtb	r3, r3
    8762:	2b01      	cmp	r3, #1
    8764:	f040 8269 	bne.w	8c3a <send_adc+0x4fe>
    8768:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    876c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8770:	781a      	ldrb	r2, [r3, #0]
    8772:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8776:	f2c2 0301 	movt	r3, #8193	; 0x2001
    877a:	781b      	ldrb	r3, [r3, #0]
    877c:	b2db      	uxtb	r3, r3
    877e:	429a      	cmp	r2, r3
    8780:	d313      	bcc.n	87aa <send_adc+0x6e>
    8782:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8786:	f2c2 0301 	movt	r3, #8193	; 0x2001
    878a:	781b      	ldrb	r3, [r3, #0]
    878c:	b2db      	uxtb	r3, r3
    878e:	461a      	mov	r2, r3
    8790:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8794:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8798:	781b      	ldrb	r3, [r3, #0]
    879a:	1ad3      	subs	r3, r2, r3
    879c:	33ff      	adds	r3, #255	; 0xff
    879e:	2b08      	cmp	r3, #8
    87a0:	bfd4      	ite	le
    87a2:	2300      	movle	r3, #0
    87a4:	2301      	movgt	r3, #1
    87a6:	b2db      	uxtb	r3, r3
    87a8:	e011      	b.n	87ce <send_adc+0x92>
    87aa:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    87ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	b2db      	uxtb	r3, r3
    87b6:	461a      	mov	r2, r3
    87b8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    87bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	1ad3      	subs	r3, r2, r3
    87c4:	2b08      	cmp	r3, #8
    87c6:	bfd4      	ite	le
    87c8:	2300      	movle	r3, #0
    87ca:	2301      	movgt	r3, #1
    87cc:	b2db      	uxtb	r3, r3
    87ce:	2b00      	cmp	r3, #0
    87d0:	f000 8227 	beq.w	8c22 <send_adc+0x4e6>
    87d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    87d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	461a      	mov	r2, r3
    87e0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    87e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    87e8:	2105      	movs	r1, #5
    87ea:	5499      	strb	r1, [r3, r2]
    87ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    87f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	3301      	adds	r3, #1
    87f8:	b2da      	uxtb	r2, r3
    87fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    87fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8802:	701a      	strb	r2, [r3, #0]
    8804:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8808:	f2c2 0301 	movt	r3, #8193	; 0x2001
    880c:	781b      	ldrb	r3, [r3, #0]
    880e:	2bff      	cmp	r3, #255	; 0xff
    8810:	d105      	bne.n	881e <send_adc+0xe2>
    8812:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8816:	f2c2 0301 	movt	r3, #8193	; 0x2001
    881a:	2200      	movs	r2, #0
    881c:	701a      	strb	r2, [r3, #0]
    881e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8822:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	461a      	mov	r2, r3
    882a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    882e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8832:	2107      	movs	r1, #7
    8834:	5499      	strb	r1, [r3, r2]
    8836:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    883a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	3301      	adds	r3, #1
    8842:	b2da      	uxtb	r2, r3
    8844:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8848:	f2c2 0301 	movt	r3, #8193	; 0x2001
    884c:	701a      	strb	r2, [r3, #0]
    884e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8852:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	2bff      	cmp	r3, #255	; 0xff
    885a:	d105      	bne.n	8868 <send_adc+0x12c>
    885c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8860:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8864:	2200      	movs	r2, #0
    8866:	701a      	strb	r2, [r3, #0]
    8868:	f642 53a5 	movw	r3, #11685	; 0x2da5
    886c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8870:	2207      	movs	r2, #7
    8872:	701a      	strb	r2, [r3, #0]
    8874:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8878:	f2c2 0301 	movt	r3, #8193	; 0x2001
    887c:	2207      	movs	r2, #7
    887e:	701a      	strb	r2, [r3, #0]
    8880:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8884:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8888:	781b      	ldrb	r3, [r3, #0]
    888a:	461a      	mov	r2, r3
    888c:	f642 7340 	movw	r3, #12096	; 0x2f40
    8890:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8894:	7819      	ldrb	r1, [r3, #0]
    8896:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    889a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    889e:	5499      	strb	r1, [r3, r2]
    88a0:	f642 7340 	movw	r3, #12096	; 0x2f40
    88a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88a8:	781a      	ldrb	r2, [r3, #0]
    88aa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    88ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88b2:	781b      	ldrb	r3, [r3, #0]
    88b4:	4413      	add	r3, r2
    88b6:	b2da      	uxtb	r2, r3
    88b8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    88bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88c0:	701a      	strb	r2, [r3, #0]
    88c2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    88c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88ca:	781a      	ldrb	r2, [r3, #0]
    88cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    88d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	4413      	add	r3, r2
    88d8:	b2da      	uxtb	r2, r3
    88da:	f642 53a6 	movw	r3, #11686	; 0x2da6
    88de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88e2:	701a      	strb	r2, [r3, #0]
    88e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    88e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	3301      	adds	r3, #1
    88f0:	b2da      	uxtb	r2, r3
    88f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    88f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    88fa:	701a      	strb	r2, [r3, #0]
    88fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8900:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	2bff      	cmp	r3, #255	; 0xff
    8908:	d105      	bne.n	8916 <send_adc+0x1da>
    890a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    890e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8912:	2200      	movs	r2, #0
    8914:	701a      	strb	r2, [r3, #0]
    8916:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    891a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	461a      	mov	r2, r3
    8922:	f642 7340 	movw	r3, #12096	; 0x2f40
    8926:	f2c2 0301 	movt	r3, #8193	; 0x2001
    892a:	7859      	ldrb	r1, [r3, #1]
    892c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8930:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8934:	5499      	strb	r1, [r3, r2]
    8936:	4bc3      	ldr	r3, [pc, #780]	; (8c44 <send_adc+0x508>)
    8938:	781a      	ldrb	r2, [r3, #0]
    893a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    893e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	4413      	add	r3, r2
    8946:	b2da      	uxtb	r2, r3
    8948:	f642 53a5 	movw	r3, #11685	; 0x2da5
    894c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8950:	701a      	strb	r2, [r3, #0]
    8952:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8956:	f2c2 0301 	movt	r3, #8193	; 0x2001
    895a:	781a      	ldrb	r2, [r3, #0]
    895c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8960:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	4413      	add	r3, r2
    8968:	b2da      	uxtb	r2, r3
    896a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    896e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8972:	701a      	strb	r2, [r3, #0]
    8974:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8978:	f2c2 0301 	movt	r3, #8193	; 0x2001
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	3301      	adds	r3, #1
    8980:	b2da      	uxtb	r2, r3
    8982:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8986:	f2c2 0301 	movt	r3, #8193	; 0x2001
    898a:	701a      	strb	r2, [r3, #0]
    898c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8990:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	2bff      	cmp	r3, #255	; 0xff
    8998:	d105      	bne.n	89a6 <send_adc+0x26a>
    899a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    899e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89a2:	2200      	movs	r2, #0
    89a4:	701a      	strb	r2, [r3, #0]
    89a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    89aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	461a      	mov	r2, r3
    89b2:	f642 7342 	movw	r3, #12098	; 0x2f42
    89b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89ba:	7819      	ldrb	r1, [r3, #0]
    89bc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    89c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89c4:	5499      	strb	r1, [r3, r2]
    89c6:	f642 7342 	movw	r3, #12098	; 0x2f42
    89ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89ce:	781a      	ldrb	r2, [r3, #0]
    89d0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    89d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89d8:	781b      	ldrb	r3, [r3, #0]
    89da:	4413      	add	r3, r2
    89dc:	b2da      	uxtb	r2, r3
    89de:	f642 53a5 	movw	r3, #11685	; 0x2da5
    89e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89e6:	701a      	strb	r2, [r3, #0]
    89e8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    89ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89f0:	781a      	ldrb	r2, [r3, #0]
    89f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    89f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	4413      	add	r3, r2
    89fe:	b2da      	uxtb	r2, r3
    8a00:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8a04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a08:	701a      	strb	r2, [r3, #0]
    8a0a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a12:	781b      	ldrb	r3, [r3, #0]
    8a14:	3301      	adds	r3, #1
    8a16:	b2da      	uxtb	r2, r3
    8a18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a20:	701a      	strb	r2, [r3, #0]
    8a22:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	2bff      	cmp	r3, #255	; 0xff
    8a2e:	d105      	bne.n	8a3c <send_adc+0x300>
    8a30:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a38:	2200      	movs	r2, #0
    8a3a:	701a      	strb	r2, [r3, #0]
    8a3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	461a      	mov	r2, r3
    8a48:	f642 7342 	movw	r3, #12098	; 0x2f42
    8a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a50:	7859      	ldrb	r1, [r3, #1]
    8a52:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8a56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a5a:	5499      	strb	r1, [r3, r2]
    8a5c:	4b7a      	ldr	r3, [pc, #488]	; (8c48 <send_adc+0x50c>)
    8a5e:	781a      	ldrb	r2, [r3, #0]
    8a60:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8a64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a68:	781b      	ldrb	r3, [r3, #0]
    8a6a:	4413      	add	r3, r2
    8a6c:	b2da      	uxtb	r2, r3
    8a6e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8a72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a76:	701a      	strb	r2, [r3, #0]
    8a78:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8a7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a80:	781a      	ldrb	r2, [r3, #0]
    8a82:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8a86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	4413      	add	r3, r2
    8a8e:	b2da      	uxtb	r2, r3
    8a90:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8a94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8a98:	701a      	strb	r2, [r3, #0]
    8a9a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8a9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8aa2:	781b      	ldrb	r3, [r3, #0]
    8aa4:	3301      	adds	r3, #1
    8aa6:	b2da      	uxtb	r2, r3
    8aa8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8aac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ab0:	701a      	strb	r2, [r3, #0]
    8ab2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ab6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	2bff      	cmp	r3, #255	; 0xff
    8abe:	d105      	bne.n	8acc <send_adc+0x390>
    8ac0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ac4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ac8:	2200      	movs	r2, #0
    8aca:	701a      	strb	r2, [r3, #0]
    8acc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ad0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	461a      	mov	r2, r3
    8ad8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8adc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ae0:	7819      	ldrb	r1, [r3, #0]
    8ae2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8ae6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8aea:	5499      	strb	r1, [r3, r2]
    8aec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8af0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	3301      	adds	r3, #1
    8af8:	b2da      	uxtb	r2, r3
    8afa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8afe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b02:	701a      	strb	r2, [r3, #0]
    8b04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	2bff      	cmp	r3, #255	; 0xff
    8b10:	d105      	bne.n	8b1e <send_adc+0x3e2>
    8b12:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b1a:	2200      	movs	r2, #0
    8b1c:	701a      	strb	r2, [r3, #0]
    8b1e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	461a      	mov	r2, r3
    8b2a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8b2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b32:	7819      	ldrb	r1, [r3, #0]
    8b34:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8b38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b3c:	5499      	strb	r1, [r3, r2]
    8b3e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b46:	781b      	ldrb	r3, [r3, #0]
    8b48:	3301      	adds	r3, #1
    8b4a:	b2da      	uxtb	r2, r3
    8b4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b54:	701a      	strb	r2, [r3, #0]
    8b56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b5e:	781b      	ldrb	r3, [r3, #0]
    8b60:	2bff      	cmp	r3, #255	; 0xff
    8b62:	d105      	bne.n	8b70 <send_adc+0x434>
    8b64:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8b68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b6c:	2200      	movs	r2, #0
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f242 0339 	movw	r3, #8249	; 0x2039
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	b2db      	uxtb	r3, r3
    8b7c:	f003 0310 	and.w	r3, r3, #16
    8b80:	2b00      	cmp	r3, #0
    8b82:	d15a      	bne.n	8c3a <send_adc+0x4fe>
    8b84:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8b88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b8c:	781b      	ldrb	r3, [r3, #0]
    8b8e:	b2db      	uxtb	r3, r3
    8b90:	461a      	mov	r2, r3
    8b92:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8b96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8b9a:	5c9a      	ldrb	r2, [r3, r2]
    8b9c:	f642 53a3 	movw	r3, #11683	; 0x2da3
    8ba0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ba4:	701a      	strb	r2, [r3, #0]
    8ba6:	f642 53a4 	movw	r3, #11684	; 0x2da4
    8baa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8bae:	2200      	movs	r2, #0
    8bb0:	701a      	strb	r2, [r3, #0]
    8bb2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8bb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	b2db      	uxtb	r3, r3
    8bbe:	3301      	adds	r3, #1
    8bc0:	b2da      	uxtb	r2, r3
    8bc2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8bc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8bca:	701a      	strb	r2, [r3, #0]
    8bcc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8bd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8bd4:	781b      	ldrb	r3, [r3, #0]
    8bd6:	b2db      	uxtb	r3, r3
    8bd8:	2bff      	cmp	r3, #255	; 0xff
    8bda:	d105      	bne.n	8be8 <send_adc+0x4ac>
    8bdc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8be0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8be4:	2200      	movs	r2, #0
    8be6:	701a      	strb	r2, [r3, #0]
    8be8:	f242 0338 	movw	r3, #8248	; 0x2038
    8bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf0:	f242 0238 	movw	r2, #8248	; 0x2038
    8bf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8bf8:	7812      	ldrb	r2, [r2, #0]
    8bfa:	b2d2      	uxtb	r2, r2
    8bfc:	f042 0201 	orr.w	r2, r2, #1
    8c00:	b2d2      	uxtb	r2, r2
    8c02:	701a      	strb	r2, [r3, #0]
    8c04:	f242 0339 	movw	r3, #8249	; 0x2039
    8c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0c:	f242 0239 	movw	r2, #8249	; 0x2039
    8c10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8c14:	7812      	ldrb	r2, [r2, #0]
    8c16:	b2d2      	uxtb	r2, r2
    8c18:	f042 0210 	orr.w	r2, r2, #16
    8c1c:	b2d2      	uxtb	r2, r2
    8c1e:	701a      	strb	r2, [r3, #0]
    8c20:	e00b      	b.n	8c3a <send_adc+0x4fe>
    8c22:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    8c26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c2a:	781b      	ldrb	r3, [r3, #0]
    8c2c:	3301      	adds	r3, #1
    8c2e:	b2da      	uxtb	r2, r3
    8c30:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    8c34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c38:	701a      	strb	r2, [r3, #0]
}
    8c3a:	46bd      	mov	sp, r7
    8c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c40:	4770      	bx	lr
    8c42:	bf00      	nop
    8c44:	20012f41 	.word	0x20012f41
    8c48:	20012f43 	.word	0x20012f43

00008c4c <send_settings>:
void send_settings(void){ //500ms
    8c4c:	b480      	push	{r7}
    8c4e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    8c50:	f642 4399 	movw	r3, #11417	; 0x2c99
    8c54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c58:	781a      	ldrb	r2, [r3, #0]
    8c5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8c5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8c62:	fba3 1302 	umull	r1, r3, r3, r2
    8c66:	0899      	lsrs	r1, r3, #2
    8c68:	460b      	mov	r3, r1
    8c6a:	009b      	lsls	r3, r3, #2
    8c6c:	440b      	add	r3, r1
    8c6e:	1ad3      	subs	r3, r2, r3
    8c70:	b2db      	uxtb	r3, r3
    8c72:	2b02      	cmp	r3, #2
    8c74:	f040 83e7 	bne.w	9446 <send_settings+0x7fa>
    8c78:	f243 23b4 	movw	r3, #12980	; 0x32b4
    8c7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	2b00      	cmp	r3, #0
    8c84:	f000 83df 	beq.w	9446 <send_settings+0x7fa>
    8c88:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8c8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c90:	781a      	ldrb	r2, [r3, #0]
    8c92:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8c96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8c9a:	781b      	ldrb	r3, [r3, #0]
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	429a      	cmp	r2, r3
    8ca0:	d313      	bcc.n	8cca <send_settings+0x7e>
    8ca2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8ca6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8caa:	781b      	ldrb	r3, [r3, #0]
    8cac:	b2db      	uxtb	r3, r3
    8cae:	461a      	mov	r2, r3
    8cb0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8cb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	1ad3      	subs	r3, r2, r3
    8cbc:	33ff      	adds	r3, #255	; 0xff
    8cbe:	2b0d      	cmp	r3, #13
    8cc0:	bfd4      	ite	le
    8cc2:	2300      	movle	r3, #0
    8cc4:	2301      	movgt	r3, #1
    8cc6:	b2db      	uxtb	r3, r3
    8cc8:	e011      	b.n	8cee <send_settings+0xa2>
    8cca:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    8cce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	b2db      	uxtb	r3, r3
    8cd6:	461a      	mov	r2, r3
    8cd8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8cdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	1ad3      	subs	r3, r2, r3
    8ce4:	2b0d      	cmp	r3, #13
    8ce6:	bfd4      	ite	le
    8ce8:	2300      	movle	r3, #0
    8cea:	2301      	movgt	r3, #1
    8cec:	b2db      	uxtb	r3, r3
    8cee:	2b00      	cmp	r3, #0
    8cf0:	f000 839d 	beq.w	942e <send_settings+0x7e2>
    8cf4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8cf8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8cfc:	781b      	ldrb	r3, [r3, #0]
    8cfe:	461a      	mov	r2, r3
    8d00:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8d04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d08:	2105      	movs	r1, #5
    8d0a:	5499      	strb	r1, [r3, r2]
    8d0c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	3301      	adds	r3, #1
    8d18:	b2da      	uxtb	r2, r3
    8d1a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d22:	701a      	strb	r2, [r3, #0]
    8d24:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d2c:	781b      	ldrb	r3, [r3, #0]
    8d2e:	2bff      	cmp	r3, #255	; 0xff
    8d30:	d105      	bne.n	8d3e <send_settings+0xf2>
    8d32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d3a:	2200      	movs	r2, #0
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d46:	781b      	ldrb	r3, [r3, #0]
    8d48:	461a      	mov	r2, r3
    8d4a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8d4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d52:	2111      	movs	r1, #17
    8d54:	5499      	strb	r1, [r3, r2]
    8d56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	3301      	adds	r3, #1
    8d62:	b2da      	uxtb	r2, r3
    8d64:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d6c:	701a      	strb	r2, [r3, #0]
    8d6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	2bff      	cmp	r3, #255	; 0xff
    8d7a:	d105      	bne.n	8d88 <send_settings+0x13c>
    8d7c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8d80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d84:	2200      	movs	r2, #0
    8d86:	701a      	strb	r2, [r3, #0]
    8d88:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8d8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d90:	2211      	movs	r2, #17
    8d92:	701a      	strb	r2, [r3, #0]
    8d94:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8d98:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8d9c:	2211      	movs	r2, #17
    8d9e:	701a      	strb	r2, [r3, #0]
    8da0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8da4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	461a      	mov	r2, r3
    8dac:	f243 23b4 	movw	r3, #12980	; 0x32b4
    8db0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8db4:	7819      	ldrb	r1, [r3, #0]
    8db6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8dba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8dbe:	5499      	strb	r1, [r3, r2]
    8dc0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8dc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8dc8:	781a      	ldrb	r2, [r3, #0]
    8dca:	f243 23b4 	movw	r3, #12980	; 0x32b4
    8dce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	4413      	add	r3, r2
    8dd6:	b2da      	uxtb	r2, r3
    8dd8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8ddc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8de0:	701a      	strb	r2, [r3, #0]
    8de2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8de6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8dea:	781a      	ldrb	r2, [r3, #0]
    8dec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8df0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8df4:	781b      	ldrb	r3, [r3, #0]
    8df6:	4413      	add	r3, r2
    8df8:	b2da      	uxtb	r2, r3
    8dfa:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8dfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e02:	701a      	strb	r2, [r3, #0]
    8e04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	3301      	adds	r3, #1
    8e10:	b2da      	uxtb	r2, r3
    8e12:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e1a:	701a      	strb	r2, [r3, #0]
    8e1c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	2bff      	cmp	r3, #255	; 0xff
    8e28:	d105      	bne.n	8e36 <send_settings+0x1ea>
    8e2a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e32:	2200      	movs	r2, #0
    8e34:	701a      	strb	r2, [r3, #0]
    8e36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	461a      	mov	r2, r3
    8e42:	f642 4390 	movw	r3, #11408	; 0x2c90
    8e46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e4a:	7819      	ldrb	r1, [r3, #0]
    8e4c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8e50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e54:	5499      	strb	r1, [r3, r2]
    8e56:	f642 4390 	movw	r3, #11408	; 0x2c90
    8e5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e5e:	781a      	ldrb	r2, [r3, #0]
    8e60:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8e64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	4413      	add	r3, r2
    8e6c:	b2da      	uxtb	r2, r3
    8e6e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8e72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e76:	701a      	strb	r2, [r3, #0]
    8e78:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8e7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e80:	781a      	ldrb	r2, [r3, #0]
    8e82:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8e86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	4413      	add	r3, r2
    8e8e:	b2da      	uxtb	r2, r3
    8e90:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8e94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8e98:	701a      	strb	r2, [r3, #0]
    8e9a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8e9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	3301      	adds	r3, #1
    8ea6:	b2da      	uxtb	r2, r3
    8ea8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8eac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8eb0:	701a      	strb	r2, [r3, #0]
    8eb2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8eb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8eba:	781b      	ldrb	r3, [r3, #0]
    8ebc:	2bff      	cmp	r3, #255	; 0xff
    8ebe:	d105      	bne.n	8ecc <send_settings+0x280>
    8ec0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ec4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ec8:	2200      	movs	r2, #0
    8eca:	701a      	strb	r2, [r3, #0]
    8ecc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ed0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	461a      	mov	r2, r3
    8ed8:	f642 4390 	movw	r3, #11408	; 0x2c90
    8edc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ee0:	7859      	ldrb	r1, [r3, #1]
    8ee2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8ee6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8eea:	5499      	strb	r1, [r3, r2]
    8eec:	4bd1      	ldr	r3, [pc, #836]	; (9234 <send_settings+0x5e8>)
    8eee:	781a      	ldrb	r2, [r3, #0]
    8ef0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8ef4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ef8:	781b      	ldrb	r3, [r3, #0]
    8efa:	4413      	add	r3, r2
    8efc:	b2da      	uxtb	r2, r3
    8efe:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8f02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f06:	701a      	strb	r2, [r3, #0]
    8f08:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8f0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8f16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	4413      	add	r3, r2
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8f24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f28:	701a      	strb	r2, [r3, #0]
    8f2a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8f2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f32:	781b      	ldrb	r3, [r3, #0]
    8f34:	3301      	adds	r3, #1
    8f36:	b2da      	uxtb	r2, r3
    8f38:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8f3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f40:	701a      	strb	r2, [r3, #0]
    8f42:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8f46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	2bff      	cmp	r3, #255	; 0xff
    8f4e:	d105      	bne.n	8f5c <send_settings+0x310>
    8f50:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8f54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f58:	2200      	movs	r2, #0
    8f5a:	701a      	strb	r2, [r3, #0]
    8f5c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8f60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	461a      	mov	r2, r3
    8f68:	f642 4390 	movw	r3, #11408	; 0x2c90
    8f6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f70:	7899      	ldrb	r1, [r3, #2]
    8f72:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    8f76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f7a:	5499      	strb	r1, [r3, r2]
    8f7c:	4bae      	ldr	r3, [pc, #696]	; (9238 <send_settings+0x5ec>)
    8f7e:	781a      	ldrb	r2, [r3, #0]
    8f80:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8f84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f88:	781b      	ldrb	r3, [r3, #0]
    8f8a:	4413      	add	r3, r2
    8f8c:	b2da      	uxtb	r2, r3
    8f8e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8f92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8f96:	701a      	strb	r2, [r3, #0]
    8f98:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8f9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fa0:	781a      	ldrb	r2, [r3, #0]
    8fa2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    8fa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	4413      	add	r3, r2
    8fae:	b2da      	uxtb	r2, r3
    8fb0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    8fb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fb8:	701a      	strb	r2, [r3, #0]
    8fba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8fbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	3301      	adds	r3, #1
    8fc6:	b2da      	uxtb	r2, r3
    8fc8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8fcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8fd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	2bff      	cmp	r3, #255	; 0xff
    8fde:	d105      	bne.n	8fec <send_settings+0x3a0>
    8fe0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8fe4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8fe8:	2200      	movs	r2, #0
    8fea:	701a      	strb	r2, [r3, #0]
    8fec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    8ff0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	461a      	mov	r2, r3
    8ff8:	f642 4390 	movw	r3, #11408	; 0x2c90
    8ffc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9000:	78d9      	ldrb	r1, [r3, #3]
    9002:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9006:	f2c2 0301 	movt	r3, #8193	; 0x2001
    900a:	5499      	strb	r1, [r3, r2]
    900c:	4b8b      	ldr	r3, [pc, #556]	; (923c <send_settings+0x5f0>)
    900e:	781a      	ldrb	r2, [r3, #0]
    9010:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9014:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9018:	781b      	ldrb	r3, [r3, #0]
    901a:	4413      	add	r3, r2
    901c:	b2da      	uxtb	r2, r3
    901e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9022:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9026:	701a      	strb	r2, [r3, #0]
    9028:	f642 53a6 	movw	r3, #11686	; 0x2da6
    902c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9030:	781a      	ldrb	r2, [r3, #0]
    9032:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9036:	f2c2 0301 	movt	r3, #8193	; 0x2001
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	4413      	add	r3, r2
    903e:	b2da      	uxtb	r2, r3
    9040:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9044:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9048:	701a      	strb	r2, [r3, #0]
    904a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    904e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	3301      	adds	r3, #1
    9056:	b2da      	uxtb	r2, r3
    9058:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    905c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9060:	701a      	strb	r2, [r3, #0]
    9062:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9066:	f2c2 0301 	movt	r3, #8193	; 0x2001
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	2bff      	cmp	r3, #255	; 0xff
    906e:	d105      	bne.n	907c <send_settings+0x430>
    9070:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9074:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9078:	2200      	movs	r2, #0
    907a:	701a      	strb	r2, [r3, #0]
    907c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9080:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	461a      	mov	r2, r3
    9088:	f642 4394 	movw	r3, #11412	; 0x2c94
    908c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9090:	7819      	ldrb	r1, [r3, #0]
    9092:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9096:	f2c2 0301 	movt	r3, #8193	; 0x2001
    909a:	5499      	strb	r1, [r3, r2]
    909c:	f642 4394 	movw	r3, #11412	; 0x2c94
    90a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90a4:	781a      	ldrb	r2, [r3, #0]
    90a6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    90aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	4413      	add	r3, r2
    90b2:	b2da      	uxtb	r2, r3
    90b4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    90b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90bc:	701a      	strb	r2, [r3, #0]
    90be:	f642 53a6 	movw	r3, #11686	; 0x2da6
    90c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90c6:	781a      	ldrb	r2, [r3, #0]
    90c8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    90cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90d0:	781b      	ldrb	r3, [r3, #0]
    90d2:	4413      	add	r3, r2
    90d4:	b2da      	uxtb	r2, r3
    90d6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    90da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90de:	701a      	strb	r2, [r3, #0]
    90e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    90e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	3301      	adds	r3, #1
    90ec:	b2da      	uxtb	r2, r3
    90ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    90f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    90f6:	701a      	strb	r2, [r3, #0]
    90f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    90fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2bff      	cmp	r3, #255	; 0xff
    9104:	d105      	bne.n	9112 <send_settings+0x4c6>
    9106:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    910a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    910e:	2200      	movs	r2, #0
    9110:	701a      	strb	r2, [r3, #0]
    9112:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9116:	f2c2 0301 	movt	r3, #8193	; 0x2001
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	461a      	mov	r2, r3
    911e:	f642 4394 	movw	r3, #11412	; 0x2c94
    9122:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9126:	7859      	ldrb	r1, [r3, #1]
    9128:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    912c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9130:	5499      	strb	r1, [r3, r2]
    9132:	4b43      	ldr	r3, [pc, #268]	; (9240 <send_settings+0x5f4>)
    9134:	781a      	ldrb	r2, [r3, #0]
    9136:	f642 53a5 	movw	r3, #11685	; 0x2da5
    913a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	4413      	add	r3, r2
    9142:	b2da      	uxtb	r2, r3
    9144:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9148:	f2c2 0301 	movt	r3, #8193	; 0x2001
    914c:	701a      	strb	r2, [r3, #0]
    914e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9152:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9156:	781a      	ldrb	r2, [r3, #0]
    9158:	f642 53a5 	movw	r3, #11685	; 0x2da5
    915c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	4413      	add	r3, r2
    9164:	b2da      	uxtb	r2, r3
    9166:	f642 53a6 	movw	r3, #11686	; 0x2da6
    916a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    916e:	701a      	strb	r2, [r3, #0]
    9170:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9174:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	3301      	adds	r3, #1
    917c:	b2da      	uxtb	r2, r3
    917e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9182:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9186:	701a      	strb	r2, [r3, #0]
    9188:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    918c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	2bff      	cmp	r3, #255	; 0xff
    9194:	d105      	bne.n	91a2 <send_settings+0x556>
    9196:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    919a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    919e:	2200      	movs	r2, #0
    91a0:	701a      	strb	r2, [r3, #0]
    91a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    91a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	461a      	mov	r2, r3
    91ae:	f642 4394 	movw	r3, #11412	; 0x2c94
    91b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91b6:	7899      	ldrb	r1, [r3, #2]
    91b8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    91bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91c0:	5499      	strb	r1, [r3, r2]
    91c2:	4b20      	ldr	r3, [pc, #128]	; (9244 <send_settings+0x5f8>)
    91c4:	781a      	ldrb	r2, [r3, #0]
    91c6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    91ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	4413      	add	r3, r2
    91d2:	b2da      	uxtb	r2, r3
    91d4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    91d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91dc:	701a      	strb	r2, [r3, #0]
    91de:	f642 53a6 	movw	r3, #11686	; 0x2da6
    91e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    91ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	4413      	add	r3, r2
    91f4:	b2da      	uxtb	r2, r3
    91f6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    91fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9204:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	3301      	adds	r3, #1
    920c:	b2da      	uxtb	r2, r3
    920e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9212:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9216:	701a      	strb	r2, [r3, #0]
    9218:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    921c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9220:	781b      	ldrb	r3, [r3, #0]
    9222:	2bff      	cmp	r3, #255	; 0xff
    9224:	d110      	bne.n	9248 <send_settings+0x5fc>
    9226:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    922a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    922e:	2200      	movs	r2, #0
    9230:	701a      	strb	r2, [r3, #0]
    9232:	e009      	b.n	9248 <send_settings+0x5fc>
    9234:	20012c91 	.word	0x20012c91
    9238:	20012c92 	.word	0x20012c92
    923c:	20012c93 	.word	0x20012c93
    9240:	20012c95 	.word	0x20012c95
    9244:	20012c96 	.word	0x20012c96
    9248:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    924c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	461a      	mov	r2, r3
    9254:	f642 4394 	movw	r3, #11412	; 0x2c94
    9258:	f2c2 0301 	movt	r3, #8193	; 0x2001
    925c:	78d9      	ldrb	r1, [r3, #3]
    925e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9262:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9266:	5499      	strb	r1, [r3, r2]
    9268:	4b79      	ldr	r3, [pc, #484]	; (9450 <send_settings+0x804>)
    926a:	781a      	ldrb	r2, [r3, #0]
    926c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9270:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9274:	781b      	ldrb	r3, [r3, #0]
    9276:	4413      	add	r3, r2
    9278:	b2da      	uxtb	r2, r3
    927a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    927e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9282:	701a      	strb	r2, [r3, #0]
    9284:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9288:	f2c2 0301 	movt	r3, #8193	; 0x2001
    928c:	781a      	ldrb	r2, [r3, #0]
    928e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9292:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9296:	781b      	ldrb	r3, [r3, #0]
    9298:	4413      	add	r3, r2
    929a:	b2da      	uxtb	r2, r3
    929c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    92a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	3301      	adds	r3, #1
    92b2:	b2da      	uxtb	r2, r3
    92b4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92bc:	701a      	strb	r2, [r3, #0]
    92be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	2bff      	cmp	r3, #255	; 0xff
    92ca:	d105      	bne.n	92d8 <send_settings+0x68c>
    92cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92d4:	2200      	movs	r2, #0
    92d6:	701a      	strb	r2, [r3, #0]
    92d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	461a      	mov	r2, r3
    92e4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    92e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92ec:	7819      	ldrb	r1, [r3, #0]
    92ee:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    92f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92f6:	5499      	strb	r1, [r3, r2]
    92f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    92fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9300:	781b      	ldrb	r3, [r3, #0]
    9302:	3301      	adds	r3, #1
    9304:	b2da      	uxtb	r2, r3
    9306:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    930a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    930e:	701a      	strb	r2, [r3, #0]
    9310:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9314:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9318:	781b      	ldrb	r3, [r3, #0]
    931a:	2bff      	cmp	r3, #255	; 0xff
    931c:	d105      	bne.n	932a <send_settings+0x6de>
    931e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9322:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9326:	2200      	movs	r2, #0
    9328:	701a      	strb	r2, [r3, #0]
    932a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    932e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9332:	781b      	ldrb	r3, [r3, #0]
    9334:	461a      	mov	r2, r3
    9336:	f642 53a6 	movw	r3, #11686	; 0x2da6
    933a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    933e:	7819      	ldrb	r1, [r3, #0]
    9340:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9344:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9348:	5499      	strb	r1, [r3, r2]
    934a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    934e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	3301      	adds	r3, #1
    9356:	b2da      	uxtb	r2, r3
    9358:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    935c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9360:	701a      	strb	r2, [r3, #0]
    9362:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9366:	f2c2 0301 	movt	r3, #8193	; 0x2001
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	2bff      	cmp	r3, #255	; 0xff
    936e:	d105      	bne.n	937c <send_settings+0x730>
    9370:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9374:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9378:	2200      	movs	r2, #0
    937a:	701a      	strb	r2, [r3, #0]
    937c:	f242 0339 	movw	r3, #8249	; 0x2039
    9380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	b2db      	uxtb	r3, r3
    9388:	f003 0310 	and.w	r3, r3, #16
    938c:	2b00      	cmp	r3, #0
    938e:	d15a      	bne.n	9446 <send_settings+0x7fa>
    9390:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    9394:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9398:	781b      	ldrb	r3, [r3, #0]
    939a:	b2db      	uxtb	r3, r3
    939c:	461a      	mov	r2, r3
    939e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    93a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93a6:	5c9a      	ldrb	r2, [r3, r2]
    93a8:	f642 53a3 	movw	r3, #11683	; 0x2da3
    93ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93b0:	701a      	strb	r2, [r3, #0]
    93b2:	f642 53a4 	movw	r3, #11684	; 0x2da4
    93b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93ba:	2200      	movs	r2, #0
    93bc:	701a      	strb	r2, [r3, #0]
    93be:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    93c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93c6:	781b      	ldrb	r3, [r3, #0]
    93c8:	b2db      	uxtb	r3, r3
    93ca:	3301      	adds	r3, #1
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    93d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    93dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	b2db      	uxtb	r3, r3
    93e4:	2bff      	cmp	r3, #255	; 0xff
    93e6:	d105      	bne.n	93f4 <send_settings+0x7a8>
    93e8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    93ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    93f0:	2200      	movs	r2, #0
    93f2:	701a      	strb	r2, [r3, #0]
    93f4:	f242 0338 	movw	r3, #8248	; 0x2038
    93f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fc:	f242 0238 	movw	r2, #8248	; 0x2038
    9400:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9404:	7812      	ldrb	r2, [r2, #0]
    9406:	b2d2      	uxtb	r2, r2
    9408:	f042 0201 	orr.w	r2, r2, #1
    940c:	b2d2      	uxtb	r2, r2
    940e:	701a      	strb	r2, [r3, #0]
    9410:	f242 0339 	movw	r3, #8249	; 0x2039
    9414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9418:	f242 0239 	movw	r2, #8249	; 0x2039
    941c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9420:	7812      	ldrb	r2, [r2, #0]
    9422:	b2d2      	uxtb	r2, r2
    9424:	f042 0210 	orr.w	r2, r2, #16
    9428:	b2d2      	uxtb	r2, r2
    942a:	701a      	strb	r2, [r3, #0]
    942c:	e00b      	b.n	9446 <send_settings+0x7fa>
    942e:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    9432:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	3301      	adds	r3, #1
    943a:	b2da      	uxtb	r2, r3
    943c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    9440:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9444:	701a      	strb	r2, [r3, #0]
}
    9446:	46bd      	mov	sp, r7
    9448:	f85d 7b04 	ldr.w	r7, [sp], #4
    944c:	4770      	bx	lr
    944e:	bf00      	nop
    9450:	20012c97 	.word	0x20012c97

00009454 <send_desired>:
void send_desired(void){  //1000ms
    9454:	b480      	push	{r7}
    9456:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9458:	f642 4399 	movw	r3, #11417	; 0x2c99
    945c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9460:	781a      	ldrb	r2, [r3, #0]
    9462:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9466:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    946a:	fba3 1302 	umull	r1, r3, r3, r2
    946e:	08d9      	lsrs	r1, r3, #3
    9470:	460b      	mov	r3, r1
    9472:	009b      	lsls	r3, r3, #2
    9474:	440b      	add	r3, r1
    9476:	005b      	lsls	r3, r3, #1
    9478:	1ad3      	subs	r3, r2, r3
    947a:	b2db      	uxtb	r3, r3
    947c:	2b03      	cmp	r3, #3
    947e:	f040 8712 	bne.w	a2a6 <send_desired+0xe52>
    9482:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9486:	f2c2 0301 	movt	r3, #8193	; 0x2001
    948a:	781a      	ldrb	r2, [r3, #0]
    948c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    9490:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9494:	781b      	ldrb	r3, [r3, #0]
    9496:	b2db      	uxtb	r3, r3
    9498:	429a      	cmp	r2, r3
    949a:	d313      	bcc.n	94c4 <send_desired+0x70>
    949c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    94a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	b2db      	uxtb	r3, r3
    94a8:	461a      	mov	r2, r3
    94aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    94ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	1ad3      	subs	r3, r2, r3
    94b6:	33ff      	adds	r3, #255	; 0xff
    94b8:	2b18      	cmp	r3, #24
    94ba:	bfd4      	ite	le
    94bc:	2300      	movle	r3, #0
    94be:	2301      	movgt	r3, #1
    94c0:	b2db      	uxtb	r3, r3
    94c2:	e011      	b.n	94e8 <send_desired+0x94>
    94c4:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    94c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	b2db      	uxtb	r3, r3
    94d0:	461a      	mov	r2, r3
    94d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    94d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    94da:	781b      	ldrb	r3, [r3, #0]
    94dc:	1ad3      	subs	r3, r2, r3
    94de:	2b18      	cmp	r3, #24
    94e0:	bfd4      	ite	le
    94e2:	2300      	movle	r3, #0
    94e4:	2301      	movgt	r3, #1
    94e6:	b2db      	uxtb	r3, r3
    94e8:	2b00      	cmp	r3, #0
    94ea:	f000 86d0 	beq.w	a28e <send_desired+0xe3a>
    94ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    94f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    94f6:	781b      	ldrb	r3, [r3, #0]
    94f8:	461a      	mov	r2, r3
    94fa:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    94fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9502:	2105      	movs	r1, #5
    9504:	5499      	strb	r1, [r3, r2]
    9506:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    950a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	3301      	adds	r3, #1
    9512:	b2da      	uxtb	r2, r3
    9514:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9518:	f2c2 0301 	movt	r3, #8193	; 0x2001
    951c:	701a      	strb	r2, [r3, #0]
    951e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9522:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9526:	781b      	ldrb	r3, [r3, #0]
    9528:	2bff      	cmp	r3, #255	; 0xff
    952a:	d105      	bne.n	9538 <send_desired+0xe4>
    952c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9530:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9534:	2200      	movs	r2, #0
    9536:	701a      	strb	r2, [r3, #0]
    9538:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    953c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	461a      	mov	r2, r3
    9544:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9548:	f2c2 0301 	movt	r3, #8193	; 0x2001
    954c:	2112      	movs	r1, #18
    954e:	5499      	strb	r1, [r3, r2]
    9550:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9554:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	3301      	adds	r3, #1
    955c:	b2da      	uxtb	r2, r3
    955e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9562:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9566:	701a      	strb	r2, [r3, #0]
    9568:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    956c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9570:	781b      	ldrb	r3, [r3, #0]
    9572:	2bff      	cmp	r3, #255	; 0xff
    9574:	d105      	bne.n	9582 <send_desired+0x12e>
    9576:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    957a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    957e:	2200      	movs	r2, #0
    9580:	701a      	strb	r2, [r3, #0]
    9582:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9586:	f2c2 0301 	movt	r3, #8193	; 0x2001
    958a:	2212      	movs	r2, #18
    958c:	701a      	strb	r2, [r3, #0]
    958e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9592:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9596:	2212      	movs	r2, #18
    9598:	701a      	strb	r2, [r3, #0]
    959a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    959e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	461a      	mov	r2, r3
    95a6:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    95aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95ae:	7819      	ldrb	r1, [r3, #0]
    95b0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    95b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95b8:	5499      	strb	r1, [r3, r2]
    95ba:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    95be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95c2:	781a      	ldrb	r2, [r3, #0]
    95c4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    95c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	4413      	add	r3, r2
    95d0:	b2da      	uxtb	r2, r3
    95d2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    95d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95da:	701a      	strb	r2, [r3, #0]
    95dc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    95e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95e4:	781a      	ldrb	r2, [r3, #0]
    95e6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    95ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	4413      	add	r3, r2
    95f2:	b2da      	uxtb	r2, r3
    95f4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    95f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95fc:	701a      	strb	r2, [r3, #0]
    95fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9602:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9606:	781b      	ldrb	r3, [r3, #0]
    9608:	3301      	adds	r3, #1
    960a:	b2da      	uxtb	r2, r3
    960c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9610:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9614:	701a      	strb	r2, [r3, #0]
    9616:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    961a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    961e:	781b      	ldrb	r3, [r3, #0]
    9620:	2bff      	cmp	r3, #255	; 0xff
    9622:	d105      	bne.n	9630 <send_desired+0x1dc>
    9624:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9628:	f2c2 0301 	movt	r3, #8193	; 0x2001
    962c:	2200      	movs	r2, #0
    962e:	701a      	strb	r2, [r3, #0]
    9630:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9634:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9638:	781b      	ldrb	r3, [r3, #0]
    963a:	461a      	mov	r2, r3
    963c:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    9640:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9644:	7859      	ldrb	r1, [r3, #1]
    9646:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    964a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    964e:	5499      	strb	r1, [r3, r2]
    9650:	4bd1      	ldr	r3, [pc, #836]	; (9998 <send_desired+0x544>)
    9652:	781a      	ldrb	r2, [r3, #0]
    9654:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9658:	f2c2 0301 	movt	r3, #8193	; 0x2001
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	4413      	add	r3, r2
    9660:	b2da      	uxtb	r2, r3
    9662:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9666:	f2c2 0301 	movt	r3, #8193	; 0x2001
    966a:	701a      	strb	r2, [r3, #0]
    966c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9670:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9674:	781a      	ldrb	r2, [r3, #0]
    9676:	f642 53a5 	movw	r3, #11685	; 0x2da5
    967a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    967e:	781b      	ldrb	r3, [r3, #0]
    9680:	4413      	add	r3, r2
    9682:	b2da      	uxtb	r2, r3
    9684:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9688:	f2c2 0301 	movt	r3, #8193	; 0x2001
    968c:	701a      	strb	r2, [r3, #0]
    968e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9692:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9696:	781b      	ldrb	r3, [r3, #0]
    9698:	3301      	adds	r3, #1
    969a:	b2da      	uxtb	r2, r3
    969c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    96a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96a4:	701a      	strb	r2, [r3, #0]
    96a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    96aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	2bff      	cmp	r3, #255	; 0xff
    96b2:	d105      	bne.n	96c0 <send_desired+0x26c>
    96b4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    96b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96bc:	2200      	movs	r2, #0
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    96c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	461a      	mov	r2, r3
    96cc:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    96d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96d4:	7899      	ldrb	r1, [r3, #2]
    96d6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    96da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96de:	5499      	strb	r1, [r3, r2]
    96e0:	4bae      	ldr	r3, [pc, #696]	; (999c <send_desired+0x548>)
    96e2:	781a      	ldrb	r2, [r3, #0]
    96e4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    96e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96ec:	781b      	ldrb	r3, [r3, #0]
    96ee:	4413      	add	r3, r2
    96f0:	b2da      	uxtb	r2, r3
    96f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    96f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96fa:	701a      	strb	r2, [r3, #0]
    96fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9700:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9704:	781a      	ldrb	r2, [r3, #0]
    9706:	f642 53a5 	movw	r3, #11685	; 0x2da5
    970a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    970e:	781b      	ldrb	r3, [r3, #0]
    9710:	4413      	add	r3, r2
    9712:	b2da      	uxtb	r2, r3
    9714:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9718:	f2c2 0301 	movt	r3, #8193	; 0x2001
    971c:	701a      	strb	r2, [r3, #0]
    971e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9722:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	3301      	adds	r3, #1
    972a:	b2da      	uxtb	r2, r3
    972c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9730:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9734:	701a      	strb	r2, [r3, #0]
    9736:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    973a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    973e:	781b      	ldrb	r3, [r3, #0]
    9740:	2bff      	cmp	r3, #255	; 0xff
    9742:	d105      	bne.n	9750 <send_desired+0x2fc>
    9744:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9748:	f2c2 0301 	movt	r3, #8193	; 0x2001
    974c:	2200      	movs	r2, #0
    974e:	701a      	strb	r2, [r3, #0]
    9750:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9754:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	461a      	mov	r2, r3
    975c:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    9760:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9764:	78d9      	ldrb	r1, [r3, #3]
    9766:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    976a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    976e:	5499      	strb	r1, [r3, r2]
    9770:	4b8b      	ldr	r3, [pc, #556]	; (99a0 <send_desired+0x54c>)
    9772:	781a      	ldrb	r2, [r3, #0]
    9774:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9778:	f2c2 0301 	movt	r3, #8193	; 0x2001
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	4413      	add	r3, r2
    9780:	b2da      	uxtb	r2, r3
    9782:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9786:	f2c2 0301 	movt	r3, #8193	; 0x2001
    978a:	701a      	strb	r2, [r3, #0]
    978c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9790:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9794:	781a      	ldrb	r2, [r3, #0]
    9796:	f642 53a5 	movw	r3, #11685	; 0x2da5
    979a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	4413      	add	r3, r2
    97a2:	b2da      	uxtb	r2, r3
    97a4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    97a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97ac:	701a      	strb	r2, [r3, #0]
    97ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    97b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	3301      	adds	r3, #1
    97ba:	b2da      	uxtb	r2, r3
    97bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    97c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97c4:	701a      	strb	r2, [r3, #0]
    97c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    97ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	2bff      	cmp	r3, #255	; 0xff
    97d2:	d105      	bne.n	97e0 <send_desired+0x38c>
    97d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    97d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97dc:	2200      	movs	r2, #0
    97de:	701a      	strb	r2, [r3, #0]
    97e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    97e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	461a      	mov	r2, r3
    97ec:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    97f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97f4:	7819      	ldrb	r1, [r3, #0]
    97f6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    97fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97fe:	5499      	strb	r1, [r3, r2]
    9800:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    9804:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9808:	781a      	ldrb	r2, [r3, #0]
    980a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    980e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	4413      	add	r3, r2
    9816:	b2da      	uxtb	r2, r3
    9818:	f642 53a5 	movw	r3, #11685	; 0x2da5
    981c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9820:	701a      	strb	r2, [r3, #0]
    9822:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9826:	f2c2 0301 	movt	r3, #8193	; 0x2001
    982a:	781a      	ldrb	r2, [r3, #0]
    982c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9830:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9834:	781b      	ldrb	r3, [r3, #0]
    9836:	4413      	add	r3, r2
    9838:	b2da      	uxtb	r2, r3
    983a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    983e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9842:	701a      	strb	r2, [r3, #0]
    9844:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9848:	f2c2 0301 	movt	r3, #8193	; 0x2001
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	3301      	adds	r3, #1
    9850:	b2da      	uxtb	r2, r3
    9852:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9856:	f2c2 0301 	movt	r3, #8193	; 0x2001
    985a:	701a      	strb	r2, [r3, #0]
    985c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9860:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9864:	781b      	ldrb	r3, [r3, #0]
    9866:	2bff      	cmp	r3, #255	; 0xff
    9868:	d105      	bne.n	9876 <send_desired+0x422>
    986a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    986e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9872:	2200      	movs	r2, #0
    9874:	701a      	strb	r2, [r3, #0]
    9876:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    987a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	461a      	mov	r2, r3
    9882:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    9886:	f2c2 0301 	movt	r3, #8193	; 0x2001
    988a:	7859      	ldrb	r1, [r3, #1]
    988c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9890:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9894:	5499      	strb	r1, [r3, r2]
    9896:	4b43      	ldr	r3, [pc, #268]	; (99a4 <send_desired+0x550>)
    9898:	781a      	ldrb	r2, [r3, #0]
    989a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    989e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	4413      	add	r3, r2
    98a6:	b2da      	uxtb	r2, r3
    98a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    98ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98b0:	701a      	strb	r2, [r3, #0]
    98b2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    98b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98ba:	781a      	ldrb	r2, [r3, #0]
    98bc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    98c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98c4:	781b      	ldrb	r3, [r3, #0]
    98c6:	4413      	add	r3, r2
    98c8:	b2da      	uxtb	r2, r3
    98ca:	f642 53a6 	movw	r3, #11686	; 0x2da6
    98ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98d2:	701a      	strb	r2, [r3, #0]
    98d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    98d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98dc:	781b      	ldrb	r3, [r3, #0]
    98de:	3301      	adds	r3, #1
    98e0:	b2da      	uxtb	r2, r3
    98e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    98e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98ea:	701a      	strb	r2, [r3, #0]
    98ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    98f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98f4:	781b      	ldrb	r3, [r3, #0]
    98f6:	2bff      	cmp	r3, #255	; 0xff
    98f8:	d105      	bne.n	9906 <send_desired+0x4b2>
    98fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    98fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9902:	2200      	movs	r2, #0
    9904:	701a      	strb	r2, [r3, #0]
    9906:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    990a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    990e:	781b      	ldrb	r3, [r3, #0]
    9910:	461a      	mov	r2, r3
    9912:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    9916:	f2c2 0301 	movt	r3, #8193	; 0x2001
    991a:	7899      	ldrb	r1, [r3, #2]
    991c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9920:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9924:	5499      	strb	r1, [r3, r2]
    9926:	4b20      	ldr	r3, [pc, #128]	; (99a8 <send_desired+0x554>)
    9928:	781a      	ldrb	r2, [r3, #0]
    992a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    992e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	4413      	add	r3, r2
    9936:	b2da      	uxtb	r2, r3
    9938:	f642 53a5 	movw	r3, #11685	; 0x2da5
    993c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9940:	701a      	strb	r2, [r3, #0]
    9942:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9946:	f2c2 0301 	movt	r3, #8193	; 0x2001
    994a:	781a      	ldrb	r2, [r3, #0]
    994c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9950:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	4413      	add	r3, r2
    9958:	b2da      	uxtb	r2, r3
    995a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    995e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9962:	701a      	strb	r2, [r3, #0]
    9964:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9968:	f2c2 0301 	movt	r3, #8193	; 0x2001
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	3301      	adds	r3, #1
    9970:	b2da      	uxtb	r2, r3
    9972:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9976:	f2c2 0301 	movt	r3, #8193	; 0x2001
    997a:	701a      	strb	r2, [r3, #0]
    997c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9980:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9984:	781b      	ldrb	r3, [r3, #0]
    9986:	2bff      	cmp	r3, #255	; 0xff
    9988:	d110      	bne.n	99ac <send_desired+0x558>
    998a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    998e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9992:	2200      	movs	r2, #0
    9994:	701a      	strb	r2, [r3, #0]
    9996:	e009      	b.n	99ac <send_desired+0x558>
    9998:	20012fcd 	.word	0x20012fcd
    999c:	20012fce 	.word	0x20012fce
    99a0:	20012fcf 	.word	0x20012fcf
    99a4:	20012fd1 	.word	0x20012fd1
    99a8:	20012fd2 	.word	0x20012fd2
    99ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    99b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99b4:	781b      	ldrb	r3, [r3, #0]
    99b6:	461a      	mov	r2, r3
    99b8:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    99bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99c0:	78d9      	ldrb	r1, [r3, #3]
    99c2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    99c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99ca:	5499      	strb	r1, [r3, r2]
    99cc:	4bd3      	ldr	r3, [pc, #844]	; (9d1c <send_desired+0x8c8>)
    99ce:	781a      	ldrb	r2, [r3, #0]
    99d0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    99d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99d8:	781b      	ldrb	r3, [r3, #0]
    99da:	4413      	add	r3, r2
    99dc:	b2da      	uxtb	r2, r3
    99de:	f642 53a5 	movw	r3, #11685	; 0x2da5
    99e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99e6:	701a      	strb	r2, [r3, #0]
    99e8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    99ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99f0:	781a      	ldrb	r2, [r3, #0]
    99f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    99f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	4413      	add	r3, r2
    99fe:	b2da      	uxtb	r2, r3
    9a00:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9a04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a08:	701a      	strb	r2, [r3, #0]
    9a0a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9a0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a12:	781b      	ldrb	r3, [r3, #0]
    9a14:	3301      	adds	r3, #1
    9a16:	b2da      	uxtb	r2, r3
    9a18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9a1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a20:	701a      	strb	r2, [r3, #0]
    9a22:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9a26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a2a:	781b      	ldrb	r3, [r3, #0]
    9a2c:	2bff      	cmp	r3, #255	; 0xff
    9a2e:	d105      	bne.n	9a3c <send_desired+0x5e8>
    9a30:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9a34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a38:	2200      	movs	r2, #0
    9a3a:	701a      	strb	r2, [r3, #0]
    9a3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9a40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a44:	781b      	ldrb	r3, [r3, #0]
    9a46:	461a      	mov	r2, r3
    9a48:	f243 0318 	movw	r3, #12312	; 0x3018
    9a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a50:	7819      	ldrb	r1, [r3, #0]
    9a52:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9a56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a5a:	5499      	strb	r1, [r3, r2]
    9a5c:	f243 0318 	movw	r3, #12312	; 0x3018
    9a60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a64:	781a      	ldrb	r2, [r3, #0]
    9a66:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9a6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a6e:	781b      	ldrb	r3, [r3, #0]
    9a70:	4413      	add	r3, r2
    9a72:	b2da      	uxtb	r2, r3
    9a74:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9a78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a7c:	701a      	strb	r2, [r3, #0]
    9a7e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9a82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a86:	781a      	ldrb	r2, [r3, #0]
    9a88:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9a8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	4413      	add	r3, r2
    9a94:	b2da      	uxtb	r2, r3
    9a96:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9a9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9aa4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	3301      	adds	r3, #1
    9aac:	b2da      	uxtb	r2, r3
    9aae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ab2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ab6:	701a      	strb	r2, [r3, #0]
    9ab8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9abc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	2bff      	cmp	r3, #255	; 0xff
    9ac4:	d105      	bne.n	9ad2 <send_desired+0x67e>
    9ac6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9aca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ace:	2200      	movs	r2, #0
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ad6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ada:	781b      	ldrb	r3, [r3, #0]
    9adc:	461a      	mov	r2, r3
    9ade:	f243 0318 	movw	r3, #12312	; 0x3018
    9ae2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ae6:	7859      	ldrb	r1, [r3, #1]
    9ae8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9aec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9af0:	5499      	strb	r1, [r3, r2]
    9af2:	4b8b      	ldr	r3, [pc, #556]	; (9d20 <send_desired+0x8cc>)
    9af4:	781a      	ldrb	r2, [r3, #0]
    9af6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9afa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	4413      	add	r3, r2
    9b02:	b2da      	uxtb	r2, r3
    9b04:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9b08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b0c:	701a      	strb	r2, [r3, #0]
    9b0e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9b12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b16:	781a      	ldrb	r2, [r3, #0]
    9b18:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9b1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	4413      	add	r3, r2
    9b24:	b2da      	uxtb	r2, r3
    9b26:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9b2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b2e:	701a      	strb	r2, [r3, #0]
    9b30:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9b34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	3301      	adds	r3, #1
    9b3c:	b2da      	uxtb	r2, r3
    9b3e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9b42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9b4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	2bff      	cmp	r3, #255	; 0xff
    9b54:	d105      	bne.n	9b62 <send_desired+0x70e>
    9b56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9b5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b5e:	2200      	movs	r2, #0
    9b60:	701a      	strb	r2, [r3, #0]
    9b62:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9b66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b6a:	781b      	ldrb	r3, [r3, #0]
    9b6c:	461a      	mov	r2, r3
    9b6e:	f243 0318 	movw	r3, #12312	; 0x3018
    9b72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b76:	7899      	ldrb	r1, [r3, #2]
    9b78:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9b7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b80:	5499      	strb	r1, [r3, r2]
    9b82:	4b68      	ldr	r3, [pc, #416]	; (9d24 <send_desired+0x8d0>)
    9b84:	781a      	ldrb	r2, [r3, #0]
    9b86:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9b8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b8e:	781b      	ldrb	r3, [r3, #0]
    9b90:	4413      	add	r3, r2
    9b92:	b2da      	uxtb	r2, r3
    9b94:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9b98:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b9c:	701a      	strb	r2, [r3, #0]
    9b9e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9ba2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ba6:	781a      	ldrb	r2, [r3, #0]
    9ba8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9bac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	4413      	add	r3, r2
    9bb4:	b2da      	uxtb	r2, r3
    9bb6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9bba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bbe:	701a      	strb	r2, [r3, #0]
    9bc0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9bc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bc8:	781b      	ldrb	r3, [r3, #0]
    9bca:	3301      	adds	r3, #1
    9bcc:	b2da      	uxtb	r2, r3
    9bce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9bd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bd6:	701a      	strb	r2, [r3, #0]
    9bd8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9bdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9be0:	781b      	ldrb	r3, [r3, #0]
    9be2:	2bff      	cmp	r3, #255	; 0xff
    9be4:	d105      	bne.n	9bf2 <send_desired+0x79e>
    9be6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9bea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bee:	2200      	movs	r2, #0
    9bf0:	701a      	strb	r2, [r3, #0]
    9bf2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9bf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9bfa:	781b      	ldrb	r3, [r3, #0]
    9bfc:	461a      	mov	r2, r3
    9bfe:	f243 0318 	movw	r3, #12312	; 0x3018
    9c02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c06:	78d9      	ldrb	r1, [r3, #3]
    9c08:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9c0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c10:	5499      	strb	r1, [r3, r2]
    9c12:	4b45      	ldr	r3, [pc, #276]	; (9d28 <send_desired+0x8d4>)
    9c14:	781a      	ldrb	r2, [r3, #0]
    9c16:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9c1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	4413      	add	r3, r2
    9c22:	b2da      	uxtb	r2, r3
    9c24:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9c28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c2c:	701a      	strb	r2, [r3, #0]
    9c2e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9c32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c36:	781a      	ldrb	r2, [r3, #0]
    9c38:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9c3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c40:	781b      	ldrb	r3, [r3, #0]
    9c42:	4413      	add	r3, r2
    9c44:	b2da      	uxtb	r2, r3
    9c46:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9c4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c4e:	701a      	strb	r2, [r3, #0]
    9c50:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9c54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c58:	781b      	ldrb	r3, [r3, #0]
    9c5a:	3301      	adds	r3, #1
    9c5c:	b2da      	uxtb	r2, r3
    9c5e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9c62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c66:	701a      	strb	r2, [r3, #0]
    9c68:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9c6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	2bff      	cmp	r3, #255	; 0xff
    9c74:	d105      	bne.n	9c82 <send_desired+0x82e>
    9c76:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9c7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c7e:	2200      	movs	r2, #0
    9c80:	701a      	strb	r2, [r3, #0]
    9c82:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9c86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c8a:	781b      	ldrb	r3, [r3, #0]
    9c8c:	461a      	mov	r2, r3
    9c8e:	f243 031c 	movw	r3, #12316	; 0x301c
    9c92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c96:	7819      	ldrb	r1, [r3, #0]
    9c98:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9c9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ca0:	5499      	strb	r1, [r3, r2]
    9ca2:	f243 031c 	movw	r3, #12316	; 0x301c
    9ca6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9caa:	781a      	ldrb	r2, [r3, #0]
    9cac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9cb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	4413      	add	r3, r2
    9cb8:	b2da      	uxtb	r2, r3
    9cba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9cbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9cc2:	701a      	strb	r2, [r3, #0]
    9cc4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9cc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ccc:	781a      	ldrb	r2, [r3, #0]
    9cce:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9cd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	4413      	add	r3, r2
    9cda:	b2da      	uxtb	r2, r3
    9cdc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9ce0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ce4:	701a      	strb	r2, [r3, #0]
    9ce6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9cea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	3301      	adds	r3, #1
    9cf2:	b2da      	uxtb	r2, r3
    9cf4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9cf8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9cfc:	701a      	strb	r2, [r3, #0]
    9cfe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9d02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	2bff      	cmp	r3, #255	; 0xff
    9d0a:	d10f      	bne.n	9d2c <send_desired+0x8d8>
    9d0c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9d10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d14:	2200      	movs	r2, #0
    9d16:	701a      	strb	r2, [r3, #0]
    9d18:	e008      	b.n	9d2c <send_desired+0x8d8>
    9d1a:	bf00      	nop
    9d1c:	20012fd3 	.word	0x20012fd3
    9d20:	20013019 	.word	0x20013019
    9d24:	2001301a 	.word	0x2001301a
    9d28:	2001301b 	.word	0x2001301b
    9d2c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9d30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d34:	781b      	ldrb	r3, [r3, #0]
    9d36:	461a      	mov	r2, r3
    9d38:	f243 031c 	movw	r3, #12316	; 0x301c
    9d3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d40:	7859      	ldrb	r1, [r3, #1]
    9d42:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9d46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d4a:	5499      	strb	r1, [r3, r2]
    9d4c:	4bd1      	ldr	r3, [pc, #836]	; (a094 <send_desired+0xc40>)
    9d4e:	781a      	ldrb	r2, [r3, #0]
    9d50:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9d54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	4413      	add	r3, r2
    9d5c:	b2da      	uxtb	r2, r3
    9d5e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9d62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d66:	701a      	strb	r2, [r3, #0]
    9d68:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9d6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d70:	781a      	ldrb	r2, [r3, #0]
    9d72:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9d76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	4413      	add	r3, r2
    9d7e:	b2da      	uxtb	r2, r3
    9d80:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9d84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d88:	701a      	strb	r2, [r3, #0]
    9d8a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9d8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9d92:	781b      	ldrb	r3, [r3, #0]
    9d94:	3301      	adds	r3, #1
    9d96:	b2da      	uxtb	r2, r3
    9d98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9d9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9da0:	701a      	strb	r2, [r3, #0]
    9da2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9da6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	2bff      	cmp	r3, #255	; 0xff
    9dae:	d105      	bne.n	9dbc <send_desired+0x968>
    9db0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9db4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9db8:	2200      	movs	r2, #0
    9dba:	701a      	strb	r2, [r3, #0]
    9dbc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9dc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	461a      	mov	r2, r3
    9dc8:	f243 031c 	movw	r3, #12316	; 0x301c
    9dcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9dd0:	7899      	ldrb	r1, [r3, #2]
    9dd2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9dd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9dda:	5499      	strb	r1, [r3, r2]
    9ddc:	4bae      	ldr	r3, [pc, #696]	; (a098 <send_desired+0xc44>)
    9dde:	781a      	ldrb	r2, [r3, #0]
    9de0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9de4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	4413      	add	r3, r2
    9dec:	b2da      	uxtb	r2, r3
    9dee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9df2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9df6:	701a      	strb	r2, [r3, #0]
    9df8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e00:	781a      	ldrb	r2, [r3, #0]
    9e02:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9e06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e0a:	781b      	ldrb	r3, [r3, #0]
    9e0c:	4413      	add	r3, r2
    9e0e:	b2da      	uxtb	r2, r3
    9e10:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9e14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e18:	701a      	strb	r2, [r3, #0]
    9e1a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9e1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	3301      	adds	r3, #1
    9e26:	b2da      	uxtb	r2, r3
    9e28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9e2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e30:	701a      	strb	r2, [r3, #0]
    9e32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9e36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e3a:	781b      	ldrb	r3, [r3, #0]
    9e3c:	2bff      	cmp	r3, #255	; 0xff
    9e3e:	d105      	bne.n	9e4c <send_desired+0x9f8>
    9e40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9e44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e48:	2200      	movs	r2, #0
    9e4a:	701a      	strb	r2, [r3, #0]
    9e4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9e50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	461a      	mov	r2, r3
    9e58:	f243 031c 	movw	r3, #12316	; 0x301c
    9e5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e60:	78d9      	ldrb	r1, [r3, #3]
    9e62:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9e66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e6a:	5499      	strb	r1, [r3, r2]
    9e6c:	4b8b      	ldr	r3, [pc, #556]	; (a09c <send_desired+0xc48>)
    9e6e:	781a      	ldrb	r2, [r3, #0]
    9e70:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9e74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	4413      	add	r3, r2
    9e7c:	b2da      	uxtb	r2, r3
    9e7e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9e82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e86:	701a      	strb	r2, [r3, #0]
    9e88:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9e8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e90:	781a      	ldrb	r2, [r3, #0]
    9e92:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9e96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	4413      	add	r3, r2
    9e9e:	b2da      	uxtb	r2, r3
    9ea0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9ea4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ea8:	701a      	strb	r2, [r3, #0]
    9eaa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9eae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9eb2:	781b      	ldrb	r3, [r3, #0]
    9eb4:	3301      	adds	r3, #1
    9eb6:	b2da      	uxtb	r2, r3
    9eb8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ebc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ec0:	701a      	strb	r2, [r3, #0]
    9ec2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ec6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9eca:	781b      	ldrb	r3, [r3, #0]
    9ecc:	2bff      	cmp	r3, #255	; 0xff
    9ece:	d105      	bne.n	9edc <send_desired+0xa88>
    9ed0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ed4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ed8:	2200      	movs	r2, #0
    9eda:	701a      	strb	r2, [r3, #0]
    9edc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ee0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	461a      	mov	r2, r3
    9ee8:	f640 2354 	movw	r3, #2644	; 0xa54
    9eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef0:	7819      	ldrb	r1, [r3, #0]
    9ef2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9ef6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9efa:	5499      	strb	r1, [r3, r2]
    9efc:	f640 2354 	movw	r3, #2644	; 0xa54
    9f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f04:	781a      	ldrb	r2, [r3, #0]
    9f06:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9f0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	4413      	add	r3, r2
    9f12:	b2da      	uxtb	r2, r3
    9f14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9f18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f1c:	701a      	strb	r2, [r3, #0]
    9f1e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9f22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f26:	781a      	ldrb	r2, [r3, #0]
    9f28:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9f2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	4413      	add	r3, r2
    9f34:	b2da      	uxtb	r2, r3
    9f36:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9f3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f3e:	701a      	strb	r2, [r3, #0]
    9f40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9f44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f48:	781b      	ldrb	r3, [r3, #0]
    9f4a:	3301      	adds	r3, #1
    9f4c:	b2da      	uxtb	r2, r3
    9f4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9f52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f56:	701a      	strb	r2, [r3, #0]
    9f58:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9f5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	2bff      	cmp	r3, #255	; 0xff
    9f64:	d105      	bne.n	9f72 <send_desired+0xb1e>
    9f66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9f6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f6e:	2200      	movs	r2, #0
    9f70:	701a      	strb	r2, [r3, #0]
    9f72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9f76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f7a:	781b      	ldrb	r3, [r3, #0]
    9f7c:	461a      	mov	r2, r3
    9f7e:	f640 2354 	movw	r3, #2644	; 0xa54
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	7859      	ldrb	r1, [r3, #1]
    9f88:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    9f8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f90:	5499      	strb	r1, [r3, r2]
    9f92:	4b43      	ldr	r3, [pc, #268]	; (a0a0 <send_desired+0xc4c>)
    9f94:	781a      	ldrb	r2, [r3, #0]
    9f96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9f9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	4413      	add	r3, r2
    9fa2:	b2da      	uxtb	r2, r3
    9fa4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9fa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fac:	701a      	strb	r2, [r3, #0]
    9fae:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9fb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fb6:	781a      	ldrb	r2, [r3, #0]
    9fb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    9fbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	4413      	add	r3, r2
    9fc4:	b2da      	uxtb	r2, r3
    9fc6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    9fca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fce:	701a      	strb	r2, [r3, #0]
    9fd0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9fd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fd8:	781b      	ldrb	r3, [r3, #0]
    9fda:	3301      	adds	r3, #1
    9fdc:	b2da      	uxtb	r2, r3
    9fde:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9fe2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fe6:	701a      	strb	r2, [r3, #0]
    9fe8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9fec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	2bff      	cmp	r3, #255	; 0xff
    9ff4:	d105      	bne.n	a002 <send_desired+0xbae>
    9ff6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    9ffa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ffe:	2200      	movs	r2, #0
    a000:	701a      	strb	r2, [r3, #0]
    a002:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a006:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	461a      	mov	r2, r3
    a00e:	f640 2354 	movw	r3, #2644	; 0xa54
    a012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a016:	7899      	ldrb	r1, [r3, #2]
    a018:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a01c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a020:	5499      	strb	r1, [r3, r2]
    a022:	4b20      	ldr	r3, [pc, #128]	; (a0a4 <send_desired+0xc50>)
    a024:	781a      	ldrb	r2, [r3, #0]
    a026:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a02a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a02e:	781b      	ldrb	r3, [r3, #0]
    a030:	4413      	add	r3, r2
    a032:	b2da      	uxtb	r2, r3
    a034:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a038:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a03c:	701a      	strb	r2, [r3, #0]
    a03e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a042:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a046:	781a      	ldrb	r2, [r3, #0]
    a048:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a04c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	4413      	add	r3, r2
    a054:	b2da      	uxtb	r2, r3
    a056:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a05a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a05e:	701a      	strb	r2, [r3, #0]
    a060:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a064:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a068:	781b      	ldrb	r3, [r3, #0]
    a06a:	3301      	adds	r3, #1
    a06c:	b2da      	uxtb	r2, r3
    a06e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a072:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a076:	701a      	strb	r2, [r3, #0]
    a078:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a07c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	2bff      	cmp	r3, #255	; 0xff
    a084:	d110      	bne.n	a0a8 <send_desired+0xc54>
    a086:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a08a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a08e:	2200      	movs	r2, #0
    a090:	701a      	strb	r2, [r3, #0]
    a092:	e009      	b.n	a0a8 <send_desired+0xc54>
    a094:	2001301d 	.word	0x2001301d
    a098:	2001301e 	.word	0x2001301e
    a09c:	2001301f 	.word	0x2001301f
    a0a0:	20000a55 	.word	0x20000a55
    a0a4:	20000a56 	.word	0x20000a56
    a0a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a0ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0b0:	781b      	ldrb	r3, [r3, #0]
    a0b2:	461a      	mov	r2, r3
    a0b4:	f640 2354 	movw	r3, #2644	; 0xa54
    a0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0bc:	78d9      	ldrb	r1, [r3, #3]
    a0be:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a0c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0c6:	5499      	strb	r1, [r3, r2]
    a0c8:	4b79      	ldr	r3, [pc, #484]	; (a2b0 <send_desired+0xe5c>)
    a0ca:	781a      	ldrb	r2, [r3, #0]
    a0cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a0d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0d4:	781b      	ldrb	r3, [r3, #0]
    a0d6:	4413      	add	r3, r2
    a0d8:	b2da      	uxtb	r2, r3
    a0da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a0de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0e2:	701a      	strb	r2, [r3, #0]
    a0e4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a0e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0ec:	781a      	ldrb	r2, [r3, #0]
    a0ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a0f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0f6:	781b      	ldrb	r3, [r3, #0]
    a0f8:	4413      	add	r3, r2
    a0fa:	b2da      	uxtb	r2, r3
    a0fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a100:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a104:	701a      	strb	r2, [r3, #0]
    a106:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a10a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a10e:	781b      	ldrb	r3, [r3, #0]
    a110:	3301      	adds	r3, #1
    a112:	b2da      	uxtb	r2, r3
    a114:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a118:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a11c:	701a      	strb	r2, [r3, #0]
    a11e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a122:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	2bff      	cmp	r3, #255	; 0xff
    a12a:	d105      	bne.n	a138 <send_desired+0xce4>
    a12c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a130:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a134:	2200      	movs	r2, #0
    a136:	701a      	strb	r2, [r3, #0]
    a138:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a13c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	461a      	mov	r2, r3
    a144:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a148:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a14c:	7819      	ldrb	r1, [r3, #0]
    a14e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a152:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a156:	5499      	strb	r1, [r3, r2]
    a158:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a15c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	3301      	adds	r3, #1
    a164:	b2da      	uxtb	r2, r3
    a166:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a16a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a16e:	701a      	strb	r2, [r3, #0]
    a170:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a174:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a178:	781b      	ldrb	r3, [r3, #0]
    a17a:	2bff      	cmp	r3, #255	; 0xff
    a17c:	d105      	bne.n	a18a <send_desired+0xd36>
    a17e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a182:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a186:	2200      	movs	r2, #0
    a188:	701a      	strb	r2, [r3, #0]
    a18a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a18e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	461a      	mov	r2, r3
    a196:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a19a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a19e:	7819      	ldrb	r1, [r3, #0]
    a1a0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a1a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1a8:	5499      	strb	r1, [r3, r2]
    a1aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a1ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	3301      	adds	r3, #1
    a1b6:	b2da      	uxtb	r2, r3
    a1b8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a1bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1c0:	701a      	strb	r2, [r3, #0]
    a1c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a1c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	2bff      	cmp	r3, #255	; 0xff
    a1ce:	d105      	bne.n	a1dc <send_desired+0xd88>
    a1d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a1d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1d8:	2200      	movs	r2, #0
    a1da:	701a      	strb	r2, [r3, #0]
    a1dc:	f242 0339 	movw	r3, #8249	; 0x2039
    a1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e4:	781b      	ldrb	r3, [r3, #0]
    a1e6:	b2db      	uxtb	r3, r3
    a1e8:	f003 0310 	and.w	r3, r3, #16
    a1ec:	2b00      	cmp	r3, #0
    a1ee:	d15a      	bne.n	a2a6 <send_desired+0xe52>
    a1f0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a1f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	b2db      	uxtb	r3, r3
    a1fc:	461a      	mov	r2, r3
    a1fe:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a202:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a206:	5c9a      	ldrb	r2, [r3, r2]
    a208:	f642 53a3 	movw	r3, #11683	; 0x2da3
    a20c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a210:	701a      	strb	r2, [r3, #0]
    a212:	f642 53a4 	movw	r3, #11684	; 0x2da4
    a216:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a21a:	2200      	movs	r2, #0
    a21c:	701a      	strb	r2, [r3, #0]
    a21e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a222:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	b2db      	uxtb	r3, r3
    a22a:	3301      	adds	r3, #1
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a232:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a23c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	b2db      	uxtb	r3, r3
    a244:	2bff      	cmp	r3, #255	; 0xff
    a246:	d105      	bne.n	a254 <send_desired+0xe00>
    a248:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a24c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a250:	2200      	movs	r2, #0
    a252:	701a      	strb	r2, [r3, #0]
    a254:	f242 0338 	movw	r3, #8248	; 0x2038
    a258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25c:	f242 0238 	movw	r2, #8248	; 0x2038
    a260:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a264:	7812      	ldrb	r2, [r2, #0]
    a266:	b2d2      	uxtb	r2, r2
    a268:	f042 0201 	orr.w	r2, r2, #1
    a26c:	b2d2      	uxtb	r2, r2
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f242 0339 	movw	r3, #8249	; 0x2039
    a274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a278:	f242 0239 	movw	r2, #8249	; 0x2039
    a27c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a280:	7812      	ldrb	r2, [r2, #0]
    a282:	b2d2      	uxtb	r2, r2
    a284:	f042 0210 	orr.w	r2, r2, #16
    a288:	b2d2      	uxtb	r2, r2
    a28a:	701a      	strb	r2, [r3, #0]
    a28c:	e00b      	b.n	a2a6 <send_desired+0xe52>
    a28e:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    a292:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a296:	781b      	ldrb	r3, [r3, #0]
    a298:	3301      	adds	r3, #1
    a29a:	b2da      	uxtb	r2, r3
    a29c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    a2a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2a4:	701a      	strb	r2, [r3, #0]
}
    a2a6:	46bd      	mov	sp, r7
    a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ac:	4770      	bx	lr
    a2ae:	bf00      	nop
    a2b0:	20000a57 	.word	0x20000a57

0000a2b4 <send_bat>:
void send_bat(void){  //2000ms
    a2b4:	b480      	push	{r7}
    a2b6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a2b8:	f642 4399 	movw	r3, #11417	; 0x2c99
    a2bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2c0:	781a      	ldrb	r2, [r3, #0]
    a2c2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a2c6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a2ca:	fba3 1302 	umull	r1, r3, r3, r2
    a2ce:	0919      	lsrs	r1, r3, #4
    a2d0:	460b      	mov	r3, r1
    a2d2:	009b      	lsls	r3, r3, #2
    a2d4:	440b      	add	r3, r1
    a2d6:	009b      	lsls	r3, r3, #2
    a2d8:	1ad3      	subs	r3, r2, r3
    a2da:	b2db      	uxtb	r3, r3
    a2dc:	2b08      	cmp	r3, #8
    a2de:	f040 839a 	bne.w	aa16 <send_bat+0x762>
    a2e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a2e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2ea:	781a      	ldrb	r2, [r3, #0]
    a2ec:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a2f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2f4:	781b      	ldrb	r3, [r3, #0]
    a2f6:	b2db      	uxtb	r3, r3
    a2f8:	429a      	cmp	r2, r3
    a2fa:	d313      	bcc.n	a324 <send_bat+0x70>
    a2fc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a300:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a304:	781b      	ldrb	r3, [r3, #0]
    a306:	b2db      	uxtb	r3, r3
    a308:	461a      	mov	r2, r3
    a30a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a30e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a312:	781b      	ldrb	r3, [r3, #0]
    a314:	1ad3      	subs	r3, r2, r3
    a316:	33ff      	adds	r3, #255	; 0xff
    a318:	2b0c      	cmp	r3, #12
    a31a:	bfd4      	ite	le
    a31c:	2300      	movle	r3, #0
    a31e:	2301      	movgt	r3, #1
    a320:	b2db      	uxtb	r3, r3
    a322:	e011      	b.n	a348 <send_bat+0x94>
    a324:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a328:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a32c:	781b      	ldrb	r3, [r3, #0]
    a32e:	b2db      	uxtb	r3, r3
    a330:	461a      	mov	r2, r3
    a332:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a336:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	1ad3      	subs	r3, r2, r3
    a33e:	2b0c      	cmp	r3, #12
    a340:	bfd4      	ite	le
    a342:	2300      	movle	r3, #0
    a344:	2301      	movgt	r3, #1
    a346:	b2db      	uxtb	r3, r3
    a348:	2b00      	cmp	r3, #0
    a34a:	f000 8358 	beq.w	a9fe <send_bat+0x74a>
    a34e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a352:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	461a      	mov	r2, r3
    a35a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a35e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a362:	2105      	movs	r1, #5
    a364:	5499      	strb	r1, [r3, r2]
    a366:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a36a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a36e:	781b      	ldrb	r3, [r3, #0]
    a370:	3301      	adds	r3, #1
    a372:	b2da      	uxtb	r2, r3
    a374:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a378:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a37c:	701a      	strb	r2, [r3, #0]
    a37e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a382:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	2bff      	cmp	r3, #255	; 0xff
    a38a:	d105      	bne.n	a398 <send_bat+0xe4>
    a38c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a390:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a394:	2200      	movs	r2, #0
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a39c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	461a      	mov	r2, r3
    a3a4:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a3a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3ac:	210c      	movs	r1, #12
    a3ae:	5499      	strb	r1, [r3, r2]
    a3b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a3b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	3301      	adds	r3, #1
    a3bc:	b2da      	uxtb	r2, r3
    a3be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a3c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a3cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	2bff      	cmp	r3, #255	; 0xff
    a3d4:	d105      	bne.n	a3e2 <send_bat+0x12e>
    a3d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a3da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3de:	2200      	movs	r2, #0
    a3e0:	701a      	strb	r2, [r3, #0]
    a3e2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a3e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3ea:	220c      	movs	r2, #12
    a3ec:	701a      	strb	r2, [r3, #0]
    a3ee:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a3f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a3f6:	220c      	movs	r2, #12
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a3fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	461a      	mov	r2, r3
    a406:	f642 438a 	movw	r3, #11402	; 0x2c8a
    a40a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a40e:	7819      	ldrb	r1, [r3, #0]
    a410:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a414:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a418:	5499      	strb	r1, [r3, r2]
    a41a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a41e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a422:	781a      	ldrb	r2, [r3, #0]
    a424:	f642 438a 	movw	r3, #11402	; 0x2c8a
    a428:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	4413      	add	r3, r2
    a430:	b2da      	uxtb	r2, r3
    a432:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a436:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a43a:	701a      	strb	r2, [r3, #0]
    a43c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a440:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a444:	781a      	ldrb	r2, [r3, #0]
    a446:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a44a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	4413      	add	r3, r2
    a452:	b2da      	uxtb	r2, r3
    a454:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a458:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a45c:	701a      	strb	r2, [r3, #0]
    a45e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a462:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	3301      	adds	r3, #1
    a46a:	b2da      	uxtb	r2, r3
    a46c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a470:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a474:	701a      	strb	r2, [r3, #0]
    a476:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a47a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a47e:	781b      	ldrb	r3, [r3, #0]
    a480:	2bff      	cmp	r3, #255	; 0xff
    a482:	d105      	bne.n	a490 <send_bat+0x1dc>
    a484:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a488:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a48c:	2200      	movs	r2, #0
    a48e:	701a      	strb	r2, [r3, #0]
    a490:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a494:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	461a      	mov	r2, r3
    a49c:	f243 2384 	movw	r3, #12932	; 0x3284
    a4a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4a4:	7819      	ldrb	r1, [r3, #0]
    a4a6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a4aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4ae:	5499      	strb	r1, [r3, r2]
    a4b0:	f243 2384 	movw	r3, #12932	; 0x3284
    a4b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4b8:	781a      	ldrb	r2, [r3, #0]
    a4ba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a4be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	4413      	add	r3, r2
    a4c6:	b2da      	uxtb	r2, r3
    a4c8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a4cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4d0:	701a      	strb	r2, [r3, #0]
    a4d2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a4d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4da:	781a      	ldrb	r2, [r3, #0]
    a4dc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a4e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4e4:	781b      	ldrb	r3, [r3, #0]
    a4e6:	4413      	add	r3, r2
    a4e8:	b2da      	uxtb	r2, r3
    a4ea:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a4ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4f2:	701a      	strb	r2, [r3, #0]
    a4f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a4f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	3301      	adds	r3, #1
    a500:	b2da      	uxtb	r2, r3
    a502:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a506:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a50a:	701a      	strb	r2, [r3, #0]
    a50c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a510:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a514:	781b      	ldrb	r3, [r3, #0]
    a516:	2bff      	cmp	r3, #255	; 0xff
    a518:	d105      	bne.n	a526 <send_bat+0x272>
    a51a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a51e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a522:	2200      	movs	r2, #0
    a524:	701a      	strb	r2, [r3, #0]
    a526:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a52a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a52e:	781b      	ldrb	r3, [r3, #0]
    a530:	461a      	mov	r2, r3
    a532:	f243 2384 	movw	r3, #12932	; 0x3284
    a536:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a53a:	7859      	ldrb	r1, [r3, #1]
    a53c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a540:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a544:	5499      	strb	r1, [r3, r2]
    a546:	4bd5      	ldr	r3, [pc, #852]	; (a89c <send_bat+0x5e8>)
    a548:	781a      	ldrb	r2, [r3, #0]
    a54a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a54e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	4413      	add	r3, r2
    a556:	b2da      	uxtb	r2, r3
    a558:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a55c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a560:	701a      	strb	r2, [r3, #0]
    a562:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a566:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a56a:	781a      	ldrb	r2, [r3, #0]
    a56c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a570:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	4413      	add	r3, r2
    a578:	b2da      	uxtb	r2, r3
    a57a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a57e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a582:	701a      	strb	r2, [r3, #0]
    a584:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a588:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	3301      	adds	r3, #1
    a590:	b2da      	uxtb	r2, r3
    a592:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a596:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a59a:	701a      	strb	r2, [r3, #0]
    a59c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a5a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	2bff      	cmp	r3, #255	; 0xff
    a5a8:	d105      	bne.n	a5b6 <send_bat+0x302>
    a5aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a5ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5b2:	2200      	movs	r2, #0
    a5b4:	701a      	strb	r2, [r3, #0]
    a5b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a5ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	461a      	mov	r2, r3
    a5c2:	f642 438d 	movw	r3, #11405	; 0x2c8d
    a5c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5ca:	7819      	ldrb	r1, [r3, #0]
    a5cc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a5d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5d4:	5499      	strb	r1, [r3, r2]
    a5d6:	f642 438d 	movw	r3, #11405	; 0x2c8d
    a5da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5de:	781a      	ldrb	r2, [r3, #0]
    a5e0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a5e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	4413      	add	r3, r2
    a5ec:	b2da      	uxtb	r2, r3
    a5ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a5f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5f6:	701a      	strb	r2, [r3, #0]
    a5f8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a5fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a600:	781a      	ldrb	r2, [r3, #0]
    a602:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a606:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	4413      	add	r3, r2
    a60e:	b2da      	uxtb	r2, r3
    a610:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a614:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a618:	701a      	strb	r2, [r3, #0]
    a61a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a61e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	3301      	adds	r3, #1
    a626:	b2da      	uxtb	r2, r3
    a628:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a62c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a630:	701a      	strb	r2, [r3, #0]
    a632:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a636:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a63a:	781b      	ldrb	r3, [r3, #0]
    a63c:	2bff      	cmp	r3, #255	; 0xff
    a63e:	d105      	bne.n	a64c <send_bat+0x398>
    a640:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a644:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a648:	2200      	movs	r2, #0
    a64a:	701a      	strb	r2, [r3, #0]
    a64c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a650:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a654:	781b      	ldrb	r3, [r3, #0]
    a656:	461a      	mov	r2, r3
    a658:	f243 030e 	movw	r3, #12302	; 0x300e
    a65c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a660:	7819      	ldrb	r1, [r3, #0]
    a662:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a666:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a66a:	5499      	strb	r1, [r3, r2]
    a66c:	f243 030e 	movw	r3, #12302	; 0x300e
    a670:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a674:	781a      	ldrb	r2, [r3, #0]
    a676:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a67a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	4413      	add	r3, r2
    a682:	b2da      	uxtb	r2, r3
    a684:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a688:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a68c:	701a      	strb	r2, [r3, #0]
    a68e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a692:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a696:	781a      	ldrb	r2, [r3, #0]
    a698:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a69c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	4413      	add	r3, r2
    a6a4:	b2da      	uxtb	r2, r3
    a6a6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a6aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6ae:	701a      	strb	r2, [r3, #0]
    a6b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a6b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6b8:	781b      	ldrb	r3, [r3, #0]
    a6ba:	3301      	adds	r3, #1
    a6bc:	b2da      	uxtb	r2, r3
    a6be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a6c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6c6:	701a      	strb	r2, [r3, #0]
    a6c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a6cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6d0:	781b      	ldrb	r3, [r3, #0]
    a6d2:	2bff      	cmp	r3, #255	; 0xff
    a6d4:	d105      	bne.n	a6e2 <send_bat+0x42e>
    a6d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a6da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6de:	2200      	movs	r2, #0
    a6e0:	701a      	strb	r2, [r3, #0]
    a6e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a6e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	461a      	mov	r2, r3
    a6ee:	f243 030e 	movw	r3, #12302	; 0x300e
    a6f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6f6:	7859      	ldrb	r1, [r3, #1]
    a6f8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a6fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a700:	5499      	strb	r1, [r3, r2]
    a702:	4b67      	ldr	r3, [pc, #412]	; (a8a0 <send_bat+0x5ec>)
    a704:	781a      	ldrb	r2, [r3, #0]
    a706:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a70a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	4413      	add	r3, r2
    a712:	b2da      	uxtb	r2, r3
    a714:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a718:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a71c:	701a      	strb	r2, [r3, #0]
    a71e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a722:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a726:	781a      	ldrb	r2, [r3, #0]
    a728:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a72c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	4413      	add	r3, r2
    a734:	b2da      	uxtb	r2, r3
    a736:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a73a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a73e:	701a      	strb	r2, [r3, #0]
    a740:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a744:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	3301      	adds	r3, #1
    a74c:	b2da      	uxtb	r2, r3
    a74e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a752:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a756:	701a      	strb	r2, [r3, #0]
    a758:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a75c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	2bff      	cmp	r3, #255	; 0xff
    a764:	d105      	bne.n	a772 <send_bat+0x4be>
    a766:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a76a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a76e:	2200      	movs	r2, #0
    a770:	701a      	strb	r2, [r3, #0]
    a772:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a776:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a77a:	781b      	ldrb	r3, [r3, #0]
    a77c:	461a      	mov	r2, r3
    a77e:	f243 030c 	movw	r3, #12300	; 0x300c
    a782:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a786:	7819      	ldrb	r1, [r3, #0]
    a788:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a78c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a790:	5499      	strb	r1, [r3, r2]
    a792:	f243 030c 	movw	r3, #12300	; 0x300c
    a796:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a79a:	781a      	ldrb	r2, [r3, #0]
    a79c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a7a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	4413      	add	r3, r2
    a7a8:	b2da      	uxtb	r2, r3
    a7aa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a7ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7b2:	701a      	strb	r2, [r3, #0]
    a7b4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a7b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7bc:	781a      	ldrb	r2, [r3, #0]
    a7be:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a7c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7c6:	781b      	ldrb	r3, [r3, #0]
    a7c8:	4413      	add	r3, r2
    a7ca:	b2da      	uxtb	r2, r3
    a7cc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a7d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7d4:	701a      	strb	r2, [r3, #0]
    a7d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a7da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7de:	781b      	ldrb	r3, [r3, #0]
    a7e0:	3301      	adds	r3, #1
    a7e2:	b2da      	uxtb	r2, r3
    a7e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a7e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7ec:	701a      	strb	r2, [r3, #0]
    a7ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a7f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7f6:	781b      	ldrb	r3, [r3, #0]
    a7f8:	2bff      	cmp	r3, #255	; 0xff
    a7fa:	d105      	bne.n	a808 <send_bat+0x554>
    a7fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a800:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a804:	2200      	movs	r2, #0
    a806:	701a      	strb	r2, [r3, #0]
    a808:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a80c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	461a      	mov	r2, r3
    a814:	f243 030c 	movw	r3, #12300	; 0x300c
    a818:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a81c:	7859      	ldrb	r1, [r3, #1]
    a81e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a822:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a826:	5499      	strb	r1, [r3, r2]
    a828:	4b1e      	ldr	r3, [pc, #120]	; (a8a4 <send_bat+0x5f0>)
    a82a:	781a      	ldrb	r2, [r3, #0]
    a82c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a830:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a834:	781b      	ldrb	r3, [r3, #0]
    a836:	4413      	add	r3, r2
    a838:	b2da      	uxtb	r2, r3
    a83a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a83e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a842:	701a      	strb	r2, [r3, #0]
    a844:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a848:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a84c:	781a      	ldrb	r2, [r3, #0]
    a84e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a852:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	4413      	add	r3, r2
    a85a:	b2da      	uxtb	r2, r3
    a85c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a860:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a864:	701a      	strb	r2, [r3, #0]
    a866:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a86a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	3301      	adds	r3, #1
    a872:	b2da      	uxtb	r2, r3
    a874:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a878:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a87c:	701a      	strb	r2, [r3, #0]
    a87e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a882:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a886:	781b      	ldrb	r3, [r3, #0]
    a888:	2bff      	cmp	r3, #255	; 0xff
    a88a:	d10d      	bne.n	a8a8 <send_bat+0x5f4>
    a88c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a890:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a894:	2200      	movs	r2, #0
    a896:	701a      	strb	r2, [r3, #0]
    a898:	e006      	b.n	a8a8 <send_bat+0x5f4>
    a89a:	bf00      	nop
    a89c:	20013285 	.word	0x20013285
    a8a0:	2001300f 	.word	0x2001300f
    a8a4:	2001300d 	.word	0x2001300d
    a8a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8b0:	781b      	ldrb	r3, [r3, #0]
    a8b2:	461a      	mov	r2, r3
    a8b4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    a8b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8bc:	7819      	ldrb	r1, [r3, #0]
    a8be:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a8c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8c6:	5499      	strb	r1, [r3, r2]
    a8c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8d0:	781b      	ldrb	r3, [r3, #0]
    a8d2:	3301      	adds	r3, #1
    a8d4:	b2da      	uxtb	r2, r3
    a8d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8de:	701a      	strb	r2, [r3, #0]
    a8e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	2bff      	cmp	r3, #255	; 0xff
    a8ec:	d105      	bne.n	a8fa <send_bat+0x646>
    a8ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a8f6:	2200      	movs	r2, #0
    a8f8:	701a      	strb	r2, [r3, #0]
    a8fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a8fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	461a      	mov	r2, r3
    a906:	f642 53a6 	movw	r3, #11686	; 0x2da6
    a90a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a90e:	7819      	ldrb	r1, [r3, #0]
    a910:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a914:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a918:	5499      	strb	r1, [r3, r2]
    a91a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a91e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	3301      	adds	r3, #1
    a926:	b2da      	uxtb	r2, r3
    a928:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a92c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a930:	701a      	strb	r2, [r3, #0]
    a932:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a936:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	2bff      	cmp	r3, #255	; 0xff
    a93e:	d105      	bne.n	a94c <send_bat+0x698>
    a940:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    a944:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a948:	2200      	movs	r2, #0
    a94a:	701a      	strb	r2, [r3, #0]
    a94c:	f242 0339 	movw	r3, #8249	; 0x2039
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	781b      	ldrb	r3, [r3, #0]
    a956:	b2db      	uxtb	r3, r3
    a958:	f003 0310 	and.w	r3, r3, #16
    a95c:	2b00      	cmp	r3, #0
    a95e:	d15a      	bne.n	aa16 <send_bat+0x762>
    a960:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a964:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	b2db      	uxtb	r3, r3
    a96c:	461a      	mov	r2, r3
    a96e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    a972:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a976:	5c9a      	ldrb	r2, [r3, r2]
    a978:	f642 53a3 	movw	r3, #11683	; 0x2da3
    a97c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a980:	701a      	strb	r2, [r3, #0]
    a982:	f642 53a4 	movw	r3, #11684	; 0x2da4
    a986:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a98a:	2200      	movs	r2, #0
    a98c:	701a      	strb	r2, [r3, #0]
    a98e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a992:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	b2db      	uxtb	r3, r3
    a99a:	3301      	adds	r3, #1
    a99c:	b2da      	uxtb	r2, r3
    a99e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a9a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a9a6:	701a      	strb	r2, [r3, #0]
    a9a8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a9ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a9b0:	781b      	ldrb	r3, [r3, #0]
    a9b2:	b2db      	uxtb	r3, r3
    a9b4:	2bff      	cmp	r3, #255	; 0xff
    a9b6:	d105      	bne.n	a9c4 <send_bat+0x710>
    a9b8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    a9bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a9c0:	2200      	movs	r2, #0
    a9c2:	701a      	strb	r2, [r3, #0]
    a9c4:	f242 0338 	movw	r3, #8248	; 0x2038
    a9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9cc:	f242 0238 	movw	r2, #8248	; 0x2038
    a9d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9d4:	7812      	ldrb	r2, [r2, #0]
    a9d6:	b2d2      	uxtb	r2, r2
    a9d8:	f042 0201 	orr.w	r2, r2, #1
    a9dc:	b2d2      	uxtb	r2, r2
    a9de:	701a      	strb	r2, [r3, #0]
    a9e0:	f242 0339 	movw	r3, #8249	; 0x2039
    a9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e8:	f242 0239 	movw	r2, #8249	; 0x2039
    a9ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9f0:	7812      	ldrb	r2, [r2, #0]
    a9f2:	b2d2      	uxtb	r2, r2
    a9f4:	f042 0210 	orr.w	r2, r2, #16
    a9f8:	b2d2      	uxtb	r2, r2
    a9fa:	701a      	strb	r2, [r3, #0]
    a9fc:	e00b      	b.n	aa16 <send_bat+0x762>
    a9fe:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    aa02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	3301      	adds	r3, #1
    aa0a:	b2da      	uxtb	r2, r3
    aa0c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    aa10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa14:	701a      	strb	r2, [r3, #0]
}
    aa16:	46bd      	mov	sp, r7
    aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa1c:	4770      	bx	lr
    aa1e:	bf00      	nop

0000aa20 <send_climb>:
void send_climb(void){  //2000ms
    aa20:	b480      	push	{r7}
    aa22:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    aa24:	f642 4399 	movw	r3, #11417	; 0x2c99
    aa28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa2c:	781a      	ldrb	r2, [r3, #0]
    aa2e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa32:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa36:	fba3 1302 	umull	r1, r3, r3, r2
    aa3a:	0919      	lsrs	r1, r3, #4
    aa3c:	460b      	mov	r3, r1
    aa3e:	009b      	lsls	r3, r3, #2
    aa40:	440b      	add	r3, r1
    aa42:	009b      	lsls	r3, r3, #2
    aa44:	1ad3      	subs	r3, r2, r3
    aa46:	b2db      	uxtb	r3, r3
    aa48:	2b12      	cmp	r3, #18
    aa4a:	f040 8554 	bne.w	b4f6 <send_climb+0xad6>
    aa4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aa52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa56:	781a      	ldrb	r2, [r3, #0]
    aa58:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    aa5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	b2db      	uxtb	r3, r3
    aa64:	429a      	cmp	r2, r3
    aa66:	d313      	bcc.n	aa90 <send_climb+0x70>
    aa68:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    aa6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa70:	781b      	ldrb	r3, [r3, #0]
    aa72:	b2db      	uxtb	r3, r3
    aa74:	461a      	mov	r2, r3
    aa76:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aa7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	1ad3      	subs	r3, r2, r3
    aa82:	33ff      	adds	r3, #255	; 0xff
    aa84:	2b12      	cmp	r3, #18
    aa86:	bfd4      	ite	le
    aa88:	2300      	movle	r3, #0
    aa8a:	2301      	movgt	r3, #1
    aa8c:	b2db      	uxtb	r3, r3
    aa8e:	e011      	b.n	aab4 <send_climb+0x94>
    aa90:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    aa94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa98:	781b      	ldrb	r3, [r3, #0]
    aa9a:	b2db      	uxtb	r3, r3
    aa9c:	461a      	mov	r2, r3
    aa9e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aaa2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	1ad3      	subs	r3, r2, r3
    aaaa:	2b12      	cmp	r3, #18
    aaac:	bfd4      	ite	le
    aaae:	2300      	movle	r3, #0
    aab0:	2301      	movgt	r3, #1
    aab2:	b2db      	uxtb	r3, r3
    aab4:	2b00      	cmp	r3, #0
    aab6:	f000 8512 	beq.w	b4de <send_climb+0xabe>
    aaba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aabe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aac2:	781b      	ldrb	r3, [r3, #0]
    aac4:	461a      	mov	r2, r3
    aac6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    aaca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aace:	2105      	movs	r1, #5
    aad0:	5499      	strb	r1, [r3, r2]
    aad2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aad6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aada:	781b      	ldrb	r3, [r3, #0]
    aadc:	3301      	adds	r3, #1
    aade:	b2da      	uxtb	r2, r3
    aae0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aae4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aae8:	701a      	strb	r2, [r3, #0]
    aaea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aaee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aaf2:	781b      	ldrb	r3, [r3, #0]
    aaf4:	2bff      	cmp	r3, #255	; 0xff
    aaf6:	d105      	bne.n	ab04 <send_climb+0xe4>
    aaf8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aafc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab00:	2200      	movs	r2, #0
    ab02:	701a      	strb	r2, [r3, #0]
    ab04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	461a      	mov	r2, r3
    ab10:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ab14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab18:	210e      	movs	r1, #14
    ab1a:	5499      	strb	r1, [r3, r2]
    ab1c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	3301      	adds	r3, #1
    ab28:	b2da      	uxtb	r2, r3
    ab2a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab32:	701a      	strb	r2, [r3, #0]
    ab34:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab3c:	781b      	ldrb	r3, [r3, #0]
    ab3e:	2bff      	cmp	r3, #255	; 0xff
    ab40:	d105      	bne.n	ab4e <send_climb+0x12e>
    ab42:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab4a:	2200      	movs	r2, #0
    ab4c:	701a      	strb	r2, [r3, #0]
    ab4e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ab52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab56:	220e      	movs	r2, #14
    ab58:	701a      	strb	r2, [r3, #0]
    ab5a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ab5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab62:	220e      	movs	r2, #14
    ab64:	701a      	strb	r2, [r3, #0]
    ab66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ab6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	461a      	mov	r2, r3
    ab72:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    ab76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab7a:	7819      	ldrb	r1, [r3, #0]
    ab7c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ab80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab84:	5499      	strb	r1, [r3, r2]
    ab86:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    ab8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab8e:	781a      	ldrb	r2, [r3, #0]
    ab90:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ab94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	4413      	add	r3, r2
    ab9c:	b2da      	uxtb	r2, r3
    ab9e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    aba2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aba6:	701a      	strb	r2, [r3, #0]
    aba8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    abac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abb0:	781a      	ldrb	r2, [r3, #0]
    abb2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    abb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	4413      	add	r3, r2
    abbe:	b2da      	uxtb	r2, r3
    abc0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    abc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    abce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	3301      	adds	r3, #1
    abd6:	b2da      	uxtb	r2, r3
    abd8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    abdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abe0:	701a      	strb	r2, [r3, #0]
    abe2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    abe6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	2bff      	cmp	r3, #255	; 0xff
    abee:	d105      	bne.n	abfc <send_climb+0x1dc>
    abf0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    abf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abf8:	2200      	movs	r2, #0
    abfa:	701a      	strb	r2, [r3, #0]
    abfc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	461a      	mov	r2, r3
    ac08:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    ac0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac10:	7859      	ldrb	r1, [r3, #1]
    ac12:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ac16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac1a:	5499      	strb	r1, [r3, r2]
    ac1c:	4bd3      	ldr	r3, [pc, #844]	; (af6c <send_climb+0x54c>)
    ac1e:	781a      	ldrb	r2, [r3, #0]
    ac20:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ac24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac28:	781b      	ldrb	r3, [r3, #0]
    ac2a:	4413      	add	r3, r2
    ac2c:	b2da      	uxtb	r2, r3
    ac2e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ac32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac36:	701a      	strb	r2, [r3, #0]
    ac38:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ac3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac40:	781a      	ldrb	r2, [r3, #0]
    ac42:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ac46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac4a:	781b      	ldrb	r3, [r3, #0]
    ac4c:	4413      	add	r3, r2
    ac4e:	b2da      	uxtb	r2, r3
    ac50:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ac54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac58:	701a      	strb	r2, [r3, #0]
    ac5a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac62:	781b      	ldrb	r3, [r3, #0]
    ac64:	3301      	adds	r3, #1
    ac66:	b2da      	uxtb	r2, r3
    ac68:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac70:	701a      	strb	r2, [r3, #0]
    ac72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac7a:	781b      	ldrb	r3, [r3, #0]
    ac7c:	2bff      	cmp	r3, #255	; 0xff
    ac7e:	d105      	bne.n	ac8c <send_climb+0x26c>
    ac80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac88:	2200      	movs	r2, #0
    ac8a:	701a      	strb	r2, [r3, #0]
    ac8c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ac90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	461a      	mov	r2, r3
    ac98:	f642 73e8 	movw	r3, #12264	; 0x2fe8
    ac9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aca0:	7819      	ldrb	r1, [r3, #0]
    aca2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    aca6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acaa:	5499      	strb	r1, [r3, r2]
    acac:	f642 73e8 	movw	r3, #12264	; 0x2fe8
    acb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acb4:	781a      	ldrb	r2, [r3, #0]
    acb6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    acba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acbe:	781b      	ldrb	r3, [r3, #0]
    acc0:	4413      	add	r3, r2
    acc2:	b2da      	uxtb	r2, r3
    acc4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    acc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    accc:	701a      	strb	r2, [r3, #0]
    acce:	f642 53a6 	movw	r3, #11686	; 0x2da6
    acd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acd6:	781a      	ldrb	r2, [r3, #0]
    acd8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    acdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	4413      	add	r3, r2
    ace4:	b2da      	uxtb	r2, r3
    ace6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    acea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acee:	701a      	strb	r2, [r3, #0]
    acf0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    acf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	3301      	adds	r3, #1
    acfc:	b2da      	uxtb	r2, r3
    acfe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad06:	701a      	strb	r2, [r3, #0]
    ad08:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad10:	781b      	ldrb	r3, [r3, #0]
    ad12:	2bff      	cmp	r3, #255	; 0xff
    ad14:	d105      	bne.n	ad22 <send_climb+0x302>
    ad16:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad1e:	2200      	movs	r2, #0
    ad20:	701a      	strb	r2, [r3, #0]
    ad22:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad2a:	781b      	ldrb	r3, [r3, #0]
    ad2c:	461a      	mov	r2, r3
    ad2e:	f642 73e8 	movw	r3, #12264	; 0x2fe8
    ad32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad36:	7859      	ldrb	r1, [r3, #1]
    ad38:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ad3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad40:	5499      	strb	r1, [r3, r2]
    ad42:	4b8b      	ldr	r3, [pc, #556]	; (af70 <send_climb+0x550>)
    ad44:	781a      	ldrb	r2, [r3, #0]
    ad46:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ad4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad4e:	781b      	ldrb	r3, [r3, #0]
    ad50:	4413      	add	r3, r2
    ad52:	b2da      	uxtb	r2, r3
    ad54:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ad58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad5c:	701a      	strb	r2, [r3, #0]
    ad5e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ad62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad66:	781a      	ldrb	r2, [r3, #0]
    ad68:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ad6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad70:	781b      	ldrb	r3, [r3, #0]
    ad72:	4413      	add	r3, r2
    ad74:	b2da      	uxtb	r2, r3
    ad76:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ad7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad7e:	701a      	strb	r2, [r3, #0]
    ad80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad88:	781b      	ldrb	r3, [r3, #0]
    ad8a:	3301      	adds	r3, #1
    ad8c:	b2da      	uxtb	r2, r3
    ad8e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad96:	701a      	strb	r2, [r3, #0]
    ad98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ad9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ada0:	781b      	ldrb	r3, [r3, #0]
    ada2:	2bff      	cmp	r3, #255	; 0xff
    ada4:	d105      	bne.n	adb2 <send_climb+0x392>
    ada6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    adaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adae:	2200      	movs	r2, #0
    adb0:	701a      	strb	r2, [r3, #0]
    adb2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    adb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	461a      	mov	r2, r3
    adbe:	f642 73e8 	movw	r3, #12264	; 0x2fe8
    adc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adc6:	7899      	ldrb	r1, [r3, #2]
    adc8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    adcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    add0:	5499      	strb	r1, [r3, r2]
    add2:	4b68      	ldr	r3, [pc, #416]	; (af74 <send_climb+0x554>)
    add4:	781a      	ldrb	r2, [r3, #0]
    add6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    adda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	4413      	add	r3, r2
    ade2:	b2da      	uxtb	r2, r3
    ade4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ade8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adec:	701a      	strb	r2, [r3, #0]
    adee:	f642 53a6 	movw	r3, #11686	; 0x2da6
    adf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adf6:	781a      	ldrb	r2, [r3, #0]
    adf8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    adfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	4413      	add	r3, r2
    ae04:	b2da      	uxtb	r2, r3
    ae06:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ae0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae0e:	701a      	strb	r2, [r3, #0]
    ae10:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ae14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae18:	781b      	ldrb	r3, [r3, #0]
    ae1a:	3301      	adds	r3, #1
    ae1c:	b2da      	uxtb	r2, r3
    ae1e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ae22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae26:	701a      	strb	r2, [r3, #0]
    ae28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ae2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae30:	781b      	ldrb	r3, [r3, #0]
    ae32:	2bff      	cmp	r3, #255	; 0xff
    ae34:	d105      	bne.n	ae42 <send_climb+0x422>
    ae36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ae3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae3e:	2200      	movs	r2, #0
    ae40:	701a      	strb	r2, [r3, #0]
    ae42:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ae46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae4a:	781b      	ldrb	r3, [r3, #0]
    ae4c:	461a      	mov	r2, r3
    ae4e:	f642 73e8 	movw	r3, #12264	; 0x2fe8
    ae52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae56:	78d9      	ldrb	r1, [r3, #3]
    ae58:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ae5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae60:	5499      	strb	r1, [r3, r2]
    ae62:	4b45      	ldr	r3, [pc, #276]	; (af78 <send_climb+0x558>)
    ae64:	781a      	ldrb	r2, [r3, #0]
    ae66:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ae6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae6e:	781b      	ldrb	r3, [r3, #0]
    ae70:	4413      	add	r3, r2
    ae72:	b2da      	uxtb	r2, r3
    ae74:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ae78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae7c:	701a      	strb	r2, [r3, #0]
    ae7e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ae82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae86:	781a      	ldrb	r2, [r3, #0]
    ae88:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ae8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	4413      	add	r3, r2
    ae94:	b2da      	uxtb	r2, r3
    ae96:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ae9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aea4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aea8:	781b      	ldrb	r3, [r3, #0]
    aeaa:	3301      	adds	r3, #1
    aeac:	b2da      	uxtb	r2, r3
    aeae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aeb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aeb6:	701a      	strb	r2, [r3, #0]
    aeb8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aebc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aec0:	781b      	ldrb	r3, [r3, #0]
    aec2:	2bff      	cmp	r3, #255	; 0xff
    aec4:	d105      	bne.n	aed2 <send_climb+0x4b2>
    aec6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aeca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aece:	2200      	movs	r2, #0
    aed0:	701a      	strb	r2, [r3, #0]
    aed2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aed6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aeda:	781b      	ldrb	r3, [r3, #0]
    aedc:	461a      	mov	r2, r3
    aede:	f642 73f0 	movw	r3, #12272	; 0x2ff0
    aee2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aee6:	7819      	ldrb	r1, [r3, #0]
    aee8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    aeec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aef0:	5499      	strb	r1, [r3, r2]
    aef2:	f642 73f0 	movw	r3, #12272	; 0x2ff0
    aef6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aefa:	781a      	ldrb	r2, [r3, #0]
    aefc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    af00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af04:	781b      	ldrb	r3, [r3, #0]
    af06:	4413      	add	r3, r2
    af08:	b2da      	uxtb	r2, r3
    af0a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    af0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af12:	701a      	strb	r2, [r3, #0]
    af14:	f642 53a6 	movw	r3, #11686	; 0x2da6
    af18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af1c:	781a      	ldrb	r2, [r3, #0]
    af1e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    af22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	4413      	add	r3, r2
    af2a:	b2da      	uxtb	r2, r3
    af2c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    af30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af34:	701a      	strb	r2, [r3, #0]
    af36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    af3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	3301      	adds	r3, #1
    af42:	b2da      	uxtb	r2, r3
    af44:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    af48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af4c:	701a      	strb	r2, [r3, #0]
    af4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    af52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af56:	781b      	ldrb	r3, [r3, #0]
    af58:	2bff      	cmp	r3, #255	; 0xff
    af5a:	d10f      	bne.n	af7c <send_climb+0x55c>
    af5c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    af60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af64:	2200      	movs	r2, #0
    af66:	701a      	strb	r2, [r3, #0]
    af68:	e008      	b.n	af7c <send_climb+0x55c>
    af6a:	bf00      	nop
    af6c:	20012fd5 	.word	0x20012fd5
    af70:	20012fe9 	.word	0x20012fe9
    af74:	20012fea 	.word	0x20012fea
    af78:	20012feb 	.word	0x20012feb
    af7c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    af80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af84:	781b      	ldrb	r3, [r3, #0]
    af86:	461a      	mov	r2, r3
    af88:	f642 73f0 	movw	r3, #12272	; 0x2ff0
    af8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af90:	7859      	ldrb	r1, [r3, #1]
    af92:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    af96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af9a:	5499      	strb	r1, [r3, r2]
    af9c:	4bd1      	ldr	r3, [pc, #836]	; (b2e4 <send_climb+0x8c4>)
    af9e:	781a      	ldrb	r2, [r3, #0]
    afa0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    afa4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	4413      	add	r3, r2
    afac:	b2da      	uxtb	r2, r3
    afae:	f642 53a5 	movw	r3, #11685	; 0x2da5
    afb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afb6:	701a      	strb	r2, [r3, #0]
    afb8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    afbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afc0:	781a      	ldrb	r2, [r3, #0]
    afc2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    afc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	4413      	add	r3, r2
    afce:	b2da      	uxtb	r2, r3
    afd0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    afd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afd8:	701a      	strb	r2, [r3, #0]
    afda:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    afde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	3301      	adds	r3, #1
    afe6:	b2da      	uxtb	r2, r3
    afe8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    afec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aff0:	701a      	strb	r2, [r3, #0]
    aff2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    aff6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    affa:	781b      	ldrb	r3, [r3, #0]
    affc:	2bff      	cmp	r3, #255	; 0xff
    affe:	d105      	bne.n	b00c <send_climb+0x5ec>
    b000:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b004:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b008:	2200      	movs	r2, #0
    b00a:	701a      	strb	r2, [r3, #0]
    b00c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b010:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b014:	781b      	ldrb	r3, [r3, #0]
    b016:	461a      	mov	r2, r3
    b018:	f642 73f0 	movw	r3, #12272	; 0x2ff0
    b01c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b020:	7899      	ldrb	r1, [r3, #2]
    b022:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b026:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b02a:	5499      	strb	r1, [r3, r2]
    b02c:	4bae      	ldr	r3, [pc, #696]	; (b2e8 <send_climb+0x8c8>)
    b02e:	781a      	ldrb	r2, [r3, #0]
    b030:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b034:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	4413      	add	r3, r2
    b03c:	b2da      	uxtb	r2, r3
    b03e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b042:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b046:	701a      	strb	r2, [r3, #0]
    b048:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b04c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b050:	781a      	ldrb	r2, [r3, #0]
    b052:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b056:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	4413      	add	r3, r2
    b05e:	b2da      	uxtb	r2, r3
    b060:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b064:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b068:	701a      	strb	r2, [r3, #0]
    b06a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b06e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b072:	781b      	ldrb	r3, [r3, #0]
    b074:	3301      	adds	r3, #1
    b076:	b2da      	uxtb	r2, r3
    b078:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b07c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b080:	701a      	strb	r2, [r3, #0]
    b082:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b086:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b08a:	781b      	ldrb	r3, [r3, #0]
    b08c:	2bff      	cmp	r3, #255	; 0xff
    b08e:	d105      	bne.n	b09c <send_climb+0x67c>
    b090:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b094:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b098:	2200      	movs	r2, #0
    b09a:	701a      	strb	r2, [r3, #0]
    b09c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b0a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0a4:	781b      	ldrb	r3, [r3, #0]
    b0a6:	461a      	mov	r2, r3
    b0a8:	f642 73f0 	movw	r3, #12272	; 0x2ff0
    b0ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0b0:	78d9      	ldrb	r1, [r3, #3]
    b0b2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b0b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0ba:	5499      	strb	r1, [r3, r2]
    b0bc:	4b8b      	ldr	r3, [pc, #556]	; (b2ec <send_climb+0x8cc>)
    b0be:	781a      	ldrb	r2, [r3, #0]
    b0c0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b0c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	4413      	add	r3, r2
    b0cc:	b2da      	uxtb	r2, r3
    b0ce:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b0d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0d6:	701a      	strb	r2, [r3, #0]
    b0d8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b0dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0e0:	781a      	ldrb	r2, [r3, #0]
    b0e2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b0e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0ea:	781b      	ldrb	r3, [r3, #0]
    b0ec:	4413      	add	r3, r2
    b0ee:	b2da      	uxtb	r2, r3
    b0f0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b0f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b0f8:	701a      	strb	r2, [r3, #0]
    b0fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b0fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b102:	781b      	ldrb	r3, [r3, #0]
    b104:	3301      	adds	r3, #1
    b106:	b2da      	uxtb	r2, r3
    b108:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b10c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b110:	701a      	strb	r2, [r3, #0]
    b112:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b116:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	2bff      	cmp	r3, #255	; 0xff
    b11e:	d105      	bne.n	b12c <send_climb+0x70c>
    b120:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b124:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b128:	2200      	movs	r2, #0
    b12a:	701a      	strb	r2, [r3, #0]
    b12c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b130:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b134:	781b      	ldrb	r3, [r3, #0]
    b136:	461a      	mov	r2, r3
    b138:	f248 33d4 	movw	r3, #33748	; 0x83d4
    b13c:	f2c0 0301 	movt	r3, #1
    b140:	7819      	ldrb	r1, [r3, #0]
    b142:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b146:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b14a:	5499      	strb	r1, [r3, r2]
    b14c:	f248 33d4 	movw	r3, #33748	; 0x83d4
    b150:	f2c0 0301 	movt	r3, #1
    b154:	781a      	ldrb	r2, [r3, #0]
    b156:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b15a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b15e:	781b      	ldrb	r3, [r3, #0]
    b160:	4413      	add	r3, r2
    b162:	b2da      	uxtb	r2, r3
    b164:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b168:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b16c:	701a      	strb	r2, [r3, #0]
    b16e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b172:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b176:	781a      	ldrb	r2, [r3, #0]
    b178:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b17c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	4413      	add	r3, r2
    b184:	b2da      	uxtb	r2, r3
    b186:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b18a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b18e:	701a      	strb	r2, [r3, #0]
    b190:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b194:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b198:	781b      	ldrb	r3, [r3, #0]
    b19a:	3301      	adds	r3, #1
    b19c:	b2da      	uxtb	r2, r3
    b19e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b1a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1a6:	701a      	strb	r2, [r3, #0]
    b1a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b1ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	2bff      	cmp	r3, #255	; 0xff
    b1b4:	d105      	bne.n	b1c2 <send_climb+0x7a2>
    b1b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b1ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1be:	2200      	movs	r2, #0
    b1c0:	701a      	strb	r2, [r3, #0]
    b1c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b1c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	461a      	mov	r2, r3
    b1ce:	f248 33d4 	movw	r3, #33748	; 0x83d4
    b1d2:	f2c0 0301 	movt	r3, #1
    b1d6:	7859      	ldrb	r1, [r3, #1]
    b1d8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b1dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1e0:	5499      	strb	r1, [r3, r2]
    b1e2:	4b43      	ldr	r3, [pc, #268]	; (b2f0 <send_climb+0x8d0>)
    b1e4:	781a      	ldrb	r2, [r3, #0]
    b1e6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b1ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	4413      	add	r3, r2
    b1f2:	b2da      	uxtb	r2, r3
    b1f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b1f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b1fc:	701a      	strb	r2, [r3, #0]
    b1fe:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b202:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b206:	781a      	ldrb	r2, [r3, #0]
    b208:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b20c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	4413      	add	r3, r2
    b214:	b2da      	uxtb	r2, r3
    b216:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b21a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b21e:	701a      	strb	r2, [r3, #0]
    b220:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b224:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b228:	781b      	ldrb	r3, [r3, #0]
    b22a:	3301      	adds	r3, #1
    b22c:	b2da      	uxtb	r2, r3
    b22e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b232:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b236:	701a      	strb	r2, [r3, #0]
    b238:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b23c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	2bff      	cmp	r3, #255	; 0xff
    b244:	d105      	bne.n	b252 <send_climb+0x832>
    b246:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b24a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b24e:	2200      	movs	r2, #0
    b250:	701a      	strb	r2, [r3, #0]
    b252:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b256:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	461a      	mov	r2, r3
    b25e:	f248 33d4 	movw	r3, #33748	; 0x83d4
    b262:	f2c0 0301 	movt	r3, #1
    b266:	7899      	ldrb	r1, [r3, #2]
    b268:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b26c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b270:	5499      	strb	r1, [r3, r2]
    b272:	4b20      	ldr	r3, [pc, #128]	; (b2f4 <send_climb+0x8d4>)
    b274:	781a      	ldrb	r2, [r3, #0]
    b276:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b27a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b27e:	781b      	ldrb	r3, [r3, #0]
    b280:	4413      	add	r3, r2
    b282:	b2da      	uxtb	r2, r3
    b284:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b288:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b28c:	701a      	strb	r2, [r3, #0]
    b28e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b292:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b296:	781a      	ldrb	r2, [r3, #0]
    b298:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b29c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	4413      	add	r3, r2
    b2a4:	b2da      	uxtb	r2, r3
    b2a6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b2aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2ae:	701a      	strb	r2, [r3, #0]
    b2b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b2b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	3301      	adds	r3, #1
    b2bc:	b2da      	uxtb	r2, r3
    b2be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b2c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2c6:	701a      	strb	r2, [r3, #0]
    b2c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b2cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2d0:	781b      	ldrb	r3, [r3, #0]
    b2d2:	2bff      	cmp	r3, #255	; 0xff
    b2d4:	d110      	bne.n	b2f8 <send_climb+0x8d8>
    b2d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b2da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2de:	2200      	movs	r2, #0
    b2e0:	701a      	strb	r2, [r3, #0]
    b2e2:	e009      	b.n	b2f8 <send_climb+0x8d8>
    b2e4:	20012ff1 	.word	0x20012ff1
    b2e8:	20012ff2 	.word	0x20012ff2
    b2ec:	20012ff3 	.word	0x20012ff3
    b2f0:	000183d5 	.word	0x000183d5
    b2f4:	000183d6 	.word	0x000183d6
    b2f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b2fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	461a      	mov	r2, r3
    b304:	f248 33d4 	movw	r3, #33748	; 0x83d4
    b308:	f2c0 0301 	movt	r3, #1
    b30c:	78d9      	ldrb	r1, [r3, #3]
    b30e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b312:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b316:	5499      	strb	r1, [r3, r2]
    b318:	4b79      	ldr	r3, [pc, #484]	; (b500 <send_climb+0xae0>)
    b31a:	781a      	ldrb	r2, [r3, #0]
    b31c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b320:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b324:	781b      	ldrb	r3, [r3, #0]
    b326:	4413      	add	r3, r2
    b328:	b2da      	uxtb	r2, r3
    b32a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b32e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b332:	701a      	strb	r2, [r3, #0]
    b334:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b338:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b33c:	781a      	ldrb	r2, [r3, #0]
    b33e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b342:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	4413      	add	r3, r2
    b34a:	b2da      	uxtb	r2, r3
    b34c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b350:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b354:	701a      	strb	r2, [r3, #0]
    b356:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b35a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	3301      	adds	r3, #1
    b362:	b2da      	uxtb	r2, r3
    b364:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b368:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b36c:	701a      	strb	r2, [r3, #0]
    b36e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b372:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	2bff      	cmp	r3, #255	; 0xff
    b37a:	d105      	bne.n	b388 <send_climb+0x968>
    b37c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b380:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b384:	2200      	movs	r2, #0
    b386:	701a      	strb	r2, [r3, #0]
    b388:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b38c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	461a      	mov	r2, r3
    b394:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b398:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b39c:	7819      	ldrb	r1, [r3, #0]
    b39e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b3a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3a6:	5499      	strb	r1, [r3, r2]
    b3a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	3301      	adds	r3, #1
    b3b4:	b2da      	uxtb	r2, r3
    b3b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3be:	701a      	strb	r2, [r3, #0]
    b3c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	2bff      	cmp	r3, #255	; 0xff
    b3cc:	d105      	bne.n	b3da <send_climb+0x9ba>
    b3ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3d6:	2200      	movs	r2, #0
    b3d8:	701a      	strb	r2, [r3, #0]
    b3da:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	461a      	mov	r2, r3
    b3e6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b3ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3ee:	7819      	ldrb	r1, [r3, #0]
    b3f0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b3f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b3f8:	5499      	strb	r1, [r3, r2]
    b3fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b3fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b402:	781b      	ldrb	r3, [r3, #0]
    b404:	3301      	adds	r3, #1
    b406:	b2da      	uxtb	r2, r3
    b408:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b40c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b410:	701a      	strb	r2, [r3, #0]
    b412:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b416:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b41a:	781b      	ldrb	r3, [r3, #0]
    b41c:	2bff      	cmp	r3, #255	; 0xff
    b41e:	d105      	bne.n	b42c <send_climb+0xa0c>
    b420:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b424:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b428:	2200      	movs	r2, #0
    b42a:	701a      	strb	r2, [r3, #0]
    b42c:	f242 0339 	movw	r3, #8249	; 0x2039
    b430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b434:	781b      	ldrb	r3, [r3, #0]
    b436:	b2db      	uxtb	r3, r3
    b438:	f003 0310 	and.w	r3, r3, #16
    b43c:	2b00      	cmp	r3, #0
    b43e:	d15a      	bne.n	b4f6 <send_climb+0xad6>
    b440:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b444:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	b2db      	uxtb	r3, r3
    b44c:	461a      	mov	r2, r3
    b44e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b452:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b456:	5c9a      	ldrb	r2, [r3, r2]
    b458:	f642 53a3 	movw	r3, #11683	; 0x2da3
    b45c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b460:	701a      	strb	r2, [r3, #0]
    b462:	f642 53a4 	movw	r3, #11684	; 0x2da4
    b466:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b46a:	2200      	movs	r2, #0
    b46c:	701a      	strb	r2, [r3, #0]
    b46e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b472:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	b2db      	uxtb	r3, r3
    b47a:	3301      	adds	r3, #1
    b47c:	b2da      	uxtb	r2, r3
    b47e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b482:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b486:	701a      	strb	r2, [r3, #0]
    b488:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b48c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	b2db      	uxtb	r3, r3
    b494:	2bff      	cmp	r3, #255	; 0xff
    b496:	d105      	bne.n	b4a4 <send_climb+0xa84>
    b498:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b49c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b4a0:	2200      	movs	r2, #0
    b4a2:	701a      	strb	r2, [r3, #0]
    b4a4:	f242 0338 	movw	r3, #8248	; 0x2038
    b4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ac:	f242 0238 	movw	r2, #8248	; 0x2038
    b4b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b4b4:	7812      	ldrb	r2, [r2, #0]
    b4b6:	b2d2      	uxtb	r2, r2
    b4b8:	f042 0201 	orr.w	r2, r2, #1
    b4bc:	b2d2      	uxtb	r2, r2
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f242 0339 	movw	r3, #8249	; 0x2039
    b4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c8:	f242 0239 	movw	r2, #8249	; 0x2039
    b4cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b4d0:	7812      	ldrb	r2, [r2, #0]
    b4d2:	b2d2      	uxtb	r2, r2
    b4d4:	f042 0210 	orr.w	r2, r2, #16
    b4d8:	b2d2      	uxtb	r2, r2
    b4da:	701a      	strb	r2, [r3, #0]
    b4dc:	e00b      	b.n	b4f6 <send_climb+0xad6>
    b4de:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    b4e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b4e6:	781b      	ldrb	r3, [r3, #0]
    b4e8:	3301      	adds	r3, #1
    b4ea:	b2da      	uxtb	r2, r3
    b4ec:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    b4f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b4f4:	701a      	strb	r2, [r3, #0]
}
    b4f6:	46bd      	mov	sp, r7
    b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4fc:	4770      	bx	lr
    b4fe:	bf00      	nop
    b500:	000183d7 	.word	0x000183d7

0000b504 <send_mode>:
void send_mode(void){  //5000ms
    b504:	b480      	push	{r7}
    b506:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b508:	f642 4399 	movw	r3, #11417	; 0x2c99
    b50c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b510:	781a      	ldrb	r2, [r3, #0]
    b512:	f248 531f 	movw	r3, #34079	; 0x851f
    b516:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b51a:	fba3 1302 	umull	r1, r3, r3, r2
    b51e:	091b      	lsrs	r3, r3, #4
    b520:	2132      	movs	r1, #50	; 0x32
    b522:	fb01 f303 	mul.w	r3, r1, r3
    b526:	1ad3      	subs	r3, r2, r3
    b528:	b2db      	uxtb	r3, r3
    b52a:	2b09      	cmp	r3, #9
    b52c:	f040 82ba 	bne.w	baa4 <send_mode+0x5a0>
    b530:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b534:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b538:	781a      	ldrb	r2, [r3, #0]
    b53a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b53e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	b2db      	uxtb	r3, r3
    b546:	429a      	cmp	r2, r3
    b548:	d313      	bcc.n	b572 <send_mode+0x6e>
    b54a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b54e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b552:	781b      	ldrb	r3, [r3, #0]
    b554:	b2db      	uxtb	r3, r3
    b556:	461a      	mov	r2, r3
    b558:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b55c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	1ad3      	subs	r3, r2, r3
    b564:	33ff      	adds	r3, #255	; 0xff
    b566:	2b09      	cmp	r3, #9
    b568:	bfd4      	ite	le
    b56a:	2300      	movle	r3, #0
    b56c:	2301      	movgt	r3, #1
    b56e:	b2db      	uxtb	r3, r3
    b570:	e011      	b.n	b596 <send_mode+0x92>
    b572:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b576:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	b2db      	uxtb	r3, r3
    b57e:	461a      	mov	r2, r3
    b580:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b584:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	1ad3      	subs	r3, r2, r3
    b58c:	2b09      	cmp	r3, #9
    b58e:	bfd4      	ite	le
    b590:	2300      	movle	r3, #0
    b592:	2301      	movgt	r3, #1
    b594:	b2db      	uxtb	r3, r3
    b596:	2b00      	cmp	r3, #0
    b598:	f000 8278 	beq.w	ba8c <send_mode+0x588>
    b59c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5a4:	781b      	ldrb	r3, [r3, #0]
    b5a6:	461a      	mov	r2, r3
    b5a8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b5ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5b0:	2105      	movs	r1, #5
    b5b2:	5499      	strb	r1, [r3, r2]
    b5b4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	3301      	adds	r3, #1
    b5c0:	b2da      	uxtb	r2, r3
    b5c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5ca:	701a      	strb	r2, [r3, #0]
    b5cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	2bff      	cmp	r3, #255	; 0xff
    b5d8:	d105      	bne.n	b5e6 <send_mode+0xe2>
    b5da:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5e2:	2200      	movs	r2, #0
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b5ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	461a      	mov	r2, r3
    b5f2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b5f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5fa:	210b      	movs	r1, #11
    b5fc:	5499      	strb	r1, [r3, r2]
    b5fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b602:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	3301      	adds	r3, #1
    b60a:	b2da      	uxtb	r2, r3
    b60c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b610:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b614:	701a      	strb	r2, [r3, #0]
    b616:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b61a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b61e:	781b      	ldrb	r3, [r3, #0]
    b620:	2bff      	cmp	r3, #255	; 0xff
    b622:	d105      	bne.n	b630 <send_mode+0x12c>
    b624:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b628:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b62c:	2200      	movs	r2, #0
    b62e:	701a      	strb	r2, [r3, #0]
    b630:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b634:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b638:	220b      	movs	r2, #11
    b63a:	701a      	strb	r2, [r3, #0]
    b63c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b640:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b644:	220b      	movs	r2, #11
    b646:	701a      	strb	r2, [r3, #0]
    b648:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b64c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b650:	781b      	ldrb	r3, [r3, #0]
    b652:	461a      	mov	r2, r3
    b654:	f642 4384 	movw	r3, #11396	; 0x2c84
    b658:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b65c:	7819      	ldrb	r1, [r3, #0]
    b65e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b662:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b666:	5499      	strb	r1, [r3, r2]
    b668:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b66c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b670:	781a      	ldrb	r2, [r3, #0]
    b672:	f642 4384 	movw	r3, #11396	; 0x2c84
    b676:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b67a:	781b      	ldrb	r3, [r3, #0]
    b67c:	4413      	add	r3, r2
    b67e:	b2da      	uxtb	r2, r3
    b680:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b684:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b688:	701a      	strb	r2, [r3, #0]
    b68a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b68e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b692:	781a      	ldrb	r2, [r3, #0]
    b694:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b698:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	4413      	add	r3, r2
    b6a0:	b2da      	uxtb	r2, r3
    b6a2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b6a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6aa:	701a      	strb	r2, [r3, #0]
    b6ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b6b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6b4:	781b      	ldrb	r3, [r3, #0]
    b6b6:	3301      	adds	r3, #1
    b6b8:	b2da      	uxtb	r2, r3
    b6ba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b6be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6c2:	701a      	strb	r2, [r3, #0]
    b6c4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b6c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6cc:	781b      	ldrb	r3, [r3, #0]
    b6ce:	2bff      	cmp	r3, #255	; 0xff
    b6d0:	d105      	bne.n	b6de <send_mode+0x1da>
    b6d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b6d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6da:	2200      	movs	r2, #0
    b6dc:	701a      	strb	r2, [r3, #0]
    b6de:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b6e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6e6:	781b      	ldrb	r3, [r3, #0]
    b6e8:	461a      	mov	r2, r3
    b6ea:	f642 4385 	movw	r3, #11397	; 0x2c85
    b6ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6f2:	7819      	ldrb	r1, [r3, #0]
    b6f4:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b6f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6fc:	5499      	strb	r1, [r3, r2]
    b6fe:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b702:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b706:	781a      	ldrb	r2, [r3, #0]
    b708:	f642 4385 	movw	r3, #11397	; 0x2c85
    b70c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	4413      	add	r3, r2
    b714:	b2da      	uxtb	r2, r3
    b716:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b71a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b71e:	701a      	strb	r2, [r3, #0]
    b720:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b724:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b728:	781a      	ldrb	r2, [r3, #0]
    b72a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b72e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b732:	781b      	ldrb	r3, [r3, #0]
    b734:	4413      	add	r3, r2
    b736:	b2da      	uxtb	r2, r3
    b738:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b73c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b740:	701a      	strb	r2, [r3, #0]
    b742:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b746:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b74a:	781b      	ldrb	r3, [r3, #0]
    b74c:	3301      	adds	r3, #1
    b74e:	b2da      	uxtb	r2, r3
    b750:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b754:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b75e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	2bff      	cmp	r3, #255	; 0xff
    b766:	d105      	bne.n	b774 <send_mode+0x270>
    b768:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b76c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b770:	2200      	movs	r2, #0
    b772:	701a      	strb	r2, [r3, #0]
    b774:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b778:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b77c:	781b      	ldrb	r3, [r3, #0]
    b77e:	461a      	mov	r2, r3
    b780:	f243 23b4 	movw	r3, #12980	; 0x32b4
    b784:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b788:	7819      	ldrb	r1, [r3, #0]
    b78a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b78e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b792:	5499      	strb	r1, [r3, r2]
    b794:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b798:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b79c:	781a      	ldrb	r2, [r3, #0]
    b79e:	f243 23b4 	movw	r3, #12980	; 0x32b4
    b7a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	4413      	add	r3, r2
    b7aa:	b2da      	uxtb	r2, r3
    b7ac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b7b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7b4:	701a      	strb	r2, [r3, #0]
    b7b6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b7ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7be:	781a      	ldrb	r2, [r3, #0]
    b7c0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b7c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7c8:	781b      	ldrb	r3, [r3, #0]
    b7ca:	4413      	add	r3, r2
    b7cc:	b2da      	uxtb	r2, r3
    b7ce:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b7d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7d6:	701a      	strb	r2, [r3, #0]
    b7d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b7dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7e0:	781b      	ldrb	r3, [r3, #0]
    b7e2:	3301      	adds	r3, #1
    b7e4:	b2da      	uxtb	r2, r3
    b7e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b7ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7ee:	701a      	strb	r2, [r3, #0]
    b7f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b7f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7f8:	781b      	ldrb	r3, [r3, #0]
    b7fa:	2bff      	cmp	r3, #255	; 0xff
    b7fc:	d105      	bne.n	b80a <send_mode+0x306>
    b7fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b802:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b806:	2200      	movs	r2, #0
    b808:	701a      	strb	r2, [r3, #0]
    b80a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b80e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b812:	781b      	ldrb	r3, [r3, #0]
    b814:	461a      	mov	r2, r3
    b816:	f642 438b 	movw	r3, #11403	; 0x2c8b
    b81a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b81e:	7819      	ldrb	r1, [r3, #0]
    b820:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b824:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b828:	5499      	strb	r1, [r3, r2]
    b82a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b82e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b832:	781a      	ldrb	r2, [r3, #0]
    b834:	f642 438b 	movw	r3, #11403	; 0x2c8b
    b838:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b83c:	781b      	ldrb	r3, [r3, #0]
    b83e:	4413      	add	r3, r2
    b840:	b2da      	uxtb	r2, r3
    b842:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b846:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b84a:	701a      	strb	r2, [r3, #0]
    b84c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b850:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b854:	781a      	ldrb	r2, [r3, #0]
    b856:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b85a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	4413      	add	r3, r2
    b862:	b2da      	uxtb	r2, r3
    b864:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b868:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b86c:	701a      	strb	r2, [r3, #0]
    b86e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b872:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b876:	781b      	ldrb	r3, [r3, #0]
    b878:	3301      	adds	r3, #1
    b87a:	b2da      	uxtb	r2, r3
    b87c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b880:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b884:	701a      	strb	r2, [r3, #0]
    b886:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b88a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b88e:	781b      	ldrb	r3, [r3, #0]
    b890:	2bff      	cmp	r3, #255	; 0xff
    b892:	d105      	bne.n	b8a0 <send_mode+0x39c>
    b894:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b898:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b89c:	2200      	movs	r2, #0
    b89e:	701a      	strb	r2, [r3, #0]
    b8a0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b8a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	461a      	mov	r2, r3
    b8ac:	f640 231c 	movw	r3, #2588	; 0xa1c
    b8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b4:	7819      	ldrb	r1, [r3, #0]
    b8b6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b8ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8be:	5499      	strb	r1, [r3, r2]
    b8c0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b8c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8c8:	781a      	ldrb	r2, [r3, #0]
    b8ca:	f640 231c 	movw	r3, #2588	; 0xa1c
    b8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	4413      	add	r3, r2
    b8d6:	b2da      	uxtb	r2, r3
    b8d8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b8dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8e0:	701a      	strb	r2, [r3, #0]
    b8e2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b8e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8ea:	781a      	ldrb	r2, [r3, #0]
    b8ec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b8f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b8f4:	781b      	ldrb	r3, [r3, #0]
    b8f6:	4413      	add	r3, r2
    b8f8:	b2da      	uxtb	r2, r3
    b8fa:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b8fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b902:	701a      	strb	r2, [r3, #0]
    b904:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b908:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	3301      	adds	r3, #1
    b910:	b2da      	uxtb	r2, r3
    b912:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b916:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b91a:	701a      	strb	r2, [r3, #0]
    b91c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b920:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b924:	781b      	ldrb	r3, [r3, #0]
    b926:	2bff      	cmp	r3, #255	; 0xff
    b928:	d105      	bne.n	b936 <send_mode+0x432>
    b92a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b92e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b932:	2200      	movs	r2, #0
    b934:	701a      	strb	r2, [r3, #0]
    b936:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b93a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	461a      	mov	r2, r3
    b942:	f642 53a5 	movw	r3, #11685	; 0x2da5
    b946:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b94a:	7819      	ldrb	r1, [r3, #0]
    b94c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b950:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b954:	5499      	strb	r1, [r3, r2]
    b956:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b95a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b95e:	781b      	ldrb	r3, [r3, #0]
    b960:	3301      	adds	r3, #1
    b962:	b2da      	uxtb	r2, r3
    b964:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b968:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b96c:	701a      	strb	r2, [r3, #0]
    b96e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b972:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	2bff      	cmp	r3, #255	; 0xff
    b97a:	d105      	bne.n	b988 <send_mode+0x484>
    b97c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b980:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b984:	2200      	movs	r2, #0
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b98c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	461a      	mov	r2, r3
    b994:	f642 53a6 	movw	r3, #11686	; 0x2da6
    b998:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b99c:	7819      	ldrb	r1, [r3, #0]
    b99e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    b9a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9a6:	5499      	strb	r1, [r3, r2]
    b9a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b9ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9b0:	781b      	ldrb	r3, [r3, #0]
    b9b2:	3301      	adds	r3, #1
    b9b4:	b2da      	uxtb	r2, r3
    b9b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b9ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9be:	701a      	strb	r2, [r3, #0]
    b9c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b9c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	2bff      	cmp	r3, #255	; 0xff
    b9cc:	d105      	bne.n	b9da <send_mode+0x4d6>
    b9ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    b9d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9d6:	2200      	movs	r2, #0
    b9d8:	701a      	strb	r2, [r3, #0]
    b9da:	f242 0339 	movw	r3, #8249	; 0x2039
    b9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e2:	781b      	ldrb	r3, [r3, #0]
    b9e4:	b2db      	uxtb	r3, r3
    b9e6:	f003 0310 	and.w	r3, r3, #16
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d15a      	bne.n	baa4 <send_mode+0x5a0>
    b9ee:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    b9f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b9f6:	781b      	ldrb	r3, [r3, #0]
    b9f8:	b2db      	uxtb	r3, r3
    b9fa:	461a      	mov	r2, r3
    b9fc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ba00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba04:	5c9a      	ldrb	r2, [r3, r2]
    ba06:	f642 53a3 	movw	r3, #11683	; 0x2da3
    ba0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba0e:	701a      	strb	r2, [r3, #0]
    ba10:	f642 53a4 	movw	r3, #11684	; 0x2da4
    ba14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba18:	2200      	movs	r2, #0
    ba1a:	701a      	strb	r2, [r3, #0]
    ba1c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ba20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba24:	781b      	ldrb	r3, [r3, #0]
    ba26:	b2db      	uxtb	r3, r3
    ba28:	3301      	adds	r3, #1
    ba2a:	b2da      	uxtb	r2, r3
    ba2c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ba30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba34:	701a      	strb	r2, [r3, #0]
    ba36:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ba3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	b2db      	uxtb	r3, r3
    ba42:	2bff      	cmp	r3, #255	; 0xff
    ba44:	d105      	bne.n	ba52 <send_mode+0x54e>
    ba46:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ba4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba4e:	2200      	movs	r2, #0
    ba50:	701a      	strb	r2, [r3, #0]
    ba52:	f242 0338 	movw	r3, #8248	; 0x2038
    ba56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5a:	f242 0238 	movw	r2, #8248	; 0x2038
    ba5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba62:	7812      	ldrb	r2, [r2, #0]
    ba64:	b2d2      	uxtb	r2, r2
    ba66:	f042 0201 	orr.w	r2, r2, #1
    ba6a:	b2d2      	uxtb	r2, r2
    ba6c:	701a      	strb	r2, [r3, #0]
    ba6e:	f242 0339 	movw	r3, #8249	; 0x2039
    ba72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba76:	f242 0239 	movw	r2, #8249	; 0x2039
    ba7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba7e:	7812      	ldrb	r2, [r2, #0]
    ba80:	b2d2      	uxtb	r2, r2
    ba82:	f042 0210 	orr.w	r2, r2, #16
    ba86:	b2d2      	uxtb	r2, r2
    ba88:	701a      	strb	r2, [r3, #0]
    ba8a:	e00b      	b.n	baa4 <send_mode+0x5a0>
    ba8c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    ba90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ba94:	781b      	ldrb	r3, [r3, #0]
    ba96:	3301      	adds	r3, #1
    ba98:	b2da      	uxtb	r2, r3
    ba9a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    ba9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    baa2:	701a      	strb	r2, [r3, #0]
}
    baa4:	46bd      	mov	sp, r7
    baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    baaa:	4770      	bx	lr

0000baac <send_debug>:
void send_debug(void){  //5000ms
    baac:	b480      	push	{r7}
    baae:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bab0:	f642 4399 	movw	r3, #11417	; 0x2c99
    bab4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bab8:	781a      	ldrb	r2, [r3, #0]
    baba:	f248 531f 	movw	r3, #34079	; 0x851f
    babe:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bac2:	fba3 1302 	umull	r1, r3, r3, r2
    bac6:	091b      	lsrs	r3, r3, #4
    bac8:	2132      	movs	r1, #50	; 0x32
    baca:	fb01 f303 	mul.w	r3, r1, r3
    bace:	1ad3      	subs	r3, r2, r3
    bad0:	b2db      	uxtb	r3, r3
    bad2:	2b1d      	cmp	r3, #29
    bad4:	f040 82bb 	bne.w	c04e <send_debug+0x5a2>
    bad8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    badc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bae0:	781a      	ldrb	r2, [r3, #0]
    bae2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bae6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    baea:	781b      	ldrb	r3, [r3, #0]
    baec:	b2db      	uxtb	r3, r3
    baee:	429a      	cmp	r2, r3
    baf0:	d313      	bcc.n	bb1a <send_debug+0x6e>
    baf2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    baf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bafa:	781b      	ldrb	r3, [r3, #0]
    bafc:	b2db      	uxtb	r3, r3
    bafe:	461a      	mov	r2, r3
    bb00:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb08:	781b      	ldrb	r3, [r3, #0]
    bb0a:	1ad3      	subs	r3, r2, r3
    bb0c:	33ff      	adds	r3, #255	; 0xff
    bb0e:	2b09      	cmp	r3, #9
    bb10:	bfd4      	ite	le
    bb12:	2300      	movle	r3, #0
    bb14:	2301      	movgt	r3, #1
    bb16:	b2db      	uxtb	r3, r3
    bb18:	e011      	b.n	bb3e <send_debug+0x92>
    bb1a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bb1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	b2db      	uxtb	r3, r3
    bb26:	461a      	mov	r2, r3
    bb28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb30:	781b      	ldrb	r3, [r3, #0]
    bb32:	1ad3      	subs	r3, r2, r3
    bb34:	2b09      	cmp	r3, #9
    bb36:	bfd4      	ite	le
    bb38:	2300      	movle	r3, #0
    bb3a:	2301      	movgt	r3, #1
    bb3c:	b2db      	uxtb	r3, r3
    bb3e:	2b00      	cmp	r3, #0
    bb40:	f000 8279 	beq.w	c036 <send_debug+0x58a>
    bb44:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb4c:	781b      	ldrb	r3, [r3, #0]
    bb4e:	461a      	mov	r2, r3
    bb50:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bb54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb58:	2105      	movs	r1, #5
    bb5a:	5499      	strb	r1, [r3, r2]
    bb5c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	3301      	adds	r3, #1
    bb68:	b2da      	uxtb	r2, r3
    bb6a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb72:	701a      	strb	r2, [r3, #0]
    bb74:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb7c:	781b      	ldrb	r3, [r3, #0]
    bb7e:	2bff      	cmp	r3, #255	; 0xff
    bb80:	d105      	bne.n	bb8e <send_debug+0xe2>
    bb82:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb8a:	2200      	movs	r2, #0
    bb8c:	701a      	strb	r2, [r3, #0]
    bb8e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bb92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	461a      	mov	r2, r3
    bb9a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bb9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bba2:	210d      	movs	r1, #13
    bba4:	5499      	strb	r1, [r3, r2]
    bba6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bbaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	3301      	adds	r3, #1
    bbb2:	b2da      	uxtb	r2, r3
    bbb4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bbb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbbc:	701a      	strb	r2, [r3, #0]
    bbbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bbc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	2bff      	cmp	r3, #255	; 0xff
    bbca:	d105      	bne.n	bbd8 <send_debug+0x12c>
    bbcc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bbd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbd4:	2200      	movs	r2, #0
    bbd6:	701a      	strb	r2, [r3, #0]
    bbd8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bbdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbe0:	220d      	movs	r2, #13
    bbe2:	701a      	strb	r2, [r3, #0]
    bbe4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bbe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbec:	220d      	movs	r2, #13
    bbee:	701a      	strb	r2, [r3, #0]
    bbf0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bbf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bbf8:	781b      	ldrb	r3, [r3, #0]
    bbfa:	461a      	mov	r2, r3
    bbfc:	f642 53d7 	movw	r3, #11735	; 0x2dd7
    bc00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	b2d9      	uxtb	r1, r3
    bc08:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bc0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc10:	5499      	strb	r1, [r3, r2]
    bc12:	f642 53d7 	movw	r3, #11735	; 0x2dd7
    bc16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc1a:	781a      	ldrb	r2, [r3, #0]
    bc1c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bc20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc24:	781b      	ldrb	r3, [r3, #0]
    bc26:	4413      	add	r3, r2
    bc28:	b2da      	uxtb	r2, r3
    bc2a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bc2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc32:	701a      	strb	r2, [r3, #0]
    bc34:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bc38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc3c:	781a      	ldrb	r2, [r3, #0]
    bc3e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bc42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	4413      	add	r3, r2
    bc4a:	b2da      	uxtb	r2, r3
    bc4c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bc50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc54:	701a      	strb	r2, [r3, #0]
    bc56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bc5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	3301      	adds	r3, #1
    bc62:	b2da      	uxtb	r2, r3
    bc64:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bc68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc6c:	701a      	strb	r2, [r3, #0]
    bc6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bc72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	2bff      	cmp	r3, #255	; 0xff
    bc7a:	d105      	bne.n	bc88 <send_debug+0x1dc>
    bc7c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bc80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc84:	2200      	movs	r2, #0
    bc86:	701a      	strb	r2, [r3, #0]
    bc88:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bc8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc90:	781b      	ldrb	r3, [r3, #0]
    bc92:	461a      	mov	r2, r3
    bc94:	f642 53d8 	movw	r3, #11736	; 0x2dd8
    bc98:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc9c:	7819      	ldrb	r1, [r3, #0]
    bc9e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bca2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bca6:	5499      	strb	r1, [r3, r2]
    bca8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bcac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcb0:	781a      	ldrb	r2, [r3, #0]
    bcb2:	f642 53d8 	movw	r3, #11736	; 0x2dd8
    bcb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcba:	781b      	ldrb	r3, [r3, #0]
    bcbc:	4413      	add	r3, r2
    bcbe:	b2da      	uxtb	r2, r3
    bcc0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bcc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcc8:	701a      	strb	r2, [r3, #0]
    bcca:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bcce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcd2:	781a      	ldrb	r2, [r3, #0]
    bcd4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bcd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	4413      	add	r3, r2
    bce0:	b2da      	uxtb	r2, r3
    bce2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bce6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcea:	701a      	strb	r2, [r3, #0]
    bcec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bcf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bcf4:	781b      	ldrb	r3, [r3, #0]
    bcf6:	3301      	adds	r3, #1
    bcf8:	b2da      	uxtb	r2, r3
    bcfa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bcfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd02:	701a      	strb	r2, [r3, #0]
    bd04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd0c:	781b      	ldrb	r3, [r3, #0]
    bd0e:	2bff      	cmp	r3, #255	; 0xff
    bd10:	d105      	bne.n	bd1e <send_debug+0x272>
    bd12:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd1a:	2200      	movs	r2, #0
    bd1c:	701a      	strb	r2, [r3, #0]
    bd1e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	461a      	mov	r2, r3
    bd2a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    bd2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd32:	7819      	ldrb	r1, [r3, #0]
    bd34:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bd38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd3c:	5499      	strb	r1, [r3, r2]
    bd3e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bd42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd46:	781a      	ldrb	r2, [r3, #0]
    bd48:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    bd4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd50:	781b      	ldrb	r3, [r3, #0]
    bd52:	4413      	add	r3, r2
    bd54:	b2da      	uxtb	r2, r3
    bd56:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bd5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd5e:	701a      	strb	r2, [r3, #0]
    bd60:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bd64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd68:	781a      	ldrb	r2, [r3, #0]
    bd6a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bd6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	4413      	add	r3, r2
    bd76:	b2da      	uxtb	r2, r3
    bd78:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bd7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd80:	701a      	strb	r2, [r3, #0]
    bd82:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd8a:	781b      	ldrb	r3, [r3, #0]
    bd8c:	3301      	adds	r3, #1
    bd8e:	b2da      	uxtb	r2, r3
    bd90:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bd98:	701a      	strb	r2, [r3, #0]
    bd9a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bd9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bda2:	781b      	ldrb	r3, [r3, #0]
    bda4:	2bff      	cmp	r3, #255	; 0xff
    bda6:	d105      	bne.n	bdb4 <send_debug+0x308>
    bda8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bdac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdb0:	2200      	movs	r2, #0
    bdb2:	701a      	strb	r2, [r3, #0]
    bdb4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bdb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdbc:	781b      	ldrb	r3, [r3, #0]
    bdbe:	461a      	mov	r2, r3
    bdc0:	f642 733f 	movw	r3, #12095	; 0x2f3f
    bdc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdc8:	7819      	ldrb	r1, [r3, #0]
    bdca:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bdce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdd2:	5499      	strb	r1, [r3, r2]
    bdd4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bdd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bddc:	781a      	ldrb	r2, [r3, #0]
    bdde:	f642 733f 	movw	r3, #12095	; 0x2f3f
    bde2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	4413      	add	r3, r2
    bdea:	b2da      	uxtb	r2, r3
    bdec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bdf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdf4:	701a      	strb	r2, [r3, #0]
    bdf6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bdfa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bdfe:	781a      	ldrb	r2, [r3, #0]
    be00:	f642 53a5 	movw	r3, #11685	; 0x2da5
    be04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	4413      	add	r3, r2
    be0c:	b2da      	uxtb	r2, r3
    be0e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    be12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be16:	701a      	strb	r2, [r3, #0]
    be18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    be1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	3301      	adds	r3, #1
    be24:	b2da      	uxtb	r2, r3
    be26:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    be2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be2e:	701a      	strb	r2, [r3, #0]
    be30:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    be34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be38:	781b      	ldrb	r3, [r3, #0]
    be3a:	2bff      	cmp	r3, #255	; 0xff
    be3c:	d105      	bne.n	be4a <send_debug+0x39e>
    be3e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    be42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be46:	2200      	movs	r2, #0
    be48:	701a      	strb	r2, [r3, #0]
    be4a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    be4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be52:	781b      	ldrb	r3, [r3, #0]
    be54:	461a      	mov	r2, r3
    be56:	f642 438c 	movw	r3, #11404	; 0x2c8c
    be5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be5e:	7819      	ldrb	r1, [r3, #0]
    be60:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    be64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be68:	5499      	strb	r1, [r3, r2]
    be6a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    be6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be72:	781a      	ldrb	r2, [r3, #0]
    be74:	f642 438c 	movw	r3, #11404	; 0x2c8c
    be78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be7c:	781b      	ldrb	r3, [r3, #0]
    be7e:	4413      	add	r3, r2
    be80:	b2da      	uxtb	r2, r3
    be82:	f642 53a5 	movw	r3, #11685	; 0x2da5
    be86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be8a:	701a      	strb	r2, [r3, #0]
    be8c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    be90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be94:	781a      	ldrb	r2, [r3, #0]
    be96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    be9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	4413      	add	r3, r2
    bea2:	b2da      	uxtb	r2, r3
    bea4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bea8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    beac:	701a      	strb	r2, [r3, #0]
    beae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    beb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	3301      	adds	r3, #1
    beba:	b2da      	uxtb	r2, r3
    bebc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bec0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bec4:	701a      	strb	r2, [r3, #0]
    bec6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    beca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bece:	781b      	ldrb	r3, [r3, #0]
    bed0:	2bff      	cmp	r3, #255	; 0xff
    bed2:	d105      	bne.n	bee0 <send_debug+0x434>
    bed4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bed8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bedc:	2200      	movs	r2, #0
    bede:	701a      	strb	r2, [r3, #0]
    bee0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bee4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	461a      	mov	r2, r3
    beec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    bef0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bef4:	7819      	ldrb	r1, [r3, #0]
    bef6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    befa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    befe:	5499      	strb	r1, [r3, r2]
    bf00:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	3301      	adds	r3, #1
    bf0c:	b2da      	uxtb	r2, r3
    bf0e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf16:	701a      	strb	r2, [r3, #0]
    bf18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf20:	781b      	ldrb	r3, [r3, #0]
    bf22:	2bff      	cmp	r3, #255	; 0xff
    bf24:	d105      	bne.n	bf32 <send_debug+0x486>
    bf26:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf2e:	2200      	movs	r2, #0
    bf30:	701a      	strb	r2, [r3, #0]
    bf32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf3a:	781b      	ldrb	r3, [r3, #0]
    bf3c:	461a      	mov	r2, r3
    bf3e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    bf42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf46:	7819      	ldrb	r1, [r3, #0]
    bf48:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bf4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf50:	5499      	strb	r1, [r3, r2]
    bf52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	3301      	adds	r3, #1
    bf5e:	b2da      	uxtb	r2, r3
    bf60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf68:	701a      	strb	r2, [r3, #0]
    bf6a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf72:	781b      	ldrb	r3, [r3, #0]
    bf74:	2bff      	cmp	r3, #255	; 0xff
    bf76:	d105      	bne.n	bf84 <send_debug+0x4d8>
    bf78:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    bf7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bf80:	2200      	movs	r2, #0
    bf82:	701a      	strb	r2, [r3, #0]
    bf84:	f242 0339 	movw	r3, #8249	; 0x2039
    bf88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf8c:	781b      	ldrb	r3, [r3, #0]
    bf8e:	b2db      	uxtb	r3, r3
    bf90:	f003 0310 	and.w	r3, r3, #16
    bf94:	2b00      	cmp	r3, #0
    bf96:	d15a      	bne.n	c04e <send_debug+0x5a2>
    bf98:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bf9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	b2db      	uxtb	r3, r3
    bfa4:	461a      	mov	r2, r3
    bfa6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    bfaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfae:	5c9a      	ldrb	r2, [r3, r2]
    bfb0:	f642 53a3 	movw	r3, #11683	; 0x2da3
    bfb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfb8:	701a      	strb	r2, [r3, #0]
    bfba:	f642 53a4 	movw	r3, #11684	; 0x2da4
    bfbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfc2:	2200      	movs	r2, #0
    bfc4:	701a      	strb	r2, [r3, #0]
    bfc6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bfca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfce:	781b      	ldrb	r3, [r3, #0]
    bfd0:	b2db      	uxtb	r3, r3
    bfd2:	3301      	adds	r3, #1
    bfd4:	b2da      	uxtb	r2, r3
    bfd6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bfda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfde:	701a      	strb	r2, [r3, #0]
    bfe0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bfe4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfe8:	781b      	ldrb	r3, [r3, #0]
    bfea:	b2db      	uxtb	r3, r3
    bfec:	2bff      	cmp	r3, #255	; 0xff
    bfee:	d105      	bne.n	bffc <send_debug+0x550>
    bff0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    bff4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bff8:	2200      	movs	r2, #0
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	f242 0338 	movw	r3, #8248	; 0x2038
    c000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c004:	f242 0238 	movw	r2, #8248	; 0x2038
    c008:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c00c:	7812      	ldrb	r2, [r2, #0]
    c00e:	b2d2      	uxtb	r2, r2
    c010:	f042 0201 	orr.w	r2, r2, #1
    c014:	b2d2      	uxtb	r2, r2
    c016:	701a      	strb	r2, [r3, #0]
    c018:	f242 0339 	movw	r3, #8249	; 0x2039
    c01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c020:	f242 0239 	movw	r2, #8249	; 0x2039
    c024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c028:	7812      	ldrb	r2, [r2, #0]
    c02a:	b2d2      	uxtb	r2, r2
    c02c:	f042 0210 	orr.w	r2, r2, #16
    c030:	b2d2      	uxtb	r2, r2
    c032:	701a      	strb	r2, [r3, #0]
    c034:	e00b      	b.n	c04e <send_debug+0x5a2>
    c036:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    c03a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	3301      	adds	r3, #1
    c042:	b2da      	uxtb	r2, r3
    c044:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    c048:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c04c:	701a      	strb	r2, [r3, #0]
}
    c04e:	46bd      	mov	sp, r7
    c050:	f85d 7b04 	ldr.w	r7, [sp], #4
    c054:	4770      	bx	lr
    c056:	bf00      	nop

0000c058 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c058:	b480      	push	{r7}
    c05a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c05c:	f642 4399 	movw	r3, #11417	; 0x2c99
    c060:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c064:	781a      	ldrb	r2, [r3, #0]
    c066:	f248 531f 	movw	r3, #34079	; 0x851f
    c06a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c06e:	fba3 1302 	umull	r1, r3, r3, r2
    c072:	095b      	lsrs	r3, r3, #5
    c074:	2164      	movs	r1, #100	; 0x64
    c076:	fb01 f303 	mul.w	r3, r1, r3
    c07a:	1ad3      	subs	r3, r2, r3
    c07c:	b2db      	uxtb	r3, r3
    c07e:	2b31      	cmp	r3, #49	; 0x31
    c080:	f040 8395 	bne.w	c7ae <send_nav_ref+0x756>
    c084:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c088:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c08c:	781a      	ldrb	r2, [r3, #0]
    c08e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c092:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c096:	781b      	ldrb	r3, [r3, #0]
    c098:	b2db      	uxtb	r3, r3
    c09a:	429a      	cmp	r2, r3
    c09c:	d313      	bcc.n	c0c6 <send_nav_ref+0x6e>
    c09e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c0a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c0a6:	781b      	ldrb	r3, [r3, #0]
    c0a8:	b2db      	uxtb	r3, r3
    c0aa:	461a      	mov	r2, r3
    c0ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c0b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	1ad3      	subs	r3, r2, r3
    c0b8:	33ff      	adds	r3, #255	; 0xff
    c0ba:	2b0c      	cmp	r3, #12
    c0bc:	bfd4      	ite	le
    c0be:	2300      	movle	r3, #0
    c0c0:	2301      	movgt	r3, #1
    c0c2:	b2db      	uxtb	r3, r3
    c0c4:	e011      	b.n	c0ea <send_nav_ref+0x92>
    c0c6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c0ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c0ce:	781b      	ldrb	r3, [r3, #0]
    c0d0:	b2db      	uxtb	r3, r3
    c0d2:	461a      	mov	r2, r3
    c0d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c0d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c0dc:	781b      	ldrb	r3, [r3, #0]
    c0de:	1ad3      	subs	r3, r2, r3
    c0e0:	2b0c      	cmp	r3, #12
    c0e2:	bfd4      	ite	le
    c0e4:	2300      	movle	r3, #0
    c0e6:	2301      	movgt	r3, #1
    c0e8:	b2db      	uxtb	r3, r3
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	f000 8353 	beq.w	c796 <send_nav_ref+0x73e>
    c0f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c0f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	461a      	mov	r2, r3
    c0fc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c100:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c104:	2105      	movs	r1, #5
    c106:	5499      	strb	r1, [r3, r2]
    c108:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c10c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c110:	781b      	ldrb	r3, [r3, #0]
    c112:	3301      	adds	r3, #1
    c114:	b2da      	uxtb	r2, r3
    c116:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c11a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c11e:	701a      	strb	r2, [r3, #0]
    c120:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c124:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c128:	781b      	ldrb	r3, [r3, #0]
    c12a:	2bff      	cmp	r3, #255	; 0xff
    c12c:	d105      	bne.n	c13a <send_nav_ref+0xe2>
    c12e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c132:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c136:	2200      	movs	r2, #0
    c138:	701a      	strb	r2, [r3, #0]
    c13a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c13e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c142:	781b      	ldrb	r3, [r3, #0]
    c144:	461a      	mov	r2, r3
    c146:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c14a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c14e:	2109      	movs	r1, #9
    c150:	5499      	strb	r1, [r3, r2]
    c152:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c156:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c15a:	781b      	ldrb	r3, [r3, #0]
    c15c:	3301      	adds	r3, #1
    c15e:	b2da      	uxtb	r2, r3
    c160:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c164:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c168:	701a      	strb	r2, [r3, #0]
    c16a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c16e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c172:	781b      	ldrb	r3, [r3, #0]
    c174:	2bff      	cmp	r3, #255	; 0xff
    c176:	d105      	bne.n	c184 <send_nav_ref+0x12c>
    c178:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c17c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c180:	2200      	movs	r2, #0
    c182:	701a      	strb	r2, [r3, #0]
    c184:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c188:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c18c:	2209      	movs	r2, #9
    c18e:	701a      	strb	r2, [r3, #0]
    c190:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c194:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c198:	2209      	movs	r2, #9
    c19a:	701a      	strb	r2, [r3, #0]
    c19c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c1a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1a4:	781b      	ldrb	r3, [r3, #0]
    c1a6:	461a      	mov	r2, r3
    c1a8:	f248 33cc 	movw	r3, #33740	; 0x83cc
    c1ac:	f2c0 0301 	movt	r3, #1
    c1b0:	7819      	ldrb	r1, [r3, #0]
    c1b2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c1b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1ba:	5499      	strb	r1, [r3, r2]
    c1bc:	f248 33cc 	movw	r3, #33740	; 0x83cc
    c1c0:	f2c0 0301 	movt	r3, #1
    c1c4:	781a      	ldrb	r2, [r3, #0]
    c1c6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c1ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1ce:	781b      	ldrb	r3, [r3, #0]
    c1d0:	4413      	add	r3, r2
    c1d2:	b2da      	uxtb	r2, r3
    c1d4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c1d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1dc:	701a      	strb	r2, [r3, #0]
    c1de:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c1e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1e6:	781a      	ldrb	r2, [r3, #0]
    c1e8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c1ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	4413      	add	r3, r2
    c1f4:	b2da      	uxtb	r2, r3
    c1f6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c1fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c1fe:	701a      	strb	r2, [r3, #0]
    c200:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c204:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c208:	781b      	ldrb	r3, [r3, #0]
    c20a:	3301      	adds	r3, #1
    c20c:	b2da      	uxtb	r2, r3
    c20e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c212:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c216:	701a      	strb	r2, [r3, #0]
    c218:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c21c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c220:	781b      	ldrb	r3, [r3, #0]
    c222:	2bff      	cmp	r3, #255	; 0xff
    c224:	d105      	bne.n	c232 <send_nav_ref+0x1da>
    c226:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c22a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c22e:	2200      	movs	r2, #0
    c230:	701a      	strb	r2, [r3, #0]
    c232:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c236:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c23a:	781b      	ldrb	r3, [r3, #0]
    c23c:	461a      	mov	r2, r3
    c23e:	f248 33cc 	movw	r3, #33740	; 0x83cc
    c242:	f2c0 0301 	movt	r3, #1
    c246:	7859      	ldrb	r1, [r3, #1]
    c248:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c24c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c250:	5499      	strb	r1, [r3, r2]
    c252:	4bd2      	ldr	r3, [pc, #840]	; (c59c <send_nav_ref+0x544>)
    c254:	781a      	ldrb	r2, [r3, #0]
    c256:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c25a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c25e:	781b      	ldrb	r3, [r3, #0]
    c260:	4413      	add	r3, r2
    c262:	b2da      	uxtb	r2, r3
    c264:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c268:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c26c:	701a      	strb	r2, [r3, #0]
    c26e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c272:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c276:	781a      	ldrb	r2, [r3, #0]
    c278:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c27c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c280:	781b      	ldrb	r3, [r3, #0]
    c282:	4413      	add	r3, r2
    c284:	b2da      	uxtb	r2, r3
    c286:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c28a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c28e:	701a      	strb	r2, [r3, #0]
    c290:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c294:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	3301      	adds	r3, #1
    c29c:	b2da      	uxtb	r2, r3
    c29e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c2a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2a6:	701a      	strb	r2, [r3, #0]
    c2a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c2ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2b0:	781b      	ldrb	r3, [r3, #0]
    c2b2:	2bff      	cmp	r3, #255	; 0xff
    c2b4:	d105      	bne.n	c2c2 <send_nav_ref+0x26a>
    c2b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c2ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2be:	2200      	movs	r2, #0
    c2c0:	701a      	strb	r2, [r3, #0]
    c2c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c2c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2ca:	781b      	ldrb	r3, [r3, #0]
    c2cc:	461a      	mov	r2, r3
    c2ce:	f248 33cc 	movw	r3, #33740	; 0x83cc
    c2d2:	f2c0 0301 	movt	r3, #1
    c2d6:	7899      	ldrb	r1, [r3, #2]
    c2d8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c2dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2e0:	5499      	strb	r1, [r3, r2]
    c2e2:	4baf      	ldr	r3, [pc, #700]	; (c5a0 <send_nav_ref+0x548>)
    c2e4:	781a      	ldrb	r2, [r3, #0]
    c2e6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c2ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2ee:	781b      	ldrb	r3, [r3, #0]
    c2f0:	4413      	add	r3, r2
    c2f2:	b2da      	uxtb	r2, r3
    c2f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c2f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2fc:	701a      	strb	r2, [r3, #0]
    c2fe:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c302:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c306:	781a      	ldrb	r2, [r3, #0]
    c308:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c30c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	4413      	add	r3, r2
    c314:	b2da      	uxtb	r2, r3
    c316:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c31a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c31e:	701a      	strb	r2, [r3, #0]
    c320:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c324:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	3301      	adds	r3, #1
    c32c:	b2da      	uxtb	r2, r3
    c32e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c332:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c336:	701a      	strb	r2, [r3, #0]
    c338:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c33c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c340:	781b      	ldrb	r3, [r3, #0]
    c342:	2bff      	cmp	r3, #255	; 0xff
    c344:	d105      	bne.n	c352 <send_nav_ref+0x2fa>
    c346:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c34a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c34e:	2200      	movs	r2, #0
    c350:	701a      	strb	r2, [r3, #0]
    c352:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c356:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c35a:	781b      	ldrb	r3, [r3, #0]
    c35c:	461a      	mov	r2, r3
    c35e:	f248 33cc 	movw	r3, #33740	; 0x83cc
    c362:	f2c0 0301 	movt	r3, #1
    c366:	78d9      	ldrb	r1, [r3, #3]
    c368:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c36c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c370:	5499      	strb	r1, [r3, r2]
    c372:	4b8c      	ldr	r3, [pc, #560]	; (c5a4 <send_nav_ref+0x54c>)
    c374:	781a      	ldrb	r2, [r3, #0]
    c376:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c37a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	4413      	add	r3, r2
    c382:	b2da      	uxtb	r2, r3
    c384:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c388:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c38c:	701a      	strb	r2, [r3, #0]
    c38e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c392:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c396:	781a      	ldrb	r2, [r3, #0]
    c398:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c39c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3a0:	781b      	ldrb	r3, [r3, #0]
    c3a2:	4413      	add	r3, r2
    c3a4:	b2da      	uxtb	r2, r3
    c3a6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c3aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3ae:	701a      	strb	r2, [r3, #0]
    c3b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c3b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	3301      	adds	r3, #1
    c3bc:	b2da      	uxtb	r2, r3
    c3be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c3c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3c6:	701a      	strb	r2, [r3, #0]
    c3c8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c3cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3d0:	781b      	ldrb	r3, [r3, #0]
    c3d2:	2bff      	cmp	r3, #255	; 0xff
    c3d4:	d105      	bne.n	c3e2 <send_nav_ref+0x38a>
    c3d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c3da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3de:	2200      	movs	r2, #0
    c3e0:	701a      	strb	r2, [r3, #0]
    c3e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c3e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	461a      	mov	r2, r3
    c3ee:	f248 33d0 	movw	r3, #33744	; 0x83d0
    c3f2:	f2c0 0301 	movt	r3, #1
    c3f6:	7819      	ldrb	r1, [r3, #0]
    c3f8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c3fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c400:	5499      	strb	r1, [r3, r2]
    c402:	f248 33d0 	movw	r3, #33744	; 0x83d0
    c406:	f2c0 0301 	movt	r3, #1
    c40a:	781a      	ldrb	r2, [r3, #0]
    c40c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c410:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	4413      	add	r3, r2
    c418:	b2da      	uxtb	r2, r3
    c41a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c41e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c422:	701a      	strb	r2, [r3, #0]
    c424:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c428:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c42c:	781a      	ldrb	r2, [r3, #0]
    c42e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c432:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	4413      	add	r3, r2
    c43a:	b2da      	uxtb	r2, r3
    c43c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c440:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c444:	701a      	strb	r2, [r3, #0]
    c446:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c44a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c44e:	781b      	ldrb	r3, [r3, #0]
    c450:	3301      	adds	r3, #1
    c452:	b2da      	uxtb	r2, r3
    c454:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c458:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c45c:	701a      	strb	r2, [r3, #0]
    c45e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c462:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c466:	781b      	ldrb	r3, [r3, #0]
    c468:	2bff      	cmp	r3, #255	; 0xff
    c46a:	d105      	bne.n	c478 <send_nav_ref+0x420>
    c46c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c470:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c474:	2200      	movs	r2, #0
    c476:	701a      	strb	r2, [r3, #0]
    c478:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c47c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c480:	781b      	ldrb	r3, [r3, #0]
    c482:	461a      	mov	r2, r3
    c484:	f248 33d0 	movw	r3, #33744	; 0x83d0
    c488:	f2c0 0301 	movt	r3, #1
    c48c:	7859      	ldrb	r1, [r3, #1]
    c48e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c492:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c496:	5499      	strb	r1, [r3, r2]
    c498:	4b43      	ldr	r3, [pc, #268]	; (c5a8 <send_nav_ref+0x550>)
    c49a:	781a      	ldrb	r2, [r3, #0]
    c49c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c4a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4a4:	781b      	ldrb	r3, [r3, #0]
    c4a6:	4413      	add	r3, r2
    c4a8:	b2da      	uxtb	r2, r3
    c4aa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c4ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4b2:	701a      	strb	r2, [r3, #0]
    c4b4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c4b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4bc:	781a      	ldrb	r2, [r3, #0]
    c4be:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c4c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4c6:	781b      	ldrb	r3, [r3, #0]
    c4c8:	4413      	add	r3, r2
    c4ca:	b2da      	uxtb	r2, r3
    c4cc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c4d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4d4:	701a      	strb	r2, [r3, #0]
    c4d6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c4da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4de:	781b      	ldrb	r3, [r3, #0]
    c4e0:	3301      	adds	r3, #1
    c4e2:	b2da      	uxtb	r2, r3
    c4e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c4e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4ec:	701a      	strb	r2, [r3, #0]
    c4ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c4f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4f6:	781b      	ldrb	r3, [r3, #0]
    c4f8:	2bff      	cmp	r3, #255	; 0xff
    c4fa:	d105      	bne.n	c508 <send_nav_ref+0x4b0>
    c4fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c500:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c504:	2200      	movs	r2, #0
    c506:	701a      	strb	r2, [r3, #0]
    c508:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c50c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	461a      	mov	r2, r3
    c514:	f248 33d0 	movw	r3, #33744	; 0x83d0
    c518:	f2c0 0301 	movt	r3, #1
    c51c:	7899      	ldrb	r1, [r3, #2]
    c51e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c522:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c526:	5499      	strb	r1, [r3, r2]
    c528:	4b20      	ldr	r3, [pc, #128]	; (c5ac <send_nav_ref+0x554>)
    c52a:	781a      	ldrb	r2, [r3, #0]
    c52c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c530:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c534:	781b      	ldrb	r3, [r3, #0]
    c536:	4413      	add	r3, r2
    c538:	b2da      	uxtb	r2, r3
    c53a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c53e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c542:	701a      	strb	r2, [r3, #0]
    c544:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c548:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c54c:	781a      	ldrb	r2, [r3, #0]
    c54e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c552:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	4413      	add	r3, r2
    c55a:	b2da      	uxtb	r2, r3
    c55c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c560:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c564:	701a      	strb	r2, [r3, #0]
    c566:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c56a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	3301      	adds	r3, #1
    c572:	b2da      	uxtb	r2, r3
    c574:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c578:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c57c:	701a      	strb	r2, [r3, #0]
    c57e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c582:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c586:	781b      	ldrb	r3, [r3, #0]
    c588:	2bff      	cmp	r3, #255	; 0xff
    c58a:	d111      	bne.n	c5b0 <send_nav_ref+0x558>
    c58c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c590:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c594:	2200      	movs	r2, #0
    c596:	701a      	strb	r2, [r3, #0]
    c598:	e00a      	b.n	c5b0 <send_nav_ref+0x558>
    c59a:	bf00      	nop
    c59c:	000183cd 	.word	0x000183cd
    c5a0:	000183ce 	.word	0x000183ce
    c5a4:	000183cf 	.word	0x000183cf
    c5a8:	000183d1 	.word	0x000183d1
    c5ac:	000183d2 	.word	0x000183d2
    c5b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c5b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	461a      	mov	r2, r3
    c5bc:	f248 33d0 	movw	r3, #33744	; 0x83d0
    c5c0:	f2c0 0301 	movt	r3, #1
    c5c4:	78d9      	ldrb	r1, [r3, #3]
    c5c6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c5ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5ce:	5499      	strb	r1, [r3, r2]
    c5d0:	4b79      	ldr	r3, [pc, #484]	; (c7b8 <send_nav_ref+0x760>)
    c5d2:	781a      	ldrb	r2, [r3, #0]
    c5d4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c5d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5dc:	781b      	ldrb	r3, [r3, #0]
    c5de:	4413      	add	r3, r2
    c5e0:	b2da      	uxtb	r2, r3
    c5e2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c5e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5ea:	701a      	strb	r2, [r3, #0]
    c5ec:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c5f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5f4:	781a      	ldrb	r2, [r3, #0]
    c5f6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c5fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5fe:	781b      	ldrb	r3, [r3, #0]
    c600:	4413      	add	r3, r2
    c602:	b2da      	uxtb	r2, r3
    c604:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c608:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c60c:	701a      	strb	r2, [r3, #0]
    c60e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c612:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	3301      	adds	r3, #1
    c61a:	b2da      	uxtb	r2, r3
    c61c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c620:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c624:	701a      	strb	r2, [r3, #0]
    c626:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c62a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	2bff      	cmp	r3, #255	; 0xff
    c632:	d105      	bne.n	c640 <send_nav_ref+0x5e8>
    c634:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c638:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c63c:	2200      	movs	r2, #0
    c63e:	701a      	strb	r2, [r3, #0]
    c640:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c644:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c648:	781b      	ldrb	r3, [r3, #0]
    c64a:	461a      	mov	r2, r3
    c64c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    c650:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c654:	7819      	ldrb	r1, [r3, #0]
    c656:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c65a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c65e:	5499      	strb	r1, [r3, r2]
    c660:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c664:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	3301      	adds	r3, #1
    c66c:	b2da      	uxtb	r2, r3
    c66e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c672:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c676:	701a      	strb	r2, [r3, #0]
    c678:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c67c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	2bff      	cmp	r3, #255	; 0xff
    c684:	d105      	bne.n	c692 <send_nav_ref+0x63a>
    c686:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c68a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c68e:	2200      	movs	r2, #0
    c690:	701a      	strb	r2, [r3, #0]
    c692:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c696:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c69a:	781b      	ldrb	r3, [r3, #0]
    c69c:	461a      	mov	r2, r3
    c69e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    c6a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6a6:	7819      	ldrb	r1, [r3, #0]
    c6a8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c6ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6b0:	5499      	strb	r1, [r3, r2]
    c6b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c6b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6ba:	781b      	ldrb	r3, [r3, #0]
    c6bc:	3301      	adds	r3, #1
    c6be:	b2da      	uxtb	r2, r3
    c6c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c6c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6c8:	701a      	strb	r2, [r3, #0]
    c6ca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c6ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6d2:	781b      	ldrb	r3, [r3, #0]
    c6d4:	2bff      	cmp	r3, #255	; 0xff
    c6d6:	d105      	bne.n	c6e4 <send_nav_ref+0x68c>
    c6d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c6dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6e0:	2200      	movs	r2, #0
    c6e2:	701a      	strb	r2, [r3, #0]
    c6e4:	f242 0339 	movw	r3, #8249	; 0x2039
    c6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ec:	781b      	ldrb	r3, [r3, #0]
    c6ee:	b2db      	uxtb	r3, r3
    c6f0:	f003 0310 	and.w	r3, r3, #16
    c6f4:	2b00      	cmp	r3, #0
    c6f6:	d15a      	bne.n	c7ae <send_nav_ref+0x756>
    c6f8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c6fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c700:	781b      	ldrb	r3, [r3, #0]
    c702:	b2db      	uxtb	r3, r3
    c704:	461a      	mov	r2, r3
    c706:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c70a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c70e:	5c9a      	ldrb	r2, [r3, r2]
    c710:	f642 53a3 	movw	r3, #11683	; 0x2da3
    c714:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c718:	701a      	strb	r2, [r3, #0]
    c71a:	f642 53a4 	movw	r3, #11684	; 0x2da4
    c71e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c722:	2200      	movs	r2, #0
    c724:	701a      	strb	r2, [r3, #0]
    c726:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c72a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	b2db      	uxtb	r3, r3
    c732:	3301      	adds	r3, #1
    c734:	b2da      	uxtb	r2, r3
    c736:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c73a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c73e:	701a      	strb	r2, [r3, #0]
    c740:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c744:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c748:	781b      	ldrb	r3, [r3, #0]
    c74a:	b2db      	uxtb	r3, r3
    c74c:	2bff      	cmp	r3, #255	; 0xff
    c74e:	d105      	bne.n	c75c <send_nav_ref+0x704>
    c750:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c754:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c758:	2200      	movs	r2, #0
    c75a:	701a      	strb	r2, [r3, #0]
    c75c:	f242 0338 	movw	r3, #8248	; 0x2038
    c760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c764:	f242 0238 	movw	r2, #8248	; 0x2038
    c768:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c76c:	7812      	ldrb	r2, [r2, #0]
    c76e:	b2d2      	uxtb	r2, r2
    c770:	f042 0201 	orr.w	r2, r2, #1
    c774:	b2d2      	uxtb	r2, r2
    c776:	701a      	strb	r2, [r3, #0]
    c778:	f242 0339 	movw	r3, #8249	; 0x2039
    c77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c780:	f242 0239 	movw	r2, #8249	; 0x2039
    c784:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c788:	7812      	ldrb	r2, [r2, #0]
    c78a:	b2d2      	uxtb	r2, r2
    c78c:	f042 0210 	orr.w	r2, r2, #16
    c790:	b2d2      	uxtb	r2, r2
    c792:	701a      	strb	r2, [r3, #0]
    c794:	e00b      	b.n	c7ae <send_nav_ref+0x756>
    c796:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    c79a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c79e:	781b      	ldrb	r3, [r3, #0]
    c7a0:	3301      	adds	r3, #1
    c7a2:	b2da      	uxtb	r2, r3
    c7a4:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    c7a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c7ac:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    c7ae:	46bd      	mov	sp, r7
    c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop
    c7b8:	000183d3 	.word	0x000183d3

0000c7bc <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    c7bc:	b480      	push	{r7}
    c7be:	b083      	sub	sp, #12
    c7c0:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    c7c2:	f642 53a8 	movw	r3, #11688	; 0x2da8
    c7c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c7ca:	8a1b      	ldrh	r3, [r3, #16]
    c7cc:	b21b      	sxth	r3, r3
    c7ce:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    c7d2:	db0d      	blt.n	c7f0 <inflight_calib_mode_update+0x34>
    c7d4:	f642 53a8 	movw	r3, #11688	; 0x2da8
    c7d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c7dc:	8a1b      	ldrh	r3, [r3, #16]
    c7de:	b21a      	sxth	r2, r3
    c7e0:	f640 437f 	movw	r3, #3199	; 0xc7f
    c7e4:	429a      	cmp	r2, r3
    c7e6:	bfd4      	ite	le
    c7e8:	2300      	movle	r3, #0
    c7ea:	2301      	movgt	r3, #1
    c7ec:	b2db      	uxtb	r3, r3
    c7ee:	e000      	b.n	c7f2 <inflight_calib_mode_update+0x36>
    c7f0:	2302      	movs	r3, #2
    c7f2:	71fb      	strb	r3, [r7, #7]
    c7f4:	f243 23b4 	movw	r3, #12980	; 0x32b4
    c7f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	79fa      	ldrb	r2, [r7, #7]
    c800:	429a      	cmp	r2, r3
    c802:	d007      	beq.n	c814 <inflight_calib_mode_update+0x58>
    c804:	f243 23b4 	movw	r3, #12980	; 0x32b4
    c808:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c80c:	79fa      	ldrb	r2, [r7, #7]
    c80e:	701a      	strb	r2, [r3, #0]
    c810:	2301      	movs	r3, #1
    c812:	e000      	b.n	c816 <inflight_calib_mode_update+0x5a>
    c814:	2300      	movs	r3, #0
}
    c816:	4618      	mov	r0, r3
    c818:	370c      	adds	r7, #12
    c81a:	46bd      	mov	sp, r7
    c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c820:	4770      	bx	lr
    c822:	bf00      	nop

0000c824 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    c824:	b580      	push	{r7, lr}
    c826:	b082      	sub	sp, #8
    c828:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    c82a:	f642 53d6 	movw	r3, #11734	; 0x2dd6
    c82e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c832:	2201      	movs	r2, #1
    c834:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    c836:	f642 53d6 	movw	r3, #11734	; 0x2dd6
    c83a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	b2db      	uxtb	r3, r3
    c842:	2b00      	cmp	r3, #0
    c844:	f000 83b8 	beq.w	cfb8 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    c848:	2300      	movs	r3, #0
    c84a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    c84c:	f7fa fa9c 	bl	6d88 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    c850:	4b3a      	ldr	r3, [pc, #232]	; (c93c <radio_control_task+0x118>)
    c852:	781b      	ldrb	r3, [r3, #0]
    c854:	b2db      	uxtb	r3, r3
    c856:	f003 0302 	and.w	r3, r3, #2
    c85a:	2b00      	cmp	r3, #0
    c85c:	d00d      	beq.n	c87a <radio_control_task+0x56>
    c85e:	f642 4384 	movw	r3, #11396	; 0x2c84
    c862:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	2b01      	cmp	r3, #1
    c86a:	d00d      	beq.n	c888 <radio_control_task+0x64>
    c86c:	f642 4384 	movw	r3, #11396	; 0x2c84
    c870:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c874:	781b      	ldrb	r3, [r3, #0]
    c876:	2b00      	cmp	r3, #0
    c878:	d006      	beq.n	c888 <radio_control_task+0x64>
    c87a:	f243 0334 	movw	r3, #12340	; 0x3034
    c87e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c882:	781b      	ldrb	r3, [r3, #0]
    c884:	2b00      	cmp	r3, #0
    c886:	d007      	beq.n	c898 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    c888:	f642 4384 	movw	r3, #11396	; 0x2c84
    c88c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c890:	2203      	movs	r2, #3
    c892:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    c894:	2301      	movs	r3, #1
    c896:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    c898:	f7fa f950 	bl	6b3c <pprz_mode_update>
    c89c:	4603      	mov	r3, r0
    c89e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    c8a0:	79fa      	ldrb	r2, [r7, #7]
    c8a2:	79bb      	ldrb	r3, [r7, #6]
    c8a4:	4313      	orrs	r3, r2
    c8a6:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    c8a8:	f7fa f994 	bl	6bd4 <ir_estim_mode_update>
    c8ac:	4603      	mov	r3, r0
    c8ae:	461a      	mov	r2, r3
    c8b0:	79fb      	ldrb	r3, [r7, #7]
    c8b2:	4313      	orrs	r3, r2
    c8b4:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    c8b6:	f7ff ff81 	bl	c7bc <inflight_calib_mode_update>
    c8ba:	4603      	mov	r3, r0
    c8bc:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    c8be:	797b      	ldrb	r3, [r7, #5]
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	d102      	bne.n	c8ca <radio_control_task+0xa6>
    c8c4:	79bb      	ldrb	r3, [r7, #6]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d001      	beq.n	c8ce <radio_control_task+0xaa>
    c8ca:	2301      	movs	r3, #1
    c8cc:	e000      	b.n	c8d0 <radio_control_task+0xac>
    c8ce:	2300      	movs	r3, #0
    c8d0:	b2db      	uxtb	r3, r3
    c8d2:	4618      	mov	r0, r3
    c8d4:	f008 fba0 	bl	15018 <inflight_calib>
      mode_changed |= calib_mode_changed;
    c8d8:	79fa      	ldrb	r2, [r7, #7]
    c8da:	797b      	ldrb	r3, [r7, #5]
    c8dc:	4313      	orrs	r3, r2
    c8de:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    c8e0:	f7fa f9a0 	bl	6c24 <mcu1_status_update>
    c8e4:	4603      	mov	r3, r0
    c8e6:	461a      	mov	r2, r3
    c8e8:	79fb      	ldrb	r3, [r7, #7]
    c8ea:	4313      	orrs	r3, r2
    c8ec:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    c8ee:	2301      	movs	r3, #1
    c8f0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    c8f2:	79fb      	ldrb	r3, [r7, #7]
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	f000 82bc 	beq.w	ce72 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    c8fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c8fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c902:	781a      	ldrb	r2, [r3, #0]
    c904:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c908:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c90c:	781b      	ldrb	r3, [r3, #0]
    c90e:	b2db      	uxtb	r3, r3
    c910:	429a      	cmp	r2, r3
    c912:	d315      	bcc.n	c940 <radio_control_task+0x11c>
    c914:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c918:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c91c:	781b      	ldrb	r3, [r3, #0]
    c91e:	b2db      	uxtb	r3, r3
    c920:	461a      	mov	r2, r3
    c922:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c926:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c92a:	781b      	ldrb	r3, [r3, #0]
    c92c:	1ad3      	subs	r3, r2, r3
    c92e:	33ff      	adds	r3, #255	; 0xff
    c930:	2b09      	cmp	r3, #9
    c932:	bfd4      	ite	le
    c934:	2300      	movle	r3, #0
    c936:	2301      	movgt	r3, #1
    c938:	b2db      	uxtb	r3, r3
    c93a:	e013      	b.n	c964 <radio_control_task+0x140>
    c93c:	20012dbb 	.word	0x20012dbb
    c940:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    c944:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	b2db      	uxtb	r3, r3
    c94c:	461a      	mov	r2, r3
    c94e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c952:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	1ad3      	subs	r3, r2, r3
    c95a:	2b09      	cmp	r3, #9
    c95c:	bfd4      	ite	le
    c95e:	2300      	movle	r3, #0
    c960:	2301      	movgt	r3, #1
    c962:	b2db      	uxtb	r3, r3
    c964:	2b00      	cmp	r3, #0
    c966:	f000 8278 	beq.w	ce5a <radio_control_task+0x636>
    c96a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c96e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c972:	781b      	ldrb	r3, [r3, #0]
    c974:	461a      	mov	r2, r3
    c976:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c97a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c97e:	2105      	movs	r1, #5
    c980:	5499      	strb	r1, [r3, r2]
    c982:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c986:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c98a:	781b      	ldrb	r3, [r3, #0]
    c98c:	3301      	adds	r3, #1
    c98e:	b2da      	uxtb	r2, r3
    c990:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c994:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c998:	701a      	strb	r2, [r3, #0]
    c99a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c99e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9a2:	781b      	ldrb	r3, [r3, #0]
    c9a4:	2bff      	cmp	r3, #255	; 0xff
    c9a6:	d105      	bne.n	c9b4 <radio_control_task+0x190>
    c9a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9b0:	2200      	movs	r2, #0
    c9b2:	701a      	strb	r2, [r3, #0]
    c9b4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	461a      	mov	r2, r3
    c9c0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    c9c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9c8:	210b      	movs	r1, #11
    c9ca:	5499      	strb	r1, [r3, r2]
    c9cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9d4:	781b      	ldrb	r3, [r3, #0]
    c9d6:	3301      	adds	r3, #1
    c9d8:	b2da      	uxtb	r2, r3
    c9da:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9e2:	701a      	strb	r2, [r3, #0]
    c9e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9ec:	781b      	ldrb	r3, [r3, #0]
    c9ee:	2bff      	cmp	r3, #255	; 0xff
    c9f0:	d105      	bne.n	c9fe <radio_control_task+0x1da>
    c9f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    c9f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c9fa:	2200      	movs	r2, #0
    c9fc:	701a      	strb	r2, [r3, #0]
    c9fe:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ca02:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca06:	220b      	movs	r2, #11
    ca08:	701a      	strb	r2, [r3, #0]
    ca0a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ca0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca12:	220b      	movs	r2, #11
    ca14:	701a      	strb	r2, [r3, #0]
    ca16:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ca1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca1e:	781b      	ldrb	r3, [r3, #0]
    ca20:	461a      	mov	r2, r3
    ca22:	f642 4384 	movw	r3, #11396	; 0x2c84
    ca26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca2a:	7819      	ldrb	r1, [r3, #0]
    ca2c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ca30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca34:	5499      	strb	r1, [r3, r2]
    ca36:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ca3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca3e:	781a      	ldrb	r2, [r3, #0]
    ca40:	f642 4384 	movw	r3, #11396	; 0x2c84
    ca44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	4413      	add	r3, r2
    ca4c:	b2da      	uxtb	r2, r3
    ca4e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ca52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca56:	701a      	strb	r2, [r3, #0]
    ca58:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ca5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca60:	781a      	ldrb	r2, [r3, #0]
    ca62:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ca66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	4413      	add	r3, r2
    ca6e:	b2da      	uxtb	r2, r3
    ca70:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ca74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca78:	701a      	strb	r2, [r3, #0]
    ca7a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ca7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca82:	781b      	ldrb	r3, [r3, #0]
    ca84:	3301      	adds	r3, #1
    ca86:	b2da      	uxtb	r2, r3
    ca88:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ca8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca90:	701a      	strb	r2, [r3, #0]
    ca92:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ca96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	2bff      	cmp	r3, #255	; 0xff
    ca9e:	d105      	bne.n	caac <radio_control_task+0x288>
    caa0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    caa4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    caa8:	2200      	movs	r2, #0
    caaa:	701a      	strb	r2, [r3, #0]
    caac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cab0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cab4:	781b      	ldrb	r3, [r3, #0]
    cab6:	461a      	mov	r2, r3
    cab8:	f642 4385 	movw	r3, #11397	; 0x2c85
    cabc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cac0:	7819      	ldrb	r1, [r3, #0]
    cac2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cac6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    caca:	5499      	strb	r1, [r3, r2]
    cacc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cad0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cad4:	781a      	ldrb	r2, [r3, #0]
    cad6:	f642 4385 	movw	r3, #11397	; 0x2c85
    cada:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	4413      	add	r3, r2
    cae2:	b2da      	uxtb	r2, r3
    cae4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cae8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    caec:	701a      	strb	r2, [r3, #0]
    caee:	f642 53a6 	movw	r3, #11686	; 0x2da6
    caf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    caf6:	781a      	ldrb	r2, [r3, #0]
    caf8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cafc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	4413      	add	r3, r2
    cb04:	b2da      	uxtb	r2, r3
    cb06:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cb0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb0e:	701a      	strb	r2, [r3, #0]
    cb10:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cb14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	3301      	adds	r3, #1
    cb1c:	b2da      	uxtb	r2, r3
    cb1e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cb22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb26:	701a      	strb	r2, [r3, #0]
    cb28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cb2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	2bff      	cmp	r3, #255	; 0xff
    cb34:	d105      	bne.n	cb42 <radio_control_task+0x31e>
    cb36:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cb3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb3e:	2200      	movs	r2, #0
    cb40:	701a      	strb	r2, [r3, #0]
    cb42:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cb46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	461a      	mov	r2, r3
    cb4e:	f243 23b4 	movw	r3, #12980	; 0x32b4
    cb52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb56:	7819      	ldrb	r1, [r3, #0]
    cb58:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cb5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb60:	5499      	strb	r1, [r3, r2]
    cb62:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cb66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb6a:	781a      	ldrb	r2, [r3, #0]
    cb6c:	f243 23b4 	movw	r3, #12980	; 0x32b4
    cb70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb74:	781b      	ldrb	r3, [r3, #0]
    cb76:	4413      	add	r3, r2
    cb78:	b2da      	uxtb	r2, r3
    cb7a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cb7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb82:	701a      	strb	r2, [r3, #0]
    cb84:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cb88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb8c:	781a      	ldrb	r2, [r3, #0]
    cb8e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cb92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	4413      	add	r3, r2
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cba0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cba4:	701a      	strb	r2, [r3, #0]
    cba6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cbaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	3301      	adds	r3, #1
    cbb2:	b2da      	uxtb	r2, r3
    cbb4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cbb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbbc:	701a      	strb	r2, [r3, #0]
    cbbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cbc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbc6:	781b      	ldrb	r3, [r3, #0]
    cbc8:	2bff      	cmp	r3, #255	; 0xff
    cbca:	d105      	bne.n	cbd8 <radio_control_task+0x3b4>
    cbcc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cbd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbd4:	2200      	movs	r2, #0
    cbd6:	701a      	strb	r2, [r3, #0]
    cbd8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cbdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	461a      	mov	r2, r3
    cbe4:	f642 438b 	movw	r3, #11403	; 0x2c8b
    cbe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbec:	7819      	ldrb	r1, [r3, #0]
    cbee:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cbf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cbf6:	5499      	strb	r1, [r3, r2]
    cbf8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cbfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc00:	781a      	ldrb	r2, [r3, #0]
    cc02:	f642 438b 	movw	r3, #11403	; 0x2c8b
    cc06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	4413      	add	r3, r2
    cc0e:	b2da      	uxtb	r2, r3
    cc10:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cc14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc18:	701a      	strb	r2, [r3, #0]
    cc1a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cc1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc22:	781a      	ldrb	r2, [r3, #0]
    cc24:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cc28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc2c:	781b      	ldrb	r3, [r3, #0]
    cc2e:	4413      	add	r3, r2
    cc30:	b2da      	uxtb	r2, r3
    cc32:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cc36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc3a:	701a      	strb	r2, [r3, #0]
    cc3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cc40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc44:	781b      	ldrb	r3, [r3, #0]
    cc46:	3301      	adds	r3, #1
    cc48:	b2da      	uxtb	r2, r3
    cc4a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cc4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc52:	701a      	strb	r2, [r3, #0]
    cc54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cc58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc5c:	781b      	ldrb	r3, [r3, #0]
    cc5e:	2bff      	cmp	r3, #255	; 0xff
    cc60:	d105      	bne.n	cc6e <radio_control_task+0x44a>
    cc62:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cc66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc6a:	2200      	movs	r2, #0
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cc72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	461a      	mov	r2, r3
    cc7a:	f640 231c 	movw	r3, #2588	; 0xa1c
    cc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc82:	7819      	ldrb	r1, [r3, #0]
    cc84:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cc88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc8c:	5499      	strb	r1, [r3, r2]
    cc8e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cc92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cc96:	781a      	ldrb	r2, [r3, #0]
    cc98:	f640 231c 	movw	r3, #2588	; 0xa1c
    cc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	4413      	add	r3, r2
    cca4:	b2da      	uxtb	r2, r3
    cca6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ccaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccae:	701a      	strb	r2, [r3, #0]
    ccb0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ccb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccb8:	781a      	ldrb	r2, [r3, #0]
    ccba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ccbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	4413      	add	r3, r2
    ccc6:	b2da      	uxtb	r2, r3
    ccc8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cccc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccd0:	701a      	strb	r2, [r3, #0]
    ccd2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ccd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	3301      	adds	r3, #1
    ccde:	b2da      	uxtb	r2, r3
    cce0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cce4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cce8:	701a      	strb	r2, [r3, #0]
    ccea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ccee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ccf2:	781b      	ldrb	r3, [r3, #0]
    ccf4:	2bff      	cmp	r3, #255	; 0xff
    ccf6:	d105      	bne.n	cd04 <radio_control_task+0x4e0>
    ccf8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ccfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd00:	2200      	movs	r2, #0
    cd02:	701a      	strb	r2, [r3, #0]
    cd04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd0c:	781b      	ldrb	r3, [r3, #0]
    cd0e:	461a      	mov	r2, r3
    cd10:	f642 53a5 	movw	r3, #11685	; 0x2da5
    cd14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd18:	7819      	ldrb	r1, [r3, #0]
    cd1a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cd1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd22:	5499      	strb	r1, [r3, r2]
    cd24:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd2c:	781b      	ldrb	r3, [r3, #0]
    cd2e:	3301      	adds	r3, #1
    cd30:	b2da      	uxtb	r2, r3
    cd32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd3a:	701a      	strb	r2, [r3, #0]
    cd3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	2bff      	cmp	r3, #255	; 0xff
    cd48:	d105      	bne.n	cd56 <radio_control_task+0x532>
    cd4a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd52:	2200      	movs	r2, #0
    cd54:	701a      	strb	r2, [r3, #0]
    cd56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd5e:	781b      	ldrb	r3, [r3, #0]
    cd60:	461a      	mov	r2, r3
    cd62:	f642 53a6 	movw	r3, #11686	; 0x2da6
    cd66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd6a:	7819      	ldrb	r1, [r3, #0]
    cd6c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cd70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd74:	5499      	strb	r1, [r3, r2]
    cd76:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	3301      	adds	r3, #1
    cd82:	b2da      	uxtb	r2, r3
    cd84:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd8c:	701a      	strb	r2, [r3, #0]
    cd8e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cd92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	2bff      	cmp	r3, #255	; 0xff
    cd9a:	d105      	bne.n	cda8 <radio_control_task+0x584>
    cd9c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cda0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cda4:	2200      	movs	r2, #0
    cda6:	701a      	strb	r2, [r3, #0]
    cda8:	f242 0339 	movw	r3, #8249	; 0x2039
    cdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	b2db      	uxtb	r3, r3
    cdb4:	f003 0310 	and.w	r3, r3, #16
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d15a      	bne.n	ce72 <radio_control_task+0x64e>
    cdbc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    cdc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	b2db      	uxtb	r3, r3
    cdc8:	461a      	mov	r2, r3
    cdca:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    cdce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cdd2:	5c9a      	ldrb	r2, [r3, r2]
    cdd4:	f642 53a3 	movw	r3, #11683	; 0x2da3
    cdd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cddc:	701a      	strb	r2, [r3, #0]
    cdde:	f642 53a4 	movw	r3, #11684	; 0x2da4
    cde2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cde6:	2200      	movs	r2, #0
    cde8:	701a      	strb	r2, [r3, #0]
    cdea:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    cdee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cdf2:	781b      	ldrb	r3, [r3, #0]
    cdf4:	b2db      	uxtb	r3, r3
    cdf6:	3301      	adds	r3, #1
    cdf8:	b2da      	uxtb	r2, r3
    cdfa:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    cdfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce02:	701a      	strb	r2, [r3, #0]
    ce04:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ce08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce0c:	781b      	ldrb	r3, [r3, #0]
    ce0e:	b2db      	uxtb	r3, r3
    ce10:	2bff      	cmp	r3, #255	; 0xff
    ce12:	d105      	bne.n	ce20 <radio_control_task+0x5fc>
    ce14:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    ce18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce1c:	2200      	movs	r2, #0
    ce1e:	701a      	strb	r2, [r3, #0]
    ce20:	f242 0338 	movw	r3, #8248	; 0x2038
    ce24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce28:	f242 0238 	movw	r2, #8248	; 0x2038
    ce2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce30:	7812      	ldrb	r2, [r2, #0]
    ce32:	b2d2      	uxtb	r2, r2
    ce34:	f042 0201 	orr.w	r2, r2, #1
    ce38:	b2d2      	uxtb	r2, r2
    ce3a:	701a      	strb	r2, [r3, #0]
    ce3c:	f242 0339 	movw	r3, #8249	; 0x2039
    ce40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce44:	f242 0239 	movw	r2, #8249	; 0x2039
    ce48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce4c:	7812      	ldrb	r2, [r2, #0]
    ce4e:	b2d2      	uxtb	r2, r2
    ce50:	f042 0210 	orr.w	r2, r2, #16
    ce54:	b2d2      	uxtb	r2, r2
    ce56:	701a      	strb	r2, [r3, #0]
    ce58:	e00b      	b.n	ce72 <radio_control_task+0x64e>
    ce5a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    ce5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	3301      	adds	r3, #1
    ce66:	b2da      	uxtb	r2, r3
    ce68:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    ce6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce70:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    ce72:	f642 53a8 	movw	r3, #11688	; 0x2da8
    ce76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ce7a:	885b      	ldrh	r3, [r3, #2]
    ce7c:	b21b      	sxth	r3, r3
    ce7e:	4618      	mov	r0, r3
    ce80:	f00a ff18 	bl	17cb4 <__aeabi_i2f>
    ce84:	4603      	mov	r3, r0
    ce86:	4618      	mov	r0, r3
    ce88:	f04f 0100 	mov.w	r1, #0
    ce8c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ce90:	f00b f818 	bl	17ec4 <__aeabi_fdiv>
    ce94:	4603      	mov	r3, r0
    ce96:	4618      	mov	r0, r3
    ce98:	f00a facc 	bl	17434 <__aeabi_f2d>
    ce9c:	4602      	mov	r2, r0
    ce9e:	460b      	mov	r3, r1
    cea0:	4610      	mov	r0, r2
    cea2:	4619      	mov	r1, r3
    cea4:	a346      	add	r3, pc, #280	; (adr r3, cfc0 <radio_control_task+0x79c>)
    cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceaa:	f00a fb17 	bl	174dc <__aeabi_dmul>
    ceae:	4602      	mov	r2, r0
    ceb0:	460b      	mov	r3, r1
    ceb2:	4610      	mov	r0, r2
    ceb4:	4619      	mov	r1, r3
    ceb6:	f04f 0200 	mov.w	r2, #0
    ceba:	f04f 0300 	mov.w	r3, #0
    cebe:	f00a f95b 	bl	17178 <__adddf3>
    cec2:	4602      	mov	r2, r0
    cec4:	460b      	mov	r3, r1
    cec6:	4610      	mov	r0, r2
    cec8:	4619      	mov	r1, r3
    ceca:	f00a fde9 	bl	17aa0 <__aeabi_d2f>
    cece:	4602      	mov	r2, r0
    ced0:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    ced4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ced8:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    ceda:	f642 53a8 	movw	r3, #11688	; 0x2da8
    cede:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cee2:	889b      	ldrh	r3, [r3, #4]
    cee4:	b21b      	sxth	r3, r3
    cee6:	4618      	mov	r0, r3
    cee8:	f00a fee4 	bl	17cb4 <__aeabi_i2f>
    ceec:	4603      	mov	r3, r0
    ceee:	4618      	mov	r0, r3
    cef0:	f04f 0100 	mov.w	r1, #0
    cef4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cef8:	f00a ffe4 	bl	17ec4 <__aeabi_fdiv>
    cefc:	4603      	mov	r3, r0
    cefe:	4618      	mov	r0, r3
    cf00:	f00a fa98 	bl	17434 <__aeabi_f2d>
    cf04:	4602      	mov	r2, r0
    cf06:	460b      	mov	r3, r1
    cf08:	4610      	mov	r0, r2
    cf0a:	4619      	mov	r1, r3
    cf0c:	f04f 0200 	mov.w	r2, #0
    cf10:	f04f 0300 	mov.w	r3, #0
    cf14:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    cf18:	f00a fae0 	bl	174dc <__aeabi_dmul>
    cf1c:	4602      	mov	r2, r0
    cf1e:	460b      	mov	r3, r1
    cf20:	4610      	mov	r0, r2
    cf22:	4619      	mov	r1, r3
    cf24:	f04f 0200 	mov.w	r2, #0
    cf28:	f04f 0300 	mov.w	r3, #0
    cf2c:	f00a f924 	bl	17178 <__adddf3>
    cf30:	4602      	mov	r2, r0
    cf32:	460b      	mov	r3, r1
    cf34:	4610      	mov	r0, r2
    cf36:	4619      	mov	r1, r3
    cf38:	f00a fdb2 	bl	17aa0 <__aeabi_d2f>
    cf3c:	4602      	mov	r2, r0
    cf3e:	f642 73d0 	movw	r3, #12240	; 0x2fd0
    cf42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf46:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    cf48:	f642 53a8 	movw	r3, #11688	; 0x2da8
    cf4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf50:	881a      	ldrh	r2, [r3, #0]
    cf52:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    cf56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf5a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    cf5c:	f642 53a8 	movw	r3, #11688	; 0x2da8
    cf60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf64:	7c9a      	ldrb	r2, [r3, #18]
    cf66:	f642 438c 	movw	r3, #11404	; 0x2c8c
    cf6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf6e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    cf70:	f642 53a8 	movw	r3, #11688	; 0x2da8
    cf74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf78:	7d5a      	ldrb	r2, [r3, #21]
    cf7a:	f642 438a 	movw	r3, #11402	; 0x2c8a
    cf7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf82:	701a      	strb	r2, [r3, #0]

    events_update();
    cf84:	f7f9 fe7e 	bl	6c84 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    cf88:	f7f8 fc7e 	bl	5888 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    cf8c:	f642 4384 	movw	r3, #11396	; 0x2c84
    cf90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	2b02      	cmp	r3, #2
    cf98:	d10e      	bne.n	cfb8 <radio_control_task+0x794>
    cf9a:	f642 53a8 	movw	r3, #11688	; 0x2da8
    cf9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cfa2:	881b      	ldrh	r3, [r3, #0]
    cfa4:	b21b      	sxth	r3, r3
    cfa6:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    cfaa:	dd05      	ble.n	cfb8 <radio_control_task+0x794>
	launch = TRUE;
    cfac:	f642 4398 	movw	r3, #11416	; 0x2c98
    cfb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cfb4:	2201      	movs	r2, #1
    cfb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    cfb8:	3708      	adds	r7, #8
    cfba:	46bd      	mov	sp, r7
    cfbc:	bd80      	pop	{r7, pc}
    cfbe:	bf00      	nop
    cfc0:	33333333 	.word	0x33333333
    cfc4:	bfe33333 	.word	0xbfe33333

0000cfc8 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    cfc8:	b580      	push	{r7, lr}
    cfca:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    cfcc:	f642 4386 	movw	r3, #11398	; 0x2c86
    cfd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cfd4:	2203      	movs	r2, #3
    cfd6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    cfd8:	f642 4384 	movw	r3, #11396	; 0x2c84
    cfdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    cfe0:	781b      	ldrb	r3, [r3, #0]
    cfe2:	2b03      	cmp	r3, #3
    cfe4:	d102      	bne.n	cfec <navigation_update+0x24>
    nav_home();
    cfe6:	f007 fa9b 	bl	14520 <nav_home>
    cfea:	e001      	b.n	cff0 <navigation_update+0x28>
  else
    nav_update();
    cfec:	f007 fabe 	bl	1456c <nav_update>
}
    cff0:	bd80      	pop	{r7, pc}
    cff2:	bf00      	nop

0000cff4 <send_nav_values>:

void send_nav_values(void){
    cff4:	b480      	push	{r7}
    cff6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    cff8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    cffc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d000:	781a      	ldrb	r2, [r3, #0]
    d002:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    d006:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d00a:	781b      	ldrb	r3, [r3, #0]
    d00c:	b2db      	uxtb	r3, r3
    d00e:	429a      	cmp	r2, r3
    d010:	d313      	bcc.n	d03a <send_nav_values+0x46>
    d012:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    d016:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	b2db      	uxtb	r3, r3
    d01e:	461a      	mov	r2, r3
    d020:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d024:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d028:	781b      	ldrb	r3, [r3, #0]
    d02a:	1ad3      	subs	r3, r2, r3
    d02c:	33ff      	adds	r3, #255	; 0xff
    d02e:	2b1e      	cmp	r3, #30
    d030:	bfd4      	ite	le
    d032:	2300      	movle	r3, #0
    d034:	2301      	movgt	r3, #1
    d036:	b2db      	uxtb	r3, r3
    d038:	e011      	b.n	d05e <send_nav_values+0x6a>
    d03a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    d03e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	b2db      	uxtb	r3, r3
    d046:	461a      	mov	r2, r3
    d048:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d04c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d050:	781b      	ldrb	r3, [r3, #0]
    d052:	1ad3      	subs	r3, r2, r3
    d054:	2b1e      	cmp	r3, #30
    d056:	bfd4      	ite	le
    d058:	2300      	movle	r3, #0
    d05a:	2301      	movgt	r3, #1
    d05c:	b2db      	uxtb	r3, r3
    d05e:	2b00      	cmp	r3, #0
    d060:	f001 8094 	beq.w	e18c <send_nav_values+0x1198>
    d064:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d068:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	461a      	mov	r2, r3
    d070:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d074:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d078:	2105      	movs	r1, #5
    d07a:	5499      	strb	r1, [r3, r2]
    d07c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d080:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	3301      	adds	r3, #1
    d088:	b2da      	uxtb	r2, r3
    d08a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d08e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d092:	701a      	strb	r2, [r3, #0]
    d094:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d098:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	2bff      	cmp	r3, #255	; 0xff
    d0a0:	d105      	bne.n	d0ae <send_nav_values+0xba>
    d0a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0aa:	2200      	movs	r2, #0
    d0ac:	701a      	strb	r2, [r3, #0]
    d0ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	461a      	mov	r2, r3
    d0ba:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d0be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0c2:	210a      	movs	r1, #10
    d0c4:	5499      	strb	r1, [r3, r2]
    d0c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	3301      	adds	r3, #1
    d0d2:	b2da      	uxtb	r2, r3
    d0d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0dc:	701a      	strb	r2, [r3, #0]
    d0de:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	2bff      	cmp	r3, #255	; 0xff
    d0ea:	d105      	bne.n	d0f8 <send_nav_values+0x104>
    d0ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d0f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d0f4:	2200      	movs	r2, #0
    d0f6:	701a      	strb	r2, [r3, #0]
    d0f8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d0fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d100:	220a      	movs	r2, #10
    d102:	701a      	strb	r2, [r3, #0]
    d104:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d108:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d10c:	220a      	movs	r2, #10
    d10e:	701a      	strb	r2, [r3, #0]
    d110:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d114:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d118:	781b      	ldrb	r3, [r3, #0]
    d11a:	461a      	mov	r2, r3
    d11c:	f642 73f9 	movw	r3, #12281	; 0x2ff9
    d120:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d124:	7819      	ldrb	r1, [r3, #0]
    d126:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d12a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d12e:	5499      	strb	r1, [r3, r2]
    d130:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d134:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d138:	781a      	ldrb	r2, [r3, #0]
    d13a:	f642 73f9 	movw	r3, #12281	; 0x2ff9
    d13e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d142:	781b      	ldrb	r3, [r3, #0]
    d144:	4413      	add	r3, r2
    d146:	b2da      	uxtb	r2, r3
    d148:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d14c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d150:	701a      	strb	r2, [r3, #0]
    d152:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d156:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d15a:	781a      	ldrb	r2, [r3, #0]
    d15c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d160:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	4413      	add	r3, r2
    d168:	b2da      	uxtb	r2, r3
    d16a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d16e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d172:	701a      	strb	r2, [r3, #0]
    d174:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d178:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	3301      	adds	r3, #1
    d180:	b2da      	uxtb	r2, r3
    d182:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d186:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d18a:	701a      	strb	r2, [r3, #0]
    d18c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d190:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2bff      	cmp	r3, #255	; 0xff
    d198:	d105      	bne.n	d1a6 <send_nav_values+0x1b2>
    d19a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d19e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1a2:	2200      	movs	r2, #0
    d1a4:	701a      	strb	r2, [r3, #0]
    d1a6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d1aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	461a      	mov	r2, r3
    d1b2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
    d1b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1ba:	7819      	ldrb	r1, [r3, #0]
    d1bc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d1c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1c4:	5499      	strb	r1, [r3, r2]
    d1c6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d1ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1ce:	781a      	ldrb	r2, [r3, #0]
    d1d0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
    d1d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	4413      	add	r3, r2
    d1dc:	b2da      	uxtb	r2, r3
    d1de:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d1e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1e6:	701a      	strb	r2, [r3, #0]
    d1e8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d1ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1f0:	781a      	ldrb	r2, [r3, #0]
    d1f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d1f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d1fa:	781b      	ldrb	r3, [r3, #0]
    d1fc:	4413      	add	r3, r2
    d1fe:	b2da      	uxtb	r2, r3
    d200:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d204:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d20e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	3301      	adds	r3, #1
    d216:	b2da      	uxtb	r2, r3
    d218:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d21c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d220:	701a      	strb	r2, [r3, #0]
    d222:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d226:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	2bff      	cmp	r3, #255	; 0xff
    d22e:	d105      	bne.n	d23c <send_nav_values+0x248>
    d230:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d234:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d238:	2200      	movs	r2, #0
    d23a:	701a      	strb	r2, [r3, #0]
    d23c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d240:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d244:	781b      	ldrb	r3, [r3, #0]
    d246:	461a      	mov	r2, r3
    d248:	f243 2354 	movw	r3, #12884	; 0x3254
    d24c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d250:	7819      	ldrb	r1, [r3, #0]
    d252:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d256:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d25a:	5499      	strb	r1, [r3, r2]
    d25c:	f243 2354 	movw	r3, #12884	; 0x3254
    d260:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d264:	781a      	ldrb	r2, [r3, #0]
    d266:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d26a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	4413      	add	r3, r2
    d272:	b2da      	uxtb	r2, r3
    d274:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d278:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d27c:	701a      	strb	r2, [r3, #0]
    d27e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d282:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d286:	781a      	ldrb	r2, [r3, #0]
    d288:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d28c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d290:	781b      	ldrb	r3, [r3, #0]
    d292:	4413      	add	r3, r2
    d294:	b2da      	uxtb	r2, r3
    d296:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d29a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d29e:	701a      	strb	r2, [r3, #0]
    d2a0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d2a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	3301      	adds	r3, #1
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d2b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2b6:	701a      	strb	r2, [r3, #0]
    d2b8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d2bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	2bff      	cmp	r3, #255	; 0xff
    d2c4:	d105      	bne.n	d2d2 <send_nav_values+0x2de>
    d2c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d2ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2ce:	2200      	movs	r2, #0
    d2d0:	701a      	strb	r2, [r3, #0]
    d2d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d2d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2da:	781b      	ldrb	r3, [r3, #0]
    d2dc:	461a      	mov	r2, r3
    d2de:	f243 2354 	movw	r3, #12884	; 0x3254
    d2e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2e6:	7859      	ldrb	r1, [r3, #1]
    d2e8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d2ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2f0:	5499      	strb	r1, [r3, r2]
    d2f2:	4bd2      	ldr	r3, [pc, #840]	; (d63c <send_nav_values+0x648>)
    d2f4:	781a      	ldrb	r2, [r3, #0]
    d2f6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d2fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	4413      	add	r3, r2
    d302:	b2da      	uxtb	r2, r3
    d304:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d308:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d30c:	701a      	strb	r2, [r3, #0]
    d30e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d312:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d316:	781a      	ldrb	r2, [r3, #0]
    d318:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d31c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d320:	781b      	ldrb	r3, [r3, #0]
    d322:	4413      	add	r3, r2
    d324:	b2da      	uxtb	r2, r3
    d326:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d32a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d32e:	701a      	strb	r2, [r3, #0]
    d330:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d334:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d338:	781b      	ldrb	r3, [r3, #0]
    d33a:	3301      	adds	r3, #1
    d33c:	b2da      	uxtb	r2, r3
    d33e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d342:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d346:	701a      	strb	r2, [r3, #0]
    d348:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d34c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	2bff      	cmp	r3, #255	; 0xff
    d354:	d105      	bne.n	d362 <send_nav_values+0x36e>
    d356:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d35a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d35e:	2200      	movs	r2, #0
    d360:	701a      	strb	r2, [r3, #0]
    d362:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d366:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	461a      	mov	r2, r3
    d36e:	f243 2354 	movw	r3, #12884	; 0x3254
    d372:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d376:	7899      	ldrb	r1, [r3, #2]
    d378:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d37c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d380:	5499      	strb	r1, [r3, r2]
    d382:	4baf      	ldr	r3, [pc, #700]	; (d640 <send_nav_values+0x64c>)
    d384:	781a      	ldrb	r2, [r3, #0]
    d386:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d38a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d38e:	781b      	ldrb	r3, [r3, #0]
    d390:	4413      	add	r3, r2
    d392:	b2da      	uxtb	r2, r3
    d394:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d398:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d39c:	701a      	strb	r2, [r3, #0]
    d39e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d3a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3a6:	781a      	ldrb	r2, [r3, #0]
    d3a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d3ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	4413      	add	r3, r2
    d3b4:	b2da      	uxtb	r2, r3
    d3b6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d3ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3be:	701a      	strb	r2, [r3, #0]
    d3c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d3c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3c8:	781b      	ldrb	r3, [r3, #0]
    d3ca:	3301      	adds	r3, #1
    d3cc:	b2da      	uxtb	r2, r3
    d3ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d3d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3d6:	701a      	strb	r2, [r3, #0]
    d3d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d3dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3e0:	781b      	ldrb	r3, [r3, #0]
    d3e2:	2bff      	cmp	r3, #255	; 0xff
    d3e4:	d105      	bne.n	d3f2 <send_nav_values+0x3fe>
    d3e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d3ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3ee:	2200      	movs	r2, #0
    d3f0:	701a      	strb	r2, [r3, #0]
    d3f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d3f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	461a      	mov	r2, r3
    d3fe:	f243 2354 	movw	r3, #12884	; 0x3254
    d402:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d406:	78d9      	ldrb	r1, [r3, #3]
    d408:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d40c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d410:	5499      	strb	r1, [r3, r2]
    d412:	4b8c      	ldr	r3, [pc, #560]	; (d644 <send_nav_values+0x650>)
    d414:	781a      	ldrb	r2, [r3, #0]
    d416:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d41a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d41e:	781b      	ldrb	r3, [r3, #0]
    d420:	4413      	add	r3, r2
    d422:	b2da      	uxtb	r2, r3
    d424:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d428:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d42c:	701a      	strb	r2, [r3, #0]
    d42e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d432:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d436:	781a      	ldrb	r2, [r3, #0]
    d438:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d43c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d440:	781b      	ldrb	r3, [r3, #0]
    d442:	4413      	add	r3, r2
    d444:	b2da      	uxtb	r2, r3
    d446:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d44a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d44e:	701a      	strb	r2, [r3, #0]
    d450:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d454:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d458:	781b      	ldrb	r3, [r3, #0]
    d45a:	3301      	adds	r3, #1
    d45c:	b2da      	uxtb	r2, r3
    d45e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d462:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d466:	701a      	strb	r2, [r3, #0]
    d468:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d46c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	2bff      	cmp	r3, #255	; 0xff
    d474:	d105      	bne.n	d482 <send_nav_values+0x48e>
    d476:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d47a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d47e:	2200      	movs	r2, #0
    d480:	701a      	strb	r2, [r3, #0]
    d482:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d486:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d48a:	781b      	ldrb	r3, [r3, #0]
    d48c:	461a      	mov	r2, r3
    d48e:	f243 2358 	movw	r3, #12888	; 0x3258
    d492:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d496:	7819      	ldrb	r1, [r3, #0]
    d498:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d49c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4a0:	5499      	strb	r1, [r3, r2]
    d4a2:	f243 2358 	movw	r3, #12888	; 0x3258
    d4a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4aa:	781a      	ldrb	r2, [r3, #0]
    d4ac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d4b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4b4:	781b      	ldrb	r3, [r3, #0]
    d4b6:	4413      	add	r3, r2
    d4b8:	b2da      	uxtb	r2, r3
    d4ba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d4be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4c2:	701a      	strb	r2, [r3, #0]
    d4c4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d4c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4cc:	781a      	ldrb	r2, [r3, #0]
    d4ce:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d4d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4d6:	781b      	ldrb	r3, [r3, #0]
    d4d8:	4413      	add	r3, r2
    d4da:	b2da      	uxtb	r2, r3
    d4dc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d4e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4e4:	701a      	strb	r2, [r3, #0]
    d4e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d4ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4ee:	781b      	ldrb	r3, [r3, #0]
    d4f0:	3301      	adds	r3, #1
    d4f2:	b2da      	uxtb	r2, r3
    d4f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d4f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d4fc:	701a      	strb	r2, [r3, #0]
    d4fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d502:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d506:	781b      	ldrb	r3, [r3, #0]
    d508:	2bff      	cmp	r3, #255	; 0xff
    d50a:	d105      	bne.n	d518 <send_nav_values+0x524>
    d50c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d510:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d514:	2200      	movs	r2, #0
    d516:	701a      	strb	r2, [r3, #0]
    d518:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d51c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	461a      	mov	r2, r3
    d524:	f243 2358 	movw	r3, #12888	; 0x3258
    d528:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d52c:	7859      	ldrb	r1, [r3, #1]
    d52e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d532:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d536:	5499      	strb	r1, [r3, r2]
    d538:	4b43      	ldr	r3, [pc, #268]	; (d648 <send_nav_values+0x654>)
    d53a:	781a      	ldrb	r2, [r3, #0]
    d53c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d540:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d544:	781b      	ldrb	r3, [r3, #0]
    d546:	4413      	add	r3, r2
    d548:	b2da      	uxtb	r2, r3
    d54a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d54e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d552:	701a      	strb	r2, [r3, #0]
    d554:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d558:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d55c:	781a      	ldrb	r2, [r3, #0]
    d55e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d562:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	4413      	add	r3, r2
    d56a:	b2da      	uxtb	r2, r3
    d56c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d570:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d574:	701a      	strb	r2, [r3, #0]
    d576:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d57a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	3301      	adds	r3, #1
    d582:	b2da      	uxtb	r2, r3
    d584:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d588:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d58c:	701a      	strb	r2, [r3, #0]
    d58e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d592:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d596:	781b      	ldrb	r3, [r3, #0]
    d598:	2bff      	cmp	r3, #255	; 0xff
    d59a:	d105      	bne.n	d5a8 <send_nav_values+0x5b4>
    d59c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d5a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5a4:	2200      	movs	r2, #0
    d5a6:	701a      	strb	r2, [r3, #0]
    d5a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d5ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5b0:	781b      	ldrb	r3, [r3, #0]
    d5b2:	461a      	mov	r2, r3
    d5b4:	f243 2358 	movw	r3, #12888	; 0x3258
    d5b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5bc:	7899      	ldrb	r1, [r3, #2]
    d5be:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d5c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5c6:	5499      	strb	r1, [r3, r2]
    d5c8:	4b20      	ldr	r3, [pc, #128]	; (d64c <send_nav_values+0x658>)
    d5ca:	781a      	ldrb	r2, [r3, #0]
    d5cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d5d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5d4:	781b      	ldrb	r3, [r3, #0]
    d5d6:	4413      	add	r3, r2
    d5d8:	b2da      	uxtb	r2, r3
    d5da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d5de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5e2:	701a      	strb	r2, [r3, #0]
    d5e4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d5e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5ec:	781a      	ldrb	r2, [r3, #0]
    d5ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d5f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	4413      	add	r3, r2
    d5fa:	b2da      	uxtb	r2, r3
    d5fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d600:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d604:	701a      	strb	r2, [r3, #0]
    d606:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d60a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d60e:	781b      	ldrb	r3, [r3, #0]
    d610:	3301      	adds	r3, #1
    d612:	b2da      	uxtb	r2, r3
    d614:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d618:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d61c:	701a      	strb	r2, [r3, #0]
    d61e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d622:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d626:	781b      	ldrb	r3, [r3, #0]
    d628:	2bff      	cmp	r3, #255	; 0xff
    d62a:	d111      	bne.n	d650 <send_nav_values+0x65c>
    d62c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d630:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d634:	2200      	movs	r2, #0
    d636:	701a      	strb	r2, [r3, #0]
    d638:	e00a      	b.n	d650 <send_nav_values+0x65c>
    d63a:	bf00      	nop
    d63c:	20013255 	.word	0x20013255
    d640:	20013256 	.word	0x20013256
    d644:	20013257 	.word	0x20013257
    d648:	20013259 	.word	0x20013259
    d64c:	2001325a 	.word	0x2001325a
    d650:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d654:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d658:	781b      	ldrb	r3, [r3, #0]
    d65a:	461a      	mov	r2, r3
    d65c:	f243 2358 	movw	r3, #12888	; 0x3258
    d660:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d664:	78d9      	ldrb	r1, [r3, #3]
    d666:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d66a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d66e:	5499      	strb	r1, [r3, r2]
    d670:	4bd3      	ldr	r3, [pc, #844]	; (d9c0 <send_nav_values+0x9cc>)
    d672:	781a      	ldrb	r2, [r3, #0]
    d674:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d678:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d67c:	781b      	ldrb	r3, [r3, #0]
    d67e:	4413      	add	r3, r2
    d680:	b2da      	uxtb	r2, r3
    d682:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d686:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d68a:	701a      	strb	r2, [r3, #0]
    d68c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d690:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d694:	781a      	ldrb	r2, [r3, #0]
    d696:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d69a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d69e:	781b      	ldrb	r3, [r3, #0]
    d6a0:	4413      	add	r3, r2
    d6a2:	b2da      	uxtb	r2, r3
    d6a4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d6a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6ac:	701a      	strb	r2, [r3, #0]
    d6ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d6b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6b6:	781b      	ldrb	r3, [r3, #0]
    d6b8:	3301      	adds	r3, #1
    d6ba:	b2da      	uxtb	r2, r3
    d6bc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d6c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6c4:	701a      	strb	r2, [r3, #0]
    d6c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d6ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6ce:	781b      	ldrb	r3, [r3, #0]
    d6d0:	2bff      	cmp	r3, #255	; 0xff
    d6d2:	d105      	bne.n	d6e0 <send_nav_values+0x6ec>
    d6d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d6d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6dc:	2200      	movs	r2, #0
    d6de:	701a      	strb	r2, [r3, #0]
    d6e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d6e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6e8:	781b      	ldrb	r3, [r3, #0]
    d6ea:	461a      	mov	r2, r3
    d6ec:	f642 73e4 	movw	r3, #12260	; 0x2fe4
    d6f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6f4:	7819      	ldrb	r1, [r3, #0]
    d6f6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d6fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d6fe:	5499      	strb	r1, [r3, r2]
    d700:	f642 73e4 	movw	r3, #12260	; 0x2fe4
    d704:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d708:	781a      	ldrb	r2, [r3, #0]
    d70a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d70e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d712:	781b      	ldrb	r3, [r3, #0]
    d714:	4413      	add	r3, r2
    d716:	b2da      	uxtb	r2, r3
    d718:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d71c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d720:	701a      	strb	r2, [r3, #0]
    d722:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d726:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d72a:	781a      	ldrb	r2, [r3, #0]
    d72c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d730:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d734:	781b      	ldrb	r3, [r3, #0]
    d736:	4413      	add	r3, r2
    d738:	b2da      	uxtb	r2, r3
    d73a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d73e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d742:	701a      	strb	r2, [r3, #0]
    d744:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d748:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d74c:	781b      	ldrb	r3, [r3, #0]
    d74e:	3301      	adds	r3, #1
    d750:	b2da      	uxtb	r2, r3
    d752:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d756:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d75a:	701a      	strb	r2, [r3, #0]
    d75c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d760:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	2bff      	cmp	r3, #255	; 0xff
    d768:	d105      	bne.n	d776 <send_nav_values+0x782>
    d76a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d76e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d772:	2200      	movs	r2, #0
    d774:	701a      	strb	r2, [r3, #0]
    d776:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d77a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d77e:	781b      	ldrb	r3, [r3, #0]
    d780:	461a      	mov	r2, r3
    d782:	f642 73e4 	movw	r3, #12260	; 0x2fe4
    d786:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d78a:	7859      	ldrb	r1, [r3, #1]
    d78c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d790:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d794:	5499      	strb	r1, [r3, r2]
    d796:	4b8b      	ldr	r3, [pc, #556]	; (d9c4 <send_nav_values+0x9d0>)
    d798:	781a      	ldrb	r2, [r3, #0]
    d79a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d79e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7a2:	781b      	ldrb	r3, [r3, #0]
    d7a4:	4413      	add	r3, r2
    d7a6:	b2da      	uxtb	r2, r3
    d7a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d7ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7b0:	701a      	strb	r2, [r3, #0]
    d7b2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d7b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7ba:	781a      	ldrb	r2, [r3, #0]
    d7bc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d7c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	4413      	add	r3, r2
    d7c8:	b2da      	uxtb	r2, r3
    d7ca:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d7ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7d2:	701a      	strb	r2, [r3, #0]
    d7d4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d7d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7dc:	781b      	ldrb	r3, [r3, #0]
    d7de:	3301      	adds	r3, #1
    d7e0:	b2da      	uxtb	r2, r3
    d7e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d7e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7ea:	701a      	strb	r2, [r3, #0]
    d7ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d7f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d7f4:	781b      	ldrb	r3, [r3, #0]
    d7f6:	2bff      	cmp	r3, #255	; 0xff
    d7f8:	d105      	bne.n	d806 <send_nav_values+0x812>
    d7fa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d7fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d802:	2200      	movs	r2, #0
    d804:	701a      	strb	r2, [r3, #0]
    d806:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d80a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d80e:	781b      	ldrb	r3, [r3, #0]
    d810:	461a      	mov	r2, r3
    d812:	f642 73e4 	movw	r3, #12260	; 0x2fe4
    d816:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d81a:	7899      	ldrb	r1, [r3, #2]
    d81c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d820:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d824:	5499      	strb	r1, [r3, r2]
    d826:	4b68      	ldr	r3, [pc, #416]	; (d9c8 <send_nav_values+0x9d4>)
    d828:	781a      	ldrb	r2, [r3, #0]
    d82a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d82e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d832:	781b      	ldrb	r3, [r3, #0]
    d834:	4413      	add	r3, r2
    d836:	b2da      	uxtb	r2, r3
    d838:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d83c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d840:	701a      	strb	r2, [r3, #0]
    d842:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d846:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d84a:	781a      	ldrb	r2, [r3, #0]
    d84c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d850:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	4413      	add	r3, r2
    d858:	b2da      	uxtb	r2, r3
    d85a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d85e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d862:	701a      	strb	r2, [r3, #0]
    d864:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d868:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d86c:	781b      	ldrb	r3, [r3, #0]
    d86e:	3301      	adds	r3, #1
    d870:	b2da      	uxtb	r2, r3
    d872:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d876:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d87a:	701a      	strb	r2, [r3, #0]
    d87c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d880:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d884:	781b      	ldrb	r3, [r3, #0]
    d886:	2bff      	cmp	r3, #255	; 0xff
    d888:	d105      	bne.n	d896 <send_nav_values+0x8a2>
    d88a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d88e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d892:	2200      	movs	r2, #0
    d894:	701a      	strb	r2, [r3, #0]
    d896:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d89a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	461a      	mov	r2, r3
    d8a2:	f642 73e4 	movw	r3, #12260	; 0x2fe4
    d8a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8aa:	78d9      	ldrb	r1, [r3, #3]
    d8ac:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d8b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8b4:	5499      	strb	r1, [r3, r2]
    d8b6:	4b45      	ldr	r3, [pc, #276]	; (d9cc <send_nav_values+0x9d8>)
    d8b8:	781a      	ldrb	r2, [r3, #0]
    d8ba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d8be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	4413      	add	r3, r2
    d8c6:	b2da      	uxtb	r2, r3
    d8c8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d8cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d8d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8da:	781a      	ldrb	r2, [r3, #0]
    d8dc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d8e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	4413      	add	r3, r2
    d8e8:	b2da      	uxtb	r2, r3
    d8ea:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d8ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8f2:	701a      	strb	r2, [r3, #0]
    d8f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d8f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	3301      	adds	r3, #1
    d900:	b2da      	uxtb	r2, r3
    d902:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d906:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d90a:	701a      	strb	r2, [r3, #0]
    d90c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d910:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d914:	781b      	ldrb	r3, [r3, #0]
    d916:	2bff      	cmp	r3, #255	; 0xff
    d918:	d105      	bne.n	d926 <send_nav_values+0x932>
    d91a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d91e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d922:	2200      	movs	r2, #0
    d924:	701a      	strb	r2, [r3, #0]
    d926:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d92a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d92e:	781b      	ldrb	r3, [r3, #0]
    d930:	461a      	mov	r2, r3
    d932:	f243 032c 	movw	r3, #12332	; 0x302c
    d936:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d93a:	7819      	ldrb	r1, [r3, #0]
    d93c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d940:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d944:	5499      	strb	r1, [r3, r2]
    d946:	f243 032c 	movw	r3, #12332	; 0x302c
    d94a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d94e:	781a      	ldrb	r2, [r3, #0]
    d950:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d954:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	4413      	add	r3, r2
    d95c:	b2da      	uxtb	r2, r3
    d95e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d962:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d966:	701a      	strb	r2, [r3, #0]
    d968:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d96c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d970:	781a      	ldrb	r2, [r3, #0]
    d972:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d976:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d97a:	781b      	ldrb	r3, [r3, #0]
    d97c:	4413      	add	r3, r2
    d97e:	b2da      	uxtb	r2, r3
    d980:	f642 53a6 	movw	r3, #11686	; 0x2da6
    d984:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d988:	701a      	strb	r2, [r3, #0]
    d98a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d98e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d992:	781b      	ldrb	r3, [r3, #0]
    d994:	3301      	adds	r3, #1
    d996:	b2da      	uxtb	r2, r3
    d998:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d99c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9a0:	701a      	strb	r2, [r3, #0]
    d9a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d9a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9aa:	781b      	ldrb	r3, [r3, #0]
    d9ac:	2bff      	cmp	r3, #255	; 0xff
    d9ae:	d10f      	bne.n	d9d0 <send_nav_values+0x9dc>
    d9b0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d9b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9b8:	2200      	movs	r2, #0
    d9ba:	701a      	strb	r2, [r3, #0]
    d9bc:	e008      	b.n	d9d0 <send_nav_values+0x9dc>
    d9be:	bf00      	nop
    d9c0:	2001325b 	.word	0x2001325b
    d9c4:	20012fe5 	.word	0x20012fe5
    d9c8:	20012fe6 	.word	0x20012fe6
    d9cc:	20012fe7 	.word	0x20012fe7
    d9d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    d9d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9d8:	781b      	ldrb	r3, [r3, #0]
    d9da:	461a      	mov	r2, r3
    d9dc:	f243 032c 	movw	r3, #12332	; 0x302c
    d9e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9e4:	7859      	ldrb	r1, [r3, #1]
    d9e6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    d9ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9ee:	5499      	strb	r1, [r3, r2]
    d9f0:	4bd1      	ldr	r3, [pc, #836]	; (dd38 <send_nav_values+0xd44>)
    d9f2:	781a      	ldrb	r2, [r3, #0]
    d9f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    d9f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	4413      	add	r3, r2
    da00:	b2da      	uxtb	r2, r3
    da02:	f642 53a5 	movw	r3, #11685	; 0x2da5
    da06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da0a:	701a      	strb	r2, [r3, #0]
    da0c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    da10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da14:	781a      	ldrb	r2, [r3, #0]
    da16:	f642 53a5 	movw	r3, #11685	; 0x2da5
    da1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da1e:	781b      	ldrb	r3, [r3, #0]
    da20:	4413      	add	r3, r2
    da22:	b2da      	uxtb	r2, r3
    da24:	f642 53a6 	movw	r3, #11686	; 0x2da6
    da28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da2c:	701a      	strb	r2, [r3, #0]
    da2e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    da32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	3301      	adds	r3, #1
    da3a:	b2da      	uxtb	r2, r3
    da3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    da40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da44:	701a      	strb	r2, [r3, #0]
    da46:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    da4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	2bff      	cmp	r3, #255	; 0xff
    da52:	d105      	bne.n	da60 <send_nav_values+0xa6c>
    da54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    da58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da5c:	2200      	movs	r2, #0
    da5e:	701a      	strb	r2, [r3, #0]
    da60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    da64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da68:	781b      	ldrb	r3, [r3, #0]
    da6a:	461a      	mov	r2, r3
    da6c:	f243 032c 	movw	r3, #12332	; 0x302c
    da70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da74:	7899      	ldrb	r1, [r3, #2]
    da76:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    da7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da7e:	5499      	strb	r1, [r3, r2]
    da80:	4bae      	ldr	r3, [pc, #696]	; (dd3c <send_nav_values+0xd48>)
    da82:	781a      	ldrb	r2, [r3, #0]
    da84:	f642 53a5 	movw	r3, #11685	; 0x2da5
    da88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	4413      	add	r3, r2
    da90:	b2da      	uxtb	r2, r3
    da92:	f642 53a5 	movw	r3, #11685	; 0x2da5
    da96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    da9a:	701a      	strb	r2, [r3, #0]
    da9c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    daa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    daa4:	781a      	ldrb	r2, [r3, #0]
    daa6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    daaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    daae:	781b      	ldrb	r3, [r3, #0]
    dab0:	4413      	add	r3, r2
    dab2:	b2da      	uxtb	r2, r3
    dab4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dab8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dabc:	701a      	strb	r2, [r3, #0]
    dabe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dac2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dac6:	781b      	ldrb	r3, [r3, #0]
    dac8:	3301      	adds	r3, #1
    daca:	b2da      	uxtb	r2, r3
    dacc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dad0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dada:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dade:	781b      	ldrb	r3, [r3, #0]
    dae0:	2bff      	cmp	r3, #255	; 0xff
    dae2:	d105      	bne.n	daf0 <send_nav_values+0xafc>
    dae4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dae8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    daec:	2200      	movs	r2, #0
    daee:	701a      	strb	r2, [r3, #0]
    daf0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    daf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	461a      	mov	r2, r3
    dafc:	f243 032c 	movw	r3, #12332	; 0x302c
    db00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db04:	78d9      	ldrb	r1, [r3, #3]
    db06:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    db0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db0e:	5499      	strb	r1, [r3, r2]
    db10:	4b8b      	ldr	r3, [pc, #556]	; (dd40 <send_nav_values+0xd4c>)
    db12:	781a      	ldrb	r2, [r3, #0]
    db14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    db18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db1c:	781b      	ldrb	r3, [r3, #0]
    db1e:	4413      	add	r3, r2
    db20:	b2da      	uxtb	r2, r3
    db22:	f642 53a5 	movw	r3, #11685	; 0x2da5
    db26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db2a:	701a      	strb	r2, [r3, #0]
    db2c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    db30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db34:	781a      	ldrb	r2, [r3, #0]
    db36:	f642 53a5 	movw	r3, #11685	; 0x2da5
    db3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db3e:	781b      	ldrb	r3, [r3, #0]
    db40:	4413      	add	r3, r2
    db42:	b2da      	uxtb	r2, r3
    db44:	f642 53a6 	movw	r3, #11686	; 0x2da6
    db48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db4c:	701a      	strb	r2, [r3, #0]
    db4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    db52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	3301      	adds	r3, #1
    db5a:	b2da      	uxtb	r2, r3
    db5c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    db60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db64:	701a      	strb	r2, [r3, #0]
    db66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    db6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db6e:	781b      	ldrb	r3, [r3, #0]
    db70:	2bff      	cmp	r3, #255	; 0xff
    db72:	d105      	bne.n	db80 <send_nav_values+0xb8c>
    db74:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    db78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db7c:	2200      	movs	r2, #0
    db7e:	701a      	strb	r2, [r3, #0]
    db80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    db84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db88:	781b      	ldrb	r3, [r3, #0]
    db8a:	461a      	mov	r2, r3
    db8c:	f640 2338 	movw	r3, #2616	; 0xa38
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	7819      	ldrb	r1, [r3, #0]
    db96:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    db9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    db9e:	5499      	strb	r1, [r3, r2]
    dba0:	f640 2338 	movw	r3, #2616	; 0xa38
    dba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba8:	781a      	ldrb	r2, [r3, #0]
    dbaa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dbae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbb2:	781b      	ldrb	r3, [r3, #0]
    dbb4:	4413      	add	r3, r2
    dbb6:	b2da      	uxtb	r2, r3
    dbb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dbbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbc0:	701a      	strb	r2, [r3, #0]
    dbc2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dbc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbca:	781a      	ldrb	r2, [r3, #0]
    dbcc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dbd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	4413      	add	r3, r2
    dbd8:	b2da      	uxtb	r2, r3
    dbda:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dbde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbe2:	701a      	strb	r2, [r3, #0]
    dbe4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dbe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbec:	781b      	ldrb	r3, [r3, #0]
    dbee:	3301      	adds	r3, #1
    dbf0:	b2da      	uxtb	r2, r3
    dbf2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dbf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dbfa:	701a      	strb	r2, [r3, #0]
    dbfc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc04:	781b      	ldrb	r3, [r3, #0]
    dc06:	2bff      	cmp	r3, #255	; 0xff
    dc08:	d105      	bne.n	dc16 <send_nav_values+0xc22>
    dc0a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc12:	2200      	movs	r2, #0
    dc14:	701a      	strb	r2, [r3, #0]
    dc16:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc1e:	781b      	ldrb	r3, [r3, #0]
    dc20:	461a      	mov	r2, r3
    dc22:	f640 2338 	movw	r3, #2616	; 0xa38
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	7859      	ldrb	r1, [r3, #1]
    dc2c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    dc30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc34:	5499      	strb	r1, [r3, r2]
    dc36:	4b43      	ldr	r3, [pc, #268]	; (dd44 <send_nav_values+0xd50>)
    dc38:	781a      	ldrb	r2, [r3, #0]
    dc3a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dc3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc42:	781b      	ldrb	r3, [r3, #0]
    dc44:	4413      	add	r3, r2
    dc46:	b2da      	uxtb	r2, r3
    dc48:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dc4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc50:	701a      	strb	r2, [r3, #0]
    dc52:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dc56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc5a:	781a      	ldrb	r2, [r3, #0]
    dc5c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dc60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc64:	781b      	ldrb	r3, [r3, #0]
    dc66:	4413      	add	r3, r2
    dc68:	b2da      	uxtb	r2, r3
    dc6a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dc6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc72:	701a      	strb	r2, [r3, #0]
    dc74:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc7c:	781b      	ldrb	r3, [r3, #0]
    dc7e:	3301      	adds	r3, #1
    dc80:	b2da      	uxtb	r2, r3
    dc82:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc8a:	701a      	strb	r2, [r3, #0]
    dc8c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	2bff      	cmp	r3, #255	; 0xff
    dc98:	d105      	bne.n	dca6 <send_nav_values+0xcb2>
    dc9a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dc9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dca2:	2200      	movs	r2, #0
    dca4:	701a      	strb	r2, [r3, #0]
    dca6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dcaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dcae:	781b      	ldrb	r3, [r3, #0]
    dcb0:	461a      	mov	r2, r3
    dcb2:	f640 2338 	movw	r3, #2616	; 0xa38
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	7899      	ldrb	r1, [r3, #2]
    dcbc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    dcc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dcc4:	5499      	strb	r1, [r3, r2]
    dcc6:	4b20      	ldr	r3, [pc, #128]	; (dd48 <send_nav_values+0xd54>)
    dcc8:	781a      	ldrb	r2, [r3, #0]
    dcca:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dcce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dcd2:	781b      	ldrb	r3, [r3, #0]
    dcd4:	4413      	add	r3, r2
    dcd6:	b2da      	uxtb	r2, r3
    dcd8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dcdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dce0:	701a      	strb	r2, [r3, #0]
    dce2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dce6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dcea:	781a      	ldrb	r2, [r3, #0]
    dcec:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dcf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dcf4:	781b      	ldrb	r3, [r3, #0]
    dcf6:	4413      	add	r3, r2
    dcf8:	b2da      	uxtb	r2, r3
    dcfa:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dcfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd02:	701a      	strb	r2, [r3, #0]
    dd04:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dd08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd0c:	781b      	ldrb	r3, [r3, #0]
    dd0e:	3301      	adds	r3, #1
    dd10:	b2da      	uxtb	r2, r3
    dd12:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dd16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd1a:	701a      	strb	r2, [r3, #0]
    dd1c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dd20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd24:	781b      	ldrb	r3, [r3, #0]
    dd26:	2bff      	cmp	r3, #255	; 0xff
    dd28:	d110      	bne.n	dd4c <send_nav_values+0xd58>
    dd2a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dd2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd32:	2200      	movs	r2, #0
    dd34:	701a      	strb	r2, [r3, #0]
    dd36:	e009      	b.n	dd4c <send_nav_values+0xd58>
    dd38:	2001302d 	.word	0x2001302d
    dd3c:	2001302e 	.word	0x2001302e
    dd40:	2001302f 	.word	0x2001302f
    dd44:	20000a39 	.word	0x20000a39
    dd48:	20000a3a 	.word	0x20000a3a
    dd4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dd50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd54:	781b      	ldrb	r3, [r3, #0]
    dd56:	461a      	mov	r2, r3
    dd58:	f640 2338 	movw	r3, #2616	; 0xa38
    dd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd60:	78d9      	ldrb	r1, [r3, #3]
    dd62:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    dd66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd6a:	5499      	strb	r1, [r3, r2]
    dd6c:	4bc2      	ldr	r3, [pc, #776]	; (e078 <send_nav_values+0x1084>)
    dd6e:	781a      	ldrb	r2, [r3, #0]
    dd70:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dd74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd78:	781b      	ldrb	r3, [r3, #0]
    dd7a:	4413      	add	r3, r2
    dd7c:	b2da      	uxtb	r2, r3
    dd7e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dd82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd86:	701a      	strb	r2, [r3, #0]
    dd88:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dd8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd90:	781a      	ldrb	r2, [r3, #0]
    dd92:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dd96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dd9a:	781b      	ldrb	r3, [r3, #0]
    dd9c:	4413      	add	r3, r2
    dd9e:	b2da      	uxtb	r2, r3
    dda0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dda4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dda8:	701a      	strb	r2, [r3, #0]
    ddaa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ddae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddb2:	781b      	ldrb	r3, [r3, #0]
    ddb4:	3301      	adds	r3, #1
    ddb6:	b2da      	uxtb	r2, r3
    ddb8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ddbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddc0:	701a      	strb	r2, [r3, #0]
    ddc2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ddc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	2bff      	cmp	r3, #255	; 0xff
    ddce:	d105      	bne.n	dddc <send_nav_values+0xde8>
    ddd0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ddd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddd8:	2200      	movs	r2, #0
    ddda:	701a      	strb	r2, [r3, #0]
    dddc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dde0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	461a      	mov	r2, r3
    dde8:	f243 0330 	movw	r3, #12336	; 0x3030
    ddec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddf0:	7819      	ldrb	r1, [r3, #0]
    ddf2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ddf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ddfa:	5499      	strb	r1, [r3, r2]
    ddfc:	f243 0330 	movw	r3, #12336	; 0x3030
    de00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de04:	781a      	ldrb	r2, [r3, #0]
    de06:	f642 53a5 	movw	r3, #11685	; 0x2da5
    de0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de0e:	781b      	ldrb	r3, [r3, #0]
    de10:	4413      	add	r3, r2
    de12:	b2da      	uxtb	r2, r3
    de14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    de18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de1c:	701a      	strb	r2, [r3, #0]
    de1e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    de22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de26:	781a      	ldrb	r2, [r3, #0]
    de28:	f642 53a5 	movw	r3, #11685	; 0x2da5
    de2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de30:	781b      	ldrb	r3, [r3, #0]
    de32:	4413      	add	r3, r2
    de34:	b2da      	uxtb	r2, r3
    de36:	f642 53a6 	movw	r3, #11686	; 0x2da6
    de3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de3e:	701a      	strb	r2, [r3, #0]
    de40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    de44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de48:	781b      	ldrb	r3, [r3, #0]
    de4a:	3301      	adds	r3, #1
    de4c:	b2da      	uxtb	r2, r3
    de4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    de52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de56:	701a      	strb	r2, [r3, #0]
    de58:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    de5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de60:	781b      	ldrb	r3, [r3, #0]
    de62:	2bff      	cmp	r3, #255	; 0xff
    de64:	d105      	bne.n	de72 <send_nav_values+0xe7e>
    de66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    de6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de6e:	2200      	movs	r2, #0
    de70:	701a      	strb	r2, [r3, #0]
    de72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    de76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	461a      	mov	r2, r3
    de7e:	f243 0330 	movw	r3, #12336	; 0x3030
    de82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de86:	7859      	ldrb	r1, [r3, #1]
    de88:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    de8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de90:	5499      	strb	r1, [r3, r2]
    de92:	4b7a      	ldr	r3, [pc, #488]	; (e07c <send_nav_values+0x1088>)
    de94:	781a      	ldrb	r2, [r3, #0]
    de96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    de9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	4413      	add	r3, r2
    dea2:	b2da      	uxtb	r2, r3
    dea4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dea8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f642 53a6 	movw	r3, #11686	; 0x2da6
    deb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    deb6:	781a      	ldrb	r2, [r3, #0]
    deb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    debc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dec0:	781b      	ldrb	r3, [r3, #0]
    dec2:	4413      	add	r3, r2
    dec4:	b2da      	uxtb	r2, r3
    dec6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    deca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dece:	701a      	strb	r2, [r3, #0]
    ded0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ded4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ded8:	781b      	ldrb	r3, [r3, #0]
    deda:	3301      	adds	r3, #1
    dedc:	b2da      	uxtb	r2, r3
    dede:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dee2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dee6:	701a      	strb	r2, [r3, #0]
    dee8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    deec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    def0:	781b      	ldrb	r3, [r3, #0]
    def2:	2bff      	cmp	r3, #255	; 0xff
    def4:	d105      	bne.n	df02 <send_nav_values+0xf0e>
    def6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    defa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    defe:	2200      	movs	r2, #0
    df00:	701a      	strb	r2, [r3, #0]
    df02:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df0a:	781b      	ldrb	r3, [r3, #0]
    df0c:	461a      	mov	r2, r3
    df0e:	f243 0330 	movw	r3, #12336	; 0x3030
    df12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df16:	7899      	ldrb	r1, [r3, #2]
    df18:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    df1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df20:	5499      	strb	r1, [r3, r2]
    df22:	4b57      	ldr	r3, [pc, #348]	; (e080 <send_nav_values+0x108c>)
    df24:	781a      	ldrb	r2, [r3, #0]
    df26:	f642 53a5 	movw	r3, #11685	; 0x2da5
    df2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df2e:	781b      	ldrb	r3, [r3, #0]
    df30:	4413      	add	r3, r2
    df32:	b2da      	uxtb	r2, r3
    df34:	f642 53a5 	movw	r3, #11685	; 0x2da5
    df38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df3c:	701a      	strb	r2, [r3, #0]
    df3e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    df42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df46:	781a      	ldrb	r2, [r3, #0]
    df48:	f642 53a5 	movw	r3, #11685	; 0x2da5
    df4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df50:	781b      	ldrb	r3, [r3, #0]
    df52:	4413      	add	r3, r2
    df54:	b2da      	uxtb	r2, r3
    df56:	f642 53a6 	movw	r3, #11686	; 0x2da6
    df5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df5e:	701a      	strb	r2, [r3, #0]
    df60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	3301      	adds	r3, #1
    df6c:	b2da      	uxtb	r2, r3
    df6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df76:	701a      	strb	r2, [r3, #0]
    df78:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df80:	781b      	ldrb	r3, [r3, #0]
    df82:	2bff      	cmp	r3, #255	; 0xff
    df84:	d105      	bne.n	df92 <send_nav_values+0xf9e>
    df86:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df8e:	2200      	movs	r2, #0
    df90:	701a      	strb	r2, [r3, #0]
    df92:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    df96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    df9a:	781b      	ldrb	r3, [r3, #0]
    df9c:	461a      	mov	r2, r3
    df9e:	f243 0330 	movw	r3, #12336	; 0x3030
    dfa2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfa6:	78d9      	ldrb	r1, [r3, #3]
    dfa8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    dfac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfb0:	5499      	strb	r1, [r3, r2]
    dfb2:	4b34      	ldr	r3, [pc, #208]	; (e084 <send_nav_values+0x1090>)
    dfb4:	781a      	ldrb	r2, [r3, #0]
    dfb6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dfba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfbe:	781b      	ldrb	r3, [r3, #0]
    dfc0:	4413      	add	r3, r2
    dfc2:	b2da      	uxtb	r2, r3
    dfc4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dfc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfcc:	701a      	strb	r2, [r3, #0]
    dfce:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dfd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfd6:	781a      	ldrb	r2, [r3, #0]
    dfd8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    dfdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	4413      	add	r3, r2
    dfe4:	b2da      	uxtb	r2, r3
    dfe6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    dfea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dfee:	701a      	strb	r2, [r3, #0]
    dff0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    dff4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	3301      	adds	r3, #1
    dffc:	b2da      	uxtb	r2, r3
    dffe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e002:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e006:	701a      	strb	r2, [r3, #0]
    e008:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e00c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e010:	781b      	ldrb	r3, [r3, #0]
    e012:	2bff      	cmp	r3, #255	; 0xff
    e014:	d105      	bne.n	e022 <send_nav_values+0x102e>
    e016:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e01a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e01e:	2200      	movs	r2, #0
    e020:	701a      	strb	r2, [r3, #0]
    e022:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e026:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e02a:	781b      	ldrb	r3, [r3, #0]
    e02c:	461a      	mov	r2, r3
    e02e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e032:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e036:	7819      	ldrb	r1, [r3, #0]
    e038:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e03c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e040:	5499      	strb	r1, [r3, r2]
    e042:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e046:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	3301      	adds	r3, #1
    e04e:	b2da      	uxtb	r2, r3
    e050:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e054:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e058:	701a      	strb	r2, [r3, #0]
    e05a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e05e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e062:	781b      	ldrb	r3, [r3, #0]
    e064:	2bff      	cmp	r3, #255	; 0xff
    e066:	d10f      	bne.n	e088 <send_nav_values+0x1094>
    e068:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e06c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e070:	2200      	movs	r2, #0
    e072:	701a      	strb	r2, [r3, #0]
    e074:	e008      	b.n	e088 <send_nav_values+0x1094>
    e076:	bf00      	nop
    e078:	20000a3b 	.word	0x20000a3b
    e07c:	20013031 	.word	0x20013031
    e080:	20013032 	.word	0x20013032
    e084:	20013033 	.word	0x20013033
    e088:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e08c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e090:	781b      	ldrb	r3, [r3, #0]
    e092:	461a      	mov	r2, r3
    e094:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e098:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e09c:	7819      	ldrb	r1, [r3, #0]
    e09e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e0a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0a6:	5499      	strb	r1, [r3, r2]
    e0a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e0ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0b0:	781b      	ldrb	r3, [r3, #0]
    e0b2:	3301      	adds	r3, #1
    e0b4:	b2da      	uxtb	r2, r3
    e0b6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e0ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0be:	701a      	strb	r2, [r3, #0]
    e0c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e0c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0c8:	781b      	ldrb	r3, [r3, #0]
    e0ca:	2bff      	cmp	r3, #255	; 0xff
    e0cc:	d105      	bne.n	e0da <send_nav_values+0x10e6>
    e0ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e0d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0d6:	2200      	movs	r2, #0
    e0d8:	701a      	strb	r2, [r3, #0]
    e0da:	f242 0339 	movw	r3, #8249	; 0x2039
    e0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e2:	781b      	ldrb	r3, [r3, #0]
    e0e4:	b2db      	uxtb	r3, r3
    e0e6:	f003 0310 	and.w	r3, r3, #16
    e0ea:	2b00      	cmp	r3, #0
    e0ec:	d15a      	bne.n	e1a4 <send_nav_values+0x11b0>
    e0ee:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e0f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	b2db      	uxtb	r3, r3
    e0fa:	461a      	mov	r2, r3
    e0fc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e100:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e104:	5c9a      	ldrb	r2, [r3, r2]
    e106:	f642 53a3 	movw	r3, #11683	; 0x2da3
    e10a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e10e:	701a      	strb	r2, [r3, #0]
    e110:	f642 53a4 	movw	r3, #11684	; 0x2da4
    e114:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e118:	2200      	movs	r2, #0
    e11a:	701a      	strb	r2, [r3, #0]
    e11c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e120:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e124:	781b      	ldrb	r3, [r3, #0]
    e126:	b2db      	uxtb	r3, r3
    e128:	3301      	adds	r3, #1
    e12a:	b2da      	uxtb	r2, r3
    e12c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e130:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e134:	701a      	strb	r2, [r3, #0]
    e136:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e13a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e13e:	781b      	ldrb	r3, [r3, #0]
    e140:	b2db      	uxtb	r3, r3
    e142:	2bff      	cmp	r3, #255	; 0xff
    e144:	d105      	bne.n	e152 <send_nav_values+0x115e>
    e146:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e14a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e14e:	2200      	movs	r2, #0
    e150:	701a      	strb	r2, [r3, #0]
    e152:	f242 0338 	movw	r3, #8248	; 0x2038
    e156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15a:	f242 0238 	movw	r2, #8248	; 0x2038
    e15e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e162:	7812      	ldrb	r2, [r2, #0]
    e164:	b2d2      	uxtb	r2, r2
    e166:	f042 0201 	orr.w	r2, r2, #1
    e16a:	b2d2      	uxtb	r2, r2
    e16c:	701a      	strb	r2, [r3, #0]
    e16e:	f242 0339 	movw	r3, #8249	; 0x2039
    e172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e176:	f242 0239 	movw	r2, #8249	; 0x2039
    e17a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e17e:	7812      	ldrb	r2, [r2, #0]
    e180:	b2d2      	uxtb	r2, r2
    e182:	f042 0210 	orr.w	r2, r2, #16
    e186:	b2d2      	uxtb	r2, r2
    e188:	701a      	strb	r2, [r3, #0]
    e18a:	e00b      	b.n	e1a4 <send_nav_values+0x11b0>
    e18c:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    e190:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e194:	781b      	ldrb	r3, [r3, #0]
    e196:	3301      	adds	r3, #1
    e198:	b2da      	uxtb	r2, r3
    e19a:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    e19e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1a2:	701a      	strb	r2, [r3, #0]
}
    e1a4:	46bd      	mov	sp, r7
    e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1aa:	4770      	bx	lr

0000e1ac <course_run>:

void course_run(void){
    e1ac:	b580      	push	{r7, lr}
    e1ae:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e1b0:	f642 4384 	movw	r3, #11396	; 0x2c84
    e1b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1b8:	781b      	ldrb	r3, [r3, #0]
    e1ba:	2b02      	cmp	r3, #2
    e1bc:	d006      	beq.n	e1cc <course_run+0x20>
    e1be:	f642 4384 	movw	r3, #11396	; 0x2c84
    e1c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	2b03      	cmp	r3, #3
    e1ca:	d112      	bne.n	e1f2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e1cc:	f642 4386 	movw	r3, #11398	; 0x2c86
    e1d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1d4:	781b      	ldrb	r3, [r3, #0]
    e1d6:	2b02      	cmp	r3, #2
    e1d8:	d901      	bls.n	e1de <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e1da:	f003 faf1 	bl	117c0 <course_pid_run>
    desired_roll = nav_desired_roll;
    e1de:	f243 0328 	movw	r3, #12328	; 0x3028
    e1e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1e6:	681a      	ldr	r2, [r3, #0]
    e1e8:	f642 73cc 	movw	r3, #12236	; 0x2fcc
    e1ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e1f0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e1f2:	bd80      	pop	{r7, pc}

0000e1f4 <altitude_control_task>:

void altitude_control_task(void)
{
    e1f4:	b580      	push	{r7, lr}
    e1f6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e1f8:	f642 4384 	movw	r3, #11396	; 0x2c84
    e1fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	2b02      	cmp	r3, #2
    e204:	d006      	beq.n	e214 <altitude_control_task+0x20>
    e206:	f642 4384 	movw	r3, #11396	; 0x2c84
    e20a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e20e:	781b      	ldrb	r3, [r3, #0]
    e210:	2b03      	cmp	r3, #3
    e212:	d108      	bne.n	e226 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e214:	f642 4385 	movw	r3, #11397	; 0x2c85
    e218:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e21c:	781b      	ldrb	r3, [r3, #0]
    e21e:	2b03      	cmp	r3, #3
    e220:	d101      	bne.n	e226 <altitude_control_task+0x32>
      			altitude_pid_run();
    e222:	f003 fd55 	bl	11cd0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e226:	bd80      	pop	{r7, pc}

0000e228 <climb_control_task>:
void climb_control_task(void)
{
    e228:	b580      	push	{r7, lr}
    e22a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e22c:	f642 4384 	movw	r3, #11396	; 0x2c84
    e230:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e234:	781b      	ldrb	r3, [r3, #0]
    e236:	2b02      	cmp	r3, #2
    e238:	d006      	beq.n	e248 <climb_control_task+0x20>
    e23a:	f642 4384 	movw	r3, #11396	; 0x2c84
    e23e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e242:	781b      	ldrb	r3, [r3, #0]
    e244:	2b03      	cmp	r3, #3
    e246:	d135      	bne.n	e2b4 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e248:	f642 4385 	movw	r3, #11397	; 0x2c85
    e24c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	2b01      	cmp	r3, #1
    e254:	d901      	bls.n	e25a <climb_control_task+0x32>
        	climb_pid_run();
    e256:	f003 fb6b 	bl	11930 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e25a:	f642 4385 	movw	r3, #11397	; 0x2c85
    e25e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	2b01      	cmp	r3, #1
    e266:	d10a      	bne.n	e27e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e268:	f243 0320 	movw	r3, #12320	; 0x3020
    e26c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e270:	881b      	ldrh	r3, [r3, #0]
    e272:	b29a      	uxth	r2, r3
    e274:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    e278:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e27c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e27e:	f642 438d 	movw	r3, #11405	; 0x2c8d
    e282:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e286:	781b      	ldrb	r3, [r3, #0]
    e288:	2b00      	cmp	r3, #0
    e28a:	d10d      	bne.n	e2a8 <climb_control_task+0x80>
    e28c:	f243 2384 	movw	r3, #12932	; 0x3284
    e290:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e294:	881b      	ldrh	r3, [r3, #0]
    e296:	2b00      	cmp	r3, #0
    e298:	d10c      	bne.n	e2b4 <climb_control_task+0x8c>
    e29a:	f642 4398 	movw	r3, #11416	; 0x2c98
    e29e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2a2:	781b      	ldrb	r3, [r3, #0]
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d105      	bne.n	e2b4 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e2a8:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    e2ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2b0:	2200      	movs	r2, #0
    e2b2:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e2b4:	bd80      	pop	{r7, pc}
    e2b6:	bf00      	nop

0000e2b8 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e2b8:	b580      	push	{r7, lr}
    e2ba:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e2bc:	f003 f926 	bl	1150c <ir_update>
    estimator_update_state_infrared();
    e2c0:	f006 fbac 	bl	14a1c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e2c4:	f003 f990 	bl	115e8 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e2c8:	f642 73d4 	movw	r3, #12244	; 0x2fd4
    e2cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2d0:	881a      	ldrh	r2, [r3, #0]
    e2d2:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    e2d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2da:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e2dc:	f642 73d6 	movw	r3, #12246	; 0x2fd6
    e2e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2e4:	881a      	ldrh	r2, [r3, #0]
    e2e6:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    e2ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2ee:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e2f0:	f642 73d8 	movw	r3, #12248	; 0x2fd8
    e2f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e2f8:	881a      	ldrh	r2, [r3, #0]
    e2fa:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    e2fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e302:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e304:	f243 2360 	movw	r3, #12896	; 0x3260
    e308:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e30c:	681b      	ldr	r3, [r3, #0]
    e30e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e312:	4618      	mov	r0, r3
    e314:	f009 f88e 	bl	17434 <__aeabi_f2d>
    e318:	4602      	mov	r2, r0
    e31a:	460b      	mov	r3, r1
    e31c:	4610      	mov	r0, r2
    e31e:	4619      	mov	r1, r3
    e320:	f04f 0200 	mov.w	r2, #0
    e324:	f04f 0300 	mov.w	r3, #0
    e328:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e32c:	f009 f8d6 	bl	174dc <__aeabi_dmul>
    e330:	4602      	mov	r2, r0
    e332:	460b      	mov	r3, r1
    e334:	4610      	mov	r0, r2
    e336:	4619      	mov	r1, r3
    e338:	f04f 0200 	mov.w	r2, #0
    e33c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e340:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e344:	f009 fb3c 	bl	179c0 <__aeabi_dcmplt>
    e348:	4603      	mov	r3, r0
    e34a:	2b00      	cmp	r3, #0
    e34c:	d002      	beq.n	e354 <stabilisation_task+0x9c>
    e34e:	f64d 2280 	movw	r2, #55936	; 0xda80
    e352:	e046      	b.n	e3e2 <stabilisation_task+0x12a>
    e354:	f243 2360 	movw	r3, #12896	; 0x3260
    e358:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e35c:	681b      	ldr	r3, [r3, #0]
    e35e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e362:	4618      	mov	r0, r3
    e364:	f009 f866 	bl	17434 <__aeabi_f2d>
    e368:	4602      	mov	r2, r0
    e36a:	460b      	mov	r3, r1
    e36c:	4610      	mov	r0, r2
    e36e:	4619      	mov	r1, r3
    e370:	f04f 0200 	mov.w	r2, #0
    e374:	f04f 0300 	mov.w	r3, #0
    e378:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e37c:	f009 f8ae 	bl	174dc <__aeabi_dmul>
    e380:	4602      	mov	r2, r0
    e382:	460b      	mov	r3, r1
    e384:	4610      	mov	r0, r2
    e386:	4619      	mov	r1, r3
    e388:	f04f 0200 	mov.w	r2, #0
    e38c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e390:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e394:	f009 fb32 	bl	179fc <__aeabi_dcmpgt>
    e398:	4603      	mov	r3, r0
    e39a:	2b00      	cmp	r3, #0
    e39c:	d002      	beq.n	e3a4 <stabilisation_task+0xec>
    e39e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e3a2:	e01d      	b.n	e3e0 <stabilisation_task+0x128>
    e3a4:	f243 2360 	movw	r3, #12896	; 0x3260
    e3a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e3ac:	681b      	ldr	r3, [r3, #0]
    e3ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e3b2:	4618      	mov	r0, r3
    e3b4:	f009 f83e 	bl	17434 <__aeabi_f2d>
    e3b8:	4602      	mov	r2, r0
    e3ba:	460b      	mov	r3, r1
    e3bc:	4610      	mov	r0, r2
    e3be:	4619      	mov	r1, r3
    e3c0:	f04f 0200 	mov.w	r2, #0
    e3c4:	f04f 0300 	mov.w	r3, #0
    e3c8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e3cc:	f009 f886 	bl	174dc <__aeabi_dmul>
    e3d0:	4602      	mov	r2, r0
    e3d2:	460b      	mov	r3, r1
    e3d4:	4610      	mov	r0, r2
    e3d6:	4619      	mov	r1, r3
    e3d8:	f009 fb1a 	bl	17a10 <__aeabi_d2iz>
    e3dc:	4603      	mov	r3, r0
    e3de:	b29b      	uxth	r3, r3
    e3e0:	b29a      	uxth	r2, r3
    e3e2:	f642 53c0 	movw	r3, #11712	; 0x2dc0
    e3e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e3ea:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e3ec:	bd80      	pop	{r7, pc}
    e3ee:	bf00      	nop

0000e3f0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e3f0:	b580      	push	{r7, lr}
    e3f2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e3f4:	f642 6335 	movw	r3, #11829	; 0x2e35
    e3f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e3fc:	2200      	movs	r2, #0
    e3fe:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e400:	f642 6336 	movw	r3, #11830	; 0x2e36
    e404:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e408:	781b      	ldrb	r3, [r3, #0]
    e40a:	2b00      	cmp	r3, #0
    e40c:	f001 81af 	beq.w	f76e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e410:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e414:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e418:	781a      	ldrb	r2, [r3, #0]
    e41a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e41e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e422:	781b      	ldrb	r3, [r3, #0]
    e424:	b2db      	uxtb	r3, r3
    e426:	429a      	cmp	r2, r3
    e428:	d313      	bcc.n	e452 <send_gps_pos+0x62>
    e42a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e42e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e432:	781b      	ldrb	r3, [r3, #0]
    e434:	b2db      	uxtb	r3, r3
    e436:	461a      	mov	r2, r3
    e438:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e43c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e440:	781b      	ldrb	r3, [r3, #0]
    e442:	1ad3      	subs	r3, r2, r3
    e444:	33ff      	adds	r3, #255	; 0xff
    e446:	2b21      	cmp	r3, #33	; 0x21
    e448:	bfd4      	ite	le
    e44a:	2300      	movle	r3, #0
    e44c:	2301      	movgt	r3, #1
    e44e:	b2db      	uxtb	r3, r3
    e450:	e011      	b.n	e476 <send_gps_pos+0x86>
    e452:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    e456:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e45a:	781b      	ldrb	r3, [r3, #0]
    e45c:	b2db      	uxtb	r3, r3
    e45e:	461a      	mov	r2, r3
    e460:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e464:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e468:	781b      	ldrb	r3, [r3, #0]
    e46a:	1ad3      	subs	r3, r2, r3
    e46c:	2b21      	cmp	r3, #33	; 0x21
    e46e:	bfd4      	ite	le
    e470:	2300      	movle	r3, #0
    e472:	2301      	movgt	r3, #1
    e474:	b2db      	uxtb	r3, r3
    e476:	2b00      	cmp	r3, #0
    e478:	f001 816b 	beq.w	f752 <send_gps_pos+0x1362>
    e47c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e480:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	461a      	mov	r2, r3
    e488:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e48c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e490:	2105      	movs	r1, #5
    e492:	5499      	strb	r1, [r3, r2]
    e494:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e498:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	3301      	adds	r3, #1
    e4a0:	b2da      	uxtb	r2, r3
    e4a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4aa:	701a      	strb	r2, [r3, #0]
    e4ac:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	2bff      	cmp	r3, #255	; 0xff
    e4b8:	d105      	bne.n	e4c6 <send_gps_pos+0xd6>
    e4ba:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4c2:	2200      	movs	r2, #0
    e4c4:	701a      	strb	r2, [r3, #0]
    e4c6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4ce:	781b      	ldrb	r3, [r3, #0]
    e4d0:	461a      	mov	r2, r3
    e4d2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e4d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4da:	2108      	movs	r1, #8
    e4dc:	5499      	strb	r1, [r3, r2]
    e4de:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4e6:	781b      	ldrb	r3, [r3, #0]
    e4e8:	3301      	adds	r3, #1
    e4ea:	b2da      	uxtb	r2, r3
    e4ec:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4f4:	701a      	strb	r2, [r3, #0]
    e4f6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e4fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e4fe:	781b      	ldrb	r3, [r3, #0]
    e500:	2bff      	cmp	r3, #255	; 0xff
    e502:	d105      	bne.n	e510 <send_gps_pos+0x120>
    e504:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e508:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e50c:	2200      	movs	r2, #0
    e50e:	701a      	strb	r2, [r3, #0]
    e510:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e514:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e518:	2208      	movs	r2, #8
    e51a:	701a      	strb	r2, [r3, #0]
    e51c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e520:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e524:	2208      	movs	r2, #8
    e526:	701a      	strb	r2, [r3, #0]
    e528:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e52c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	461a      	mov	r2, r3
    e534:	f642 6334 	movw	r3, #11828	; 0x2e34
    e538:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e53c:	7819      	ldrb	r1, [r3, #0]
    e53e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e542:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e546:	5499      	strb	r1, [r3, r2]
    e548:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e54c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e550:	781a      	ldrb	r2, [r3, #0]
    e552:	f642 6334 	movw	r3, #11828	; 0x2e34
    e556:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e55a:	781b      	ldrb	r3, [r3, #0]
    e55c:	4413      	add	r3, r2
    e55e:	b2da      	uxtb	r2, r3
    e560:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e564:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e568:	701a      	strb	r2, [r3, #0]
    e56a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e56e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e572:	781a      	ldrb	r2, [r3, #0]
    e574:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e578:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e57c:	781b      	ldrb	r3, [r3, #0]
    e57e:	4413      	add	r3, r2
    e580:	b2da      	uxtb	r2, r3
    e582:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e586:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e58a:	701a      	strb	r2, [r3, #0]
    e58c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e590:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e594:	781b      	ldrb	r3, [r3, #0]
    e596:	3301      	adds	r3, #1
    e598:	b2da      	uxtb	r2, r3
    e59a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e59e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5a2:	701a      	strb	r2, [r3, #0]
    e5a4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e5a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5ac:	781b      	ldrb	r3, [r3, #0]
    e5ae:	2bff      	cmp	r3, #255	; 0xff
    e5b0:	d105      	bne.n	e5be <send_gps_pos+0x1ce>
    e5b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e5b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5ba:	2200      	movs	r2, #0
    e5bc:	701a      	strb	r2, [r3, #0]
    e5be:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e5c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5c6:	781b      	ldrb	r3, [r3, #0]
    e5c8:	461a      	mov	r2, r3
    e5ca:	f642 6324 	movw	r3, #11812	; 0x2e24
    e5ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5d2:	7819      	ldrb	r1, [r3, #0]
    e5d4:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e5d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5dc:	5499      	strb	r1, [r3, r2]
    e5de:	f642 6324 	movw	r3, #11812	; 0x2e24
    e5e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5e6:	781a      	ldrb	r2, [r3, #0]
    e5e8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e5ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	4413      	add	r3, r2
    e5f4:	b2da      	uxtb	r2, r3
    e5f6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e5fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e5fe:	701a      	strb	r2, [r3, #0]
    e600:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e604:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e608:	781a      	ldrb	r2, [r3, #0]
    e60a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e60e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	4413      	add	r3, r2
    e616:	b2da      	uxtb	r2, r3
    e618:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e61c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e620:	701a      	strb	r2, [r3, #0]
    e622:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e626:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	3301      	adds	r3, #1
    e62e:	b2da      	uxtb	r2, r3
    e630:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e634:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e638:	701a      	strb	r2, [r3, #0]
    e63a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e63e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2bff      	cmp	r3, #255	; 0xff
    e646:	d105      	bne.n	e654 <send_gps_pos+0x264>
    e648:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e64c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e650:	2200      	movs	r2, #0
    e652:	701a      	strb	r2, [r3, #0]
    e654:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e658:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e65c:	781b      	ldrb	r3, [r3, #0]
    e65e:	461a      	mov	r2, r3
    e660:	f642 6324 	movw	r3, #11812	; 0x2e24
    e664:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e668:	7859      	ldrb	r1, [r3, #1]
    e66a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e66e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e672:	5499      	strb	r1, [r3, r2]
    e674:	4bd1      	ldr	r3, [pc, #836]	; (e9bc <send_gps_pos+0x5cc>)
    e676:	781a      	ldrb	r2, [r3, #0]
    e678:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e67c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e680:	781b      	ldrb	r3, [r3, #0]
    e682:	4413      	add	r3, r2
    e684:	b2da      	uxtb	r2, r3
    e686:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e68a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e68e:	701a      	strb	r2, [r3, #0]
    e690:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e694:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e698:	781a      	ldrb	r2, [r3, #0]
    e69a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e69e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6a2:	781b      	ldrb	r3, [r3, #0]
    e6a4:	4413      	add	r3, r2
    e6a6:	b2da      	uxtb	r2, r3
    e6a8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e6ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6b0:	701a      	strb	r2, [r3, #0]
    e6b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e6b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	3301      	adds	r3, #1
    e6be:	b2da      	uxtb	r2, r3
    e6c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e6c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6c8:	701a      	strb	r2, [r3, #0]
    e6ca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e6ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6d2:	781b      	ldrb	r3, [r3, #0]
    e6d4:	2bff      	cmp	r3, #255	; 0xff
    e6d6:	d105      	bne.n	e6e4 <send_gps_pos+0x2f4>
    e6d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e6dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6e0:	2200      	movs	r2, #0
    e6e2:	701a      	strb	r2, [r3, #0]
    e6e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e6e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	461a      	mov	r2, r3
    e6f0:	f642 6324 	movw	r3, #11812	; 0x2e24
    e6f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e6f8:	7899      	ldrb	r1, [r3, #2]
    e6fa:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e6fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e702:	5499      	strb	r1, [r3, r2]
    e704:	4bae      	ldr	r3, [pc, #696]	; (e9c0 <send_gps_pos+0x5d0>)
    e706:	781a      	ldrb	r2, [r3, #0]
    e708:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e70c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e710:	781b      	ldrb	r3, [r3, #0]
    e712:	4413      	add	r3, r2
    e714:	b2da      	uxtb	r2, r3
    e716:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e71a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e71e:	701a      	strb	r2, [r3, #0]
    e720:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e724:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e728:	781a      	ldrb	r2, [r3, #0]
    e72a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e72e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	4413      	add	r3, r2
    e736:	b2da      	uxtb	r2, r3
    e738:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e73c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e740:	701a      	strb	r2, [r3, #0]
    e742:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e746:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e74a:	781b      	ldrb	r3, [r3, #0]
    e74c:	3301      	adds	r3, #1
    e74e:	b2da      	uxtb	r2, r3
    e750:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e754:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e758:	701a      	strb	r2, [r3, #0]
    e75a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e75e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e762:	781b      	ldrb	r3, [r3, #0]
    e764:	2bff      	cmp	r3, #255	; 0xff
    e766:	d105      	bne.n	e774 <send_gps_pos+0x384>
    e768:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e76c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e770:	2200      	movs	r2, #0
    e772:	701a      	strb	r2, [r3, #0]
    e774:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e778:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e77c:	781b      	ldrb	r3, [r3, #0]
    e77e:	461a      	mov	r2, r3
    e780:	f642 6324 	movw	r3, #11812	; 0x2e24
    e784:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e788:	78d9      	ldrb	r1, [r3, #3]
    e78a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e78e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e792:	5499      	strb	r1, [r3, r2]
    e794:	4b8b      	ldr	r3, [pc, #556]	; (e9c4 <send_gps_pos+0x5d4>)
    e796:	781a      	ldrb	r2, [r3, #0]
    e798:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e79c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	4413      	add	r3, r2
    e7a4:	b2da      	uxtb	r2, r3
    e7a6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e7aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7ae:	701a      	strb	r2, [r3, #0]
    e7b0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e7b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7b8:	781a      	ldrb	r2, [r3, #0]
    e7ba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e7be:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7c2:	781b      	ldrb	r3, [r3, #0]
    e7c4:	4413      	add	r3, r2
    e7c6:	b2da      	uxtb	r2, r3
    e7c8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e7cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7d0:	701a      	strb	r2, [r3, #0]
    e7d2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e7d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	3301      	adds	r3, #1
    e7de:	b2da      	uxtb	r2, r3
    e7e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e7e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7e8:	701a      	strb	r2, [r3, #0]
    e7ea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e7ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	2bff      	cmp	r3, #255	; 0xff
    e7f6:	d105      	bne.n	e804 <send_gps_pos+0x414>
    e7f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e7fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e800:	2200      	movs	r2, #0
    e802:	701a      	strb	r2, [r3, #0]
    e804:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e808:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e80c:	781b      	ldrb	r3, [r3, #0]
    e80e:	461a      	mov	r2, r3
    e810:	f642 6328 	movw	r3, #11816	; 0x2e28
    e814:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e818:	7819      	ldrb	r1, [r3, #0]
    e81a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e81e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e822:	5499      	strb	r1, [r3, r2]
    e824:	f642 6328 	movw	r3, #11816	; 0x2e28
    e828:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e82c:	781a      	ldrb	r2, [r3, #0]
    e82e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e832:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e836:	781b      	ldrb	r3, [r3, #0]
    e838:	4413      	add	r3, r2
    e83a:	b2da      	uxtb	r2, r3
    e83c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e840:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e844:	701a      	strb	r2, [r3, #0]
    e846:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e84a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e84e:	781a      	ldrb	r2, [r3, #0]
    e850:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e854:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	4413      	add	r3, r2
    e85c:	b2da      	uxtb	r2, r3
    e85e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e862:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e866:	701a      	strb	r2, [r3, #0]
    e868:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e86c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e870:	781b      	ldrb	r3, [r3, #0]
    e872:	3301      	adds	r3, #1
    e874:	b2da      	uxtb	r2, r3
    e876:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e87a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e87e:	701a      	strb	r2, [r3, #0]
    e880:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e884:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e888:	781b      	ldrb	r3, [r3, #0]
    e88a:	2bff      	cmp	r3, #255	; 0xff
    e88c:	d105      	bne.n	e89a <send_gps_pos+0x4aa>
    e88e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e892:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e896:	2200      	movs	r2, #0
    e898:	701a      	strb	r2, [r3, #0]
    e89a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e89e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8a2:	781b      	ldrb	r3, [r3, #0]
    e8a4:	461a      	mov	r2, r3
    e8a6:	f642 6328 	movw	r3, #11816	; 0x2e28
    e8aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8ae:	7859      	ldrb	r1, [r3, #1]
    e8b0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e8b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8b8:	5499      	strb	r1, [r3, r2]
    e8ba:	4b43      	ldr	r3, [pc, #268]	; (e9c8 <send_gps_pos+0x5d8>)
    e8bc:	781a      	ldrb	r2, [r3, #0]
    e8be:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e8c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8c6:	781b      	ldrb	r3, [r3, #0]
    e8c8:	4413      	add	r3, r2
    e8ca:	b2da      	uxtb	r2, r3
    e8cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e8d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8d4:	701a      	strb	r2, [r3, #0]
    e8d6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e8da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8de:	781a      	ldrb	r2, [r3, #0]
    e8e0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e8e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	4413      	add	r3, r2
    e8ec:	b2da      	uxtb	r2, r3
    e8ee:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e8f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e8f6:	701a      	strb	r2, [r3, #0]
    e8f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e8fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e900:	781b      	ldrb	r3, [r3, #0]
    e902:	3301      	adds	r3, #1
    e904:	b2da      	uxtb	r2, r3
    e906:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e90a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e90e:	701a      	strb	r2, [r3, #0]
    e910:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e914:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e918:	781b      	ldrb	r3, [r3, #0]
    e91a:	2bff      	cmp	r3, #255	; 0xff
    e91c:	d105      	bne.n	e92a <send_gps_pos+0x53a>
    e91e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e922:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e926:	2200      	movs	r2, #0
    e928:	701a      	strb	r2, [r3, #0]
    e92a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e92e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e932:	781b      	ldrb	r3, [r3, #0]
    e934:	461a      	mov	r2, r3
    e936:	f642 6328 	movw	r3, #11816	; 0x2e28
    e93a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e93e:	7899      	ldrb	r1, [r3, #2]
    e940:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e944:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e948:	5499      	strb	r1, [r3, r2]
    e94a:	4b20      	ldr	r3, [pc, #128]	; (e9cc <send_gps_pos+0x5dc>)
    e94c:	781a      	ldrb	r2, [r3, #0]
    e94e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e952:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e956:	781b      	ldrb	r3, [r3, #0]
    e958:	4413      	add	r3, r2
    e95a:	b2da      	uxtb	r2, r3
    e95c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e960:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e964:	701a      	strb	r2, [r3, #0]
    e966:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e96a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e96e:	781a      	ldrb	r2, [r3, #0]
    e970:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e974:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	4413      	add	r3, r2
    e97c:	b2da      	uxtb	r2, r3
    e97e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    e982:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e986:	701a      	strb	r2, [r3, #0]
    e988:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e98c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	3301      	adds	r3, #1
    e994:	b2da      	uxtb	r2, r3
    e996:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e99a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e99e:	701a      	strb	r2, [r3, #0]
    e9a0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e9a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	2bff      	cmp	r3, #255	; 0xff
    e9ac:	d110      	bne.n	e9d0 <send_gps_pos+0x5e0>
    e9ae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e9b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9b6:	2200      	movs	r2, #0
    e9b8:	701a      	strb	r2, [r3, #0]
    e9ba:	e009      	b.n	e9d0 <send_gps_pos+0x5e0>
    e9bc:	20012e25 	.word	0x20012e25
    e9c0:	20012e26 	.word	0x20012e26
    e9c4:	20012e27 	.word	0x20012e27
    e9c8:	20012e29 	.word	0x20012e29
    e9cc:	20012e2a 	.word	0x20012e2a
    e9d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    e9d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	461a      	mov	r2, r3
    e9dc:	f642 6328 	movw	r3, #11816	; 0x2e28
    e9e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9e4:	78d9      	ldrb	r1, [r3, #3]
    e9e6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    e9ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9ee:	5499      	strb	r1, [r3, r2]
    e9f0:	4bd3      	ldr	r3, [pc, #844]	; (ed40 <send_gps_pos+0x950>)
    e9f2:	781a      	ldrb	r2, [r3, #0]
    e9f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    e9f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    e9fc:	781b      	ldrb	r3, [r3, #0]
    e9fe:	4413      	add	r3, r2
    ea00:	b2da      	uxtb	r2, r3
    ea02:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ea06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea0a:	701a      	strb	r2, [r3, #0]
    ea0c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ea10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea14:	781a      	ldrb	r2, [r3, #0]
    ea16:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ea1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea1e:	781b      	ldrb	r3, [r3, #0]
    ea20:	4413      	add	r3, r2
    ea22:	b2da      	uxtb	r2, r3
    ea24:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ea28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea2c:	701a      	strb	r2, [r3, #0]
    ea2e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ea32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea36:	781b      	ldrb	r3, [r3, #0]
    ea38:	3301      	adds	r3, #1
    ea3a:	b2da      	uxtb	r2, r3
    ea3c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ea40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea44:	701a      	strb	r2, [r3, #0]
    ea46:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ea4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea4e:	781b      	ldrb	r3, [r3, #0]
    ea50:	2bff      	cmp	r3, #255	; 0xff
    ea52:	d105      	bne.n	ea60 <send_gps_pos+0x670>
    ea54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ea58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea5c:	2200      	movs	r2, #0
    ea5e:	701a      	strb	r2, [r3, #0]
    ea60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ea64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea68:	781b      	ldrb	r3, [r3, #0]
    ea6a:	461a      	mov	r2, r3
    ea6c:	f642 6320 	movw	r3, #11808	; 0x2e20
    ea70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea74:	7819      	ldrb	r1, [r3, #0]
    ea76:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ea7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea7e:	5499      	strb	r1, [r3, r2]
    ea80:	f642 6320 	movw	r3, #11808	; 0x2e20
    ea84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea88:	781a      	ldrb	r2, [r3, #0]
    ea8a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ea8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	4413      	add	r3, r2
    ea96:	b2da      	uxtb	r2, r3
    ea98:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ea9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eaa0:	701a      	strb	r2, [r3, #0]
    eaa2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eaa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eaaa:	781a      	ldrb	r2, [r3, #0]
    eaac:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eab0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	4413      	add	r3, r2
    eab8:	b2da      	uxtb	r2, r3
    eaba:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eabe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eac2:	701a      	strb	r2, [r3, #0]
    eac4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eac8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	3301      	adds	r3, #1
    ead0:	b2da      	uxtb	r2, r3
    ead2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ead6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eada:	701a      	strb	r2, [r3, #0]
    eadc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eae0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eae4:	781b      	ldrb	r3, [r3, #0]
    eae6:	2bff      	cmp	r3, #255	; 0xff
    eae8:	d105      	bne.n	eaf6 <send_gps_pos+0x706>
    eaea:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eaee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eaf2:	2200      	movs	r2, #0
    eaf4:	701a      	strb	r2, [r3, #0]
    eaf6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eafa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eafe:	781b      	ldrb	r3, [r3, #0]
    eb00:	461a      	mov	r2, r3
    eb02:	f642 6320 	movw	r3, #11808	; 0x2e20
    eb06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb0a:	7859      	ldrb	r1, [r3, #1]
    eb0c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    eb10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb14:	5499      	strb	r1, [r3, r2]
    eb16:	4b8b      	ldr	r3, [pc, #556]	; (ed44 <send_gps_pos+0x954>)
    eb18:	781a      	ldrb	r2, [r3, #0]
    eb1a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eb1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb22:	781b      	ldrb	r3, [r3, #0]
    eb24:	4413      	add	r3, r2
    eb26:	b2da      	uxtb	r2, r3
    eb28:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eb2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb30:	701a      	strb	r2, [r3, #0]
    eb32:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eb36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb3a:	781a      	ldrb	r2, [r3, #0]
    eb3c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eb40:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	4413      	add	r3, r2
    eb48:	b2da      	uxtb	r2, r3
    eb4a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eb4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb52:	701a      	strb	r2, [r3, #0]
    eb54:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eb58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb5c:	781b      	ldrb	r3, [r3, #0]
    eb5e:	3301      	adds	r3, #1
    eb60:	b2da      	uxtb	r2, r3
    eb62:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eb66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb6a:	701a      	strb	r2, [r3, #0]
    eb6c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eb70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb74:	781b      	ldrb	r3, [r3, #0]
    eb76:	2bff      	cmp	r3, #255	; 0xff
    eb78:	d105      	bne.n	eb86 <send_gps_pos+0x796>
    eb7a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eb7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb82:	2200      	movs	r2, #0
    eb84:	701a      	strb	r2, [r3, #0]
    eb86:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eb8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb8e:	781b      	ldrb	r3, [r3, #0]
    eb90:	461a      	mov	r2, r3
    eb92:	f642 6320 	movw	r3, #11808	; 0x2e20
    eb96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eb9a:	7899      	ldrb	r1, [r3, #2]
    eb9c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    eba0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eba4:	5499      	strb	r1, [r3, r2]
    eba6:	4b68      	ldr	r3, [pc, #416]	; (ed48 <send_gps_pos+0x958>)
    eba8:	781a      	ldrb	r2, [r3, #0]
    ebaa:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ebae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebb2:	781b      	ldrb	r3, [r3, #0]
    ebb4:	4413      	add	r3, r2
    ebb6:	b2da      	uxtb	r2, r3
    ebb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ebbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebc0:	701a      	strb	r2, [r3, #0]
    ebc2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ebc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebca:	781a      	ldrb	r2, [r3, #0]
    ebcc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ebd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebd4:	781b      	ldrb	r3, [r3, #0]
    ebd6:	4413      	add	r3, r2
    ebd8:	b2da      	uxtb	r2, r3
    ebda:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ebde:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebe2:	701a      	strb	r2, [r3, #0]
    ebe4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ebe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebec:	781b      	ldrb	r3, [r3, #0]
    ebee:	3301      	adds	r3, #1
    ebf0:	b2da      	uxtb	r2, r3
    ebf2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ebf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ebfa:	701a      	strb	r2, [r3, #0]
    ebfc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec04:	781b      	ldrb	r3, [r3, #0]
    ec06:	2bff      	cmp	r3, #255	; 0xff
    ec08:	d105      	bne.n	ec16 <send_gps_pos+0x826>
    ec0a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec12:	2200      	movs	r2, #0
    ec14:	701a      	strb	r2, [r3, #0]
    ec16:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec1e:	781b      	ldrb	r3, [r3, #0]
    ec20:	461a      	mov	r2, r3
    ec22:	f642 6320 	movw	r3, #11808	; 0x2e20
    ec26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec2a:	78d9      	ldrb	r1, [r3, #3]
    ec2c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ec30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec34:	5499      	strb	r1, [r3, r2]
    ec36:	4b45      	ldr	r3, [pc, #276]	; (ed4c <send_gps_pos+0x95c>)
    ec38:	781a      	ldrb	r2, [r3, #0]
    ec3a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ec3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec42:	781b      	ldrb	r3, [r3, #0]
    ec44:	4413      	add	r3, r2
    ec46:	b2da      	uxtb	r2, r3
    ec48:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ec4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec50:	701a      	strb	r2, [r3, #0]
    ec52:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ec56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec5a:	781a      	ldrb	r2, [r3, #0]
    ec5c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ec60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec64:	781b      	ldrb	r3, [r3, #0]
    ec66:	4413      	add	r3, r2
    ec68:	b2da      	uxtb	r2, r3
    ec6a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ec6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec72:	701a      	strb	r2, [r3, #0]
    ec74:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec7c:	781b      	ldrb	r3, [r3, #0]
    ec7e:	3301      	adds	r3, #1
    ec80:	b2da      	uxtb	r2, r3
    ec82:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec8a:	701a      	strb	r2, [r3, #0]
    ec8c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ec94:	781b      	ldrb	r3, [r3, #0]
    ec96:	2bff      	cmp	r3, #255	; 0xff
    ec98:	d105      	bne.n	eca6 <send_gps_pos+0x8b6>
    ec9a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ec9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eca2:	2200      	movs	r2, #0
    eca4:	701a      	strb	r2, [r3, #0]
    eca6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ecaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecae:	781b      	ldrb	r3, [r3, #0]
    ecb0:	461a      	mov	r2, r3
    ecb2:	f642 6314 	movw	r3, #11796	; 0x2e14
    ecb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecba:	7819      	ldrb	r1, [r3, #0]
    ecbc:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ecc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecc4:	5499      	strb	r1, [r3, r2]
    ecc6:	f642 6314 	movw	r3, #11796	; 0x2e14
    ecca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecce:	781a      	ldrb	r2, [r3, #0]
    ecd0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ecd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecd8:	781b      	ldrb	r3, [r3, #0]
    ecda:	4413      	add	r3, r2
    ecdc:	b2da      	uxtb	r2, r3
    ecde:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ece2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ece6:	701a      	strb	r2, [r3, #0]
    ece8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ecec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecf0:	781a      	ldrb	r2, [r3, #0]
    ecf2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ecf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	4413      	add	r3, r2
    ecfe:	b2da      	uxtb	r2, r3
    ed00:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ed04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed08:	701a      	strb	r2, [r3, #0]
    ed0a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ed0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed12:	781b      	ldrb	r3, [r3, #0]
    ed14:	3301      	adds	r3, #1
    ed16:	b2da      	uxtb	r2, r3
    ed18:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ed1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed20:	701a      	strb	r2, [r3, #0]
    ed22:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ed26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	2bff      	cmp	r3, #255	; 0xff
    ed2e:	d10f      	bne.n	ed50 <send_gps_pos+0x960>
    ed30:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ed34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed38:	2200      	movs	r2, #0
    ed3a:	701a      	strb	r2, [r3, #0]
    ed3c:	e008      	b.n	ed50 <send_gps_pos+0x960>
    ed3e:	bf00      	nop
    ed40:	20012e2b 	.word	0x20012e2b
    ed44:	20012e21 	.word	0x20012e21
    ed48:	20012e22 	.word	0x20012e22
    ed4c:	20012e23 	.word	0x20012e23
    ed50:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ed54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed58:	781b      	ldrb	r3, [r3, #0]
    ed5a:	461a      	mov	r2, r3
    ed5c:	f642 6314 	movw	r3, #11796	; 0x2e14
    ed60:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed64:	7859      	ldrb	r1, [r3, #1]
    ed66:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ed6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed6e:	5499      	strb	r1, [r3, r2]
    ed70:	4bd1      	ldr	r3, [pc, #836]	; (f0b8 <send_gps_pos+0xcc8>)
    ed72:	781a      	ldrb	r2, [r3, #0]
    ed74:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ed78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	4413      	add	r3, r2
    ed80:	b2da      	uxtb	r2, r3
    ed82:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ed86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed8a:	701a      	strb	r2, [r3, #0]
    ed8c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ed90:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed94:	781a      	ldrb	r2, [r3, #0]
    ed96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ed9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ed9e:	781b      	ldrb	r3, [r3, #0]
    eda0:	4413      	add	r3, r2
    eda2:	b2da      	uxtb	r2, r3
    eda4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eda8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edac:	701a      	strb	r2, [r3, #0]
    edae:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    edb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	3301      	adds	r3, #1
    edba:	b2da      	uxtb	r2, r3
    edbc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    edc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edc4:	701a      	strb	r2, [r3, #0]
    edc6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    edca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	2bff      	cmp	r3, #255	; 0xff
    edd2:	d105      	bne.n	ede0 <send_gps_pos+0x9f0>
    edd4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    edd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eddc:	2200      	movs	r2, #0
    edde:	701a      	strb	r2, [r3, #0]
    ede0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ede4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ede8:	781b      	ldrb	r3, [r3, #0]
    edea:	461a      	mov	r2, r3
    edec:	f642 6314 	movw	r3, #11796	; 0x2e14
    edf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edf4:	7899      	ldrb	r1, [r3, #2]
    edf6:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    edfa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    edfe:	5499      	strb	r1, [r3, r2]
    ee00:	4bae      	ldr	r3, [pc, #696]	; (f0bc <send_gps_pos+0xccc>)
    ee02:	781a      	ldrb	r2, [r3, #0]
    ee04:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ee08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	4413      	add	r3, r2
    ee10:	b2da      	uxtb	r2, r3
    ee12:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ee16:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee1a:	701a      	strb	r2, [r3, #0]
    ee1c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ee20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee24:	781a      	ldrb	r2, [r3, #0]
    ee26:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ee2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee2e:	781b      	ldrb	r3, [r3, #0]
    ee30:	4413      	add	r3, r2
    ee32:	b2da      	uxtb	r2, r3
    ee34:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ee38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee3c:	701a      	strb	r2, [r3, #0]
    ee3e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ee42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee46:	781b      	ldrb	r3, [r3, #0]
    ee48:	3301      	adds	r3, #1
    ee4a:	b2da      	uxtb	r2, r3
    ee4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ee50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee54:	701a      	strb	r2, [r3, #0]
    ee56:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ee5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	2bff      	cmp	r3, #255	; 0xff
    ee62:	d105      	bne.n	ee70 <send_gps_pos+0xa80>
    ee64:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ee68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee6c:	2200      	movs	r2, #0
    ee6e:	701a      	strb	r2, [r3, #0]
    ee70:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ee74:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee78:	781b      	ldrb	r3, [r3, #0]
    ee7a:	461a      	mov	r2, r3
    ee7c:	f642 6314 	movw	r3, #11796	; 0x2e14
    ee80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee84:	78d9      	ldrb	r1, [r3, #3]
    ee86:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ee8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee8e:	5499      	strb	r1, [r3, r2]
    ee90:	4b8b      	ldr	r3, [pc, #556]	; (f0c0 <send_gps_pos+0xcd0>)
    ee92:	781a      	ldrb	r2, [r3, #0]
    ee94:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ee98:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ee9c:	781b      	ldrb	r3, [r3, #0]
    ee9e:	4413      	add	r3, r2
    eea0:	b2da      	uxtb	r2, r3
    eea2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eea6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eeaa:	701a      	strb	r2, [r3, #0]
    eeac:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eeb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eeb4:	781a      	ldrb	r2, [r3, #0]
    eeb6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    eeba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eebe:	781b      	ldrb	r3, [r3, #0]
    eec0:	4413      	add	r3, r2
    eec2:	b2da      	uxtb	r2, r3
    eec4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    eec8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eecc:	701a      	strb	r2, [r3, #0]
    eece:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eed2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eed6:	781b      	ldrb	r3, [r3, #0]
    eed8:	3301      	adds	r3, #1
    eeda:	b2da      	uxtb	r2, r3
    eedc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eee0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eee4:	701a      	strb	r2, [r3, #0]
    eee6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eeea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eeee:	781b      	ldrb	r3, [r3, #0]
    eef0:	2bff      	cmp	r3, #255	; 0xff
    eef2:	d105      	bne.n	ef00 <send_gps_pos+0xb10>
    eef4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eef8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eefc:	2200      	movs	r2, #0
    eefe:	701a      	strb	r2, [r3, #0]
    ef00:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef08:	781b      	ldrb	r3, [r3, #0]
    ef0a:	461a      	mov	r2, r3
    ef0c:	f642 6318 	movw	r3, #11800	; 0x2e18
    ef10:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef14:	7819      	ldrb	r1, [r3, #0]
    ef16:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ef1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef1e:	5499      	strb	r1, [r3, r2]
    ef20:	f642 6318 	movw	r3, #11800	; 0x2e18
    ef24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef28:	781a      	ldrb	r2, [r3, #0]
    ef2a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ef2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	4413      	add	r3, r2
    ef36:	b2da      	uxtb	r2, r3
    ef38:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ef3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef40:	701a      	strb	r2, [r3, #0]
    ef42:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ef46:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef4a:	781a      	ldrb	r2, [r3, #0]
    ef4c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ef50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef54:	781b      	ldrb	r3, [r3, #0]
    ef56:	4413      	add	r3, r2
    ef58:	b2da      	uxtb	r2, r3
    ef5a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ef5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef62:	701a      	strb	r2, [r3, #0]
    ef64:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef6c:	781b      	ldrb	r3, [r3, #0]
    ef6e:	3301      	adds	r3, #1
    ef70:	b2da      	uxtb	r2, r3
    ef72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef7a:	701a      	strb	r2, [r3, #0]
    ef7c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef84:	781b      	ldrb	r3, [r3, #0]
    ef86:	2bff      	cmp	r3, #255	; 0xff
    ef88:	d105      	bne.n	ef96 <send_gps_pos+0xba6>
    ef8a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef92:	2200      	movs	r2, #0
    ef94:	701a      	strb	r2, [r3, #0]
    ef96:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ef9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ef9e:	781b      	ldrb	r3, [r3, #0]
    efa0:	461a      	mov	r2, r3
    efa2:	f642 6318 	movw	r3, #11800	; 0x2e18
    efa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efaa:	7859      	ldrb	r1, [r3, #1]
    efac:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    efb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efb4:	5499      	strb	r1, [r3, r2]
    efb6:	4b43      	ldr	r3, [pc, #268]	; (f0c4 <send_gps_pos+0xcd4>)
    efb8:	781a      	ldrb	r2, [r3, #0]
    efba:	f642 53a5 	movw	r3, #11685	; 0x2da5
    efbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	4413      	add	r3, r2
    efc6:	b2da      	uxtb	r2, r3
    efc8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    efcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efd0:	701a      	strb	r2, [r3, #0]
    efd2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    efd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efda:	781a      	ldrb	r2, [r3, #0]
    efdc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    efe0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    efe4:	781b      	ldrb	r3, [r3, #0]
    efe6:	4413      	add	r3, r2
    efe8:	b2da      	uxtb	r2, r3
    efea:	f642 53a6 	movw	r3, #11686	; 0x2da6
    efee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    eff2:	701a      	strb	r2, [r3, #0]
    eff4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    eff8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    effc:	781b      	ldrb	r3, [r3, #0]
    effe:	3301      	adds	r3, #1
    f000:	b2da      	uxtb	r2, r3
    f002:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f006:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f00a:	701a      	strb	r2, [r3, #0]
    f00c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f010:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f014:	781b      	ldrb	r3, [r3, #0]
    f016:	2bff      	cmp	r3, #255	; 0xff
    f018:	d105      	bne.n	f026 <send_gps_pos+0xc36>
    f01a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f01e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f022:	2200      	movs	r2, #0
    f024:	701a      	strb	r2, [r3, #0]
    f026:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f02a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f02e:	781b      	ldrb	r3, [r3, #0]
    f030:	461a      	mov	r2, r3
    f032:	f642 6318 	movw	r3, #11800	; 0x2e18
    f036:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f03a:	7899      	ldrb	r1, [r3, #2]
    f03c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f040:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f044:	5499      	strb	r1, [r3, r2]
    f046:	4b20      	ldr	r3, [pc, #128]	; (f0c8 <send_gps_pos+0xcd8>)
    f048:	781a      	ldrb	r2, [r3, #0]
    f04a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f04e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f052:	781b      	ldrb	r3, [r3, #0]
    f054:	4413      	add	r3, r2
    f056:	b2da      	uxtb	r2, r3
    f058:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f05c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f060:	701a      	strb	r2, [r3, #0]
    f062:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f066:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f06a:	781a      	ldrb	r2, [r3, #0]
    f06c:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f070:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f074:	781b      	ldrb	r3, [r3, #0]
    f076:	4413      	add	r3, r2
    f078:	b2da      	uxtb	r2, r3
    f07a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f07e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f082:	701a      	strb	r2, [r3, #0]
    f084:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f088:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	3301      	adds	r3, #1
    f090:	b2da      	uxtb	r2, r3
    f092:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f096:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f09a:	701a      	strb	r2, [r3, #0]
    f09c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f0a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0a4:	781b      	ldrb	r3, [r3, #0]
    f0a6:	2bff      	cmp	r3, #255	; 0xff
    f0a8:	d110      	bne.n	f0cc <send_gps_pos+0xcdc>
    f0aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f0ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0b2:	2200      	movs	r2, #0
    f0b4:	701a      	strb	r2, [r3, #0]
    f0b6:	e009      	b.n	f0cc <send_gps_pos+0xcdc>
    f0b8:	20012e15 	.word	0x20012e15
    f0bc:	20012e16 	.word	0x20012e16
    f0c0:	20012e17 	.word	0x20012e17
    f0c4:	20012e19 	.word	0x20012e19
    f0c8:	20012e1a 	.word	0x20012e1a
    f0cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f0d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	461a      	mov	r2, r3
    f0d8:	f642 6318 	movw	r3, #11800	; 0x2e18
    f0dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0e0:	78d9      	ldrb	r1, [r3, #3]
    f0e2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f0e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0ea:	5499      	strb	r1, [r3, r2]
    f0ec:	4bd3      	ldr	r3, [pc, #844]	; (f43c <send_gps_pos+0x104c>)
    f0ee:	781a      	ldrb	r2, [r3, #0]
    f0f0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f0f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f0f8:	781b      	ldrb	r3, [r3, #0]
    f0fa:	4413      	add	r3, r2
    f0fc:	b2da      	uxtb	r2, r3
    f0fe:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f102:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f106:	701a      	strb	r2, [r3, #0]
    f108:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f10c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f110:	781a      	ldrb	r2, [r3, #0]
    f112:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f116:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	4413      	add	r3, r2
    f11e:	b2da      	uxtb	r2, r3
    f120:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f124:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f128:	701a      	strb	r2, [r3, #0]
    f12a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f12e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f132:	781b      	ldrb	r3, [r3, #0]
    f134:	3301      	adds	r3, #1
    f136:	b2da      	uxtb	r2, r3
    f138:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f13c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f140:	701a      	strb	r2, [r3, #0]
    f142:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f146:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f14a:	781b      	ldrb	r3, [r3, #0]
    f14c:	2bff      	cmp	r3, #255	; 0xff
    f14e:	d105      	bne.n	f15c <send_gps_pos+0xd6c>
    f150:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f154:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f158:	2200      	movs	r2, #0
    f15a:	701a      	strb	r2, [r3, #0]
    f15c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f160:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f164:	781b      	ldrb	r3, [r3, #0]
    f166:	461a      	mov	r2, r3
    f168:	f642 631c 	movw	r3, #11804	; 0x2e1c
    f16c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f170:	7819      	ldrb	r1, [r3, #0]
    f172:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f176:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f17a:	5499      	strb	r1, [r3, r2]
    f17c:	f642 631c 	movw	r3, #11804	; 0x2e1c
    f180:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f184:	781a      	ldrb	r2, [r3, #0]
    f186:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f18a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f18e:	781b      	ldrb	r3, [r3, #0]
    f190:	4413      	add	r3, r2
    f192:	b2da      	uxtb	r2, r3
    f194:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f198:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f19c:	701a      	strb	r2, [r3, #0]
    f19e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f1a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1a6:	781a      	ldrb	r2, [r3, #0]
    f1a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f1ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1b0:	781b      	ldrb	r3, [r3, #0]
    f1b2:	4413      	add	r3, r2
    f1b4:	b2da      	uxtb	r2, r3
    f1b6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f1ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1be:	701a      	strb	r2, [r3, #0]
    f1c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f1c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	3301      	adds	r3, #1
    f1cc:	b2da      	uxtb	r2, r3
    f1ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f1d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1d6:	701a      	strb	r2, [r3, #0]
    f1d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f1dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1e0:	781b      	ldrb	r3, [r3, #0]
    f1e2:	2bff      	cmp	r3, #255	; 0xff
    f1e4:	d105      	bne.n	f1f2 <send_gps_pos+0xe02>
    f1e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f1ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1ee:	2200      	movs	r2, #0
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f1f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f1fa:	781b      	ldrb	r3, [r3, #0]
    f1fc:	461a      	mov	r2, r3
    f1fe:	f642 631c 	movw	r3, #11804	; 0x2e1c
    f202:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f206:	7859      	ldrb	r1, [r3, #1]
    f208:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f20c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f210:	5499      	strb	r1, [r3, r2]
    f212:	4b8b      	ldr	r3, [pc, #556]	; (f440 <send_gps_pos+0x1050>)
    f214:	781a      	ldrb	r2, [r3, #0]
    f216:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f21a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f21e:	781b      	ldrb	r3, [r3, #0]
    f220:	4413      	add	r3, r2
    f222:	b2da      	uxtb	r2, r3
    f224:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f228:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f22c:	701a      	strb	r2, [r3, #0]
    f22e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f232:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f236:	781a      	ldrb	r2, [r3, #0]
    f238:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f23c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f240:	781b      	ldrb	r3, [r3, #0]
    f242:	4413      	add	r3, r2
    f244:	b2da      	uxtb	r2, r3
    f246:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f24a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f24e:	701a      	strb	r2, [r3, #0]
    f250:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f254:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f258:	781b      	ldrb	r3, [r3, #0]
    f25a:	3301      	adds	r3, #1
    f25c:	b2da      	uxtb	r2, r3
    f25e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f262:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f266:	701a      	strb	r2, [r3, #0]
    f268:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f26c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f270:	781b      	ldrb	r3, [r3, #0]
    f272:	2bff      	cmp	r3, #255	; 0xff
    f274:	d105      	bne.n	f282 <send_gps_pos+0xe92>
    f276:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f27a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f27e:	2200      	movs	r2, #0
    f280:	701a      	strb	r2, [r3, #0]
    f282:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f286:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f28a:	781b      	ldrb	r3, [r3, #0]
    f28c:	461a      	mov	r2, r3
    f28e:	f642 631c 	movw	r3, #11804	; 0x2e1c
    f292:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f296:	7899      	ldrb	r1, [r3, #2]
    f298:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f29c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2a0:	5499      	strb	r1, [r3, r2]
    f2a2:	4b68      	ldr	r3, [pc, #416]	; (f444 <send_gps_pos+0x1054>)
    f2a4:	781a      	ldrb	r2, [r3, #0]
    f2a6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f2aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2ae:	781b      	ldrb	r3, [r3, #0]
    f2b0:	4413      	add	r3, r2
    f2b2:	b2da      	uxtb	r2, r3
    f2b4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f2b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2bc:	701a      	strb	r2, [r3, #0]
    f2be:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f2c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2c6:	781a      	ldrb	r2, [r3, #0]
    f2c8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f2cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2d0:	781b      	ldrb	r3, [r3, #0]
    f2d2:	4413      	add	r3, r2
    f2d4:	b2da      	uxtb	r2, r3
    f2d6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f2da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2de:	701a      	strb	r2, [r3, #0]
    f2e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f2e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2e8:	781b      	ldrb	r3, [r3, #0]
    f2ea:	3301      	adds	r3, #1
    f2ec:	b2da      	uxtb	r2, r3
    f2ee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f2f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f2f6:	701a      	strb	r2, [r3, #0]
    f2f8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f2fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f300:	781b      	ldrb	r3, [r3, #0]
    f302:	2bff      	cmp	r3, #255	; 0xff
    f304:	d105      	bne.n	f312 <send_gps_pos+0xf22>
    f306:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f30a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f30e:	2200      	movs	r2, #0
    f310:	701a      	strb	r2, [r3, #0]
    f312:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f316:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f31a:	781b      	ldrb	r3, [r3, #0]
    f31c:	461a      	mov	r2, r3
    f31e:	f642 631c 	movw	r3, #11804	; 0x2e1c
    f322:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f326:	78d9      	ldrb	r1, [r3, #3]
    f328:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f32c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f330:	5499      	strb	r1, [r3, r2]
    f332:	4b45      	ldr	r3, [pc, #276]	; (f448 <send_gps_pos+0x1058>)
    f334:	781a      	ldrb	r2, [r3, #0]
    f336:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f33a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f33e:	781b      	ldrb	r3, [r3, #0]
    f340:	4413      	add	r3, r2
    f342:	b2da      	uxtb	r2, r3
    f344:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f348:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f34c:	701a      	strb	r2, [r3, #0]
    f34e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f352:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f356:	781a      	ldrb	r2, [r3, #0]
    f358:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f35c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	4413      	add	r3, r2
    f364:	b2da      	uxtb	r2, r3
    f366:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f36a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f36e:	701a      	strb	r2, [r3, #0]
    f370:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f374:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f378:	781b      	ldrb	r3, [r3, #0]
    f37a:	3301      	adds	r3, #1
    f37c:	b2da      	uxtb	r2, r3
    f37e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f382:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f386:	701a      	strb	r2, [r3, #0]
    f388:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f38c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f390:	781b      	ldrb	r3, [r3, #0]
    f392:	2bff      	cmp	r3, #255	; 0xff
    f394:	d105      	bne.n	f3a2 <send_gps_pos+0xfb2>
    f396:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f39a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f39e:	2200      	movs	r2, #0
    f3a0:	701a      	strb	r2, [r3, #0]
    f3a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f3a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	461a      	mov	r2, r3
    f3ae:	f642 6310 	movw	r3, #11792	; 0x2e10
    f3b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3b6:	7819      	ldrb	r1, [r3, #0]
    f3b8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f3bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3c0:	5499      	strb	r1, [r3, r2]
    f3c2:	f642 6310 	movw	r3, #11792	; 0x2e10
    f3c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3ca:	781a      	ldrb	r2, [r3, #0]
    f3cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f3d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	4413      	add	r3, r2
    f3d8:	b2da      	uxtb	r2, r3
    f3da:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f3de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3e2:	701a      	strb	r2, [r3, #0]
    f3e4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f3e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3ec:	781a      	ldrb	r2, [r3, #0]
    f3ee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f3f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	4413      	add	r3, r2
    f3fa:	b2da      	uxtb	r2, r3
    f3fc:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f400:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f404:	701a      	strb	r2, [r3, #0]
    f406:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f40a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	3301      	adds	r3, #1
    f412:	b2da      	uxtb	r2, r3
    f414:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f418:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f41c:	701a      	strb	r2, [r3, #0]
    f41e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f422:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	2bff      	cmp	r3, #255	; 0xff
    f42a:	d10f      	bne.n	f44c <send_gps_pos+0x105c>
    f42c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f430:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f434:	2200      	movs	r2, #0
    f436:	701a      	strb	r2, [r3, #0]
    f438:	e008      	b.n	f44c <send_gps_pos+0x105c>
    f43a:	bf00      	nop
    f43c:	20012e1b 	.word	0x20012e1b
    f440:	20012e1d 	.word	0x20012e1d
    f444:	20012e1e 	.word	0x20012e1e
    f448:	20012e1f 	.word	0x20012e1f
    f44c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f450:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	461a      	mov	r2, r3
    f458:	f642 6310 	movw	r3, #11792	; 0x2e10
    f45c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f460:	7859      	ldrb	r1, [r3, #1]
    f462:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f466:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f46a:	5499      	strb	r1, [r3, r2]
    f46c:	4bc0      	ldr	r3, [pc, #768]	; (f770 <send_gps_pos+0x1380>)
    f46e:	781a      	ldrb	r2, [r3, #0]
    f470:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f474:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f478:	781b      	ldrb	r3, [r3, #0]
    f47a:	4413      	add	r3, r2
    f47c:	b2da      	uxtb	r2, r3
    f47e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f482:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f486:	701a      	strb	r2, [r3, #0]
    f488:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f48c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f490:	781a      	ldrb	r2, [r3, #0]
    f492:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f496:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f49a:	781b      	ldrb	r3, [r3, #0]
    f49c:	4413      	add	r3, r2
    f49e:	b2da      	uxtb	r2, r3
    f4a0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f4a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4a8:	701a      	strb	r2, [r3, #0]
    f4aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f4ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	3301      	adds	r3, #1
    f4b6:	b2da      	uxtb	r2, r3
    f4b8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f4bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4c0:	701a      	strb	r2, [r3, #0]
    f4c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f4c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	2bff      	cmp	r3, #255	; 0xff
    f4ce:	d105      	bne.n	f4dc <send_gps_pos+0x10ec>
    f4d0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f4d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4d8:	2200      	movs	r2, #0
    f4da:	701a      	strb	r2, [r3, #0]
    f4dc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f4e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4e4:	781b      	ldrb	r3, [r3, #0]
    f4e6:	461a      	mov	r2, r3
    f4e8:	f642 6310 	movw	r3, #11792	; 0x2e10
    f4ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4f0:	7899      	ldrb	r1, [r3, #2]
    f4f2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f4f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f4fa:	5499      	strb	r1, [r3, r2]
    f4fc:	4b9d      	ldr	r3, [pc, #628]	; (f774 <send_gps_pos+0x1384>)
    f4fe:	781a      	ldrb	r2, [r3, #0]
    f500:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f504:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f508:	781b      	ldrb	r3, [r3, #0]
    f50a:	4413      	add	r3, r2
    f50c:	b2da      	uxtb	r2, r3
    f50e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f512:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f516:	701a      	strb	r2, [r3, #0]
    f518:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f51c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f520:	781a      	ldrb	r2, [r3, #0]
    f522:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f526:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f52a:	781b      	ldrb	r3, [r3, #0]
    f52c:	4413      	add	r3, r2
    f52e:	b2da      	uxtb	r2, r3
    f530:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f534:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f538:	701a      	strb	r2, [r3, #0]
    f53a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f53e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	3301      	adds	r3, #1
    f546:	b2da      	uxtb	r2, r3
    f548:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f54c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f550:	701a      	strb	r2, [r3, #0]
    f552:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f556:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	2bff      	cmp	r3, #255	; 0xff
    f55e:	d105      	bne.n	f56c <send_gps_pos+0x117c>
    f560:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f564:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f568:	2200      	movs	r2, #0
    f56a:	701a      	strb	r2, [r3, #0]
    f56c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f570:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	461a      	mov	r2, r3
    f578:	f642 6310 	movw	r3, #11792	; 0x2e10
    f57c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f580:	78d9      	ldrb	r1, [r3, #3]
    f582:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f586:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f58a:	5499      	strb	r1, [r3, r2]
    f58c:	4b7a      	ldr	r3, [pc, #488]	; (f778 <send_gps_pos+0x1388>)
    f58e:	781a      	ldrb	r2, [r3, #0]
    f590:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f594:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f598:	781b      	ldrb	r3, [r3, #0]
    f59a:	4413      	add	r3, r2
    f59c:	b2da      	uxtb	r2, r3
    f59e:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f5a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5a6:	701a      	strb	r2, [r3, #0]
    f5a8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f5ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5b0:	781a      	ldrb	r2, [r3, #0]
    f5b2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f5b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	4413      	add	r3, r2
    f5be:	b2da      	uxtb	r2, r3
    f5c0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f5c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5c8:	701a      	strb	r2, [r3, #0]
    f5ca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f5ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5d2:	781b      	ldrb	r3, [r3, #0]
    f5d4:	3301      	adds	r3, #1
    f5d6:	b2da      	uxtb	r2, r3
    f5d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f5dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5e0:	701a      	strb	r2, [r3, #0]
    f5e2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f5e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5ea:	781b      	ldrb	r3, [r3, #0]
    f5ec:	2bff      	cmp	r3, #255	; 0xff
    f5ee:	d105      	bne.n	f5fc <send_gps_pos+0x120c>
    f5f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f5f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f5f8:	2200      	movs	r2, #0
    f5fa:	701a      	strb	r2, [r3, #0]
    f5fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f600:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f604:	781b      	ldrb	r3, [r3, #0]
    f606:	461a      	mov	r2, r3
    f608:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f60c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f610:	7819      	ldrb	r1, [r3, #0]
    f612:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f616:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f61a:	5499      	strb	r1, [r3, r2]
    f61c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f620:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	3301      	adds	r3, #1
    f628:	b2da      	uxtb	r2, r3
    f62a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f62e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f632:	701a      	strb	r2, [r3, #0]
    f634:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f638:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f63c:	781b      	ldrb	r3, [r3, #0]
    f63e:	2bff      	cmp	r3, #255	; 0xff
    f640:	d105      	bne.n	f64e <send_gps_pos+0x125e>
    f642:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f646:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f64a:	2200      	movs	r2, #0
    f64c:	701a      	strb	r2, [r3, #0]
    f64e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f652:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f656:	781b      	ldrb	r3, [r3, #0]
    f658:	461a      	mov	r2, r3
    f65a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f65e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f662:	7819      	ldrb	r1, [r3, #0]
    f664:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f668:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f66c:	5499      	strb	r1, [r3, r2]
    f66e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f672:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	3301      	adds	r3, #1
    f67a:	b2da      	uxtb	r2, r3
    f67c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f680:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f684:	701a      	strb	r2, [r3, #0]
    f686:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f68a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	2bff      	cmp	r3, #255	; 0xff
    f692:	d105      	bne.n	f6a0 <send_gps_pos+0x12b0>
    f694:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f698:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f69c:	2200      	movs	r2, #0
    f69e:	701a      	strb	r2, [r3, #0]
    f6a0:	f242 0339 	movw	r3, #8249	; 0x2039
    f6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a8:	781b      	ldrb	r3, [r3, #0]
    f6aa:	b2db      	uxtb	r3, r3
    f6ac:	f003 0310 	and.w	r3, r3, #16
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	d15a      	bne.n	f76a <send_gps_pos+0x137a>
    f6b4:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f6b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	b2db      	uxtb	r3, r3
    f6c0:	461a      	mov	r2, r3
    f6c2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f6c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6ca:	5c9a      	ldrb	r2, [r3, r2]
    f6cc:	f642 53a3 	movw	r3, #11683	; 0x2da3
    f6d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6d4:	701a      	strb	r2, [r3, #0]
    f6d6:	f642 53a4 	movw	r3, #11684	; 0x2da4
    f6da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6de:	2200      	movs	r2, #0
    f6e0:	701a      	strb	r2, [r3, #0]
    f6e2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f6e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6ea:	781b      	ldrb	r3, [r3, #0]
    f6ec:	b2db      	uxtb	r3, r3
    f6ee:	3301      	adds	r3, #1
    f6f0:	b2da      	uxtb	r2, r3
    f6f2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f6f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f6fa:	701a      	strb	r2, [r3, #0]
    f6fc:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f700:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f704:	781b      	ldrb	r3, [r3, #0]
    f706:	b2db      	uxtb	r3, r3
    f708:	2bff      	cmp	r3, #255	; 0xff
    f70a:	d105      	bne.n	f718 <send_gps_pos+0x1328>
    f70c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f710:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f714:	2200      	movs	r2, #0
    f716:	701a      	strb	r2, [r3, #0]
    f718:	f242 0338 	movw	r3, #8248	; 0x2038
    f71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f720:	f242 0238 	movw	r2, #8248	; 0x2038
    f724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f728:	7812      	ldrb	r2, [r2, #0]
    f72a:	b2d2      	uxtb	r2, r2
    f72c:	f042 0201 	orr.w	r2, r2, #1
    f730:	b2d2      	uxtb	r2, r2
    f732:	701a      	strb	r2, [r3, #0]
    f734:	f242 0339 	movw	r3, #8249	; 0x2039
    f738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f73c:	f242 0239 	movw	r2, #8249	; 0x2039
    f740:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f744:	7812      	ldrb	r2, [r2, #0]
    f746:	b2d2      	uxtb	r2, r2
    f748:	f042 0210 	orr.w	r2, r2, #16
    f74c:	b2d2      	uxtb	r2, r2
    f74e:	701a      	strb	r2, [r3, #0]
    f750:	e00b      	b.n	f76a <send_gps_pos+0x137a>
    f752:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    f756:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f75a:	781b      	ldrb	r3, [r3, #0]
    f75c:	3301      	adds	r3, #1
    f75e:	b2da      	uxtb	r2, r3
    f760:	f642 43a0 	movw	r3, #11424	; 0x2ca0
    f764:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f768:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    f76a:	f005 fbfd 	bl	14f68 <estimator_update_state_gps>
  }
}
    f76e:	bd80      	pop	{r7, pc}
    f770:	20012e11 	.word	0x20012e11
    f774:	20012e12 	.word	0x20012e12
    f778:	20012e13 	.word	0x20012e13

0000f77c <send_radIR>:

void send_radIR(void){
    f77c:	b480      	push	{r7}
    f77e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    f780:	f642 6336 	movw	r3, #11830	; 0x2e36
    f784:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f788:	781b      	ldrb	r3, [r3, #0]
    f78a:	2b00      	cmp	r3, #0
    f78c:	f000 85e8 	beq.w	10360 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    f790:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f794:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f798:	781a      	ldrb	r2, [r3, #0]
    f79a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f79e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f7a2:	781b      	ldrb	r3, [r3, #0]
    f7a4:	b2db      	uxtb	r3, r3
    f7a6:	429a      	cmp	r2, r3
    f7a8:	d313      	bcc.n	f7d2 <send_radIR+0x56>
    f7aa:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f7ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f7b2:	781b      	ldrb	r3, [r3, #0]
    f7b4:	b2db      	uxtb	r3, r3
    f7b6:	461a      	mov	r2, r3
    f7b8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f7bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	1ad3      	subs	r3, r2, r3
    f7c4:	33ff      	adds	r3, #255	; 0xff
    f7c6:	2b14      	cmp	r3, #20
    f7c8:	bfd4      	ite	le
    f7ca:	2300      	movle	r3, #0
    f7cc:	2301      	movgt	r3, #1
    f7ce:	b2db      	uxtb	r3, r3
    f7d0:	e011      	b.n	f7f6 <send_radIR+0x7a>
    f7d2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
    f7d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	b2db      	uxtb	r3, r3
    f7de:	461a      	mov	r2, r3
    f7e0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f7e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f7e8:	781b      	ldrb	r3, [r3, #0]
    f7ea:	1ad3      	subs	r3, r2, r3
    f7ec:	2b14      	cmp	r3, #20
    f7ee:	bfd4      	ite	le
    f7f0:	2300      	movle	r3, #0
    f7f2:	2301      	movgt	r3, #1
    f7f4:	b2db      	uxtb	r3, r3
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	f000 85a6 	beq.w	10348 <send_radIR+0xbcc>
    f7fc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f800:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	461a      	mov	r2, r3
    f808:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f80c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f810:	2105      	movs	r1, #5
    f812:	5499      	strb	r1, [r3, r2]
    f814:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f818:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	3301      	adds	r3, #1
    f820:	b2da      	uxtb	r2, r3
    f822:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f826:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f82a:	701a      	strb	r2, [r3, #0]
    f82c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f830:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2bff      	cmp	r3, #255	; 0xff
    f838:	d105      	bne.n	f846 <send_radIR+0xca>
    f83a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f83e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f842:	2200      	movs	r2, #0
    f844:	701a      	strb	r2, [r3, #0]
    f846:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f84a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f84e:	781b      	ldrb	r3, [r3, #0]
    f850:	461a      	mov	r2, r3
    f852:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f856:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f85a:	2105      	movs	r1, #5
    f85c:	5499      	strb	r1, [r3, r2]
    f85e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f862:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f866:	781b      	ldrb	r3, [r3, #0]
    f868:	3301      	adds	r3, #1
    f86a:	b2da      	uxtb	r2, r3
    f86c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f870:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f874:	701a      	strb	r2, [r3, #0]
    f876:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f87a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f87e:	781b      	ldrb	r3, [r3, #0]
    f880:	2bff      	cmp	r3, #255	; 0xff
    f882:	d105      	bne.n	f890 <send_radIR+0x114>
    f884:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f888:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f88c:	2200      	movs	r2, #0
    f88e:	701a      	strb	r2, [r3, #0]
    f890:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f894:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f898:	2205      	movs	r2, #5
    f89a:	701a      	strb	r2, [r3, #0]
    f89c:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f8a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8a4:	2205      	movs	r2, #5
    f8a6:	701a      	strb	r2, [r3, #0]
    f8a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f8ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	461a      	mov	r2, r3
    f8b4:	f243 2398 	movw	r3, #12952	; 0x3298
    f8b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8bc:	7819      	ldrb	r1, [r3, #0]
    f8be:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f8c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8c6:	5499      	strb	r1, [r3, r2]
    f8c8:	f243 2398 	movw	r3, #12952	; 0x3298
    f8cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8d0:	781a      	ldrb	r2, [r3, #0]
    f8d2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f8d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	4413      	add	r3, r2
    f8de:	b2da      	uxtb	r2, r3
    f8e0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f8e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8e8:	701a      	strb	r2, [r3, #0]
    f8ea:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f8ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8f2:	781a      	ldrb	r2, [r3, #0]
    f8f4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f8f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	4413      	add	r3, r2
    f900:	b2da      	uxtb	r2, r3
    f902:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f906:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f90a:	701a      	strb	r2, [r3, #0]
    f90c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f910:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f914:	781b      	ldrb	r3, [r3, #0]
    f916:	3301      	adds	r3, #1
    f918:	b2da      	uxtb	r2, r3
    f91a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f91e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f922:	701a      	strb	r2, [r3, #0]
    f924:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f928:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f92c:	781b      	ldrb	r3, [r3, #0]
    f92e:	2bff      	cmp	r3, #255	; 0xff
    f930:	d105      	bne.n	f93e <send_radIR+0x1c2>
    f932:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f936:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f93a:	2200      	movs	r2, #0
    f93c:	701a      	strb	r2, [r3, #0]
    f93e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f942:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f946:	781b      	ldrb	r3, [r3, #0]
    f948:	461a      	mov	r2, r3
    f94a:	f243 2398 	movw	r3, #12952	; 0x3298
    f94e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f952:	7859      	ldrb	r1, [r3, #1]
    f954:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f958:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f95c:	5499      	strb	r1, [r3, r2]
    f95e:	4bd2      	ldr	r3, [pc, #840]	; (fca8 <send_radIR+0x52c>)
    f960:	781a      	ldrb	r2, [r3, #0]
    f962:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f966:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f96a:	781b      	ldrb	r3, [r3, #0]
    f96c:	4413      	add	r3, r2
    f96e:	b2da      	uxtb	r2, r3
    f970:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f974:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f978:	701a      	strb	r2, [r3, #0]
    f97a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f97e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f982:	781a      	ldrb	r2, [r3, #0]
    f984:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f988:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	4413      	add	r3, r2
    f990:	b2da      	uxtb	r2, r3
    f992:	f642 53a6 	movw	r3, #11686	; 0x2da6
    f996:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f99a:	701a      	strb	r2, [r3, #0]
    f99c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f9a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9a4:	781b      	ldrb	r3, [r3, #0]
    f9a6:	3301      	adds	r3, #1
    f9a8:	b2da      	uxtb	r2, r3
    f9aa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f9ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9b2:	701a      	strb	r2, [r3, #0]
    f9b4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f9b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9bc:	781b      	ldrb	r3, [r3, #0]
    f9be:	2bff      	cmp	r3, #255	; 0xff
    f9c0:	d105      	bne.n	f9ce <send_radIR+0x252>
    f9c2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f9c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9ca:	2200      	movs	r2, #0
    f9cc:	701a      	strb	r2, [r3, #0]
    f9ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    f9d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9d6:	781b      	ldrb	r3, [r3, #0]
    f9d8:	461a      	mov	r2, r3
    f9da:	f243 2398 	movw	r3, #12952	; 0x3298
    f9de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9e2:	7899      	ldrb	r1, [r3, #2]
    f9e4:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    f9e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9ec:	5499      	strb	r1, [r3, r2]
    f9ee:	4baf      	ldr	r3, [pc, #700]	; (fcac <send_radIR+0x530>)
    f9f0:	781a      	ldrb	r2, [r3, #0]
    f9f2:	f642 53a5 	movw	r3, #11685	; 0x2da5
    f9f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    f9fa:	781b      	ldrb	r3, [r3, #0]
    f9fc:	4413      	add	r3, r2
    f9fe:	b2da      	uxtb	r2, r3
    fa00:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fa04:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa08:	701a      	strb	r2, [r3, #0]
    fa0a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fa0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa12:	781a      	ldrb	r2, [r3, #0]
    fa14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fa18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa1c:	781b      	ldrb	r3, [r3, #0]
    fa1e:	4413      	add	r3, r2
    fa20:	b2da      	uxtb	r2, r3
    fa22:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fa26:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa2a:	701a      	strb	r2, [r3, #0]
    fa2c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fa30:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	3301      	adds	r3, #1
    fa38:	b2da      	uxtb	r2, r3
    fa3a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fa3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa42:	701a      	strb	r2, [r3, #0]
    fa44:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fa48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa4c:	781b      	ldrb	r3, [r3, #0]
    fa4e:	2bff      	cmp	r3, #255	; 0xff
    fa50:	d105      	bne.n	fa5e <send_radIR+0x2e2>
    fa52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fa56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa5a:	2200      	movs	r2, #0
    fa5c:	701a      	strb	r2, [r3, #0]
    fa5e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fa62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa66:	781b      	ldrb	r3, [r3, #0]
    fa68:	461a      	mov	r2, r3
    fa6a:	f243 2398 	movw	r3, #12952	; 0x3298
    fa6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa72:	78d9      	ldrb	r1, [r3, #3]
    fa74:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fa78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa7c:	5499      	strb	r1, [r3, r2]
    fa7e:	4b8c      	ldr	r3, [pc, #560]	; (fcb0 <send_radIR+0x534>)
    fa80:	781a      	ldrb	r2, [r3, #0]
    fa82:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fa86:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	4413      	add	r3, r2
    fa8e:	b2da      	uxtb	r2, r3
    fa90:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fa94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fa9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    faa2:	781a      	ldrb	r2, [r3, #0]
    faa4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    faa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    faac:	781b      	ldrb	r3, [r3, #0]
    faae:	4413      	add	r3, r2
    fab0:	b2da      	uxtb	r2, r3
    fab2:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fab6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    faba:	701a      	strb	r2, [r3, #0]
    fabc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fac0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fac4:	781b      	ldrb	r3, [r3, #0]
    fac6:	3301      	adds	r3, #1
    fac8:	b2da      	uxtb	r2, r3
    faca:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    face:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fad2:	701a      	strb	r2, [r3, #0]
    fad4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fad8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fadc:	781b      	ldrb	r3, [r3, #0]
    fade:	2bff      	cmp	r3, #255	; 0xff
    fae0:	d105      	bne.n	faee <send_radIR+0x372>
    fae2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fae6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    faea:	2200      	movs	r2, #0
    faec:	701a      	strb	r2, [r3, #0]
    faee:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    faf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	461a      	mov	r2, r3
    fafa:	f243 239c 	movw	r3, #12956	; 0x329c
    fafe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb02:	7819      	ldrb	r1, [r3, #0]
    fb04:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fb08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb0c:	5499      	strb	r1, [r3, r2]
    fb0e:	f243 239c 	movw	r3, #12956	; 0x329c
    fb12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb16:	781a      	ldrb	r2, [r3, #0]
    fb18:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fb1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	4413      	add	r3, r2
    fb24:	b2da      	uxtb	r2, r3
    fb26:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fb2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb2e:	701a      	strb	r2, [r3, #0]
    fb30:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fb34:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb38:	781a      	ldrb	r2, [r3, #0]
    fb3a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fb3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb42:	781b      	ldrb	r3, [r3, #0]
    fb44:	4413      	add	r3, r2
    fb46:	b2da      	uxtb	r2, r3
    fb48:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fb4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb50:	701a      	strb	r2, [r3, #0]
    fb52:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fb56:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb5a:	781b      	ldrb	r3, [r3, #0]
    fb5c:	3301      	adds	r3, #1
    fb5e:	b2da      	uxtb	r2, r3
    fb60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fb64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb68:	701a      	strb	r2, [r3, #0]
    fb6a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fb6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb72:	781b      	ldrb	r3, [r3, #0]
    fb74:	2bff      	cmp	r3, #255	; 0xff
    fb76:	d105      	bne.n	fb84 <send_radIR+0x408>
    fb78:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fb7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb80:	2200      	movs	r2, #0
    fb82:	701a      	strb	r2, [r3, #0]
    fb84:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fb88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb8c:	781b      	ldrb	r3, [r3, #0]
    fb8e:	461a      	mov	r2, r3
    fb90:	f243 239c 	movw	r3, #12956	; 0x329c
    fb94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fb98:	7859      	ldrb	r1, [r3, #1]
    fb9a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fb9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fba2:	5499      	strb	r1, [r3, r2]
    fba4:	4b43      	ldr	r3, [pc, #268]	; (fcb4 <send_radIR+0x538>)
    fba6:	781a      	ldrb	r2, [r3, #0]
    fba8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fbac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbb0:	781b      	ldrb	r3, [r3, #0]
    fbb2:	4413      	add	r3, r2
    fbb4:	b2da      	uxtb	r2, r3
    fbb6:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fbba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbbe:	701a      	strb	r2, [r3, #0]
    fbc0:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fbc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbc8:	781a      	ldrb	r2, [r3, #0]
    fbca:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fbce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbd2:	781b      	ldrb	r3, [r3, #0]
    fbd4:	4413      	add	r3, r2
    fbd6:	b2da      	uxtb	r2, r3
    fbd8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fbdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbe0:	701a      	strb	r2, [r3, #0]
    fbe2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fbe6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbea:	781b      	ldrb	r3, [r3, #0]
    fbec:	3301      	adds	r3, #1
    fbee:	b2da      	uxtb	r2, r3
    fbf0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fbf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fbf8:	701a      	strb	r2, [r3, #0]
    fbfa:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fbfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc02:	781b      	ldrb	r3, [r3, #0]
    fc04:	2bff      	cmp	r3, #255	; 0xff
    fc06:	d105      	bne.n	fc14 <send_radIR+0x498>
    fc08:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc10:	2200      	movs	r2, #0
    fc12:	701a      	strb	r2, [r3, #0]
    fc14:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc1c:	781b      	ldrb	r3, [r3, #0]
    fc1e:	461a      	mov	r2, r3
    fc20:	f243 239c 	movw	r3, #12956	; 0x329c
    fc24:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc28:	7899      	ldrb	r1, [r3, #2]
    fc2a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fc2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc32:	5499      	strb	r1, [r3, r2]
    fc34:	4b20      	ldr	r3, [pc, #128]	; (fcb8 <send_radIR+0x53c>)
    fc36:	781a      	ldrb	r2, [r3, #0]
    fc38:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fc3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc40:	781b      	ldrb	r3, [r3, #0]
    fc42:	4413      	add	r3, r2
    fc44:	b2da      	uxtb	r2, r3
    fc46:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fc4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc4e:	701a      	strb	r2, [r3, #0]
    fc50:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fc54:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc58:	781a      	ldrb	r2, [r3, #0]
    fc5a:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fc5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc62:	781b      	ldrb	r3, [r3, #0]
    fc64:	4413      	add	r3, r2
    fc66:	b2da      	uxtb	r2, r3
    fc68:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fc6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc70:	701a      	strb	r2, [r3, #0]
    fc72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc7a:	781b      	ldrb	r3, [r3, #0]
    fc7c:	3301      	adds	r3, #1
    fc7e:	b2da      	uxtb	r2, r3
    fc80:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc88:	701a      	strb	r2, [r3, #0]
    fc8a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	2bff      	cmp	r3, #255	; 0xff
    fc96:	d111      	bne.n	fcbc <send_radIR+0x540>
    fc98:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fc9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fca0:	2200      	movs	r2, #0
    fca2:	701a      	strb	r2, [r3, #0]
    fca4:	e00a      	b.n	fcbc <send_radIR+0x540>
    fca6:	bf00      	nop
    fca8:	20013299 	.word	0x20013299
    fcac:	2001329a 	.word	0x2001329a
    fcb0:	2001329b 	.word	0x2001329b
    fcb4:	2001329d 	.word	0x2001329d
    fcb8:	2001329e 	.word	0x2001329e
    fcbc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fcc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fcc4:	781b      	ldrb	r3, [r3, #0]
    fcc6:	461a      	mov	r2, r3
    fcc8:	f243 239c 	movw	r3, #12956	; 0x329c
    fccc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fcd0:	78d9      	ldrb	r1, [r3, #3]
    fcd2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fcd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fcda:	5499      	strb	r1, [r3, r2]
    fcdc:	4bd3      	ldr	r3, [pc, #844]	; (1002c <send_radIR+0x8b0>)
    fcde:	781a      	ldrb	r2, [r3, #0]
    fce0:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fce4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fce8:	781b      	ldrb	r3, [r3, #0]
    fcea:	4413      	add	r3, r2
    fcec:	b2da      	uxtb	r2, r3
    fcee:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fcf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fcf6:	701a      	strb	r2, [r3, #0]
    fcf8:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fcfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd00:	781a      	ldrb	r2, [r3, #0]
    fd02:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fd06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd0a:	781b      	ldrb	r3, [r3, #0]
    fd0c:	4413      	add	r3, r2
    fd0e:	b2da      	uxtb	r2, r3
    fd10:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fd14:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd18:	701a      	strb	r2, [r3, #0]
    fd1a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fd1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd22:	781b      	ldrb	r3, [r3, #0]
    fd24:	3301      	adds	r3, #1
    fd26:	b2da      	uxtb	r2, r3
    fd28:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fd2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd30:	701a      	strb	r2, [r3, #0]
    fd32:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fd36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd3a:	781b      	ldrb	r3, [r3, #0]
    fd3c:	2bff      	cmp	r3, #255	; 0xff
    fd3e:	d105      	bne.n	fd4c <send_radIR+0x5d0>
    fd40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fd44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd48:	2200      	movs	r2, #0
    fd4a:	701a      	strb	r2, [r3, #0]
    fd4c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fd50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	461a      	mov	r2, r3
    fd58:	f243 2394 	movw	r3, #12948	; 0x3294
    fd5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd60:	7819      	ldrb	r1, [r3, #0]
    fd62:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fd66:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd6a:	5499      	strb	r1, [r3, r2]
    fd6c:	f243 2394 	movw	r3, #12948	; 0x3294
    fd70:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd74:	781a      	ldrb	r2, [r3, #0]
    fd76:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fd7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd7e:	781b      	ldrb	r3, [r3, #0]
    fd80:	4413      	add	r3, r2
    fd82:	b2da      	uxtb	r2, r3
    fd84:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fd88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd8c:	701a      	strb	r2, [r3, #0]
    fd8e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fd92:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fd96:	781a      	ldrb	r2, [r3, #0]
    fd98:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fd9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fda0:	781b      	ldrb	r3, [r3, #0]
    fda2:	4413      	add	r3, r2
    fda4:	b2da      	uxtb	r2, r3
    fda6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fdaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdae:	701a      	strb	r2, [r3, #0]
    fdb0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fdb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdb8:	781b      	ldrb	r3, [r3, #0]
    fdba:	3301      	adds	r3, #1
    fdbc:	b2da      	uxtb	r2, r3
    fdbe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fdc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdc6:	701a      	strb	r2, [r3, #0]
    fdc8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fdcc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdd0:	781b      	ldrb	r3, [r3, #0]
    fdd2:	2bff      	cmp	r3, #255	; 0xff
    fdd4:	d105      	bne.n	fde2 <send_radIR+0x666>
    fdd6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fdda:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdde:	2200      	movs	r2, #0
    fde0:	701a      	strb	r2, [r3, #0]
    fde2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fde6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	461a      	mov	r2, r3
    fdee:	f243 2394 	movw	r3, #12948	; 0x3294
    fdf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fdf6:	7859      	ldrb	r1, [r3, #1]
    fdf8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fdfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe00:	5499      	strb	r1, [r3, r2]
    fe02:	4b8b      	ldr	r3, [pc, #556]	; (10030 <send_radIR+0x8b4>)
    fe04:	781a      	ldrb	r2, [r3, #0]
    fe06:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fe0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe0e:	781b      	ldrb	r3, [r3, #0]
    fe10:	4413      	add	r3, r2
    fe12:	b2da      	uxtb	r2, r3
    fe14:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fe18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe1c:	701a      	strb	r2, [r3, #0]
    fe1e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fe22:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe26:	781a      	ldrb	r2, [r3, #0]
    fe28:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fe2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe30:	781b      	ldrb	r3, [r3, #0]
    fe32:	4413      	add	r3, r2
    fe34:	b2da      	uxtb	r2, r3
    fe36:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fe3a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe3e:	701a      	strb	r2, [r3, #0]
    fe40:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fe44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe48:	781b      	ldrb	r3, [r3, #0]
    fe4a:	3301      	adds	r3, #1
    fe4c:	b2da      	uxtb	r2, r3
    fe4e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fe52:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe56:	701a      	strb	r2, [r3, #0]
    fe58:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fe5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe60:	781b      	ldrb	r3, [r3, #0]
    fe62:	2bff      	cmp	r3, #255	; 0xff
    fe64:	d105      	bne.n	fe72 <send_radIR+0x6f6>
    fe66:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fe6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe6e:	2200      	movs	r2, #0
    fe70:	701a      	strb	r2, [r3, #0]
    fe72:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fe76:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	461a      	mov	r2, r3
    fe7e:	f243 2394 	movw	r3, #12948	; 0x3294
    fe82:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe86:	7899      	ldrb	r1, [r3, #2]
    fe88:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    fe8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe90:	5499      	strb	r1, [r3, r2]
    fe92:	4b68      	ldr	r3, [pc, #416]	; (10034 <send_radIR+0x8b8>)
    fe94:	781a      	ldrb	r2, [r3, #0]
    fe96:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fe9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fe9e:	781b      	ldrb	r3, [r3, #0]
    fea0:	4413      	add	r3, r2
    fea2:	b2da      	uxtb	r2, r3
    fea4:	f642 53a5 	movw	r3, #11685	; 0x2da5
    fea8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    feac:	701a      	strb	r2, [r3, #0]
    feae:	f642 53a6 	movw	r3, #11686	; 0x2da6
    feb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    feb6:	781a      	ldrb	r2, [r3, #0]
    feb8:	f642 53a5 	movw	r3, #11685	; 0x2da5
    febc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fec0:	781b      	ldrb	r3, [r3, #0]
    fec2:	4413      	add	r3, r2
    fec4:	b2da      	uxtb	r2, r3
    fec6:	f642 53a6 	movw	r3, #11686	; 0x2da6
    feca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fece:	701a      	strb	r2, [r3, #0]
    fed0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fed4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	3301      	adds	r3, #1
    fedc:	b2da      	uxtb	r2, r3
    fede:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fee2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fee6:	701a      	strb	r2, [r3, #0]
    fee8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    feec:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fef0:	781b      	ldrb	r3, [r3, #0]
    fef2:	2bff      	cmp	r3, #255	; 0xff
    fef4:	d105      	bne.n	ff02 <send_radIR+0x786>
    fef6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fefa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fefe:	2200      	movs	r2, #0
    ff00:	701a      	strb	r2, [r3, #0]
    ff02:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff06:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	461a      	mov	r2, r3
    ff0e:	f243 2394 	movw	r3, #12948	; 0x3294
    ff12:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff16:	78d9      	ldrb	r1, [r3, #3]
    ff18:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ff1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff20:	5499      	strb	r1, [r3, r2]
    ff22:	4b45      	ldr	r3, [pc, #276]	; (10038 <send_radIR+0x8bc>)
    ff24:	781a      	ldrb	r2, [r3, #0]
    ff26:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ff2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff2e:	781b      	ldrb	r3, [r3, #0]
    ff30:	4413      	add	r3, r2
    ff32:	b2da      	uxtb	r2, r3
    ff34:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ff38:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff3c:	701a      	strb	r2, [r3, #0]
    ff3e:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ff42:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff46:	781a      	ldrb	r2, [r3, #0]
    ff48:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ff4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	4413      	add	r3, r2
    ff54:	b2da      	uxtb	r2, r3
    ff56:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ff5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff5e:	701a      	strb	r2, [r3, #0]
    ff60:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff68:	781b      	ldrb	r3, [r3, #0]
    ff6a:	3301      	adds	r3, #1
    ff6c:	b2da      	uxtb	r2, r3
    ff6e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff72:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff76:	701a      	strb	r2, [r3, #0]
    ff78:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff80:	781b      	ldrb	r3, [r3, #0]
    ff82:	2bff      	cmp	r3, #255	; 0xff
    ff84:	d105      	bne.n	ff92 <send_radIR+0x816>
    ff86:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff8e:	2200      	movs	r2, #0
    ff90:	701a      	strb	r2, [r3, #0]
    ff92:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    ff96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ff9a:	781b      	ldrb	r3, [r3, #0]
    ff9c:	461a      	mov	r2, r3
    ff9e:	f640 2322 	movw	r3, #2594	; 0xa22
    ffa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa6:	7819      	ldrb	r1, [r3, #0]
    ffa8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
    ffac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ffb0:	5499      	strb	r1, [r3, r2]
    ffb2:	f640 2322 	movw	r3, #2594	; 0xa22
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	781a      	ldrb	r2, [r3, #0]
    ffbc:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ffc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	4413      	add	r3, r2
    ffc8:	b2da      	uxtb	r2, r3
    ffca:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ffce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ffd2:	701a      	strb	r2, [r3, #0]
    ffd4:	f642 53a6 	movw	r3, #11686	; 0x2da6
    ffd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ffdc:	781a      	ldrb	r2, [r3, #0]
    ffde:	f642 53a5 	movw	r3, #11685	; 0x2da5
    ffe2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ffe6:	781b      	ldrb	r3, [r3, #0]
    ffe8:	4413      	add	r3, r2
    ffea:	b2da      	uxtb	r2, r3
    ffec:	f642 53a6 	movw	r3, #11686	; 0x2da6
    fff0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fff4:	701a      	strb	r2, [r3, #0]
    fff6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
    fffa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    fffe:	781b      	ldrb	r3, [r3, #0]
   10000:	3301      	adds	r3, #1
   10002:	b2da      	uxtb	r2, r3
   10004:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10008:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1000c:	701a      	strb	r2, [r3, #0]
   1000e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10012:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10016:	781b      	ldrb	r3, [r3, #0]
   10018:	2bff      	cmp	r3, #255	; 0xff
   1001a:	d10f      	bne.n	1003c <send_radIR+0x8c0>
   1001c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10020:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10024:	2200      	movs	r2, #0
   10026:	701a      	strb	r2, [r3, #0]
   10028:	e008      	b.n	1003c <send_radIR+0x8c0>
   1002a:	bf00      	nop
   1002c:	2001329f 	.word	0x2001329f
   10030:	20013295 	.word	0x20013295
   10034:	20013296 	.word	0x20013296
   10038:	20013297 	.word	0x20013297
   1003c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10040:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10044:	781b      	ldrb	r3, [r3, #0]
   10046:	461a      	mov	r2, r3
   10048:	f640 2322 	movw	r3, #2594	; 0xa22
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	7859      	ldrb	r1, [r3, #1]
   10052:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10056:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1005a:	5499      	strb	r1, [r3, r2]
   1005c:	4bc2      	ldr	r3, [pc, #776]	; (10368 <send_radIR+0xbec>)
   1005e:	781a      	ldrb	r2, [r3, #0]
   10060:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10064:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	4413      	add	r3, r2
   1006c:	b2da      	uxtb	r2, r3
   1006e:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10072:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10076:	701a      	strb	r2, [r3, #0]
   10078:	f642 53a6 	movw	r3, #11686	; 0x2da6
   1007c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10080:	781a      	ldrb	r2, [r3, #0]
   10082:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10086:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1008a:	781b      	ldrb	r3, [r3, #0]
   1008c:	4413      	add	r3, r2
   1008e:	b2da      	uxtb	r2, r3
   10090:	f642 53a6 	movw	r3, #11686	; 0x2da6
   10094:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10098:	701a      	strb	r2, [r3, #0]
   1009a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1009e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100a2:	781b      	ldrb	r3, [r3, #0]
   100a4:	3301      	adds	r3, #1
   100a6:	b2da      	uxtb	r2, r3
   100a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   100ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100b0:	701a      	strb	r2, [r3, #0]
   100b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   100b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	2bff      	cmp	r3, #255	; 0xff
   100be:	d105      	bne.n	100cc <send_radIR+0x950>
   100c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   100c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100c8:	2200      	movs	r2, #0
   100ca:	701a      	strb	r2, [r3, #0]
   100cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   100d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	461a      	mov	r2, r3
   100d8:	f640 2324 	movw	r3, #2596	; 0xa24
   100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e0:	7819      	ldrb	r1, [r3, #0]
   100e2:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   100e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100ea:	5499      	strb	r1, [r3, r2]
   100ec:	f640 2324 	movw	r3, #2596	; 0xa24
   100f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f4:	781a      	ldrb	r2, [r3, #0]
   100f6:	f642 53a5 	movw	r3, #11685	; 0x2da5
   100fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   100fe:	781b      	ldrb	r3, [r3, #0]
   10100:	4413      	add	r3, r2
   10102:	b2da      	uxtb	r2, r3
   10104:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10108:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1010c:	701a      	strb	r2, [r3, #0]
   1010e:	f642 53a6 	movw	r3, #11686	; 0x2da6
   10112:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10116:	781a      	ldrb	r2, [r3, #0]
   10118:	f642 53a5 	movw	r3, #11685	; 0x2da5
   1011c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10120:	781b      	ldrb	r3, [r3, #0]
   10122:	4413      	add	r3, r2
   10124:	b2da      	uxtb	r2, r3
   10126:	f642 53a6 	movw	r3, #11686	; 0x2da6
   1012a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1012e:	701a      	strb	r2, [r3, #0]
   10130:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10134:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10138:	781b      	ldrb	r3, [r3, #0]
   1013a:	3301      	adds	r3, #1
   1013c:	b2da      	uxtb	r2, r3
   1013e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10142:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10146:	701a      	strb	r2, [r3, #0]
   10148:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1014c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10150:	781b      	ldrb	r3, [r3, #0]
   10152:	2bff      	cmp	r3, #255	; 0xff
   10154:	d105      	bne.n	10162 <send_radIR+0x9e6>
   10156:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1015a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1015e:	2200      	movs	r2, #0
   10160:	701a      	strb	r2, [r3, #0]
   10162:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10166:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1016a:	781b      	ldrb	r3, [r3, #0]
   1016c:	461a      	mov	r2, r3
   1016e:	f640 2324 	movw	r3, #2596	; 0xa24
   10172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10176:	7859      	ldrb	r1, [r3, #1]
   10178:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   1017c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10180:	5499      	strb	r1, [r3, r2]
   10182:	4b7a      	ldr	r3, [pc, #488]	; (1036c <send_radIR+0xbf0>)
   10184:	781a      	ldrb	r2, [r3, #0]
   10186:	f642 53a5 	movw	r3, #11685	; 0x2da5
   1018a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1018e:	781b      	ldrb	r3, [r3, #0]
   10190:	4413      	add	r3, r2
   10192:	b2da      	uxtb	r2, r3
   10194:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10198:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1019c:	701a      	strb	r2, [r3, #0]
   1019e:	f642 53a6 	movw	r3, #11686	; 0x2da6
   101a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101a6:	781a      	ldrb	r2, [r3, #0]
   101a8:	f642 53a5 	movw	r3, #11685	; 0x2da5
   101ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101b0:	781b      	ldrb	r3, [r3, #0]
   101b2:	4413      	add	r3, r2
   101b4:	b2da      	uxtb	r2, r3
   101b6:	f642 53a6 	movw	r3, #11686	; 0x2da6
   101ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101be:	701a      	strb	r2, [r3, #0]
   101c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   101c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101c8:	781b      	ldrb	r3, [r3, #0]
   101ca:	3301      	adds	r3, #1
   101cc:	b2da      	uxtb	r2, r3
   101ce:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   101d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101d6:	701a      	strb	r2, [r3, #0]
   101d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   101dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	2bff      	cmp	r3, #255	; 0xff
   101e4:	d105      	bne.n	101f2 <send_radIR+0xa76>
   101e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   101ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101ee:	2200      	movs	r2, #0
   101f0:	701a      	strb	r2, [r3, #0]
   101f2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   101f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   101fa:	781b      	ldrb	r3, [r3, #0]
   101fc:	461a      	mov	r2, r3
   101fe:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10202:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10206:	7819      	ldrb	r1, [r3, #0]
   10208:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   1020c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10210:	5499      	strb	r1, [r3, r2]
   10212:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10216:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	3301      	adds	r3, #1
   1021e:	b2da      	uxtb	r2, r3
   10220:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10224:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10228:	701a      	strb	r2, [r3, #0]
   1022a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1022e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10232:	781b      	ldrb	r3, [r3, #0]
   10234:	2bff      	cmp	r3, #255	; 0xff
   10236:	d105      	bne.n	10244 <send_radIR+0xac8>
   10238:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1023c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10240:	2200      	movs	r2, #0
   10242:	701a      	strb	r2, [r3, #0]
   10244:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10248:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	461a      	mov	r2, r3
   10250:	f642 53a6 	movw	r3, #11686	; 0x2da6
   10254:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10258:	7819      	ldrb	r1, [r3, #0]
   1025a:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   1025e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10262:	5499      	strb	r1, [r3, r2]
   10264:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10268:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	3301      	adds	r3, #1
   10270:	b2da      	uxtb	r2, r3
   10272:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10276:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1027a:	701a      	strb	r2, [r3, #0]
   1027c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10280:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d105      	bne.n	10296 <send_radIR+0xb1a>
   1028a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1028e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10292:	2200      	movs	r2, #0
   10294:	701a      	strb	r2, [r3, #0]
   10296:	f242 0339 	movw	r3, #8249	; 0x2039
   1029a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1029e:	781b      	ldrb	r3, [r3, #0]
   102a0:	b2db      	uxtb	r3, r3
   102a2:	f003 0310 	and.w	r3, r3, #16
   102a6:	2b00      	cmp	r3, #0
   102a8:	d15a      	bne.n	10360 <send_radIR+0xbe4>
   102aa:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   102ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102b2:	781b      	ldrb	r3, [r3, #0]
   102b4:	b2db      	uxtb	r3, r3
   102b6:	461a      	mov	r2, r3
   102b8:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   102bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102c0:	5c9a      	ldrb	r2, [r3, r2]
   102c2:	f642 53a3 	movw	r3, #11683	; 0x2da3
   102c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102ca:	701a      	strb	r2, [r3, #0]
   102cc:	f642 53a4 	movw	r3, #11684	; 0x2da4
   102d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102d4:	2200      	movs	r2, #0
   102d6:	701a      	strb	r2, [r3, #0]
   102d8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   102dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	b2db      	uxtb	r3, r3
   102e4:	3301      	adds	r3, #1
   102e6:	b2da      	uxtb	r2, r3
   102e8:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   102ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102f0:	701a      	strb	r2, [r3, #0]
   102f2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   102f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   102fa:	781b      	ldrb	r3, [r3, #0]
   102fc:	b2db      	uxtb	r3, r3
   102fe:	2bff      	cmp	r3, #255	; 0xff
   10300:	d105      	bne.n	1030e <send_radIR+0xb92>
   10302:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10306:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1030a:	2200      	movs	r2, #0
   1030c:	701a      	strb	r2, [r3, #0]
   1030e:	f242 0338 	movw	r3, #8248	; 0x2038
   10312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10316:	f242 0238 	movw	r2, #8248	; 0x2038
   1031a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1031e:	7812      	ldrb	r2, [r2, #0]
   10320:	b2d2      	uxtb	r2, r2
   10322:	f042 0201 	orr.w	r2, r2, #1
   10326:	b2d2      	uxtb	r2, r2
   10328:	701a      	strb	r2, [r3, #0]
   1032a:	f242 0339 	movw	r3, #8249	; 0x2039
   1032e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10332:	f242 0239 	movw	r2, #8249	; 0x2039
   10336:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1033a:	7812      	ldrb	r2, [r2, #0]
   1033c:	b2d2      	uxtb	r2, r2
   1033e:	f042 0210 	orr.w	r2, r2, #16
   10342:	b2d2      	uxtb	r2, r2
   10344:	701a      	strb	r2, [r3, #0]
   10346:	e00b      	b.n	10360 <send_radIR+0xbe4>
   10348:	f642 43a0 	movw	r3, #11424	; 0x2ca0
   1034c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	3301      	adds	r3, #1
   10354:	b2da      	uxtb	r2, r3
   10356:	f642 43a0 	movw	r3, #11424	; 0x2ca0
   1035a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1035e:	701a      	strb	r2, [r3, #0]
}
   10360:	46bd      	mov	sp, r7
   10362:	f85d 7b04 	ldr.w	r7, [sp], #4
   10366:	4770      	bx	lr
   10368:	20000a23 	.word	0x20000a23
   1036c:	20000a25 	.word	0x20000a25

00010370 <send_takeOff>:

void send_takeOff(void){
   10370:	b580      	push	{r7, lr}
   10372:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10374:	f642 6336 	movw	r3, #11830	; 0x2e36
   10378:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1037c:	781b      	ldrb	r3, [r3, #0]
   1037e:	2b00      	cmp	r3, #0
   10380:	f000 8200 	beq.w	10784 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10384:	f243 2384 	movw	r3, #12932	; 0x3284
   10388:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1038c:	881b      	ldrh	r3, [r3, #0]
   1038e:	2b00      	cmp	r3, #0
   10390:	f040 81f2 	bne.w	10778 <send_takeOff+0x408>
   10394:	f243 238c 	movw	r3, #12940	; 0x328c
   10398:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1039c:	681b      	ldr	r3, [r3, #0]
   1039e:	4618      	mov	r0, r3
   103a0:	f04f 0100 	mov.w	r1, #0
   103a4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   103a8:	f007 fe94 	bl	180d4 <__aeabi_fcmpgt>
   103ac:	4603      	mov	r3, r0
   103ae:	2b00      	cmp	r3, #0
   103b0:	f000 81e2 	beq.w	10778 <send_takeOff+0x408>
        estimator_flight_time = 1;
   103b4:	f243 2384 	movw	r3, #12932	; 0x3284
   103b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103bc:	2201      	movs	r2, #1
   103be:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   103c0:	f642 4398 	movw	r3, #11416	; 0x2c98
   103c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103c8:	2201      	movs	r2, #1
   103ca:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   103cc:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   103d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103d4:	781a      	ldrb	r2, [r3, #0]
   103d6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   103da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103de:	781b      	ldrb	r3, [r3, #0]
   103e0:	b2db      	uxtb	r3, r3
   103e2:	429a      	cmp	r2, r3
   103e4:	d313      	bcc.n	1040e <send_takeOff+0x9e>
   103e6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   103ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	b2db      	uxtb	r3, r3
   103f2:	461a      	mov	r2, r3
   103f4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   103f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   103fc:	781b      	ldrb	r3, [r3, #0]
   103fe:	1ad3      	subs	r3, r2, r3
   10400:	33ff      	adds	r3, #255	; 0xff
   10402:	2b06      	cmp	r3, #6
   10404:	bfd4      	ite	le
   10406:	2300      	movle	r3, #0
   10408:	2301      	movgt	r3, #1
   1040a:	b2db      	uxtb	r3, r3
   1040c:	e011      	b.n	10432 <send_takeOff+0xc2>
   1040e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10412:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10416:	781b      	ldrb	r3, [r3, #0]
   10418:	b2db      	uxtb	r3, r3
   1041a:	461a      	mov	r2, r3
   1041c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10420:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10424:	781b      	ldrb	r3, [r3, #0]
   10426:	1ad3      	subs	r3, r2, r3
   10428:	2b06      	cmp	r3, #6
   1042a:	bfd4      	ite	le
   1042c:	2300      	movle	r3, #0
   1042e:	2301      	movgt	r3, #1
   10430:	b2db      	uxtb	r3, r3
   10432:	2b00      	cmp	r3, #0
   10434:	f000 8194 	beq.w	10760 <send_takeOff+0x3f0>
   10438:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1043c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10440:	781b      	ldrb	r3, [r3, #0]
   10442:	461a      	mov	r2, r3
   10444:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10448:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1044c:	2105      	movs	r1, #5
   1044e:	5499      	strb	r1, [r3, r2]
   10450:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10454:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	3301      	adds	r3, #1
   1045c:	b2da      	uxtb	r2, r3
   1045e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10462:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10466:	701a      	strb	r2, [r3, #0]
   10468:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1046c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10470:	781b      	ldrb	r3, [r3, #0]
   10472:	2bff      	cmp	r3, #255	; 0xff
   10474:	d105      	bne.n	10482 <send_takeOff+0x112>
   10476:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1047a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1047e:	2200      	movs	r2, #0
   10480:	701a      	strb	r2, [r3, #0]
   10482:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10486:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1048a:	781b      	ldrb	r3, [r3, #0]
   1048c:	461a      	mov	r2, r3
   1048e:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10492:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10496:	2104      	movs	r1, #4
   10498:	5499      	strb	r1, [r3, r2]
   1049a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1049e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104a2:	781b      	ldrb	r3, [r3, #0]
   104a4:	3301      	adds	r3, #1
   104a6:	b2da      	uxtb	r2, r3
   104a8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   104ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104b0:	701a      	strb	r2, [r3, #0]
   104b2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   104b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104ba:	781b      	ldrb	r3, [r3, #0]
   104bc:	2bff      	cmp	r3, #255	; 0xff
   104be:	d105      	bne.n	104cc <send_takeOff+0x15c>
   104c0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   104c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104c8:	2200      	movs	r2, #0
   104ca:	701a      	strb	r2, [r3, #0]
   104cc:	f642 53a5 	movw	r3, #11685	; 0x2da5
   104d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104d4:	2204      	movs	r2, #4
   104d6:	701a      	strb	r2, [r3, #0]
   104d8:	f642 53a6 	movw	r3, #11686	; 0x2da6
   104dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104e0:	2204      	movs	r2, #4
   104e2:	701a      	strb	r2, [r3, #0]
   104e4:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   104e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104ec:	781b      	ldrb	r3, [r3, #0]
   104ee:	461a      	mov	r2, r3
   104f0:	f642 4382 	movw	r3, #11394	; 0x2c82
   104f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   104f8:	7819      	ldrb	r1, [r3, #0]
   104fa:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   104fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10502:	5499      	strb	r1, [r3, r2]
   10504:	f642 4382 	movw	r3, #11394	; 0x2c82
   10508:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1050c:	781a      	ldrb	r2, [r3, #0]
   1050e:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10512:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10516:	781b      	ldrb	r3, [r3, #0]
   10518:	4413      	add	r3, r2
   1051a:	b2da      	uxtb	r2, r3
   1051c:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10520:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10524:	701a      	strb	r2, [r3, #0]
   10526:	f642 53a6 	movw	r3, #11686	; 0x2da6
   1052a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1052e:	781a      	ldrb	r2, [r3, #0]
   10530:	f642 53a5 	movw	r3, #11685	; 0x2da5
   10534:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	4413      	add	r3, r2
   1053c:	b2da      	uxtb	r2, r3
   1053e:	f642 53a6 	movw	r3, #11686	; 0x2da6
   10542:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10546:	701a      	strb	r2, [r3, #0]
   10548:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1054c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10550:	781b      	ldrb	r3, [r3, #0]
   10552:	3301      	adds	r3, #1
   10554:	b2da      	uxtb	r2, r3
   10556:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1055a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1055e:	701a      	strb	r2, [r3, #0]
   10560:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10564:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10568:	781b      	ldrb	r3, [r3, #0]
   1056a:	2bff      	cmp	r3, #255	; 0xff
   1056c:	d105      	bne.n	1057a <send_takeOff+0x20a>
   1056e:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10572:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10576:	2200      	movs	r2, #0
   10578:	701a      	strb	r2, [r3, #0]
   1057a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1057e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10582:	781b      	ldrb	r3, [r3, #0]
   10584:	461a      	mov	r2, r3
   10586:	f642 4382 	movw	r3, #11394	; 0x2c82
   1058a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1058e:	7859      	ldrb	r1, [r3, #1]
   10590:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10594:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10598:	5499      	strb	r1, [r3, r2]
   1059a:	4b7b      	ldr	r3, [pc, #492]	; (10788 <send_takeOff+0x418>)
   1059c:	781a      	ldrb	r2, [r3, #0]
   1059e:	f642 53a5 	movw	r3, #11685	; 0x2da5
   105a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105a6:	781b      	ldrb	r3, [r3, #0]
   105a8:	4413      	add	r3, r2
   105aa:	b2da      	uxtb	r2, r3
   105ac:	f642 53a5 	movw	r3, #11685	; 0x2da5
   105b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105b4:	701a      	strb	r2, [r3, #0]
   105b6:	f642 53a6 	movw	r3, #11686	; 0x2da6
   105ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105be:	781a      	ldrb	r2, [r3, #0]
   105c0:	f642 53a5 	movw	r3, #11685	; 0x2da5
   105c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105c8:	781b      	ldrb	r3, [r3, #0]
   105ca:	4413      	add	r3, r2
   105cc:	b2da      	uxtb	r2, r3
   105ce:	f642 53a6 	movw	r3, #11686	; 0x2da6
   105d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105d6:	701a      	strb	r2, [r3, #0]
   105d8:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   105dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105e0:	781b      	ldrb	r3, [r3, #0]
   105e2:	3301      	adds	r3, #1
   105e4:	b2da      	uxtb	r2, r3
   105e6:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   105ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105ee:	701a      	strb	r2, [r3, #0]
   105f0:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   105f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   105f8:	781b      	ldrb	r3, [r3, #0]
   105fa:	2bff      	cmp	r3, #255	; 0xff
   105fc:	d105      	bne.n	1060a <send_takeOff+0x29a>
   105fe:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10602:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10606:	2200      	movs	r2, #0
   10608:	701a      	strb	r2, [r3, #0]
   1060a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1060e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10612:	781b      	ldrb	r3, [r3, #0]
   10614:	461a      	mov	r2, r3
   10616:	f642 53a5 	movw	r3, #11685	; 0x2da5
   1061a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1061e:	7819      	ldrb	r1, [r3, #0]
   10620:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10624:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10628:	5499      	strb	r1, [r3, r2]
   1062a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1062e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10632:	781b      	ldrb	r3, [r3, #0]
   10634:	3301      	adds	r3, #1
   10636:	b2da      	uxtb	r2, r3
   10638:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1063c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10640:	701a      	strb	r2, [r3, #0]
   10642:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10646:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1064a:	781b      	ldrb	r3, [r3, #0]
   1064c:	2bff      	cmp	r3, #255	; 0xff
   1064e:	d105      	bne.n	1065c <send_takeOff+0x2ec>
   10650:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10654:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10658:	2200      	movs	r2, #0
   1065a:	701a      	strb	r2, [r3, #0]
   1065c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10660:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10664:	781b      	ldrb	r3, [r3, #0]
   10666:	461a      	mov	r2, r3
   10668:	f642 53a6 	movw	r3, #11686	; 0x2da6
   1066c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10670:	7819      	ldrb	r1, [r3, #0]
   10672:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10676:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1067a:	5499      	strb	r1, [r3, r2]
   1067c:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10680:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10684:	781b      	ldrb	r3, [r3, #0]
   10686:	3301      	adds	r3, #1
   10688:	b2da      	uxtb	r2, r3
   1068a:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1068e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10692:	701a      	strb	r2, [r3, #0]
   10694:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   10698:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1069c:	781b      	ldrb	r3, [r3, #0]
   1069e:	2bff      	cmp	r3, #255	; 0xff
   106a0:	d105      	bne.n	106ae <send_takeOff+0x33e>
   106a2:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   106a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106aa:	2200      	movs	r2, #0
   106ac:	701a      	strb	r2, [r3, #0]
   106ae:	f242 0339 	movw	r3, #8249	; 0x2039
   106b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	b2db      	uxtb	r3, r3
   106ba:	f003 0310 	and.w	r3, r3, #16
   106be:	2b00      	cmp	r3, #0
   106c0:	d15a      	bne.n	10778 <send_takeOff+0x408>
   106c2:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   106c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	b2db      	uxtb	r3, r3
   106ce:	461a      	mov	r2, r3
   106d0:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   106d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106d8:	5c9a      	ldrb	r2, [r3, r2]
   106da:	f642 53a3 	movw	r3, #11683	; 0x2da3
   106de:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106e2:	701a      	strb	r2, [r3, #0]
   106e4:	f642 53a4 	movw	r3, #11684	; 0x2da4
   106e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106ec:	2200      	movs	r2, #0
   106ee:	701a      	strb	r2, [r3, #0]
   106f0:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   106f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	b2db      	uxtb	r3, r3
   106fc:	3301      	adds	r3, #1
   106fe:	b2da      	uxtb	r2, r3
   10700:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10704:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10708:	701a      	strb	r2, [r3, #0]
   1070a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   1070e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10712:	781b      	ldrb	r3, [r3, #0]
   10714:	b2db      	uxtb	r3, r3
   10716:	2bff      	cmp	r3, #255	; 0xff
   10718:	d105      	bne.n	10726 <send_takeOff+0x3b6>
   1071a:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   1071e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10722:	2200      	movs	r2, #0
   10724:	701a      	strb	r2, [r3, #0]
   10726:	f242 0338 	movw	r3, #8248	; 0x2038
   1072a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072e:	f242 0238 	movw	r2, #8248	; 0x2038
   10732:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10736:	7812      	ldrb	r2, [r2, #0]
   10738:	b2d2      	uxtb	r2, r2
   1073a:	f042 0201 	orr.w	r2, r2, #1
   1073e:	b2d2      	uxtb	r2, r2
   10740:	701a      	strb	r2, [r3, #0]
   10742:	f242 0339 	movw	r3, #8249	; 0x2039
   10746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074a:	f242 0239 	movw	r2, #8249	; 0x2039
   1074e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10752:	7812      	ldrb	r2, [r2, #0]
   10754:	b2d2      	uxtb	r2, r2
   10756:	f042 0210 	orr.w	r2, r2, #16
   1075a:	b2d2      	uxtb	r2, r2
   1075c:	701a      	strb	r2, [r3, #0]
   1075e:	e00b      	b.n	10778 <send_takeOff+0x408>
   10760:	f642 43a0 	movw	r3, #11424	; 0x2ca0
   10764:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	3301      	adds	r3, #1
   1076c:	b2da      	uxtb	r2, r3
   1076e:	f642 43a0 	movw	r3, #11424	; 0x2ca0
   10772:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10776:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10778:	f642 6336 	movw	r3, #11830	; 0x2e36
   1077c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10780:	2200      	movs	r2, #0
   10782:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10784:	bd80      	pop	{r7, pc}
   10786:	bf00      	nop
   10788:	20012c83 	.word	0x20012c83
   1078c:	f3af 8000 	nop.w

00010790 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10790:	b480      	push	{r7}
   10792:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10794:	f242 0317 	movw	r3, #8215	; 0x2017
   10798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079c:	f242 0217 	movw	r2, #8215	; 0x2017
   107a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107a4:	7812      	ldrb	r2, [r2, #0]
   107a6:	b2d2      	uxtb	r2, r2
   107a8:	f042 0210 	orr.w	r2, r2, #16
   107ac:	b2d2      	uxtb	r2, r2
   107ae:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   107b0:	f242 0331 	movw	r3, #8241	; 0x2031
   107b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b8:	2201      	movs	r2, #1
   107ba:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   107bc:	f242 0333 	movw	r3, #8243	; 0x2033
   107c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c4:	2219      	movs	r2, #25
   107c6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   107c8:	f242 0311 	movw	r3, #8209	; 0x2011
   107cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d0:	f242 0211 	movw	r2, #8209	; 0x2011
   107d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107d8:	7812      	ldrb	r2, [r2, #0]
   107da:	b2d2      	uxtb	r2, r2
   107dc:	f062 023f 	orn	r2, r2, #63	; 0x3f
   107e0:	b2d2      	uxtb	r2, r2
   107e2:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   107e4:	f242 0312 	movw	r3, #8210	; 0x2012
   107e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ec:	f242 0212 	movw	r2, #8210	; 0x2012
   107f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107f4:	7812      	ldrb	r2, [r2, #0]
   107f6:	b2d2      	uxtb	r2, r2
   107f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   107fc:	b2d2      	uxtb	r2, r2
   107fe:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10800:	f242 0312 	movw	r3, #8210	; 0x2012
   10804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10808:	f242 0212 	movw	r2, #8210	; 0x2012
   1080c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10810:	7812      	ldrb	r2, [r2, #0]
   10812:	b2d2      	uxtb	r2, r2
   10814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10818:	b2d2      	uxtb	r2, r2
   1081a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   1081c:	f242 033a 	movw	r3, #8250	; 0x203a
   10820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10824:	f242 023a 	movw	r2, #8250	; 0x203a
   10828:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1082c:	7812      	ldrb	r2, [r2, #0]
   1082e:	b2d2      	uxtb	r2, r2
   10830:	f042 0202 	orr.w	r2, r2, #2
   10834:	b2d2      	uxtb	r2, r2
   10836:	701a      	strb	r2, [r3, #0]
}
   10838:	46bd      	mov	sp, r7
   1083a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1083e:	4770      	bx	lr

00010840 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10840:	b480      	push	{r7}
   10842:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10844:	f642 53a4 	movw	r3, #11684	; 0x2da4
   10848:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1084c:	781b      	ldrb	r3, [r3, #0]
   1084e:	2b00      	cmp	r3, #0
   10850:	d10e      	bne.n	10870 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10852:	f242 0312 	movw	r3, #8210	; 0x2012
   10856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1085a:	f242 0212 	movw	r2, #8210	; 0x2012
   1085e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10862:	7812      	ldrb	r2, [r2, #0]
   10864:	b2d2      	uxtb	r2, r2
   10866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1086a:	b2d2      	uxtb	r2, r2
   1086c:	701a      	strb	r2, [r3, #0]
   1086e:	e047      	b.n	10900 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10870:	f642 53a4 	movw	r3, #11684	; 0x2da4
   10874:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	2b08      	cmp	r3, #8
   1087c:	d832      	bhi.n	108e4 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   1087e:	f642 53a3 	movw	r3, #11683	; 0x2da3
   10882:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10886:	781b      	ldrb	r3, [r3, #0]
   10888:	f003 0301 	and.w	r3, r3, #1
   1088c:	2b00      	cmp	r3, #0
   1088e:	d00e      	beq.n	108ae <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10890:	f242 0312 	movw	r3, #8210	; 0x2012
   10894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10898:	f242 0212 	movw	r2, #8210	; 0x2012
   1089c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108a0:	7812      	ldrb	r2, [r2, #0]
   108a2:	b2d2      	uxtb	r2, r2
   108a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   108a8:	b2d2      	uxtb	r2, r2
   108aa:	701a      	strb	r2, [r3, #0]
   108ac:	e00d      	b.n	108ca <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   108ae:	f242 0312 	movw	r3, #8210	; 0x2012
   108b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b6:	f242 0212 	movw	r2, #8210	; 0x2012
   108ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108be:	7812      	ldrb	r2, [r2, #0]
   108c0:	b2d2      	uxtb	r2, r2
   108c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   108c6:	b2d2      	uxtb	r2, r2
   108c8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   108ca:	f642 53a3 	movw	r3, #11683	; 0x2da3
   108ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   108d2:	781b      	ldrb	r3, [r3, #0]
   108d4:	085b      	lsrs	r3, r3, #1
   108d6:	b2da      	uxtb	r2, r3
   108d8:	f642 53a3 	movw	r3, #11683	; 0x2da3
   108dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	e00d      	b.n	10900 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   108e4:	f242 0312 	movw	r3, #8210	; 0x2012
   108e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ec:	f242 0212 	movw	r2, #8210	; 0x2012
   108f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108f4:	7812      	ldrb	r2, [r2, #0]
   108f6:	b2d2      	uxtb	r2, r2
   108f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   108fc:	b2d2      	uxtb	r2, r2
   108fe:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10900:	f642 53a4 	movw	r3, #11684	; 0x2da4
   10904:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10908:	781b      	ldrb	r3, [r3, #0]
   1090a:	3301      	adds	r3, #1
   1090c:	b2da      	uxtb	r2, r3
   1090e:	f642 53a4 	movw	r3, #11684	; 0x2da4
   10912:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10916:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10918:	f642 53a4 	movw	r3, #11684	; 0x2da4
   1091c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10920:	781b      	ldrb	r3, [r3, #0]
   10922:	2b09      	cmp	r3, #9
   10924:	d94d      	bls.n	109c2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10926:	f642 43a1 	movw	r3, #11425	; 0x2ca1
   1092a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1092e:	781a      	ldrb	r2, [r3, #0]
   10930:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10934:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10938:	781b      	ldrb	r3, [r3, #0]
   1093a:	b2db      	uxtb	r3, r3
   1093c:	429a      	cmp	r2, r3
   1093e:	d10e      	bne.n	1095e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10940:	f242 0339 	movw	r3, #8249	; 0x2039
   10944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10948:	f242 0239 	movw	r2, #8249	; 0x2039
   1094c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10950:	7812      	ldrb	r2, [r2, #0]
   10952:	b2d2      	uxtb	r2, r2
   10954:	f022 0210 	bic.w	r2, r2, #16
   10958:	b2d2      	uxtb	r2, r2
   1095a:	701a      	strb	r2, [r3, #0]
   1095c:	e031      	b.n	109c2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   1095e:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10962:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10966:	781b      	ldrb	r3, [r3, #0]
   10968:	b2db      	uxtb	r3, r3
   1096a:	461a      	mov	r2, r3
   1096c:	f642 43a4 	movw	r3, #11428	; 0x2ca4
   10970:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10974:	5c9a      	ldrb	r2, [r3, r2]
   10976:	f642 53a3 	movw	r3, #11683	; 0x2da3
   1097a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1097e:	701a      	strb	r2, [r3, #0]
   10980:	f642 53a4 	movw	r3, #11684	; 0x2da4
   10984:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10988:	2200      	movs	r2, #0
   1098a:	701a      	strb	r2, [r3, #0]
   1098c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   10990:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10994:	781b      	ldrb	r3, [r3, #0]
   10996:	b2db      	uxtb	r3, r3
   10998:	3301      	adds	r3, #1
   1099a:	b2da      	uxtb	r2, r3
   1099c:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   109a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   109a4:	701a      	strb	r2, [r3, #0]
   109a6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   109aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	b2db      	uxtb	r3, r3
   109b2:	2bff      	cmp	r3, #255	; 0xff
   109b4:	d105      	bne.n	109c2 <__vector_5+0x182>
   109b6:	f642 43a2 	movw	r3, #11426	; 0x2ca2
   109ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   109be:	2200      	movs	r2, #0
   109c0:	701a      	strb	r2, [r3, #0]
    }
  }
}
   109c2:	46bd      	mov	sp, r7
   109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   109c8:	4770      	bx	lr
   109ca:	bf00      	nop

000109cc <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   109cc:	b480      	push	{r7}
   109ce:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   109d0:	f642 53d7 	movw	r3, #11735	; 0x2dd7
   109d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   109d8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   109da:	f640 231e 	movw	r3, #2590	; 0xa1e
   109de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e2:	2200      	movs	r2, #0
   109e4:	701a      	strb	r2, [r3, #0]
}
   109e6:	46bd      	mov	sp, r7
   109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   109ec:	4770      	bx	lr
   109ee:	bf00      	nop

000109f0 <link_fbw_send>:

void link_fbw_send(void) {
   109f0:	b480      	push	{r7}
   109f2:	b083      	sub	sp, #12
   109f4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   109f6:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   109fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   109fe:	781b      	ldrb	r3, [r3, #0]
   10a00:	b2db      	uxtb	r3, r3
   10a02:	2b00      	cmp	r3, #0
   10a04:	d00c      	beq.n	10a20 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10a06:	f642 53dd 	movw	r3, #11741	; 0x2ddd
   10a0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10a0e:	781b      	ldrb	r3, [r3, #0]
   10a10:	3301      	adds	r3, #1
   10a12:	b2da      	uxtb	r2, r3
   10a14:	f642 53dd 	movw	r3, #11741	; 0x2ddd
   10a18:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10a1c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10a1e:	e064      	b.n	10aea <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10a20:	f242 030d 	movw	r3, #8205	; 0x200d
   10a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a28:	2251      	movs	r2, #81	; 0x51
   10a2a:	701a      	strb	r2, [r3, #0]
   10a2c:	f242 030e 	movw	r3, #8206	; 0x200e
   10a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	b2db      	uxtb	r3, r3
   10a38:	b2db      	uxtb	r3, r3
   10a3a:	b25b      	sxtb	r3, r3
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	da05      	bge.n	10a4c <link_fbw_send+0x5c>
   10a40:	f242 030f 	movw	r3, #8207	; 0x200f
   10a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a48:	781b      	ldrb	r3, [r3, #0]
   10a4a:	71fb      	strb	r3, [r7, #7]
   10a4c:	f242 030d 	movw	r3, #8205	; 0x200d
   10a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a54:	f242 020d 	movw	r2, #8205	; 0x200d
   10a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a5c:	7812      	ldrb	r2, [r2, #0]
   10a5e:	b2d2      	uxtb	r2, r2
   10a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10a64:	b2d2      	uxtb	r2, r2
   10a66:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10a68:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10a6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10a70:	2201      	movs	r2, #1
   10a72:	701a      	strb	r2, [r3, #0]
   10a74:	f242 0318 	movw	r3, #8216	; 0x2018
   10a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7c:	f242 0218 	movw	r2, #8216	; 0x2018
   10a80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a84:	7812      	ldrb	r2, [r2, #0]
   10a86:	b2d2      	uxtb	r2, r2
   10a88:	f022 0201 	bic.w	r2, r2, #1
   10a8c:	b2d2      	uxtb	r2, r2
   10a8e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10a90:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10a94:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10a98:	2200      	movs	r2, #0
   10a9a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10a9c:	f642 53da 	movw	r3, #11738	; 0x2dda
   10aa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10aa4:	2200      	movs	r2, #0
   10aa6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10aa8:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10aac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	461a      	mov	r2, r3
   10ab4:	f642 53c0 	movw	r3, #11712	; 0x2dc0
   10ab8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10abc:	4413      	add	r3, r2
   10abe:	781a      	ldrb	r2, [r3, #0]
   10ac0:	f642 53db 	movw	r3, #11739	; 0x2ddb
   10ac4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10ac8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10aca:	f242 030f 	movw	r3, #8207	; 0x200f
   10ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad2:	f642 52db 	movw	r2, #11739	; 0x2ddb
   10ad6:	f2c2 0201 	movt	r2, #8193	; 0x2001
   10ada:	7812      	ldrb	r2, [r2, #0]
   10adc:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10ade:	f642 53d6 	movw	r3, #11734	; 0x2dd6
   10ae2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10ae6:	2200      	movs	r2, #0
   10ae8:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10aea:	370c      	adds	r7, #12
   10aec:	46bd      	mov	sp, r7
   10aee:	f85d 7b04 	ldr.w	r7, [sp], #4
   10af2:	4770      	bx	lr

00010af4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10af4:	b480      	push	{r7}
   10af6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10af8:	f242 032a 	movw	r3, #8234	; 0x202a
   10afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b00:	f242 022c 	movw	r2, #8236	; 0x202c
   10b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b08:	8812      	ldrh	r2, [r2, #0]
   10b0a:	b292      	uxth	r2, r2
   10b0c:	32c8      	adds	r2, #200	; 0xc8
   10b0e:	b292      	uxth	r2, r2
   10b10:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10b12:	f242 0336 	movw	r3, #8246	; 0x2036
   10b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1a:	f242 0236 	movw	r2, #8246	; 0x2036
   10b1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b22:	7812      	ldrb	r2, [r2, #0]
   10b24:	b2d2      	uxtb	r2, r2
   10b26:	f042 0210 	orr.w	r2, r2, #16
   10b2a:	b2d2      	uxtb	r2, r2
   10b2c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10b2e:	f242 0337 	movw	r3, #8247	; 0x2037
   10b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b36:	f242 0237 	movw	r2, #8247	; 0x2037
   10b3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b3e:	7812      	ldrb	r2, [r2, #0]
   10b40:	b2d2      	uxtb	r2, r2
   10b42:	f042 0210 	orr.w	r2, r2, #16
   10b46:	b2d2      	uxtb	r2, r2
   10b48:	701a      	strb	r2, [r3, #0]
}
   10b4a:	46bd      	mov	sp, r7
   10b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b50:	4770      	bx	lr
   10b52:	bf00      	nop

00010b54 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10b54:	b480      	push	{r7}
   10b56:	b083      	sub	sp, #12
   10b58:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10b5a:	f242 0337 	movw	r3, #8247	; 0x2037
   10b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b62:	f242 0237 	movw	r2, #8247	; 0x2037
   10b66:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b6a:	7812      	ldrb	r2, [r2, #0]
   10b6c:	b2d2      	uxtb	r2, r2
   10b6e:	f022 0210 	bic.w	r2, r2, #16
   10b72:	b2d2      	uxtb	r2, r2
   10b74:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10b76:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10b7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	3301      	adds	r3, #1
   10b82:	b2da      	uxtb	r2, r3
   10b84:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10b88:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10b8c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10b8e:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10b92:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10b96:	781b      	ldrb	r3, [r3, #0]
   10b98:	2b17      	cmp	r3, #23
   10b9a:	d162      	bne.n	10c62 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10b9c:	f242 030f 	movw	r3, #8207	; 0x200f
   10ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba4:	781b      	ldrb	r3, [r3, #0]
   10ba6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10ba8:	f642 53da 	movw	r3, #11738	; 0x2dda
   10bac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10bb0:	781b      	ldrb	r3, [r3, #0]
   10bb2:	79fa      	ldrb	r2, [r7, #7]
   10bb4:	429a      	cmp	r2, r3
   10bb6:	d110      	bne.n	10bda <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10bb8:	f642 53d6 	movw	r3, #11734	; 0x2dd6
   10bbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10bc0:	2201      	movs	r2, #1
   10bc2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10bc4:	f642 53a8 	movw	r3, #11688	; 0x2da8
   10bc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10bcc:	7d1a      	ldrb	r2, [r3, #20]
   10bce:	f642 53d8 	movw	r3, #11736	; 0x2dd8
   10bd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10bd6:	701a      	strb	r2, [r3, #0]
   10bd8:	e00c      	b.n	10bf4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10bda:	f642 53d7 	movw	r3, #11735	; 0x2dd7
   10bde:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	b2db      	uxtb	r3, r3
   10be6:	3301      	adds	r3, #1
   10be8:	b2da      	uxtb	r2, r3
   10bea:	f642 53d7 	movw	r3, #11735	; 0x2dd7
   10bee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10bf2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10bf4:	f640 231e 	movw	r3, #2590	; 0xa1e
   10bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfc:	2201      	movs	r2, #1
   10bfe:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10c00:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10c04:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10c08:	2200      	movs	r2, #0
   10c0a:	701a      	strb	r2, [r3, #0]
   10c0c:	f242 0318 	movw	r3, #8216	; 0x2018
   10c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c14:	f242 0218 	movw	r2, #8216	; 0x2018
   10c18:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c1c:	7812      	ldrb	r2, [r2, #0]
   10c1e:	b2d2      	uxtb	r2, r2
   10c20:	f042 0201 	orr.w	r2, r2, #1
   10c24:	b2d2      	uxtb	r2, r2
   10c26:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10c28:	f242 030d 	movw	r3, #8205	; 0x200d
   10c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c30:	f242 020d 	movw	r2, #8205	; 0x200d
   10c34:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c38:	7812      	ldrb	r2, [r2, #0]
   10c3a:	b2d2      	uxtb	r2, r2
   10c3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10c40:	b2d2      	uxtb	r2, r2
   10c42:	701a      	strb	r2, [r3, #0]
   10c44:	f242 030d 	movw	r3, #8205	; 0x200d
   10c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c4c:	f242 020d 	movw	r2, #8205	; 0x200d
   10c50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c54:	7812      	ldrb	r2, [r2, #0]
   10c56:	b2d2      	uxtb	r2, r2
   10c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10c5c:	b2d2      	uxtb	r2, r2
   10c5e:	701a      	strb	r2, [r3, #0]
    return;
   10c60:	e051      	b.n	10d06 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   10c62:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10c66:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10c6a:	781b      	ldrb	r3, [r3, #0]
   10c6c:	2b15      	cmp	r3, #21
   10c6e:	d820      	bhi.n	10cb2 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   10c70:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10c74:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10c78:	781b      	ldrb	r3, [r3, #0]
   10c7a:	461a      	mov	r2, r3
   10c7c:	f642 53c0 	movw	r3, #11712	; 0x2dc0
   10c80:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10c84:	4413      	add	r3, r2
   10c86:	781b      	ldrb	r3, [r3, #0]
   10c88:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   10c8a:	f242 030f 	movw	r3, #8207	; 0x200f
   10c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c92:	79fa      	ldrb	r2, [r7, #7]
   10c94:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   10c96:	f642 53db 	movw	r3, #11739	; 0x2ddb
   10c9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10c9e:	781a      	ldrb	r2, [r3, #0]
   10ca0:	79fb      	ldrb	r3, [r7, #7]
   10ca2:	4053      	eors	r3, r2
   10ca4:	b2da      	uxtb	r2, r3
   10ca6:	f642 53db 	movw	r3, #11739	; 0x2ddb
   10caa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10cae:	701a      	strb	r2, [r3, #0]
   10cb0:	e009      	b.n	10cc6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   10cb2:	f242 030f 	movw	r3, #8207	; 0x200f
   10cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cba:	f642 52db 	movw	r2, #11739	; 0x2ddb
   10cbe:	f2c2 0201 	movt	r2, #8193	; 0x2001
   10cc2:	7812      	ldrb	r2, [r2, #0]
   10cc4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   10cc6:	f242 030f 	movw	r3, #8207	; 0x200f
   10cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cce:	781b      	ldrb	r3, [r3, #0]
   10cd0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   10cd2:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   10cd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10cda:	781b      	ldrb	r3, [r3, #0]
   10cdc:	1e5a      	subs	r2, r3, #1
   10cde:	f642 53a8 	movw	r3, #11688	; 0x2da8
   10ce2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10ce6:	4413      	add	r3, r2
   10ce8:	79fa      	ldrb	r2, [r7, #7]
   10cea:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   10cec:	f642 53da 	movw	r3, #11738	; 0x2dda
   10cf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10cf4:	781a      	ldrb	r2, [r3, #0]
   10cf6:	79fb      	ldrb	r3, [r7, #7]
   10cf8:	4053      	eors	r3, r2
   10cfa:	b2da      	uxtb	r2, r3
   10cfc:	f642 53da 	movw	r3, #11738	; 0x2dda
   10d00:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10d04:	701a      	strb	r2, [r3, #0]
}
   10d06:	370c      	adds	r7, #12
   10d08:	46bd      	mov	sp, r7
   10d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d0e:	4770      	bx	lr

00010d10 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   10d10:	b480      	push	{r7}
   10d12:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   10d14:	f242 0317 	movw	r3, #8215	; 0x2017
   10d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d1c:	f242 0217 	movw	r2, #8215	; 0x2017
   10d20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d24:	7812      	ldrb	r2, [r2, #0]
   10d26:	b2d2      	uxtb	r2, r2
   10d28:	f042 0206 	orr.w	r2, r2, #6
   10d2c:	b2d2      	uxtb	r2, r2
   10d2e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   10d30:	f242 0317 	movw	r3, #8215	; 0x2017
   10d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d38:	f242 0217 	movw	r2, #8215	; 0x2017
   10d3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d40:	7812      	ldrb	r2, [r2, #0]
   10d42:	b2d2      	uxtb	r2, r2
   10d44:	f042 0201 	orr.w	r2, r2, #1
   10d48:	b2d2      	uxtb	r2, r2
   10d4a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   10d4c:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10d50:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10d54:	2200      	movs	r2, #0
   10d56:	701a      	strb	r2, [r3, #0]
   10d58:	f242 0318 	movw	r3, #8216	; 0x2018
   10d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d60:	f242 0218 	movw	r2, #8216	; 0x2018
   10d64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d68:	7812      	ldrb	r2, [r2, #0]
   10d6a:	b2d2      	uxtb	r2, r2
   10d6c:	f042 0201 	orr.w	r2, r2, #1
   10d70:	b2d2      	uxtb	r2, r2
   10d72:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   10d74:	f242 0302 	movw	r3, #8194	; 0x2002
   10d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d7c:	f242 0202 	movw	r2, #8194	; 0x2002
   10d80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d84:	7812      	ldrb	r2, [r2, #0]
   10d86:	b2d2      	uxtb	r2, r2
   10d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10d8c:	b2d2      	uxtb	r2, r2
   10d8e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   10d90:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10d94:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10d98:	2200      	movs	r2, #0
   10d9a:	701a      	strb	r2, [r3, #0]
   10d9c:	f242 0303 	movw	r3, #8195	; 0x2003
   10da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da4:	f242 0203 	movw	r2, #8195	; 0x2003
   10da8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dac:	7812      	ldrb	r2, [r2, #0]
   10dae:	b2d2      	uxtb	r2, r2
   10db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10db4:	b2d2      	uxtb	r2, r2
   10db6:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   10db8:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10dbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10dc0:	2200      	movs	r2, #0
   10dc2:	701a      	strb	r2, [r3, #0]
}
   10dc4:	46bd      	mov	sp, r7
   10dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   10dca:	4770      	bx	lr

00010dcc <__vector_17>:


SIGNAL(SIG_SPI) {
   10dcc:	b580      	push	{r7, lr}
   10dce:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   10dd0:	f642 53dc 	movw	r3, #11740	; 0x2ddc
   10dd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	b2db      	uxtb	r3, r3
   10ddc:	2b01      	cmp	r3, #1
   10dde:	d102      	bne.n	10de6 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   10de0:	f7ff fe88 	bl	10af4 <link_fbw_on_spi_it>
   10de4:	e00b      	b.n	10dfe <__vector_17+0x32>
  else
    fatal_error_nb++;
   10de6:	f642 4380 	movw	r3, #11392	; 0x2c80
   10dea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10dee:	781b      	ldrb	r3, [r3, #0]
   10df0:	3301      	adds	r3, #1
   10df2:	b2da      	uxtb	r2, r3
   10df4:	f642 4380 	movw	r3, #11392	; 0x2c80
   10df8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10dfc:	701a      	strb	r2, [r3, #0]
}
   10dfe:	bd80      	pop	{r7, pc}

00010e00 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   10e00:	b480      	push	{r7}
   10e02:	b083      	sub	sp, #12
   10e04:	af00      	add	r7, sp, #0
   10e06:	4603      	mov	r3, r0
   10e08:	6039      	str	r1, [r7, #0]
   10e0a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10e0c:	79fa      	ldrb	r2, [r7, #7]
   10e0e:	f642 53f0 	movw	r3, #11760	; 0x2df0
   10e12:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10e16:	6839      	ldr	r1, [r7, #0]
   10e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10e1c:	370c      	adds	r7, #12
   10e1e:	46bd      	mov	sp, r7
   10e20:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e24:	4770      	bx	lr
   10e26:	bf00      	nop

00010e28 <adc_init>:

void 
adc_init( void )
{
   10e28:	b480      	push	{r7}
   10e2a:	b083      	sub	sp, #12
   10e2c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10e2e:	f242 0362 	movw	r3, #8290	; 0x2062
   10e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e36:	2200      	movs	r2, #0
   10e38:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10e3a:	f242 0361 	movw	r3, #8289	; 0x2061
   10e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e42:	2200      	movs	r2, #0
   10e44:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   10e46:	f242 0307 	movw	r3, #8199	; 0x2007
   10e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4e:	2240      	movs	r2, #64	; 0x40
   10e50:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   10e52:	f242 0308 	movw	r3, #8200	; 0x2008
   10e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5a:	f242 0208 	movw	r2, #8200	; 0x2008
   10e5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e62:	7812      	ldrb	r2, [r2, #0]
   10e64:	b2d2      	uxtb	r2, r2
   10e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10e6a:	b2d2      	uxtb	r2, r2
   10e6c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   10e6e:	f242 0306 	movw	r3, #8198	; 0x2006
   10e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e76:	22cf      	movs	r2, #207	; 0xcf
   10e78:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   10e7a:	2300      	movs	r3, #0
   10e7c:	71fb      	strb	r3, [r7, #7]
   10e7e:	e00a      	b.n	10e96 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   10e80:	79fa      	ldrb	r2, [r7, #7]
   10e82:	f642 53f0 	movw	r3, #11760	; 0x2df0
   10e86:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10e8a:	2100      	movs	r1, #0
   10e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   10e90:	79fb      	ldrb	r3, [r7, #7]
   10e92:	3301      	adds	r3, #1
   10e94:	71fb      	strb	r3, [r7, #7]
   10e96:	79fb      	ldrb	r3, [r7, #7]
   10e98:	2b07      	cmp	r3, #7
   10e9a:	d9f1      	bls.n	10e80 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   10e9c:	370c      	adds	r7, #12
   10e9e:	46bd      	mov	sp, r7
   10ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ea4:	4770      	bx	lr
   10ea6:	bf00      	nop

00010ea8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   10ea8:	b480      	push	{r7}
   10eaa:	b085      	sub	sp, #20
   10eac:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   10eae:	f242 0307 	movw	r3, #8199	; 0x2007
   10eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb6:	781b      	ldrb	r3, [r3, #0]
   10eb8:	b2db      	uxtb	r3, r3
   10eba:	f003 0307 	and.w	r3, r3, #7
   10ebe:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   10ec0:	7bfa      	ldrb	r2, [r7, #15]
   10ec2:	f642 53f0 	movw	r3, #11760	; 0x2df0
   10ec6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10ece:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   10ed0:	f242 0304 	movw	r3, #8196	; 0x2004
   10ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed8:	881b      	ldrh	r3, [r3, #0]
   10eda:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   10edc:	7bfa      	ldrb	r2, [r7, #15]
   10ede:	f642 53e0 	movw	r3, #11744	; 0x2de0
   10ee2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10ee6:	88f9      	ldrh	r1, [r7, #6]
   10ee8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   10eec:	68bb      	ldr	r3, [r7, #8]
   10eee:	2b00      	cmp	r3, #0
   10ef0:	d025      	beq.n	10f3e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   10ef2:	68bb      	ldr	r3, [r7, #8]
   10ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   10ef8:	3301      	adds	r3, #1
   10efa:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   10efc:	7bbb      	ldrb	r3, [r7, #14]
   10efe:	2b1f      	cmp	r3, #31
   10f00:	d901      	bls.n	10f06 <__vector_21+0x5e>
   10f02:	2300      	movs	r3, #0
   10f04:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   10f06:	68bb      	ldr	r3, [r7, #8]
   10f08:	881a      	ldrh	r2, [r3, #0]
   10f0a:	7bbb      	ldrb	r3, [r7, #14]
   10f0c:	68b9      	ldr	r1, [r7, #8]
   10f0e:	005b      	lsls	r3, r3, #1
   10f10:	440b      	add	r3, r1
   10f12:	885b      	ldrh	r3, [r3, #2]
   10f14:	1ad3      	subs	r3, r2, r3
   10f16:	b29a      	uxth	r2, r3
   10f18:	68bb      	ldr	r3, [r7, #8]
   10f1a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   10f1c:	7bbb      	ldrb	r3, [r7, #14]
   10f1e:	68ba      	ldr	r2, [r7, #8]
   10f20:	005b      	lsls	r3, r3, #1
   10f22:	4413      	add	r3, r2
   10f24:	88fa      	ldrh	r2, [r7, #6]
   10f26:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   10f28:	68bb      	ldr	r3, [r7, #8]
   10f2a:	881a      	ldrh	r2, [r3, #0]
   10f2c:	88fb      	ldrh	r3, [r7, #6]
   10f2e:	4413      	add	r3, r2
   10f30:	b29a      	uxth	r2, r3
   10f32:	68bb      	ldr	r3, [r7, #8]
   10f34:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   10f36:	68bb      	ldr	r3, [r7, #8]
   10f38:	7bba      	ldrb	r2, [r7, #14]
   10f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   10f3e:	7bfb      	ldrb	r3, [r7, #15]
   10f40:	3301      	adds	r3, #1
   10f42:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   10f44:	7bfb      	ldrb	r3, [r7, #15]
   10f46:	2b07      	cmp	r3, #7
   10f48:	d901      	bls.n	10f4e <__vector_21+0xa6>
    adc_input = 0;
   10f4a:	2300      	movs	r3, #0
   10f4c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   10f4e:	f242 0307 	movw	r3, #8199	; 0x2007
   10f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f56:	7bfa      	ldrb	r2, [r7, #15]
   10f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f5c:	b2d2      	uxtb	r2, r2
   10f5e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   10f60:	f242 0306 	movw	r3, #8198	; 0x2006
   10f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f68:	f242 0206 	movw	r2, #8198	; 0x2006
   10f6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f70:	7812      	ldrb	r2, [r2, #0]
   10f72:	b2d2      	uxtb	r2, r2
   10f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f78:	b2d2      	uxtb	r2, r2
   10f7a:	701a      	strb	r2, [r3, #0]
  
}
   10f7c:	3714      	adds	r7, #20
   10f7e:	46bd      	mov	sp, r7
   10f80:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop

00010f88 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   10f88:	b580      	push	{r7, lr}
   10f8a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   10f8c:	f003 fca8 	bl	148e0 <uart1_init>
#endif
  ubx_status = UNINIT;
   10f90:	f642 7337 	movw	r3, #12087	; 0x2f37
   10f94:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10f98:	2200      	movs	r2, #0
   10f9a:	701a      	strb	r2, [r3, #0]
}
   10f9c:	bd80      	pop	{r7, pc}
   10f9e:	bf00      	nop

00010fa0 <parse_gps_msg>:

void parse_gps_msg( void ) {
   10fa0:	b580      	push	{r7, lr}
   10fa2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   10fa4:	f642 733e 	movw	r3, #12094	; 0x2f3e
   10fa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fac:	781b      	ldrb	r3, [r3, #0]
   10fae:	2b01      	cmp	r3, #1
   10fb0:	f040 80f9 	bne.w	111a6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   10fb4:	f642 733d 	movw	r3, #12093	; 0x2f3d
   10fb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fbc:	781b      	ldrb	r3, [r3, #0]
   10fbe:	2b08      	cmp	r3, #8
   10fc0:	d128      	bne.n	11014 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   10fc2:	f642 6338 	movw	r3, #11832	; 0x2e38
   10fc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fca:	685a      	ldr	r2, [r3, #4]
   10fcc:	f642 6324 	movw	r3, #11812	; 0x2e24
   10fd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fd4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   10fd6:	f642 6338 	movw	r3, #11832	; 0x2e38
   10fda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fde:	689a      	ldr	r2, [r3, #8]
   10fe0:	f642 6328 	movw	r3, #11816	; 0x2e28
   10fe4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   10fe8:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   10fea:	4b73      	ldr	r3, [pc, #460]	; (111b8 <parse_gps_msg+0x218>)
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	4618      	mov	r0, r3
   10ff0:	f006 fe60 	bl	17cb4 <__aeabi_i2f>
   10ff4:	4603      	mov	r3, r0
   10ff6:	4618      	mov	r0, r3
   10ff8:	f04f 0100 	mov.w	r1, #0
   10ffc:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11000:	f006 ff60 	bl	17ec4 <__aeabi_fdiv>
   11004:	4603      	mov	r3, r0
   11006:	461a      	mov	r2, r3
   11008:	f642 6314 	movw	r3, #11796	; 0x2e14
   1100c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11010:	601a      	str	r2, [r3, #0]
   11012:	e0c8      	b.n	111a6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11014:	f642 733d 	movw	r3, #12093	; 0x2f3d
   11018:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1101c:	781b      	ldrb	r3, [r3, #0]
   1101e:	2b03      	cmp	r3, #3
   11020:	d10a      	bne.n	11038 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   11022:	f642 6338 	movw	r3, #11832	; 0x2e38
   11026:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1102a:	791a      	ldrb	r2, [r3, #4]
   1102c:	f642 6334 	movw	r3, #11828	; 0x2e34
   11030:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11034:	701a      	strb	r2, [r3, #0]
   11036:	e0b6      	b.n	111a6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11038:	f642 733d 	movw	r3, #12093	; 0x2f3d
   1103c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11040:	781b      	ldrb	r3, [r3, #0]
   11042:	2b12      	cmp	r3, #18
   11044:	f040 80af 	bne.w	111a6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11048:	4b5c      	ldr	r3, [pc, #368]	; (111bc <parse_gps_msg+0x21c>)
   1104a:	681b      	ldr	r3, [r3, #0]
   1104c:	4618      	mov	r0, r3
   1104e:	f006 fe2d 	bl	17cac <__aeabi_ui2f>
   11052:	4603      	mov	r3, r0
   11054:	4618      	mov	r0, r3
   11056:	f04f 0100 	mov.w	r1, #0
   1105a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1105e:	f006 ff31 	bl	17ec4 <__aeabi_fdiv>
   11062:	4603      	mov	r3, r0
   11064:	461a      	mov	r2, r3
   11066:	f642 6318 	movw	r3, #11800	; 0x2e18
   1106a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1106e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11070:	4b51      	ldr	r3, [pc, #324]	; (111b8 <parse_gps_msg+0x218>)
   11072:	681b      	ldr	r3, [r3, #0]
   11074:	4618      	mov	r0, r3
   11076:	f006 fe1d 	bl	17cb4 <__aeabi_i2f>
   1107a:	4603      	mov	r3, r0
   1107c:	4618      	mov	r0, r3
   1107e:	f04f 0100 	mov.w	r1, #0
   11082:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11086:	f006 ff1d 	bl	17ec4 <__aeabi_fdiv>
   1108a:	4603      	mov	r3, r0
   1108c:	461a      	mov	r2, r3
   1108e:	f642 631c 	movw	r3, #11804	; 0x2e1c
   11092:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11096:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11098:	4b49      	ldr	r3, [pc, #292]	; (111c0 <parse_gps_msg+0x220>)
   1109a:	681b      	ldr	r3, [r3, #0]
   1109c:	4618      	mov	r0, r3
   1109e:	f006 fe09 	bl	17cb4 <__aeabi_i2f>
   110a2:	4603      	mov	r3, r0
   110a4:	4618      	mov	r0, r3
   110a6:	f006 f9c5 	bl	17434 <__aeabi_f2d>
   110aa:	4602      	mov	r2, r0
   110ac:	460b      	mov	r3, r1
   110ae:	4610      	mov	r0, r2
   110b0:	4619      	mov	r1, r3
   110b2:	a33d      	add	r3, pc, #244	; (adr r3, 111a8 <parse_gps_msg+0x208>)
   110b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   110b8:	f006 fb3a 	bl	17730 <__aeabi_ddiv>
   110bc:	4602      	mov	r2, r0
   110be:	460b      	mov	r3, r1
   110c0:	4610      	mov	r0, r2
   110c2:	4619      	mov	r1, r3
   110c4:	f04f 0200 	mov.w	r2, #0
   110c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   110cc:	f2c4 0366 	movt	r3, #16486	; 0x4066
   110d0:	f006 fb2e 	bl	17730 <__aeabi_ddiv>
   110d4:	4602      	mov	r2, r0
   110d6:	460b      	mov	r3, r1
   110d8:	4610      	mov	r0, r2
   110da:	4619      	mov	r1, r3
   110dc:	a334      	add	r3, pc, #208	; (adr r3, 111b0 <parse_gps_msg+0x210>)
   110de:	e9d3 2300 	ldrd	r2, r3, [r3]
   110e2:	f006 f9fb 	bl	174dc <__aeabi_dmul>
   110e6:	4602      	mov	r2, r0
   110e8:	460b      	mov	r3, r1
   110ea:	4610      	mov	r0, r2
   110ec:	4619      	mov	r1, r3
   110ee:	f006 fcd7 	bl	17aa0 <__aeabi_d2f>
   110f2:	4602      	mov	r2, r0
   110f4:	f642 6320 	movw	r3, #11808	; 0x2e20
   110f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   110fc:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   110fe:	f642 6338 	movw	r3, #11832	; 0x2e38
   11102:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11106:	681b      	ldr	r3, [r3, #0]
   11108:	4618      	mov	r0, r3
   1110a:	f006 fdcf 	bl	17cac <__aeabi_ui2f>
   1110e:	4603      	mov	r3, r0
   11110:	4618      	mov	r0, r3
   11112:	f04f 0100 	mov.w	r1, #0
   11116:	f2c4 417a 	movt	r1, #17530	; 0x447a
   1111a:	f006 fed3 	bl	17ec4 <__aeabi_fdiv>
   1111e:	4603      	mov	r3, r0
   11120:	461a      	mov	r2, r3
   11122:	f642 6310 	movw	r3, #11792	; 0x2e10
   11126:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1112a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   1112c:	f642 6324 	movw	r3, #11812	; 0x2e24
   11130:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11134:	681a      	ldr	r2, [r3, #0]
   11136:	f248 531f 	movw	r3, #34079	; 0x851f
   1113a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1113e:	fb83 1302 	smull	r1, r3, r3, r2
   11142:	1159      	asrs	r1, r3, #5
   11144:	17d3      	asrs	r3, r2, #31
   11146:	1acb      	subs	r3, r1, r3
   11148:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1114c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11150:	4618      	mov	r0, r3
   11152:	f006 fdaf 	bl	17cb4 <__aeabi_i2f>
   11156:	4602      	mov	r2, r0
   11158:	f642 632c 	movw	r3, #11820	; 0x2e2c
   1115c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11160:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11162:	f642 6328 	movw	r3, #11816	; 0x2e28
   11166:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1116a:	681a      	ldr	r2, [r3, #0]
   1116c:	f248 531f 	movw	r3, #34079	; 0x851f
   11170:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11174:	fb83 1302 	smull	r1, r3, r3, r2
   11178:	1159      	asrs	r1, r3, #5
   1117a:	17d3      	asrs	r3, r2, #31
   1117c:	1aca      	subs	r2, r1, r3
   1117e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11182:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11186:	4413      	add	r3, r2
   11188:	4618      	mov	r0, r3
   1118a:	f006 fd93 	bl	17cb4 <__aeabi_i2f>
   1118e:	4602      	mov	r2, r0
   11190:	f642 6330 	movw	r3, #11824	; 0x2e30
   11194:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11198:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1119a:	f642 6336 	movw	r3, #11830	; 0x2e36
   1119e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   111a2:	2201      	movs	r2, #1
   111a4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   111a6:	bd80      	pop	{r7, pc}
   111a8:	00000000 	.word	0x00000000
   111ac:	40f86a00 	.word	0x40f86a00
   111b0:	5a7ed197 	.word	0x5a7ed197
   111b4:	400921fb 	.word	0x400921fb
   111b8:	20012e44 	.word	0x20012e44
   111bc:	20012e4c 	.word	0x20012e4c
   111c0:	20012e50 	.word	0x20012e50

000111c4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   111c4:	b480      	push	{r7}
   111c6:	b083      	sub	sp, #12
   111c8:	af00      	add	r7, sp, #0
   111ca:	4603      	mov	r3, r0
   111cc:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   111ce:	f642 7337 	movw	r3, #12087	; 0x2f37
   111d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   111d6:	781b      	ldrb	r3, [r3, #0]
   111d8:	2b06      	cmp	r3, #6
   111da:	d81d      	bhi.n	11218 <parse_ubx+0x54>
    ck_a += c;
   111dc:	f642 733b 	movw	r3, #12091	; 0x2f3b
   111e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   111e4:	781a      	ldrb	r2, [r3, #0]
   111e6:	79fb      	ldrb	r3, [r7, #7]
   111e8:	4413      	add	r3, r2
   111ea:	b2da      	uxtb	r2, r3
   111ec:	f642 733b 	movw	r3, #12091	; 0x2f3b
   111f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   111f4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   111f6:	f642 733c 	movw	r3, #12092	; 0x2f3c
   111fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   111fe:	781a      	ldrb	r2, [r3, #0]
   11200:	f642 733b 	movw	r3, #12091	; 0x2f3b
   11204:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	4413      	add	r3, r2
   1120c:	b2da      	uxtb	r2, r3
   1120e:	f642 733c 	movw	r3, #12092	; 0x2f3c
   11212:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11216:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11218:	f642 7337 	movw	r3, #12087	; 0x2f37
   1121c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	2b00      	cmp	r3, #0
   11224:	d110      	bne.n	11248 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11226:	79fb      	ldrb	r3, [r7, #7]
   11228:	2bb5      	cmp	r3, #181	; 0xb5
   1122a:	f040 8135 	bne.w	11498 <parse_ubx+0x2d4>
      ubx_status++;
   1122e:	f642 7337 	movw	r3, #12087	; 0x2f37
   11232:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11236:	781b      	ldrb	r3, [r3, #0]
   11238:	3301      	adds	r3, #1
   1123a:	b2da      	uxtb	r2, r3
   1123c:	f642 7337 	movw	r3, #12087	; 0x2f37
   11240:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11244:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11246:	e12f      	b.n	114a8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11248:	f642 7337 	movw	r3, #12087	; 0x2f37
   1124c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11250:	781b      	ldrb	r3, [r3, #0]
   11252:	2b01      	cmp	r3, #1
   11254:	d11c      	bne.n	11290 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11256:	79fb      	ldrb	r3, [r7, #7]
   11258:	2b62      	cmp	r3, #98	; 0x62
   1125a:	d000      	beq.n	1125e <parse_ubx+0x9a>
      goto error;
   1125c:	e11d      	b.n	1149a <parse_ubx+0x2d6>
    ck_a = 0;
   1125e:	f642 733b 	movw	r3, #12091	; 0x2f3b
   11262:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11266:	2200      	movs	r2, #0
   11268:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1126a:	f642 733c 	movw	r3, #12092	; 0x2f3c
   1126e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11272:	2200      	movs	r2, #0
   11274:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11276:	f642 7337 	movw	r3, #12087	; 0x2f37
   1127a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1127e:	781b      	ldrb	r3, [r3, #0]
   11280:	3301      	adds	r3, #1
   11282:	b2da      	uxtb	r2, r3
   11284:	f642 7337 	movw	r3, #12087	; 0x2f37
   11288:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1128c:	701a      	strb	r2, [r3, #0]
   1128e:	e103      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11290:	f642 7337 	movw	r3, #12087	; 0x2f37
   11294:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11298:	781b      	ldrb	r3, [r3, #0]
   1129a:	2b02      	cmp	r3, #2
   1129c:	d127      	bne.n	112ee <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1129e:	f642 6335 	movw	r3, #11829	; 0x2e35
   112a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	b2db      	uxtb	r3, r3
   112aa:	2b00      	cmp	r3, #0
   112ac:	d00c      	beq.n	112c8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   112ae:	f642 733f 	movw	r3, #12095	; 0x2f3f
   112b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112b6:	781b      	ldrb	r3, [r3, #0]
   112b8:	3301      	adds	r3, #1
   112ba:	b2da      	uxtb	r2, r3
   112bc:	f642 733f 	movw	r3, #12095	; 0x2f3f
   112c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112c4:	701a      	strb	r2, [r3, #0]
      goto error;
   112c6:	e0e8      	b.n	1149a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   112c8:	f642 733e 	movw	r3, #12094	; 0x2f3e
   112cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112d0:	79fa      	ldrb	r2, [r7, #7]
   112d2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   112d4:	f642 7337 	movw	r3, #12087	; 0x2f37
   112d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	3301      	adds	r3, #1
   112e0:	b2da      	uxtb	r2, r3
   112e2:	f642 7337 	movw	r3, #12087	; 0x2f37
   112e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112ea:	701a      	strb	r2, [r3, #0]
   112ec:	e0d4      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   112ee:	f642 7337 	movw	r3, #12087	; 0x2f37
   112f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   112f6:	781b      	ldrb	r3, [r3, #0]
   112f8:	2b03      	cmp	r3, #3
   112fa:	d112      	bne.n	11322 <parse_ubx+0x15e>
  {
    ubx_id = c;
   112fc:	f642 733d 	movw	r3, #12093	; 0x2f3d
   11300:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11304:	79fa      	ldrb	r2, [r7, #7]
   11306:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11308:	f642 7337 	movw	r3, #12087	; 0x2f37
   1130c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	3301      	adds	r3, #1
   11314:	b2da      	uxtb	r2, r3
   11316:	f642 7337 	movw	r3, #12087	; 0x2f37
   1131a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1131e:	701a      	strb	r2, [r3, #0]
   11320:	e0ba      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11322:	f642 7337 	movw	r3, #12087	; 0x2f37
   11326:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1132a:	781b      	ldrb	r3, [r3, #0]
   1132c:	2b04      	cmp	r3, #4
   1132e:	d113      	bne.n	11358 <parse_ubx+0x194>
  {
    ubx_len = c;
   11330:	79fb      	ldrb	r3, [r7, #7]
   11332:	b29a      	uxth	r2, r3
   11334:	f642 7338 	movw	r3, #12088	; 0x2f38
   11338:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1133c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   1133e:	f642 7337 	movw	r3, #12087	; 0x2f37
   11342:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11346:	781b      	ldrb	r3, [r3, #0]
   11348:	3301      	adds	r3, #1
   1134a:	b2da      	uxtb	r2, r3
   1134c:	f642 7337 	movw	r3, #12087	; 0x2f37
   11350:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11354:	701a      	strb	r2, [r3, #0]
   11356:	e09f      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11358:	f642 7337 	movw	r3, #12087	; 0x2f37
   1135c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11360:	781b      	ldrb	r3, [r3, #0]
   11362:	2b05      	cmp	r3, #5
   11364:	d12b      	bne.n	113be <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11366:	79fb      	ldrb	r3, [r7, #7]
   11368:	021b      	lsls	r3, r3, #8
   1136a:	b29a      	uxth	r2, r3
   1136c:	f642 7338 	movw	r3, #12088	; 0x2f38
   11370:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11374:	881b      	ldrh	r3, [r3, #0]
   11376:	b29b      	uxth	r3, r3
   11378:	4313      	orrs	r3, r2
   1137a:	b29b      	uxth	r3, r3
   1137c:	b29a      	uxth	r2, r3
   1137e:	f642 7338 	movw	r3, #12088	; 0x2f38
   11382:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11386:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11388:	f642 7338 	movw	r3, #12088	; 0x2f38
   1138c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11390:	881b      	ldrh	r3, [r3, #0]
   11392:	2bff      	cmp	r3, #255	; 0xff
   11394:	d900      	bls.n	11398 <parse_ubx+0x1d4>
      goto error;
   11396:	e080      	b.n	1149a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11398:	f642 733a 	movw	r3, #12090	; 0x2f3a
   1139c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113a0:	2200      	movs	r2, #0
   113a2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   113a4:	f642 7337 	movw	r3, #12087	; 0x2f37
   113a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113ac:	781b      	ldrb	r3, [r3, #0]
   113ae:	3301      	adds	r3, #1
   113b0:	b2da      	uxtb	r2, r3
   113b2:	f642 7337 	movw	r3, #12087	; 0x2f37
   113b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113ba:	701a      	strb	r2, [r3, #0]
   113bc:	e06c      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   113be:	f642 7337 	movw	r3, #12087	; 0x2f37
   113c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113c6:	781b      	ldrb	r3, [r3, #0]
   113c8:	2b06      	cmp	r3, #6
   113ca:	d131      	bne.n	11430 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   113cc:	f642 733a 	movw	r3, #12090	; 0x2f3a
   113d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113d4:	781b      	ldrb	r3, [r3, #0]
   113d6:	461a      	mov	r2, r3
   113d8:	f642 6338 	movw	r3, #11832	; 0x2e38
   113dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113e0:	79f9      	ldrb	r1, [r7, #7]
   113e2:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   113e4:	f642 733a 	movw	r3, #12090	; 0x2f3a
   113e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	3301      	adds	r3, #1
   113f0:	b2da      	uxtb	r2, r3
   113f2:	f642 733a 	movw	r3, #12090	; 0x2f3a
   113f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   113fa:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   113fc:	f642 733a 	movw	r3, #12090	; 0x2f3a
   11400:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11404:	781b      	ldrb	r3, [r3, #0]
   11406:	461a      	mov	r2, r3
   11408:	f642 7338 	movw	r3, #12088	; 0x2f38
   1140c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11410:	881b      	ldrh	r3, [r3, #0]
   11412:	429a      	cmp	r2, r3
   11414:	d340      	bcc.n	11498 <parse_ubx+0x2d4>
      ubx_status++;
   11416:	f642 7337 	movw	r3, #12087	; 0x2f37
   1141a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1141e:	781b      	ldrb	r3, [r3, #0]
   11420:	3301      	adds	r3, #1
   11422:	b2da      	uxtb	r2, r3
   11424:	f642 7337 	movw	r3, #12087	; 0x2f37
   11428:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1142c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1142e:	e03b      	b.n	114a8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11430:	f642 7337 	movw	r3, #12087	; 0x2f37
   11434:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11438:	781b      	ldrb	r3, [r3, #0]
   1143a:	2b07      	cmp	r3, #7
   1143c:	d115      	bne.n	1146a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   1143e:	f642 733b 	movw	r3, #12091	; 0x2f3b
   11442:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11446:	781b      	ldrb	r3, [r3, #0]
   11448:	79fa      	ldrb	r2, [r7, #7]
   1144a:	429a      	cmp	r2, r3
   1144c:	d000      	beq.n	11450 <parse_ubx+0x28c>
      goto error;
   1144e:	e024      	b.n	1149a <parse_ubx+0x2d6>
    ubx_status++;
   11450:	f642 7337 	movw	r3, #12087	; 0x2f37
   11454:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	3301      	adds	r3, #1
   1145c:	b2da      	uxtb	r2, r3
   1145e:	f642 7337 	movw	r3, #12087	; 0x2f37
   11462:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11466:	701a      	strb	r2, [r3, #0]
   11468:	e016      	b.n	11498 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   1146a:	f642 7337 	movw	r3, #12087	; 0x2f37
   1146e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11472:	781b      	ldrb	r3, [r3, #0]
   11474:	2b08      	cmp	r3, #8
   11476:	d10f      	bne.n	11498 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11478:	f642 733c 	movw	r3, #12092	; 0x2f3c
   1147c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11480:	781b      	ldrb	r3, [r3, #0]
   11482:	79fa      	ldrb	r2, [r7, #7]
   11484:	429a      	cmp	r2, r3
   11486:	d000      	beq.n	1148a <parse_ubx+0x2c6>
      goto error;
   11488:	e007      	b.n	1149a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   1148a:	f642 6335 	movw	r3, #11829	; 0x2e35
   1148e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11492:	2201      	movs	r2, #1
   11494:	701a      	strb	r2, [r3, #0]
    goto restart;
   11496:	e000      	b.n	1149a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11498:	e006      	b.n	114a8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   1149a:	f642 7337 	movw	r3, #12087	; 0x2f37
   1149e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   114a2:	2200      	movs	r2, #0
   114a4:	701a      	strb	r2, [r3, #0]
  return;
   114a6:	bf00      	nop
}
   114a8:	370c      	adds	r7, #12
   114aa:	46bd      	mov	sp, r7
   114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   114b0:	4770      	bx	lr
   114b2:	bf00      	nop

000114b4 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   114b4:	b580      	push	{r7, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	af00      	add	r7, sp, #0
   114ba:	f242 039c 	movw	r3, #8348	; 0x209c
   114be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c2:	781b      	ldrb	r3, [r3, #0]
   114c4:	71fb      	strb	r3, [r7, #7]
   114c6:	79fb      	ldrb	r3, [r7, #7]
   114c8:	4618      	mov	r0, r3
   114ca:	f7ff fe7b 	bl	111c4 <parse_ubx>
   114ce:	3708      	adds	r7, #8
   114d0:	46bd      	mov	sp, r7
   114d2:	bd80      	pop	{r7, pc}
   114d4:	f3af 8000 	nop.w

000114d8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   114d8:	b580      	push	{r7, lr}
   114da:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   114dc:	f640 2328 	movw	r3, #2600	; 0xa28
   114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e4:	f24c 228f 	movw	r2, #49807	; 0xc28f
   114e8:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   114ec:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   114ee:	2001      	movs	r0, #1
   114f0:	f642 7144 	movw	r1, #12100	; 0x2f44
   114f4:	f2c2 0101 	movt	r1, #8193	; 0x2001
   114f8:	f7ff fc82 	bl	10e00 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   114fc:	2002      	movs	r0, #2
   114fe:	f642 7188 	movw	r1, #12168	; 0x2f88
   11502:	f2c2 0101 	movt	r1, #8193	; 0x2001
   11506:	f7ff fc7b 	bl	10e00 <adc_buf_channel>
}
   1150a:	bd80      	pop	{r7, pc}

0001150c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   1150c:	b480      	push	{r7}
   1150e:	b083      	sub	sp, #12
   11510:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11512:	f642 7344 	movw	r3, #12100	; 0x2f44
   11516:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1151a:	881b      	ldrh	r3, [r3, #0]
   1151c:	095b      	lsrs	r3, r3, #5
   1151e:	b29b      	uxth	r3, r3
   11520:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11522:	f642 7388 	movw	r3, #12168	; 0x2f88
   11526:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1152a:	881b      	ldrh	r3, [r3, #0]
   1152c:	095b      	lsrs	r3, r3, #5
   1152e:	b29b      	uxth	r3, r3
   11530:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11532:	88fb      	ldrh	r3, [r7, #6]
   11534:	425b      	negs	r3, r3
   11536:	b29a      	uxth	r2, r3
   11538:	88bb      	ldrh	r3, [r7, #4]
   1153a:	1ad3      	subs	r3, r2, r3
   1153c:	b29a      	uxth	r2, r3
   1153e:	f640 2322 	movw	r3, #2594	; 0xa22
   11542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11546:	881b      	ldrh	r3, [r3, #0]
   11548:	b29b      	uxth	r3, r3
   1154a:	1ad3      	subs	r3, r2, r3
   1154c:	b29b      	uxth	r3, r3
   1154e:	b29a      	uxth	r2, r3
   11550:	f642 7340 	movw	r3, #12096	; 0x2f40
   11554:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11558:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   1155a:	88ba      	ldrh	r2, [r7, #4]
   1155c:	88fb      	ldrh	r3, [r7, #6]
   1155e:	1ad3      	subs	r3, r2, r3
   11560:	b29a      	uxth	r2, r3
   11562:	f640 2324 	movw	r3, #2596	; 0xa24
   11566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156a:	881b      	ldrh	r3, [r3, #0]
   1156c:	b29b      	uxth	r3, r3
   1156e:	1ad3      	subs	r3, r2, r3
   11570:	b29b      	uxth	r3, r3
   11572:	b29a      	uxth	r2, r3
   11574:	f642 7342 	movw	r3, #12098	; 0x2f42
   11578:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1157c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   1157e:	370c      	adds	r7, #12
   11580:	46bd      	mov	sp, r7
   11582:	f85d 7b04 	ldr.w	r7, [sp], #4
   11586:	4770      	bx	lr

00011588 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11588:	b580      	push	{r7, lr}
   1158a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   1158c:	f642 7342 	movw	r3, #12098	; 0x2f42
   11590:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11594:	881b      	ldrh	r3, [r3, #0]
   11596:	b29b      	uxth	r3, r3
   11598:	425b      	negs	r3, r3
   1159a:	b29b      	uxth	r3, r3
   1159c:	b29a      	uxth	r2, r3
   1159e:	f640 2320 	movw	r3, #2592	; 0xa20
   115a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   115a8:	f640 2320 	movw	r3, #2592	; 0xa20
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	881b      	ldrh	r3, [r3, #0]
   115b2:	b21b      	sxth	r3, r3
   115b4:	4618      	mov	r0, r3
   115b6:	f005 ff2b 	bl	17410 <__aeabi_i2d>
   115ba:	4602      	mov	r2, r0
   115bc:	460b      	mov	r3, r1
   115be:	f04f 0000 	mov.w	r0, #0
   115c2:	f04f 0100 	mov.w	r1, #0
   115c6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   115ca:	f006 f8b1 	bl	17730 <__aeabi_ddiv>
   115ce:	4602      	mov	r2, r0
   115d0:	460b      	mov	r3, r1
   115d2:	4610      	mov	r0, r2
   115d4:	4619      	mov	r1, r3
   115d6:	f006 fa63 	bl	17aa0 <__aeabi_d2f>
   115da:	4602      	mov	r2, r0
   115dc:	f640 2328 	movw	r3, #2600	; 0xa28
   115e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e4:	601a      	str	r2, [r3, #0]
}
   115e6:	bd80      	pop	{r7, pc}

000115e8 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   115e8:	b590      	push	{r4, r7, lr}
   115ea:	b083      	sub	sp, #12
   115ec:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   115ee:	f243 2360 	movw	r3, #12896	; 0x3260
   115f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   115f6:	681a      	ldr	r2, [r3, #0]
   115f8:	f642 73cc 	movw	r3, #12236	; 0x2fcc
   115fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11600:	681b      	ldr	r3, [r3, #0]
   11602:	4610      	mov	r0, r2
   11604:	4619      	mov	r1, r3
   11606:	f006 fa9f 	bl	17b48 <__aeabi_fsub>
   1160a:	4603      	mov	r3, r0
   1160c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   1160e:	f640 232c 	movw	r3, #2604	; 0xa2c
   11612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11616:	681b      	ldr	r3, [r3, #0]
   11618:	4618      	mov	r0, r3
   1161a:	6879      	ldr	r1, [r7, #4]
   1161c:	f006 fb9e 	bl	17d5c <__aeabi_fmul>
   11620:	4603      	mov	r3, r0
   11622:	4618      	mov	r0, r3
   11624:	f04f 0100 	mov.w	r1, #0
   11628:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1162c:	f006 fd34 	bl	18098 <__aeabi_fcmplt>
   11630:	4603      	mov	r3, r0
   11632:	2b00      	cmp	r3, #0
   11634:	d002      	beq.n	1163c <roll_pitch_pid_run+0x54>
   11636:	f64d 2280 	movw	r2, #55936	; 0xda80
   1163a:	e026      	b.n	1168a <roll_pitch_pid_run+0xa2>
   1163c:	f640 232c 	movw	r3, #2604	; 0xa2c
   11640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11644:	681b      	ldr	r3, [r3, #0]
   11646:	4618      	mov	r0, r3
   11648:	6879      	ldr	r1, [r7, #4]
   1164a:	f006 fb87 	bl	17d5c <__aeabi_fmul>
   1164e:	4603      	mov	r3, r0
   11650:	4618      	mov	r0, r3
   11652:	f04f 0100 	mov.w	r1, #0
   11656:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1165a:	f006 fd3b 	bl	180d4 <__aeabi_fcmpgt>
   1165e:	4603      	mov	r3, r0
   11660:	2b00      	cmp	r3, #0
   11662:	d002      	beq.n	1166a <roll_pitch_pid_run+0x82>
   11664:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11668:	e00e      	b.n	11688 <roll_pitch_pid_run+0xa0>
   1166a:	f640 232c 	movw	r3, #2604	; 0xa2c
   1166e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11672:	681b      	ldr	r3, [r3, #0]
   11674:	4618      	mov	r0, r3
   11676:	6879      	ldr	r1, [r7, #4]
   11678:	f006 fb70 	bl	17d5c <__aeabi_fmul>
   1167c:	4603      	mov	r3, r0
   1167e:	4618      	mov	r0, r3
   11680:	f006 fd32 	bl	180e8 <__aeabi_f2iz>
   11684:	4603      	mov	r3, r0
   11686:	b29b      	uxth	r3, r3
   11688:	b29a      	uxth	r2, r3
   1168a:	f642 73d6 	movw	r3, #12246	; 0x2fd6
   1168e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11692:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11694:	f642 73dc 	movw	r3, #12252	; 0x2fdc
   11698:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1169c:	681b      	ldr	r3, [r3, #0]
   1169e:	4618      	mov	r0, r3
   116a0:	f04f 0100 	mov.w	r1, #0
   116a4:	f006 fcf8 	bl	18098 <__aeabi_fcmplt>
   116a8:	4603      	mov	r3, r0
   116aa:	2b00      	cmp	r3, #0
   116ac:	d006      	beq.n	116bc <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   116ae:	f642 73dc 	movw	r3, #12252	; 0x2fdc
   116b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   116b6:	f04f 0200 	mov.w	r2, #0
   116ba:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   116bc:	f243 2368 	movw	r3, #12904	; 0x3268
   116c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   116c4:	681a      	ldr	r2, [r3, #0]
   116c6:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   116ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   116ce:	681b      	ldr	r3, [r3, #0]
   116d0:	4610      	mov	r0, r2
   116d2:	4619      	mov	r1, r3
   116d4:	f006 fa38 	bl	17b48 <__aeabi_fsub>
   116d8:	4603      	mov	r3, r0
   116da:	461c      	mov	r4, r3
   116dc:	f243 2360 	movw	r3, #12896	; 0x3260
   116e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   116e4:	681b      	ldr	r3, [r3, #0]
   116e6:	4618      	mov	r0, r3
   116e8:	f04f 0100 	mov.w	r1, #0
   116ec:	f006 fcd4 	bl	18098 <__aeabi_fcmplt>
   116f0:	4603      	mov	r3, r0
   116f2:	2b00      	cmp	r3, #0
   116f4:	d007      	beq.n	11706 <roll_pitch_pid_run+0x11e>
   116f6:	f243 2360 	movw	r3, #12896	; 0x3260
   116fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   116fe:	681b      	ldr	r3, [r3, #0]
   11700:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11704:	e004      	b.n	11710 <roll_pitch_pid_run+0x128>
   11706:	f243 2360 	movw	r3, #12896	; 0x3260
   1170a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1170e:	681a      	ldr	r2, [r3, #0]
   11710:	f642 73dc 	movw	r3, #12252	; 0x2fdc
   11714:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11718:	681b      	ldr	r3, [r3, #0]
   1171a:	4610      	mov	r0, r2
   1171c:	4619      	mov	r1, r3
   1171e:	f006 fb1d 	bl	17d5c <__aeabi_fmul>
   11722:	4603      	mov	r3, r0
   11724:	4620      	mov	r0, r4
   11726:	4619      	mov	r1, r3
   11728:	f006 fa0e 	bl	17b48 <__aeabi_fsub>
   1172c:	4603      	mov	r3, r0
   1172e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11732:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11734:	f640 2330 	movw	r3, #2608	; 0xa30
   11738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173c:	681b      	ldr	r3, [r3, #0]
   1173e:	4618      	mov	r0, r3
   11740:	6879      	ldr	r1, [r7, #4]
   11742:	f006 fb0b 	bl	17d5c <__aeabi_fmul>
   11746:	4603      	mov	r3, r0
   11748:	4618      	mov	r0, r3
   1174a:	f04f 0100 	mov.w	r1, #0
   1174e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11752:	f006 fca1 	bl	18098 <__aeabi_fcmplt>
   11756:	4603      	mov	r3, r0
   11758:	2b00      	cmp	r3, #0
   1175a:	d002      	beq.n	11762 <roll_pitch_pid_run+0x17a>
   1175c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11760:	e026      	b.n	117b0 <roll_pitch_pid_run+0x1c8>
   11762:	f640 2330 	movw	r3, #2608	; 0xa30
   11766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176a:	681b      	ldr	r3, [r3, #0]
   1176c:	4618      	mov	r0, r3
   1176e:	6879      	ldr	r1, [r7, #4]
   11770:	f006 faf4 	bl	17d5c <__aeabi_fmul>
   11774:	4603      	mov	r3, r0
   11776:	4618      	mov	r0, r3
   11778:	f04f 0100 	mov.w	r1, #0
   1177c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11780:	f006 fca8 	bl	180d4 <__aeabi_fcmpgt>
   11784:	4603      	mov	r3, r0
   11786:	2b00      	cmp	r3, #0
   11788:	d002      	beq.n	11790 <roll_pitch_pid_run+0x1a8>
   1178a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1178e:	e00e      	b.n	117ae <roll_pitch_pid_run+0x1c6>
   11790:	f640 2330 	movw	r3, #2608	; 0xa30
   11794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11798:	681b      	ldr	r3, [r3, #0]
   1179a:	4618      	mov	r0, r3
   1179c:	6879      	ldr	r1, [r7, #4]
   1179e:	f006 fadd 	bl	17d5c <__aeabi_fmul>
   117a2:	4603      	mov	r3, r0
   117a4:	4618      	mov	r0, r3
   117a6:	f006 fc9f 	bl	180e8 <__aeabi_f2iz>
   117aa:	4603      	mov	r3, r0
   117ac:	b29b      	uxth	r3, r3
   117ae:	b29a      	uxth	r2, r3
   117b0:	f642 73d8 	movw	r3, #12248	; 0x2fd8
   117b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   117b8:	801a      	strh	r2, [r3, #0]
}
   117ba:	370c      	adds	r7, #12
   117bc:	46bd      	mov	sp, r7
   117be:	bd90      	pop	{r4, r7, pc}

000117c0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   117c0:	b580      	push	{r7, lr}
   117c2:	b082      	sub	sp, #8
   117c4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   117c6:	f243 2390 	movw	r3, #12944	; 0x3290
   117ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   117ce:	681a      	ldr	r2, [r3, #0]
   117d0:	f642 73e4 	movw	r3, #12260	; 0x2fe4
   117d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   117d8:	681b      	ldr	r3, [r3, #0]
   117da:	4610      	mov	r0, r2
   117dc:	4619      	mov	r1, r3
   117de:	f006 f9b3 	bl	17b48 <__aeabi_fsub>
   117e2:	4603      	mov	r3, r0
   117e4:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   117e6:	e013      	b.n	11810 <course_pid_run+0x50>
   117e8:	6878      	ldr	r0, [r7, #4]
   117ea:	f005 fe23 	bl	17434 <__aeabi_f2d>
   117ee:	4602      	mov	r2, r0
   117f0:	460b      	mov	r3, r1
   117f2:	4610      	mov	r0, r2
   117f4:	4619      	mov	r1, r3
   117f6:	a348      	add	r3, pc, #288	; (adr r3, 11918 <course_pid_run+0x158>)
   117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   117fc:	f005 fcba 	bl	17174 <__aeabi_dsub>
   11800:	4602      	mov	r2, r0
   11802:	460b      	mov	r3, r1
   11804:	4610      	mov	r0, r2
   11806:	4619      	mov	r1, r3
   11808:	f006 f94a 	bl	17aa0 <__aeabi_d2f>
   1180c:	4603      	mov	r3, r0
   1180e:	607b      	str	r3, [r7, #4]
   11810:	6878      	ldr	r0, [r7, #4]
   11812:	f005 fe0f 	bl	17434 <__aeabi_f2d>
   11816:	4602      	mov	r2, r0
   11818:	460b      	mov	r3, r1
   1181a:	4610      	mov	r0, r2
   1181c:	4619      	mov	r1, r3
   1181e:	a340      	add	r3, pc, #256	; (adr r3, 11920 <course_pid_run+0x160>)
   11820:	e9d3 2300 	ldrd	r2, r3, [r3]
   11824:	f006 f8ea 	bl	179fc <__aeabi_dcmpgt>
   11828:	4603      	mov	r3, r0
   1182a:	2b00      	cmp	r3, #0
   1182c:	d1dc      	bne.n	117e8 <course_pid_run+0x28>
   1182e:	e013      	b.n	11858 <course_pid_run+0x98>
   11830:	6878      	ldr	r0, [r7, #4]
   11832:	f005 fdff 	bl	17434 <__aeabi_f2d>
   11836:	4602      	mov	r2, r0
   11838:	460b      	mov	r3, r1
   1183a:	4610      	mov	r0, r2
   1183c:	4619      	mov	r1, r3
   1183e:	a336      	add	r3, pc, #216	; (adr r3, 11918 <course_pid_run+0x158>)
   11840:	e9d3 2300 	ldrd	r2, r3, [r3]
   11844:	f005 fc98 	bl	17178 <__adddf3>
   11848:	4602      	mov	r2, r0
   1184a:	460b      	mov	r3, r1
   1184c:	4610      	mov	r0, r2
   1184e:	4619      	mov	r1, r3
   11850:	f006 f926 	bl	17aa0 <__aeabi_d2f>
   11854:	4603      	mov	r3, r0
   11856:	607b      	str	r3, [r7, #4]
   11858:	6878      	ldr	r0, [r7, #4]
   1185a:	f005 fdeb 	bl	17434 <__aeabi_f2d>
   1185e:	4602      	mov	r2, r0
   11860:	460b      	mov	r3, r1
   11862:	4610      	mov	r0, r2
   11864:	4619      	mov	r1, r3
   11866:	a330      	add	r3, pc, #192	; (adr r3, 11928 <course_pid_run+0x168>)
   11868:	e9d3 2300 	ldrd	r2, r3, [r3]
   1186c:	f006 f8a8 	bl	179c0 <__aeabi_dcmplt>
   11870:	4603      	mov	r3, r0
   11872:	2b00      	cmp	r3, #0
   11874:	d1dc      	bne.n	11830 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11876:	f640 2338 	movw	r3, #2616	; 0xa38
   1187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1187e:	681b      	ldr	r3, [r3, #0]
   11880:	4618      	mov	r0, r3
   11882:	6879      	ldr	r1, [r7, #4]
   11884:	f006 fa6a 	bl	17d5c <__aeabi_fmul>
   11888:	4603      	mov	r3, r0
   1188a:	461a      	mov	r2, r3
   1188c:	f243 0328 	movw	r3, #12328	; 0x3028
   11890:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11894:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11896:	f243 0328 	movw	r3, #12328	; 0x3028
   1189a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1189e:	681a      	ldr	r2, [r3, #0]
   118a0:	f640 233c 	movw	r3, #2620	; 0xa3c
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	681b      	ldr	r3, [r3, #0]
   118aa:	4610      	mov	r0, r2
   118ac:	4619      	mov	r1, r3
   118ae:	f006 fc11 	bl	180d4 <__aeabi_fcmpgt>
   118b2:	4603      	mov	r3, r0
   118b4:	2b00      	cmp	r3, #0
   118b6:	d00a      	beq.n	118ce <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   118b8:	f640 233c 	movw	r3, #2620	; 0xa3c
   118bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c0:	681a      	ldr	r2, [r3, #0]
   118c2:	f243 0328 	movw	r3, #12328	; 0x3028
   118c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   118ca:	601a      	str	r2, [r3, #0]
   118cc:	e01e      	b.n	1190c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   118ce:	f640 233c 	movw	r3, #2620	; 0xa3c
   118d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d6:	681b      	ldr	r3, [r3, #0]
   118d8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   118dc:	f243 0328 	movw	r3, #12328	; 0x3028
   118e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	4610      	mov	r0, r2
   118e8:	4619      	mov	r1, r3
   118ea:	f006 fbf3 	bl	180d4 <__aeabi_fcmpgt>
   118ee:	4603      	mov	r3, r0
   118f0:	2b00      	cmp	r3, #0
   118f2:	d00b      	beq.n	1190c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   118f4:	f640 233c 	movw	r3, #2620	; 0xa3c
   118f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118fc:	681b      	ldr	r3, [r3, #0]
   118fe:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11902:	f243 0328 	movw	r3, #12328	; 0x3028
   11906:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1190a:	601a      	str	r2, [r3, #0]
}
   1190c:	3708      	adds	r7, #8
   1190e:	46bd      	mov	sp, r7
   11910:	bd80      	pop	{r7, pc}
   11912:	bf00      	nop
   11914:	f3af 8000 	nop.w
   11918:	54442d18 	.word	0x54442d18
   1191c:	401921fb 	.word	0x401921fb
   11920:	54442d18 	.word	0x54442d18
   11924:	400921fb 	.word	0x400921fb
   11928:	54442d18 	.word	0x54442d18
   1192c:	c00921fb 	.word	0xc00921fb

00011930 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11930:	b5b0      	push	{r4, r5, r7, lr}
   11932:	b082      	sub	sp, #8
   11934:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11936:	f243 2374 	movw	r3, #12916	; 0x3274
   1193a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1193e:	681a      	ldr	r2, [r3, #0]
   11940:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11944:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11948:	681b      	ldr	r3, [r3, #0]
   1194a:	4610      	mov	r0, r2
   1194c:	4619      	mov	r1, r3
   1194e:	f006 f8fb 	bl	17b48 <__aeabi_fsub>
   11952:	4603      	mov	r3, r0
   11954:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11956:	f642 4387 	movw	r3, #11399	; 0x2c87
   1195a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1195e:	781b      	ldrb	r3, [r3, #0]
   11960:	2b00      	cmp	r3, #0
   11962:	f000 80a8 	beq.w	11ab6 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11966:	f243 0320 	movw	r3, #12320	; 0x3020
   1196a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1196e:	881b      	ldrh	r3, [r3, #0]
   11970:	b29a      	uxth	r2, r3
   11972:	f642 73d4 	movw	r3, #12244	; 0x2fd4
   11976:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1197a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   1197c:	f640 2344 	movw	r3, #2628	; 0xa44
   11980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11984:	681a      	ldr	r2, [r3, #0]
   11986:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   1198a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1198e:	681b      	ldr	r3, [r3, #0]
   11990:	4610      	mov	r0, r2
   11992:	4619      	mov	r1, r3
   11994:	f006 f9e2 	bl	17d5c <__aeabi_fmul>
   11998:	4603      	mov	r3, r0
   1199a:	4618      	mov	r0, r3
   1199c:	6879      	ldr	r1, [r7, #4]
   1199e:	f006 f8d5 	bl	17b4c <__addsf3>
   119a2:	4603      	mov	r3, r0
   119a4:	461a      	mov	r2, r3
   119a6:	f640 2340 	movw	r3, #2624	; 0xa40
   119aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	4610      	mov	r0, r2
   119b2:	4619      	mov	r1, r3
   119b4:	f006 f9d2 	bl	17d5c <__aeabi_fmul>
   119b8:	4603      	mov	r3, r0
   119ba:	461a      	mov	r2, r3
   119bc:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   119c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   119c4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   119c6:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   119ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   119ce:	681a      	ldr	r2, [r3, #0]
   119d0:	f640 2348 	movw	r3, #2632	; 0xa48
   119d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d8:	681b      	ldr	r3, [r3, #0]
   119da:	4610      	mov	r0, r2
   119dc:	4619      	mov	r1, r3
   119de:	f006 fb79 	bl	180d4 <__aeabi_fcmpgt>
   119e2:	4603      	mov	r3, r0
   119e4:	2b00      	cmp	r3, #0
   119e6:	d009      	beq.n	119fc <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   119e8:	f640 2348 	movw	r3, #2632	; 0xa48
   119ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f0:	681a      	ldr	r2, [r3, #0]
   119f2:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   119f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   119fa:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   119fc:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   11a00:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a04:	681a      	ldr	r2, [r3, #0]
   11a06:	f640 234c 	movw	r3, #2636	; 0xa4c
   11a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0e:	681b      	ldr	r3, [r3, #0]
   11a10:	4610      	mov	r0, r2
   11a12:	4619      	mov	r1, r3
   11a14:	f006 fb40 	bl	18098 <__aeabi_fcmplt>
   11a18:	4603      	mov	r3, r0
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d009      	beq.n	11a32 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11a1e:	f640 234c 	movw	r3, #2636	; 0xa4c
   11a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a26:	681a      	ldr	r2, [r3, #0]
   11a28:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   11a2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a30:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11a32:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11a36:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a3a:	681b      	ldr	r3, [r3, #0]
   11a3c:	4618      	mov	r0, r3
   11a3e:	6879      	ldr	r1, [r7, #4]
   11a40:	f006 f884 	bl	17b4c <__addsf3>
   11a44:	4603      	mov	r3, r0
   11a46:	461a      	mov	r2, r3
   11a48:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a50:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11a52:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11a56:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a5a:	681b      	ldr	r3, [r3, #0]
   11a5c:	4618      	mov	r0, r3
   11a5e:	f04f 0100 	mov.w	r1, #0
   11a62:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11a66:	f006 fb35 	bl	180d4 <__aeabi_fcmpgt>
   11a6a:	4603      	mov	r3, r0
   11a6c:	2b00      	cmp	r3, #0
   11a6e:	d008      	beq.n	11a82 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11a70:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11a74:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a78:	f04f 0200 	mov.w	r2, #0
   11a7c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11a80:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11a82:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11a86:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11a8a:	681b      	ldr	r3, [r3, #0]
   11a8c:	4618      	mov	r0, r3
   11a8e:	f04f 0100 	mov.w	r1, #0
   11a92:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11a96:	f006 faff 	bl	18098 <__aeabi_fcmplt>
   11a9a:	4603      	mov	r3, r0
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	d100      	bne.n	11aa2 <climb_pid_run+0x172>
   11aa0:	e109      	b.n	11cb6 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11aa2:	f642 73f4 	movw	r3, #12276	; 0x2ff4
   11aa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11aaa:	f04f 0200 	mov.w	r2, #0
   11aae:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11ab2:	601a      	str	r2, [r3, #0]
   11ab4:	e0ff      	b.n	11cb6 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11ab6:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11aba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11abe:	681b      	ldr	r3, [r3, #0]
   11ac0:	4618      	mov	r0, r3
   11ac2:	f04f 0100 	mov.w	r1, #0
   11ac6:	f006 fb05 	bl	180d4 <__aeabi_fcmpgt>
   11aca:	4603      	mov	r3, r0
   11acc:	2b00      	cmp	r3, #0
   11ace:	d010      	beq.n	11af2 <climb_pid_run+0x1c2>
   11ad0:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11ad4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ad8:	681a      	ldr	r2, [r3, #0]
   11ada:	f640 2334 	movw	r3, #2612	; 0xa34
   11ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae2:	681b      	ldr	r3, [r3, #0]
   11ae4:	4610      	mov	r0, r2
   11ae6:	4619      	mov	r1, r3
   11ae8:	f006 f938 	bl	17d5c <__aeabi_fmul>
   11aec:	4603      	mov	r3, r0
   11aee:	461a      	mov	r2, r3
   11af0:	e001      	b.n	11af6 <climb_pid_run+0x1c6>
   11af2:	f04f 0200 	mov.w	r2, #0
   11af6:	f642 73e0 	movw	r3, #12256	; 0x2fe0
   11afa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11afe:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11b00:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11b04:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11b08:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11b0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11b10:	681b      	ldr	r3, [r3, #0]
   11b12:	4610      	mov	r0, r2
   11b14:	4619      	mov	r1, r3
   11b16:	f006 f921 	bl	17d5c <__aeabi_fmul>
   11b1a:	4603      	mov	r3, r0
   11b1c:	4618      	mov	r0, r3
   11b1e:	6879      	ldr	r1, [r7, #4]
   11b20:	f006 f814 	bl	17b4c <__addsf3>
   11b24:	4603      	mov	r3, r0
   11b26:	461a      	mov	r2, r3
   11b28:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11b2c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11b30:	4610      	mov	r0, r2
   11b32:	4619      	mov	r1, r3
   11b34:	f006 f912 	bl	17d5c <__aeabi_fmul>
   11b38:	4603      	mov	r3, r0
   11b3a:	4618      	mov	r0, r3
   11b3c:	f005 fc7a 	bl	17434 <__aeabi_f2d>
   11b40:	4602      	mov	r2, r0
   11b42:	460b      	mov	r3, r1
   11b44:	4610      	mov	r0, r2
   11b46:	4619      	mov	r1, r3
   11b48:	a35d      	add	r3, pc, #372	; (adr r3, 11cc0 <climb_pid_run+0x390>)
   11b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b4e:	f005 fb13 	bl	17178 <__adddf3>
   11b52:	4602      	mov	r2, r0
   11b54:	460b      	mov	r3, r1
   11b56:	4614      	mov	r4, r2
   11b58:	461d      	mov	r5, r3
   11b5a:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11b5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11b62:	681b      	ldr	r3, [r3, #0]
   11b64:	4618      	mov	r0, r3
   11b66:	f005 fc65 	bl	17434 <__aeabi_f2d>
   11b6a:	4602      	mov	r2, r0
   11b6c:	460b      	mov	r3, r1
   11b6e:	4610      	mov	r0, r2
   11b70:	4619      	mov	r1, r3
   11b72:	a355      	add	r3, pc, #340	; (adr r3, 11cc8 <climb_pid_run+0x398>)
   11b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b78:	f005 fcb0 	bl	174dc <__aeabi_dmul>
   11b7c:	4602      	mov	r2, r0
   11b7e:	460b      	mov	r3, r1
   11b80:	4620      	mov	r0, r4
   11b82:	4629      	mov	r1, r5
   11b84:	f005 faf8 	bl	17178 <__adddf3>
   11b88:	4602      	mov	r2, r0
   11b8a:	460b      	mov	r3, r1
   11b8c:	4610      	mov	r0, r2
   11b8e:	4619      	mov	r1, r3
   11b90:	f005 ff86 	bl	17aa0 <__aeabi_d2f>
   11b94:	4603      	mov	r3, r0
   11b96:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11b98:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11b9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ba0:	681b      	ldr	r3, [r3, #0]
   11ba2:	4618      	mov	r0, r3
   11ba4:	6879      	ldr	r1, [r7, #4]
   11ba6:	f005 ffd1 	bl	17b4c <__addsf3>
   11baa:	4603      	mov	r3, r0
   11bac:	461a      	mov	r2, r3
   11bae:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11bb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11bb6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11bb8:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11bbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11bc0:	681b      	ldr	r3, [r3, #0]
   11bc2:	4618      	mov	r0, r3
   11bc4:	f04f 0100 	mov.w	r1, #0
   11bc8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11bcc:	f006 fa82 	bl	180d4 <__aeabi_fcmpgt>
   11bd0:	4603      	mov	r3, r0
   11bd2:	2b00      	cmp	r3, #0
   11bd4:	d008      	beq.n	11be8 <climb_pid_run+0x2b8>
   11bd6:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11bda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11bde:	f04f 0200 	mov.w	r2, #0
   11be2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11be6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11be8:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11bec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	4618      	mov	r0, r3
   11bf4:	f04f 0100 	mov.w	r1, #0
   11bf8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11bfc:	f006 fa4c 	bl	18098 <__aeabi_fcmplt>
   11c00:	4603      	mov	r3, r0
   11c02:	2b00      	cmp	r3, #0
   11c04:	d008      	beq.n	11c18 <climb_pid_run+0x2e8>
   11c06:	f642 73f0 	movw	r3, #12272	; 0x2ff0
   11c0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11c0e:	f04f 0200 	mov.w	r2, #0
   11c12:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11c16:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11c18:	6838      	ldr	r0, [r7, #0]
   11c1a:	f04f 0100 	mov.w	r1, #0
   11c1e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c22:	f006 f89b 	bl	17d5c <__aeabi_fmul>
   11c26:	4603      	mov	r3, r0
   11c28:	4618      	mov	r0, r3
   11c2a:	f04f 0100 	mov.w	r1, #0
   11c2e:	f006 fa33 	bl	18098 <__aeabi_fcmplt>
   11c32:	4603      	mov	r3, r0
   11c34:	2b00      	cmp	r3, #0
   11c36:	d001      	beq.n	11c3c <climb_pid_run+0x30c>
   11c38:	2200      	movs	r2, #0
   11c3a:	e022      	b.n	11c82 <climb_pid_run+0x352>
   11c3c:	6838      	ldr	r0, [r7, #0]
   11c3e:	f04f 0100 	mov.w	r1, #0
   11c42:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c46:	f006 f889 	bl	17d5c <__aeabi_fmul>
   11c4a:	4603      	mov	r3, r0
   11c4c:	4618      	mov	r0, r3
   11c4e:	f04f 0100 	mov.w	r1, #0
   11c52:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c56:	f006 fa3d 	bl	180d4 <__aeabi_fcmpgt>
   11c5a:	4603      	mov	r3, r0
   11c5c:	2b00      	cmp	r3, #0
   11c5e:	d002      	beq.n	11c66 <climb_pid_run+0x336>
   11c60:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c64:	e00c      	b.n	11c80 <climb_pid_run+0x350>
   11c66:	6838      	ldr	r0, [r7, #0]
   11c68:	f04f 0100 	mov.w	r1, #0
   11c6c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c70:	f006 f874 	bl	17d5c <__aeabi_fmul>
   11c74:	4603      	mov	r3, r0
   11c76:	4618      	mov	r0, r3
   11c78:	f006 fa36 	bl	180e8 <__aeabi_f2iz>
   11c7c:	4603      	mov	r3, r0
   11c7e:	b29b      	uxth	r3, r3
   11c80:	b29a      	uxth	r2, r3
   11c82:	f642 73d4 	movw	r3, #12244	; 0x2fd4
   11c86:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11c8a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   11c8c:	f243 0324 	movw	r3, #12324	; 0x3024
   11c90:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11c94:	681a      	ldr	r2, [r3, #0]
   11c96:	f642 73e0 	movw	r3, #12256	; 0x2fe0
   11c9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	4610      	mov	r0, r2
   11ca2:	4619      	mov	r1, r3
   11ca4:	f005 ff52 	bl	17b4c <__addsf3>
   11ca8:	4603      	mov	r3, r0
   11caa:	461a      	mov	r2, r3
   11cac:	f642 73d0 	movw	r3, #12240	; 0x2fd0
   11cb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11cb4:	601a      	str	r2, [r3, #0]
  }
}
   11cb6:	3708      	adds	r7, #8
   11cb8:	46bd      	mov	sp, r7
   11cba:	bdb0      	pop	{r4, r5, r7, pc}
   11cbc:	f3af 8000 	nop.w
   11cc0:	3d70a3d7 	.word	0x3d70a3d7
   11cc4:	3fd3d70a 	.word	0x3fd3d70a
   11cc8:	9999999a 	.word	0x9999999a
   11ccc:	3fc99999 	.word	0x3fc99999

00011cd0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   11cd0:	b580      	push	{r7, lr}
   11cd2:	b082      	sub	sp, #8
   11cd4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   11cd6:	f243 235c 	movw	r3, #12892	; 0x325c
   11cda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11cde:	681a      	ldr	r2, [r3, #0]
   11ce0:	f640 2354 	movw	r3, #2644	; 0xa54
   11ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce8:	681b      	ldr	r3, [r3, #0]
   11cea:	4610      	mov	r0, r2
   11cec:	4619      	mov	r1, r3
   11cee:	f005 ff2b 	bl	17b48 <__aeabi_fsub>
   11cf2:	4603      	mov	r3, r0
   11cf4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   11cf6:	f640 2350 	movw	r3, #2640	; 0xa50
   11cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfe:	681b      	ldr	r3, [r3, #0]
   11d00:	4618      	mov	r0, r3
   11d02:	6879      	ldr	r1, [r7, #4]
   11d04:	f006 f82a 	bl	17d5c <__aeabi_fmul>
   11d08:	4603      	mov	r3, r0
   11d0a:	461a      	mov	r2, r3
   11d0c:	f642 73ec 	movw	r3, #12268	; 0x2fec
   11d10:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d14:	681b      	ldr	r3, [r3, #0]
   11d16:	4610      	mov	r0, r2
   11d18:	4619      	mov	r1, r3
   11d1a:	f005 ff17 	bl	17b4c <__addsf3>
   11d1e:	4603      	mov	r3, r0
   11d20:	461a      	mov	r2, r3
   11d22:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11d26:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d2a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   11d2c:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11d30:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d34:	681b      	ldr	r3, [r3, #0]
   11d36:	4618      	mov	r0, r3
   11d38:	f04f 0100 	mov.w	r1, #0
   11d3c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   11d40:	f006 f9aa 	bl	18098 <__aeabi_fcmplt>
   11d44:	4603      	mov	r3, r0
   11d46:	2b00      	cmp	r3, #0
   11d48:	d008      	beq.n	11d5c <altitude_pid_run+0x8c>
   11d4a:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11d4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d52:	f04f 0200 	mov.w	r2, #0
   11d56:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   11d5a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   11d5c:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11d60:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d64:	681b      	ldr	r3, [r3, #0]
   11d66:	4618      	mov	r0, r3
   11d68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11d6c:	f006 f9b2 	bl	180d4 <__aeabi_fcmpgt>
   11d70:	4603      	mov	r3, r0
   11d72:	2b00      	cmp	r3, #0
   11d74:	d006      	beq.n	11d84 <altitude_pid_run+0xb4>
   11d76:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11d7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   11d82:	601a      	str	r2, [r3, #0]
}
   11d84:	3708      	adds	r7, #8
   11d86:	46bd      	mov	sp, r7
   11d88:	bd80      	pop	{r7, pc}
   11d8a:	bf00      	nop
   11d8c:	f3af 8000 	nop.w

00011d90 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   11d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d92:	b08b      	sub	sp, #44	; 0x2c
   11d94:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   11d96:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   11d9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	2b00      	cmp	r3, #0
   11da2:	f040 8169 	bne.w	12078 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   11da6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11daa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11dae:	781b      	ldrb	r3, [r3, #0]
   11db0:	2b00      	cmp	r3, #0
   11db2:	d13c      	bne.n	11e2e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   11db4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11db8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11dbc:	2200      	movs	r2, #0
   11dbe:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   11dc0:	f243 2384 	movw	r3, #12932	; 0x3284
   11dc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11dc8:	881b      	ldrh	r3, [r3, #0]
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d000      	beq.n	11dd0 <auto_nav+0x40>
   11dce:	e03d      	b.n	11e4c <auto_nav+0xbc>
	else NextStage(); 
   11dd0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11dd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11dd8:	781b      	ldrb	r3, [r3, #0]
   11dda:	3301      	adds	r3, #1
   11ddc:	b2da      	uxtb	r2, r3
   11dde:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11de2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11de6:	701a      	strb	r2, [r3, #0]
   11de8:	f243 2354 	movw	r3, #12884	; 0x3254
   11dec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11df0:	681a      	ldr	r2, [r3, #0]
   11df2:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   11df6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11dfa:	601a      	str	r2, [r3, #0]
   11dfc:	f243 2358 	movw	r3, #12888	; 0x3258
   11e00:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e04:	681a      	ldr	r2, [r3, #0]
   11e06:	f243 0300 	movw	r3, #12288	; 0x3000
   11e0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e0e:	601a      	str	r2, [r3, #0]
   11e10:	f243 030c 	movw	r3, #12300	; 0x300c
   11e14:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e18:	2200      	movs	r2, #0
   11e1a:	801a      	strh	r2, [r3, #0]
   11e1c:	f243 0310 	movw	r3, #12304	; 0x3010
   11e20:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e24:	f04f 0200 	mov.w	r2, #0
   11e28:	601a      	str	r2, [r3, #0]
   11e2a:	f002 b883 	b.w	13f34 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   11e2e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11e32:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e36:	781b      	ldrb	r3, [r3, #0]
   11e38:	2b01      	cmp	r3, #1
   11e3a:	d100      	bne.n	11e3e <auto_nav+0xae>
    {   Goto(while_1)}
   11e3c:	e7ba      	b.n	11db4 <auto_nav+0x24>
    else if (nav_stage == 2)
   11e3e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11e42:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e46:	781b      	ldrb	r3, [r3, #0]
   11e48:	2b02      	cmp	r3, #2
   11e4a:	d162      	bne.n	11f12 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   11e4c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11e50:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e54:	2202      	movs	r2, #2
   11e56:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   11e58:	f243 2384 	movw	r3, #12932	; 0x3284
   11e5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e60:	881b      	ldrh	r3, [r3, #0]
   11e62:	2b08      	cmp	r3, #8
   11e64:	d92e      	bls.n	11ec4 <auto_nav+0x134>
   11e66:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11e6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e6e:	781b      	ldrb	r3, [r3, #0]
   11e70:	3301      	adds	r3, #1
   11e72:	b2da      	uxtb	r2, r3
   11e74:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11e78:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e7c:	701a      	strb	r2, [r3, #0]
   11e7e:	f243 2354 	movw	r3, #12884	; 0x3254
   11e82:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e86:	681a      	ldr	r2, [r3, #0]
   11e88:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   11e8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e90:	601a      	str	r2, [r3, #0]
   11e92:	f243 2358 	movw	r3, #12888	; 0x3258
   11e96:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11e9a:	681a      	ldr	r2, [r3, #0]
   11e9c:	f243 0300 	movw	r3, #12288	; 0x3000
   11ea0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ea4:	601a      	str	r2, [r3, #0]
   11ea6:	f243 030c 	movw	r3, #12300	; 0x300c
   11eaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11eae:	2200      	movs	r2, #0
   11eb0:	801a      	strh	r2, [r3, #0]
   11eb2:	f243 0310 	movw	r3, #12304	; 0x3010
   11eb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11eba:	f04f 0200 	mov.w	r2, #0
   11ebe:	601a      	str	r2, [r3, #0]
   11ec0:	f002 b838 	b.w	13f34 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11ec4:	f642 73e4 	movw	r3, #12260	; 0x2fe4
   11ec8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ecc:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   11ed0:	f2c4 0296 	movt	r2, #16534	; 0x4096
   11ed4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   11ed6:	f642 4387 	movw	r3, #11399	; 0x2c87
   11eda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ede:	2200      	movs	r2, #0
   11ee0:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   11ee2:	f243 0324 	movw	r3, #12324	; 0x3024
   11ee6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11eea:	f649 129a 	movw	r2, #39322	; 0x999a
   11eee:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   11ef2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   11ef4:	f642 4385 	movw	r3, #11397	; 0x2c85
   11ef8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11efc:	2201      	movs	r2, #1
   11efe:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   11f00:	f243 0320 	movw	r3, #12320	; 0x3020
   11f04:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f08:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   11f0c:	801a      	strh	r2, [r3, #0]
        }
        return;
   11f0e:	f002 b811 	b.w	13f34 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   11f12:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11f16:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f1a:	781b      	ldrb	r3, [r3, #0]
   11f1c:	2b03      	cmp	r3, #3
   11f1e:	d168      	bne.n	11ff2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   11f20:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11f24:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f28:	2203      	movs	r2, #3
   11f2a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   11f2c:	f243 235c 	movw	r3, #12892	; 0x325c
   11f30:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f34:	681b      	ldr	r3, [r3, #0]
   11f36:	4618      	mov	r0, r3
   11f38:	f04f 0100 	mov.w	r1, #0
   11f3c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   11f40:	f006 f8c8 	bl	180d4 <__aeabi_fcmpgt>
   11f44:	4603      	mov	r3, r0
   11f46:	2b00      	cmp	r3, #0
   11f48:	d02e      	beq.n	11fa8 <auto_nav+0x218>
   11f4a:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11f4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f52:	781b      	ldrb	r3, [r3, #0]
   11f54:	3301      	adds	r3, #1
   11f56:	b2da      	uxtb	r2, r3
   11f58:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11f5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f60:	701a      	strb	r2, [r3, #0]
   11f62:	f243 2354 	movw	r3, #12884	; 0x3254
   11f66:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f6a:	681a      	ldr	r2, [r3, #0]
   11f6c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   11f70:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f74:	601a      	str	r2, [r3, #0]
   11f76:	f243 2358 	movw	r3, #12888	; 0x3258
   11f7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f7e:	681a      	ldr	r2, [r3, #0]
   11f80:	f243 0300 	movw	r3, #12288	; 0x3000
   11f84:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f88:	601a      	str	r2, [r3, #0]
   11f8a:	f243 030c 	movw	r3, #12300	; 0x300c
   11f8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f92:	2200      	movs	r2, #0
   11f94:	801a      	strh	r2, [r3, #0]
   11f96:	f243 0310 	movw	r3, #12304	; 0x3010
   11f9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11f9e:	f04f 0200 	mov.w	r2, #0
   11fa2:	601a      	str	r2, [r3, #0]
   11fa4:	f001 bfc6 	b.w	13f34 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11fa8:	f642 73e4 	movw	r3, #12260	; 0x2fe4
   11fac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11fb0:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   11fb4:	f2c4 0296 	movt	r2, #16534	; 0x4096
   11fb8:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   11fba:	f642 4387 	movw	r3, #11399	; 0x2c87
   11fbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11fc2:	2200      	movs	r2, #0
   11fc4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   11fc6:	f243 0324 	movw	r3, #12324	; 0x3024
   11fca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11fce:	f04f 0200 	mov.w	r2, #0
   11fd2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   11fd4:	f642 4385 	movw	r3, #11397	; 0x2c85
   11fd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11fdc:	2202      	movs	r2, #2
   11fde:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   11fe0:	f642 73e8 	movw	r3, #12264	; 0x2fe8
   11fe4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11fe8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   11fec:	601a      	str	r2, [r3, #0]
        }
        return;
   11fee:	f001 bfa1 	b.w	13f34 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   11ff2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   11ff6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   11ffa:	781b      	ldrb	r3, [r3, #0]
   11ffc:	2b04      	cmp	r3, #4
   11ffe:	f041 8799 	bne.w	13f34 <auto_nav+0x21a4>
        NextBlock()
   12002:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12006:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1200a:	781b      	ldrb	r3, [r3, #0]
   1200c:	3301      	adds	r3, #1
   1200e:	b2da      	uxtb	r2, r3
   12010:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12014:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12018:	701a      	strb	r2, [r3, #0]
   1201a:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1201e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12022:	2200      	movs	r2, #0
   12024:	701a      	strb	r2, [r3, #0]
   12026:	f243 030e 	movw	r3, #12302	; 0x300e
   1202a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1202e:	2200      	movs	r2, #0
   12030:	801a      	strh	r2, [r3, #0]
   12032:	f243 2354 	movw	r3, #12884	; 0x3254
   12036:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1203a:	681a      	ldr	r2, [r3, #0]
   1203c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   12040:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12044:	601a      	str	r2, [r3, #0]
   12046:	f243 2358 	movw	r3, #12888	; 0x3258
   1204a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1204e:	681a      	ldr	r2, [r3, #0]
   12050:	f243 0300 	movw	r3, #12288	; 0x3000
   12054:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12058:	601a      	str	r2, [r3, #0]
   1205a:	f243 030c 	movw	r3, #12300	; 0x300c
   1205e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12062:	2200      	movs	r2, #0
   12064:	801a      	strh	r2, [r3, #0]
   12066:	f243 0310 	movw	r3, #12304	; 0x3010
   1206a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1206e:	f04f 0200 	mov.w	r2, #0
   12072:	601a      	str	r2, [r3, #0]
   12074:	f001 bf5e 	b.w	13f34 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12078:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1207c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12080:	781b      	ldrb	r3, [r3, #0]
   12082:	2b01      	cmp	r3, #1
   12084:	f040 81bc 	bne.w	12400 <auto_nav+0x670>
{
    nav_block = 1;
   12088:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1208c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12090:	2201      	movs	r2, #1
   12092:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12094:	f642 4388 	movw	r3, #11400	; 0x2c88
   12098:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1209c:	781b      	ldrb	r3, [r3, #0]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d007      	beq.n	120b2 <auto_nav+0x322>
   120a2:	f642 4388 	movw	r3, #11400	; 0x2c88
   120a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120aa:	2200      	movs	r2, #0
   120ac:	701a      	strb	r2, [r3, #0]
   120ae:	2301      	movs	r3, #1
   120b0:	e000      	b.n	120b4 <auto_nav+0x324>
   120b2:	2300      	movs	r3, #0
   120b4:	2b00      	cmp	r3, #0
   120b6:	d034      	beq.n	12122 <auto_nav+0x392>
	{ GotoBlock(2) }
   120b8:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   120bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120c0:	2202      	movs	r2, #2
   120c2:	701a      	strb	r2, [r3, #0]
   120c4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   120c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120cc:	2200      	movs	r2, #0
   120ce:	701a      	strb	r2, [r3, #0]
   120d0:	f243 030e 	movw	r3, #12302	; 0x300e
   120d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120d8:	2200      	movs	r2, #0
   120da:	801a      	strh	r2, [r3, #0]
   120dc:	f243 2354 	movw	r3, #12884	; 0x3254
   120e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120e4:	681a      	ldr	r2, [r3, #0]
   120e6:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   120ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120ee:	601a      	str	r2, [r3, #0]
   120f0:	f243 2358 	movw	r3, #12888	; 0x3258
   120f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   120f8:	681a      	ldr	r2, [r3, #0]
   120fa:	f243 0300 	movw	r3, #12288	; 0x3000
   120fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12102:	601a      	str	r2, [r3, #0]
   12104:	f243 030c 	movw	r3, #12300	; 0x300c
   12108:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1210c:	2200      	movs	r2, #0
   1210e:	801a      	strh	r2, [r3, #0]
   12110:	f243 0310 	movw	r3, #12304	; 0x3010
   12114:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12118:	f04f 0200 	mov.w	r2, #0
   1211c:	601a      	str	r2, [r3, #0]
   1211e:	f001 bf09 	b.w	13f34 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12122:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12126:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1212a:	781b      	ldrb	r3, [r3, #0]
   1212c:	2b00      	cmp	r3, #0
   1212e:	d12e      	bne.n	1218e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12130:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12134:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12138:	781b      	ldrb	r3, [r3, #0]
   1213a:	3301      	adds	r3, #1
   1213c:	b2da      	uxtb	r2, r3
   1213e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12142:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12146:	701a      	strb	r2, [r3, #0]
   12148:	f243 2354 	movw	r3, #12884	; 0x3254
   1214c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12150:	681a      	ldr	r2, [r3, #0]
   12152:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   12156:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1215a:	601a      	str	r2, [r3, #0]
   1215c:	f243 2358 	movw	r3, #12888	; 0x3258
   12160:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12164:	681a      	ldr	r2, [r3, #0]
   12166:	f243 0300 	movw	r3, #12288	; 0x3000
   1216a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1216e:	601a      	str	r2, [r3, #0]
   12170:	f243 030c 	movw	r3, #12300	; 0x300c
   12174:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12178:	2200      	movs	r2, #0
   1217a:	801a      	strh	r2, [r3, #0]
   1217c:	f243 0310 	movw	r3, #12304	; 0x3010
   12180:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12184:	f04f 0200 	mov.w	r2, #0
   12188:	601a      	str	r2, [r3, #0]
   1218a:	f001 bed3 	b.w	13f34 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1218e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12192:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12196:	781b      	ldrb	r3, [r3, #0]
   12198:	2b01      	cmp	r3, #1
   1219a:	d169      	bne.n	12270 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1219c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   121a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121a4:	2201      	movs	r2, #1
   121a6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   121a8:	2001      	movs	r0, #1
   121aa:	f001 fed1 	bl	13f50 <approaching>
   121ae:	4603      	mov	r3, r0
   121b0:	2b00      	cmp	r3, #0
   121b2:	d034      	beq.n	1221e <auto_nav+0x48e>
   121b4:	f243 0304 	movw	r3, #12292	; 0x3004
   121b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121bc:	2201      	movs	r2, #1
   121be:	701a      	strb	r2, [r3, #0]
   121c0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   121c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121c8:	781b      	ldrb	r3, [r3, #0]
   121ca:	3301      	adds	r3, #1
   121cc:	b2da      	uxtb	r2, r3
   121ce:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   121d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121d6:	701a      	strb	r2, [r3, #0]
   121d8:	f243 2354 	movw	r3, #12884	; 0x3254
   121dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121e0:	681a      	ldr	r2, [r3, #0]
   121e2:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   121e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121ea:	601a      	str	r2, [r3, #0]
   121ec:	f243 2358 	movw	r3, #12888	; 0x3258
   121f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121f4:	681a      	ldr	r2, [r3, #0]
   121f6:	f243 0300 	movw	r3, #12288	; 0x3000
   121fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   121fe:	601a      	str	r2, [r3, #0]
   12200:	f243 030c 	movw	r3, #12300	; 0x300c
   12204:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12208:	2200      	movs	r2, #0
   1220a:	801a      	strh	r2, [r3, #0]
   1220c:	f243 0310 	movw	r3, #12304	; 0x3010
   12210:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12214:	f04f 0200 	mov.w	r2, #0
   12218:	601a      	str	r2, [r3, #0]
   1221a:	f001 be8b 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(1);
   1221e:	2001      	movs	r0, #1
   12220:	f001 ffca 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   12224:	f642 4387 	movw	r3, #11399	; 0x2c87
   12228:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1222c:	2200      	movs	r2, #0
   1222e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12230:	f243 0324 	movw	r3, #12324	; 0x3024
   12234:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12238:	f04f 0200 	mov.w	r2, #0
   1223c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1223e:	f642 4385 	movw	r3, #11397	; 0x2c85
   12242:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12246:	2203      	movs	r2, #3
   12248:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   1224a:	f640 2358 	movw	r3, #2648	; 0xa58
   1224e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12252:	695a      	ldr	r2, [r3, #20]
   12254:	f640 2354 	movw	r3, #2644	; 0xa54
   12258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1225c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1225e:	f642 73ec 	movw	r3, #12268	; 0x2fec
   12262:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12266:	f04f 0200 	mov.w	r2, #0
   1226a:	601a      	str	r2, [r3, #0]
          }
          return;
   1226c:	f001 be62 	b.w	13f34 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12270:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12274:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12278:	781b      	ldrb	r3, [r3, #0]
   1227a:	2b02      	cmp	r3, #2
   1227c:	d169      	bne.n	12352 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1227e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12282:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12286:	2202      	movs	r2, #2
   12288:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1228a:	2004      	movs	r0, #4
   1228c:	f001 fe60 	bl	13f50 <approaching>
   12290:	4603      	mov	r3, r0
   12292:	2b00      	cmp	r3, #0
   12294:	d034      	beq.n	12300 <auto_nav+0x570>
   12296:	f243 0304 	movw	r3, #12292	; 0x3004
   1229a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1229e:	2204      	movs	r2, #4
   122a0:	701a      	strb	r2, [r3, #0]
   122a2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   122a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122aa:	781b      	ldrb	r3, [r3, #0]
   122ac:	3301      	adds	r3, #1
   122ae:	b2da      	uxtb	r2, r3
   122b0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   122b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122b8:	701a      	strb	r2, [r3, #0]
   122ba:	f243 2354 	movw	r3, #12884	; 0x3254
   122be:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122c2:	681a      	ldr	r2, [r3, #0]
   122c4:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   122c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122cc:	601a      	str	r2, [r3, #0]
   122ce:	f243 2358 	movw	r3, #12888	; 0x3258
   122d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122d6:	681a      	ldr	r2, [r3, #0]
   122d8:	f243 0300 	movw	r3, #12288	; 0x3000
   122dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122e0:	601a      	str	r2, [r3, #0]
   122e2:	f243 030c 	movw	r3, #12300	; 0x300c
   122e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122ea:	2200      	movs	r2, #0
   122ec:	801a      	strh	r2, [r3, #0]
   122ee:	f243 0310 	movw	r3, #12304	; 0x3010
   122f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   122f6:	f04f 0200 	mov.w	r2, #0
   122fa:	601a      	str	r2, [r3, #0]
   122fc:	f001 be1a 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(4);
   12300:	2004      	movs	r0, #4
   12302:	f001 ff59 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   12306:	f642 4387 	movw	r3, #11399	; 0x2c87
   1230a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1230e:	2200      	movs	r2, #0
   12310:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12312:	f243 0324 	movw	r3, #12324	; 0x3024
   12316:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1231a:	f04f 0200 	mov.w	r2, #0
   1231e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12320:	f642 4385 	movw	r3, #11397	; 0x2c85
   12324:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12328:	2203      	movs	r2, #3
   1232a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1232c:	f640 2358 	movw	r3, #2648	; 0xa58
   12330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12336:	f640 2354 	movw	r3, #2644	; 0xa54
   1233a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12340:	f642 73ec 	movw	r3, #12268	; 0x2fec
   12344:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12348:	f04f 0200 	mov.w	r2, #0
   1234c:	601a      	str	r2, [r3, #0]
          }
          return;
   1234e:	f001 bdf1 	b.w	13f34 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12352:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12356:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1235a:	781b      	ldrb	r3, [r3, #0]
   1235c:	2b03      	cmp	r3, #3
   1235e:	d106      	bne.n	1236e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12360:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12364:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12368:	2203      	movs	r2, #3
   1236a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   1236c:	e6e0      	b.n	12130 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   1236e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12372:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12376:	781b      	ldrb	r3, [r3, #0]
   12378:	2b04      	cmp	r3, #4
   1237a:	f041 85db 	bne.w	13f34 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   1237e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12382:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12386:	2204      	movs	r2, #4
   12388:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1238a:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1238e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12392:	781b      	ldrb	r3, [r3, #0]
   12394:	3301      	adds	r3, #1
   12396:	b2da      	uxtb	r2, r3
   12398:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1239c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123a0:	701a      	strb	r2, [r3, #0]
   123a2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   123a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123aa:	2200      	movs	r2, #0
   123ac:	701a      	strb	r2, [r3, #0]
   123ae:	f243 030e 	movw	r3, #12302	; 0x300e
   123b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123b6:	2200      	movs	r2, #0
   123b8:	801a      	strh	r2, [r3, #0]
   123ba:	f243 2354 	movw	r3, #12884	; 0x3254
   123be:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123c2:	681a      	ldr	r2, [r3, #0]
   123c4:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   123c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123cc:	601a      	str	r2, [r3, #0]
   123ce:	f243 2358 	movw	r3, #12888	; 0x3258
   123d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123d6:	681a      	ldr	r2, [r3, #0]
   123d8:	f243 0300 	movw	r3, #12288	; 0x3000
   123dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123e0:	601a      	str	r2, [r3, #0]
   123e2:	f243 030c 	movw	r3, #12300	; 0x300c
   123e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123ea:	2200      	movs	r2, #0
   123ec:	801a      	strh	r2, [r3, #0]
   123ee:	f243 0310 	movw	r3, #12304	; 0x3010
   123f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   123f6:	f04f 0200 	mov.w	r2, #0
   123fa:	601a      	str	r2, [r3, #0]
   123fc:	f001 bd9a 	b.w	13f34 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12400:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12404:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12408:	781b      	ldrb	r3, [r3, #0]
   1240a:	2b02      	cmp	r3, #2
   1240c:	f040 8392 	bne.w	12b34 <auto_nav+0xda4>
{
	nav_block = 2;
   12410:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12414:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12418:	2202      	movs	r2, #2
   1241a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   1241c:	f642 4388 	movw	r3, #11400	; 0x2c88
   12420:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12424:	781b      	ldrb	r3, [r3, #0]
   12426:	2b00      	cmp	r3, #0
   12428:	d007      	beq.n	1243a <auto_nav+0x6aa>
   1242a:	f642 4388 	movw	r3, #11400	; 0x2c88
   1242e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12432:	2200      	movs	r2, #0
   12434:	701a      	strb	r2, [r3, #0]
   12436:	2301      	movs	r3, #1
   12438:	e000      	b.n	1243c <auto_nav+0x6ac>
   1243a:	2300      	movs	r3, #0
   1243c:	2b00      	cmp	r3, #0
   1243e:	d034      	beq.n	124aa <auto_nav+0x71a>
   12440:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12444:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12448:	2203      	movs	r2, #3
   1244a:	701a      	strb	r2, [r3, #0]
   1244c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12450:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12454:	2200      	movs	r2, #0
   12456:	701a      	strb	r2, [r3, #0]
   12458:	f243 030e 	movw	r3, #12302	; 0x300e
   1245c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12460:	2200      	movs	r2, #0
   12462:	801a      	strh	r2, [r3, #0]
   12464:	f243 2354 	movw	r3, #12884	; 0x3254
   12468:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1246c:	681a      	ldr	r2, [r3, #0]
   1246e:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   12472:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12476:	601a      	str	r2, [r3, #0]
   12478:	f243 2358 	movw	r3, #12888	; 0x3258
   1247c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12480:	681a      	ldr	r2, [r3, #0]
   12482:	f243 0300 	movw	r3, #12288	; 0x3000
   12486:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1248a:	601a      	str	r2, [r3, #0]
   1248c:	f243 030c 	movw	r3, #12300	; 0x300c
   12490:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12494:	2200      	movs	r2, #0
   12496:	801a      	strh	r2, [r3, #0]
   12498:	f243 0310 	movw	r3, #12304	; 0x3010
   1249c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124a0:	f04f 0200 	mov.w	r2, #0
   124a4:	601a      	str	r2, [r3, #0]
   124a6:	f001 bd45 	b.w	13f34 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   124aa:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   124ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d134      	bne.n	12522 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   124b8:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   124bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124c0:	2200      	movs	r2, #0
   124c2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   124c4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   124c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124cc:	781b      	ldrb	r3, [r3, #0]
   124ce:	3301      	adds	r3, #1
   124d0:	b2da      	uxtb	r2, r3
   124d2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   124d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124da:	701a      	strb	r2, [r3, #0]
   124dc:	f243 2354 	movw	r3, #12884	; 0x3254
   124e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124e4:	681a      	ldr	r2, [r3, #0]
   124e6:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   124ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124ee:	601a      	str	r2, [r3, #0]
   124f0:	f243 2358 	movw	r3, #12888	; 0x3258
   124f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   124f8:	681a      	ldr	r2, [r3, #0]
   124fa:	f243 0300 	movw	r3, #12288	; 0x3000
   124fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12502:	601a      	str	r2, [r3, #0]
   12504:	f243 030c 	movw	r3, #12300	; 0x300c
   12508:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1250c:	2200      	movs	r2, #0
   1250e:	801a      	strh	r2, [r3, #0]
   12510:	f243 0310 	movw	r3, #12304	; 0x3010
   12514:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12518:	f04f 0200 	mov.w	r2, #0
   1251c:	601a      	str	r2, [r3, #0]
   1251e:	f001 bd09 	b.w	13f34 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12522:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12526:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1252a:	781b      	ldrb	r3, [r3, #0]
   1252c:	2b01      	cmp	r3, #1
   1252e:	d169      	bne.n	12604 <auto_nav+0x874>
    {
         nav_stage =1;
   12530:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12534:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12538:	2201      	movs	r2, #1
   1253a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   1253c:	2006      	movs	r0, #6
   1253e:	f001 fd07 	bl	13f50 <approaching>
   12542:	4603      	mov	r3, r0
   12544:	2b00      	cmp	r3, #0
   12546:	d034      	beq.n	125b2 <auto_nav+0x822>
   12548:	f243 0304 	movw	r3, #12292	; 0x3004
   1254c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12550:	2206      	movs	r2, #6
   12552:	701a      	strb	r2, [r3, #0]
   12554:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12558:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	3301      	adds	r3, #1
   12560:	b2da      	uxtb	r2, r3
   12562:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12566:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1256a:	701a      	strb	r2, [r3, #0]
   1256c:	f243 2354 	movw	r3, #12884	; 0x3254
   12570:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12574:	681a      	ldr	r2, [r3, #0]
   12576:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1257a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1257e:	601a      	str	r2, [r3, #0]
   12580:	f243 2358 	movw	r3, #12888	; 0x3258
   12584:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12588:	681a      	ldr	r2, [r3, #0]
   1258a:	f243 0300 	movw	r3, #12288	; 0x3000
   1258e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12592:	601a      	str	r2, [r3, #0]
   12594:	f243 030c 	movw	r3, #12300	; 0x300c
   12598:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1259c:	2200      	movs	r2, #0
   1259e:	801a      	strh	r2, [r3, #0]
   125a0:	f243 0310 	movw	r3, #12304	; 0x3010
   125a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   125a8:	f04f 0200 	mov.w	r2, #0
   125ac:	601a      	str	r2, [r3, #0]
   125ae:	f001 bcc1 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(6);
   125b2:	2006      	movs	r0, #6
   125b4:	f001 fe00 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   125b8:	f642 4387 	movw	r3, #11399	; 0x2c87
   125bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   125c0:	2200      	movs	r2, #0
   125c2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   125c4:	f243 0324 	movw	r3, #12324	; 0x3024
   125c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   125cc:	f04f 0200 	mov.w	r2, #0
   125d0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   125d2:	f642 4385 	movw	r3, #11397	; 0x2c85
   125d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   125da:	2203      	movs	r2, #3
   125dc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   125de:	f640 2358 	movw	r3, #2648	; 0xa58
   125e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   125e8:	f640 2354 	movw	r3, #2644	; 0xa54
   125ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   125f2:	f642 73ec 	movw	r3, #12268	; 0x2fec
   125f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   125fa:	f04f 0200 	mov.w	r2, #0
   125fe:	601a      	str	r2, [r3, #0]
          }
          return;
   12600:	f001 bc98 	b.w	13f34 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12604:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12608:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1260c:	781b      	ldrb	r3, [r3, #0]
   1260e:	2b02      	cmp	r3, #2
   12610:	d169      	bne.n	126e6 <auto_nav+0x956>
     {
         nav_stage =2; 
   12612:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12616:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1261a:	2202      	movs	r2, #2
   1261c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   1261e:	2001      	movs	r0, #1
   12620:	f001 fc96 	bl	13f50 <approaching>
   12624:	4603      	mov	r3, r0
   12626:	2b00      	cmp	r3, #0
   12628:	d034      	beq.n	12694 <auto_nav+0x904>
   1262a:	f243 0304 	movw	r3, #12292	; 0x3004
   1262e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12632:	2201      	movs	r2, #1
   12634:	701a      	strb	r2, [r3, #0]
   12636:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1263a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	3301      	adds	r3, #1
   12642:	b2da      	uxtb	r2, r3
   12644:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12648:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1264c:	701a      	strb	r2, [r3, #0]
   1264e:	f243 2354 	movw	r3, #12884	; 0x3254
   12652:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12656:	681a      	ldr	r2, [r3, #0]
   12658:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1265c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12660:	601a      	str	r2, [r3, #0]
   12662:	f243 2358 	movw	r3, #12888	; 0x3258
   12666:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1266a:	681a      	ldr	r2, [r3, #0]
   1266c:	f243 0300 	movw	r3, #12288	; 0x3000
   12670:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12674:	601a      	str	r2, [r3, #0]
   12676:	f243 030c 	movw	r3, #12300	; 0x300c
   1267a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1267e:	2200      	movs	r2, #0
   12680:	801a      	strh	r2, [r3, #0]
   12682:	f243 0310 	movw	r3, #12304	; 0x3010
   12686:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1268a:	f04f 0200 	mov.w	r2, #0
   1268e:	601a      	str	r2, [r3, #0]
   12690:	f001 bc50 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(1);
   12694:	2001      	movs	r0, #1
   12696:	f001 fd8f 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   1269a:	f642 4387 	movw	r3, #11399	; 0x2c87
   1269e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126a2:	2200      	movs	r2, #0
   126a4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   126a6:	f243 0324 	movw	r3, #12324	; 0x3024
   126aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126ae:	f04f 0200 	mov.w	r2, #0
   126b2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   126b4:	f642 4385 	movw	r3, #11397	; 0x2c85
   126b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126bc:	2203      	movs	r2, #3
   126be:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   126c0:	f640 2358 	movw	r3, #2648	; 0xa58
   126c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c8:	695a      	ldr	r2, [r3, #20]
   126ca:	f640 2354 	movw	r3, #2644	; 0xa54
   126ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   126d4:	f642 73ec 	movw	r3, #12268	; 0x2fec
   126d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126dc:	f04f 0200 	mov.w	r2, #0
   126e0:	601a      	str	r2, [r3, #0]
          }
          return;
   126e2:	f001 bc27 	b.w	13f34 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   126e6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   126ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	2b03      	cmp	r3, #3
   126f2:	d16f      	bne.n	127d4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   126f4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   126f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   126fc:	2203      	movs	r2, #3
   126fe:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12700:	2002      	movs	r0, #2
   12702:	f001 fc25 	bl	13f50 <approaching>
   12706:	4603      	mov	r3, r0
   12708:	2b00      	cmp	r3, #0
   1270a:	d034      	beq.n	12776 <auto_nav+0x9e6>
   1270c:	f243 0304 	movw	r3, #12292	; 0x3004
   12710:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12714:	2202      	movs	r2, #2
   12716:	701a      	strb	r2, [r3, #0]
   12718:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1271c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12720:	781b      	ldrb	r3, [r3, #0]
   12722:	3301      	adds	r3, #1
   12724:	b2da      	uxtb	r2, r3
   12726:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1272a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1272e:	701a      	strb	r2, [r3, #0]
   12730:	f243 2354 	movw	r3, #12884	; 0x3254
   12734:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12738:	681a      	ldr	r2, [r3, #0]
   1273a:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1273e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12742:	601a      	str	r2, [r3, #0]
   12744:	f243 2358 	movw	r3, #12888	; 0x3258
   12748:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1274c:	681a      	ldr	r2, [r3, #0]
   1274e:	f243 0300 	movw	r3, #12288	; 0x3000
   12752:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12756:	601a      	str	r2, [r3, #0]
   12758:	f243 030c 	movw	r3, #12300	; 0x300c
   1275c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12760:	2200      	movs	r2, #0
   12762:	801a      	strh	r2, [r3, #0]
   12764:	f243 0310 	movw	r3, #12304	; 0x3010
   12768:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1276c:	f04f 0200 	mov.w	r2, #0
   12770:	601a      	str	r2, [r3, #0]
   12772:	f001 bbdf 	b.w	13f34 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12776:	f243 0304 	movw	r3, #12292	; 0x3004
   1277a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1277e:	781b      	ldrb	r3, [r3, #0]
   12780:	4618      	mov	r0, r3
   12782:	2102      	movs	r1, #2
   12784:	f001 fd3a 	bl	141fc <route_to>
            auto_pitch = FALSE;
   12788:	f642 4387 	movw	r3, #11399	; 0x2c87
   1278c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12790:	2200      	movs	r2, #0
   12792:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12794:	f243 0324 	movw	r3, #12324	; 0x3024
   12798:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1279c:	f04f 0200 	mov.w	r2, #0
   127a0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   127a2:	f642 4385 	movw	r3, #11397	; 0x2c85
   127a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   127aa:	2203      	movs	r2, #3
   127ac:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   127ae:	f640 2358 	movw	r3, #2648	; 0xa58
   127b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b6:	6a1a      	ldr	r2, [r3, #32]
   127b8:	f640 2354 	movw	r3, #2644	; 0xa54
   127bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   127c2:	f642 73ec 	movw	r3, #12268	; 0x2fec
   127c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   127ca:	f04f 0200 	mov.w	r2, #0
   127ce:	601a      	str	r2, [r3, #0]
          }
          return;
   127d0:	f001 bbb0 	b.w	13f34 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   127d4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   127d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   127dc:	781b      	ldrb	r3, [r3, #0]
   127de:	2b04      	cmp	r3, #4
   127e0:	d169      	bne.n	128b6 <auto_nav+0xb26>
       {
          nav_stage = 4;
   127e2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   127e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   127ea:	2204      	movs	r2, #4
   127ec:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   127ee:	2003      	movs	r0, #3
   127f0:	f001 fbae 	bl	13f50 <approaching>
   127f4:	4603      	mov	r3, r0
   127f6:	2b00      	cmp	r3, #0
   127f8:	d034      	beq.n	12864 <auto_nav+0xad4>
   127fa:	f243 0304 	movw	r3, #12292	; 0x3004
   127fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12802:	2203      	movs	r2, #3
   12804:	701a      	strb	r2, [r3, #0]
   12806:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1280a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1280e:	781b      	ldrb	r3, [r3, #0]
   12810:	3301      	adds	r3, #1
   12812:	b2da      	uxtb	r2, r3
   12814:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12818:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1281c:	701a      	strb	r2, [r3, #0]
   1281e:	f243 2354 	movw	r3, #12884	; 0x3254
   12822:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12826:	681a      	ldr	r2, [r3, #0]
   12828:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1282c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12830:	601a      	str	r2, [r3, #0]
   12832:	f243 2358 	movw	r3, #12888	; 0x3258
   12836:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1283a:	681a      	ldr	r2, [r3, #0]
   1283c:	f243 0300 	movw	r3, #12288	; 0x3000
   12840:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12844:	601a      	str	r2, [r3, #0]
   12846:	f243 030c 	movw	r3, #12300	; 0x300c
   1284a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1284e:	2200      	movs	r2, #0
   12850:	801a      	strh	r2, [r3, #0]
   12852:	f243 0310 	movw	r3, #12304	; 0x3010
   12856:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1285a:	f04f 0200 	mov.w	r2, #0
   1285e:	601a      	str	r2, [r3, #0]
   12860:	f001 bb68 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(3);
   12864:	2003      	movs	r0, #3
   12866:	f001 fca7 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   1286a:	f642 4387 	movw	r3, #11399	; 0x2c87
   1286e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12872:	2200      	movs	r2, #0
   12874:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12876:	f243 0324 	movw	r3, #12324	; 0x3024
   1287a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1287e:	f04f 0200 	mov.w	r2, #0
   12882:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12884:	f642 4385 	movw	r3, #11397	; 0x2c85
   12888:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1288c:	2203      	movs	r2, #3
   1288e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12890:	f640 2358 	movw	r3, #2648	; 0xa58
   12894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1289a:	f640 2354 	movw	r3, #2644	; 0xa54
   1289e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   128a4:	f642 73ec 	movw	r3, #12268	; 0x2fec
   128a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128ac:	f04f 0200 	mov.w	r2, #0
   128b0:	601a      	str	r2, [r3, #0]
          }
          return;
   128b2:	f001 bb3f 	b.w	13f34 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   128b6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   128ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128be:	781b      	ldrb	r3, [r3, #0]
   128c0:	2b05      	cmp	r3, #5
   128c2:	d169      	bne.n	12998 <auto_nav+0xc08>
       {
          nav_stage =5;
   128c4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   128c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128cc:	2205      	movs	r2, #5
   128ce:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   128d0:	2004      	movs	r0, #4
   128d2:	f001 fb3d 	bl	13f50 <approaching>
   128d6:	4603      	mov	r3, r0
   128d8:	2b00      	cmp	r3, #0
   128da:	d034      	beq.n	12946 <auto_nav+0xbb6>
   128dc:	f243 0304 	movw	r3, #12292	; 0x3004
   128e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128e4:	2204      	movs	r2, #4
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   128ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128f0:	781b      	ldrb	r3, [r3, #0]
   128f2:	3301      	adds	r3, #1
   128f4:	b2da      	uxtb	r2, r3
   128f6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   128fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   128fe:	701a      	strb	r2, [r3, #0]
   12900:	f243 2354 	movw	r3, #12884	; 0x3254
   12904:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12908:	681a      	ldr	r2, [r3, #0]
   1290a:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1290e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12912:	601a      	str	r2, [r3, #0]
   12914:	f243 2358 	movw	r3, #12888	; 0x3258
   12918:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1291c:	681a      	ldr	r2, [r3, #0]
   1291e:	f243 0300 	movw	r3, #12288	; 0x3000
   12922:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12926:	601a      	str	r2, [r3, #0]
   12928:	f243 030c 	movw	r3, #12300	; 0x300c
   1292c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12930:	2200      	movs	r2, #0
   12932:	801a      	strh	r2, [r3, #0]
   12934:	f243 0310 	movw	r3, #12304	; 0x3010
   12938:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1293c:	f04f 0200 	mov.w	r2, #0
   12940:	601a      	str	r2, [r3, #0]
   12942:	f001 baf7 	b.w	13f34 <auto_nav+0x21a4>
            fly_to(4);
   12946:	2004      	movs	r0, #4
   12948:	f001 fc36 	bl	141b8 <fly_to>
            auto_pitch = FALSE;
   1294c:	f642 4387 	movw	r3, #11399	; 0x2c87
   12950:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12954:	2200      	movs	r2, #0
   12956:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12958:	f243 0324 	movw	r3, #12324	; 0x3024
   1295c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12960:	f04f 0200 	mov.w	r2, #0
   12964:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12966:	f642 4385 	movw	r3, #11397	; 0x2c85
   1296a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1296e:	2203      	movs	r2, #3
   12970:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12972:	f640 2358 	movw	r3, #2648	; 0xa58
   12976:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1297a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1297c:	f640 2354 	movw	r3, #2644	; 0xa54
   12980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12984:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12986:	f642 73ec 	movw	r3, #12268	; 0x2fec
   1298a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1298e:	f04f 0200 	mov.w	r2, #0
   12992:	601a      	str	r2, [r3, #0]
          }
          return;
   12994:	f001 bace 	b.w	13f34 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12998:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1299c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129a0:	781b      	ldrb	r3, [r3, #0]
   129a2:	2b06      	cmp	r3, #6
   129a4:	d16f      	bne.n	12a86 <auto_nav+0xcf6>
       {
          nav_stage =6;
   129a6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   129aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129ae:	2206      	movs	r2, #6
   129b0:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   129b2:	2005      	movs	r0, #5
   129b4:	f001 facc 	bl	13f50 <approaching>
   129b8:	4603      	mov	r3, r0
   129ba:	2b00      	cmp	r3, #0
   129bc:	d034      	beq.n	12a28 <auto_nav+0xc98>
   129be:	f243 0304 	movw	r3, #12292	; 0x3004
   129c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129c6:	2205      	movs	r2, #5
   129c8:	701a      	strb	r2, [r3, #0]
   129ca:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   129ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	3301      	adds	r3, #1
   129d6:	b2da      	uxtb	r2, r3
   129d8:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   129dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129e0:	701a      	strb	r2, [r3, #0]
   129e2:	f243 2354 	movw	r3, #12884	; 0x3254
   129e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129ea:	681a      	ldr	r2, [r3, #0]
   129ec:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   129f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129f4:	601a      	str	r2, [r3, #0]
   129f6:	f243 2358 	movw	r3, #12888	; 0x3258
   129fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   129fe:	681a      	ldr	r2, [r3, #0]
   12a00:	f243 0300 	movw	r3, #12288	; 0x3000
   12a04:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a08:	601a      	str	r2, [r3, #0]
   12a0a:	f243 030c 	movw	r3, #12300	; 0x300c
   12a0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a12:	2200      	movs	r2, #0
   12a14:	801a      	strh	r2, [r3, #0]
   12a16:	f243 0310 	movw	r3, #12304	; 0x3010
   12a1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a1e:	f04f 0200 	mov.w	r2, #0
   12a22:	601a      	str	r2, [r3, #0]
   12a24:	f001 ba86 	b.w	13f34 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12a28:	f243 0304 	movw	r3, #12292	; 0x3004
   12a2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a30:	781b      	ldrb	r3, [r3, #0]
   12a32:	4618      	mov	r0, r3
   12a34:	2105      	movs	r1, #5
   12a36:	f001 fbe1 	bl	141fc <route_to>
            auto_pitch = FALSE;
   12a3a:	f642 4387 	movw	r3, #11399	; 0x2c87
   12a3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a42:	2200      	movs	r2, #0
   12a44:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a46:	f243 0324 	movw	r3, #12324	; 0x3024
   12a4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a4e:	f04f 0200 	mov.w	r2, #0
   12a52:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a54:	f642 4385 	movw	r3, #11397	; 0x2c85
   12a58:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a5c:	2203      	movs	r2, #3
   12a5e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12a60:	f640 2358 	movw	r3, #2648	; 0xa58
   12a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12a6a:	f640 2354 	movw	r3, #2644	; 0xa54
   12a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a72:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a74:	f642 73ec 	movw	r3, #12268	; 0x2fec
   12a78:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a7c:	f04f 0200 	mov.w	r2, #0
   12a80:	601a      	str	r2, [r3, #0]
          }
          return;
   12a82:	f001 ba57 	b.w	13f34 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12a86:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12a8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a8e:	781b      	ldrb	r3, [r3, #0]
   12a90:	2b07      	cmp	r3, #7
   12a92:	d106      	bne.n	12aa2 <auto_nav+0xd12>
       {
	   nav_stage =7;
   12a94:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12a98:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12a9c:	2207      	movs	r2, #7
   12a9e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12aa0:	e50a      	b.n	124b8 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12aa2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12aa6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12aaa:	781b      	ldrb	r3, [r3, #0]
   12aac:	2b08      	cmp	r3, #8
   12aae:	f041 8241 	bne.w	13f34 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12ab2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12ab6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12aba:	2208      	movs	r2, #8
   12abc:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12abe:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12ac2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12ac6:	781b      	ldrb	r3, [r3, #0]
   12ac8:	3301      	adds	r3, #1
   12aca:	b2da      	uxtb	r2, r3
   12acc:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12ad0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12ad4:	701a      	strb	r2, [r3, #0]
   12ad6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12ada:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12ade:	2200      	movs	r2, #0
   12ae0:	701a      	strb	r2, [r3, #0]
   12ae2:	f243 030e 	movw	r3, #12302	; 0x300e
   12ae6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12aea:	2200      	movs	r2, #0
   12aec:	801a      	strh	r2, [r3, #0]
   12aee:	f243 2354 	movw	r3, #12884	; 0x3254
   12af2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12af6:	681a      	ldr	r2, [r3, #0]
   12af8:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   12afc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b00:	601a      	str	r2, [r3, #0]
   12b02:	f243 2358 	movw	r3, #12888	; 0x3258
   12b06:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b0a:	681a      	ldr	r2, [r3, #0]
   12b0c:	f243 0300 	movw	r3, #12288	; 0x3000
   12b10:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b14:	601a      	str	r2, [r3, #0]
   12b16:	f243 030c 	movw	r3, #12300	; 0x300c
   12b1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b1e:	2200      	movs	r2, #0
   12b20:	801a      	strh	r2, [r3, #0]
   12b22:	f243 0310 	movw	r3, #12304	; 0x3010
   12b26:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b2a:	f04f 0200 	mov.w	r2, #0
   12b2e:	601a      	str	r2, [r3, #0]
   12b30:	f001 ba00 	b.w	13f34 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12b34:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12b38:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b3c:	781b      	ldrb	r3, [r3, #0]
   12b3e:	2b03      	cmp	r3, #3
   12b40:	f040 8388 	bne.w	13254 <auto_nav+0x14c4>
{
    nav_block = 3;
   12b44:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12b48:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b4c:	2203      	movs	r2, #3
   12b4e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12b50:	f642 4388 	movw	r3, #11400	; 0x2c88
   12b54:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b58:	781b      	ldrb	r3, [r3, #0]
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	d007      	beq.n	12b6e <auto_nav+0xdde>
   12b5e:	f642 4388 	movw	r3, #11400	; 0x2c88
   12b62:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b66:	2200      	movs	r2, #0
   12b68:	701a      	strb	r2, [r3, #0]
   12b6a:	2301      	movs	r3, #1
   12b6c:	e000      	b.n	12b70 <auto_nav+0xde0>
   12b6e:	2300      	movs	r3, #0
   12b70:	2b00      	cmp	r3, #0
   12b72:	d034      	beq.n	12bde <auto_nav+0xe4e>
   12b74:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   12b78:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b7c:	2204      	movs	r2, #4
   12b7e:	701a      	strb	r2, [r3, #0]
   12b80:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12b84:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b88:	2200      	movs	r2, #0
   12b8a:	701a      	strb	r2, [r3, #0]
   12b8c:	f243 030e 	movw	r3, #12302	; 0x300e
   12b90:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12b94:	2200      	movs	r2, #0
   12b96:	801a      	strh	r2, [r3, #0]
   12b98:	f243 2354 	movw	r3, #12884	; 0x3254
   12b9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12ba0:	681a      	ldr	r2, [r3, #0]
   12ba2:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   12ba6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12baa:	601a      	str	r2, [r3, #0]
   12bac:	f243 2358 	movw	r3, #12888	; 0x3258
   12bb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12bb4:	681a      	ldr	r2, [r3, #0]
   12bb6:	f243 0300 	movw	r3, #12288	; 0x3000
   12bba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12bbe:	601a      	str	r2, [r3, #0]
   12bc0:	f243 030c 	movw	r3, #12300	; 0x300c
   12bc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12bc8:	2200      	movs	r2, #0
   12bca:	801a      	strh	r2, [r3, #0]
   12bcc:	f243 0310 	movw	r3, #12304	; 0x3010
   12bd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12bd4:	f04f 0200 	mov.w	r2, #0
   12bd8:	601a      	str	r2, [r3, #0]
   12bda:	f001 b9ab 	b.w	13f34 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12bde:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12be2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12be6:	781b      	ldrb	r3, [r3, #0]
   12be8:	2b00      	cmp	r3, #0
   12bea:	f040 82ea 	bne.w	131c2 <auto_nav+0x1432>
    {
        nav_stage = 0;
   12bee:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   12bf2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12bf6:	2200      	movs	r2, #0
   12bf8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12bfa:	f642 4384 	movw	r3, #11396	; 0x2c84
   12bfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	2b02      	cmp	r3, #2
   12c06:	f040 81a5 	bne.w	12f54 <auto_nav+0x11c4>
   12c0a:	f642 53a8 	movw	r3, #11688	; 0x2da8
   12c0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12c12:	88db      	ldrh	r3, [r3, #6]
   12c14:	84fb      	strh	r3, [r7, #38]	; 0x26
   12c16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12c1e:	dc04      	bgt.n	12c2a <auto_nav+0xe9a>
   12c20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c24:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12c28:	da7e      	bge.n	12d28 <auto_nav+0xf98>
   12c2a:	f243 0344 	movw	r3, #12356	; 0x3044
   12c2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12c32:	681b      	ldr	r3, [r3, #0]
   12c34:	4618      	mov	r0, r3
   12c36:	f004 fbfd 	bl	17434 <__aeabi_f2d>
   12c3a:	4604      	mov	r4, r0
   12c3c:	460d      	mov	r5, r1
   12c3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c42:	4618      	mov	r0, r3
   12c44:	f005 f836 	bl	17cb4 <__aeabi_i2f>
   12c48:	4603      	mov	r3, r0
   12c4a:	4618      	mov	r0, r3
   12c4c:	f04f 0100 	mov.w	r1, #0
   12c50:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12c54:	f005 f936 	bl	17ec4 <__aeabi_fdiv>
   12c58:	4603      	mov	r3, r0
   12c5a:	4618      	mov	r0, r3
   12c5c:	f004 fbea 	bl	17434 <__aeabi_f2d>
   12c60:	4602      	mov	r2, r0
   12c62:	460b      	mov	r3, r1
   12c64:	4610      	mov	r0, r2
   12c66:	4619      	mov	r1, r3
   12c68:	f04f 0200 	mov.w	r2, #0
   12c6c:	f04f 0300 	mov.w	r3, #0
   12c70:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12c74:	f004 fc32 	bl	174dc <__aeabi_dmul>
   12c78:	4602      	mov	r2, r0
   12c7a:	460b      	mov	r3, r1
   12c7c:	4610      	mov	r0, r2
   12c7e:	4619      	mov	r1, r3
   12c80:	f04f 0200 	mov.w	r2, #0
   12c84:	f04f 0300 	mov.w	r3, #0
   12c88:	f004 fa76 	bl	17178 <__adddf3>
   12c8c:	4602      	mov	r2, r0
   12c8e:	460b      	mov	r3, r1
   12c90:	4620      	mov	r0, r4
   12c92:	4629      	mov	r1, r5
   12c94:	f004 fa70 	bl	17178 <__adddf3>
   12c98:	4602      	mov	r2, r0
   12c9a:	460b      	mov	r3, r1
   12c9c:	4610      	mov	r0, r2
   12c9e:	4619      	mov	r1, r3
   12ca0:	f004 fefe 	bl	17aa0 <__aeabi_d2f>
   12ca4:	4602      	mov	r2, r0
   12ca6:	f243 0344 	movw	r3, #12356	; 0x3044
   12caa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12cae:	601a      	str	r2, [r3, #0]
   12cb0:	f243 0344 	movw	r3, #12356	; 0x3044
   12cb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12cb8:	681b      	ldr	r3, [r3, #0]
   12cba:	4618      	mov	r0, r3
   12cbc:	f04f 0100 	mov.w	r1, #0
   12cc0:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12cc4:	f005 f9f2 	bl	180ac <__aeabi_fcmple>
   12cc8:	4603      	mov	r3, r0
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d005      	beq.n	12cda <auto_nav+0xf4a>
   12cce:	f243 0344 	movw	r3, #12356	; 0x3044
   12cd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12cd6:	681a      	ldr	r2, [r3, #0]
   12cd8:	e003      	b.n	12ce2 <auto_nav+0xf52>
   12cda:	f04f 0200 	mov.w	r2, #0
   12cde:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12ce2:	f243 0344 	movw	r3, #12356	; 0x3044
   12ce6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12cea:	601a      	str	r2, [r3, #0]
   12cec:	f243 0344 	movw	r3, #12356	; 0x3044
   12cf0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12cf4:	681b      	ldr	r3, [r3, #0]
   12cf6:	4618      	mov	r0, r3
   12cf8:	f04f 0100 	mov.w	r1, #0
   12cfc:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12d00:	f005 f9de 	bl	180c0 <__aeabi_fcmpge>
   12d04:	4603      	mov	r3, r0
   12d06:	2b00      	cmp	r3, #0
   12d08:	d005      	beq.n	12d16 <auto_nav+0xf86>
   12d0a:	f243 0344 	movw	r3, #12356	; 0x3044
   12d0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12d12:	681a      	ldr	r2, [r3, #0]
   12d14:	e003      	b.n	12d1e <auto_nav+0xf8e>
   12d16:	f04f 0200 	mov.w	r2, #0
   12d1a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12d1e:	f243 0344 	movw	r3, #12356	; 0x3044
   12d22:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12d26:	601a      	str	r2, [r3, #0]
   12d28:	f642 53a8 	movw	r3, #11688	; 0x2da8
   12d2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12d30:	889b      	ldrh	r3, [r3, #4]
   12d32:	84bb      	strh	r3, [r7, #36]	; 0x24
   12d34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d38:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12d3c:	dc04      	bgt.n	12d48 <auto_nav+0xfb8>
   12d3e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d42:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12d46:	da7e      	bge.n	12e46 <auto_nav+0x10b6>
   12d48:	f243 0348 	movw	r3, #12360	; 0x3048
   12d4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12d50:	681b      	ldr	r3, [r3, #0]
   12d52:	4618      	mov	r0, r3
   12d54:	f004 fb6e 	bl	17434 <__aeabi_f2d>
   12d58:	4604      	mov	r4, r0
   12d5a:	460d      	mov	r5, r1
   12d5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d60:	4618      	mov	r0, r3
   12d62:	f004 ffa7 	bl	17cb4 <__aeabi_i2f>
   12d66:	4603      	mov	r3, r0
   12d68:	4618      	mov	r0, r3
   12d6a:	f04f 0100 	mov.w	r1, #0
   12d6e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12d72:	f005 f8a7 	bl	17ec4 <__aeabi_fdiv>
   12d76:	4603      	mov	r3, r0
   12d78:	4618      	mov	r0, r3
   12d7a:	f004 fb5b 	bl	17434 <__aeabi_f2d>
   12d7e:	4602      	mov	r2, r0
   12d80:	460b      	mov	r3, r1
   12d82:	4610      	mov	r0, r2
   12d84:	4619      	mov	r1, r3
   12d86:	f04f 0200 	mov.w	r2, #0
   12d8a:	f04f 0300 	mov.w	r3, #0
   12d8e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12d92:	f004 fba3 	bl	174dc <__aeabi_dmul>
   12d96:	4602      	mov	r2, r0
   12d98:	460b      	mov	r3, r1
   12d9a:	4610      	mov	r0, r2
   12d9c:	4619      	mov	r1, r3
   12d9e:	f04f 0200 	mov.w	r2, #0
   12da2:	f04f 0300 	mov.w	r3, #0
   12da6:	f004 f9e7 	bl	17178 <__adddf3>
   12daa:	4602      	mov	r2, r0
   12dac:	460b      	mov	r3, r1
   12dae:	4620      	mov	r0, r4
   12db0:	4629      	mov	r1, r5
   12db2:	f004 f9e1 	bl	17178 <__adddf3>
   12db6:	4602      	mov	r2, r0
   12db8:	460b      	mov	r3, r1
   12dba:	4610      	mov	r0, r2
   12dbc:	4619      	mov	r1, r3
   12dbe:	f004 fe6f 	bl	17aa0 <__aeabi_d2f>
   12dc2:	4602      	mov	r2, r0
   12dc4:	f243 0348 	movw	r3, #12360	; 0x3048
   12dc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12dcc:	601a      	str	r2, [r3, #0]
   12dce:	f243 0348 	movw	r3, #12360	; 0x3048
   12dd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12dd6:	681b      	ldr	r3, [r3, #0]
   12dd8:	4618      	mov	r0, r3
   12dda:	f04f 0100 	mov.w	r1, #0
   12dde:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12de2:	f005 f963 	bl	180ac <__aeabi_fcmple>
   12de6:	4603      	mov	r3, r0
   12de8:	2b00      	cmp	r3, #0
   12dea:	d005      	beq.n	12df8 <auto_nav+0x1068>
   12dec:	f243 0348 	movw	r3, #12360	; 0x3048
   12df0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12df4:	681a      	ldr	r2, [r3, #0]
   12df6:	e003      	b.n	12e00 <auto_nav+0x1070>
   12df8:	f04f 0200 	mov.w	r2, #0
   12dfc:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12e00:	f243 0348 	movw	r3, #12360	; 0x3048
   12e04:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e08:	601a      	str	r2, [r3, #0]
   12e0a:	f243 0348 	movw	r3, #12360	; 0x3048
   12e0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e12:	681b      	ldr	r3, [r3, #0]
   12e14:	4618      	mov	r0, r3
   12e16:	f04f 0100 	mov.w	r1, #0
   12e1a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12e1e:	f005 f94f 	bl	180c0 <__aeabi_fcmpge>
   12e22:	4603      	mov	r3, r0
   12e24:	2b00      	cmp	r3, #0
   12e26:	d005      	beq.n	12e34 <auto_nav+0x10a4>
   12e28:	f243 0348 	movw	r3, #12360	; 0x3048
   12e2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e30:	681a      	ldr	r2, [r3, #0]
   12e32:	e003      	b.n	12e3c <auto_nav+0x10ac>
   12e34:	f04f 0200 	mov.w	r2, #0
   12e38:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12e3c:	f243 0348 	movw	r3, #12360	; 0x3048
   12e40:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e44:	601a      	str	r2, [r3, #0]
   12e46:	f642 4385 	movw	r3, #11397	; 0x2c85
   12e4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e4e:	2203      	movs	r2, #3
   12e50:	701a      	strb	r2, [r3, #0]
   12e52:	f642 53a8 	movw	r3, #11688	; 0x2da8
   12e56:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12e5a:	885b      	ldrh	r3, [r3, #2]
   12e5c:	847b      	strh	r3, [r7, #34]	; 0x22
   12e5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e62:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12e66:	dc04      	bgt.n	12e72 <auto_nav+0x10e2>
   12e68:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e6c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12e70:	da70      	bge.n	12f54 <auto_nav+0x11c4>
   12e72:	f640 2354 	movw	r3, #2644	; 0xa54
   12e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7a:	681b      	ldr	r3, [r3, #0]
   12e7c:	4618      	mov	r0, r3
   12e7e:	f004 fad9 	bl	17434 <__aeabi_f2d>
   12e82:	4604      	mov	r4, r0
   12e84:	460d      	mov	r5, r1
   12e86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e8a:	4618      	mov	r0, r3
   12e8c:	f004 ff12 	bl	17cb4 <__aeabi_i2f>
   12e90:	4603      	mov	r3, r0
   12e92:	4618      	mov	r0, r3
   12e94:	f04f 0100 	mov.w	r1, #0
   12e98:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12e9c:	f005 f812 	bl	17ec4 <__aeabi_fdiv>
   12ea0:	4603      	mov	r3, r0
   12ea2:	4618      	mov	r0, r3
   12ea4:	f004 fac6 	bl	17434 <__aeabi_f2d>
   12ea8:	4602      	mov	r2, r0
   12eaa:	460b      	mov	r3, r1
   12eac:	f04f 0000 	mov.w	r0, #0
   12eb0:	f04f 0100 	mov.w	r1, #0
   12eb4:	f004 f95e 	bl	17174 <__aeabi_dsub>
   12eb8:	4602      	mov	r2, r0
   12eba:	460b      	mov	r3, r1
   12ebc:	4620      	mov	r0, r4
   12ebe:	4629      	mov	r1, r5
   12ec0:	f004 f95a 	bl	17178 <__adddf3>
   12ec4:	4602      	mov	r2, r0
   12ec6:	460b      	mov	r3, r1
   12ec8:	4610      	mov	r0, r2
   12eca:	4619      	mov	r1, r3
   12ecc:	f004 fde8 	bl	17aa0 <__aeabi_d2f>
   12ed0:	4602      	mov	r2, r0
   12ed2:	f640 2354 	movw	r3, #2644	; 0xa54
   12ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eda:	601a      	str	r2, [r3, #0]
   12edc:	f640 2354 	movw	r3, #2644	; 0xa54
   12ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	4618      	mov	r0, r3
   12ee8:	f04f 0100 	mov.w	r1, #0
   12eec:	f2c4 312f 	movt	r1, #17199	; 0x432f
   12ef0:	f005 f8e6 	bl	180c0 <__aeabi_fcmpge>
   12ef4:	4603      	mov	r3, r0
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	d005      	beq.n	12f06 <auto_nav+0x1176>
   12efa:	f640 2354 	movw	r3, #2644	; 0xa54
   12efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f02:	681a      	ldr	r2, [r3, #0]
   12f04:	e003      	b.n	12f0e <auto_nav+0x117e>
   12f06:	f04f 0200 	mov.w	r2, #0
   12f0a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   12f0e:	f640 2354 	movw	r3, #2644	; 0xa54
   12f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f16:	601a      	str	r2, [r3, #0]
   12f18:	f640 2354 	movw	r3, #2644	; 0xa54
   12f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f20:	681b      	ldr	r3, [r3, #0]
   12f22:	4618      	mov	r0, r3
   12f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12f28:	f2c4 3189 	movt	r1, #17289	; 0x4389
   12f2c:	f005 f8be 	bl	180ac <__aeabi_fcmple>
   12f30:	4603      	mov	r3, r0
   12f32:	2b00      	cmp	r3, #0
   12f34:	d005      	beq.n	12f42 <auto_nav+0x11b2>
   12f36:	f640 2354 	movw	r3, #2644	; 0xa54
   12f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f3e:	681a      	ldr	r2, [r3, #0]
   12f40:	e003      	b.n	12f4a <auto_nav+0x11ba>
   12f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12f46:	f2c4 3289 	movt	r2, #17289	; 0x4389
   12f4a:	f640 2354 	movw	r3, #2644	; 0xa54
   12f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f52:	601a      	str	r2, [r3, #0]
   12f54:	f243 2358 	movw	r3, #12888	; 0x3258
   12f58:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12f5c:	681a      	ldr	r2, [r3, #0]
   12f5e:	f243 0348 	movw	r3, #12360	; 0x3048
   12f62:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12f66:	681b      	ldr	r3, [r3, #0]
   12f68:	4610      	mov	r0, r2
   12f6a:	4619      	mov	r1, r3
   12f6c:	f004 fdec 	bl	17b48 <__aeabi_fsub>
   12f70:	4603      	mov	r3, r0
   12f72:	4618      	mov	r0, r3
   12f74:	f004 fa5e 	bl	17434 <__aeabi_f2d>
   12f78:	4604      	mov	r4, r0
   12f7a:	460d      	mov	r5, r1
   12f7c:	f243 2354 	movw	r3, #12884	; 0x3254
   12f80:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12f84:	681a      	ldr	r2, [r3, #0]
   12f86:	f243 0344 	movw	r3, #12356	; 0x3044
   12f8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12f8e:	681b      	ldr	r3, [r3, #0]
   12f90:	4610      	mov	r0, r2
   12f92:	4619      	mov	r1, r3
   12f94:	f004 fdd8 	bl	17b48 <__aeabi_fsub>
   12f98:	4603      	mov	r3, r0
   12f9a:	4618      	mov	r0, r3
   12f9c:	f004 fa4a 	bl	17434 <__aeabi_f2d>
   12fa0:	4602      	mov	r2, r0
   12fa2:	460b      	mov	r3, r1
   12fa4:	4620      	mov	r0, r4
   12fa6:	4629      	mov	r1, r5
   12fa8:	f002 fa12 	bl	153d0 <pp_atan2>
   12fac:	4602      	mov	r2, r0
   12fae:	460b      	mov	r3, r1
   12fb0:	4610      	mov	r0, r2
   12fb2:	4619      	mov	r1, r3
   12fb4:	f004 fd74 	bl	17aa0 <__aeabi_d2f>
   12fb8:	4603      	mov	r3, r0
   12fba:	61fb      	str	r3, [r7, #28]
   12fbc:	69f8      	ldr	r0, [r7, #28]
   12fbe:	f004 fa39 	bl	17434 <__aeabi_f2d>
   12fc2:	4604      	mov	r4, r0
   12fc4:	460d      	mov	r5, r1
   12fc6:	f243 238c 	movw	r3, #12940	; 0x328c
   12fca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   12fce:	681b      	ldr	r3, [r3, #0]
   12fd0:	4618      	mov	r0, r3
   12fd2:	f04f 0100 	mov.w	r1, #0
   12fd6:	f2cc 2148 	movt	r1, #49736	; 0xc248
   12fda:	f004 febf 	bl	17d5c <__aeabi_fmul>
   12fde:	4603      	mov	r3, r0
   12fe0:	4618      	mov	r0, r3
   12fe2:	f004 fa27 	bl	17434 <__aeabi_f2d>
   12fe6:	4602      	mov	r2, r0
   12fe8:	460b      	mov	r3, r1
   12fea:	f04f 0000 	mov.w	r0, #0
   12fee:	f04f 0100 	mov.w	r1, #0
   12ff2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12ff6:	f004 fb9b 	bl	17730 <__aeabi_ddiv>
   12ffa:	4602      	mov	r2, r0
   12ffc:	460b      	mov	r3, r1
   12ffe:	4620      	mov	r0, r4
   13000:	4629      	mov	r1, r5
   13002:	f004 f8b9 	bl	17178 <__adddf3>
   13006:	4602      	mov	r2, r0
   13008:	460b      	mov	r3, r1
   1300a:	4610      	mov	r0, r2
   1300c:	4619      	mov	r1, r3
   1300e:	f004 fd47 	bl	17aa0 <__aeabi_d2f>
   13012:	4603      	mov	r3, r0
   13014:	61bb      	str	r3, [r7, #24]
   13016:	f243 0344 	movw	r3, #12356	; 0x3044
   1301a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1301e:	681b      	ldr	r3, [r3, #0]
   13020:	4618      	mov	r0, r3
   13022:	f004 fa07 	bl	17434 <__aeabi_f2d>
   13026:	4604      	mov	r4, r0
   13028:	460d      	mov	r5, r1
   1302a:	69b8      	ldr	r0, [r7, #24]
   1302c:	f004 fa02 	bl	17434 <__aeabi_f2d>
   13030:	4602      	mov	r2, r0
   13032:	460b      	mov	r3, r1
   13034:	4610      	mov	r0, r2
   13036:	4619      	mov	r1, r3
   13038:	a3b1      	add	r3, pc, #708	; (adr r3, 13300 <auto_nav+0x1570>)
   1303a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1303e:	f004 f89b 	bl	17178 <__adddf3>
   13042:	4602      	mov	r2, r0
   13044:	460b      	mov	r3, r1
   13046:	4610      	mov	r0, r2
   13048:	4619      	mov	r1, r3
   1304a:	f002 fa81 	bl	15550 <pp_sin>
   1304e:	4602      	mov	r2, r0
   13050:	460b      	mov	r3, r1
   13052:	4610      	mov	r0, r2
   13054:	4619      	mov	r1, r3
   13056:	f04f 0200 	mov.w	r2, #0
   1305a:	f04f 0300 	mov.w	r3, #0
   1305e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13062:	f004 fa3b 	bl	174dc <__aeabi_dmul>
   13066:	4602      	mov	r2, r0
   13068:	460b      	mov	r3, r1
   1306a:	4620      	mov	r0, r4
   1306c:	4629      	mov	r1, r5
   1306e:	f004 f883 	bl	17178 <__adddf3>
   13072:	4602      	mov	r2, r0
   13074:	460b      	mov	r3, r1
   13076:	4610      	mov	r0, r2
   13078:	4619      	mov	r1, r3
   1307a:	f004 fd11 	bl	17aa0 <__aeabi_d2f>
   1307e:	4606      	mov	r6, r0
   13080:	f243 0348 	movw	r3, #12360	; 0x3048
   13084:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13088:	681b      	ldr	r3, [r3, #0]
   1308a:	4618      	mov	r0, r3
   1308c:	f004 f9d2 	bl	17434 <__aeabi_f2d>
   13090:	4604      	mov	r4, r0
   13092:	460d      	mov	r5, r1
   13094:	69b8      	ldr	r0, [r7, #24]
   13096:	f004 f9cd 	bl	17434 <__aeabi_f2d>
   1309a:	4602      	mov	r2, r0
   1309c:	460b      	mov	r3, r1
   1309e:	4610      	mov	r0, r2
   130a0:	4619      	mov	r1, r3
   130a2:	f002 fa55 	bl	15550 <pp_sin>
   130a6:	4602      	mov	r2, r0
   130a8:	460b      	mov	r3, r1
   130aa:	4610      	mov	r0, r2
   130ac:	4619      	mov	r1, r3
   130ae:	f04f 0200 	mov.w	r2, #0
   130b2:	f04f 0300 	mov.w	r3, #0
   130b6:	f2c4 0349 	movt	r3, #16457	; 0x4049
   130ba:	f004 fa0f 	bl	174dc <__aeabi_dmul>
   130be:	4602      	mov	r2, r0
   130c0:	460b      	mov	r3, r1
   130c2:	4620      	mov	r0, r4
   130c4:	4629      	mov	r1, r5
   130c6:	f004 f857 	bl	17178 <__adddf3>
   130ca:	4602      	mov	r2, r0
   130cc:	460b      	mov	r3, r1
   130ce:	4610      	mov	r0, r2
   130d0:	4619      	mov	r1, r3
   130d2:	f004 fce5 	bl	17aa0 <__aeabi_d2f>
   130d6:	4603      	mov	r3, r0
   130d8:	4630      	mov	r0, r6
   130da:	4619      	mov	r1, r3
   130dc:	f001 f81c 	bl	14118 <fly_to_xy>
   130e0:	69b8      	ldr	r0, [r7, #24]
   130e2:	f004 f9a7 	bl	17434 <__aeabi_f2d>
   130e6:	4602      	mov	r2, r0
   130e8:	460b      	mov	r3, r1
   130ea:	a185      	add	r1, pc, #532	; (adr r1, 13300 <auto_nav+0x1570>)
   130ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   130f0:	f004 f840 	bl	17174 <__aeabi_dsub>
   130f4:	4602      	mov	r2, r0
   130f6:	460b      	mov	r3, r1
   130f8:	4610      	mov	r0, r2
   130fa:	4619      	mov	r1, r3
   130fc:	a382      	add	r3, pc, #520	; (adr r3, 13308 <auto_nav+0x1578>)
   130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   13102:	f004 fb15 	bl	17730 <__aeabi_ddiv>
   13106:	4602      	mov	r2, r0
   13108:	460b      	mov	r3, r1
   1310a:	4610      	mov	r0, r2
   1310c:	4619      	mov	r1, r3
   1310e:	f04f 0200 	mov.w	r2, #0
   13112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13116:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1311a:	f004 f9df 	bl	174dc <__aeabi_dmul>
   1311e:	4602      	mov	r2, r0
   13120:	460b      	mov	r3, r1
   13122:	4610      	mov	r0, r2
   13124:	4619      	mov	r1, r3
   13126:	f004 fcbb 	bl	17aa0 <__aeabi_d2f>
   1312a:	4602      	mov	r2, r0
   1312c:	f243 0314 	movw	r3, #12308	; 0x3014
   13130:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13134:	601a      	str	r2, [r3, #0]
   13136:	e012      	b.n	1315e <auto_nav+0x13ce>
   13138:	f243 0314 	movw	r3, #12308	; 0x3014
   1313c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13140:	681b      	ldr	r3, [r3, #0]
   13142:	4618      	mov	r0, r3
   13144:	f04f 0100 	mov.w	r1, #0
   13148:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1314c:	f004 fcfe 	bl	17b4c <__addsf3>
   13150:	4603      	mov	r3, r0
   13152:	461a      	mov	r2, r3
   13154:	f243 0314 	movw	r3, #12308	; 0x3014
   13158:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1315c:	601a      	str	r2, [r3, #0]
   1315e:	f243 0314 	movw	r3, #12308	; 0x3014
   13162:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13166:	681b      	ldr	r3, [r3, #0]
   13168:	4618      	mov	r0, r3
   1316a:	f04f 0100 	mov.w	r1, #0
   1316e:	f004 ff93 	bl	18098 <__aeabi_fcmplt>
   13172:	4603      	mov	r3, r0
   13174:	2b00      	cmp	r3, #0
   13176:	d1df      	bne.n	13138 <auto_nav+0x13a8>
   13178:	e012      	b.n	131a0 <auto_nav+0x1410>
   1317a:	f243 0314 	movw	r3, #12308	; 0x3014
   1317e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	4618      	mov	r0, r3
   13186:	f04f 0100 	mov.w	r1, #0
   1318a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1318e:	f004 fcdb 	bl	17b48 <__aeabi_fsub>
   13192:	4603      	mov	r3, r0
   13194:	461a      	mov	r2, r3
   13196:	f243 0314 	movw	r3, #12308	; 0x3014
   1319a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1319e:	601a      	str	r2, [r3, #0]
   131a0:	f243 0314 	movw	r3, #12308	; 0x3014
   131a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131a8:	681b      	ldr	r3, [r3, #0]
   131aa:	4618      	mov	r0, r3
   131ac:	f04f 0100 	mov.w	r1, #0
   131b0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   131b4:	f004 ff84 	bl	180c0 <__aeabi_fcmpge>
   131b8:	4603      	mov	r3, r0
   131ba:	2b00      	cmp	r3, #0
   131bc:	d1dd      	bne.n	1317a <auto_nav+0x13ea>
        return;
   131be:	f000 beb9 	b.w	13f34 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   131c2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   131c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131ca:	781b      	ldrb	r3, [r3, #0]
   131cc:	2b01      	cmp	r3, #1
   131ce:	f040 86b1 	bne.w	13f34 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   131d2:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   131d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131da:	2201      	movs	r2, #1
   131dc:	701a      	strb	r2, [r3, #0]
        NextBlock()
   131de:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   131e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131e6:	781b      	ldrb	r3, [r3, #0]
   131e8:	3301      	adds	r3, #1
   131ea:	b2da      	uxtb	r2, r3
   131ec:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   131f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131f4:	701a      	strb	r2, [r3, #0]
   131f6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   131fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   131fe:	2200      	movs	r2, #0
   13200:	701a      	strb	r2, [r3, #0]
   13202:	f243 030e 	movw	r3, #12302	; 0x300e
   13206:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1320a:	2200      	movs	r2, #0
   1320c:	801a      	strh	r2, [r3, #0]
   1320e:	f243 2354 	movw	r3, #12884	; 0x3254
   13212:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13216:	681a      	ldr	r2, [r3, #0]
   13218:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   1321c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13220:	601a      	str	r2, [r3, #0]
   13222:	f243 2358 	movw	r3, #12888	; 0x3258
   13226:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1322a:	681a      	ldr	r2, [r3, #0]
   1322c:	f243 0300 	movw	r3, #12288	; 0x3000
   13230:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13234:	601a      	str	r2, [r3, #0]
   13236:	f243 030c 	movw	r3, #12300	; 0x300c
   1323a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1323e:	2200      	movs	r2, #0
   13240:	801a      	strh	r2, [r3, #0]
   13242:	f243 0310 	movw	r3, #12304	; 0x3010
   13246:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1324a:	f04f 0200 	mov.w	r2, #0
   1324e:	601a      	str	r2, [r3, #0]
   13250:	f000 be70 	b.w	13f34 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13254:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13258:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1325c:	781b      	ldrb	r3, [r3, #0]
   1325e:	2b04      	cmp	r3, #4
   13260:	f040 8202 	bne.w	13668 <auto_nav+0x18d8>
{
    nav_block = 4;
   13264:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13268:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1326c:	2204      	movs	r2, #4
   1326e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13270:	f642 4388 	movw	r3, #11400	; 0x2c88
   13274:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13278:	781b      	ldrb	r3, [r3, #0]
   1327a:	2b00      	cmp	r3, #0
   1327c:	d007      	beq.n	1328e <auto_nav+0x14fe>
   1327e:	f642 4388 	movw	r3, #11400	; 0x2c88
   13282:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13286:	2200      	movs	r2, #0
   13288:	701a      	strb	r2, [r3, #0]
   1328a:	2301      	movs	r3, #1
   1328c:	e000      	b.n	13290 <auto_nav+0x1500>
   1328e:	2300      	movs	r3, #0
   13290:	2b00      	cmp	r3, #0
   13292:	d03d      	beq.n	13310 <auto_nav+0x1580>
   13294:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13298:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1329c:	2205      	movs	r2, #5
   1329e:	701a      	strb	r2, [r3, #0]
   132a0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   132a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132a8:	2200      	movs	r2, #0
   132aa:	701a      	strb	r2, [r3, #0]
   132ac:	f243 030e 	movw	r3, #12302	; 0x300e
   132b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132b4:	2200      	movs	r2, #0
   132b6:	801a      	strh	r2, [r3, #0]
   132b8:	f243 2354 	movw	r3, #12884	; 0x3254
   132bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132c0:	681a      	ldr	r2, [r3, #0]
   132c2:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   132c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132ca:	601a      	str	r2, [r3, #0]
   132cc:	f243 2358 	movw	r3, #12888	; 0x3258
   132d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132d4:	681a      	ldr	r2, [r3, #0]
   132d6:	f243 0300 	movw	r3, #12288	; 0x3000
   132da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132de:	601a      	str	r2, [r3, #0]
   132e0:	f243 030c 	movw	r3, #12300	; 0x300c
   132e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132e8:	2200      	movs	r2, #0
   132ea:	801a      	strh	r2, [r3, #0]
   132ec:	f243 0310 	movw	r3, #12304	; 0x3010
   132f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   132f4:	f04f 0200 	mov.w	r2, #0
   132f8:	601a      	str	r2, [r3, #0]
   132fa:	f000 be1b 	b.w	13f34 <auto_nav+0x21a4>
   132fe:	bf00      	nop
   13300:	54442d18 	.word	0x54442d18
   13304:	3ff921fb 	.word	0x3ff921fb
   13308:	54442d18 	.word	0x54442d18
   1330c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13310:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13314:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13318:	781b      	ldrb	r3, [r3, #0]
   1331a:	2b00      	cmp	r3, #0
   1331c:	f040 815b 	bne.w	135d6 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13320:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13324:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13328:	2200      	movs	r2, #0
   1332a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1332c:	f642 4387 	movw	r3, #11399	; 0x2c87
   13330:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13334:	2200      	movs	r2, #0
   13336:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13338:	f243 0324 	movw	r3, #12324	; 0x3024
   1333c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13340:	f04f 0200 	mov.w	r2, #0
   13344:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13346:	f642 4385 	movw	r3, #11397	; 0x2c85
   1334a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1334e:	2203      	movs	r2, #3
   13350:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13352:	f640 2358 	movw	r3, #2648	; 0xa58
   13356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1335a:	689a      	ldr	r2, [r3, #8]
   1335c:	f640 2354 	movw	r3, #2644	; 0xa54
   13360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13364:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13366:	f642 73ec 	movw	r3, #12268	; 0x2fec
   1336a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1336e:	f04f 0200 	mov.w	r2, #0
   13372:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13374:	f243 2358 	movw	r3, #12888	; 0x3258
   13378:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1337c:	681a      	ldr	r2, [r3, #0]
   1337e:	f640 2358 	movw	r3, #2648	; 0xa58
   13382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13386:	685b      	ldr	r3, [r3, #4]
   13388:	4610      	mov	r0, r2
   1338a:	4619      	mov	r1, r3
   1338c:	f004 fbdc 	bl	17b48 <__aeabi_fsub>
   13390:	4603      	mov	r3, r0
   13392:	4618      	mov	r0, r3
   13394:	f004 f84e 	bl	17434 <__aeabi_f2d>
   13398:	4604      	mov	r4, r0
   1339a:	460d      	mov	r5, r1
   1339c:	f243 2354 	movw	r3, #12884	; 0x3254
   133a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   133a4:	681a      	ldr	r2, [r3, #0]
   133a6:	f640 2358 	movw	r3, #2648	; 0xa58
   133aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	4610      	mov	r0, r2
   133b2:	4619      	mov	r1, r3
   133b4:	f004 fbc8 	bl	17b48 <__aeabi_fsub>
   133b8:	4603      	mov	r3, r0
   133ba:	4618      	mov	r0, r3
   133bc:	f004 f83a 	bl	17434 <__aeabi_f2d>
   133c0:	4602      	mov	r2, r0
   133c2:	460b      	mov	r3, r1
   133c4:	4620      	mov	r0, r4
   133c6:	4629      	mov	r1, r5
   133c8:	f002 f802 	bl	153d0 <pp_atan2>
   133cc:	4602      	mov	r2, r0
   133ce:	460b      	mov	r3, r1
   133d0:	4610      	mov	r0, r2
   133d2:	4619      	mov	r1, r3
   133d4:	f004 fb64 	bl	17aa0 <__aeabi_d2f>
   133d8:	4603      	mov	r3, r0
   133da:	617b      	str	r3, [r7, #20]
   133dc:	6978      	ldr	r0, [r7, #20]
   133de:	f004 f829 	bl	17434 <__aeabi_f2d>
   133e2:	4604      	mov	r4, r0
   133e4:	460d      	mov	r5, r1
   133e6:	f243 238c 	movw	r3, #12940	; 0x328c
   133ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   133ee:	681b      	ldr	r3, [r3, #0]
   133f0:	4618      	mov	r0, r3
   133f2:	f04f 0100 	mov.w	r1, #0
   133f6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   133fa:	f004 fcaf 	bl	17d5c <__aeabi_fmul>
   133fe:	4603      	mov	r3, r0
   13400:	4618      	mov	r0, r3
   13402:	f004 f817 	bl	17434 <__aeabi_f2d>
   13406:	4602      	mov	r2, r0
   13408:	460b      	mov	r3, r1
   1340a:	f04f 0000 	mov.w	r0, #0
   1340e:	f04f 0100 	mov.w	r1, #0
   13412:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13416:	f004 f98b 	bl	17730 <__aeabi_ddiv>
   1341a:	4602      	mov	r2, r0
   1341c:	460b      	mov	r3, r1
   1341e:	4620      	mov	r0, r4
   13420:	4629      	mov	r1, r5
   13422:	f003 fea9 	bl	17178 <__adddf3>
   13426:	4602      	mov	r2, r0
   13428:	460b      	mov	r3, r1
   1342a:	4610      	mov	r0, r2
   1342c:	4619      	mov	r1, r3
   1342e:	f004 fb37 	bl	17aa0 <__aeabi_d2f>
   13432:	4603      	mov	r3, r0
   13434:	613b      	str	r3, [r7, #16]
   13436:	f640 2358 	movw	r3, #2648	; 0xa58
   1343a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	4618      	mov	r0, r3
   13442:	f003 fff7 	bl	17434 <__aeabi_f2d>
   13446:	4604      	mov	r4, r0
   13448:	460d      	mov	r5, r1
   1344a:	6938      	ldr	r0, [r7, #16]
   1344c:	f003 fff2 	bl	17434 <__aeabi_f2d>
   13450:	4602      	mov	r2, r0
   13452:	460b      	mov	r3, r1
   13454:	4610      	mov	r0, r2
   13456:	4619      	mov	r1, r3
   13458:	a3af      	add	r3, pc, #700	; (adr r3, 13718 <auto_nav+0x1988>)
   1345a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1345e:	f003 fe8b 	bl	17178 <__adddf3>
   13462:	4602      	mov	r2, r0
   13464:	460b      	mov	r3, r1
   13466:	4610      	mov	r0, r2
   13468:	4619      	mov	r1, r3
   1346a:	f002 f871 	bl	15550 <pp_sin>
   1346e:	4602      	mov	r2, r0
   13470:	460b      	mov	r3, r1
   13472:	4610      	mov	r0, r2
   13474:	4619      	mov	r1, r3
   13476:	a3aa      	add	r3, pc, #680	; (adr r3, 13720 <auto_nav+0x1990>)
   13478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1347c:	f004 f82e 	bl	174dc <__aeabi_dmul>
   13480:	4602      	mov	r2, r0
   13482:	460b      	mov	r3, r1
   13484:	4620      	mov	r0, r4
   13486:	4629      	mov	r1, r5
   13488:	f003 fe76 	bl	17178 <__adddf3>
   1348c:	4602      	mov	r2, r0
   1348e:	460b      	mov	r3, r1
   13490:	4610      	mov	r0, r2
   13492:	4619      	mov	r1, r3
   13494:	f004 fb04 	bl	17aa0 <__aeabi_d2f>
   13498:	4606      	mov	r6, r0
   1349a:	f640 2358 	movw	r3, #2648	; 0xa58
   1349e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134a2:	685b      	ldr	r3, [r3, #4]
   134a4:	4618      	mov	r0, r3
   134a6:	f003 ffc5 	bl	17434 <__aeabi_f2d>
   134aa:	4604      	mov	r4, r0
   134ac:	460d      	mov	r5, r1
   134ae:	6938      	ldr	r0, [r7, #16]
   134b0:	f003 ffc0 	bl	17434 <__aeabi_f2d>
   134b4:	4602      	mov	r2, r0
   134b6:	460b      	mov	r3, r1
   134b8:	4610      	mov	r0, r2
   134ba:	4619      	mov	r1, r3
   134bc:	f002 f848 	bl	15550 <pp_sin>
   134c0:	4602      	mov	r2, r0
   134c2:	460b      	mov	r3, r1
   134c4:	4610      	mov	r0, r2
   134c6:	4619      	mov	r1, r3
   134c8:	a395      	add	r3, pc, #596	; (adr r3, 13720 <auto_nav+0x1990>)
   134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   134ce:	f004 f805 	bl	174dc <__aeabi_dmul>
   134d2:	4602      	mov	r2, r0
   134d4:	460b      	mov	r3, r1
   134d6:	4620      	mov	r0, r4
   134d8:	4629      	mov	r1, r5
   134da:	f003 fe4d 	bl	17178 <__adddf3>
   134de:	4602      	mov	r2, r0
   134e0:	460b      	mov	r3, r1
   134e2:	4610      	mov	r0, r2
   134e4:	4619      	mov	r1, r3
   134e6:	f004 fadb 	bl	17aa0 <__aeabi_d2f>
   134ea:	4603      	mov	r3, r0
   134ec:	4630      	mov	r0, r6
   134ee:	4619      	mov	r1, r3
   134f0:	f000 fe12 	bl	14118 <fly_to_xy>
   134f4:	6938      	ldr	r0, [r7, #16]
   134f6:	f003 ff9d 	bl	17434 <__aeabi_f2d>
   134fa:	4602      	mov	r2, r0
   134fc:	460b      	mov	r3, r1
   134fe:	a186      	add	r1, pc, #536	; (adr r1, 13718 <auto_nav+0x1988>)
   13500:	e9d1 0100 	ldrd	r0, r1, [r1]
   13504:	f003 fe36 	bl	17174 <__aeabi_dsub>
   13508:	4602      	mov	r2, r0
   1350a:	460b      	mov	r3, r1
   1350c:	4610      	mov	r0, r2
   1350e:	4619      	mov	r1, r3
   13510:	a385      	add	r3, pc, #532	; (adr r3, 13728 <auto_nav+0x1998>)
   13512:	e9d3 2300 	ldrd	r2, r3, [r3]
   13516:	f004 f90b 	bl	17730 <__aeabi_ddiv>
   1351a:	4602      	mov	r2, r0
   1351c:	460b      	mov	r3, r1
   1351e:	4610      	mov	r0, r2
   13520:	4619      	mov	r1, r3
   13522:	f04f 0200 	mov.w	r2, #0
   13526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1352a:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1352e:	f003 ffd5 	bl	174dc <__aeabi_dmul>
   13532:	4602      	mov	r2, r0
   13534:	460b      	mov	r3, r1
   13536:	4610      	mov	r0, r2
   13538:	4619      	mov	r1, r3
   1353a:	f004 fab1 	bl	17aa0 <__aeabi_d2f>
   1353e:	4602      	mov	r2, r0
   13540:	f243 0314 	movw	r3, #12308	; 0x3014
   13544:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13548:	601a      	str	r2, [r3, #0]
   1354a:	e012      	b.n	13572 <auto_nav+0x17e2>
   1354c:	f243 0314 	movw	r3, #12308	; 0x3014
   13550:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13554:	681b      	ldr	r3, [r3, #0]
   13556:	4618      	mov	r0, r3
   13558:	f04f 0100 	mov.w	r1, #0
   1355c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13560:	f004 faf4 	bl	17b4c <__addsf3>
   13564:	4603      	mov	r3, r0
   13566:	461a      	mov	r2, r3
   13568:	f243 0314 	movw	r3, #12308	; 0x3014
   1356c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13570:	601a      	str	r2, [r3, #0]
   13572:	f243 0314 	movw	r3, #12308	; 0x3014
   13576:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1357a:	681b      	ldr	r3, [r3, #0]
   1357c:	4618      	mov	r0, r3
   1357e:	f04f 0100 	mov.w	r1, #0
   13582:	f004 fd89 	bl	18098 <__aeabi_fcmplt>
   13586:	4603      	mov	r3, r0
   13588:	2b00      	cmp	r3, #0
   1358a:	d1df      	bne.n	1354c <auto_nav+0x17bc>
   1358c:	e012      	b.n	135b4 <auto_nav+0x1824>
   1358e:	f243 0314 	movw	r3, #12308	; 0x3014
   13592:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13596:	681b      	ldr	r3, [r3, #0]
   13598:	4618      	mov	r0, r3
   1359a:	f04f 0100 	mov.w	r1, #0
   1359e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   135a2:	f004 fad1 	bl	17b48 <__aeabi_fsub>
   135a6:	4603      	mov	r3, r0
   135a8:	461a      	mov	r2, r3
   135aa:	f243 0314 	movw	r3, #12308	; 0x3014
   135ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   135b2:	601a      	str	r2, [r3, #0]
   135b4:	f243 0314 	movw	r3, #12308	; 0x3014
   135b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   135bc:	681b      	ldr	r3, [r3, #0]
   135be:	4618      	mov	r0, r3
   135c0:	f04f 0100 	mov.w	r1, #0
   135c4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   135c8:	f004 fd7a 	bl	180c0 <__aeabi_fcmpge>
   135cc:	4603      	mov	r3, r0
   135ce:	2b00      	cmp	r3, #0
   135d0:	d1dd      	bne.n	1358e <auto_nav+0x17fe>
        return;
   135d2:	f000 bcaf 	b.w	13f34 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   135d6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   135da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   135de:	781b      	ldrb	r3, [r3, #0]
   135e0:	2b01      	cmp	r3, #1
   135e2:	f040 84a7 	bne.w	13f34 <auto_nav+0x21a4>
    {
        nav_stage =1;
   135e6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   135ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   135ee:	2201      	movs	r2, #1
   135f0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   135f2:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   135f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   135fa:	781b      	ldrb	r3, [r3, #0]
   135fc:	3301      	adds	r3, #1
   135fe:	b2da      	uxtb	r2, r3
   13600:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13604:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13608:	701a      	strb	r2, [r3, #0]
   1360a:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1360e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13612:	2200      	movs	r2, #0
   13614:	701a      	strb	r2, [r3, #0]
   13616:	f243 030e 	movw	r3, #12302	; 0x300e
   1361a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1361e:	2200      	movs	r2, #0
   13620:	801a      	strh	r2, [r3, #0]
   13622:	f243 2354 	movw	r3, #12884	; 0x3254
   13626:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1362a:	681a      	ldr	r2, [r3, #0]
   1362c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   13630:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13634:	601a      	str	r2, [r3, #0]
   13636:	f243 2358 	movw	r3, #12888	; 0x3258
   1363a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1363e:	681a      	ldr	r2, [r3, #0]
   13640:	f243 0300 	movw	r3, #12288	; 0x3000
   13644:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13648:	601a      	str	r2, [r3, #0]
   1364a:	f243 030c 	movw	r3, #12300	; 0x300c
   1364e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13652:	2200      	movs	r2, #0
   13654:	801a      	strh	r2, [r3, #0]
   13656:	f243 0310 	movw	r3, #12304	; 0x3010
   1365a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1365e:	f04f 0200 	mov.w	r2, #0
   13662:	601a      	str	r2, [r3, #0]
   13664:	f000 bc66 	b.w	13f34 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13668:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1366c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13670:	781b      	ldrb	r3, [r3, #0]
   13672:	2b05      	cmp	r3, #5
   13674:	f040 845e 	bne.w	13f34 <auto_nav+0x21a4>
{
    nav_block = 5;
   13678:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   1367c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13680:	2205      	movs	r2, #5
   13682:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13684:	f642 4388 	movw	r3, #11400	; 0x2c88
   13688:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1368c:	781b      	ldrb	r3, [r3, #0]
   1368e:	2b00      	cmp	r3, #0
   13690:	d007      	beq.n	136a2 <auto_nav+0x1912>
   13692:	f642 4388 	movw	r3, #11400	; 0x2c88
   13696:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1369a:	2200      	movs	r2, #0
   1369c:	701a      	strb	r2, [r3, #0]
   1369e:	2301      	movs	r3, #1
   136a0:	e000      	b.n	136a4 <auto_nav+0x1914>
   136a2:	2300      	movs	r3, #0
   136a4:	2b00      	cmp	r3, #0
   136a6:	d043      	beq.n	13730 <auto_nav+0x19a0>
   136a8:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   136ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136b0:	2201      	movs	r2, #1
   136b2:	701a      	strb	r2, [r3, #0]
   136b4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   136b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136bc:	2200      	movs	r2, #0
   136be:	701a      	strb	r2, [r3, #0]
   136c0:	f243 030e 	movw	r3, #12302	; 0x300e
   136c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136c8:	2200      	movs	r2, #0
   136ca:	801a      	strh	r2, [r3, #0]
   136cc:	f243 2354 	movw	r3, #12884	; 0x3254
   136d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136d4:	681a      	ldr	r2, [r3, #0]
   136d6:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   136da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136de:	601a      	str	r2, [r3, #0]
   136e0:	f243 2358 	movw	r3, #12888	; 0x3258
   136e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136e8:	681a      	ldr	r2, [r3, #0]
   136ea:	f243 0300 	movw	r3, #12288	; 0x3000
   136ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136f2:	601a      	str	r2, [r3, #0]
   136f4:	f243 030c 	movw	r3, #12300	; 0x300c
   136f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   136fc:	2200      	movs	r2, #0
   136fe:	801a      	strh	r2, [r3, #0]
   13700:	f243 0310 	movw	r3, #12304	; 0x3010
   13704:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13708:	f04f 0200 	mov.w	r2, #0
   1370c:	601a      	str	r2, [r3, #0]
   1370e:	f000 bc11 	b.w	13f34 <auto_nav+0x21a4>
   13712:	bf00      	nop
   13714:	f3af 8000 	nop.w
   13718:	54442d18 	.word	0x54442d18
   1371c:	3ff921fb 	.word	0x3ff921fb
   13720:	00000000 	.word	0x00000000
   13724:	4062c000 	.word	0x4062c000
   13728:	54442d18 	.word	0x54442d18
   1372c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13730:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13734:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13738:	781b      	ldrb	r3, [r3, #0]
   1373a:	2b00      	cmp	r3, #0
   1373c:	d133      	bne.n	137a6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   1373e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13742:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13746:	2200      	movs	r2, #0
   13748:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   1374a:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1374e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	3301      	adds	r3, #1
   13756:	b2da      	uxtb	r2, r3
   13758:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   1375c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13760:	701a      	strb	r2, [r3, #0]
   13762:	f243 2354 	movw	r3, #12884	; 0x3254
   13766:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1376a:	681a      	ldr	r2, [r3, #0]
   1376c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   13770:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13774:	601a      	str	r2, [r3, #0]
   13776:	f243 2358 	movw	r3, #12888	; 0x3258
   1377a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1377e:	681a      	ldr	r2, [r3, #0]
   13780:	f243 0300 	movw	r3, #12288	; 0x3000
   13784:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13788:	601a      	str	r2, [r3, #0]
   1378a:	f243 030c 	movw	r3, #12300	; 0x300c
   1378e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13792:	2200      	movs	r2, #0
   13794:	801a      	strh	r2, [r3, #0]
   13796:	f243 0310 	movw	r3, #12304	; 0x3010
   1379a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1379e:	f04f 0200 	mov.w	r2, #0
   137a2:	601a      	str	r2, [r3, #0]
   137a4:	e3c6      	b.n	13f34 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   137a6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   137aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   137ae:	781b      	ldrb	r3, [r3, #0]
   137b0:	2b01      	cmp	r3, #1
   137b2:	f040 81b5 	bne.w	13b20 <auto_nav+0x1d90>
    {
        nav_stage =1;
   137b6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   137ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   137be:	2201      	movs	r2, #1
   137c0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   137c2:	f642 4387 	movw	r3, #11399	; 0x2c87
   137c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   137ca:	2200      	movs	r2, #0
   137cc:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   137ce:	f243 0324 	movw	r3, #12324	; 0x3024
   137d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   137d6:	f04f 0200 	mov.w	r2, #0
   137da:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   137dc:	f642 4385 	movw	r3, #11397	; 0x2c85
   137e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   137e4:	2203      	movs	r2, #3
   137e6:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   137e8:	f640 2358 	movw	r3, #2648	; 0xa58
   137ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f0:	695a      	ldr	r2, [r3, #20]
   137f2:	f640 2354 	movw	r3, #2644	; 0xa54
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   137fc:	f642 73ec 	movw	r3, #12268	; 0x2fec
   13800:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13804:	f04f 0200 	mov.w	r2, #0
   13808:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   1380a:	f243 2358 	movw	r3, #12888	; 0x3258
   1380e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13812:	681a      	ldr	r2, [r3, #0]
   13814:	f640 2358 	movw	r3, #2648	; 0xa58
   13818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1381c:	691b      	ldr	r3, [r3, #16]
   1381e:	4610      	mov	r0, r2
   13820:	4619      	mov	r1, r3
   13822:	f004 f991 	bl	17b48 <__aeabi_fsub>
   13826:	4603      	mov	r3, r0
   13828:	4618      	mov	r0, r3
   1382a:	f003 fe03 	bl	17434 <__aeabi_f2d>
   1382e:	4604      	mov	r4, r0
   13830:	460d      	mov	r5, r1
   13832:	f243 2354 	movw	r3, #12884	; 0x3254
   13836:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1383a:	681a      	ldr	r2, [r3, #0]
   1383c:	f640 2358 	movw	r3, #2648	; 0xa58
   13840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13844:	68db      	ldr	r3, [r3, #12]
   13846:	4610      	mov	r0, r2
   13848:	4619      	mov	r1, r3
   1384a:	f004 f97d 	bl	17b48 <__aeabi_fsub>
   1384e:	4603      	mov	r3, r0
   13850:	4618      	mov	r0, r3
   13852:	f003 fdef 	bl	17434 <__aeabi_f2d>
   13856:	4602      	mov	r2, r0
   13858:	460b      	mov	r3, r1
   1385a:	4620      	mov	r0, r4
   1385c:	4629      	mov	r1, r5
   1385e:	f001 fdb7 	bl	153d0 <pp_atan2>
   13862:	4602      	mov	r2, r0
   13864:	460b      	mov	r3, r1
   13866:	4610      	mov	r0, r2
   13868:	4619      	mov	r1, r3
   1386a:	f004 f919 	bl	17aa0 <__aeabi_d2f>
   1386e:	4603      	mov	r3, r0
   13870:	60fb      	str	r3, [r7, #12]
   13872:	68f8      	ldr	r0, [r7, #12]
   13874:	f003 fdde 	bl	17434 <__aeabi_f2d>
   13878:	4604      	mov	r4, r0
   1387a:	460d      	mov	r5, r1
   1387c:	f243 238c 	movw	r3, #12940	; 0x328c
   13880:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13884:	681b      	ldr	r3, [r3, #0]
   13886:	4618      	mov	r0, r3
   13888:	f04f 0100 	mov.w	r1, #0
   1388c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13890:	f004 fa64 	bl	17d5c <__aeabi_fmul>
   13894:	4603      	mov	r3, r0
   13896:	4618      	mov	r0, r3
   13898:	f003 fdcc 	bl	17434 <__aeabi_f2d>
   1389c:	4602      	mov	r2, r0
   1389e:	460b      	mov	r3, r1
   138a0:	f04f 0000 	mov.w	r0, #0
   138a4:	f04f 0100 	mov.w	r1, #0
   138a8:	f2c4 0114 	movt	r1, #16404	; 0x4014
   138ac:	f003 ff40 	bl	17730 <__aeabi_ddiv>
   138b0:	4602      	mov	r2, r0
   138b2:	460b      	mov	r3, r1
   138b4:	4620      	mov	r0, r4
   138b6:	4629      	mov	r1, r5
   138b8:	f003 fc5e 	bl	17178 <__adddf3>
   138bc:	4602      	mov	r2, r0
   138be:	460b      	mov	r3, r1
   138c0:	4610      	mov	r0, r2
   138c2:	4619      	mov	r1, r3
   138c4:	f004 f8ec 	bl	17aa0 <__aeabi_d2f>
   138c8:	4603      	mov	r3, r0
   138ca:	60bb      	str	r3, [r7, #8]
   138cc:	f640 2358 	movw	r3, #2648	; 0xa58
   138d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138d4:	68db      	ldr	r3, [r3, #12]
   138d6:	4618      	mov	r0, r3
   138d8:	f003 fdac 	bl	17434 <__aeabi_f2d>
   138dc:	4604      	mov	r4, r0
   138de:	460d      	mov	r5, r1
   138e0:	68b8      	ldr	r0, [r7, #8]
   138e2:	f003 fda7 	bl	17434 <__aeabi_f2d>
   138e6:	4602      	mov	r2, r0
   138e8:	460b      	mov	r3, r1
   138ea:	4610      	mov	r0, r2
   138ec:	4619      	mov	r1, r3
   138ee:	a388      	add	r3, pc, #544	; (adr r3, 13b10 <auto_nav+0x1d80>)
   138f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   138f4:	f003 fc40 	bl	17178 <__adddf3>
   138f8:	4602      	mov	r2, r0
   138fa:	460b      	mov	r3, r1
   138fc:	4610      	mov	r0, r2
   138fe:	4619      	mov	r1, r3
   13900:	f001 fe26 	bl	15550 <pp_sin>
   13904:	4602      	mov	r2, r0
   13906:	460b      	mov	r3, r1
   13908:	4610      	mov	r0, r2
   1390a:	4619      	mov	r1, r3
   1390c:	f04f 0200 	mov.w	r2, #0
   13910:	f04f 0300 	mov.w	r3, #0
   13914:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13918:	f003 fde0 	bl	174dc <__aeabi_dmul>
   1391c:	4602      	mov	r2, r0
   1391e:	460b      	mov	r3, r1
   13920:	4620      	mov	r0, r4
   13922:	4629      	mov	r1, r5
   13924:	f003 fc28 	bl	17178 <__adddf3>
   13928:	4602      	mov	r2, r0
   1392a:	460b      	mov	r3, r1
   1392c:	4610      	mov	r0, r2
   1392e:	4619      	mov	r1, r3
   13930:	f004 f8b6 	bl	17aa0 <__aeabi_d2f>
   13934:	4606      	mov	r6, r0
   13936:	f640 2358 	movw	r3, #2648	; 0xa58
   1393a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1393e:	691b      	ldr	r3, [r3, #16]
   13940:	4618      	mov	r0, r3
   13942:	f003 fd77 	bl	17434 <__aeabi_f2d>
   13946:	4604      	mov	r4, r0
   13948:	460d      	mov	r5, r1
   1394a:	68b8      	ldr	r0, [r7, #8]
   1394c:	f003 fd72 	bl	17434 <__aeabi_f2d>
   13950:	4602      	mov	r2, r0
   13952:	460b      	mov	r3, r1
   13954:	4610      	mov	r0, r2
   13956:	4619      	mov	r1, r3
   13958:	f001 fdfa 	bl	15550 <pp_sin>
   1395c:	4602      	mov	r2, r0
   1395e:	460b      	mov	r3, r1
   13960:	4610      	mov	r0, r2
   13962:	4619      	mov	r1, r3
   13964:	f04f 0200 	mov.w	r2, #0
   13968:	f04f 0300 	mov.w	r3, #0
   1396c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13970:	f003 fdb4 	bl	174dc <__aeabi_dmul>
   13974:	4602      	mov	r2, r0
   13976:	460b      	mov	r3, r1
   13978:	4620      	mov	r0, r4
   1397a:	4629      	mov	r1, r5
   1397c:	f003 fbfc 	bl	17178 <__adddf3>
   13980:	4602      	mov	r2, r0
   13982:	460b      	mov	r3, r1
   13984:	4610      	mov	r0, r2
   13986:	4619      	mov	r1, r3
   13988:	f004 f88a 	bl	17aa0 <__aeabi_d2f>
   1398c:	4603      	mov	r3, r0
   1398e:	4630      	mov	r0, r6
   13990:	4619      	mov	r1, r3
   13992:	f000 fbc1 	bl	14118 <fly_to_xy>
   13996:	68b8      	ldr	r0, [r7, #8]
   13998:	f003 fd4c 	bl	17434 <__aeabi_f2d>
   1399c:	4602      	mov	r2, r0
   1399e:	460b      	mov	r3, r1
   139a0:	a15b      	add	r1, pc, #364	; (adr r1, 13b10 <auto_nav+0x1d80>)
   139a2:	e9d1 0100 	ldrd	r0, r1, [r1]
   139a6:	f003 fbe5 	bl	17174 <__aeabi_dsub>
   139aa:	4602      	mov	r2, r0
   139ac:	460b      	mov	r3, r1
   139ae:	4610      	mov	r0, r2
   139b0:	4619      	mov	r1, r3
   139b2:	a359      	add	r3, pc, #356	; (adr r3, 13b18 <auto_nav+0x1d88>)
   139b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   139b8:	f003 feba 	bl	17730 <__aeabi_ddiv>
   139bc:	4602      	mov	r2, r0
   139be:	460b      	mov	r3, r1
   139c0:	4610      	mov	r0, r2
   139c2:	4619      	mov	r1, r3
   139c4:	f04f 0200 	mov.w	r2, #0
   139c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139cc:	f2c4 0366 	movt	r3, #16486	; 0x4066
   139d0:	f003 fd84 	bl	174dc <__aeabi_dmul>
   139d4:	4602      	mov	r2, r0
   139d6:	460b      	mov	r3, r1
   139d8:	4610      	mov	r0, r2
   139da:	4619      	mov	r1, r3
   139dc:	f004 f860 	bl	17aa0 <__aeabi_d2f>
   139e0:	4602      	mov	r2, r0
   139e2:	f243 0314 	movw	r3, #12308	; 0x3014
   139e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   139ea:	601a      	str	r2, [r3, #0]
   139ec:	e012      	b.n	13a14 <auto_nav+0x1c84>
   139ee:	f243 0314 	movw	r3, #12308	; 0x3014
   139f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   139f6:	681b      	ldr	r3, [r3, #0]
   139f8:	4618      	mov	r0, r3
   139fa:	f04f 0100 	mov.w	r1, #0
   139fe:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a02:	f004 f8a3 	bl	17b4c <__addsf3>
   13a06:	4603      	mov	r3, r0
   13a08:	461a      	mov	r2, r3
   13a0a:	f243 0314 	movw	r3, #12308	; 0x3014
   13a0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a12:	601a      	str	r2, [r3, #0]
   13a14:	f243 0314 	movw	r3, #12308	; 0x3014
   13a18:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a1c:	681b      	ldr	r3, [r3, #0]
   13a1e:	4618      	mov	r0, r3
   13a20:	f04f 0100 	mov.w	r1, #0
   13a24:	f004 fb38 	bl	18098 <__aeabi_fcmplt>
   13a28:	4603      	mov	r3, r0
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	d1df      	bne.n	139ee <auto_nav+0x1c5e>
   13a2e:	e012      	b.n	13a56 <auto_nav+0x1cc6>
   13a30:	f243 0314 	movw	r3, #12308	; 0x3014
   13a34:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a38:	681b      	ldr	r3, [r3, #0]
   13a3a:	4618      	mov	r0, r3
   13a3c:	f04f 0100 	mov.w	r1, #0
   13a40:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a44:	f004 f880 	bl	17b48 <__aeabi_fsub>
   13a48:	4603      	mov	r3, r0
   13a4a:	461a      	mov	r2, r3
   13a4c:	f243 0314 	movw	r3, #12308	; 0x3014
   13a50:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a54:	601a      	str	r2, [r3, #0]
   13a56:	f243 0314 	movw	r3, #12308	; 0x3014
   13a5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a5e:	681b      	ldr	r3, [r3, #0]
   13a60:	4618      	mov	r0, r3
   13a62:	f04f 0100 	mov.w	r1, #0
   13a66:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a6a:	f004 fb29 	bl	180c0 <__aeabi_fcmpge>
   13a6e:	4603      	mov	r3, r0
   13a70:	2b00      	cmp	r3, #0
   13a72:	d1dd      	bne.n	13a30 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13a74:	f243 0314 	movw	r3, #12308	; 0x3014
   13a78:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a7c:	681b      	ldr	r3, [r3, #0]
   13a7e:	4618      	mov	r0, r3
   13a80:	f04f 0100 	mov.w	r1, #0
   13a84:	f004 fb26 	bl	180d4 <__aeabi_fcmpgt>
   13a88:	4603      	mov	r3, r0
   13a8a:	2b00      	cmp	r3, #0
   13a8c:	d100      	bne.n	13a90 <auto_nav+0x1d00>
        return;
   13a8e:	e251      	b.n	13f34 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13a90:	f243 0314 	movw	r3, #12308	; 0x3014
   13a94:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13a98:	681b      	ldr	r3, [r3, #0]
   13a9a:	4618      	mov	r0, r3
   13a9c:	f04f 0100 	mov.w	r1, #0
   13aa0:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13aa4:	f004 faf8 	bl	18098 <__aeabi_fcmplt>
   13aa8:	4603      	mov	r3, r0
   13aaa:	2b00      	cmp	r3, #0
   13aac:	d100      	bne.n	13ab0 <auto_nav+0x1d20>
        return;
   13aae:	e241      	b.n	13f34 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13ab0:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13ab4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ab8:	781b      	ldrb	r3, [r3, #0]
   13aba:	3301      	adds	r3, #1
   13abc:	b2da      	uxtb	r2, r3
   13abe:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13ac2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ac6:	701a      	strb	r2, [r3, #0]
   13ac8:	f243 2354 	movw	r3, #12884	; 0x3254
   13acc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ad0:	681a      	ldr	r2, [r3, #0]
   13ad2:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   13ad6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ada:	601a      	str	r2, [r3, #0]
   13adc:	f243 2358 	movw	r3, #12888	; 0x3258
   13ae0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ae4:	681a      	ldr	r2, [r3, #0]
   13ae6:	f243 0300 	movw	r3, #12288	; 0x3000
   13aea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13aee:	601a      	str	r2, [r3, #0]
   13af0:	f243 030c 	movw	r3, #12300	; 0x300c
   13af4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13af8:	2200      	movs	r2, #0
   13afa:	801a      	strh	r2, [r3, #0]
   13afc:	f243 0310 	movw	r3, #12304	; 0x3010
   13b00:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b04:	f04f 0200 	mov.w	r2, #0
   13b08:	601a      	str	r2, [r3, #0]
   13b0a:	e213      	b.n	13f34 <auto_nav+0x21a4>
   13b0c:	f3af 8000 	nop.w
   13b10:	54442d18 	.word	0x54442d18
   13b14:	3ff921fb 	.word	0x3ff921fb
   13b18:	54442d18 	.word	0x54442d18
   13b1c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13b20:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13b24:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	2b02      	cmp	r3, #2
   13b2c:	f040 81ad 	bne.w	13e8a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13b30:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13b34:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b38:	2202      	movs	r2, #2
   13b3a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13b3c:	f642 4387 	movw	r3, #11399	; 0x2c87
   13b40:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b44:	2200      	movs	r2, #0
   13b46:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13b48:	f243 0324 	movw	r3, #12324	; 0x3024
   13b4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b50:	f04f 0200 	mov.w	r2, #0
   13b54:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b56:	f642 4385 	movw	r3, #11397	; 0x2c85
   13b5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b5e:	2203      	movs	r2, #3
   13b60:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13b62:	f640 2358 	movw	r3, #2648	; 0xa58
   13b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13b6c:	f640 2354 	movw	r3, #2644	; 0xa54
   13b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b74:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13b76:	f642 73ec 	movw	r3, #12268	; 0x2fec
   13b7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b7e:	f04f 0200 	mov.w	r2, #0
   13b82:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13b84:	f243 2358 	movw	r3, #12888	; 0x3258
   13b88:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13b8c:	681a      	ldr	r2, [r3, #0]
   13b8e:	f640 2358 	movw	r3, #2648	; 0xa58
   13b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13b98:	4610      	mov	r0, r2
   13b9a:	4619      	mov	r1, r3
   13b9c:	f003 ffd4 	bl	17b48 <__aeabi_fsub>
   13ba0:	4603      	mov	r3, r0
   13ba2:	4618      	mov	r0, r3
   13ba4:	f003 fc46 	bl	17434 <__aeabi_f2d>
   13ba8:	4604      	mov	r4, r0
   13baa:	460d      	mov	r5, r1
   13bac:	f243 2354 	movw	r3, #12884	; 0x3254
   13bb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13bb4:	681a      	ldr	r2, [r3, #0]
   13bb6:	f640 2358 	movw	r3, #2648	; 0xa58
   13bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13bc0:	4610      	mov	r0, r2
   13bc2:	4619      	mov	r1, r3
   13bc4:	f003 ffc0 	bl	17b48 <__aeabi_fsub>
   13bc8:	4603      	mov	r3, r0
   13bca:	4618      	mov	r0, r3
   13bcc:	f003 fc32 	bl	17434 <__aeabi_f2d>
   13bd0:	4602      	mov	r2, r0
   13bd2:	460b      	mov	r3, r1
   13bd4:	4620      	mov	r0, r4
   13bd6:	4629      	mov	r1, r5
   13bd8:	f001 fbfa 	bl	153d0 <pp_atan2>
   13bdc:	4602      	mov	r2, r0
   13bde:	460b      	mov	r3, r1
   13be0:	4610      	mov	r0, r2
   13be2:	4619      	mov	r1, r3
   13be4:	f003 ff5c 	bl	17aa0 <__aeabi_d2f>
   13be8:	4603      	mov	r3, r0
   13bea:	607b      	str	r3, [r7, #4]
   13bec:	6878      	ldr	r0, [r7, #4]
   13bee:	f003 fc21 	bl	17434 <__aeabi_f2d>
   13bf2:	4604      	mov	r4, r0
   13bf4:	460d      	mov	r5, r1
   13bf6:	f243 238c 	movw	r3, #12940	; 0x328c
   13bfa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13bfe:	681b      	ldr	r3, [r3, #0]
   13c00:	4618      	mov	r0, r3
   13c02:	f04f 0100 	mov.w	r1, #0
   13c06:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13c0a:	f004 f8a7 	bl	17d5c <__aeabi_fmul>
   13c0e:	4603      	mov	r3, r0
   13c10:	4618      	mov	r0, r3
   13c12:	f003 fc0f 	bl	17434 <__aeabi_f2d>
   13c16:	4602      	mov	r2, r0
   13c18:	460b      	mov	r3, r1
   13c1a:	f04f 0000 	mov.w	r0, #0
   13c1e:	f04f 0100 	mov.w	r1, #0
   13c22:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c26:	f003 fd83 	bl	17730 <__aeabi_ddiv>
   13c2a:	4602      	mov	r2, r0
   13c2c:	460b      	mov	r3, r1
   13c2e:	4620      	mov	r0, r4
   13c30:	4629      	mov	r1, r5
   13c32:	f003 faa1 	bl	17178 <__adddf3>
   13c36:	4602      	mov	r2, r0
   13c38:	460b      	mov	r3, r1
   13c3a:	4610      	mov	r0, r2
   13c3c:	4619      	mov	r1, r3
   13c3e:	f003 ff2f 	bl	17aa0 <__aeabi_d2f>
   13c42:	4603      	mov	r3, r0
   13c44:	603b      	str	r3, [r7, #0]
   13c46:	f640 2358 	movw	r3, #2648	; 0xa58
   13c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13c50:	4618      	mov	r0, r3
   13c52:	f003 fbef 	bl	17434 <__aeabi_f2d>
   13c56:	4604      	mov	r4, r0
   13c58:	460d      	mov	r5, r1
   13c5a:	6838      	ldr	r0, [r7, #0]
   13c5c:	f003 fbea 	bl	17434 <__aeabi_f2d>
   13c60:	4602      	mov	r2, r0
   13c62:	460b      	mov	r3, r1
   13c64:	4610      	mov	r0, r2
   13c66:	4619      	mov	r1, r3
   13c68:	a3b5      	add	r3, pc, #724	; (adr r3, 13f40 <auto_nav+0x21b0>)
   13c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c6e:	f003 fa83 	bl	17178 <__adddf3>
   13c72:	4602      	mov	r2, r0
   13c74:	460b      	mov	r3, r1
   13c76:	4610      	mov	r0, r2
   13c78:	4619      	mov	r1, r3
   13c7a:	f001 fc69 	bl	15550 <pp_sin>
   13c7e:	4602      	mov	r2, r0
   13c80:	460b      	mov	r3, r1
   13c82:	4610      	mov	r0, r2
   13c84:	4619      	mov	r1, r3
   13c86:	f04f 0200 	mov.w	r2, #0
   13c8a:	f04f 0300 	mov.w	r3, #0
   13c8e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13c92:	f003 fc23 	bl	174dc <__aeabi_dmul>
   13c96:	4602      	mov	r2, r0
   13c98:	460b      	mov	r3, r1
   13c9a:	4620      	mov	r0, r4
   13c9c:	4629      	mov	r1, r5
   13c9e:	f003 fa6b 	bl	17178 <__adddf3>
   13ca2:	4602      	mov	r2, r0
   13ca4:	460b      	mov	r3, r1
   13ca6:	4610      	mov	r0, r2
   13ca8:	4619      	mov	r1, r3
   13caa:	f003 fef9 	bl	17aa0 <__aeabi_d2f>
   13cae:	4606      	mov	r6, r0
   13cb0:	f640 2358 	movw	r3, #2648	; 0xa58
   13cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13cba:	4618      	mov	r0, r3
   13cbc:	f003 fbba 	bl	17434 <__aeabi_f2d>
   13cc0:	4604      	mov	r4, r0
   13cc2:	460d      	mov	r5, r1
   13cc4:	6838      	ldr	r0, [r7, #0]
   13cc6:	f003 fbb5 	bl	17434 <__aeabi_f2d>
   13cca:	4602      	mov	r2, r0
   13ccc:	460b      	mov	r3, r1
   13cce:	4610      	mov	r0, r2
   13cd0:	4619      	mov	r1, r3
   13cd2:	f001 fc3d 	bl	15550 <pp_sin>
   13cd6:	4602      	mov	r2, r0
   13cd8:	460b      	mov	r3, r1
   13cda:	4610      	mov	r0, r2
   13cdc:	4619      	mov	r1, r3
   13cde:	f04f 0200 	mov.w	r2, #0
   13ce2:	f04f 0300 	mov.w	r3, #0
   13ce6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13cea:	f003 fbf7 	bl	174dc <__aeabi_dmul>
   13cee:	4602      	mov	r2, r0
   13cf0:	460b      	mov	r3, r1
   13cf2:	4620      	mov	r0, r4
   13cf4:	4629      	mov	r1, r5
   13cf6:	f003 fa3f 	bl	17178 <__adddf3>
   13cfa:	4602      	mov	r2, r0
   13cfc:	460b      	mov	r3, r1
   13cfe:	4610      	mov	r0, r2
   13d00:	4619      	mov	r1, r3
   13d02:	f003 fecd 	bl	17aa0 <__aeabi_d2f>
   13d06:	4603      	mov	r3, r0
   13d08:	4630      	mov	r0, r6
   13d0a:	4619      	mov	r1, r3
   13d0c:	f000 fa04 	bl	14118 <fly_to_xy>
   13d10:	6838      	ldr	r0, [r7, #0]
   13d12:	f003 fb8f 	bl	17434 <__aeabi_f2d>
   13d16:	4602      	mov	r2, r0
   13d18:	460b      	mov	r3, r1
   13d1a:	a189      	add	r1, pc, #548	; (adr r1, 13f40 <auto_nav+0x21b0>)
   13d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d20:	f003 fa28 	bl	17174 <__aeabi_dsub>
   13d24:	4602      	mov	r2, r0
   13d26:	460b      	mov	r3, r1
   13d28:	4610      	mov	r0, r2
   13d2a:	4619      	mov	r1, r3
   13d2c:	a386      	add	r3, pc, #536	; (adr r3, 13f48 <auto_nav+0x21b8>)
   13d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d32:	f003 fcfd 	bl	17730 <__aeabi_ddiv>
   13d36:	4602      	mov	r2, r0
   13d38:	460b      	mov	r3, r1
   13d3a:	4610      	mov	r0, r2
   13d3c:	4619      	mov	r1, r3
   13d3e:	f04f 0200 	mov.w	r2, #0
   13d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d46:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d4a:	f003 fbc7 	bl	174dc <__aeabi_dmul>
   13d4e:	4602      	mov	r2, r0
   13d50:	460b      	mov	r3, r1
   13d52:	4610      	mov	r0, r2
   13d54:	4619      	mov	r1, r3
   13d56:	f003 fea3 	bl	17aa0 <__aeabi_d2f>
   13d5a:	4602      	mov	r2, r0
   13d5c:	f243 0314 	movw	r3, #12308	; 0x3014
   13d60:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13d64:	601a      	str	r2, [r3, #0]
   13d66:	e012      	b.n	13d8e <auto_nav+0x1ffe>
   13d68:	f243 0314 	movw	r3, #12308	; 0x3014
   13d6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13d70:	681b      	ldr	r3, [r3, #0]
   13d72:	4618      	mov	r0, r3
   13d74:	f04f 0100 	mov.w	r1, #0
   13d78:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d7c:	f003 fee6 	bl	17b4c <__addsf3>
   13d80:	4603      	mov	r3, r0
   13d82:	461a      	mov	r2, r3
   13d84:	f243 0314 	movw	r3, #12308	; 0x3014
   13d88:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13d8c:	601a      	str	r2, [r3, #0]
   13d8e:	f243 0314 	movw	r3, #12308	; 0x3014
   13d92:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13d96:	681b      	ldr	r3, [r3, #0]
   13d98:	4618      	mov	r0, r3
   13d9a:	f04f 0100 	mov.w	r1, #0
   13d9e:	f004 f97b 	bl	18098 <__aeabi_fcmplt>
   13da2:	4603      	mov	r3, r0
   13da4:	2b00      	cmp	r3, #0
   13da6:	d1df      	bne.n	13d68 <auto_nav+0x1fd8>
   13da8:	e012      	b.n	13dd0 <auto_nav+0x2040>
   13daa:	f243 0314 	movw	r3, #12308	; 0x3014
   13dae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13db2:	681b      	ldr	r3, [r3, #0]
   13db4:	4618      	mov	r0, r3
   13db6:	f04f 0100 	mov.w	r1, #0
   13dba:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13dbe:	f003 fec3 	bl	17b48 <__aeabi_fsub>
   13dc2:	4603      	mov	r3, r0
   13dc4:	461a      	mov	r2, r3
   13dc6:	f243 0314 	movw	r3, #12308	; 0x3014
   13dca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13dce:	601a      	str	r2, [r3, #0]
   13dd0:	f243 0314 	movw	r3, #12308	; 0x3014
   13dd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13dd8:	681b      	ldr	r3, [r3, #0]
   13dda:	4618      	mov	r0, r3
   13ddc:	f04f 0100 	mov.w	r1, #0
   13de0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13de4:	f004 f96c 	bl	180c0 <__aeabi_fcmpge>
   13de8:	4603      	mov	r3, r0
   13dea:	2b00      	cmp	r3, #0
   13dec:	d1dd      	bne.n	13daa <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   13dee:	f243 0314 	movw	r3, #12308	; 0x3014
   13df2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13df6:	681b      	ldr	r3, [r3, #0]
   13df8:	4618      	mov	r0, r3
   13dfa:	f04f 0100 	mov.w	r1, #0
   13dfe:	f2c4 3134 	movt	r1, #17204	; 0x4334
   13e02:	f004 f967 	bl	180d4 <__aeabi_fcmpgt>
   13e06:	4603      	mov	r3, r0
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d100      	bne.n	13e0e <auto_nav+0x207e>
          return;
   13e0c:	e092      	b.n	13f34 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   13e0e:	f243 0314 	movw	r3, #12308	; 0x3014
   13e12:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	4618      	mov	r0, r3
   13e1a:	f04f 0100 	mov.w	r1, #0
   13e1e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   13e22:	f004 f939 	bl	18098 <__aeabi_fcmplt>
   13e26:	4603      	mov	r3, r0
   13e28:	2b00      	cmp	r3, #0
   13e2a:	d100      	bne.n	13e2e <auto_nav+0x209e>
          return;
   13e2c:	e082      	b.n	13f34 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   13e2e:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13e32:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e36:	781b      	ldrb	r3, [r3, #0]
   13e38:	3301      	adds	r3, #1
   13e3a:	b2da      	uxtb	r2, r3
   13e3c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13e40:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e44:	701a      	strb	r2, [r3, #0]
   13e46:	f243 2354 	movw	r3, #12884	; 0x3254
   13e4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e4e:	681a      	ldr	r2, [r3, #0]
   13e50:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   13e54:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e58:	601a      	str	r2, [r3, #0]
   13e5a:	f243 2358 	movw	r3, #12888	; 0x3258
   13e5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e62:	681a      	ldr	r2, [r3, #0]
   13e64:	f243 0300 	movw	r3, #12288	; 0x3000
   13e68:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e6c:	601a      	str	r2, [r3, #0]
   13e6e:	f243 030c 	movw	r3, #12300	; 0x300c
   13e72:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e76:	2200      	movs	r2, #0
   13e78:	801a      	strh	r2, [r3, #0]
   13e7a:	f243 0310 	movw	r3, #12304	; 0x3010
   13e7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e82:	f04f 0200 	mov.w	r2, #0
   13e86:	601a      	str	r2, [r3, #0]
   13e88:	e054      	b.n	13f34 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   13e8a:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13e8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	2b03      	cmp	r3, #3
   13e96:	d106      	bne.n	13ea6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   13e98:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13e9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ea0:	2203      	movs	r2, #3
   13ea2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   13ea4:	e44b      	b.n	1373e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   13ea6:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13eaa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13eae:	781b      	ldrb	r3, [r3, #0]
   13eb0:	2b04      	cmp	r3, #4
   13eb2:	d13f      	bne.n	13f34 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   13eb4:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13eb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ebc:	2204      	movs	r2, #4
   13ebe:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ec0:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13ec4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ec8:	781b      	ldrb	r3, [r3, #0]
   13eca:	3301      	adds	r3, #1
   13ecc:	b2da      	uxtb	r2, r3
   13ece:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   13ed2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ed6:	701a      	strb	r2, [r3, #0]
   13ed8:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   13edc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ee0:	2200      	movs	r2, #0
   13ee2:	701a      	strb	r2, [r3, #0]
   13ee4:	f243 030e 	movw	r3, #12302	; 0x300e
   13ee8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13eec:	2200      	movs	r2, #0
   13eee:	801a      	strh	r2, [r3, #0]
   13ef0:	f243 2354 	movw	r3, #12884	; 0x3254
   13ef4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13ef8:	681a      	ldr	r2, [r3, #0]
   13efa:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   13efe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f02:	601a      	str	r2, [r3, #0]
   13f04:	f243 2358 	movw	r3, #12888	; 0x3258
   13f08:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f0c:	681a      	ldr	r2, [r3, #0]
   13f0e:	f243 0300 	movw	r3, #12288	; 0x3000
   13f12:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f16:	601a      	str	r2, [r3, #0]
   13f18:	f243 030c 	movw	r3, #12300	; 0x300c
   13f1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f20:	2200      	movs	r2, #0
   13f22:	801a      	strh	r2, [r3, #0]
   13f24:	f243 0310 	movw	r3, #12304	; 0x3010
   13f28:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f2c:	f04f 0200 	mov.w	r2, #0
   13f30:	601a      	str	r2, [r3, #0]
   13f32:	bf00      	nop
    else { }
}
else { }

//#endif
}
   13f34:	372c      	adds	r7, #44	; 0x2c
   13f36:	46bd      	mov	sp, r7
   13f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f3a:	bf00      	nop
   13f3c:	f3af 8000 	nop.w
   13f40:	54442d18 	.word	0x54442d18
   13f44:	3ff921fb 	.word	0x3ff921fb
   13f48:	54442d18 	.word	0x54442d18
   13f4c:	400921fb 	.word	0x400921fb

00013f50 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   13f50:	b590      	push	{r4, r7, lr}
   13f52:	b087      	sub	sp, #28
   13f54:	af00      	add	r7, sp, #0
   13f56:	4603      	mov	r3, r0
   13f58:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   13f5a:	79f9      	ldrb	r1, [r7, #7]
   13f5c:	f640 2258 	movw	r2, #2648	; 0xa58
   13f60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f64:	460b      	mov	r3, r1
   13f66:	005b      	lsls	r3, r3, #1
   13f68:	440b      	add	r3, r1
   13f6a:	009b      	lsls	r3, r3, #2
   13f6c:	4413      	add	r3, r2
   13f6e:	681a      	ldr	r2, [r3, #0]
   13f70:	f243 2354 	movw	r3, #12884	; 0x3254
   13f74:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13f78:	681b      	ldr	r3, [r3, #0]
   13f7a:	4610      	mov	r0, r2
   13f7c:	4619      	mov	r1, r3
   13f7e:	f003 fde3 	bl	17b48 <__aeabi_fsub>
   13f82:	4603      	mov	r3, r0
   13f84:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   13f86:	79f9      	ldrb	r1, [r7, #7]
   13f88:	f640 2258 	movw	r2, #2648	; 0xa58
   13f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f90:	460b      	mov	r3, r1
   13f92:	005b      	lsls	r3, r3, #1
   13f94:	440b      	add	r3, r1
   13f96:	009b      	lsls	r3, r3, #2
   13f98:	4413      	add	r3, r2
   13f9a:	3304      	adds	r3, #4
   13f9c:	681a      	ldr	r2, [r3, #0]
   13f9e:	f243 2358 	movw	r3, #12888	; 0x3258
   13fa2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13fa6:	681b      	ldr	r3, [r3, #0]
   13fa8:	4610      	mov	r0, r2
   13faa:	4619      	mov	r1, r3
   13fac:	f003 fdcc 	bl	17b48 <__aeabi_fsub>
   13fb0:	4603      	mov	r3, r0
   13fb2:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   13fb4:	6978      	ldr	r0, [r7, #20]
   13fb6:	6979      	ldr	r1, [r7, #20]
   13fb8:	f003 fed0 	bl	17d5c <__aeabi_fmul>
   13fbc:	4603      	mov	r3, r0
   13fbe:	461c      	mov	r4, r3
   13fc0:	6938      	ldr	r0, [r7, #16]
   13fc2:	6939      	ldr	r1, [r7, #16]
   13fc4:	f003 feca 	bl	17d5c <__aeabi_fmul>
   13fc8:	4603      	mov	r3, r0
   13fca:	4620      	mov	r0, r4
   13fcc:	4619      	mov	r1, r3
   13fce:	f003 fdbd 	bl	17b4c <__addsf3>
   13fd2:	4603      	mov	r3, r0
   13fd4:	461a      	mov	r2, r3
   13fd6:	f243 032c 	movw	r3, #12332	; 0x302c
   13fda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13fde:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   13fe0:	f243 238c 	movw	r3, #12940	; 0x328c
   13fe4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   13fe8:	681b      	ldr	r3, [r3, #0]
   13fea:	4618      	mov	r0, r3
   13fec:	f04f 0100 	mov.w	r1, #0
   13ff0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   13ff4:	f003 feb2 	bl	17d5c <__aeabi_fmul>
   13ff8:	4603      	mov	r3, r0
   13ffa:	461a      	mov	r2, r3
   13ffc:	f243 0338 	movw	r3, #12344	; 0x3038
   14000:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14004:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14006:	f243 0338 	movw	r3, #12344	; 0x3038
   1400a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1400e:	681b      	ldr	r3, [r3, #0]
   14010:	4618      	mov	r0, r3
   14012:	f04f 0100 	mov.w	r1, #0
   14016:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1401a:	f004 f83d 	bl	18098 <__aeabi_fcmplt>
   1401e:	4603      	mov	r3, r0
   14020:	2b00      	cmp	r3, #0
   14022:	d004      	beq.n	1402e <approaching+0xde>
   14024:	f04f 0200 	mov.w	r2, #0
   14028:	f2c4 2220 	movt	r2, #16928	; 0x4220
   1402c:	e004      	b.n	14038 <approaching+0xe8>
   1402e:	f243 0338 	movw	r3, #12344	; 0x3038
   14032:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14036:	681a      	ldr	r2, [r3, #0]
   14038:	f243 0338 	movw	r3, #12344	; 0x3038
   1403c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14040:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14042:	f243 0338 	movw	r3, #12344	; 0x3038
   14046:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1404a:	681a      	ldr	r2, [r3, #0]
   1404c:	f243 0338 	movw	r3, #12344	; 0x3038
   14050:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14054:	681b      	ldr	r3, [r3, #0]
   14056:	4610      	mov	r0, r2
   14058:	4619      	mov	r1, r3
   1405a:	f003 fe7f 	bl	17d5c <__aeabi_fmul>
   1405e:	4603      	mov	r3, r0
   14060:	461a      	mov	r2, r3
   14062:	f243 032c 	movw	r3, #12332	; 0x302c
   14066:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1406a:	681b      	ldr	r3, [r3, #0]
   1406c:	4610      	mov	r0, r2
   1406e:	4619      	mov	r1, r3
   14070:	f004 f830 	bl	180d4 <__aeabi_fcmpgt>
   14074:	4603      	mov	r3, r0
   14076:	2b00      	cmp	r3, #0
   14078:	d001      	beq.n	1407e <approaching+0x12e>
    return TRUE;
   1407a:	2301      	movs	r3, #1
   1407c:	e048      	b.n	14110 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1407e:	79f9      	ldrb	r1, [r7, #7]
   14080:	f640 2258 	movw	r2, #2648	; 0xa58
   14084:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14088:	460b      	mov	r3, r1
   1408a:	005b      	lsls	r3, r3, #1
   1408c:	440b      	add	r3, r1
   1408e:	009b      	lsls	r3, r3, #2
   14090:	4413      	add	r3, r2
   14092:	681a      	ldr	r2, [r3, #0]
   14094:	f642 73fc 	movw	r3, #12284	; 0x2ffc
   14098:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1409c:	681b      	ldr	r3, [r3, #0]
   1409e:	4610      	mov	r0, r2
   140a0:	4619      	mov	r1, r3
   140a2:	f003 fd51 	bl	17b48 <__aeabi_fsub>
   140a6:	4603      	mov	r3, r0
   140a8:	4618      	mov	r0, r3
   140aa:	6979      	ldr	r1, [r7, #20]
   140ac:	f003 fe56 	bl	17d5c <__aeabi_fmul>
   140b0:	4603      	mov	r3, r0
   140b2:	461c      	mov	r4, r3
   140b4:	79f9      	ldrb	r1, [r7, #7]
   140b6:	f640 2258 	movw	r2, #2648	; 0xa58
   140ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   140be:	460b      	mov	r3, r1
   140c0:	005b      	lsls	r3, r3, #1
   140c2:	440b      	add	r3, r1
   140c4:	009b      	lsls	r3, r3, #2
   140c6:	4413      	add	r3, r2
   140c8:	3304      	adds	r3, #4
   140ca:	681a      	ldr	r2, [r3, #0]
   140cc:	f243 0300 	movw	r3, #12288	; 0x3000
   140d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   140d4:	681b      	ldr	r3, [r3, #0]
   140d6:	4610      	mov	r0, r2
   140d8:	4619      	mov	r1, r3
   140da:	f003 fd35 	bl	17b48 <__aeabi_fsub>
   140de:	4603      	mov	r3, r0
   140e0:	4618      	mov	r0, r3
   140e2:	6939      	ldr	r1, [r7, #16]
   140e4:	f003 fe3a 	bl	17d5c <__aeabi_fmul>
   140e8:	4603      	mov	r3, r0
   140ea:	4620      	mov	r0, r4
   140ec:	4619      	mov	r1, r3
   140ee:	f003 fd2d 	bl	17b4c <__addsf3>
   140f2:	4603      	mov	r3, r0
   140f4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   140f6:	2301      	movs	r3, #1
   140f8:	461c      	mov	r4, r3
   140fa:	68f8      	ldr	r0, [r7, #12]
   140fc:	f04f 0100 	mov.w	r1, #0
   14100:	f003 ffca 	bl	18098 <__aeabi_fcmplt>
   14104:	4603      	mov	r3, r0
   14106:	2b00      	cmp	r3, #0
   14108:	d101      	bne.n	1410e <approaching+0x1be>
   1410a:	2300      	movs	r3, #0
   1410c:	461c      	mov	r4, r3
   1410e:	b2e3      	uxtb	r3, r4
}
   14110:	4618      	mov	r0, r3
   14112:	371c      	adds	r7, #28
   14114:	46bd      	mov	sp, r7
   14116:	bd90      	pop	{r4, r7, pc}

00014118 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14118:	b5b0      	push	{r4, r5, r7, lr}
   1411a:	b082      	sub	sp, #8
   1411c:	af00      	add	r7, sp, #0
   1411e:	6078      	str	r0, [r7, #4]
   14120:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14122:	f243 0318 	movw	r3, #12312	; 0x3018
   14126:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1412a:	687a      	ldr	r2, [r7, #4]
   1412c:	601a      	str	r2, [r3, #0]
  desired_y = y;
   1412e:	f243 031c 	movw	r3, #12316	; 0x301c
   14132:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14136:	683a      	ldr	r2, [r7, #0]
   14138:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1413a:	f243 2358 	movw	r3, #12888	; 0x3258
   1413e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14142:	681b      	ldr	r3, [r3, #0]
   14144:	6838      	ldr	r0, [r7, #0]
   14146:	4619      	mov	r1, r3
   14148:	f003 fcfe 	bl	17b48 <__aeabi_fsub>
   1414c:	4603      	mov	r3, r0
   1414e:	4618      	mov	r0, r3
   14150:	f003 f970 	bl	17434 <__aeabi_f2d>
   14154:	4604      	mov	r4, r0
   14156:	460d      	mov	r5, r1
   14158:	f243 2354 	movw	r3, #12884	; 0x3254
   1415c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14160:	681b      	ldr	r3, [r3, #0]
   14162:	6878      	ldr	r0, [r7, #4]
   14164:	4619      	mov	r1, r3
   14166:	f003 fcef 	bl	17b48 <__aeabi_fsub>
   1416a:	4603      	mov	r3, r0
   1416c:	4618      	mov	r0, r3
   1416e:	f003 f961 	bl	17434 <__aeabi_f2d>
   14172:	4602      	mov	r2, r0
   14174:	460b      	mov	r3, r1
   14176:	4620      	mov	r0, r4
   14178:	4629      	mov	r1, r5
   1417a:	f001 f929 	bl	153d0 <pp_atan2>
   1417e:	4602      	mov	r2, r0
   14180:	460b      	mov	r3, r1
   14182:	a10b      	add	r1, pc, #44	; (adr r1, 141b0 <fly_to_xy+0x98>)
   14184:	e9d1 0100 	ldrd	r0, r1, [r1]
   14188:	f002 fff4 	bl	17174 <__aeabi_dsub>
   1418c:	4602      	mov	r2, r0
   1418e:	460b      	mov	r3, r1
   14190:	4610      	mov	r0, r2
   14192:	4619      	mov	r1, r3
   14194:	f003 fc84 	bl	17aa0 <__aeabi_d2f>
   14198:	4602      	mov	r2, r0
   1419a:	f642 73e4 	movw	r3, #12260	; 0x2fe4
   1419e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   141a2:	601a      	str	r2, [r3, #0]
}
   141a4:	3708      	adds	r7, #8
   141a6:	46bd      	mov	sp, r7
   141a8:	bdb0      	pop	{r4, r5, r7, pc}
   141aa:	bf00      	nop
   141ac:	f3af 8000 	nop.w
   141b0:	54442d18 	.word	0x54442d18
   141b4:	3ff921fb 	.word	0x3ff921fb

000141b8 <fly_to>:

static void fly_to(uint8_t wp) { 
   141b8:	b580      	push	{r7, lr}
   141ba:	b082      	sub	sp, #8
   141bc:	af00      	add	r7, sp, #0
   141be:	4603      	mov	r3, r0
   141c0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   141c2:	79f9      	ldrb	r1, [r7, #7]
   141c4:	f640 2258 	movw	r2, #2648	; 0xa58
   141c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141cc:	460b      	mov	r3, r1
   141ce:	005b      	lsls	r3, r3, #1
   141d0:	440b      	add	r3, r1
   141d2:	009b      	lsls	r3, r3, #2
   141d4:	4413      	add	r3, r2
   141d6:	6818      	ldr	r0, [r3, #0]
   141d8:	79f9      	ldrb	r1, [r7, #7]
   141da:	f640 2258 	movw	r2, #2648	; 0xa58
   141de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141e2:	460b      	mov	r3, r1
   141e4:	005b      	lsls	r3, r3, #1
   141e6:	440b      	add	r3, r1
   141e8:	009b      	lsls	r3, r3, #2
   141ea:	4413      	add	r3, r2
   141ec:	3304      	adds	r3, #4
   141ee:	681b      	ldr	r3, [r3, #0]
   141f0:	4619      	mov	r1, r3
   141f2:	f7ff ff91 	bl	14118 <fly_to_xy>
}
   141f6:	3708      	adds	r7, #8
   141f8:	46bd      	mov	sp, r7
   141fa:	bd80      	pop	{r7, pc}

000141fc <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   141fc:	b5b0      	push	{r4, r5, r7, lr}
   141fe:	b088      	sub	sp, #32
   14200:	af00      	add	r7, sp, #0
   14202:	4602      	mov	r2, r0
   14204:	460b      	mov	r3, r1
   14206:	71fa      	strb	r2, [r7, #7]
   14208:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   1420a:	79f9      	ldrb	r1, [r7, #7]
   1420c:	f640 2258 	movw	r2, #2648	; 0xa58
   14210:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14214:	460b      	mov	r3, r1
   14216:	005b      	lsls	r3, r3, #1
   14218:	440b      	add	r3, r1
   1421a:	009b      	lsls	r3, r3, #2
   1421c:	4413      	add	r3, r2
   1421e:	681b      	ldr	r3, [r3, #0]
   14220:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14222:	79f9      	ldrb	r1, [r7, #7]
   14224:	f640 2258 	movw	r2, #2648	; 0xa58
   14228:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1422c:	460b      	mov	r3, r1
   1422e:	005b      	lsls	r3, r3, #1
   14230:	440b      	add	r3, r1
   14232:	009b      	lsls	r3, r3, #2
   14234:	4413      	add	r3, r2
   14236:	3304      	adds	r3, #4
   14238:	681b      	ldr	r3, [r3, #0]
   1423a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   1423c:	79b9      	ldrb	r1, [r7, #6]
   1423e:	f640 2258 	movw	r2, #2648	; 0xa58
   14242:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14246:	460b      	mov	r3, r1
   14248:	005b      	lsls	r3, r3, #1
   1424a:	440b      	add	r3, r1
   1424c:	009b      	lsls	r3, r3, #2
   1424e:	4413      	add	r3, r2
   14250:	681b      	ldr	r3, [r3, #0]
   14252:	4618      	mov	r0, r3
   14254:	69f9      	ldr	r1, [r7, #28]
   14256:	f003 fc77 	bl	17b48 <__aeabi_fsub>
   1425a:	4603      	mov	r3, r0
   1425c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1425e:	79b9      	ldrb	r1, [r7, #6]
   14260:	f640 2258 	movw	r2, #2648	; 0xa58
   14264:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14268:	460b      	mov	r3, r1
   1426a:	005b      	lsls	r3, r3, #1
   1426c:	440b      	add	r3, r1
   1426e:	009b      	lsls	r3, r3, #2
   14270:	4413      	add	r3, r2
   14272:	3304      	adds	r3, #4
   14274:	681b      	ldr	r3, [r3, #0]
   14276:	4618      	mov	r0, r3
   14278:	69b9      	ldr	r1, [r7, #24]
   1427a:	f003 fc65 	bl	17b48 <__aeabi_fsub>
   1427e:	4603      	mov	r3, r0
   14280:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14282:	6978      	ldr	r0, [r7, #20]
   14284:	6979      	ldr	r1, [r7, #20]
   14286:	f003 fd69 	bl	17d5c <__aeabi_fmul>
   1428a:	4603      	mov	r3, r0
   1428c:	461c      	mov	r4, r3
   1428e:	6938      	ldr	r0, [r7, #16]
   14290:	6939      	ldr	r1, [r7, #16]
   14292:	f003 fd63 	bl	17d5c <__aeabi_fmul>
   14296:	4603      	mov	r3, r0
   14298:	4620      	mov	r0, r4
   1429a:	4619      	mov	r1, r3
   1429c:	f003 fc56 	bl	17b4c <__addsf3>
   142a0:	4603      	mov	r3, r0
   142a2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   142a4:	f243 2354 	movw	r3, #12884	; 0x3254
   142a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   142ac:	681b      	ldr	r3, [r3, #0]
   142ae:	4618      	mov	r0, r3
   142b0:	69f9      	ldr	r1, [r7, #28]
   142b2:	f003 fc49 	bl	17b48 <__aeabi_fsub>
   142b6:	4603      	mov	r3, r0
   142b8:	4618      	mov	r0, r3
   142ba:	6979      	ldr	r1, [r7, #20]
   142bc:	f003 fd4e 	bl	17d5c <__aeabi_fmul>
   142c0:	4603      	mov	r3, r0
   142c2:	461c      	mov	r4, r3
   142c4:	f243 2358 	movw	r3, #12888	; 0x3258
   142c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   142cc:	681b      	ldr	r3, [r3, #0]
   142ce:	4618      	mov	r0, r3
   142d0:	69b9      	ldr	r1, [r7, #24]
   142d2:	f003 fc39 	bl	17b48 <__aeabi_fsub>
   142d6:	4603      	mov	r3, r0
   142d8:	4618      	mov	r0, r3
   142da:	6939      	ldr	r1, [r7, #16]
   142dc:	f003 fd3e 	bl	17d5c <__aeabi_fmul>
   142e0:	4603      	mov	r3, r0
   142e2:	4620      	mov	r0, r4
   142e4:	4619      	mov	r1, r3
   142e6:	f003 fc31 	bl	17b4c <__addsf3>
   142ea:	4603      	mov	r3, r0
   142ec:	4618      	mov	r0, r3
   142ee:	68f9      	ldr	r1, [r7, #12]
   142f0:	f003 fde8 	bl	17ec4 <__aeabi_fdiv>
   142f4:	4603      	mov	r3, r0
   142f6:	461a      	mov	r2, r3
   142f8:	f243 033c 	movw	r3, #12348	; 0x303c
   142fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14300:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14302:	f243 033c 	movw	r3, #12348	; 0x303c
   14306:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1430a:	681b      	ldr	r3, [r3, #0]
   1430c:	4618      	mov	r0, r3
   1430e:	f04f 0100 	mov.w	r1, #0
   14312:	f003 fed5 	bl	180c0 <__aeabi_fcmpge>
   14316:	4603      	mov	r3, r0
   14318:	2b00      	cmp	r3, #0
   1431a:	d005      	beq.n	14328 <route_to+0x12c>
   1431c:	f243 033c 	movw	r3, #12348	; 0x303c
   14320:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14324:	681a      	ldr	r2, [r3, #0]
   14326:	e001      	b.n	1432c <route_to+0x130>
   14328:	f04f 0200 	mov.w	r2, #0
   1432c:	f243 033c 	movw	r3, #12348	; 0x303c
   14330:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14334:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14336:	68f8      	ldr	r0, [r7, #12]
   14338:	f003 f87c 	bl	17434 <__aeabi_f2d>
   1433c:	4602      	mov	r2, r0
   1433e:	460b      	mov	r3, r1
   14340:	4610      	mov	r0, r2
   14342:	4619      	mov	r1, r3
   14344:	f001 f9f4 	bl	15730 <pp_sqrt>
   14348:	4602      	mov	r2, r0
   1434a:	460b      	mov	r3, r1
   1434c:	4610      	mov	r0, r2
   1434e:	4619      	mov	r1, r3
   14350:	f003 fba6 	bl	17aa0 <__aeabi_d2f>
   14354:	4602      	mov	r2, r0
   14356:	f243 0340 	movw	r3, #12352	; 0x3040
   1435a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1435e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14360:	f243 033c 	movw	r3, #12348	; 0x303c
   14364:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14368:	681b      	ldr	r3, [r3, #0]
   1436a:	4618      	mov	r0, r3
   1436c:	f003 f862 	bl	17434 <__aeabi_f2d>
   14370:	4604      	mov	r4, r0
   14372:	460d      	mov	r5, r1
   14374:	f243 0338 	movw	r3, #12344	; 0x3038
   14378:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1437c:	681a      	ldr	r2, [r3, #0]
   1437e:	f243 0340 	movw	r3, #12352	; 0x3040
   14382:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14386:	681b      	ldr	r3, [r3, #0]
   14388:	4610      	mov	r0, r2
   1438a:	4619      	mov	r1, r3
   1438c:	f003 fd9a 	bl	17ec4 <__aeabi_fdiv>
   14390:	4603      	mov	r3, r0
   14392:	4618      	mov	r0, r3
   14394:	f04f 0100 	mov.w	r1, #0
   14398:	f003 fe92 	bl	180c0 <__aeabi_fcmpge>
   1439c:	4603      	mov	r3, r0
   1439e:	2b00      	cmp	r3, #0
   143a0:	d014      	beq.n	143cc <route_to+0x1d0>
   143a2:	f243 0338 	movw	r3, #12344	; 0x3038
   143a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   143aa:	681a      	ldr	r2, [r3, #0]
   143ac:	f243 0340 	movw	r3, #12352	; 0x3040
   143b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   143b4:	681b      	ldr	r3, [r3, #0]
   143b6:	4610      	mov	r0, r2
   143b8:	4619      	mov	r1, r3
   143ba:	f003 fd83 	bl	17ec4 <__aeabi_fdiv>
   143be:	4603      	mov	r3, r0
   143c0:	4618      	mov	r0, r3
   143c2:	f003 f837 	bl	17434 <__aeabi_f2d>
   143c6:	4602      	mov	r2, r0
   143c8:	460b      	mov	r3, r1
   143ca:	e003      	b.n	143d4 <route_to+0x1d8>
   143cc:	f04f 0200 	mov.w	r2, #0
   143d0:	f04f 0300 	mov.w	r3, #0
   143d4:	4620      	mov	r0, r4
   143d6:	4629      	mov	r1, r5
   143d8:	f002 fece 	bl	17178 <__adddf3>
   143dc:	4602      	mov	r2, r0
   143de:	460b      	mov	r3, r1
   143e0:	4610      	mov	r0, r2
   143e2:	4619      	mov	r1, r3
   143e4:	f003 fb5c 	bl	17aa0 <__aeabi_d2f>
   143e8:	4602      	mov	r2, r0
   143ea:	f243 033c 	movw	r3, #12348	; 0x303c
   143ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   143f2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   143f4:	f243 033c 	movw	r3, #12348	; 0x303c
   143f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   143fc:	681b      	ldr	r3, [r3, #0]
   143fe:	4618      	mov	r0, r3
   14400:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14404:	f003 fe5c 	bl	180c0 <__aeabi_fcmpge>
   14408:	4603      	mov	r3, r0
   1440a:	2b00      	cmp	r3, #0
   1440c:	d002      	beq.n	14414 <route_to+0x218>
   1440e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14412:	e004      	b.n	1441e <route_to+0x222>
   14414:	f243 033c 	movw	r3, #12348	; 0x303c
   14418:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1441c:	681a      	ldr	r2, [r3, #0]
   1441e:	f243 033c 	movw	r3, #12348	; 0x303c
   14422:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14426:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14428:	f243 033c 	movw	r3, #12348	; 0x303c
   1442c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	4618      	mov	r0, r3
   14434:	6979      	ldr	r1, [r7, #20]
   14436:	f003 fc91 	bl	17d5c <__aeabi_fmul>
   1443a:	4603      	mov	r3, r0
   1443c:	4618      	mov	r0, r3
   1443e:	69f9      	ldr	r1, [r7, #28]
   14440:	f003 fb84 	bl	17b4c <__addsf3>
   14444:	4603      	mov	r3, r0
   14446:	461c      	mov	r4, r3
   14448:	f243 033c 	movw	r3, #12348	; 0x303c
   1444c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14450:	681b      	ldr	r3, [r3, #0]
   14452:	4618      	mov	r0, r3
   14454:	6939      	ldr	r1, [r7, #16]
   14456:	f003 fc81 	bl	17d5c <__aeabi_fmul>
   1445a:	4603      	mov	r3, r0
   1445c:	4618      	mov	r0, r3
   1445e:	69b9      	ldr	r1, [r7, #24]
   14460:	f003 fb74 	bl	17b4c <__addsf3>
   14464:	4603      	mov	r3, r0
   14466:	4620      	mov	r0, r4
   14468:	4619      	mov	r1, r3
   1446a:	f7ff fe55 	bl	14118 <fly_to_xy>
}
   1446e:	3720      	adds	r7, #32
   14470:	46bd      	mov	sp, r7
   14472:	bdb0      	pop	{r4, r5, r7, pc}

00014474 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14474:	b590      	push	{r4, r7, lr}
   14476:	b083      	sub	sp, #12
   14478:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   1447a:	f640 2358 	movw	r3, #2648	; 0xa58
   1447e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14482:	681a      	ldr	r2, [r3, #0]
   14484:	f243 2354 	movw	r3, #12884	; 0x3254
   14488:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1448c:	681b      	ldr	r3, [r3, #0]
   1448e:	4610      	mov	r0, r2
   14490:	4619      	mov	r1, r3
   14492:	f003 fb59 	bl	17b48 <__aeabi_fsub>
   14496:	4603      	mov	r3, r0
   14498:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   1449a:	f640 2358 	movw	r3, #2648	; 0xa58
   1449e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144a2:	685a      	ldr	r2, [r3, #4]
   144a4:	f243 2358 	movw	r3, #12888	; 0x3258
   144a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   144ac:	681b      	ldr	r3, [r3, #0]
   144ae:	4610      	mov	r0, r2
   144b0:	4619      	mov	r1, r3
   144b2:	f003 fb49 	bl	17b48 <__aeabi_fsub>
   144b6:	4603      	mov	r3, r0
   144b8:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   144ba:	6878      	ldr	r0, [r7, #4]
   144bc:	6879      	ldr	r1, [r7, #4]
   144be:	f003 fc4d 	bl	17d5c <__aeabi_fmul>
   144c2:	4603      	mov	r3, r0
   144c4:	461c      	mov	r4, r3
   144c6:	6838      	ldr	r0, [r7, #0]
   144c8:	6839      	ldr	r1, [r7, #0]
   144ca:	f003 fc47 	bl	17d5c <__aeabi_fmul>
   144ce:	4603      	mov	r3, r0
   144d0:	4620      	mov	r0, r4
   144d2:	4619      	mov	r1, r3
   144d4:	f003 fb3a 	bl	17b4c <__addsf3>
   144d8:	4603      	mov	r3, r0
   144da:	461a      	mov	r2, r3
   144dc:	f243 0330 	movw	r3, #12336	; 0x3030
   144e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   144e4:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   144e6:	f243 0330 	movw	r3, #12336	; 0x3030
   144ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   144ee:	681b      	ldr	r3, [r3, #0]
   144f0:	2201      	movs	r2, #1
   144f2:	4614      	mov	r4, r2
   144f4:	4618      	mov	r0, r3
   144f6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   144fa:	f6c4 0174 	movt	r1, #18548	; 0x4874
   144fe:	f003 fde9 	bl	180d4 <__aeabi_fcmpgt>
   14502:	4603      	mov	r3, r0
   14504:	2b00      	cmp	r3, #0
   14506:	d101      	bne.n	1450c <compute_dist2_to_home+0x98>
   14508:	2300      	movs	r3, #0
   1450a:	461c      	mov	r4, r3
   1450c:	b2e3      	uxtb	r3, r4
   1450e:	461a      	mov	r2, r3
   14510:	f243 0334 	movw	r3, #12340	; 0x3034
   14514:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14518:	701a      	strb	r2, [r3, #0]
}
   1451a:	370c      	adds	r7, #12
   1451c:	46bd      	mov	sp, r7
   1451e:	bd90      	pop	{r4, r7, pc}

00014520 <nav_home>:

void nav_home(void) {
   14520:	b580      	push	{r7, lr}
   14522:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14524:	f243 0324 	movw	r3, #12324	; 0x3024
   14528:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1452c:	f04f 0200 	mov.w	r2, #0
   14530:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14532:	f642 4385 	movw	r3, #11397	; 0x2c85
   14536:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1453a:	2203      	movs	r2, #3
   1453c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   1453e:	f640 2354 	movw	r3, #2644	; 0xa54
   14542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14546:	f04f 0200 	mov.w	r2, #0
   1454a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1454e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14550:	f7ff ff90 	bl	14474 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14554:	f243 0330 	movw	r3, #12336	; 0x3030
   14558:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1455c:	681a      	ldr	r2, [r3, #0]
   1455e:	f243 032c 	movw	r3, #12332	; 0x302c
   14562:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14566:	601a      	str	r2, [r3, #0]
}
   14568:	bd80      	pop	{r7, pc}
   1456a:	bf00      	nop

0001456c <nav_update>:

void nav_update(void) {
   1456c:	b580      	push	{r7, lr}
   1456e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14570:	f7ff ff80 	bl	14474 <compute_dist2_to_home>

  auto_nav();
   14574:	f7fd fc0c 	bl	11d90 <auto_nav>
}
   14578:	bd80      	pop	{r7, pc}
   1457a:	bf00      	nop

0001457c <nav_init>:


void nav_init(void) {
   1457c:	b480      	push	{r7}
   1457e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14580:	f642 73f9 	movw	r3, #12281	; 0x2ff9
   14584:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14588:	2200      	movs	r2, #0
   1458a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   1458c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
   14590:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14594:	2200      	movs	r2, #0
   14596:	701a      	strb	r2, [r3, #0]
}
   14598:	46bd      	mov	sp, r7
   1459a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1459e:	4770      	bx	lr

000145a0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   145a0:	b480      	push	{r7}
   145a2:	b083      	sub	sp, #12
   145a4:	af00      	add	r7, sp, #0
   145a6:	4603      	mov	r3, r0
   145a8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   145aa:	f242 030a 	movw	r3, #8202	; 0x200a
   145ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145b2:	781b      	ldrb	r3, [r3, #0]
   145b4:	b2db      	uxtb	r3, r3
   145b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   145ba:	2b00      	cmp	r3, #0
   145bc:	d028      	beq.n	14610 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   145be:	f243 034d 	movw	r3, #12365	; 0x304d
   145c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   145c6:	781b      	ldrb	r3, [r3, #0]
   145c8:	b2db      	uxtb	r3, r3
   145ca:	461a      	mov	r2, r3
   145cc:	f243 034c 	movw	r3, #12364	; 0x304c
   145d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	3301      	adds	r3, #1
   145d8:	429a      	cmp	r2, r3
   145da:	d100      	bne.n	145de <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   145dc:	e02c      	b.n	14638 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   145de:	f243 034c 	movw	r3, #12364	; 0x304c
   145e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	461a      	mov	r2, r3
   145ea:	f243 0350 	movw	r3, #12368	; 0x3050
   145ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   145f2:	79f9      	ldrb	r1, [r7, #7]
   145f4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   145f6:	f243 034c 	movw	r3, #12364	; 0x304c
   145fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   145fe:	781b      	ldrb	r3, [r3, #0]
   14600:	3301      	adds	r3, #1
   14602:	b2da      	uxtb	r2, r3
   14604:	f243 034c 	movw	r3, #12364	; 0x304c
   14608:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1460c:	701a      	strb	r2, [r3, #0]
   1460e:	e013      	b.n	14638 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14610:	f242 030c 	movw	r3, #8204	; 0x200c
   14614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14618:	79fa      	ldrb	r2, [r7, #7]
   1461a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   1461c:	f242 030a 	movw	r3, #8202	; 0x200a
   14620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14624:	f242 020a 	movw	r2, #8202	; 0x200a
   14628:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1462c:	7812      	ldrb	r2, [r2, #0]
   1462e:	b2d2      	uxtb	r2, r2
   14630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14634:	b2d2      	uxtb	r2, r2
   14636:	701a      	strb	r2, [r3, #0]
  }
}
   14638:	370c      	adds	r7, #12
   1463a:	46bd      	mov	sp, r7
   1463c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14640:	4770      	bx	lr
   14642:	bf00      	nop

00014644 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14644:	b480      	push	{r7}
   14646:	b083      	sub	sp, #12
   14648:	af00      	add	r7, sp, #0
   1464a:	4603      	mov	r3, r0
   1464c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   1464e:	f242 039a 	movw	r3, #8346	; 0x209a
   14652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	b2db      	uxtb	r3, r3
   1465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1465e:	2b00      	cmp	r3, #0
   14660:	d028      	beq.n	146b4 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14662:	f243 1351 	movw	r3, #12625	; 0x3151
   14666:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1466a:	781b      	ldrb	r3, [r3, #0]
   1466c:	b2db      	uxtb	r3, r3
   1466e:	461a      	mov	r2, r3
   14670:	f243 1350 	movw	r3, #12624	; 0x3150
   14674:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14678:	781b      	ldrb	r3, [r3, #0]
   1467a:	3301      	adds	r3, #1
   1467c:	429a      	cmp	r2, r3
   1467e:	d100      	bne.n	14682 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14680:	e02c      	b.n	146dc <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14682:	f243 1350 	movw	r3, #12624	; 0x3150
   14686:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1468a:	781b      	ldrb	r3, [r3, #0]
   1468c:	461a      	mov	r2, r3
   1468e:	f243 1354 	movw	r3, #12628	; 0x3154
   14692:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14696:	79f9      	ldrb	r1, [r7, #7]
   14698:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   1469a:	f243 1350 	movw	r3, #12624	; 0x3150
   1469e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   146a2:	781b      	ldrb	r3, [r3, #0]
   146a4:	3301      	adds	r3, #1
   146a6:	b2da      	uxtb	r2, r3
   146a8:	f243 1350 	movw	r3, #12624	; 0x3150
   146ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   146b0:	701a      	strb	r2, [r3, #0]
   146b2:	e013      	b.n	146dc <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   146b4:	f242 039c 	movw	r3, #8348	; 0x209c
   146b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146bc:	79fa      	ldrb	r2, [r7, #7]
   146be:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   146c0:	f242 039a 	movw	r3, #8346	; 0x209a
   146c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146c8:	f242 029a 	movw	r2, #8346	; 0x209a
   146cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146d0:	7812      	ldrb	r2, [r2, #0]
   146d2:	b2d2      	uxtb	r2, r2
   146d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   146d8:	b2d2      	uxtb	r2, r2
   146da:	701a      	strb	r2, [r3, #0]
  }
}
   146dc:	370c      	adds	r7, #12
   146de:	46bd      	mov	sp, r7
   146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   146e4:	4770      	bx	lr
   146e6:	bf00      	nop

000146e8 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   146e8:	b580      	push	{r7, lr}
   146ea:	b084      	sub	sp, #16
   146ec:	af00      	add	r7, sp, #0
   146ee:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   146f0:	2300      	movs	r3, #0
   146f2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   146f4:	e009      	b.n	1470a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   146f6:	7bfb      	ldrb	r3, [r7, #15]
   146f8:	687a      	ldr	r2, [r7, #4]
   146fa:	4413      	add	r3, r2
   146fc:	781b      	ldrb	r3, [r3, #0]
   146fe:	4618      	mov	r0, r3
   14700:	f7ff ff4e 	bl	145a0 <uart0_transmit>
    i++;
   14704:	7bfb      	ldrb	r3, [r7, #15]
   14706:	3301      	adds	r3, #1
   14708:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1470a:	7bfb      	ldrb	r3, [r7, #15]
   1470c:	687a      	ldr	r2, [r7, #4]
   1470e:	4413      	add	r3, r2
   14710:	781b      	ldrb	r3, [r3, #0]
   14712:	2b00      	cmp	r3, #0
   14714:	d1ef      	bne.n	146f6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14716:	3710      	adds	r7, #16
   14718:	46bd      	mov	sp, r7
   1471a:	bd80      	pop	{r7, pc}

0001471c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   1471c:	b590      	push	{r4, r7, lr}
   1471e:	b089      	sub	sp, #36	; 0x24
   14720:	af00      	add	r7, sp, #0
   14722:	4603      	mov	r3, r0
   14724:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14726:	f248 33ec 	movw	r3, #33772	; 0x83ec
   1472a:	f2c0 0301 	movt	r3, #1
   1472e:	f107 040c 	add.w	r4, r7, #12
   14732:	6818      	ldr	r0, [r3, #0]
   14734:	6859      	ldr	r1, [r3, #4]
   14736:	689a      	ldr	r2, [r3, #8]
   14738:	68db      	ldr	r3, [r3, #12]
   1473a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   1473c:	79fb      	ldrb	r3, [r7, #7]
   1473e:	091b      	lsrs	r3, r3, #4
   14740:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14742:	79fb      	ldrb	r3, [r7, #7]
   14744:	f003 030f 	and.w	r3, r3, #15
   14748:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   1474a:	230f      	movs	r3, #15
   1474c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   1474e:	230f      	movs	r3, #15
   14750:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14752:	7ffb      	ldrb	r3, [r7, #31]
   14754:	f107 0220 	add.w	r2, r7, #32
   14758:	4413      	add	r3, r2
   1475a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1475e:	4618      	mov	r0, r3
   14760:	f7ff ff1e 	bl	145a0 <uart0_transmit>
  uart0_transmit(hex[low]);
   14764:	7fbb      	ldrb	r3, [r7, #30]
   14766:	f107 0220 	add.w	r2, r7, #32
   1476a:	4413      	add	r3, r2
   1476c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14770:	4618      	mov	r0, r3
   14772:	f7ff ff15 	bl	145a0 <uart0_transmit>
}
   14776:	3724      	adds	r7, #36	; 0x24
   14778:	46bd      	mov	sp, r7
   1477a:	bd90      	pop	{r4, r7, pc}

0001477c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   1477c:	b480      	push	{r7}
   1477e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14780:	f243 034c 	movw	r3, #12364	; 0x304c
   14784:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14788:	781a      	ldrb	r2, [r3, #0]
   1478a:	f243 034d 	movw	r3, #12365	; 0x304d
   1478e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14792:	781b      	ldrb	r3, [r3, #0]
   14794:	b2db      	uxtb	r3, r3
   14796:	429a      	cmp	r2, r3
   14798:	d10e      	bne.n	147b8 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   1479a:	f242 030a 	movw	r3, #8202	; 0x200a
   1479e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147a2:	f242 020a 	movw	r2, #8202	; 0x200a
   147a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147aa:	7812      	ldrb	r2, [r2, #0]
   147ac:	b2d2      	uxtb	r2, r2
   147ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   147b2:	b2d2      	uxtb	r2, r2
   147b4:	701a      	strb	r2, [r3, #0]
   147b6:	e01d      	b.n	147f4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   147b8:	f242 030c 	movw	r3, #8204	; 0x200c
   147bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147c0:	f243 024d 	movw	r2, #12365	; 0x304d
   147c4:	f2c2 0201 	movt	r2, #8193	; 0x2001
   147c8:	7812      	ldrb	r2, [r2, #0]
   147ca:	b2d2      	uxtb	r2, r2
   147cc:	4611      	mov	r1, r2
   147ce:	f243 0250 	movw	r2, #12368	; 0x3050
   147d2:	f2c2 0201 	movt	r2, #8193	; 0x2001
   147d6:	5c52      	ldrb	r2, [r2, r1]
   147d8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   147da:	f243 034d 	movw	r3, #12365	; 0x304d
   147de:	f2c2 0301 	movt	r3, #8193	; 0x2001
   147e2:	781b      	ldrb	r3, [r3, #0]
   147e4:	b2db      	uxtb	r3, r3
   147e6:	3301      	adds	r3, #1
   147e8:	b2da      	uxtb	r2, r3
   147ea:	f243 034d 	movw	r3, #12365	; 0x304d
   147ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   147f2:	701a      	strb	r2, [r3, #0]
  }
}
   147f4:	46bd      	mov	sp, r7
   147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   147fa:	4770      	bx	lr

000147fc <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   147fc:	b480      	push	{r7}
   147fe:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14800:	f243 1350 	movw	r3, #12624	; 0x3150
   14804:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14808:	781a      	ldrb	r2, [r3, #0]
   1480a:	f243 1351 	movw	r3, #12625	; 0x3151
   1480e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14812:	781b      	ldrb	r3, [r3, #0]
   14814:	b2db      	uxtb	r3, r3
   14816:	429a      	cmp	r2, r3
   14818:	d10e      	bne.n	14838 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1481a:	f242 039a 	movw	r3, #8346	; 0x209a
   1481e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14822:	f242 029a 	movw	r2, #8346	; 0x209a
   14826:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1482a:	7812      	ldrb	r2, [r2, #0]
   1482c:	b2d2      	uxtb	r2, r2
   1482e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14832:	b2d2      	uxtb	r2, r2
   14834:	701a      	strb	r2, [r3, #0]
   14836:	e01d      	b.n	14874 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14838:	f242 039c 	movw	r3, #8348	; 0x209c
   1483c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14840:	f243 1251 	movw	r2, #12625	; 0x3151
   14844:	f2c2 0201 	movt	r2, #8193	; 0x2001
   14848:	7812      	ldrb	r2, [r2, #0]
   1484a:	b2d2      	uxtb	r2, r2
   1484c:	4611      	mov	r1, r2
   1484e:	f243 1254 	movw	r2, #12628	; 0x3154
   14852:	f2c2 0201 	movt	r2, #8193	; 0x2001
   14856:	5c52      	ldrb	r2, [r2, r1]
   14858:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   1485a:	f243 1351 	movw	r3, #12625	; 0x3151
   1485e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14862:	781b      	ldrb	r3, [r3, #0]
   14864:	b2db      	uxtb	r3, r3
   14866:	3301      	adds	r3, #1
   14868:	b2da      	uxtb	r2, r3
   1486a:	f243 1351 	movw	r3, #12625	; 0x3151
   1486e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14872:	701a      	strb	r2, [r3, #0]
  }
}
   14874:	46bd      	mov	sp, r7
   14876:	f85d 7b04 	ldr.w	r7, [sp], #4
   1487a:	4770      	bx	lr

0001487c <uart0_init>:

void uart0_init( void ) {
   1487c:	b480      	push	{r7}
   1487e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14880:	f242 0390 	movw	r3, #8336	; 0x2090
   14884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14888:	2200      	movs	r2, #0
   1488a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   1488c:	f242 0309 	movw	r3, #8201	; 0x2009
   14890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14894:	2219      	movs	r2, #25
   14896:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14898:	f242 030b 	movw	r3, #8203	; 0x200b
   1489c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a0:	2200      	movs	r2, #0
   148a2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   148a4:	f242 030a 	movw	r3, #8202	; 0x200a
   148a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ac:	2218      	movs	r2, #24
   148ae:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   148b0:	f242 0395 	movw	r3, #8341	; 0x2095
   148b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148b8:	2206      	movs	r2, #6
   148ba:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   148bc:	f242 030a 	movw	r3, #8202	; 0x200a
   148c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c4:	f242 020a 	movw	r2, #8202	; 0x200a
   148c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148cc:	7812      	ldrb	r2, [r2, #0]
   148ce:	b2d2      	uxtb	r2, r2
   148d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   148d4:	b2d2      	uxtb	r2, r2
   148d6:	701a      	strb	r2, [r3, #0]
}
   148d8:	46bd      	mov	sp, r7
   148da:	f85d 7b04 	ldr.w	r7, [sp], #4
   148de:	4770      	bx	lr

000148e0 <uart1_init>:

void uart1_init( void ) {
   148e0:	b480      	push	{r7}
   148e2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   148e4:	f242 0398 	movw	r3, #8344	; 0x2098
   148e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ec:	2200      	movs	r2, #0
   148ee:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   148f0:	f242 0399 	movw	r3, #8345	; 0x2099
   148f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f8:	2219      	movs	r2, #25
   148fa:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   148fc:	f242 039b 	movw	r3, #8347	; 0x209b
   14900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14904:	2200      	movs	r2, #0
   14906:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14908:	f242 039a 	movw	r3, #8346	; 0x209a
   1490c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14910:	2218      	movs	r2, #24
   14912:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14914:	f242 039d 	movw	r3, #8349	; 0x209d
   14918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1491c:	2206      	movs	r2, #6
   1491e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14920:	f242 039a 	movw	r3, #8346	; 0x209a
   14924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14928:	f242 029a 	movw	r2, #8346	; 0x209a
   1492c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14930:	7812      	ldrb	r2, [r2, #0]
   14932:	b2d2      	uxtb	r2, r2
   14934:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14938:	b2d2      	uxtb	r2, r2
   1493a:	701a      	strb	r2, [r3, #0]
}
   1493c:	46bd      	mov	sp, r7
   1493e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14942:	4770      	bx	lr
   14944:	0000      	movs	r0, r0
	...

00014948 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14948:	b480      	push	{r7}
   1494a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   1494c:	f243 2354 	movw	r3, #12884	; 0x3254
   14950:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14954:	f04f 0200 	mov.w	r2, #0
   14958:	601a      	str	r2, [r3, #0]
   1495a:	f243 2358 	movw	r3, #12888	; 0x3258
   1495e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14962:	f04f 0200 	mov.w	r2, #0
   14966:	601a      	str	r2, [r3, #0]
   14968:	f243 235c 	movw	r3, #12892	; 0x325c
   1496c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14970:	f04f 0200 	mov.w	r2, #0
   14974:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14976:	f243 2360 	movw	r3, #12896	; 0x3260
   1497a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1497e:	f04f 0200 	mov.w	r2, #0
   14982:	601a      	str	r2, [r3, #0]
   14984:	f243 2364 	movw	r3, #12900	; 0x3264
   14988:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1498c:	f04f 0200 	mov.w	r2, #0
   14990:	601a      	str	r2, [r3, #0]
   14992:	f243 2368 	movw	r3, #12904	; 0x3268
   14996:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1499a:	f04f 0200 	mov.w	r2, #0
   1499e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   149a0:	f243 238c 	movw	r3, #12940	; 0x328c
   149a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149a8:	f04f 0200 	mov.w	r2, #0
   149ac:	601a      	str	r2, [r3, #0]
   149ae:	f243 2390 	movw	r3, #12944	; 0x3290
   149b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149b6:	f04f 0200 	mov.w	r2, #0
   149ba:	601a      	str	r2, [r3, #0]
   149bc:	f243 2374 	movw	r3, #12916	; 0x3274
   149c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149c4:	f04f 0200 	mov.w	r2, #0
   149c8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   149ca:	f243 2378 	movw	r3, #12920	; 0x3278
   149ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149d2:	f04f 0200 	mov.w	r2, #0
   149d6:	601a      	str	r2, [r3, #0]
   149d8:	f243 237c 	movw	r3, #12924	; 0x327c
   149dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149e0:	f04f 0200 	mov.w	r2, #0
   149e4:	601a      	str	r2, [r3, #0]
   149e6:	f243 2380 	movw	r3, #12928	; 0x3280
   149ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149ee:	f04f 0200 	mov.w	r2, #0
   149f2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   149f4:	f243 2384 	movw	r3, #12932	; 0x3284
   149f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   149fc:	2200      	movs	r2, #0
   149fe:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14a00:	f640 2328 	movw	r3, #2600	; 0xa28
   14a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a08:	681a      	ldr	r2, [r3, #0]
   14a0a:	f243 2394 	movw	r3, #12948	; 0x3294
   14a0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a12:	601a      	str	r2, [r3, #0]
}
   14a14:	46bd      	mov	sp, r7
   14a16:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a1a:	4770      	bx	lr

00014a1c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14a1c:	b580      	push	{r7, lr}
   14a1e:	b082      	sub	sp, #8
   14a20:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14a22:	f640 231c 	movw	r3, #2588	; 0xa1c
   14a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a2a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14a2c:	2b01      	cmp	r3, #1
   14a2e:	d105      	bne.n	14a3c <estimator_update_state_infrared+0x20>
   14a30:	f243 2394 	movw	r3, #12948	; 0x3294
   14a34:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a38:	681b      	ldr	r3, [r3, #0]
   14a3a:	e004      	b.n	14a46 <estimator_update_state_infrared+0x2a>
   14a3c:	f640 2328 	movw	r3, #2600	; 0xa28
   14a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a44:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14a46:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14a48:	f642 7340 	movw	r3, #12096	; 0x2f40
   14a4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a50:	881b      	ldrh	r3, [r3, #0]
   14a52:	b21b      	sxth	r3, r3
   14a54:	4618      	mov	r0, r3
   14a56:	f003 f92d 	bl	17cb4 <__aeabi_i2f>
   14a5a:	4603      	mov	r3, r0
   14a5c:	4618      	mov	r0, r3
   14a5e:	6879      	ldr	r1, [r7, #4]
   14a60:	f003 f97c 	bl	17d5c <__aeabi_fmul>
   14a64:	4603      	mov	r3, r0
   14a66:	461a      	mov	r2, r3
   14a68:	f243 2360 	movw	r3, #12896	; 0x3260
   14a6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a70:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14a72:	f642 7342 	movw	r3, #12098	; 0x2f42
   14a76:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a7a:	881b      	ldrh	r3, [r3, #0]
   14a7c:	b21b      	sxth	r3, r3
   14a7e:	4618      	mov	r0, r3
   14a80:	f003 f918 	bl	17cb4 <__aeabi_i2f>
   14a84:	4603      	mov	r3, r0
   14a86:	4618      	mov	r0, r3
   14a88:	6879      	ldr	r1, [r7, #4]
   14a8a:	f003 f967 	bl	17d5c <__aeabi_fmul>
   14a8e:	4603      	mov	r3, r0
   14a90:	461a      	mov	r2, r3
   14a92:	f243 2368 	movw	r3, #12904	; 0x3268
   14a96:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14a9a:	601a      	str	r2, [r3, #0]
}
   14a9c:	3708      	adds	r7, #8
   14a9e:	46bd      	mov	sp, r7
   14aa0:	bd80      	pop	{r7, pc}
   14aa2:	bf00      	nop

00014aa4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14aa4:	b5b0      	push	{r4, r5, r7, lr}
   14aa6:	b084      	sub	sp, #16
   14aa8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14aaa:	f243 23a0 	movw	r3, #12960	; 0x32a0
   14aae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ab2:	781b      	ldrb	r3, [r3, #0]
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	f000 81e8 	beq.w	14e8a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14aba:	f642 6310 	movw	r3, #11792	; 0x2e10
   14abe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ac2:	681a      	ldr	r2, [r3, #0]
   14ac4:	f243 23a4 	movw	r3, #12964	; 0x32a4
   14ac8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14acc:	681b      	ldr	r3, [r3, #0]
   14ace:	4610      	mov	r0, r2
   14ad0:	4619      	mov	r1, r3
   14ad2:	f003 f839 	bl	17b48 <__aeabi_fsub>
   14ad6:	4603      	mov	r3, r0
   14ad8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14ada:	68b8      	ldr	r0, [r7, #8]
   14adc:	f002 fcaa 	bl	17434 <__aeabi_f2d>
   14ae0:	4602      	mov	r2, r0
   14ae2:	460b      	mov	r3, r1
   14ae4:	4610      	mov	r0, r2
   14ae6:	4619      	mov	r1, r3
   14ae8:	a385      	add	r3, pc, #532	; (adr r3, 14d00 <estimator_update_ir_estim+0x25c>)
   14aea:	e9d3 2300 	ldrd	r2, r3, [r3]
   14aee:	f002 ff85 	bl	179fc <__aeabi_dcmpgt>
   14af2:	4603      	mov	r3, r0
   14af4:	2b00      	cmp	r3, #0
   14af6:	d100      	bne.n	14afa <estimator_update_ir_estim+0x56>
   14af8:	e219      	b.n	14f2e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14afa:	f243 2390 	movw	r3, #12944	; 0x3290
   14afe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14b02:	681a      	ldr	r2, [r3, #0]
   14b04:	f243 23a8 	movw	r3, #12968	; 0x32a8
   14b08:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14b0c:	681b      	ldr	r3, [r3, #0]
   14b0e:	4610      	mov	r0, r2
   14b10:	4619      	mov	r1, r3
   14b12:	f003 f819 	bl	17b48 <__aeabi_fsub>
   14b16:	4603      	mov	r3, r0
   14b18:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14b1a:	e013      	b.n	14b44 <estimator_update_ir_estim+0xa0>
   14b1c:	68f8      	ldr	r0, [r7, #12]
   14b1e:	f002 fc89 	bl	17434 <__aeabi_f2d>
   14b22:	4602      	mov	r2, r0
   14b24:	460b      	mov	r3, r1
   14b26:	4610      	mov	r0, r2
   14b28:	4619      	mov	r1, r3
   14b2a:	a377      	add	r3, pc, #476	; (adr r3, 14d08 <estimator_update_ir_estim+0x264>)
   14b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b30:	f002 fb20 	bl	17174 <__aeabi_dsub>
   14b34:	4602      	mov	r2, r0
   14b36:	460b      	mov	r3, r1
   14b38:	4610      	mov	r0, r2
   14b3a:	4619      	mov	r1, r3
   14b3c:	f002 ffb0 	bl	17aa0 <__aeabi_d2f>
   14b40:	4603      	mov	r3, r0
   14b42:	60fb      	str	r3, [r7, #12]
   14b44:	68f8      	ldr	r0, [r7, #12]
   14b46:	f002 fc75 	bl	17434 <__aeabi_f2d>
   14b4a:	4602      	mov	r2, r0
   14b4c:	460b      	mov	r3, r1
   14b4e:	4610      	mov	r0, r2
   14b50:	4619      	mov	r1, r3
   14b52:	a36f      	add	r3, pc, #444	; (adr r3, 14d10 <estimator_update_ir_estim+0x26c>)
   14b54:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b58:	f002 ff50 	bl	179fc <__aeabi_dcmpgt>
   14b5c:	4603      	mov	r3, r0
   14b5e:	2b00      	cmp	r3, #0
   14b60:	d1dc      	bne.n	14b1c <estimator_update_ir_estim+0x78>
   14b62:	e013      	b.n	14b8c <estimator_update_ir_estim+0xe8>
   14b64:	68f8      	ldr	r0, [r7, #12]
   14b66:	f002 fc65 	bl	17434 <__aeabi_f2d>
   14b6a:	4602      	mov	r2, r0
   14b6c:	460b      	mov	r3, r1
   14b6e:	4610      	mov	r0, r2
   14b70:	4619      	mov	r1, r3
   14b72:	a365      	add	r3, pc, #404	; (adr r3, 14d08 <estimator_update_ir_estim+0x264>)
   14b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b78:	f002 fafe 	bl	17178 <__adddf3>
   14b7c:	4602      	mov	r2, r0
   14b7e:	460b      	mov	r3, r1
   14b80:	4610      	mov	r0, r2
   14b82:	4619      	mov	r1, r3
   14b84:	f002 ff8c 	bl	17aa0 <__aeabi_d2f>
   14b88:	4603      	mov	r3, r0
   14b8a:	60fb      	str	r3, [r7, #12]
   14b8c:	68f8      	ldr	r0, [r7, #12]
   14b8e:	f002 fc51 	bl	17434 <__aeabi_f2d>
   14b92:	4602      	mov	r2, r0
   14b94:	460b      	mov	r3, r1
   14b96:	4610      	mov	r0, r2
   14b98:	4619      	mov	r1, r3
   14b9a:	a35f      	add	r3, pc, #380	; (adr r3, 14d18 <estimator_update_ir_estim+0x274>)
   14b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ba0:	f002 ff0e 	bl	179c0 <__aeabi_dcmplt>
   14ba4:	4603      	mov	r3, r0
   14ba6:	2b00      	cmp	r3, #0
   14ba8:	d1dc      	bne.n	14b64 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14baa:	68f8      	ldr	r0, [r7, #12]
   14bac:	68b9      	ldr	r1, [r7, #8]
   14bae:	f003 f989 	bl	17ec4 <__aeabi_fdiv>
   14bb2:	4603      	mov	r3, r0
   14bb4:	4618      	mov	r0, r3
   14bb6:	f002 fc3d 	bl	17434 <__aeabi_f2d>
   14bba:	4602      	mov	r2, r0
   14bbc:	460b      	mov	r3, r1
   14bbe:	4610      	mov	r0, r2
   14bc0:	4619      	mov	r1, r3
   14bc2:	f04f 0200 	mov.w	r2, #0
   14bc6:	f04f 0300 	mov.w	r3, #0
   14bca:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14bce:	f002 fc85 	bl	174dc <__aeabi_dmul>
   14bd2:	4602      	mov	r2, r0
   14bd4:	460b      	mov	r3, r1
   14bd6:	4610      	mov	r0, r2
   14bd8:	4619      	mov	r1, r3
   14bda:	a351      	add	r3, pc, #324	; (adr r3, 14d20 <estimator_update_ir_estim+0x27c>)
   14bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14be0:	f002 fda6 	bl	17730 <__aeabi_ddiv>
   14be4:	4602      	mov	r2, r0
   14be6:	460b      	mov	r3, r1
   14be8:	4610      	mov	r0, r2
   14bea:	4619      	mov	r1, r3
   14bec:	f002 ff58 	bl	17aa0 <__aeabi_d2f>
   14bf0:	4603      	mov	r3, r0
   14bf2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14bf4:	e013      	b.n	14c1e <estimator_update_ir_estim+0x17a>
   14bf6:	68f8      	ldr	r0, [r7, #12]
   14bf8:	f002 fc1c 	bl	17434 <__aeabi_f2d>
   14bfc:	4602      	mov	r2, r0
   14bfe:	460b      	mov	r3, r1
   14c00:	4610      	mov	r0, r2
   14c02:	4619      	mov	r1, r3
   14c04:	a340      	add	r3, pc, #256	; (adr r3, 14d08 <estimator_update_ir_estim+0x264>)
   14c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c0a:	f002 fab3 	bl	17174 <__aeabi_dsub>
   14c0e:	4602      	mov	r2, r0
   14c10:	460b      	mov	r3, r1
   14c12:	4610      	mov	r0, r2
   14c14:	4619      	mov	r1, r3
   14c16:	f002 ff43 	bl	17aa0 <__aeabi_d2f>
   14c1a:	4603      	mov	r3, r0
   14c1c:	60fb      	str	r3, [r7, #12]
   14c1e:	68f8      	ldr	r0, [r7, #12]
   14c20:	f002 fc08 	bl	17434 <__aeabi_f2d>
   14c24:	4602      	mov	r2, r0
   14c26:	460b      	mov	r3, r1
   14c28:	4610      	mov	r0, r2
   14c2a:	4619      	mov	r1, r3
   14c2c:	a338      	add	r3, pc, #224	; (adr r3, 14d10 <estimator_update_ir_estim+0x26c>)
   14c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c32:	f002 fee3 	bl	179fc <__aeabi_dcmpgt>
   14c36:	4603      	mov	r3, r0
   14c38:	2b00      	cmp	r3, #0
   14c3a:	d1dc      	bne.n	14bf6 <estimator_update_ir_estim+0x152>
   14c3c:	e013      	b.n	14c66 <estimator_update_ir_estim+0x1c2>
   14c3e:	68f8      	ldr	r0, [r7, #12]
   14c40:	f002 fbf8 	bl	17434 <__aeabi_f2d>
   14c44:	4602      	mov	r2, r0
   14c46:	460b      	mov	r3, r1
   14c48:	4610      	mov	r0, r2
   14c4a:	4619      	mov	r1, r3
   14c4c:	a32e      	add	r3, pc, #184	; (adr r3, 14d08 <estimator_update_ir_estim+0x264>)
   14c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c52:	f002 fa91 	bl	17178 <__adddf3>
   14c56:	4602      	mov	r2, r0
   14c58:	460b      	mov	r3, r1
   14c5a:	4610      	mov	r0, r2
   14c5c:	4619      	mov	r1, r3
   14c5e:	f002 ff1f 	bl	17aa0 <__aeabi_d2f>
   14c62:	4603      	mov	r3, r0
   14c64:	60fb      	str	r3, [r7, #12]
   14c66:	68f8      	ldr	r0, [r7, #12]
   14c68:	f002 fbe4 	bl	17434 <__aeabi_f2d>
   14c6c:	4602      	mov	r2, r0
   14c6e:	460b      	mov	r3, r1
   14c70:	4610      	mov	r0, r2
   14c72:	4619      	mov	r1, r3
   14c74:	a328      	add	r3, pc, #160	; (adr r3, 14d18 <estimator_update_ir_estim+0x274>)
   14c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c7a:	f002 fea1 	bl	179c0 <__aeabi_dcmplt>
   14c7e:	4603      	mov	r3, r0
   14c80:	2b00      	cmp	r3, #0
   14c82:	d1dc      	bne.n	14c3e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   14c84:	f642 7340 	movw	r3, #12096	; 0x2f40
   14c88:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14c8c:	881b      	ldrh	r3, [r3, #0]
   14c8e:	b21b      	sxth	r3, r3
   14c90:	4618      	mov	r0, r3
   14c92:	f003 f80f 	bl	17cb4 <__aeabi_i2f>
   14c96:	4602      	mov	r2, r0
   14c98:	f243 2398 	movw	r3, #12952	; 0x3298
   14c9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ca0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   14ca2:	f243 239c 	movw	r3, #12956	; 0x329c
   14ca6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14caa:	68fa      	ldr	r2, [r7, #12]
   14cac:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   14cae:	68f8      	ldr	r0, [r7, #12]
   14cb0:	f04f 0100 	mov.w	r1, #0
   14cb4:	f003 f9f0 	bl	18098 <__aeabi_fcmplt>
   14cb8:	4603      	mov	r3, r0
   14cba:	2b00      	cmp	r3, #0
   14cbc:	d003      	beq.n	14cc6 <estimator_update_ir_estim+0x222>
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   14cc4:	e000      	b.n	14cc8 <estimator_update_ir_estim+0x224>
   14cc6:	68fb      	ldr	r3, [r7, #12]
   14cc8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   14cca:	6878      	ldr	r0, [r7, #4]
   14ccc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cd0:	f003 f9e2 	bl	18098 <__aeabi_fcmplt>
   14cd4:	4603      	mov	r3, r0
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d100      	bne.n	14cdc <estimator_update_ir_estim+0x238>
   14cda:	e128      	b.n	14f2e <estimator_update_ir_estim+0x48a>
   14cdc:	6878      	ldr	r0, [r7, #4]
   14cde:	f002 fba9 	bl	17434 <__aeabi_f2d>
   14ce2:	4602      	mov	r2, r0
   14ce4:	460b      	mov	r3, r1
   14ce6:	4610      	mov	r0, r2
   14ce8:	4619      	mov	r1, r3
   14cea:	a30f      	add	r3, pc, #60	; (adr r3, 14d28 <estimator_update_ir_estim+0x284>)
   14cec:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cf0:	f002 fe84 	bl	179fc <__aeabi_dcmpgt>
   14cf4:	4603      	mov	r3, r0
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d11a      	bne.n	14d30 <estimator_update_ir_estim+0x28c>
   14cfa:	e118      	b.n	14f2e <estimator_update_ir_estim+0x48a>
   14cfc:	f3af 8000 	nop.w
   14d00:	9999999a 	.word	0x9999999a
   14d04:	3fb99999 	.word	0x3fb99999
   14d08:	54442d18 	.word	0x54442d18
   14d0c:	401921fb 	.word	0x401921fb
   14d10:	54442d18 	.word	0x54442d18
   14d14:	400921fb 	.word	0x400921fb
   14d18:	54442d18 	.word	0x54442d18
   14d1c:	c00921fb 	.word	0xc00921fb
   14d20:	51eb851f 	.word	0x51eb851f
   14d24:	40239eb8 	.word	0x40239eb8
   14d28:	9999999a 	.word	0x9999999a
   14d2c:	3fa99999 	.word	0x3fa99999
   14d30:	f640 2320 	movw	r3, #2592	; 0xa20
   14d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d38:	881b      	ldrh	r3, [r3, #0]
   14d3a:	b21b      	sxth	r3, r3
   14d3c:	425b      	negs	r3, r3
   14d3e:	0fda      	lsrs	r2, r3, #31
   14d40:	4413      	add	r3, r2
   14d42:	105b      	asrs	r3, r3, #1
   14d44:	461a      	mov	r2, r3
   14d46:	f642 7340 	movw	r3, #12096	; 0x2f40
   14d4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14d4e:	881b      	ldrh	r3, [r3, #0]
   14d50:	b21b      	sxth	r3, r3
   14d52:	429a      	cmp	r2, r3
   14d54:	f280 8098 	bge.w	14e88 <estimator_update_ir_estim+0x3e4>
   14d58:	f640 2320 	movw	r3, #2592	; 0xa20
   14d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d60:	881b      	ldrh	r3, [r3, #0]
   14d62:	b21b      	sxth	r3, r3
   14d64:	0fda      	lsrs	r2, r3, #31
   14d66:	4413      	add	r3, r2
   14d68:	105b      	asrs	r3, r3, #1
   14d6a:	b29a      	uxth	r2, r3
   14d6c:	f642 7340 	movw	r3, #12096	; 0x2f40
   14d70:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14d74:	881b      	ldrh	r3, [r3, #0]
   14d76:	b212      	sxth	r2, r2
   14d78:	b21b      	sxth	r3, r3
   14d7a:	429a      	cmp	r2, r3
   14d7c:	f340 8084 	ble.w	14e88 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   14d80:	f243 239c 	movw	r3, #12956	; 0x329c
   14d84:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14d88:	681a      	ldr	r2, [r3, #0]
   14d8a:	f243 2398 	movw	r3, #12952	; 0x3298
   14d8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14d92:	681b      	ldr	r3, [r3, #0]
   14d94:	4610      	mov	r0, r2
   14d96:	4619      	mov	r1, r3
   14d98:	f002 ffe0 	bl	17d5c <__aeabi_fmul>
   14d9c:	4603      	mov	r3, r0
   14d9e:	4618      	mov	r0, r3
   14da0:	f002 fb48 	bl	17434 <__aeabi_f2d>
   14da4:	4604      	mov	r4, r0
   14da6:	460d      	mov	r5, r1
   14da8:	f243 23ac 	movw	r3, #12972	; 0x32ac
   14dac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14db0:	681b      	ldr	r3, [r3, #0]
   14db2:	4618      	mov	r0, r3
   14db4:	f002 fb3e 	bl	17434 <__aeabi_f2d>
   14db8:	4602      	mov	r2, r0
   14dba:	460b      	mov	r3, r1
   14dbc:	4610      	mov	r0, r2
   14dbe:	4619      	mov	r1, r3
   14dc0:	a367      	add	r3, pc, #412	; (adr r3, 14f60 <estimator_update_ir_estim+0x4bc>)
   14dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dc6:	f002 fb89 	bl	174dc <__aeabi_dmul>
   14dca:	4602      	mov	r2, r0
   14dcc:	460b      	mov	r3, r1
   14dce:	4620      	mov	r0, r4
   14dd0:	4629      	mov	r1, r5
   14dd2:	f002 f9d1 	bl	17178 <__adddf3>
   14dd6:	4602      	mov	r2, r0
   14dd8:	460b      	mov	r3, r1
   14dda:	4610      	mov	r0, r2
   14ddc:	4619      	mov	r1, r3
   14dde:	f002 fe5f 	bl	17aa0 <__aeabi_d2f>
   14de2:	4602      	mov	r2, r0
   14de4:	f243 23ac 	movw	r3, #12972	; 0x32ac
   14de8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14dec:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   14dee:	f243 2398 	movw	r3, #12952	; 0x3298
   14df2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14df6:	681a      	ldr	r2, [r3, #0]
   14df8:	f243 2398 	movw	r3, #12952	; 0x3298
   14dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e00:	681b      	ldr	r3, [r3, #0]
   14e02:	4610      	mov	r0, r2
   14e04:	4619      	mov	r1, r3
   14e06:	f002 ffa9 	bl	17d5c <__aeabi_fmul>
   14e0a:	4603      	mov	r3, r0
   14e0c:	4618      	mov	r0, r3
   14e0e:	f002 fb11 	bl	17434 <__aeabi_f2d>
   14e12:	4604      	mov	r4, r0
   14e14:	460d      	mov	r5, r1
   14e16:	f243 23b0 	movw	r3, #12976	; 0x32b0
   14e1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e1e:	681b      	ldr	r3, [r3, #0]
   14e20:	4618      	mov	r0, r3
   14e22:	f002 fb07 	bl	17434 <__aeabi_f2d>
   14e26:	4602      	mov	r2, r0
   14e28:	460b      	mov	r3, r1
   14e2a:	4610      	mov	r0, r2
   14e2c:	4619      	mov	r1, r3
   14e2e:	a34c      	add	r3, pc, #304	; (adr r3, 14f60 <estimator_update_ir_estim+0x4bc>)
   14e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e34:	f002 fb52 	bl	174dc <__aeabi_dmul>
   14e38:	4602      	mov	r2, r0
   14e3a:	460b      	mov	r3, r1
   14e3c:	4620      	mov	r0, r4
   14e3e:	4629      	mov	r1, r5
   14e40:	f002 f99a 	bl	17178 <__adddf3>
   14e44:	4602      	mov	r2, r0
   14e46:	460b      	mov	r3, r1
   14e48:	4610      	mov	r0, r2
   14e4a:	4619      	mov	r1, r3
   14e4c:	f002 fe28 	bl	17aa0 <__aeabi_d2f>
   14e50:	4602      	mov	r2, r0
   14e52:	f243 23b0 	movw	r3, #12976	; 0x32b0
   14e56:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e5a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   14e5c:	f243 23ac 	movw	r3, #12972	; 0x32ac
   14e60:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e64:	681a      	ldr	r2, [r3, #0]
   14e66:	f243 23b0 	movw	r3, #12976	; 0x32b0
   14e6a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	4610      	mov	r0, r2
   14e72:	4619      	mov	r1, r3
   14e74:	f003 f826 	bl	17ec4 <__aeabi_fdiv>
   14e78:	4603      	mov	r3, r0
   14e7a:	461a      	mov	r2, r3
   14e7c:	f243 2394 	movw	r3, #12948	; 0x3294
   14e80:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e84:	601a      	str	r2, [r3, #0]
   14e86:	e052      	b.n	14f2e <estimator_update_ir_estim+0x48a>
   14e88:	e051      	b.n	14f2e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   14e8a:	f243 23a0 	movw	r3, #12960	; 0x32a0
   14e8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14e92:	2201      	movs	r2, #1
   14e94:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   14e96:	f640 2320 	movw	r3, #2592	; 0xa20
   14e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9e:	881b      	ldrh	r3, [r3, #0]
   14ea0:	b21b      	sxth	r3, r3
   14ea2:	4618      	mov	r0, r3
   14ea4:	f002 ff06 	bl	17cb4 <__aeabi_i2f>
   14ea8:	4603      	mov	r3, r0
   14eaa:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   14eac:	6838      	ldr	r0, [r7, #0]
   14eae:	6839      	ldr	r1, [r7, #0]
   14eb0:	f002 ff54 	bl	17d5c <__aeabi_fmul>
   14eb4:	4603      	mov	r3, r0
   14eb6:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   14eb8:	f243 2394 	movw	r3, #12948	; 0x3294
   14ebc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ec0:	681b      	ldr	r3, [r3, #0]
   14ec2:	4618      	mov	r0, r3
   14ec4:	f002 fab6 	bl	17434 <__aeabi_f2d>
   14ec8:	4602      	mov	r2, r0
   14eca:	460b      	mov	r3, r1
   14ecc:	4610      	mov	r0, r2
   14ece:	4619      	mov	r1, r3
   14ed0:	f04f 0200 	mov.w	r2, #0
   14ed4:	f04f 0300 	mov.w	r3, #0
   14ed8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14edc:	f002 fafe 	bl	174dc <__aeabi_dmul>
   14ee0:	4602      	mov	r2, r0
   14ee2:	460b      	mov	r3, r1
   14ee4:	4614      	mov	r4, r2
   14ee6:	461d      	mov	r5, r3
   14ee8:	6838      	ldr	r0, [r7, #0]
   14eea:	f002 faa3 	bl	17434 <__aeabi_f2d>
   14eee:	4602      	mov	r2, r0
   14ef0:	460b      	mov	r3, r1
   14ef2:	4620      	mov	r0, r4
   14ef4:	4629      	mov	r1, r5
   14ef6:	f002 faf1 	bl	174dc <__aeabi_dmul>
   14efa:	4602      	mov	r2, r0
   14efc:	460b      	mov	r3, r1
   14efe:	4610      	mov	r0, r2
   14f00:	4619      	mov	r1, r3
   14f02:	f002 fdcd 	bl	17aa0 <__aeabi_d2f>
   14f06:	4602      	mov	r2, r0
   14f08:	f243 23ac 	movw	r3, #12972	; 0x32ac
   14f0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f10:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   14f12:	6838      	ldr	r0, [r7, #0]
   14f14:	f04f 0100 	mov.w	r1, #0
   14f18:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   14f1c:	f002 ff1e 	bl	17d5c <__aeabi_fmul>
   14f20:	4603      	mov	r3, r0
   14f22:	461a      	mov	r2, r3
   14f24:	f243 23b0 	movw	r3, #12976	; 0x32b0
   14f28:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f2c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   14f2e:	f243 2390 	movw	r3, #12944	; 0x3290
   14f32:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f36:	681a      	ldr	r2, [r3, #0]
   14f38:	f243 23a8 	movw	r3, #12968	; 0x32a8
   14f3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f40:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   14f42:	f642 6310 	movw	r3, #11792	; 0x2e10
   14f46:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f4a:	681a      	ldr	r2, [r3, #0]
   14f4c:	f243 23a4 	movw	r3, #12964	; 0x32a4
   14f50:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f54:	601a      	str	r2, [r3, #0]
}
   14f56:	3710      	adds	r7, #16
   14f58:	46bd      	mov	sp, r7
   14f5a:	bdb0      	pop	{r4, r5, r7, pc}
   14f5c:	f3af 8000 	nop.w
   14f60:	d916872b 	.word	0xd916872b
   14f64:	3feff7ce 	.word	0x3feff7ce

00014f68 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   14f68:	b580      	push	{r7, lr}
   14f6a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   14f6c:	f642 6334 	movw	r3, #11828	; 0x2e34
   14f70:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f74:	781b      	ldrb	r3, [r3, #0]
   14f76:	f003 0320 	and.w	r3, r3, #32
   14f7a:	2b00      	cmp	r3, #0
   14f7c:	d044      	beq.n	15008 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   14f7e:	f642 632c 	movw	r3, #11820	; 0x2e2c
   14f82:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f86:	681a      	ldr	r2, [r3, #0]
   14f88:	f243 2354 	movw	r3, #12884	; 0x3254
   14f8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f90:	601a      	str	r2, [r3, #0]
   14f92:	f642 6330 	movw	r3, #11824	; 0x2e30
   14f96:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14f9a:	681a      	ldr	r2, [r3, #0]
   14f9c:	f243 2358 	movw	r3, #12888	; 0x3258
   14fa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fa4:	601a      	str	r2, [r3, #0]
   14fa6:	f642 6314 	movw	r3, #11796	; 0x2e14
   14faa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fae:	681a      	ldr	r2, [r3, #0]
   14fb0:	f243 235c 	movw	r3, #12892	; 0x325c
   14fb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fb8:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   14fba:	f642 6318 	movw	r3, #11800	; 0x2e18
   14fbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fc2:	681a      	ldr	r2, [r3, #0]
   14fc4:	f243 238c 	movw	r3, #12940	; 0x328c
   14fc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fcc:	601a      	str	r2, [r3, #0]
   14fce:	f642 6320 	movw	r3, #11808	; 0x2e20
   14fd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fd6:	681a      	ldr	r2, [r3, #0]
   14fd8:	f243 2390 	movw	r3, #12944	; 0x3290
   14fdc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fe0:	601a      	str	r2, [r3, #0]
   14fe2:	f642 631c 	movw	r3, #11804	; 0x2e1c
   14fe6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14fea:	681a      	ldr	r2, [r3, #0]
   14fec:	f243 2374 	movw	r3, #12916	; 0x3274
   14ff0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ff4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   14ff6:	f243 2384 	movw	r3, #12932	; 0x3284
   14ffa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   14ffe:	881b      	ldrh	r3, [r3, #0]
   15000:	2b00      	cmp	r3, #0
   15002:	d001      	beq.n	15008 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15004:	f7ff fd4e 	bl	14aa4 <estimator_update_ir_estim>
  }
}
   15008:	bd80      	pop	{r7, pc}
   1500a:	bf00      	nop

0001500c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1500c:	b480      	push	{r7}
   1500e:	af00      	add	r7, sp, #0
  
}
   15010:	46bd      	mov	sp, r7
   15012:	f85d 7b04 	ldr.w	r7, [sp], #4
   15016:	4770      	bx	lr

00015018 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15018:	b5b0      	push	{r4, r5, r7, lr}
   1501a:	b082      	sub	sp, #8
   1501c:	af00      	add	r7, sp, #0
   1501e:	4603      	mov	r3, r0
   15020:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   15022:	f642 4384 	movw	r3, #11396	; 0x2c84
   15026:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1502a:	781b      	ldrb	r3, [r3, #0]
   1502c:	2b01      	cmp	r3, #1
   1502e:	f040 80e0 	bne.w	151f2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15032:	f243 23b4 	movw	r3, #12980	; 0x32b4
   15036:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	2b02      	cmp	r3, #2
   1503e:	d168      	bne.n	15112 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15040:	79fb      	ldrb	r3, [r7, #7]
   15042:	2b00      	cmp	r3, #0
   15044:	d013      	beq.n	1506e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15046:	f640 2324 	movw	r3, #2596	; 0xa24
   1504a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1504e:	881a      	ldrh	r2, [r3, #0]
   15050:	f243 23ba 	movw	r3, #12986	; 0x32ba
   15054:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15058:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1505a:	f642 53a8 	movw	r3, #11688	; 0x2da8
   1505e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15062:	895a      	ldrh	r2, [r3, #10]
   15064:	f243 23b6 	movw	r3, #12982	; 0x32b6
   15068:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1506c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1506e:	f642 53a8 	movw	r3, #11688	; 0x2da8
   15072:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15076:	895b      	ldrh	r3, [r3, #10]
   15078:	b21a      	sxth	r2, r3
   1507a:	f243 23b6 	movw	r3, #12982	; 0x32b6
   1507e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15082:	881b      	ldrh	r3, [r3, #0]
   15084:	b21b      	sxth	r3, r3
   15086:	1ad3      	subs	r3, r2, r3
   15088:	4618      	mov	r0, r3
   1508a:	f002 fe13 	bl	17cb4 <__aeabi_i2f>
   1508e:	4603      	mov	r3, r0
   15090:	4618      	mov	r0, r3
   15092:	f002 f9cf 	bl	17434 <__aeabi_f2d>
   15096:	4602      	mov	r2, r0
   15098:	460b      	mov	r3, r1
   1509a:	4610      	mov	r0, r2
   1509c:	4619      	mov	r1, r3
   1509e:	f04f 0200 	mov.w	r2, #0
   150a2:	f04f 0300 	mov.w	r3, #0
   150a6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   150aa:	f002 fa17 	bl	174dc <__aeabi_dmul>
   150ae:	4602      	mov	r2, r0
   150b0:	460b      	mov	r3, r1
   150b2:	4610      	mov	r0, r2
   150b4:	4619      	mov	r1, r3
   150b6:	f04f 0200 	mov.w	r2, #0
   150ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   150be:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   150c2:	f002 fb35 	bl	17730 <__aeabi_ddiv>
   150c6:	4602      	mov	r2, r0
   150c8:	460b      	mov	r3, r1
   150ca:	4610      	mov	r0, r2
   150cc:	4619      	mov	r1, r3
   150ce:	f002 fc9f 	bl	17a10 <__aeabi_d2iz>
   150d2:	4603      	mov	r3, r0
   150d4:	b29b      	uxth	r3, r3
   150d6:	b29a      	uxth	r2, r3
   150d8:	f243 23ba 	movw	r3, #12986	; 0x32ba
   150dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   150e0:	881b      	ldrh	r3, [r3, #0]
   150e2:	b29b      	uxth	r3, r3
   150e4:	4413      	add	r3, r2
   150e6:	b29b      	uxth	r3, r3
   150e8:	b29a      	uxth	r2, r3
   150ea:	f640 2324 	movw	r3, #2596	; 0xa24
   150ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   150f4:	f640 2324 	movw	r3, #2596	; 0xa24
   150f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150fc:	881b      	ldrh	r3, [r3, #0]
   150fe:	b21b      	sxth	r3, r3
   15100:	4618      	mov	r0, r3
   15102:	f002 fdd7 	bl	17cb4 <__aeabi_i2f>
   15106:	4602      	mov	r2, r0
   15108:	f642 4390 	movw	r3, #11408	; 0x2c90
   1510c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15110:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15112:	f243 23b4 	movw	r3, #12980	; 0x32b4
   15116:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1511a:	781b      	ldrb	r3, [r3, #0]
   1511c:	2b02      	cmp	r3, #2
   1511e:	d168      	bne.n	151f2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15120:	79fb      	ldrb	r3, [r7, #7]
   15122:	2b00      	cmp	r3, #0
   15124:	d013      	beq.n	1514e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15126:	f640 2322 	movw	r3, #2594	; 0xa22
   1512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1512e:	881a      	ldrh	r2, [r3, #0]
   15130:	f243 23bc 	movw	r3, #12988	; 0x32bc
   15134:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15138:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1513a:	f642 53a8 	movw	r3, #11688	; 0x2da8
   1513e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15142:	899a      	ldrh	r2, [r3, #12]
   15144:	f243 23b8 	movw	r3, #12984	; 0x32b8
   15148:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1514c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1514e:	f642 53a8 	movw	r3, #11688	; 0x2da8
   15152:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15156:	899b      	ldrh	r3, [r3, #12]
   15158:	b21a      	sxth	r2, r3
   1515a:	f243 23b8 	movw	r3, #12984	; 0x32b8
   1515e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15162:	881b      	ldrh	r3, [r3, #0]
   15164:	b21b      	sxth	r3, r3
   15166:	1ad3      	subs	r3, r2, r3
   15168:	4618      	mov	r0, r3
   1516a:	f002 fda3 	bl	17cb4 <__aeabi_i2f>
   1516e:	4603      	mov	r3, r0
   15170:	4618      	mov	r0, r3
   15172:	f002 f95f 	bl	17434 <__aeabi_f2d>
   15176:	4602      	mov	r2, r0
   15178:	460b      	mov	r3, r1
   1517a:	4610      	mov	r0, r2
   1517c:	4619      	mov	r1, r3
   1517e:	f04f 0200 	mov.w	r2, #0
   15182:	f04f 0300 	mov.w	r3, #0
   15186:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1518a:	f002 f9a7 	bl	174dc <__aeabi_dmul>
   1518e:	4602      	mov	r2, r0
   15190:	460b      	mov	r3, r1
   15192:	4610      	mov	r0, r2
   15194:	4619      	mov	r1, r3
   15196:	f04f 0200 	mov.w	r2, #0
   1519a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1519e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   151a2:	f002 fac5 	bl	17730 <__aeabi_ddiv>
   151a6:	4602      	mov	r2, r0
   151a8:	460b      	mov	r3, r1
   151aa:	4610      	mov	r0, r2
   151ac:	4619      	mov	r1, r3
   151ae:	f002 fc2f 	bl	17a10 <__aeabi_d2iz>
   151b2:	4603      	mov	r3, r0
   151b4:	b29b      	uxth	r3, r3
   151b6:	b29a      	uxth	r2, r3
   151b8:	f243 23bc 	movw	r3, #12988	; 0x32bc
   151bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   151c0:	881b      	ldrh	r3, [r3, #0]
   151c2:	b29b      	uxth	r3, r3
   151c4:	4413      	add	r3, r2
   151c6:	b29b      	uxth	r3, r3
   151c8:	b29a      	uxth	r2, r3
   151ca:	f640 2322 	movw	r3, #2594	; 0xa22
   151ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   151d4:	f640 2322 	movw	r3, #2594	; 0xa22
   151d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151dc:	881b      	ldrh	r3, [r3, #0]
   151de:	b21b      	sxth	r3, r3
   151e0:	4618      	mov	r0, r3
   151e2:	f002 fd67 	bl	17cb4 <__aeabi_i2f>
   151e6:	4602      	mov	r2, r0
   151e8:	f642 4394 	movw	r3, #11412	; 0x2c94
   151ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   151f0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   151f2:	f642 4384 	movw	r3, #11396	; 0x2c84
   151f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   151fa:	781b      	ldrb	r3, [r3, #0]
   151fc:	2b02      	cmp	r3, #2
   151fe:	f040 80da 	bne.w	153b6 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15202:	f243 23b4 	movw	r3, #12980	; 0x32b4
   15206:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1520a:	781b      	ldrb	r3, [r3, #0]
   1520c:	2b02      	cmp	r3, #2
   1520e:	d165      	bne.n	152dc <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15210:	79fb      	ldrb	r3, [r7, #7]
   15212:	2b00      	cmp	r3, #0
   15214:	d013      	beq.n	1523e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15216:	f640 2338 	movw	r3, #2616	; 0xa38
   1521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521e:	681a      	ldr	r2, [r3, #0]
   15220:	f243 23c0 	movw	r3, #12992	; 0x32c0
   15224:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15228:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1522a:	f642 53a8 	movw	r3, #11688	; 0x2da8
   1522e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15232:	895a      	ldrh	r2, [r3, #10]
   15234:	f243 23b6 	movw	r3, #12982	; 0x32b6
   15238:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1523c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1523e:	f243 23c0 	movw	r3, #12992	; 0x32c0
   15242:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15246:	681b      	ldr	r3, [r3, #0]
   15248:	4618      	mov	r0, r3
   1524a:	f002 f8f3 	bl	17434 <__aeabi_f2d>
   1524e:	4604      	mov	r4, r0
   15250:	460d      	mov	r5, r1
   15252:	f642 53a8 	movw	r3, #11688	; 0x2da8
   15256:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1525a:	895b      	ldrh	r3, [r3, #10]
   1525c:	b21a      	sxth	r2, r3
   1525e:	f243 23b6 	movw	r3, #12982	; 0x32b6
   15262:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15266:	881b      	ldrh	r3, [r3, #0]
   15268:	b21b      	sxth	r3, r3
   1526a:	1ad3      	subs	r3, r2, r3
   1526c:	4618      	mov	r0, r3
   1526e:	f002 fd21 	bl	17cb4 <__aeabi_i2f>
   15272:	4603      	mov	r3, r0
   15274:	4618      	mov	r0, r3
   15276:	f002 f8dd 	bl	17434 <__aeabi_f2d>
   1527a:	4602      	mov	r2, r0
   1527c:	460b      	mov	r3, r1
   1527e:	4610      	mov	r0, r2
   15280:	4619      	mov	r1, r3
   15282:	a34f      	add	r3, pc, #316	; (adr r3, 153c0 <inflight_calib+0x3a8>)
   15284:	e9d3 2300 	ldrd	r2, r3, [r3]
   15288:	f002 f928 	bl	174dc <__aeabi_dmul>
   1528c:	4602      	mov	r2, r0
   1528e:	460b      	mov	r3, r1
   15290:	4610      	mov	r0, r2
   15292:	4619      	mov	r1, r3
   15294:	f04f 0200 	mov.w	r2, #0
   15298:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1529c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   152a0:	f002 fa46 	bl	17730 <__aeabi_ddiv>
   152a4:	4602      	mov	r2, r0
   152a6:	460b      	mov	r3, r1
   152a8:	4620      	mov	r0, r4
   152aa:	4629      	mov	r1, r5
   152ac:	f001 ff64 	bl	17178 <__adddf3>
   152b0:	4602      	mov	r2, r0
   152b2:	460b      	mov	r3, r1
   152b4:	4610      	mov	r0, r2
   152b6:	4619      	mov	r1, r3
   152b8:	f002 fbf2 	bl	17aa0 <__aeabi_d2f>
   152bc:	4602      	mov	r2, r0
   152be:	f640 2338 	movw	r3, #2616	; 0xa38
   152c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   152c8:	f640 2338 	movw	r3, #2616	; 0xa38
   152cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d0:	681a      	ldr	r2, [r3, #0]
   152d2:	f642 4390 	movw	r3, #11408	; 0x2c90
   152d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   152da:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   152dc:	f243 23b4 	movw	r3, #12980	; 0x32b4
   152e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   152e4:	781b      	ldrb	r3, [r3, #0]
   152e6:	2b02      	cmp	r3, #2
   152e8:	d165      	bne.n	153b6 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   152ea:	79fb      	ldrb	r3, [r7, #7]
   152ec:	2b00      	cmp	r3, #0
   152ee:	d013      	beq.n	15318 <inflight_calib+0x300>
        max_roll_init = max_roll;
   152f0:	f640 233c 	movw	r3, #2620	; 0xa3c
   152f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f8:	681a      	ldr	r2, [r3, #0]
   152fa:	f243 23c4 	movw	r3, #12996	; 0x32c4
   152fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15302:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15304:	f642 53a8 	movw	r3, #11688	; 0x2da8
   15308:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1530c:	899a      	ldrh	r2, [r3, #12]
   1530e:	f243 23b8 	movw	r3, #12984	; 0x32b8
   15312:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15316:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15318:	f243 23c4 	movw	r3, #12996	; 0x32c4
   1531c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15320:	681b      	ldr	r3, [r3, #0]
   15322:	4618      	mov	r0, r3
   15324:	f002 f886 	bl	17434 <__aeabi_f2d>
   15328:	4604      	mov	r4, r0
   1532a:	460d      	mov	r5, r1
   1532c:	f642 53a8 	movw	r3, #11688	; 0x2da8
   15330:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15334:	899b      	ldrh	r3, [r3, #12]
   15336:	b21a      	sxth	r2, r3
   15338:	f243 23b8 	movw	r3, #12984	; 0x32b8
   1533c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15340:	881b      	ldrh	r3, [r3, #0]
   15342:	b21b      	sxth	r3, r3
   15344:	1ad3      	subs	r3, r2, r3
   15346:	4618      	mov	r0, r3
   15348:	f002 fcb4 	bl	17cb4 <__aeabi_i2f>
   1534c:	4603      	mov	r3, r0
   1534e:	4618      	mov	r0, r3
   15350:	f002 f870 	bl	17434 <__aeabi_f2d>
   15354:	4602      	mov	r2, r0
   15356:	460b      	mov	r3, r1
   15358:	4610      	mov	r0, r2
   1535a:	4619      	mov	r1, r3
   1535c:	a31a      	add	r3, pc, #104	; (adr r3, 153c8 <inflight_calib+0x3b0>)
   1535e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15362:	f002 f8bb 	bl	174dc <__aeabi_dmul>
   15366:	4602      	mov	r2, r0
   15368:	460b      	mov	r3, r1
   1536a:	4610      	mov	r0, r2
   1536c:	4619      	mov	r1, r3
   1536e:	f04f 0200 	mov.w	r2, #0
   15372:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15376:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1537a:	f002 f9d9 	bl	17730 <__aeabi_ddiv>
   1537e:	4602      	mov	r2, r0
   15380:	460b      	mov	r3, r1
   15382:	4620      	mov	r0, r4
   15384:	4629      	mov	r1, r5
   15386:	f001 fef7 	bl	17178 <__adddf3>
   1538a:	4602      	mov	r2, r0
   1538c:	460b      	mov	r3, r1
   1538e:	4610      	mov	r0, r2
   15390:	4619      	mov	r1, r3
   15392:	f002 fb85 	bl	17aa0 <__aeabi_d2f>
   15396:	4602      	mov	r2, r0
   15398:	f640 233c 	movw	r3, #2620	; 0xa3c
   1539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   153a2:	f640 233c 	movw	r3, #2620	; 0xa3c
   153a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153aa:	681a      	ldr	r2, [r3, #0]
   153ac:	f642 4394 	movw	r3, #11412	; 0x2c94
   153b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   153b4:	601a      	str	r2, [r3, #0]
    }
  }
}
   153b6:	3708      	adds	r7, #8
   153b8:	46bd      	mov	sp, r7
   153ba:	bdb0      	pop	{r4, r5, r7, pc}
   153bc:	f3af 8000 	nop.w
   153c0:	9999999a 	.word	0x9999999a
   153c4:	3fb99999 	.word	0x3fb99999
   153c8:	9999999a 	.word	0x9999999a
   153cc:	bfc99999 	.word	0xbfc99999

000153d0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   153d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   153d4:	b08e      	sub	sp, #56	; 0x38
   153d6:	af00      	add	r7, sp, #0
   153d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   153dc:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   153e0:	a357      	add	r3, pc, #348	; (adr r3, 15540 <pp_atan2+0x170>)
   153e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   153e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   153ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   153ee:	f04f 0200 	mov.w	r2, #0
   153f2:	f04f 0300 	mov.w	r3, #0
   153f6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   153fa:	f002 f86f 	bl	174dc <__aeabi_dmul>
   153fe:	4602      	mov	r2, r0
   15400:	460b      	mov	r3, r1
   15402:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15406:	e9d7 0100 	ldrd	r0, r1, [r7]
   1540a:	f04f 0200 	mov.w	r2, #0
   1540e:	f04f 0300 	mov.w	r3, #0
   15412:	f002 fad5 	bl	179c0 <__aeabi_dcmplt>
   15416:	4603      	mov	r3, r0
   15418:	2b00      	cmp	r3, #0
   1541a:	d009      	beq.n	15430 <pp_atan2+0x60>
   1541c:	a14a      	add	r1, pc, #296	; (adr r1, 15548 <pp_atan2+0x178>)
   1541e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15422:	e9d7 2300 	ldrd	r2, r3, [r7]
   15426:	f001 fea5 	bl	17174 <__aeabi_dsub>
   1542a:	4602      	mov	r2, r0
   1542c:	460b      	mov	r3, r1
   1542e:	e008      	b.n	15442 <pp_atan2+0x72>
   15430:	e9d7 0100 	ldrd	r0, r1, [r7]
   15434:	a344      	add	r3, pc, #272	; (adr r3, 15548 <pp_atan2+0x178>)
   15436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1543a:	f001 fe9d 	bl	17178 <__adddf3>
   1543e:	4602      	mov	r2, r0
   15440:	460b      	mov	r3, r1
   15442:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1544a:	f04f 0200 	mov.w	r2, #0
   1544e:	f04f 0300 	mov.w	r3, #0
   15452:	f002 fad3 	bl	179fc <__aeabi_dcmpgt>
   15456:	4603      	mov	r3, r0
   15458:	2b00      	cmp	r3, #0
   1545a:	d02a      	beq.n	154b2 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   1545c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15464:	f001 fe86 	bl	17174 <__aeabi_dsub>
   15468:	4602      	mov	r2, r0
   1546a:	460b      	mov	r3, r1
   1546c:	4690      	mov	r8, r2
   1546e:	4699      	mov	r9, r3
   15470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15478:	f001 fe7e 	bl	17178 <__adddf3>
   1547c:	4602      	mov	r2, r0
   1547e:	460b      	mov	r3, r1
   15480:	4640      	mov	r0, r8
   15482:	4649      	mov	r1, r9
   15484:	f002 f954 	bl	17730 <__aeabi_ddiv>
   15488:	4602      	mov	r2, r0
   1548a:	460b      	mov	r3, r1
   1548c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15498:	f002 f820 	bl	174dc <__aeabi_dmul>
   1549c:	4602      	mov	r2, r0
   1549e:	460b      	mov	r3, r1
   154a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   154a4:	f001 fe66 	bl	17174 <__aeabi_dsub>
   154a8:	4602      	mov	r2, r0
   154aa:	460b      	mov	r3, r1
   154ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   154b0:	e029      	b.n	15506 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   154b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   154b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   154ba:	f001 fe5d 	bl	17178 <__adddf3>
   154be:	4602      	mov	r2, r0
   154c0:	460b      	mov	r3, r1
   154c2:	4690      	mov	r8, r2
   154c4:	4699      	mov	r9, r3
   154c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   154ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   154ce:	f001 fe51 	bl	17174 <__aeabi_dsub>
   154d2:	4602      	mov	r2, r0
   154d4:	460b      	mov	r3, r1
   154d6:	4640      	mov	r0, r8
   154d8:	4649      	mov	r1, r9
   154da:	f002 f929 	bl	17730 <__aeabi_ddiv>
   154de:	4602      	mov	r2, r0
   154e0:	460b      	mov	r3, r1
   154e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   154e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   154ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   154ee:	f001 fff5 	bl	174dc <__aeabi_dmul>
   154f2:	4602      	mov	r2, r0
   154f4:	460b      	mov	r3, r1
   154f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   154fa:	f001 fe3b 	bl	17174 <__aeabi_dsub>
   154fe:	4602      	mov	r2, r0
   15500:	460b      	mov	r3, r1
   15502:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15506:	e9d7 0100 	ldrd	r0, r1, [r7]
   1550a:	f04f 0200 	mov.w	r2, #0
   1550e:	f04f 0300 	mov.w	r3, #0
   15512:	f002 fa55 	bl	179c0 <__aeabi_dcmplt>
   15516:	4603      	mov	r3, r0
   15518:	2b00      	cmp	r3, #0
   1551a:	d004      	beq.n	15526 <pp_atan2+0x156>
		return (-angle);
   1551c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15520:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15524:	e001      	b.n	1552a <pp_atan2+0x15a>
	else
		return angle;
   15526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   1552a:	4622      	mov	r2, r4
   1552c:	462b      	mov	r3, r5
}
   1552e:	4610      	mov	r0, r2
   15530:	4619      	mov	r1, r3
   15532:	3738      	adds	r7, #56	; 0x38
   15534:	46bd      	mov	sp, r7
   15536:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   1553a:	bf00      	nop
   1553c:	f3af 8000 	nop.w
   15540:	54442d18 	.word	0x54442d18
   15544:	3fe921fb 	.word	0x3fe921fb
   15548:	d9d7bdbb 	.word	0xd9d7bdbb
   1554c:	3ddb7cdf 	.word	0x3ddb7cdf

00015550 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15550:	b5b0      	push	{r4, r5, r7, lr}
   15552:	b08c      	sub	sp, #48	; 0x30
   15554:	af00      	add	r7, sp, #0
   15556:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   1555a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1555e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15562:	2301      	movs	r3, #1
   15564:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15566:	e00a      	b.n	1557e <pp_sin+0x2e>
   15568:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1556c:	a35a      	add	r3, pc, #360	; (adr r3, 156d8 <pp_sin+0x188>)
   1556e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15572:	f001 fe01 	bl	17178 <__adddf3>
   15576:	4602      	mov	r2, r0
   15578:	460b      	mov	r3, r1
   1557a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1557e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15582:	a357      	add	r3, pc, #348	; (adr r3, 156e0 <pp_sin+0x190>)
   15584:	e9d3 2300 	ldrd	r2, r3, [r3]
   15588:	f002 fa1a 	bl	179c0 <__aeabi_dcmplt>
   1558c:	4603      	mov	r3, r0
   1558e:	2b00      	cmp	r3, #0
   15590:	d1ea      	bne.n	15568 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15592:	e00a      	b.n	155aa <pp_sin+0x5a>
   15594:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15598:	a34f      	add	r3, pc, #316	; (adr r3, 156d8 <pp_sin+0x188>)
   1559a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1559e:	f001 fde9 	bl	17174 <__aeabi_dsub>
   155a2:	4602      	mov	r2, r0
   155a4:	460b      	mov	r3, r1
   155a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   155aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155ae:	a34e      	add	r3, pc, #312	; (adr r3, 156e8 <pp_sin+0x198>)
   155b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   155b4:	f002 fa22 	bl	179fc <__aeabi_dcmpgt>
   155b8:	4603      	mov	r3, r0
   155ba:	2b00      	cmp	r3, #0
   155bc:	d1ea      	bne.n	15594 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   155be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155c2:	a34b      	add	r3, pc, #300	; (adr r3, 156f0 <pp_sin+0x1a0>)
   155c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   155c8:	f002 fa18 	bl	179fc <__aeabi_dcmpgt>
   155cc:	4603      	mov	r3, r0
   155ce:	2b00      	cmp	r3, #0
   155d0:	d00d      	beq.n	155ee <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   155d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155d6:	a348      	add	r3, pc, #288	; (adr r3, 156f8 <pp_sin+0x1a8>)
   155d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   155dc:	f001 fdca 	bl	17174 <__aeabi_dsub>
   155e0:	4602      	mov	r2, r0
   155e2:	460b      	mov	r3, r1
   155e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   155e8:	f04f 33ff 	mov.w	r3, #4294967295
   155ec:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   155ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155f2:	a343      	add	r3, pc, #268	; (adr r3, 15700 <pp_sin+0x1b0>)
   155f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   155f8:	f002 f89a 	bl	17730 <__aeabi_ddiv>
   155fc:	4602      	mov	r2, r0
   155fe:	460b      	mov	r3, r1
   15600:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15604:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1560c:	f001 ff66 	bl	174dc <__aeabi_dmul>
   15610:	4602      	mov	r2, r0
   15612:	460b      	mov	r3, r1
   15614:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1561c:	a33a      	add	r3, pc, #232	; (adr r3, 15708 <pp_sin+0x1b8>)
   1561e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15622:	f001 ff5b 	bl	174dc <__aeabi_dmul>
   15626:	4602      	mov	r2, r0
   15628:	460b      	mov	r3, r1
	      - .00467376557) * q2
   1562a:	4610      	mov	r0, r2
   1562c:	4619      	mov	r1, r3
   1562e:	a338      	add	r3, pc, #224	; (adr r3, 15710 <pp_sin+0x1c0>)
   15630:	e9d3 2300 	ldrd	r2, r3, [r3]
   15634:	f001 fd9e 	bl	17174 <__aeabi_dsub>
   15638:	4602      	mov	r2, r0
   1563a:	460b      	mov	r3, r1
   1563c:	4610      	mov	r0, r2
   1563e:	4619      	mov	r1, r3
   15640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15644:	f001 ff4a 	bl	174dc <__aeabi_dmul>
   15648:	4602      	mov	r2, r0
   1564a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   1564c:	4610      	mov	r0, r2
   1564e:	4619      	mov	r1, r3
   15650:	a331      	add	r3, pc, #196	; (adr r3, 15718 <pp_sin+0x1c8>)
   15652:	e9d3 2300 	ldrd	r2, r3, [r3]
   15656:	f001 fd8f 	bl	17178 <__adddf3>
   1565a:	4602      	mov	r2, r0
   1565c:	460b      	mov	r3, r1
   1565e:	4610      	mov	r0, r2
   15660:	4619      	mov	r1, r3
   15662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15666:	f001 ff39 	bl	174dc <__aeabi_dmul>
   1566a:	4602      	mov	r2, r0
   1566c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   1566e:	4610      	mov	r0, r2
   15670:	4619      	mov	r1, r3
   15672:	a32b      	add	r3, pc, #172	; (adr r3, 15720 <pp_sin+0x1d0>)
   15674:	e9d3 2300 	ldrd	r2, r3, [r3]
   15678:	f001 fd7c 	bl	17174 <__aeabi_dsub>
   1567c:	4602      	mov	r2, r0
   1567e:	460b      	mov	r3, r1
   15680:	4610      	mov	r0, r2
   15682:	4619      	mov	r1, r3
   15684:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15688:	f001 ff28 	bl	174dc <__aeabi_dmul>
   1568c:	4602      	mov	r2, r0
   1568e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15690:	4610      	mov	r0, r2
   15692:	4619      	mov	r1, r3
   15694:	a324      	add	r3, pc, #144	; (adr r3, 15728 <pp_sin+0x1d8>)
   15696:	e9d3 2300 	ldrd	r2, r3, [r3]
   1569a:	f001 fd6d 	bl	17178 <__adddf3>
   1569e:	4602      	mov	r2, r0
   156a0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   156a2:	4610      	mov	r0, r2
   156a4:	4619      	mov	r1, r3
   156a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   156aa:	f001 ff17 	bl	174dc <__aeabi_dmul>
   156ae:	4602      	mov	r2, r0
   156b0:	460b      	mov	r3, r1
   156b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   156b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156b8:	2b00      	cmp	r3, #0
   156ba:	da04      	bge.n	156c6 <pp_sin+0x176>
   156bc:	68bc      	ldr	r4, [r7, #8]
   156be:	68fb      	ldr	r3, [r7, #12]
   156c0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   156c4:	e001      	b.n	156ca <pp_sin+0x17a>
   156c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   156ca:	4622      	mov	r2, r4
   156cc:	462b      	mov	r3, r5
}
   156ce:	4610      	mov	r0, r2
   156d0:	4619      	mov	r1, r3
   156d2:	3730      	adds	r7, #48	; 0x30
   156d4:	46bd      	mov	sp, r7
   156d6:	bdb0      	pop	{r4, r5, r7, pc}
   156d8:	54442d18 	.word	0x54442d18
   156dc:	401921fb 	.word	0x401921fb
   156e0:	54442d18 	.word	0x54442d18
   156e4:	bff921fb 	.word	0xbff921fb
   156e8:	7f3321d2 	.word	0x7f3321d2
   156ec:	4012d97c 	.word	0x4012d97c
   156f0:	54442d18 	.word	0x54442d18
   156f4:	3ff921fb 	.word	0x3ff921fb
   156f8:	54442d18 	.word	0x54442d18
   156fc:	400921fb 	.word	0x400921fb
   15700:	5443d6f4 	.word	0x5443d6f4
   15704:	3ff921fb 	.word	0x3ff921fb
   15708:	48a890af 	.word	0x48a890af
   1570c:	3f23daf7 	.word	0x3f23daf7
   15710:	645b6d0e 	.word	0x645b6d0e
   15714:	3f7324cc 	.word	0x3f7324cc
   15718:	f65619a5 	.word	0xf65619a5
   1571c:	3fb4668a 	.word	0x3fb4668a
   15720:	16acf9cd 	.word	0x16acf9cd
   15724:	3fe4abbc 	.word	0x3fe4abbc
   15728:	520817f7 	.word	0x520817f7
   1572c:	3ff921fb 	.word	0x3ff921fb

00015730 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15730:	b480      	push	{r7}
   15732:	b083      	sub	sp, #12
   15734:	af00      	add	r7, sp, #0
   15736:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   1573a:	4610      	mov	r0, r2
   1573c:	4619      	mov	r1, r3
   1573e:	370c      	adds	r7, #12
   15740:	46bd      	mov	sp, r7
   15742:	f85d 7b04 	ldr.w	r7, [sp], #4
   15746:	4770      	bx	lr

00015748 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15748:	b480      	push	{r7}
   1574a:	b083      	sub	sp, #12
   1574c:	af00      	add	r7, sp, #0
   1574e:	4603      	mov	r3, r0
   15750:	6039      	str	r1, [r7, #0]
   15752:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15754:	79fa      	ldrb	r2, [r7, #7]
   15756:	f243 23d8 	movw	r3, #13016	; 0x32d8
   1575a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1575e:	6839      	ldr	r1, [r7, #0]
   15760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15764:	370c      	adds	r7, #12
   15766:	46bd      	mov	sp, r7
   15768:	f85d 7b04 	ldr.w	r7, [sp], #4
   1576c:	4770      	bx	lr
   1576e:	bf00      	nop

00015770 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15770:	b480      	push	{r7}
   15772:	b083      	sub	sp, #12
   15774:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15776:	f242 0315 	movw	r3, #8213	; 0x2015
   1577a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1577e:	2200      	movs	r2, #0
   15780:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15782:	f242 0314 	movw	r3, #8212	; 0x2014
   15786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1578a:	2200      	movs	r2, #0
   1578c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   1578e:	f242 0307 	movw	r3, #8199	; 0x2007
   15792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15796:	22c0      	movs	r2, #192	; 0xc0
   15798:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   1579a:	f242 0306 	movw	r3, #8198	; 0x2006
   1579e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157a2:	22cf      	movs	r2, #207	; 0xcf
   157a4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   157a6:	2300      	movs	r3, #0
   157a8:	71fb      	strb	r3, [r7, #7]
   157aa:	e00a      	b.n	157c2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   157ac:	79fa      	ldrb	r2, [r7, #7]
   157ae:	f243 23d8 	movw	r3, #13016	; 0x32d8
   157b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   157b6:	2100      	movs	r1, #0
   157b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   157bc:	79fb      	ldrb	r3, [r7, #7]
   157be:	3301      	adds	r3, #1
   157c0:	71fb      	strb	r3, [r7, #7]
   157c2:	79fb      	ldrb	r3, [r7, #7]
   157c4:	2b07      	cmp	r3, #7
   157c6:	d9f1      	bls.n	157ac <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   157c8:	370c      	adds	r7, #12
   157ca:	46bd      	mov	sp, r7
   157cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   157d0:	4770      	bx	lr
   157d2:	bf00      	nop

000157d4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   157d4:	b480      	push	{r7}
   157d6:	b083      	sub	sp, #12
   157d8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   157da:	f242 0326 	movw	r3, #8230	; 0x2026
   157de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157e2:	881b      	ldrh	r3, [r3, #0]
   157e4:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   157e6:	f243 3334 	movw	r3, #13108	; 0x3334
   157ea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   157ee:	881b      	ldrh	r3, [r3, #0]
   157f0:	88fa      	ldrh	r2, [r7, #6]
   157f2:	1ad3      	subs	r3, r2, r3
   157f4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   157f6:	f243 3334 	movw	r3, #13108	; 0x3334
   157fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   157fe:	88fa      	ldrh	r2, [r7, #6]
   15800:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15802:	f243 3336 	movw	r3, #13110	; 0x3336
   15806:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1580a:	781b      	ldrb	r3, [r3, #0]
   1580c:	2b00      	cmp	r3, #0
   1580e:	d11e      	bne.n	1584e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15810:	f242 0324 	movw	r3, #8228	; 0x2024
   15814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1581c:	f243 3337 	movw	r3, #13111	; 0x3337
   15820:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15824:	781b      	ldrb	r3, [r3, #0]
   15826:	78fa      	ldrb	r2, [r7, #3]
   15828:	1ad3      	subs	r3, r2, r3
   1582a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   1582c:	f243 3337 	movw	r3, #13111	; 0x3337
   15830:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15834:	78fa      	ldrb	r2, [r7, #3]
   15836:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15838:	78bb      	ldrb	r3, [r7, #2]
   1583a:	2b6d      	cmp	r3, #109	; 0x6d
   1583c:	d906      	bls.n	1584c <__vector_34+0x78>
      state = 1;
   1583e:	f243 3336 	movw	r3, #13110	; 0x3336
   15842:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15846:	2201      	movs	r2, #1
   15848:	701a      	strb	r2, [r3, #0]
   1584a:	e053      	b.n	158f4 <__vector_34+0x120>
   1584c:	e052      	b.n	158f4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   1584e:	88bb      	ldrh	r3, [r7, #4]
   15850:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15854:	d304      	bcc.n	15860 <__vector_34+0x8c>
   15856:	88ba      	ldrh	r2, [r7, #4]
   15858:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   1585c:	429a      	cmp	r2, r3
   1585e:	d911      	bls.n	15884 <__vector_34+0xb0>
      RestartPpmCycle();
   15860:	f243 3336 	movw	r3, #13110	; 0x3336
   15864:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15868:	2200      	movs	r2, #0
   1586a:	701a      	strb	r2, [r3, #0]
   1586c:	f242 0324 	movw	r3, #8228	; 0x2024
   15870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15874:	781b      	ldrb	r3, [r3, #0]
   15876:	b2da      	uxtb	r2, r3
   15878:	f243 3337 	movw	r3, #13111	; 0x3337
   1587c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15880:	701a      	strb	r2, [r3, #0]
   15882:	e038      	b.n	158f6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15884:	f243 3336 	movw	r3, #13110	; 0x3336
   15888:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1588c:	781b      	ldrb	r3, [r3, #0]
   1588e:	1e5a      	subs	r2, r3, #1
   15890:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15894:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15898:	88b9      	ldrh	r1, [r7, #4]
   1589a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   1589e:	f243 3336 	movw	r3, #13110	; 0x3336
   158a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158a6:	781b      	ldrb	r3, [r3, #0]
   158a8:	2b08      	cmp	r3, #8
   158aa:	d917      	bls.n	158dc <__vector_34+0x108>
      ppm_valid	= 1;
   158ac:	f243 3333 	movw	r3, #13107	; 0x3333
   158b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158b4:	2201      	movs	r2, #1
   158b6:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   158b8:	f243 3336 	movw	r3, #13110	; 0x3336
   158bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158c0:	2200      	movs	r2, #0
   158c2:	701a      	strb	r2, [r3, #0]
   158c4:	f242 0324 	movw	r3, #8228	; 0x2024
   158c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158cc:	781b      	ldrb	r3, [r3, #0]
   158ce:	b2da      	uxtb	r2, r3
   158d0:	f243 3337 	movw	r3, #13111	; 0x3337
   158d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158d8:	701a      	strb	r2, [r3, #0]
   158da:	e00c      	b.n	158f6 <__vector_34+0x122>
    } else 
      state++;
   158dc:	f243 3336 	movw	r3, #13110	; 0x3336
   158e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158e4:	781b      	ldrb	r3, [r3, #0]
   158e6:	3301      	adds	r3, #1
   158e8:	b2da      	uxtb	r2, r3
   158ea:	f243 3336 	movw	r3, #13110	; 0x3336
   158ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
   158f2:	701a      	strb	r2, [r3, #0]
  }
  return;
   158f4:	bf00      	nop
}
   158f6:	370c      	adds	r7, #12
   158f8:	46bd      	mov	sp, r7
   158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   158fe:	4770      	bx	lr

00015900 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15900:	b590      	push	{r4, r7, lr}
   15902:	b083      	sub	sp, #12
   15904:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15906:	f243 23f8 	movw	r3, #13048	; 0x32f8
   1590a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1590e:	881b      	ldrh	r3, [r3, #0]
   15910:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15914:	b29b      	uxth	r3, r3
   15916:	80fb      	strh	r3, [r7, #6]
   15918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1591c:	4618      	mov	r0, r3
   1591e:	f002 f9c9 	bl	17cb4 <__aeabi_i2f>
   15922:	4603      	mov	r3, r0
   15924:	4618      	mov	r0, r3
   15926:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1592a:	f002 fa17 	bl	17d5c <__aeabi_fmul>
   1592e:	4603      	mov	r3, r0
   15930:	4618      	mov	r0, r3
   15932:	f002 fbd9 	bl	180e8 <__aeabi_f2iz>
   15936:	4603      	mov	r3, r0
   15938:	b29a      	uxth	r2, r3
   1593a:	f243 330c 	movw	r3, #13068	; 0x330c
   1593e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15942:	801a      	strh	r2, [r3, #0]
   15944:	f243 330c 	movw	r3, #13068	; 0x330c
   15948:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1594c:	881b      	ldrh	r3, [r3, #0]
   1594e:	b21b      	sxth	r3, r3
   15950:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15954:	dd07      	ble.n	15966 <last_radio_from_ppm+0x66>
   15956:	f243 330c 	movw	r3, #13068	; 0x330c
   1595a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1595e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15962:	801a      	strh	r2, [r3, #0]
   15964:	e00d      	b.n	15982 <last_radio_from_ppm+0x82>
   15966:	f243 330c 	movw	r3, #13068	; 0x330c
   1596a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1596e:	881b      	ldrh	r3, [r3, #0]
   15970:	b21b      	sxth	r3, r3
   15972:	2b00      	cmp	r3, #0
   15974:	da05      	bge.n	15982 <last_radio_from_ppm+0x82>
   15976:	f243 330c 	movw	r3, #13068	; 0x330c
   1597a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1597e:	2200      	movs	r2, #0
   15980:	801a      	strh	r2, [r3, #0]
   15982:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15986:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1598a:	885b      	ldrh	r3, [r3, #2]
   1598c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15990:	b29b      	uxth	r3, r3
   15992:	80fb      	strh	r3, [r7, #6]
   15994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15998:	4618      	mov	r0, r3
   1599a:	f002 f98b 	bl	17cb4 <__aeabi_i2f>
   1599e:	4603      	mov	r3, r0
   159a0:	4618      	mov	r0, r3
   159a2:	f002 fba1 	bl	180e8 <__aeabi_f2iz>
   159a6:	4603      	mov	r3, r0
   159a8:	b29a      	uxth	r2, r3
   159aa:	f243 330c 	movw	r3, #13068	; 0x330c
   159ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159b2:	805a      	strh	r2, [r3, #2]
   159b4:	f243 330c 	movw	r3, #13068	; 0x330c
   159b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159bc:	885b      	ldrh	r3, [r3, #2]
   159be:	b21b      	sxth	r3, r3
   159c0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   159c4:	dd07      	ble.n	159d6 <last_radio_from_ppm+0xd6>
   159c6:	f243 330c 	movw	r3, #13068	; 0x330c
   159ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   159d2:	805a      	strh	r2, [r3, #2]
   159d4:	e00f      	b.n	159f6 <last_radio_from_ppm+0xf6>
   159d6:	f243 330c 	movw	r3, #13068	; 0x330c
   159da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159de:	885b      	ldrh	r3, [r3, #2]
   159e0:	b21b      	sxth	r3, r3
   159e2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   159e6:	da06      	bge.n	159f6 <last_radio_from_ppm+0xf6>
   159e8:	f243 330c 	movw	r3, #13068	; 0x330c
   159ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159f0:	f64d 2280 	movw	r2, #55936	; 0xda80
   159f4:	805a      	strh	r2, [r3, #2]
   159f6:	f243 23f8 	movw	r3, #13048	; 0x32f8
   159fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   159fe:	889b      	ldrh	r3, [r3, #4]
   15a00:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15a04:	b29b      	uxth	r3, r3
   15a06:	80fb      	strh	r3, [r7, #6]
   15a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15a0c:	4618      	mov	r0, r3
   15a0e:	f002 f951 	bl	17cb4 <__aeabi_i2f>
   15a12:	4603      	mov	r3, r0
   15a14:	4618      	mov	r0, r3
   15a16:	f002 fb67 	bl	180e8 <__aeabi_f2iz>
   15a1a:	4603      	mov	r3, r0
   15a1c:	b29a      	uxth	r2, r3
   15a1e:	f243 330c 	movw	r3, #13068	; 0x330c
   15a22:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a26:	809a      	strh	r2, [r3, #4]
   15a28:	f243 330c 	movw	r3, #13068	; 0x330c
   15a2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a30:	889b      	ldrh	r3, [r3, #4]
   15a32:	b21b      	sxth	r3, r3
   15a34:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15a38:	dd07      	ble.n	15a4a <last_radio_from_ppm+0x14a>
   15a3a:	f243 330c 	movw	r3, #13068	; 0x330c
   15a3e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a42:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15a46:	809a      	strh	r2, [r3, #4]
   15a48:	e00f      	b.n	15a6a <last_radio_from_ppm+0x16a>
   15a4a:	f243 330c 	movw	r3, #13068	; 0x330c
   15a4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a52:	889b      	ldrh	r3, [r3, #4]
   15a54:	b21b      	sxth	r3, r3
   15a56:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15a5a:	da06      	bge.n	15a6a <last_radio_from_ppm+0x16a>
   15a5c:	f243 330c 	movw	r3, #13068	; 0x330c
   15a60:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a64:	f64d 2280 	movw	r2, #55936	; 0xda80
   15a68:	809a      	strh	r2, [r3, #4]
   15a6a:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15a6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a72:	88db      	ldrh	r3, [r3, #6]
   15a74:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15a78:	b29b      	uxth	r3, r3
   15a7a:	80fb      	strh	r3, [r7, #6]
   15a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15a80:	4618      	mov	r0, r3
   15a82:	f002 f917 	bl	17cb4 <__aeabi_i2f>
   15a86:	4603      	mov	r3, r0
   15a88:	4618      	mov	r0, r3
   15a8a:	f002 fb2d 	bl	180e8 <__aeabi_f2iz>
   15a8e:	4603      	mov	r3, r0
   15a90:	b29a      	uxth	r2, r3
   15a92:	f243 330c 	movw	r3, #13068	; 0x330c
   15a96:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15a9a:	80da      	strh	r2, [r3, #6]
   15a9c:	f243 330c 	movw	r3, #13068	; 0x330c
   15aa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15aa4:	88db      	ldrh	r3, [r3, #6]
   15aa6:	b21b      	sxth	r3, r3
   15aa8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15aac:	dd07      	ble.n	15abe <last_radio_from_ppm+0x1be>
   15aae:	f243 330c 	movw	r3, #13068	; 0x330c
   15ab2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ab6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15aba:	80da      	strh	r2, [r3, #6]
   15abc:	e00f      	b.n	15ade <last_radio_from_ppm+0x1de>
   15abe:	f243 330c 	movw	r3, #13068	; 0x330c
   15ac2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ac6:	88db      	ldrh	r3, [r3, #6]
   15ac8:	b21b      	sxth	r3, r3
   15aca:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ace:	da06      	bge.n	15ade <last_radio_from_ppm+0x1de>
   15ad0:	f243 330c 	movw	r3, #13068	; 0x330c
   15ad4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ad8:	f64d 2280 	movw	r2, #55936	; 0xda80
   15adc:	80da      	strh	r2, [r3, #6]
   15ade:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15ae2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ae6:	891b      	ldrh	r3, [r3, #8]
   15ae8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15aec:	b29b      	uxth	r3, r3
   15aee:	80fb      	strh	r3, [r7, #6]
   15af0:	f243 3320 	movw	r3, #13088	; 0x3320
   15af4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15af8:	891b      	ldrh	r3, [r3, #8]
   15afa:	b21b      	sxth	r3, r3
   15afc:	4618      	mov	r0, r3
   15afe:	f002 f8d9 	bl	17cb4 <__aeabi_i2f>
   15b02:	4604      	mov	r4, r0
   15b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15b08:	4618      	mov	r0, r3
   15b0a:	f002 f8d3 	bl	17cb4 <__aeabi_i2f>
   15b0e:	4603      	mov	r3, r0
   15b10:	4618      	mov	r0, r3
   15b12:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15b16:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15b1a:	f002 f91f 	bl	17d5c <__aeabi_fmul>
   15b1e:	4603      	mov	r3, r0
   15b20:	4620      	mov	r0, r4
   15b22:	4619      	mov	r1, r3
   15b24:	f002 f812 	bl	17b4c <__addsf3>
   15b28:	4603      	mov	r3, r0
   15b2a:	4618      	mov	r0, r3
   15b2c:	f002 fadc 	bl	180e8 <__aeabi_f2iz>
   15b30:	4603      	mov	r3, r0
   15b32:	b29a      	uxth	r2, r3
   15b34:	f243 3320 	movw	r3, #13088	; 0x3320
   15b38:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15b3c:	811a      	strh	r2, [r3, #8]
   15b3e:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15b42:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15b46:	895b      	ldrh	r3, [r3, #10]
   15b48:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15b4c:	b29b      	uxth	r3, r3
   15b4e:	80fb      	strh	r3, [r7, #6]
   15b50:	f243 3320 	movw	r3, #13088	; 0x3320
   15b54:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15b58:	895b      	ldrh	r3, [r3, #10]
   15b5a:	b21b      	sxth	r3, r3
   15b5c:	4618      	mov	r0, r3
   15b5e:	f002 f8a9 	bl	17cb4 <__aeabi_i2f>
   15b62:	4604      	mov	r4, r0
   15b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15b68:	4618      	mov	r0, r3
   15b6a:	f002 f8a3 	bl	17cb4 <__aeabi_i2f>
   15b6e:	4603      	mov	r3, r0
   15b70:	4618      	mov	r0, r3
   15b72:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15b76:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15b7a:	f002 f8ef 	bl	17d5c <__aeabi_fmul>
   15b7e:	4603      	mov	r3, r0
   15b80:	4620      	mov	r0, r4
   15b82:	4619      	mov	r1, r3
   15b84:	f001 ffe2 	bl	17b4c <__addsf3>
   15b88:	4603      	mov	r3, r0
   15b8a:	4618      	mov	r0, r3
   15b8c:	f002 faac 	bl	180e8 <__aeabi_f2iz>
   15b90:	4603      	mov	r3, r0
   15b92:	b29a      	uxth	r2, r3
   15b94:	f243 3320 	movw	r3, #13088	; 0x3320
   15b98:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15b9c:	815a      	strh	r2, [r3, #10]
   15b9e:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15ba2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ba6:	899b      	ldrh	r3, [r3, #12]
   15ba8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15bac:	b29b      	uxth	r3, r3
   15bae:	80fb      	strh	r3, [r7, #6]
   15bb0:	f243 3320 	movw	r3, #13088	; 0x3320
   15bb4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15bb8:	899b      	ldrh	r3, [r3, #12]
   15bba:	b21b      	sxth	r3, r3
   15bbc:	4618      	mov	r0, r3
   15bbe:	f002 f879 	bl	17cb4 <__aeabi_i2f>
   15bc2:	4604      	mov	r4, r0
   15bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15bc8:	4618      	mov	r0, r3
   15bca:	f002 f873 	bl	17cb4 <__aeabi_i2f>
   15bce:	4603      	mov	r3, r0
   15bd0:	4618      	mov	r0, r3
   15bd2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15bd6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15bda:	f002 f8bf 	bl	17d5c <__aeabi_fmul>
   15bde:	4603      	mov	r3, r0
   15be0:	4620      	mov	r0, r4
   15be2:	4619      	mov	r1, r3
   15be4:	f001 ffb2 	bl	17b4c <__addsf3>
   15be8:	4603      	mov	r3, r0
   15bea:	4618      	mov	r0, r3
   15bec:	f002 fa7c 	bl	180e8 <__aeabi_f2iz>
   15bf0:	4603      	mov	r3, r0
   15bf2:	b29a      	uxth	r2, r3
   15bf4:	f243 3320 	movw	r3, #13088	; 0x3320
   15bf8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15bfc:	819a      	strh	r2, [r3, #12]
   15bfe:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15c02:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15c06:	89db      	ldrh	r3, [r3, #14]
   15c08:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c0c:	b29b      	uxth	r3, r3
   15c0e:	80fb      	strh	r3, [r7, #6]
   15c10:	f243 3320 	movw	r3, #13088	; 0x3320
   15c14:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15c18:	89db      	ldrh	r3, [r3, #14]
   15c1a:	b21b      	sxth	r3, r3
   15c1c:	4618      	mov	r0, r3
   15c1e:	f002 f849 	bl	17cb4 <__aeabi_i2f>
   15c22:	4604      	mov	r4, r0
   15c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c28:	4618      	mov	r0, r3
   15c2a:	f002 f843 	bl	17cb4 <__aeabi_i2f>
   15c2e:	4603      	mov	r3, r0
   15c30:	4618      	mov	r0, r3
   15c32:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15c36:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15c3a:	f002 f88f 	bl	17d5c <__aeabi_fmul>
   15c3e:	4603      	mov	r3, r0
   15c40:	4620      	mov	r0, r4
   15c42:	4619      	mov	r1, r3
   15c44:	f001 ff82 	bl	17b4c <__addsf3>
   15c48:	4603      	mov	r3, r0
   15c4a:	4618      	mov	r0, r3
   15c4c:	f002 fa4c 	bl	180e8 <__aeabi_f2iz>
   15c50:	4603      	mov	r3, r0
   15c52:	b29a      	uxth	r2, r3
   15c54:	f243 3320 	movw	r3, #13088	; 0x3320
   15c58:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15c5c:	81da      	strh	r2, [r3, #14]
   15c5e:	f243 23f8 	movw	r3, #13048	; 0x32f8
   15c62:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15c66:	8a1b      	ldrh	r3, [r3, #16]
   15c68:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c6c:	b29b      	uxth	r3, r3
   15c6e:	80fb      	strh	r3, [r7, #6]
   15c70:	f243 3320 	movw	r3, #13088	; 0x3320
   15c74:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15c78:	8a1b      	ldrh	r3, [r3, #16]
   15c7a:	b21b      	sxth	r3, r3
   15c7c:	4618      	mov	r0, r3
   15c7e:	f002 f819 	bl	17cb4 <__aeabi_i2f>
   15c82:	4604      	mov	r4, r0
   15c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c88:	4618      	mov	r0, r3
   15c8a:	f002 f813 	bl	17cb4 <__aeabi_i2f>
   15c8e:	4603      	mov	r3, r0
   15c90:	4618      	mov	r0, r3
   15c92:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15c96:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15c9a:	f002 f85f 	bl	17d5c <__aeabi_fmul>
   15c9e:	4603      	mov	r3, r0
   15ca0:	4620      	mov	r0, r4
   15ca2:	4619      	mov	r1, r3
   15ca4:	f001 ff52 	bl	17b4c <__addsf3>
   15ca8:	4603      	mov	r3, r0
   15caa:	4618      	mov	r0, r3
   15cac:	f002 fa1c 	bl	180e8 <__aeabi_f2iz>
   15cb0:	4603      	mov	r3, r0
   15cb2:	b29a      	uxth	r2, r3
   15cb4:	f243 3320 	movw	r3, #13088	; 0x3320
   15cb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cbc:	821a      	strh	r2, [r3, #16]
   15cbe:	f243 3338 	movw	r3, #13112	; 0x3338
   15cc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cc6:	781b      	ldrb	r3, [r3, #0]
   15cc8:	3301      	adds	r3, #1
   15cca:	b2da      	uxtb	r2, r3
   15ccc:	f243 3338 	movw	r3, #13112	; 0x3338
   15cd0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cd4:	701a      	strb	r2, [r3, #0]
   15cd6:	f243 3338 	movw	r3, #13112	; 0x3338
   15cda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cde:	781b      	ldrb	r3, [r3, #0]
   15ce0:	2b0a      	cmp	r3, #10
   15ce2:	f040 8101 	bne.w	15ee8 <last_radio_from_ppm+0x5e8>
   15ce6:	f243 3338 	movw	r3, #13112	; 0x3338
   15cea:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cee:	2200      	movs	r2, #0
   15cf0:	701a      	strb	r2, [r3, #0]
   15cf2:	f243 3320 	movw	r3, #13088	; 0x3320
   15cf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15cfa:	891a      	ldrh	r2, [r3, #8]
   15cfc:	f243 330c 	movw	r3, #13068	; 0x330c
   15d00:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d04:	811a      	strh	r2, [r3, #8]
   15d06:	f243 3320 	movw	r3, #13088	; 0x3320
   15d0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d0e:	2200      	movs	r2, #0
   15d10:	811a      	strh	r2, [r3, #8]
   15d12:	f243 330c 	movw	r3, #13068	; 0x330c
   15d16:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d1a:	891b      	ldrh	r3, [r3, #8]
   15d1c:	b21b      	sxth	r3, r3
   15d1e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d22:	dd07      	ble.n	15d34 <last_radio_from_ppm+0x434>
   15d24:	f243 330c 	movw	r3, #13068	; 0x330c
   15d28:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d30:	811a      	strh	r2, [r3, #8]
   15d32:	e00f      	b.n	15d54 <last_radio_from_ppm+0x454>
   15d34:	f243 330c 	movw	r3, #13068	; 0x330c
   15d38:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d3c:	891b      	ldrh	r3, [r3, #8]
   15d3e:	b21b      	sxth	r3, r3
   15d40:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d44:	da06      	bge.n	15d54 <last_radio_from_ppm+0x454>
   15d46:	f243 330c 	movw	r3, #13068	; 0x330c
   15d4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d4e:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d52:	811a      	strh	r2, [r3, #8]
   15d54:	f243 3320 	movw	r3, #13088	; 0x3320
   15d58:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d5c:	895a      	ldrh	r2, [r3, #10]
   15d5e:	f243 330c 	movw	r3, #13068	; 0x330c
   15d62:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d66:	815a      	strh	r2, [r3, #10]
   15d68:	f243 3320 	movw	r3, #13088	; 0x3320
   15d6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d70:	2200      	movs	r2, #0
   15d72:	815a      	strh	r2, [r3, #10]
   15d74:	f243 330c 	movw	r3, #13068	; 0x330c
   15d78:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d7c:	895b      	ldrh	r3, [r3, #10]
   15d7e:	b21b      	sxth	r3, r3
   15d80:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d84:	dd07      	ble.n	15d96 <last_radio_from_ppm+0x496>
   15d86:	f243 330c 	movw	r3, #13068	; 0x330c
   15d8a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d92:	815a      	strh	r2, [r3, #10]
   15d94:	e00f      	b.n	15db6 <last_radio_from_ppm+0x4b6>
   15d96:	f243 330c 	movw	r3, #13068	; 0x330c
   15d9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15d9e:	895b      	ldrh	r3, [r3, #10]
   15da0:	b21b      	sxth	r3, r3
   15da2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15da6:	da06      	bge.n	15db6 <last_radio_from_ppm+0x4b6>
   15da8:	f243 330c 	movw	r3, #13068	; 0x330c
   15dac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15db0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15db4:	815a      	strh	r2, [r3, #10]
   15db6:	f243 3320 	movw	r3, #13088	; 0x3320
   15dba:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15dbe:	899a      	ldrh	r2, [r3, #12]
   15dc0:	f243 330c 	movw	r3, #13068	; 0x330c
   15dc4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15dc8:	819a      	strh	r2, [r3, #12]
   15dca:	f243 3320 	movw	r3, #13088	; 0x3320
   15dce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15dd2:	2200      	movs	r2, #0
   15dd4:	819a      	strh	r2, [r3, #12]
   15dd6:	f243 330c 	movw	r3, #13068	; 0x330c
   15dda:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15dde:	899b      	ldrh	r3, [r3, #12]
   15de0:	b21b      	sxth	r3, r3
   15de2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15de6:	dd07      	ble.n	15df8 <last_radio_from_ppm+0x4f8>
   15de8:	f243 330c 	movw	r3, #13068	; 0x330c
   15dec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15df4:	819a      	strh	r2, [r3, #12]
   15df6:	e00f      	b.n	15e18 <last_radio_from_ppm+0x518>
   15df8:	f243 330c 	movw	r3, #13068	; 0x330c
   15dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e00:	899b      	ldrh	r3, [r3, #12]
   15e02:	b21b      	sxth	r3, r3
   15e04:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15e08:	da06      	bge.n	15e18 <last_radio_from_ppm+0x518>
   15e0a:	f243 330c 	movw	r3, #13068	; 0x330c
   15e0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e12:	f64d 2280 	movw	r2, #55936	; 0xda80
   15e16:	819a      	strh	r2, [r3, #12]
   15e18:	f243 3320 	movw	r3, #13088	; 0x3320
   15e1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e20:	89da      	ldrh	r2, [r3, #14]
   15e22:	f243 330c 	movw	r3, #13068	; 0x330c
   15e26:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e2a:	81da      	strh	r2, [r3, #14]
   15e2c:	f243 3320 	movw	r3, #13088	; 0x3320
   15e30:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e34:	2200      	movs	r2, #0
   15e36:	81da      	strh	r2, [r3, #14]
   15e38:	f243 330c 	movw	r3, #13068	; 0x330c
   15e3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e40:	89db      	ldrh	r3, [r3, #14]
   15e42:	b21b      	sxth	r3, r3
   15e44:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e48:	dd07      	ble.n	15e5a <last_radio_from_ppm+0x55a>
   15e4a:	f243 330c 	movw	r3, #13068	; 0x330c
   15e4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e52:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15e56:	81da      	strh	r2, [r3, #14]
   15e58:	e00f      	b.n	15e7a <last_radio_from_ppm+0x57a>
   15e5a:	f243 330c 	movw	r3, #13068	; 0x330c
   15e5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e62:	89db      	ldrh	r3, [r3, #14]
   15e64:	b21b      	sxth	r3, r3
   15e66:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15e6a:	da06      	bge.n	15e7a <last_radio_from_ppm+0x57a>
   15e6c:	f243 330c 	movw	r3, #13068	; 0x330c
   15e70:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e74:	f64d 2280 	movw	r2, #55936	; 0xda80
   15e78:	81da      	strh	r2, [r3, #14]
   15e7a:	f243 3320 	movw	r3, #13088	; 0x3320
   15e7e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e82:	8a1a      	ldrh	r2, [r3, #16]
   15e84:	f243 330c 	movw	r3, #13068	; 0x330c
   15e88:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e8c:	821a      	strh	r2, [r3, #16]
   15e8e:	f243 3320 	movw	r3, #13088	; 0x3320
   15e92:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15e96:	2200      	movs	r2, #0
   15e98:	821a      	strh	r2, [r3, #16]
   15e9a:	f243 330c 	movw	r3, #13068	; 0x330c
   15e9e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ea2:	8a1b      	ldrh	r3, [r3, #16]
   15ea4:	b21b      	sxth	r3, r3
   15ea6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15eaa:	dd07      	ble.n	15ebc <last_radio_from_ppm+0x5bc>
   15eac:	f243 330c 	movw	r3, #13068	; 0x330c
   15eb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15eb8:	821a      	strh	r2, [r3, #16]
   15eba:	e00f      	b.n	15edc <last_radio_from_ppm+0x5dc>
   15ebc:	f243 330c 	movw	r3, #13068	; 0x330c
   15ec0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ec4:	8a1b      	ldrh	r3, [r3, #16]
   15ec6:	b21b      	sxth	r3, r3
   15ec8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ecc:	da06      	bge.n	15edc <last_radio_from_ppm+0x5dc>
   15ece:	f243 330c 	movw	r3, #13068	; 0x330c
   15ed2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ed6:	f64d 2280 	movw	r2, #55936	; 0xda80
   15eda:	821a      	strh	r2, [r3, #16]
   15edc:	f243 3332 	movw	r3, #13106	; 0x3332
   15ee0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15ee4:	2201      	movs	r2, #1
   15ee6:	701a      	strb	r2, [r3, #0]
}
   15ee8:	370c      	adds	r7, #12
   15eea:	46bd      	mov	sp, r7
   15eec:	bd90      	pop	{r4, r7, pc}
   15eee:	bf00      	nop

00015ef0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   15ef0:	b480      	push	{r7}
   15ef2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   15ef4:	f243 336c 	movw	r3, #13164	; 0x336c
   15ef8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15efc:	2200      	movs	r2, #0
   15efe:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   15f00:	f243 336d 	movw	r3, #13165	; 0x336d
   15f04:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f08:	2200      	movs	r2, #0
   15f0a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   15f0c:	f243 336c 	movw	r3, #13164	; 0x336c
   15f10:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f14:	781b      	ldrb	r3, [r3, #0]
   15f16:	b2db      	uxtb	r3, r3
   15f18:	461a      	mov	r2, r3
   15f1a:	f243 3354 	movw	r3, #13140	; 0x3354
   15f1e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f22:	4413      	add	r3, r2
   15f24:	781a      	ldrb	r2, [r3, #0]
   15f26:	f243 336e 	movw	r3, #13166	; 0x336e
   15f2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f2e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   15f30:	f242 030f 	movw	r3, #8207	; 0x200f
   15f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f38:	f243 326e 	movw	r2, #13166	; 0x336e
   15f3c:	f2c2 0201 	movt	r2, #8193	; 0x2001
   15f40:	7812      	ldrb	r2, [r2, #0]
   15f42:	b2d2      	uxtb	r2, r2
   15f44:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   15f46:	f243 336a 	movw	r3, #13162	; 0x336a
   15f4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f4e:	2200      	movs	r2, #0
   15f50:	701a      	strb	r2, [r3, #0]
}
   15f52:	46bd      	mov	sp, r7
   15f54:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f58:	4770      	bx	lr
   15f5a:	bf00      	nop

00015f5c <fbw_spi_init>:

void fbw_spi_init(void) {
   15f5c:	b480      	push	{r7}
   15f5e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   15f60:	f243 3354 	movw	r3, #13140	; 0x3354
   15f64:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f68:	2200      	movs	r2, #0
   15f6a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   15f6c:	f243 3354 	movw	r3, #13140	; 0x3354
   15f70:	f2c2 0301 	movt	r3, #8193	; 0x2001
   15f74:	2200      	movs	r2, #0
   15f76:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   15f78:	f242 0317 	movw	r3, #8215	; 0x2017
   15f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f80:	f242 0217 	movw	r2, #8215	; 0x2017
   15f84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15f88:	7812      	ldrb	r2, [r2, #0]
   15f8a:	b2d2      	uxtb	r2, r2
   15f8c:	f042 0210 	orr.w	r2, r2, #16
   15f90:	b2d2      	uxtb	r2, r2
   15f92:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   15f94:	f242 030d 	movw	r3, #8205	; 0x200d
   15f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9c:	2240      	movs	r2, #64	; 0x40
   15f9e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   15fa0:	f242 030d 	movw	r3, #8205	; 0x200d
   15fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fa8:	f242 020d 	movw	r2, #8205	; 0x200d
   15fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15fb0:	7812      	ldrb	r2, [r2, #0]
   15fb2:	b2d2      	uxtb	r2, r2
   15fb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15fb8:	b2d2      	uxtb	r2, r2
   15fba:	701a      	strb	r2, [r3, #0]
}
   15fbc:	46bd      	mov	sp, r7
   15fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fc2:	4770      	bx	lr
   15fc4:	0000      	movs	r0, r0
	...

00015fc8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   15fc8:	b480      	push	{r7}
   15fca:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   15fcc:	f242 032f 	movw	r3, #8239	; 0x202f
   15fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd4:	2200      	movs	r2, #0
   15fd6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   15fd8:	f242 032e 	movw	r3, #8238	; 0x202e
   15fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fe0:	2201      	movs	r2, #1
   15fe2:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   15fe4:	f242 0325 	movw	r3, #8229	; 0x2025
   15fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fec:	2207      	movs	r2, #7
   15fee:	701a      	strb	r2, [r3, #0]
}
   15ff0:	46bd      	mov	sp, r7
   15ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ff6:	4770      	bx	lr

00015ff8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   15ff8:	b480      	push	{r7}
   15ffa:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   15ffc:	f242 032e 	movw	r3, #8238	; 0x202e
   16000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16004:	f242 022e 	movw	r2, #8238	; 0x202e
   16008:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1600c:	7812      	ldrb	r2, [r2, #0]
   1600e:	b2d2      	uxtb	r2, r2
   16010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16014:	b2d2      	uxtb	r2, r2
   16016:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16018:	f242 032e 	movw	r3, #8238	; 0x202e
   1601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16020:	f242 022e 	movw	r2, #8238	; 0x202e
   16024:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16028:	7812      	ldrb	r2, [r2, #0]
   1602a:	b2d2      	uxtb	r2, r2
   1602c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16030:	b2d2      	uxtb	r2, r2
   16032:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16034:	f242 0317 	movw	r3, #8215	; 0x2017
   16038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603c:	f242 0217 	movw	r2, #8215	; 0x2017
   16040:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16044:	7812      	ldrb	r2, [r2, #0]
   16046:	b2d2      	uxtb	r2, r2
   16048:	f022 0201 	bic.w	r2, r2, #1
   1604c:	b2d2      	uxtb	r2, r2
   1604e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16050:	f242 0337 	movw	r3, #8247	; 0x2037
   16054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16058:	f242 0237 	movw	r2, #8247	; 0x2037
   1605c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16060:	7812      	ldrb	r2, [r2, #0]
   16062:	b2d2      	uxtb	r2, r2
   16064:	f042 0220 	orr.w	r2, r2, #32
   16068:	b2d2      	uxtb	r2, r2
   1606a:	701a      	strb	r2, [r3, #0]
}
   1606c:	46bd      	mov	sp, r7
   1606e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16072:	4770      	bx	lr

00016074 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16074:	b580      	push	{r7, lr}
   16076:	b082      	sub	sp, #8
   16078:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1607a:	2300      	movs	r3, #0
   1607c:	71fb      	strb	r3, [r7, #7]
   1607e:	e010      	b.n	160a2 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16080:	79fa      	ldrb	r2, [r7, #7]
   16082:	79f9      	ldrb	r1, [r7, #7]
   16084:	f243 330c 	movw	r3, #13068	; 0x330c
   16088:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1608c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16090:	f243 3354 	movw	r3, #13140	; 0x3354
   16094:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16098:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1609c:	79fb      	ldrb	r3, [r7, #7]
   1609e:	3301      	adds	r3, #1
   160a0:	71fb      	strb	r3, [r7, #7]
   160a2:	79fb      	ldrb	r3, [r7, #7]
   160a4:	2b08      	cmp	r3, #8
   160a6:	d9eb      	bls.n	16080 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   160a8:	f243 33fc 	movw	r3, #13308	; 0x33fc
   160ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
   160b0:	781b      	ldrb	r3, [r3, #0]
   160b2:	2b00      	cmp	r3, #0
   160b4:	bf0c      	ite	eq
   160b6:	2300      	moveq	r3, #0
   160b8:	2301      	movne	r3, #1
   160ba:	b2db      	uxtb	r3, r3
   160bc:	461a      	mov	r2, r3
   160be:	f243 3354 	movw	r3, #13140	; 0x3354
   160c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   160c6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   160c8:	f243 3354 	movw	r3, #13140	; 0x3354
   160cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   160d0:	7cdb      	ldrb	r3, [r3, #19]
   160d2:	b2da      	uxtb	r2, r3
   160d4:	f243 33fe 	movw	r3, #13310	; 0x33fe
   160d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   160dc:	781b      	ldrb	r3, [r3, #0]
   160de:	2b00      	cmp	r3, #0
   160e0:	d001      	beq.n	160e6 <to_autopilot_from_last_radio+0x72>
   160e2:	2302      	movs	r3, #2
   160e4:	e000      	b.n	160e8 <to_autopilot_from_last_radio+0x74>
   160e6:	2300      	movs	r3, #0
   160e8:	4313      	orrs	r3, r2
   160ea:	b2db      	uxtb	r3, r3
   160ec:	b2da      	uxtb	r2, r3
   160ee:	f243 3354 	movw	r3, #13140	; 0x3354
   160f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   160f6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   160f8:	f243 3332 	movw	r3, #13106	; 0x3332
   160fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16100:	781b      	ldrb	r3, [r3, #0]
   16102:	2b00      	cmp	r3, #0
   16104:	d012      	beq.n	1612c <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16106:	f243 3354 	movw	r3, #13140	; 0x3354
   1610a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1610e:	7cdb      	ldrb	r3, [r3, #19]
   16110:	f043 0304 	orr.w	r3, r3, #4
   16114:	b2da      	uxtb	r2, r3
   16116:	f243 3354 	movw	r3, #13140	; 0x3354
   1611a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1611e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16120:	f243 3332 	movw	r3, #13106	; 0x3332
   16124:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16128:	2200      	movs	r2, #0
   1612a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1612c:	f243 4300 	movw	r3, #13312	; 0x3400
   16130:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16134:	781a      	ldrb	r2, [r3, #0]
   16136:	f243 3354 	movw	r3, #13140	; 0x3354
   1613a:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1613e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16140:	f243 3370 	movw	r3, #13168	; 0x3370
   16144:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16148:	881b      	ldrh	r3, [r3, #0]
   1614a:	4618      	mov	r0, r3
   1614c:	f001 f960 	bl	17410 <__aeabi_i2d>
   16150:	4602      	mov	r2, r0
   16152:	460b      	mov	r3, r1
   16154:	4610      	mov	r0, r2
   16156:	4619      	mov	r1, r3
   16158:	a31b      	add	r3, pc, #108	; (adr r3, 161c8 <to_autopilot_from_last_radio+0x154>)
   1615a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1615e:	f001 f9bd 	bl	174dc <__aeabi_dmul>
   16162:	4602      	mov	r2, r0
   16164:	460b      	mov	r3, r1
   16166:	4610      	mov	r0, r2
   16168:	4619      	mov	r1, r3
   1616a:	f04f 0200 	mov.w	r2, #0
   1616e:	f04f 0300 	mov.w	r3, #0
   16172:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16176:	f001 fadb 	bl	17730 <__aeabi_ddiv>
   1617a:	4602      	mov	r2, r0
   1617c:	460b      	mov	r3, r1
   1617e:	4610      	mov	r0, r2
   16180:	4619      	mov	r1, r3
   16182:	a313      	add	r3, pc, #76	; (adr r3, 161d0 <to_autopilot_from_last_radio+0x15c>)
   16184:	e9d3 2300 	ldrd	r2, r3, [r3]
   16188:	f000 fff6 	bl	17178 <__adddf3>
   1618c:	4602      	mov	r2, r0
   1618e:	460b      	mov	r3, r1
   16190:	4610      	mov	r0, r2
   16192:	4619      	mov	r1, r3
   16194:	f04f 0200 	mov.w	r2, #0
   16198:	f04f 0300 	mov.w	r3, #0
   1619c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   161a0:	f001 f99c 	bl	174dc <__aeabi_dmul>
   161a4:	4602      	mov	r2, r0
   161a6:	460b      	mov	r3, r1
   161a8:	4610      	mov	r0, r2
   161aa:	4619      	mov	r1, r3
   161ac:	f001 fc58 	bl	17a60 <__aeabi_d2uiz>
   161b0:	4603      	mov	r3, r0
   161b2:	b2da      	uxtb	r2, r3
   161b4:	f243 3354 	movw	r3, #13140	; 0x3354
   161b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   161bc:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   161be:	3708      	adds	r7, #8
   161c0:	46bd      	mov	sp, r7
   161c2:	bd80      	pop	{r7, pc}
   161c4:	f3af 8000 	nop.w
   161c8:	1eb851ec 	.word	0x1eb851ec
   161cc:	3f91eb85 	.word	0x3f91eb85
   161d0:	020c49ba 	.word	0x020c49ba
   161d4:	3fb6872b 	.word	0x3fb6872b

000161d8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   161d8:	b580      	push	{r7, lr}
   161da:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   161dc:	f243 336b 	movw	r3, #13163	; 0x336b
   161e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   161e4:	2200      	movs	r2, #0
   161e6:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   161e8:	f7ff ff44 	bl	16074 <to_autopilot_from_last_radio>
      spi_reset();
   161ec:	f7ff fe80 	bl	15ef0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   161f0:	bd80      	pop	{r7, pc}
   161f2:	bf00      	nop

000161f4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   161f4:	b580      	push	{r7, lr}
   161f6:	af00      	add	r7, sp, #0
  uart_init_tx();
   161f8:	f000 fb02 	bl	16800 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   161fc:	f248 4010 	movw	r0, #33808	; 0x8410
   16200:	f2c0 0001 	movt	r0, #1
   16204:	f000 fbda 	bl	169bc <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16208:	f7ff fab2 	bl	15770 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   1620c:	2003      	movs	r0, #3
   1620e:	f243 3170 	movw	r1, #13168	; 0x3370
   16212:	f2c2 0101 	movt	r1, #8193	; 0x2001
   16216:	f7ff fa97 	bl	15748 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   1621a:	2006      	movs	r0, #6
   1621c:	f243 31b4 	movw	r1, #13236	; 0x33b4
   16220:	f2c2 0101 	movt	r1, #8193	; 0x2001
   16224:	f7ff fa90 	bl	15748 <fbw_adc_buf_channel>
#endif
  timer_init();
   16228:	f7ff fece 	bl	15fc8 <timer_init>
  servo_init();
   1622c:	f000 f894 	bl	16358 <servo_init>
  ppm_init();
   16230:	f7ff fee2 	bl	15ff8 <ppm_init>
  fbw_spi_init();
   16234:	f7ff fe92 	bl	15f5c <fbw_spi_init>
  //sei(); //FN
}
   16238:	bd80      	pop	{r7, pc}
   1623a:	bf00      	nop

0001623c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1623c:	b580      	push	{r7, lr}
   1623e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16240:	f243 3333 	movw	r3, #13107	; 0x3333
   16244:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16248:	2200      	movs	r2, #0
   1624a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1624c:	f243 33ff 	movw	r3, #13311	; 0x33ff
   16250:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16254:	781b      	ldrb	r3, [r3, #0]
   16256:	3301      	adds	r3, #1
   16258:	b2da      	uxtb	r2, r3
   1625a:	f243 33ff 	movw	r3, #13311	; 0x33ff
   1625e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16262:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16264:	f243 33fc 	movw	r3, #13308	; 0x33fc
   16268:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1626c:	2201      	movs	r2, #1
   1626e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16270:	f243 33fe 	movw	r3, #13310	; 0x33fe
   16274:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16278:	2200      	movs	r2, #0
   1627a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1627c:	f243 33fa 	movw	r3, #13306	; 0x33fa
   16280:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16284:	2200      	movs	r2, #0
   16286:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16288:	f7ff fb3a 	bl	15900 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1628c:	f243 330c 	movw	r3, #13068	; 0x330c
   16290:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16294:	891b      	ldrh	r3, [r3, #8]
   16296:	b21b      	sxth	r3, r3
   16298:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1629c:	bfb4      	ite	lt
   1629e:	2300      	movlt	r3, #0
   162a0:	2301      	movge	r3, #1
   162a2:	b2db      	uxtb	r3, r3
   162a4:	461a      	mov	r2, r3
   162a6:	f243 33f8 	movw	r3, #13304	; 0x33f8
   162aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
   162ae:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   162b0:	f243 33f8 	movw	r3, #13304	; 0x33f8
   162b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   162b8:	781b      	ldrb	r3, [r3, #0]
   162ba:	2b00      	cmp	r3, #0
   162bc:	d105      	bne.n	162ca <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   162be:	f243 300c 	movw	r0, #13068	; 0x330c
   162c2:	f2c2 0001 	movt	r0, #8193	; 0x2001
   162c6:	f000 f925 	bl	16514 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   162ca:	f243 33f8 	movw	r3, #13304	; 0x33f8
   162ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   162d2:	2201      	movs	r2, #1
   162d4:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   162d6:	f243 33fc 	movw	r3, #13308	; 0x33fc
   162da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   162de:	2200      	movs	r2, #0
   162e0:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   162e2:	f243 33fe 	movw	r3, #13310	; 0x33fe
   162e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   162ea:	2201      	movs	r2, #1
   162ec:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   162ee:	bd80      	pop	{r7, pc}

000162f0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   162f0:	b580      	push	{r7, lr}
   162f2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   162f4:	f248 30fc 	movw	r0, #33788	; 0x83fc
   162f8:	f2c0 0001 	movt	r0, #1
   162fc:	f000 f90a 	bl	16514 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16300:	bd80      	pop	{r7, pc}
   16302:	bf00      	nop

00016304 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16304:	b580      	push	{r7, lr}
   16306:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16308:	f243 336a 	movw	r3, #13162	; 0x336a
   1630c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16310:	781b      	ldrb	r3, [r3, #0]
   16312:	b2db      	uxtb	r3, r3
   16314:	2b00      	cmp	r3, #0
   16316:	d018      	beq.n	1634a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16318:	f243 33f9 	movw	r3, #13305	; 0x33f9
   1631c:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16320:	2200      	movs	r2, #0
   16322:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16324:	f243 33fd 	movw	r3, #13309	; 0x33fd
   16328:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1632c:	2201      	movs	r2, #1
   1632e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16330:	f243 33f8 	movw	r3, #13304	; 0x33f8
   16334:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16338:	781b      	ldrb	r3, [r3, #0]
   1633a:	2b01      	cmp	r3, #1
   1633c:	d105      	bne.n	1634a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1633e:	f243 303c 	movw	r0, #13116	; 0x333c
   16342:	f2c2 0001 	movt	r0, #8193	; 0x2001
   16346:	f000 f8e5 	bl	16514 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1634a:	f243 33fd 	movw	r3, #13309	; 0x33fd
   1634e:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16352:	2200      	movs	r2, #0
   16354:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16356:	bd80      	pop	{r7, pc}

00016358 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16358:	b480      	push	{r7}
   1635a:	b083      	sub	sp, #12
   1635c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1635e:	f242 0311 	movw	r3, #8209	; 0x2011
   16362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16366:	f242 0211 	movw	r2, #8209	; 0x2011
   1636a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1636e:	7812      	ldrb	r2, [r2, #0]
   16370:	b2d2      	uxtb	r2, r2
   16372:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16376:	b2d2      	uxtb	r2, r2
   16378:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1637a:	f242 0317 	movw	r3, #8215	; 0x2017
   1637e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16382:	f242 0217 	movw	r2, #8215	; 0x2017
   16386:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1638a:	7812      	ldrb	r2, [r2, #0]
   1638c:	b2d2      	uxtb	r2, r2
   1638e:	f042 0202 	orr.w	r2, r2, #2
   16392:	b2d2      	uxtb	r2, r2
   16394:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16396:	f242 0312 	movw	r3, #8210	; 0x2012
   1639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1639e:	f242 0212 	movw	r2, #8210	; 0x2012
   163a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163a6:	7812      	ldrb	r2, [r2, #0]
   163a8:	b2d2      	uxtb	r2, r2
   163aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   163ae:	b2d2      	uxtb	r2, r2
   163b0:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   163b2:	f242 0318 	movw	r3, #8216	; 0x2018
   163b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ba:	f242 0218 	movw	r2, #8216	; 0x2018
   163be:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163c2:	7812      	ldrb	r2, [r2, #0]
   163c4:	b2d2      	uxtb	r2, r2
   163c6:	f022 0202 	bic.w	r2, r2, #2
   163ca:	b2d2      	uxtb	r2, r2
   163cc:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   163ce:	2300      	movs	r3, #0
   163d0:	71fb      	strb	r3, [r7, #7]
   163d2:	e00b      	b.n	163ec <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   163d4:	79fa      	ldrb	r2, [r7, #7]
   163d6:	f243 4304 	movw	r3, #13316	; 0x3404
   163da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   163de:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   163e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   163e6:	79fb      	ldrb	r3, [r7, #7]
   163e8:	3301      	adds	r3, #1
   163ea:	71fb      	strb	r3, [r7, #7]
   163ec:	79fb      	ldrb	r3, [r7, #7]
   163ee:	2b09      	cmp	r3, #9
   163f0:	d9f0      	bls.n	163d4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   163f2:	f242 032a 	movw	r3, #8234	; 0x202a
   163f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   163fe:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16400:	f242 032f 	movw	r3, #8239	; 0x202f
   16404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16408:	f242 022f 	movw	r2, #8239	; 0x202f
   1640c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16410:	7812      	ldrb	r2, [r2, #0]
   16412:	b2d2      	uxtb	r2, r2
   16414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16418:	b2d2      	uxtb	r2, r2
   1641a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   1641c:	f242 0336 	movw	r3, #8246	; 0x2036
   16420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16424:	2210      	movs	r2, #16
   16426:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16428:	f242 0312 	movw	r3, #8210	; 0x2012
   1642c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16430:	f242 0212 	movw	r2, #8210	; 0x2012
   16434:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16438:	7812      	ldrb	r2, [r2, #0]
   1643a:	b2d2      	uxtb	r2, r2
   1643c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16440:	b2d2      	uxtb	r2, r2
   16442:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16444:	f242 0337 	movw	r3, #8247	; 0x2037
   16448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1644c:	f242 0237 	movw	r2, #8247	; 0x2037
   16450:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16454:	7812      	ldrb	r2, [r2, #0]
   16456:	b2d2      	uxtb	r2, r2
   16458:	f042 0210 	orr.w	r2, r2, #16
   1645c:	b2d2      	uxtb	r2, r2
   1645e:	701a      	strb	r2, [r3, #0]
}
   16460:	370c      	adds	r7, #12
   16462:	46bd      	mov	sp, r7
   16464:	f85d 7b04 	ldr.w	r7, [sp], #4
   16468:	4770      	bx	lr
   1646a:	bf00      	nop

0001646c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   1646c:	b480      	push	{r7}
   1646e:	b083      	sub	sp, #12
   16470:	af00      	add	r7, sp, #0
   16472:	4602      	mov	r2, r0
   16474:	460b      	mov	r3, r1
   16476:	71fa      	strb	r2, [r7, #7]
   16478:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   1647a:	79f9      	ldrb	r1, [r7, #7]
   1647c:	88bb      	ldrh	r3, [r7, #4]
   1647e:	011b      	lsls	r3, r3, #4
   16480:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16484:	d308      	bcc.n	16498 <servo_set_one+0x2c>
   16486:	88bb      	ldrh	r3, [r7, #4]
   16488:	011b      	lsls	r3, r3, #4
   1648a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1648e:	bf28      	it	cs
   16490:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16494:	b29a      	uxth	r2, r3
   16496:	e001      	b.n	1649c <servo_set_one+0x30>
   16498:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1649c:	f243 4304 	movw	r3, #13316	; 0x3404
   164a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
   164a4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   164a8:	370c      	adds	r7, #12
   164aa:	46bd      	mov	sp, r7
   164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   164b0:	4770      	bx	lr
   164b2:	bf00      	nop

000164b4 <servo_transmit>:

void 
servo_transmit(void) {
   164b4:	b580      	push	{r7, lr}
   164b6:	b082      	sub	sp, #8
   164b8:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   164ba:	2000      	movs	r0, #0
   164bc:	f000 f9e6 	bl	1688c <uart_transmit>
   164c0:	2000      	movs	r0, #0
   164c2:	f000 f9e3 	bl	1688c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   164c6:	2300      	movs	r3, #0
   164c8:	71fb      	strb	r3, [r7, #7]
   164ca:	e01a      	b.n	16502 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   164cc:	79fa      	ldrb	r2, [r7, #7]
   164ce:	f243 4304 	movw	r3, #13316	; 0x3404
   164d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
   164d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   164da:	0a1b      	lsrs	r3, r3, #8
   164dc:	b29b      	uxth	r3, r3
   164de:	b2db      	uxtb	r3, r3
   164e0:	4618      	mov	r0, r3
   164e2:	f000 f9d3 	bl	1688c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   164e6:	79fa      	ldrb	r2, [r7, #7]
   164e8:	f243 4304 	movw	r3, #13316	; 0x3404
   164ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
   164f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   164f4:	b2db      	uxtb	r3, r3
   164f6:	4618      	mov	r0, r3
   164f8:	f000 f9c8 	bl	1688c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   164fc:	79fb      	ldrb	r3, [r7, #7]
   164fe:	3301      	adds	r3, #1
   16500:	71fb      	strb	r3, [r7, #7]
   16502:	79fb      	ldrb	r3, [r7, #7]
   16504:	2b09      	cmp	r3, #9
   16506:	d9e1      	bls.n	164cc <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16508:	200a      	movs	r0, #10
   1650a:	f000 f9bf 	bl	1688c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   1650e:	3708      	adds	r7, #8
   16510:	46bd      	mov	sp, r7
   16512:	bd80      	pop	{r7, pc}

00016514 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16514:	b5b0      	push	{r4, r5, r7, lr}
   16516:	b084      	sub	sp, #16
   16518:	af00      	add	r7, sp, #0
   1651a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   1651c:	687b      	ldr	r3, [r7, #4]
   1651e:	330a      	adds	r3, #10
   16520:	881b      	ldrh	r3, [r3, #0]
   16522:	b21b      	sxth	r3, r3
   16524:	005b      	lsls	r3, r3, #1
   16526:	4618      	mov	r0, r3
   16528:	f000 ff72 	bl	17410 <__aeabi_i2d>
   1652c:	4602      	mov	r2, r0
   1652e:	460b      	mov	r3, r1
   16530:	4610      	mov	r0, r2
   16532:	4619      	mov	r1, r3
   16534:	a3a6      	add	r3, pc, #664	; (adr r3, 167d0 <servo_set+0x2bc>)
   16536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1653a:	f000 ffcf 	bl	174dc <__aeabi_dmul>
   1653e:	4602      	mov	r2, r0
   16540:	460b      	mov	r3, r1
   16542:	4610      	mov	r0, r2
   16544:	4619      	mov	r1, r3
   16546:	f001 fa63 	bl	17a10 <__aeabi_d2iz>
   1654a:	4603      	mov	r3, r0
   1654c:	b29b      	uxth	r3, r3
   1654e:	b29b      	uxth	r3, r3
   16550:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16554:	81fb      	strh	r3, [r7, #14]
   16556:	89fb      	ldrh	r3, [r7, #14]
   16558:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1655c:	d307      	bcc.n	1656e <servo_set+0x5a>
   1655e:	89fb      	ldrh	r3, [r7, #14]
   16560:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16564:	bf28      	it	cs
   16566:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1656a:	b29a      	uxth	r2, r3
   1656c:	e001      	b.n	16572 <servo_set+0x5e>
   1656e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16572:	f243 4304 	movw	r3, #13316	; 0x3404
   16576:	f2c2 0301 	movt	r3, #8193	; 0x2001
   1657a:	80da      	strh	r2, [r3, #6]
   1657c:	687b      	ldr	r3, [r7, #4]
   1657e:	881b      	ldrh	r3, [r3, #0]
   16580:	b21b      	sxth	r3, r3
   16582:	005b      	lsls	r3, r3, #1
   16584:	4618      	mov	r0, r3
   16586:	f000 ff43 	bl	17410 <__aeabi_i2d>
   1658a:	4602      	mov	r2, r0
   1658c:	460b      	mov	r3, r1
   1658e:	4610      	mov	r0, r2
   16590:	4619      	mov	r1, r3
   16592:	a38f      	add	r3, pc, #572	; (adr r3, 167d0 <servo_set+0x2bc>)
   16594:	e9d3 2300 	ldrd	r2, r3, [r3]
   16598:	f000 ffa0 	bl	174dc <__aeabi_dmul>
   1659c:	4602      	mov	r2, r0
   1659e:	460b      	mov	r3, r1
   165a0:	4610      	mov	r0, r2
   165a2:	4619      	mov	r1, r3
   165a4:	f001 fa34 	bl	17a10 <__aeabi_d2iz>
   165a8:	4603      	mov	r3, r0
   165aa:	b29b      	uxth	r3, r3
   165ac:	b29b      	uxth	r3, r3
   165ae:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   165b2:	81fb      	strh	r3, [r7, #14]
   165b4:	89fb      	ldrh	r3, [r7, #14]
   165b6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   165ba:	d307      	bcc.n	165cc <servo_set+0xb8>
   165bc:	89fb      	ldrh	r3, [r7, #14]
   165be:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   165c2:	bf28      	it	cs
   165c4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   165c8:	b29a      	uxth	r2, r3
   165ca:	e001      	b.n	165d0 <servo_set+0xbc>
   165cc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   165d0:	f243 4304 	movw	r3, #13316	; 0x3404
   165d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   165d8:	825a      	strh	r2, [r3, #18]
   165da:	687b      	ldr	r3, [r7, #4]
   165dc:	3304      	adds	r3, #4
   165de:	881b      	ldrh	r3, [r3, #0]
   165e0:	b21b      	sxth	r3, r3
   165e2:	4618      	mov	r0, r3
   165e4:	f000 ff14 	bl	17410 <__aeabi_i2d>
   165e8:	4602      	mov	r2, r0
   165ea:	460b      	mov	r3, r1
   165ec:	4610      	mov	r0, r2
   165ee:	4619      	mov	r1, r3
   165f0:	a379      	add	r3, pc, #484	; (adr r3, 167d8 <servo_set+0x2c4>)
   165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   165f6:	f000 ff71 	bl	174dc <__aeabi_dmul>
   165fa:	4602      	mov	r2, r0
   165fc:	460b      	mov	r3, r1
   165fe:	4610      	mov	r0, r2
   16600:	4619      	mov	r1, r3
   16602:	f001 fa05 	bl	17a10 <__aeabi_d2iz>
   16606:	4603      	mov	r3, r0
   16608:	b29b      	uxth	r3, r3
   1660a:	b29b      	uxth	r3, r3
   1660c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16610:	3320      	adds	r3, #32
   16612:	81fb      	strh	r3, [r7, #14]
   16614:	89fb      	ldrh	r3, [r7, #14]
   16616:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1661a:	d307      	bcc.n	1662c <servo_set+0x118>
   1661c:	89fb      	ldrh	r3, [r7, #14]
   1661e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16622:	bf28      	it	cs
   16624:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16628:	b29a      	uxth	r2, r3
   1662a:	e001      	b.n	16630 <servo_set+0x11c>
   1662c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16630:	f243 4304 	movw	r3, #13316	; 0x3404
   16634:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16638:	819a      	strh	r2, [r3, #12]
   1663a:	687b      	ldr	r3, [r7, #4]
   1663c:	885b      	ldrh	r3, [r3, #2]
   1663e:	81bb      	strh	r3, [r7, #12]
   16640:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16644:	2b00      	cmp	r3, #0
   16646:	dd06      	ble.n	16656 <servo_set+0x142>
   16648:	f04f 0400 	mov.w	r4, #0
   1664c:	f04f 0500 	mov.w	r5, #0
   16650:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16654:	e002      	b.n	1665c <servo_set+0x148>
   16656:	a562      	add	r5, pc, #392	; (adr r5, 167e0 <servo_set+0x2cc>)
   16658:	e9d5 4500 	ldrd	r4, r5, [r5]
   1665c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16660:	4618      	mov	r0, r3
   16662:	f000 fed5 	bl	17410 <__aeabi_i2d>
   16666:	4602      	mov	r2, r0
   16668:	460b      	mov	r3, r1
   1666a:	4620      	mov	r0, r4
   1666c:	4629      	mov	r1, r5
   1666e:	f000 ff35 	bl	174dc <__aeabi_dmul>
   16672:	4602      	mov	r2, r0
   16674:	460b      	mov	r3, r1
   16676:	4610      	mov	r0, r2
   16678:	4619      	mov	r1, r3
   1667a:	a35b      	add	r3, pc, #364	; (adr r3, 167e8 <servo_set+0x2d4>)
   1667c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16680:	f000 ff2c 	bl	174dc <__aeabi_dmul>
   16684:	4602      	mov	r2, r0
   16686:	460b      	mov	r3, r1
   16688:	4610      	mov	r0, r2
   1668a:	4619      	mov	r1, r3
   1668c:	f001 f9c0 	bl	17a10 <__aeabi_d2iz>
   16690:	4603      	mov	r3, r0
   16692:	b29b      	uxth	r3, r3
   16694:	b29b      	uxth	r3, r3
   16696:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   1669a:	81fb      	strh	r3, [r7, #14]
   1669c:	89fb      	ldrh	r3, [r7, #14]
   1669e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   166a2:	d307      	bcc.n	166b4 <servo_set+0x1a0>
   166a4:	89fb      	ldrh	r3, [r7, #14]
   166a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   166aa:	bf28      	it	cs
   166ac:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   166b0:	b29a      	uxth	r2, r3
   166b2:	e001      	b.n	166b8 <servo_set+0x1a4>
   166b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   166b8:	f243 4304 	movw	r3, #13316	; 0x3404
   166bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   166c0:	801a      	strh	r2, [r3, #0]
   166c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   166c6:	2b00      	cmp	r3, #0
   166c8:	dd03      	ble.n	166d2 <servo_set+0x1be>
   166ca:	a545      	add	r5, pc, #276	; (adr r5, 167e0 <servo_set+0x2cc>)
   166cc:	e9d5 4500 	ldrd	r4, r5, [r5]
   166d0:	e005      	b.n	166de <servo_set+0x1ca>
   166d2:	f04f 0400 	mov.w	r4, #0
   166d6:	f04f 0500 	mov.w	r5, #0
   166da:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   166de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   166e2:	4618      	mov	r0, r3
   166e4:	f000 fe94 	bl	17410 <__aeabi_i2d>
   166e8:	4602      	mov	r2, r0
   166ea:	460b      	mov	r3, r1
   166ec:	4620      	mov	r0, r4
   166ee:	4629      	mov	r1, r5
   166f0:	f000 fef4 	bl	174dc <__aeabi_dmul>
   166f4:	4602      	mov	r2, r0
   166f6:	460b      	mov	r3, r1
   166f8:	4610      	mov	r0, r2
   166fa:	4619      	mov	r1, r3
   166fc:	a33c      	add	r3, pc, #240	; (adr r3, 167f0 <servo_set+0x2dc>)
   166fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   16702:	f000 feeb 	bl	174dc <__aeabi_dmul>
   16706:	4602      	mov	r2, r0
   16708:	460b      	mov	r3, r1
   1670a:	4610      	mov	r0, r2
   1670c:	4619      	mov	r1, r3
   1670e:	f001 f97f 	bl	17a10 <__aeabi_d2iz>
   16712:	4603      	mov	r3, r0
   16714:	b29b      	uxth	r3, r3
   16716:	b29b      	uxth	r3, r3
   16718:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1671c:	3320      	adds	r3, #32
   1671e:	81fb      	strh	r3, [r7, #14]
   16720:	89fb      	ldrh	r3, [r7, #14]
   16722:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16726:	d307      	bcc.n	16738 <servo_set+0x224>
   16728:	89fb      	ldrh	r3, [r7, #14]
   1672a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1672e:	bf28      	it	cs
   16730:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16734:	b29a      	uxth	r2, r3
   16736:	e001      	b.n	1673c <servo_set+0x228>
   16738:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1673c:	f243 4304 	movw	r3, #13316	; 0x3404
   16740:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16744:	809a      	strh	r2, [r3, #4]
   16746:	687b      	ldr	r3, [r7, #4]
   16748:	3306      	adds	r3, #6
   1674a:	881b      	ldrh	r3, [r3, #0]
   1674c:	b21b      	sxth	r3, r3
   1674e:	4618      	mov	r0, r3
   16750:	f000 fe5e 	bl	17410 <__aeabi_i2d>
   16754:	4604      	mov	r4, r0
   16756:	460d      	mov	r5, r1
   16758:	687b      	ldr	r3, [r7, #4]
   1675a:	3302      	adds	r3, #2
   1675c:	881b      	ldrh	r3, [r3, #0]
   1675e:	b21b      	sxth	r3, r3
   16760:	4618      	mov	r0, r3
   16762:	f000 fe55 	bl	17410 <__aeabi_i2d>
   16766:	4602      	mov	r2, r0
   16768:	460b      	mov	r3, r1
   1676a:	4620      	mov	r0, r4
   1676c:	4629      	mov	r1, r5
   1676e:	f000 fd03 	bl	17178 <__adddf3>
   16772:	4602      	mov	r2, r0
   16774:	460b      	mov	r3, r1
   16776:	4610      	mov	r0, r2
   16778:	4619      	mov	r1, r3
   1677a:	a31f      	add	r3, pc, #124	; (adr r3, 167f8 <servo_set+0x2e4>)
   1677c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16780:	f000 feac 	bl	174dc <__aeabi_dmul>
   16784:	4602      	mov	r2, r0
   16786:	460b      	mov	r3, r1
   16788:	4610      	mov	r0, r2
   1678a:	4619      	mov	r1, r3
   1678c:	f001 f940 	bl	17a10 <__aeabi_d2iz>
   16790:	4603      	mov	r3, r0
   16792:	b29b      	uxth	r3, r3
   16794:	b29b      	uxth	r3, r3
   16796:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   1679a:	3320      	adds	r3, #32
   1679c:	81fb      	strh	r3, [r7, #14]
   1679e:	89fb      	ldrh	r3, [r7, #14]
   167a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   167a4:	d307      	bcc.n	167b6 <servo_set+0x2a2>
   167a6:	89fb      	ldrh	r3, [r7, #14]
   167a8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   167ac:	bf28      	it	cs
   167ae:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   167b2:	b29a      	uxth	r2, r3
   167b4:	e001      	b.n	167ba <servo_set+0x2a6>
   167b6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   167ba:	f243 4304 	movw	r3, #13316	; 0x3404
   167be:	f2c2 0301 	movt	r3, #8193	; 0x2001
   167c2:	81da      	strh	r2, [r3, #14]
}
   167c4:	3710      	adds	r7, #16
   167c6:	46bd      	mov	sp, r7
   167c8:	bdb0      	pop	{r4, r5, r7, pc}
   167ca:	bf00      	nop
   167cc:	f3af 8000 	nop.w
   167d0:	aaaa9ef0 	.word	0xaaaa9ef0
   167d4:	3feaaaaa 	.word	0x3feaaaaa
   167d8:	fc96473e 	.word	0xfc96473e
   167dc:	3fdfc962 	.word	0x3fdfc962
   167e0:	51eb851f 	.word	0x51eb851f
   167e4:	3fe51eb8 	.word	0x3fe51eb8
   167e8:	9999999a 	.word	0x9999999a
   167ec:	bfe19999 	.word	0xbfe19999
   167f0:	aaaa9ef0 	.word	0xaaaa9ef0
   167f4:	bfe0aaaa 	.word	0xbfe0aaaa
   167f8:	eeeed77a 	.word	0xeeeed77a
   167fc:	bfdeeeee 	.word	0xbfdeeeee

00016800 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16800:	b480      	push	{r7}
   16802:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16804:	f242 0320 	movw	r3, #8224	; 0x2020
   16808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1680c:	2200      	movs	r2, #0
   1680e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16810:	f242 0309 	movw	r3, #8201	; 0x2009
   16814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16818:	2219      	movs	r2, #25
   1681a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1681c:	f242 030b 	movw	r3, #8203	; 0x200b
   16820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16824:	2200      	movs	r2, #0
   16826:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16828:	f242 030a 	movw	r3, #8202	; 0x200a
   1682c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16830:	2208      	movs	r2, #8
   16832:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16834:	f242 0320 	movw	r3, #8224	; 0x2020
   16838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1683c:	2286      	movs	r2, #134	; 0x86
   1683e:	701a      	strb	r2, [r3, #0]
}
   16840:	46bd      	mov	sp, r7
   16842:	f85d 7b04 	ldr.w	r7, [sp], #4
   16846:	4770      	bx	lr

00016848 <uart_init_rx>:

void uart_init_rx() {
   16848:	b480      	push	{r7}
   1684a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   1684c:	f242 030a 	movw	r3, #8202	; 0x200a
   16850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16854:	f242 020a 	movw	r2, #8202	; 0x200a
   16858:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1685c:	7812      	ldrb	r2, [r2, #0]
   1685e:	b2d2      	uxtb	r2, r2
   16860:	f042 0210 	orr.w	r2, r2, #16
   16864:	b2d2      	uxtb	r2, r2
   16866:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16868:	f242 030a 	movw	r3, #8202	; 0x200a
   1686c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16870:	f242 020a 	movw	r2, #8202	; 0x200a
   16874:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16878:	7812      	ldrb	r2, [r2, #0]
   1687a:	b2d2      	uxtb	r2, r2
   1687c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16880:	b2d2      	uxtb	r2, r2
   16882:	701a      	strb	r2, [r3, #0]
}
   16884:	46bd      	mov	sp, r7
   16886:	f85d 7b04 	ldr.w	r7, [sp], #4
   1688a:	4770      	bx	lr

0001688c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   1688c:	b480      	push	{r7}
   1688e:	b083      	sub	sp, #12
   16890:	af00      	add	r7, sp, #0
   16892:	4603      	mov	r3, r0
   16894:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16896:	f242 030a 	movw	r3, #8202	; 0x200a
   1689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1689e:	781b      	ldrb	r3, [r3, #0]
   168a0:	b2db      	uxtb	r3, r3
   168a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   168a6:	2b00      	cmp	r3, #0
   168a8:	d028      	beq.n	168fc <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   168aa:	f243 4319 	movw	r3, #13337	; 0x3419
   168ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168b2:	781b      	ldrb	r3, [r3, #0]
   168b4:	b2db      	uxtb	r3, r3
   168b6:	461a      	mov	r2, r3
   168b8:	f243 4318 	movw	r3, #13336	; 0x3418
   168bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168c0:	781b      	ldrb	r3, [r3, #0]
   168c2:	3301      	adds	r3, #1
   168c4:	429a      	cmp	r2, r3
   168c6:	d100      	bne.n	168ca <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   168c8:	e02c      	b.n	16924 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   168ca:	f243 4318 	movw	r3, #13336	; 0x3418
   168ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168d2:	781b      	ldrb	r3, [r3, #0]
   168d4:	461a      	mov	r2, r3
   168d6:	f243 431c 	movw	r3, #13340	; 0x341c
   168da:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168de:	79f9      	ldrb	r1, [r7, #7]
   168e0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   168e2:	f243 4318 	movw	r3, #13336	; 0x3418
   168e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168ea:	781b      	ldrb	r3, [r3, #0]
   168ec:	3301      	adds	r3, #1
   168ee:	b2da      	uxtb	r2, r3
   168f0:	f243 4318 	movw	r3, #13336	; 0x3418
   168f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
   168f8:	701a      	strb	r2, [r3, #0]
   168fa:	e013      	b.n	16924 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   168fc:	f242 030c 	movw	r3, #8204	; 0x200c
   16900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16904:	79fa      	ldrb	r2, [r7, #7]
   16906:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16908:	f242 030a 	movw	r3, #8202	; 0x200a
   1690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16910:	f242 020a 	movw	r2, #8202	; 0x200a
   16914:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16918:	7812      	ldrb	r2, [r2, #0]
   1691a:	b2d2      	uxtb	r2, r2
   1691c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16920:	b2d2      	uxtb	r2, r2
   16922:	701a      	strb	r2, [r3, #0]
  }
}
   16924:	370c      	adds	r7, #12
   16926:	46bd      	mov	sp, r7
   16928:	f85d 7b04 	ldr.w	r7, [sp], #4
   1692c:	4770      	bx	lr
   1692e:	bf00      	nop

00016930 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16930:	b590      	push	{r4, r7, lr}
   16932:	b089      	sub	sp, #36	; 0x24
   16934:	af00      	add	r7, sp, #0
   16936:	4603      	mov	r3, r0
   16938:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1693a:	f248 4350 	movw	r3, #33872	; 0x8450
   1693e:	f2c0 0301 	movt	r3, #1
   16942:	f107 040c 	add.w	r4, r7, #12
   16946:	6818      	ldr	r0, [r3, #0]
   16948:	6859      	ldr	r1, [r3, #4]
   1694a:	689a      	ldr	r2, [r3, #8]
   1694c:	68db      	ldr	r3, [r3, #12]
   1694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16950:	79fb      	ldrb	r3, [r7, #7]
   16952:	091b      	lsrs	r3, r3, #4
   16954:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16956:	79fb      	ldrb	r3, [r7, #7]
   16958:	f003 030f 	and.w	r3, r3, #15
   1695c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1695e:	230f      	movs	r3, #15
   16960:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16962:	230f      	movs	r3, #15
   16964:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16966:	7ffb      	ldrb	r3, [r7, #31]
   16968:	f107 0220 	add.w	r2, r7, #32
   1696c:	4413      	add	r3, r2
   1696e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16972:	4618      	mov	r0, r3
   16974:	f7ff ff8a 	bl	1688c <uart_transmit>
  uart_transmit(hex[low]);
   16978:	7fbb      	ldrb	r3, [r7, #30]
   1697a:	f107 0220 	add.w	r2, r7, #32
   1697e:	4413      	add	r3, r2
   16980:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16984:	4618      	mov	r0, r3
   16986:	f7ff ff81 	bl	1688c <uart_transmit>
} 
   1698a:	3724      	adds	r7, #36	; 0x24
   1698c:	46bd      	mov	sp, r7
   1698e:	bd90      	pop	{r4, r7, pc}

00016990 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16990:	b580      	push	{r7, lr}
   16992:	b084      	sub	sp, #16
   16994:	af00      	add	r7, sp, #0
   16996:	4603      	mov	r3, r0
   16998:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1699a:	88fb      	ldrh	r3, [r7, #6]
   1699c:	0a1b      	lsrs	r3, r3, #8
   1699e:	b29b      	uxth	r3, r3
   169a0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   169a2:	88fb      	ldrh	r3, [r7, #6]
   169a4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   169a6:	7bfb      	ldrb	r3, [r7, #15]
   169a8:	4618      	mov	r0, r3
   169aa:	f7ff ffc1 	bl	16930 <uart_print_hex>
  uart_print_hex(low);
   169ae:	7bbb      	ldrb	r3, [r7, #14]
   169b0:	4618      	mov	r0, r3
   169b2:	f7ff ffbd 	bl	16930 <uart_print_hex>
}
   169b6:	3710      	adds	r7, #16
   169b8:	46bd      	mov	sp, r7
   169ba:	bd80      	pop	{r7, pc}

000169bc <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   169bc:	b580      	push	{r7, lr}
   169be:	b084      	sub	sp, #16
   169c0:	af00      	add	r7, sp, #0
   169c2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   169c4:	2300      	movs	r3, #0
   169c6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   169c8:	e009      	b.n	169de <uart_print_string+0x22>
    uart_transmit(s[i]);
   169ca:	7bfb      	ldrb	r3, [r7, #15]
   169cc:	687a      	ldr	r2, [r7, #4]
   169ce:	4413      	add	r3, r2
   169d0:	781b      	ldrb	r3, [r3, #0]
   169d2:	4618      	mov	r0, r3
   169d4:	f7ff ff5a 	bl	1688c <uart_transmit>
    i++;
   169d8:	7bfb      	ldrb	r3, [r7, #15]
   169da:	3301      	adds	r3, #1
   169dc:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   169de:	7bfb      	ldrb	r3, [r7, #15]
   169e0:	687a      	ldr	r2, [r7, #4]
   169e2:	4413      	add	r3, r2
   169e4:	781b      	ldrb	r3, [r3, #0]
   169e6:	2b00      	cmp	r3, #0
   169e8:	d1ef      	bne.n	169ca <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   169ea:	3710      	adds	r7, #16
   169ec:	46bd      	mov	sp, r7
   169ee:	bd80      	pop	{r7, pc}

000169f0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   169f0:	b480      	push	{r7}
   169f2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   169f4:	f243 4318 	movw	r3, #13336	; 0x3418
   169f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
   169fc:	781a      	ldrb	r2, [r3, #0]
   169fe:	f243 4319 	movw	r3, #13337	; 0x3419
   16a02:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16a06:	781b      	ldrb	r3, [r3, #0]
   16a08:	b2db      	uxtb	r3, r3
   16a0a:	429a      	cmp	r2, r3
   16a0c:	d10e      	bne.n	16a2c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16a0e:	f242 030a 	movw	r3, #8202	; 0x200a
   16a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a16:	f242 020a 	movw	r2, #8202	; 0x200a
   16a1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a1e:	7812      	ldrb	r2, [r2, #0]
   16a20:	b2d2      	uxtb	r2, r2
   16a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16a26:	b2d2      	uxtb	r2, r2
   16a28:	701a      	strb	r2, [r3, #0]
   16a2a:	e01d      	b.n	16a68 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16a2c:	f242 030c 	movw	r3, #8204	; 0x200c
   16a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a34:	f243 4219 	movw	r2, #13337	; 0x3419
   16a38:	f2c2 0201 	movt	r2, #8193	; 0x2001
   16a3c:	7812      	ldrb	r2, [r2, #0]
   16a3e:	b2d2      	uxtb	r2, r2
   16a40:	4611      	mov	r1, r2
   16a42:	f243 421c 	movw	r2, #13340	; 0x341c
   16a46:	f2c2 0201 	movt	r2, #8193	; 0x2001
   16a4a:	5c52      	ldrb	r2, [r2, r1]
   16a4c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16a4e:	f243 4319 	movw	r3, #13337	; 0x3419
   16a52:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16a56:	781b      	ldrb	r3, [r3, #0]
   16a58:	b2db      	uxtb	r3, r3
   16a5a:	3301      	adds	r3, #1
   16a5c:	b2da      	uxtb	r2, r3
   16a5e:	f243 4319 	movw	r3, #13337	; 0x3419
   16a62:	f2c2 0301 	movt	r3, #8193	; 0x2001
   16a66:	701a      	strb	r2, [r3, #0]
  }
}
   16a68:	46bd      	mov	sp, r7
   16a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a6e:	4770      	bx	lr

00016a70 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16a70:	b580      	push	{r7, lr}
   16a72:	b082      	sub	sp, #8
   16a74:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16a76:	2010      	movs	r0, #16
   16a78:	2101      	movs	r1, #1
   16a7a:	f7ea f9a1 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16a7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16a82:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16a8a:	2201      	movs	r2, #1
   16a8c:	f7ea fca8 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16a94:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16a96:	2310      	movs	r3, #16
   16a98:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16a9a:	2303      	movs	r3, #3
   16a9c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16a9e:	1d3b      	adds	r3, r7, #4
   16aa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16aa4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16aa8:	4619      	mov	r1, r3
   16aaa:	f7ea fb5d 	bl	1168 <GPIO_Init>
}
   16aae:	3708      	adds	r7, #8
   16ab0:	46bd      	mov	sp, r7
   16ab2:	bd80      	pop	{r7, pc}

00016ab4 <init_button>:

void init_button(void)
{
   16ab4:	b580      	push	{r7, lr}
   16ab6:	b082      	sub	sp, #8
   16ab8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16aba:	2004      	movs	r0, #4
   16abc:	2101      	movs	r1, #1
   16abe:	f7ea f97f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16ac2:	2301      	movs	r3, #1
   16ac4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16ac6:	2304      	movs	r3, #4
   16ac8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16aca:	2303      	movs	r3, #3
   16acc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16ace:	1d3b      	adds	r3, r7, #4
   16ad0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16ad4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16ad8:	4619      	mov	r1, r3
   16ada:	f7ea fb45 	bl	1168 <GPIO_Init>
}
   16ade:	3708      	adds	r7, #8
   16ae0:	46bd      	mov	sp, r7
   16ae2:	bd80      	pop	{r7, pc}

00016ae4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16ae4:	b580      	push	{r7, lr}
   16ae6:	b084      	sub	sp, #16
   16ae8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16aea:	2001      	movs	r0, #1
   16aec:	2101      	movs	r1, #1
   16aee:	f7ea f967 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16af2:	2000      	movs	r0, #0
   16af4:	2100      	movs	r1, #0
   16af6:	f7ea fd6b 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16afa:	2301      	movs	r3, #1
   16afc:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16afe:	2300      	movs	r3, #0
   16b00:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16b02:	2308      	movs	r3, #8
   16b04:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16b06:	2301      	movs	r3, #1
   16b08:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16b0a:	f107 0308 	add.w	r3, r7, #8
   16b0e:	4618      	mov	r0, r3
   16b10:	f7eb fa64 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16b14:	2306      	movs	r3, #6
   16b16:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16b18:	230f      	movs	r3, #15
   16b1a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16b1c:	230f      	movs	r3, #15
   16b1e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16b20:	2301      	movs	r3, #1
   16b22:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16b24:	1d3b      	adds	r3, r7, #4
   16b26:	4618      	mov	r0, r3
   16b28:	f7eb fb92 	bl	2250 <NVIC_Init>
}
   16b2c:	3710      	adds	r7, #16
   16b2e:	46bd      	mov	sp, r7
   16b30:	bd80      	pop	{r7, pc}
   16b32:	bf00      	nop

00016b34 <init_rs232>:

void init_rs232(void)
{
   16b34:	b580      	push	{r7, lr}
   16b36:	b086      	sub	sp, #24
   16b38:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16b3a:	2005      	movs	r0, #5
   16b3c:	2101      	movs	r1, #1
   16b3e:	f7ea f93f 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16b42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16b46:	2101      	movs	r1, #1
   16b48:	f7ea f962 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16b4c:	2308      	movs	r3, #8
   16b4e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16b50:	2304      	movs	r3, #4
   16b52:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16b54:	1d3b      	adds	r3, r7, #4
   16b56:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16b5a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16b5e:	4619      	mov	r1, r3
   16b60:	f7ea fb02 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16b64:	2304      	movs	r3, #4
   16b66:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16b68:	2303      	movs	r3, #3
   16b6a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16b6c:	2318      	movs	r3, #24
   16b6e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16b70:	1d3b      	adds	r3, r7, #4
   16b72:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16b76:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16b7a:	4619      	mov	r1, r3
   16b7c:	f7ea faf4 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16b80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16b84:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16b86:	2300      	movs	r3, #0
   16b88:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16b8a:	2300      	movs	r3, #0
   16b8c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16b8e:	2300      	movs	r3, #0
   16b90:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16b92:	2300      	movs	r3, #0
   16b94:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16b96:	230c      	movs	r3, #12
   16b98:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16b9a:	f107 0308 	add.w	r3, r7, #8
   16b9e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ba2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16ba6:	4619      	mov	r1, r3
   16ba8:	f7ea fdc6 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16bac:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bb0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16bb4:	2101      	movs	r1, #1
   16bb6:	f7ea fedd 	bl	1974 <USART_Cmd>
}
   16bba:	3718      	adds	r7, #24
   16bbc:	46bd      	mov	sp, r7
   16bbe:	bd80      	pop	{r7, pc}

00016bc0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16bc0:	b580      	push	{r7, lr}
   16bc2:	b082      	sub	sp, #8
   16bc4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16bc6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bca:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16bce:	f240 7127 	movw	r1, #1831	; 0x727
   16bd2:	2200      	movs	r2, #0
   16bd4:	f7ea feee 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16bd8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bdc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16be0:	f240 5125 	movw	r1, #1317	; 0x525
   16be4:	2201      	movs	r2, #1
   16be6:	f7ea fee5 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16bea:	2326      	movs	r3, #38	; 0x26
   16bec:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16bee:	2300      	movs	r3, #0
   16bf0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16bf2:	2301      	movs	r3, #1
   16bf4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16bf6:	1d3b      	adds	r3, r7, #4
   16bf8:	4618      	mov	r0, r3
   16bfa:	f7eb fb29 	bl	2250 <NVIC_Init>
}
   16bfe:	3708      	adds	r7, #8
   16c00:	46bd      	mov	sp, r7
   16c02:	bd80      	pop	{r7, pc}

00016c04 <enable_rs232>:

void enable_rs232(void)
{
   16c04:	b580      	push	{r7, lr}
   16c06:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16c08:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16c0c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16c10:	2101      	movs	r1, #1
   16c12:	f7ea feaf 	bl	1974 <USART_Cmd>
}
   16c16:	bd80      	pop	{r7, pc}

00016c18 <send_byte>:

void send_byte(uint8_t b)
{
   16c18:	b580      	push	{r7, lr}
   16c1a:	b082      	sub	sp, #8
   16c1c:	af00      	add	r7, sp, #0
   16c1e:	4603      	mov	r3, r0
   16c20:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16c22:	bf00      	nop
   16c24:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16c28:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16c2c:	2180      	movs	r1, #128	; 0x80
   16c2e:	f7eb f90d 	bl	1e4c <USART_GetFlagStatus>
   16c32:	4603      	mov	r3, r0
   16c34:	2b00      	cmp	r3, #0
   16c36:	d0f5      	beq.n	16c24 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16c3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16c44:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16c48:	68d2      	ldr	r2, [r2, #12]
   16c4a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16c4e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   16c50:	79fb      	ldrb	r3, [r7, #7]
   16c52:	b29b      	uxth	r3, r3
   16c54:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16c58:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16c5c:	4619      	mov	r1, r3
   16c5e:	f7ea ffa9 	bl	1bb4 <USART_SendData>
}
   16c62:	3708      	adds	r7, #8
   16c64:	46bd      	mov	sp, r7
   16c66:	bd80      	pop	{r7, pc}

00016c68 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   16c68:	b580      	push	{r7, lr}
   16c6a:	b082      	sub	sp, #8
   16c6c:	af00      	add	r7, sp, #0
   16c6e:	4603      	mov	r3, r0
   16c70:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   16c72:	79fb      	ldrb	r3, [r7, #7]
   16c74:	3330      	adds	r3, #48	; 0x30
   16c76:	b2db      	uxtb	r3, r3
   16c78:	4618      	mov	r0, r3
   16c7a:	f7ff ffcd 	bl	16c18 <send_byte>
}
   16c7e:	3708      	adds	r7, #8
   16c80:	46bd      	mov	sp, r7
   16c82:	bd80      	pop	{r7, pc}

00016c84 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   16c84:	b580      	push	{r7, lr}
   16c86:	b084      	sub	sp, #16
   16c88:	af00      	add	r7, sp, #0
   16c8a:	6078      	str	r0, [r7, #4]
    int i = 0;
   16c8c:	2300      	movs	r3, #0
   16c8e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   16c90:	e009      	b.n	16ca6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   16c92:	68fb      	ldr	r3, [r7, #12]
   16c94:	687a      	ldr	r2, [r7, #4]
   16c96:	4413      	add	r3, r2
   16c98:	781b      	ldrb	r3, [r3, #0]
   16c9a:	4618      	mov	r0, r3
   16c9c:	f7ff ffbc 	bl	16c18 <send_byte>
        i++;
   16ca0:	68fb      	ldr	r3, [r7, #12]
   16ca2:	3301      	adds	r3, #1
   16ca4:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	687a      	ldr	r2, [r7, #4]
   16caa:	4413      	add	r3, r2
   16cac:	781b      	ldrb	r3, [r3, #0]
   16cae:	2b00      	cmp	r3, #0
   16cb0:	d1ef      	bne.n	16c92 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   16cb2:	3710      	adds	r7, #16
   16cb4:	46bd      	mov	sp, r7
   16cb6:	bd80      	pop	{r7, pc}

00016cb8 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   16cb8:	b580      	push	{r7, lr}
   16cba:	b08a      	sub	sp, #40	; 0x28
   16cbc:	af00      	add	r7, sp, #0
   16cbe:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   16cc0:	2300      	movs	r3, #0
   16cc2:	623b      	str	r3, [r7, #32]
    long num = c_num;
   16cc4:	687b      	ldr	r3, [r7, #4]
   16cc6:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   16cc8:	69fb      	ldr	r3, [r7, #28]
   16cca:	2b00      	cmp	r3, #0
   16ccc:	d106      	bne.n	16cdc <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   16cce:	f248 4060 	movw	r0, #33888	; 0x8460
   16cd2:	f2c0 0001 	movt	r0, #1
   16cd6:	f7ff ffd5 	bl	16c84 <vPrintString>
   16cda:	e062      	b.n	16da2 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   16cdc:	e024      	b.n	16d28 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   16cde:	69f9      	ldr	r1, [r7, #28]
   16ce0:	f246 6367 	movw	r3, #26215	; 0x6667
   16ce4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16ce8:	fb83 2301 	smull	r2, r3, r3, r1
   16cec:	109a      	asrs	r2, r3, #2
   16cee:	17cb      	asrs	r3, r1, #31
   16cf0:	1ad2      	subs	r2, r2, r3
   16cf2:	4613      	mov	r3, r2
   16cf4:	009b      	lsls	r3, r3, #2
   16cf6:	4413      	add	r3, r2
   16cf8:	005b      	lsls	r3, r3, #1
   16cfa:	1aca      	subs	r2, r1, r3
   16cfc:	b2d3      	uxtb	r3, r2
   16cfe:	3330      	adds	r3, #48	; 0x30
   16d00:	b2da      	uxtb	r2, r3
   16d02:	f107 010c 	add.w	r1, r7, #12
   16d06:	6a3b      	ldr	r3, [r7, #32]
   16d08:	440b      	add	r3, r1
   16d0a:	701a      	strb	r2, [r3, #0]
            count ++;
   16d0c:	6a3b      	ldr	r3, [r7, #32]
   16d0e:	3301      	adds	r3, #1
   16d10:	623b      	str	r3, [r7, #32]
            num /= 10;
   16d12:	69fa      	ldr	r2, [r7, #28]
   16d14:	f246 6367 	movw	r3, #26215	; 0x6667
   16d18:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16d1c:	fb83 1302 	smull	r1, r3, r3, r2
   16d20:	1099      	asrs	r1, r3, #2
   16d22:	17d3      	asrs	r3, r2, #31
   16d24:	1acb      	subs	r3, r1, r3
   16d26:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   16d28:	69fb      	ldr	r3, [r7, #28]
   16d2a:	2b00      	cmp	r3, #0
   16d2c:	d1d7      	bne.n	16cde <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   16d2e:	f107 020c 	add.w	r2, r7, #12
   16d32:	6a3b      	ldr	r3, [r7, #32]
   16d34:	4413      	add	r3, r2
   16d36:	2200      	movs	r2, #0
   16d38:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   16d3a:	2300      	movs	r3, #0
   16d3c:	627b      	str	r3, [r7, #36]	; 0x24
   16d3e:	e020      	b.n	16d82 <vPrintNumber+0xca>
        {
            tmp = time[i];
   16d40:	f107 020c 	add.w	r2, r7, #12
   16d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d46:	4413      	add	r3, r2
   16d48:	781b      	ldrb	r3, [r3, #0]
   16d4a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   16d4c:	6a3a      	ldr	r2, [r7, #32]
   16d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d50:	1ad3      	subs	r3, r2, r3
   16d52:	3b01      	subs	r3, #1
   16d54:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16d58:	4413      	add	r3, r2
   16d5a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   16d5e:	f107 010c 	add.w	r1, r7, #12
   16d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d64:	440b      	add	r3, r1
   16d66:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   16d68:	6a3a      	ldr	r2, [r7, #32]
   16d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d6c:	1ad3      	subs	r3, r2, r3
   16d6e:	3b01      	subs	r3, #1
   16d70:	f107 0128 	add.w	r1, r7, #40	; 0x28
   16d74:	440b      	add	r3, r1
   16d76:	7efa      	ldrb	r2, [r7, #27]
   16d78:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   16d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d7e:	3301      	adds	r3, #1
   16d80:	627b      	str	r3, [r7, #36]	; 0x24
   16d82:	6a3b      	ldr	r3, [r7, #32]
   16d84:	085a      	lsrs	r2, r3, #1
   16d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d88:	429a      	cmp	r2, r3
   16d8a:	d8d9      	bhi.n	16d40 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   16d8c:	f107 030c 	add.w	r3, r7, #12
   16d90:	4618      	mov	r0, r3
   16d92:	f7ff ff77 	bl	16c84 <vPrintString>
        vPrintString("\n\r");
   16d96:	f248 4064 	movw	r0, #33892	; 0x8464
   16d9a:	f2c0 0001 	movt	r0, #1
   16d9e:	f7ff ff71 	bl	16c84 <vPrintString>
    }
}
   16da2:	3728      	adds	r7, #40	; 0x28
   16da4:	46bd      	mov	sp, r7
   16da6:	bd80      	pop	{r7, pc}

00016da8 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   16da8:	b580      	push	{r7, lr}
   16daa:	b084      	sub	sp, #16
   16dac:	af04      	add	r7, sp, #16
    init_led();
   16dae:	f7ff fe5f 	bl	16a70 <init_led>
    init_rs232();
   16db2:	f7ff febf 	bl	16b34 <init_rs232>
    enable_rs232_interrupts();
   16db6:	f7ff ff03 	bl	16bc0 <enable_rs232_interrupts>
    enable_rs232();
   16dba:	f7ff ff23 	bl	16c04 <enable_rs232>

    //vTaskCompleteInitialise();
    vSemaphoreInitialise();
   16dbe:	f7ec f81f 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
   16dc2:	f7ec f85d 	bl	2e80 <vParameterInitialise>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   16dc6:	2301      	movs	r3, #1
   16dc8:	9300      	str	r3, [sp, #0]
   16dca:	4b9b      	ldr	r3, [pc, #620]	; (17038 <main+0x290>)
   16dcc:	9301      	str	r3, [sp, #4]
   16dce:	2300      	movs	r3, #0
   16dd0:	9302      	str	r3, [sp, #8]
   16dd2:	2300      	movs	r3, #0
   16dd4:	9303      	str	r3, [sp, #12]
   16dd6:	f243 60a1 	movw	r0, #13985	; 0x36a1
   16dda:	f2c0 0000 	movt	r0, #0
   16dde:	f248 4168 	movw	r1, #33896	; 0x8468
   16de2:	f2c0 0101 	movt	r1, #1
   16de6:	2280      	movs	r2, #128	; 0x80
   16de8:	4b94      	ldr	r3, [pc, #592]	; (1703c <main+0x294>)
   16dea:	f7ed fa23 	bl	4234 <xTaskGenericCreate>

    xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[0],tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   16dee:	2301      	movs	r3, #1
   16df0:	9300      	str	r3, [sp, #0]
   16df2:	f241 2300 	movw	r3, #4608	; 0x1200
   16df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dfa:	9301      	str	r3, [sp, #4]
   16dfc:	2300      	movs	r3, #0
   16dfe:	9302      	str	r3, [sp, #8]
   16e00:	2300      	movs	r3, #0
   16e02:	9303      	str	r3, [sp, #12]
   16e04:	f243 3005 	movw	r0, #13061	; 0x3305
   16e08:	f2c0 0000 	movt	r0, #0
   16e0c:	f248 4174 	movw	r1, #33908	; 0x8474
   16e10:	f2c0 0101 	movt	r1, #1
   16e14:	2280      	movs	r2, #128	; 0x80
   16e16:	f640 3370 	movw	r3, #2928	; 0xb70
   16e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e1e:	f7ed fa09 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[1]);
   16e22:	2301      	movs	r3, #1
   16e24:	9300      	str	r3, [sp, #0]
   16e26:	4b86      	ldr	r3, [pc, #536]	; (17040 <main+0x298>)
   16e28:	9301      	str	r3, [sp, #4]
   16e2a:	2300      	movs	r3, #0
   16e2c:	9302      	str	r3, [sp, #8]
   16e2e:	2300      	movs	r3, #0
   16e30:	9303      	str	r3, [sp, #12]
   16e32:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16e36:	f2c0 0000 	movt	r0, #0
   16e3a:	f248 417c 	movw	r1, #33916	; 0x847c
   16e3e:	f2c0 0101 	movt	r1, #1
   16e42:	2280      	movs	r2, #128	; 0x80
   16e44:	4b7f      	ldr	r3, [pc, #508]	; (17044 <main+0x29c>)
   16e46:	f7ed f9f5 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[2],tskIDLE_PRIORITY + 1, &xTaskOfHandle[2]);
   16e4a:	2301      	movs	r3, #1
   16e4c:	9300      	str	r3, [sp, #0]
   16e4e:	4b7e      	ldr	r3, [pc, #504]	; (17048 <main+0x2a0>)
   16e50:	9301      	str	r3, [sp, #4]
   16e52:	2300      	movs	r3, #0
   16e54:	9302      	str	r3, [sp, #8]
   16e56:	2300      	movs	r3, #0
   16e58:	9303      	str	r3, [sp, #12]
   16e5a:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16e5e:	f2c0 0000 	movt	r0, #0
   16e62:	f248 417c 	movw	r1, #33916	; 0x847c
   16e66:	f2c0 0101 	movt	r1, #1
   16e6a:	2280      	movs	r2, #128	; 0x80
   16e6c:	4b77      	ldr	r3, [pc, #476]	; (1704c <main+0x2a4>)
   16e6e:	f7ed f9e1 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[3],tskIDLE_PRIORITY + 1, &xTaskOfHandle[3]);
   16e72:	2301      	movs	r3, #1
   16e74:	9300      	str	r3, [sp, #0]
   16e76:	4b76      	ldr	r3, [pc, #472]	; (17050 <main+0x2a8>)
   16e78:	9301      	str	r3, [sp, #4]
   16e7a:	2300      	movs	r3, #0
   16e7c:	9302      	str	r3, [sp, #8]
   16e7e:	2300      	movs	r3, #0
   16e80:	9303      	str	r3, [sp, #12]
   16e82:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16e86:	f2c0 0000 	movt	r0, #0
   16e8a:	f248 417c 	movw	r1, #33916	; 0x847c
   16e8e:	f2c0 0101 	movt	r1, #1
   16e92:	2280      	movs	r2, #128	; 0x80
   16e94:	4b6f      	ldr	r3, [pc, #444]	; (17054 <main+0x2ac>)
   16e96:	f7ed f9cd 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[4],tskIDLE_PRIORITY + 1, &xTaskOfHandle[4]);
   16e9a:	2301      	movs	r3, #1
   16e9c:	9300      	str	r3, [sp, #0]
   16e9e:	4b6e      	ldr	r3, [pc, #440]	; (17058 <main+0x2b0>)
   16ea0:	9301      	str	r3, [sp, #4]
   16ea2:	2300      	movs	r3, #0
   16ea4:	9302      	str	r3, [sp, #8]
   16ea6:	2300      	movs	r3, #0
   16ea8:	9303      	str	r3, [sp, #12]
   16eaa:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16eae:	f2c0 0000 	movt	r0, #0
   16eb2:	f248 417c 	movw	r1, #33916	; 0x847c
   16eb6:	f2c0 0101 	movt	r1, #1
   16eba:	2280      	movs	r2, #128	; 0x80
   16ebc:	4b67      	ldr	r3, [pc, #412]	; (1705c <main+0x2b4>)
   16ebe:	f7ed f9b9 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[5],tskIDLE_PRIORITY + 1, &xTaskOfHandle[5]);
   16ec2:	2301      	movs	r3, #1
   16ec4:	9300      	str	r3, [sp, #0]
   16ec6:	4b66      	ldr	r3, [pc, #408]	; (17060 <main+0x2b8>)
   16ec8:	9301      	str	r3, [sp, #4]
   16eca:	2300      	movs	r3, #0
   16ecc:	9302      	str	r3, [sp, #8]
   16ece:	2300      	movs	r3, #0
   16ed0:	9303      	str	r3, [sp, #12]
   16ed2:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16ed6:	f2c0 0000 	movt	r0, #0
   16eda:	f248 417c 	movw	r1, #33916	; 0x847c
   16ede:	f2c0 0101 	movt	r1, #1
   16ee2:	2280      	movs	r2, #128	; 0x80
   16ee4:	4b5f      	ldr	r3, [pc, #380]	; (17064 <main+0x2bc>)
   16ee6:	f7ed f9a5 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[6],tskIDLE_PRIORITY + 1, &xTaskOfHandle[6]);
   16eea:	2301      	movs	r3, #1
   16eec:	9300      	str	r3, [sp, #0]
   16eee:	4b5e      	ldr	r3, [pc, #376]	; (17068 <main+0x2c0>)
   16ef0:	9301      	str	r3, [sp, #4]
   16ef2:	2300      	movs	r3, #0
   16ef4:	9302      	str	r3, [sp, #8]
   16ef6:	2300      	movs	r3, #0
   16ef8:	9303      	str	r3, [sp, #12]
   16efa:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16efe:	f2c0 0000 	movt	r0, #0
   16f02:	f248 417c 	movw	r1, #33916	; 0x847c
   16f06:	f2c0 0101 	movt	r1, #1
   16f0a:	2280      	movs	r2, #128	; 0x80
   16f0c:	4b57      	ldr	r3, [pc, #348]	; (1706c <main+0x2c4>)
   16f0e:	f7ed f991 	bl	4234 <xTaskGenericCreate>

    xTaskCreate( vSensor,  "Sensor", SERVANT_STACK_SIZE,  (void *)&pvParameters[7],tskIDLE_PRIORITY + 2,  &xTaskOfHandle[7]);
   16f12:	2302      	movs	r3, #2
   16f14:	9300      	str	r3, [sp, #0]
   16f16:	4b56      	ldr	r3, [pc, #344]	; (17070 <main+0x2c8>)
   16f18:	9301      	str	r3, [sp, #4]
   16f1a:	2300      	movs	r3, #0
   16f1c:	9302      	str	r3, [sp, #8]
   16f1e:	2300      	movs	r3, #0
   16f20:	9303      	str	r3, [sp, #12]
   16f22:	f243 3005 	movw	r0, #13061	; 0x3305
   16f26:	f2c0 0000 	movt	r0, #0
   16f2a:	f248 4174 	movw	r1, #33908	; 0x8474
   16f2e:	f2c0 0101 	movt	r1, #1
   16f32:	2280      	movs	r2, #128	; 0x80
   16f34:	4b4f      	ldr	r3, [pc, #316]	; (17074 <main+0x2cc>)
   16f36:	f7ed f97d 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[8],tskIDLE_PRIORITY + 2,  &xTaskOfHandle[8]);
   16f3a:	2302      	movs	r3, #2
   16f3c:	9300      	str	r3, [sp, #0]
   16f3e:	4b4e      	ldr	r3, [pc, #312]	; (17078 <main+0x2d0>)
   16f40:	9301      	str	r3, [sp, #4]
   16f42:	2300      	movs	r3, #0
   16f44:	9302      	str	r3, [sp, #8]
   16f46:	2300      	movs	r3, #0
   16f48:	9303      	str	r3, [sp, #12]
   16f4a:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16f4e:	f2c0 0000 	movt	r0, #0
   16f52:	f248 417c 	movw	r1, #33916	; 0x847c
   16f56:	f2c0 0101 	movt	r1, #1
   16f5a:	2280      	movs	r2, #128	; 0x80
   16f5c:	4b47      	ldr	r3, [pc, #284]	; (1707c <main+0x2d4>)
   16f5e:	f7ed f969 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[9],tskIDLE_PRIORITY + 2,  &xTaskOfHandle[9]);
   16f62:	2302      	movs	r3, #2
   16f64:	9300      	str	r3, [sp, #0]
   16f66:	4b46      	ldr	r3, [pc, #280]	; (17080 <main+0x2d8>)
   16f68:	9301      	str	r3, [sp, #4]
   16f6a:	2300      	movs	r3, #0
   16f6c:	9302      	str	r3, [sp, #8]
   16f6e:	2300      	movs	r3, #0
   16f70:	9303      	str	r3, [sp, #12]
   16f72:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16f76:	f2c0 0000 	movt	r0, #0
   16f7a:	f248 417c 	movw	r1, #33916	; 0x847c
   16f7e:	f2c0 0101 	movt	r1, #1
   16f82:	2280      	movs	r2, #128	; 0x80
   16f84:	4b3f      	ldr	r3, [pc, #252]	; (17084 <main+0x2dc>)
   16f86:	f7ed f955 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[10],tskIDLE_PRIORITY + 2, &xTaskOfHandle[10]);
   16f8a:	2302      	movs	r3, #2
   16f8c:	9300      	str	r3, [sp, #0]
   16f8e:	4b3e      	ldr	r3, [pc, #248]	; (17088 <main+0x2e0>)
   16f90:	9301      	str	r3, [sp, #4]
   16f92:	2300      	movs	r3, #0
   16f94:	9302      	str	r3, [sp, #8]
   16f96:	2300      	movs	r3, #0
   16f98:	9303      	str	r3, [sp, #12]
   16f9a:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16f9e:	f2c0 0000 	movt	r0, #0
   16fa2:	f248 417c 	movw	r1, #33916	; 0x847c
   16fa6:	f2c0 0101 	movt	r1, #1
   16faa:	2280      	movs	r2, #128	; 0x80
   16fac:	4b37      	ldr	r3, [pc, #220]	; (1708c <main+0x2e4>)
   16fae:	f7ed f941 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[11],tskIDLE_PRIORITY + 2, &xTaskOfHandle[11]);
   16fb2:	2302      	movs	r3, #2
   16fb4:	9300      	str	r3, [sp, #0]
   16fb6:	4b36      	ldr	r3, [pc, #216]	; (17090 <main+0x2e8>)
   16fb8:	9301      	str	r3, [sp, #4]
   16fba:	2300      	movs	r3, #0
   16fbc:	9302      	str	r3, [sp, #8]
   16fbe:	2300      	movs	r3, #0
   16fc0:	9303      	str	r3, [sp, #12]
   16fc2:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16fc6:	f2c0 0000 	movt	r0, #0
   16fca:	f248 417c 	movw	r1, #33916	; 0x847c
   16fce:	f2c0 0101 	movt	r1, #1
   16fd2:	2280      	movs	r2, #128	; 0x80
   16fd4:	4b2f      	ldr	r3, [pc, #188]	; (17094 <main+0x2ec>)
   16fd6:	f7ed f92d 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[12],tskIDLE_PRIORITY + 2, &xTaskOfHandle[12]);
   16fda:	2302      	movs	r3, #2
   16fdc:	9300      	str	r3, [sp, #0]
   16fde:	4b2e      	ldr	r3, [pc, #184]	; (17098 <main+0x2f0>)
   16fe0:	9301      	str	r3, [sp, #4]
   16fe2:	2300      	movs	r3, #0
   16fe4:	9302      	str	r3, [sp, #8]
   16fe6:	2300      	movs	r3, #0
   16fe8:	9303      	str	r3, [sp, #12]
   16fea:	f243 40e5 	movw	r0, #13541	; 0x34e5
   16fee:	f2c0 0000 	movt	r0, #0
   16ff2:	f248 417c 	movw	r1, #33916	; 0x847c
   16ff6:	f2c0 0101 	movt	r1, #1
   16ffa:	2280      	movs	r2, #128	; 0x80
   16ffc:	4b27      	ldr	r3, [pc, #156]	; (1709c <main+0x2f4>)
   16ffe:	f7ed f919 	bl	4234 <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[13],tskIDLE_PRIORITY + 2, &xTaskOfHandle[13]);
   17002:	2302      	movs	r3, #2
   17004:	9300      	str	r3, [sp, #0]
   17006:	4b26      	ldr	r3, [pc, #152]	; (170a0 <main+0x2f8>)
   17008:	9301      	str	r3, [sp, #4]
   1700a:	2300      	movs	r3, #0
   1700c:	9302      	str	r3, [sp, #8]
   1700e:	2300      	movs	r3, #0
   17010:	9303      	str	r3, [sp, #12]
   17012:	f243 40e5 	movw	r0, #13541	; 0x34e5
   17016:	f2c0 0000 	movt	r0, #0
   1701a:	f248 417c 	movw	r1, #33916	; 0x847c
   1701e:	f2c0 0101 	movt	r1, #1
   17022:	2280      	movs	r2, #128	; 0x80
   17024:	4b1f      	ldr	r3, [pc, #124]	; (170a4 <main+0x2fc>)
   17026:	f7ed f905 	bl	4234 <xTaskGenericCreate>
    /* Start running the task. */
    vTaskStartScheduler();
   1702a:	f7ed fc81 	bl	4930 <vTaskStartScheduler>

    return 0;
   1702e:	2300      	movs	r3, #0
}
   17030:	4618      	mov	r0, r3
   17032:	46bd      	mov	sp, r7
   17034:	bd80      	pop	{r7, pc}
   17036:	bf00      	nop
   17038:	20001238 	.word	0x20001238
   1703c:	20001158 	.word	0x20001158
   17040:	20001204 	.word	0x20001204
   17044:	20000bdc 	.word	0x20000bdc
   17048:	20001208 	.word	0x20001208
   1704c:	20000c48 	.word	0x20000c48
   17050:	2000120c 	.word	0x2000120c
   17054:	20000cb4 	.word	0x20000cb4
   17058:	20001210 	.word	0x20001210
   1705c:	20000d20 	.word	0x20000d20
   17060:	20001214 	.word	0x20001214
   17064:	20000d8c 	.word	0x20000d8c
   17068:	20001218 	.word	0x20001218
   1706c:	20000df8 	.word	0x20000df8
   17070:	2000121c 	.word	0x2000121c
   17074:	20000e64 	.word	0x20000e64
   17078:	20001220 	.word	0x20001220
   1707c:	20000ed0 	.word	0x20000ed0
   17080:	20001224 	.word	0x20001224
   17084:	20000f3c 	.word	0x20000f3c
   17088:	20001228 	.word	0x20001228
   1708c:	20000fa8 	.word	0x20000fa8
   17090:	2000122c 	.word	0x2000122c
   17094:	20001014 	.word	0x20001014
   17098:	20001230 	.word	0x20001230
   1709c:	20001080 	.word	0x20001080
   170a0:	20001234 	.word	0x20001234
   170a4:	200010ec 	.word	0x200010ec

000170a8 <myTraceCreate>:

void myTraceCreate      (){
   170a8:	b480      	push	{r7}
   170aa:	af00      	add	r7, sp, #0
}
   170ac:	46bd      	mov	sp, r7
   170ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   170b2:	4770      	bx	lr

000170b4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   170b4:	b480      	push	{r7}
   170b6:	af00      	add	r7, sp, #0
}
   170b8:	46bd      	mov	sp, r7
   170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   170be:	4770      	bx	lr

000170c0 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   170c0:	b480      	push	{r7}
   170c2:	af00      	add	r7, sp, #0
}
   170c4:	46bd      	mov	sp, r7
   170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   170ca:	4770      	bx	lr

000170cc <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   170cc:	b580      	push	{r7, lr}
   170ce:	b082      	sub	sp, #8
   170d0:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   170d2:	f7ed fd17 	bl	4b04 <xTaskGetTickCount>
   170d6:	6078      	str	r0, [r7, #4]
    if( IS_INIT == 1 && xCurrentTime == 100 )
   170d8:	f640 23b8 	movw	r3, #2744	; 0xab8
   170dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e0:	681b      	ldr	r3, [r3, #0]
   170e2:	2b01      	cmp	r3, #1
   170e4:	d11e      	bne.n	17124 <vApplicationTickHook+0x58>
   170e6:	687b      	ldr	r3, [r7, #4]
   170e8:	2b64      	cmp	r3, #100	; 0x64
   170ea:	d11b      	bne.n	17124 <vApplicationTickHook+0x58>
    {
        xSemaphoreGive( xBinarySemaphore[0] );
   170ec:	f241 13c4 	movw	r3, #4548	; 0x11c4
   170f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170f4:	681b      	ldr	r3, [r3, #0]
   170f6:	4618      	mov	r0, r3
   170f8:	2100      	movs	r1, #0
   170fa:	2200      	movs	r2, #0
   170fc:	2300      	movs	r3, #0
   170fe:	f7ec fd87 	bl	3c10 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[7] );
   17102:	f241 13c4 	movw	r3, #4548	; 0x11c4
   17106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1710a:	69db      	ldr	r3, [r3, #28]
   1710c:	4618      	mov	r0, r3
   1710e:	2100      	movs	r1, #0
   17110:	2200      	movs	r2, #0
   17112:	2300      	movs	r3, #0
   17114:	f7ec fd7c 	bl	3c10 <xQueueGenericSend>
        IS_INIT = 0;
   17118:	f640 23b8 	movw	r3, #2744	; 0xab8
   1711c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17120:	2200      	movs	r2, #0
   17122:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17124:	f240 032c 	movw	r3, #44	; 0x2c
   17128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1712c:	681b      	ldr	r3, [r3, #0]
   1712e:	005a      	lsls	r2, r3, #1
   17130:	687b      	ldr	r3, [r7, #4]
   17132:	429a      	cmp	r2, r3
   17134:	d817      	bhi.n	17166 <vApplicationTickHook+0x9a>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 )
   17136:	f240 032c 	movw	r3, #44	; 0x2c
   1713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1713e:	681a      	ldr	r2, [r3, #0]
   17140:	687b      	ldr	r3, [r7, #4]
   17142:	fbb3 f1f2 	udiv	r1, r3, r2
   17146:	fb02 f201 	mul.w	r2, r2, r1
   1714a:	1a9b      	subs	r3, r3, r2
   1714c:	2b00      	cmp	r3, #0
   1714e:	d10a      	bne.n	17166 <vApplicationTickHook+0x9a>
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] ); 
   17150:	f241 13c4 	movw	r3, #4548	; 0x11c4
   17154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1715a:	4618      	mov	r0, r3
   1715c:	2100      	movs	r1, #0
   1715e:	2200      	movs	r2, #0
   17160:	2300      	movs	r3, #0
   17162:	f7ec fd55 	bl	3c10 <xQueueGenericSend>
        }
    }
}
   17166:	3708      	adds	r7, #8
   17168:	46bd      	mov	sp, r7
   1716a:	bd80      	pop	{r7, pc}

0001716c <__aeabi_drsub>:
   1716c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17170:	e002      	b.n	17178 <__adddf3>
   17172:	bf00      	nop

00017174 <__aeabi_dsub>:
   17174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017178 <__adddf3>:
   17178:	b530      	push	{r4, r5, lr}
   1717a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1717e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17182:	ea94 0f05 	teq	r4, r5
   17186:	bf08      	it	eq
   17188:	ea90 0f02 	teqeq	r0, r2
   1718c:	bf1f      	itttt	ne
   1718e:	ea54 0c00 	orrsne.w	ip, r4, r0
   17192:	ea55 0c02 	orrsne.w	ip, r5, r2
   17196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1719a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1719e:	f000 80e2 	beq.w	17366 <__adddf3+0x1ee>
   171a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   171a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   171aa:	bfb8      	it	lt
   171ac:	426d      	neglt	r5, r5
   171ae:	dd0c      	ble.n	171ca <__adddf3+0x52>
   171b0:	442c      	add	r4, r5
   171b2:	ea80 0202 	eor.w	r2, r0, r2
   171b6:	ea81 0303 	eor.w	r3, r1, r3
   171ba:	ea82 0000 	eor.w	r0, r2, r0
   171be:	ea83 0101 	eor.w	r1, r3, r1
   171c2:	ea80 0202 	eor.w	r2, r0, r2
   171c6:	ea81 0303 	eor.w	r3, r1, r3
   171ca:	2d36      	cmp	r5, #54	; 0x36
   171cc:	bf88      	it	hi
   171ce:	bd30      	pophi	{r4, r5, pc}
   171d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   171d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   171d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   171dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   171e0:	d002      	beq.n	171e8 <__adddf3+0x70>
   171e2:	4240      	negs	r0, r0
   171e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   171e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   171ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   171f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   171f4:	d002      	beq.n	171fc <__adddf3+0x84>
   171f6:	4252      	negs	r2, r2
   171f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   171fc:	ea94 0f05 	teq	r4, r5
   17200:	f000 80a7 	beq.w	17352 <__adddf3+0x1da>
   17204:	f1a4 0401 	sub.w	r4, r4, #1
   17208:	f1d5 0e20 	rsbs	lr, r5, #32
   1720c:	db0d      	blt.n	1722a <__adddf3+0xb2>
   1720e:	fa02 fc0e 	lsl.w	ip, r2, lr
   17212:	fa22 f205 	lsr.w	r2, r2, r5
   17216:	1880      	adds	r0, r0, r2
   17218:	f141 0100 	adc.w	r1, r1, #0
   1721c:	fa03 f20e 	lsl.w	r2, r3, lr
   17220:	1880      	adds	r0, r0, r2
   17222:	fa43 f305 	asr.w	r3, r3, r5
   17226:	4159      	adcs	r1, r3
   17228:	e00e      	b.n	17248 <__adddf3+0xd0>
   1722a:	f1a5 0520 	sub.w	r5, r5, #32
   1722e:	f10e 0e20 	add.w	lr, lr, #32
   17232:	2a01      	cmp	r2, #1
   17234:	fa03 fc0e 	lsl.w	ip, r3, lr
   17238:	bf28      	it	cs
   1723a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1723e:	fa43 f305 	asr.w	r3, r3, r5
   17242:	18c0      	adds	r0, r0, r3
   17244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1724c:	d507      	bpl.n	1725e <__adddf3+0xe6>
   1724e:	f04f 0e00 	mov.w	lr, #0
   17252:	f1dc 0c00 	rsbs	ip, ip, #0
   17256:	eb7e 0000 	sbcs.w	r0, lr, r0
   1725a:	eb6e 0101 	sbc.w	r1, lr, r1
   1725e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17262:	d31b      	bcc.n	1729c <__adddf3+0x124>
   17264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17268:	d30c      	bcc.n	17284 <__adddf3+0x10c>
   1726a:	0849      	lsrs	r1, r1, #1
   1726c:	ea5f 0030 	movs.w	r0, r0, rrx
   17270:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17274:	f104 0401 	add.w	r4, r4, #1
   17278:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1727c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17280:	f080 809a 	bcs.w	173b8 <__adddf3+0x240>
   17284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17288:	bf08      	it	eq
   1728a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1728e:	f150 0000 	adcs.w	r0, r0, #0
   17292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17296:	ea41 0105 	orr.w	r1, r1, r5
   1729a:	bd30      	pop	{r4, r5, pc}
   1729c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   172a0:	4140      	adcs	r0, r0
   172a2:	eb41 0101 	adc.w	r1, r1, r1
   172a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   172aa:	f1a4 0401 	sub.w	r4, r4, #1
   172ae:	d1e9      	bne.n	17284 <__adddf3+0x10c>
   172b0:	f091 0f00 	teq	r1, #0
   172b4:	bf04      	itt	eq
   172b6:	4601      	moveq	r1, r0
   172b8:	2000      	moveq	r0, #0
   172ba:	fab1 f381 	clz	r3, r1
   172be:	bf08      	it	eq
   172c0:	3320      	addeq	r3, #32
   172c2:	f1a3 030b 	sub.w	r3, r3, #11
   172c6:	f1b3 0220 	subs.w	r2, r3, #32
   172ca:	da0c      	bge.n	172e6 <__adddf3+0x16e>
   172cc:	320c      	adds	r2, #12
   172ce:	dd08      	ble.n	172e2 <__adddf3+0x16a>
   172d0:	f102 0c14 	add.w	ip, r2, #20
   172d4:	f1c2 020c 	rsb	r2, r2, #12
   172d8:	fa01 f00c 	lsl.w	r0, r1, ip
   172dc:	fa21 f102 	lsr.w	r1, r1, r2
   172e0:	e00c      	b.n	172fc <__adddf3+0x184>
   172e2:	f102 0214 	add.w	r2, r2, #20
   172e6:	bfd8      	it	le
   172e8:	f1c2 0c20 	rsble	ip, r2, #32
   172ec:	fa01 f102 	lsl.w	r1, r1, r2
   172f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   172f4:	bfdc      	itt	le
   172f6:	ea41 010c 	orrle.w	r1, r1, ip
   172fa:	4090      	lslle	r0, r2
   172fc:	1ae4      	subs	r4, r4, r3
   172fe:	bfa2      	ittt	ge
   17300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17304:	4329      	orrge	r1, r5
   17306:	bd30      	popge	{r4, r5, pc}
   17308:	ea6f 0404 	mvn.w	r4, r4
   1730c:	3c1f      	subs	r4, #31
   1730e:	da1c      	bge.n	1734a <__adddf3+0x1d2>
   17310:	340c      	adds	r4, #12
   17312:	dc0e      	bgt.n	17332 <__adddf3+0x1ba>
   17314:	f104 0414 	add.w	r4, r4, #20
   17318:	f1c4 0220 	rsb	r2, r4, #32
   1731c:	fa20 f004 	lsr.w	r0, r0, r4
   17320:	fa01 f302 	lsl.w	r3, r1, r2
   17324:	ea40 0003 	orr.w	r0, r0, r3
   17328:	fa21 f304 	lsr.w	r3, r1, r4
   1732c:	ea45 0103 	orr.w	r1, r5, r3
   17330:	bd30      	pop	{r4, r5, pc}
   17332:	f1c4 040c 	rsb	r4, r4, #12
   17336:	f1c4 0220 	rsb	r2, r4, #32
   1733a:	fa20 f002 	lsr.w	r0, r0, r2
   1733e:	fa01 f304 	lsl.w	r3, r1, r4
   17342:	ea40 0003 	orr.w	r0, r0, r3
   17346:	4629      	mov	r1, r5
   17348:	bd30      	pop	{r4, r5, pc}
   1734a:	fa21 f004 	lsr.w	r0, r1, r4
   1734e:	4629      	mov	r1, r5
   17350:	bd30      	pop	{r4, r5, pc}
   17352:	f094 0f00 	teq	r4, #0
   17356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1735a:	bf06      	itte	eq
   1735c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17360:	3401      	addeq	r4, #1
   17362:	3d01      	subne	r5, #1
   17364:	e74e      	b.n	17204 <__adddf3+0x8c>
   17366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1736a:	bf18      	it	ne
   1736c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17370:	d029      	beq.n	173c6 <__adddf3+0x24e>
   17372:	ea94 0f05 	teq	r4, r5
   17376:	bf08      	it	eq
   17378:	ea90 0f02 	teqeq	r0, r2
   1737c:	d005      	beq.n	1738a <__adddf3+0x212>
   1737e:	ea54 0c00 	orrs.w	ip, r4, r0
   17382:	bf04      	itt	eq
   17384:	4619      	moveq	r1, r3
   17386:	4610      	moveq	r0, r2
   17388:	bd30      	pop	{r4, r5, pc}
   1738a:	ea91 0f03 	teq	r1, r3
   1738e:	bf1e      	ittt	ne
   17390:	2100      	movne	r1, #0
   17392:	2000      	movne	r0, #0
   17394:	bd30      	popne	{r4, r5, pc}
   17396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1739a:	d105      	bne.n	173a8 <__adddf3+0x230>
   1739c:	0040      	lsls	r0, r0, #1
   1739e:	4149      	adcs	r1, r1
   173a0:	bf28      	it	cs
   173a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   173a6:	bd30      	pop	{r4, r5, pc}
   173a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   173ac:	bf3c      	itt	cc
   173ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   173b2:	bd30      	popcc	{r4, r5, pc}
   173b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   173b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   173bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   173c0:	f04f 0000 	mov.w	r0, #0
   173c4:	bd30      	pop	{r4, r5, pc}
   173c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   173ca:	bf1a      	itte	ne
   173cc:	4619      	movne	r1, r3
   173ce:	4610      	movne	r0, r2
   173d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   173d4:	bf1c      	itt	ne
   173d6:	460b      	movne	r3, r1
   173d8:	4602      	movne	r2, r0
   173da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   173de:	bf06      	itte	eq
   173e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   173e4:	ea91 0f03 	teqeq	r1, r3
   173e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   173ec:	bd30      	pop	{r4, r5, pc}
   173ee:	bf00      	nop

000173f0 <__aeabi_ui2d>:
   173f0:	f090 0f00 	teq	r0, #0
   173f4:	bf04      	itt	eq
   173f6:	2100      	moveq	r1, #0
   173f8:	4770      	bxeq	lr
   173fa:	b530      	push	{r4, r5, lr}
   173fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17404:	f04f 0500 	mov.w	r5, #0
   17408:	f04f 0100 	mov.w	r1, #0
   1740c:	e750      	b.n	172b0 <__adddf3+0x138>
   1740e:	bf00      	nop

00017410 <__aeabi_i2d>:
   17410:	f090 0f00 	teq	r0, #0
   17414:	bf04      	itt	eq
   17416:	2100      	moveq	r1, #0
   17418:	4770      	bxeq	lr
   1741a:	b530      	push	{r4, r5, lr}
   1741c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17428:	bf48      	it	mi
   1742a:	4240      	negmi	r0, r0
   1742c:	f04f 0100 	mov.w	r1, #0
   17430:	e73e      	b.n	172b0 <__adddf3+0x138>
   17432:	bf00      	nop

00017434 <__aeabi_f2d>:
   17434:	0042      	lsls	r2, r0, #1
   17436:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1743a:	ea4f 0131 	mov.w	r1, r1, rrx
   1743e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17442:	bf1f      	itttt	ne
   17444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1744c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17450:	4770      	bxne	lr
   17452:	f092 0f00 	teq	r2, #0
   17456:	bf14      	ite	ne
   17458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1745c:	4770      	bxeq	lr
   1745e:	b530      	push	{r4, r5, lr}
   17460:	f44f 7460 	mov.w	r4, #896	; 0x380
   17464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1746c:	e720      	b.n	172b0 <__adddf3+0x138>
   1746e:	bf00      	nop

00017470 <__aeabi_ul2d>:
   17470:	ea50 0201 	orrs.w	r2, r0, r1
   17474:	bf08      	it	eq
   17476:	4770      	bxeq	lr
   17478:	b530      	push	{r4, r5, lr}
   1747a:	f04f 0500 	mov.w	r5, #0
   1747e:	e00a      	b.n	17496 <__aeabi_l2d+0x16>

00017480 <__aeabi_l2d>:
   17480:	ea50 0201 	orrs.w	r2, r0, r1
   17484:	bf08      	it	eq
   17486:	4770      	bxeq	lr
   17488:	b530      	push	{r4, r5, lr}
   1748a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1748e:	d502      	bpl.n	17496 <__aeabi_l2d+0x16>
   17490:	4240      	negs	r0, r0
   17492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17496:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1749a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1749e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   174a2:	f43f aedc 	beq.w	1725e <__adddf3+0xe6>
   174a6:	f04f 0203 	mov.w	r2, #3
   174aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   174ae:	bf18      	it	ne
   174b0:	3203      	addne	r2, #3
   174b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   174b6:	bf18      	it	ne
   174b8:	3203      	addne	r2, #3
   174ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   174be:	f1c2 0320 	rsb	r3, r2, #32
   174c2:	fa00 fc03 	lsl.w	ip, r0, r3
   174c6:	fa20 f002 	lsr.w	r0, r0, r2
   174ca:	fa01 fe03 	lsl.w	lr, r1, r3
   174ce:	ea40 000e 	orr.w	r0, r0, lr
   174d2:	fa21 f102 	lsr.w	r1, r1, r2
   174d6:	4414      	add	r4, r2
   174d8:	e6c1      	b.n	1725e <__adddf3+0xe6>
   174da:	bf00      	nop

000174dc <__aeabi_dmul>:
   174dc:	b570      	push	{r4, r5, r6, lr}
   174de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   174e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   174e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   174ea:	bf1d      	ittte	ne
   174ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   174f0:	ea94 0f0c 	teqne	r4, ip
   174f4:	ea95 0f0c 	teqne	r5, ip
   174f8:	f000 f8de 	bleq	176b8 <__aeabi_dmul+0x1dc>
   174fc:	442c      	add	r4, r5
   174fe:	ea81 0603 	eor.w	r6, r1, r3
   17502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1750a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1750e:	bf18      	it	ne
   17510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1751c:	d038      	beq.n	17590 <__aeabi_dmul+0xb4>
   1751e:	fba0 ce02 	umull	ip, lr, r0, r2
   17522:	f04f 0500 	mov.w	r5, #0
   17526:	fbe1 e502 	umlal	lr, r5, r1, r2
   1752a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1752e:	fbe0 e503 	umlal	lr, r5, r0, r3
   17532:	f04f 0600 	mov.w	r6, #0
   17536:	fbe1 5603 	umlal	r5, r6, r1, r3
   1753a:	f09c 0f00 	teq	ip, #0
   1753e:	bf18      	it	ne
   17540:	f04e 0e01 	orrne.w	lr, lr, #1
   17544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1754c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17550:	d204      	bcs.n	1755c <__aeabi_dmul+0x80>
   17552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17556:	416d      	adcs	r5, r5
   17558:	eb46 0606 	adc.w	r6, r6, r6
   1755c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1756c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17574:	bf88      	it	hi
   17576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1757a:	d81e      	bhi.n	175ba <__aeabi_dmul+0xde>
   1757c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17580:	bf08      	it	eq
   17582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17586:	f150 0000 	adcs.w	r0, r0, #0
   1758a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1758e:	bd70      	pop	{r4, r5, r6, pc}
   17590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17594:	ea46 0101 	orr.w	r1, r6, r1
   17598:	ea40 0002 	orr.w	r0, r0, r2
   1759c:	ea81 0103 	eor.w	r1, r1, r3
   175a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   175a4:	bfc2      	ittt	gt
   175a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   175aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   175ae:	bd70      	popgt	{r4, r5, r6, pc}
   175b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   175b4:	f04f 0e00 	mov.w	lr, #0
   175b8:	3c01      	subs	r4, #1
   175ba:	f300 80ab 	bgt.w	17714 <__aeabi_dmul+0x238>
   175be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   175c2:	bfde      	ittt	le
   175c4:	2000      	movle	r0, #0
   175c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   175ca:	bd70      	pople	{r4, r5, r6, pc}
   175cc:	f1c4 0400 	rsb	r4, r4, #0
   175d0:	3c20      	subs	r4, #32
   175d2:	da35      	bge.n	17640 <__aeabi_dmul+0x164>
   175d4:	340c      	adds	r4, #12
   175d6:	dc1b      	bgt.n	17610 <__aeabi_dmul+0x134>
   175d8:	f104 0414 	add.w	r4, r4, #20
   175dc:	f1c4 0520 	rsb	r5, r4, #32
   175e0:	fa00 f305 	lsl.w	r3, r0, r5
   175e4:	fa20 f004 	lsr.w	r0, r0, r4
   175e8:	fa01 f205 	lsl.w	r2, r1, r5
   175ec:	ea40 0002 	orr.w	r0, r0, r2
   175f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   175f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   175f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   175fc:	fa21 f604 	lsr.w	r6, r1, r4
   17600:	eb42 0106 	adc.w	r1, r2, r6
   17604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17608:	bf08      	it	eq
   1760a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1760e:	bd70      	pop	{r4, r5, r6, pc}
   17610:	f1c4 040c 	rsb	r4, r4, #12
   17614:	f1c4 0520 	rsb	r5, r4, #32
   17618:	fa00 f304 	lsl.w	r3, r0, r4
   1761c:	fa20 f005 	lsr.w	r0, r0, r5
   17620:	fa01 f204 	lsl.w	r2, r1, r4
   17624:	ea40 0002 	orr.w	r0, r0, r2
   17628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1762c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17630:	f141 0100 	adc.w	r1, r1, #0
   17634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17638:	bf08      	it	eq
   1763a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1763e:	bd70      	pop	{r4, r5, r6, pc}
   17640:	f1c4 0520 	rsb	r5, r4, #32
   17644:	fa00 f205 	lsl.w	r2, r0, r5
   17648:	ea4e 0e02 	orr.w	lr, lr, r2
   1764c:	fa20 f304 	lsr.w	r3, r0, r4
   17650:	fa01 f205 	lsl.w	r2, r1, r5
   17654:	ea43 0302 	orr.w	r3, r3, r2
   17658:	fa21 f004 	lsr.w	r0, r1, r4
   1765c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17660:	fa21 f204 	lsr.w	r2, r1, r4
   17664:	ea20 0002 	bic.w	r0, r0, r2
   17668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1766c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17670:	bf08      	it	eq
   17672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17676:	bd70      	pop	{r4, r5, r6, pc}
   17678:	f094 0f00 	teq	r4, #0
   1767c:	d10f      	bne.n	1769e <__aeabi_dmul+0x1c2>
   1767e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17682:	0040      	lsls	r0, r0, #1
   17684:	eb41 0101 	adc.w	r1, r1, r1
   17688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1768c:	bf08      	it	eq
   1768e:	3c01      	subeq	r4, #1
   17690:	d0f7      	beq.n	17682 <__aeabi_dmul+0x1a6>
   17692:	ea41 0106 	orr.w	r1, r1, r6
   17696:	f095 0f00 	teq	r5, #0
   1769a:	bf18      	it	ne
   1769c:	4770      	bxne	lr
   1769e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   176a2:	0052      	lsls	r2, r2, #1
   176a4:	eb43 0303 	adc.w	r3, r3, r3
   176a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   176ac:	bf08      	it	eq
   176ae:	3d01      	subeq	r5, #1
   176b0:	d0f7      	beq.n	176a2 <__aeabi_dmul+0x1c6>
   176b2:	ea43 0306 	orr.w	r3, r3, r6
   176b6:	4770      	bx	lr
   176b8:	ea94 0f0c 	teq	r4, ip
   176bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   176c0:	bf18      	it	ne
   176c2:	ea95 0f0c 	teqne	r5, ip
   176c6:	d00c      	beq.n	176e2 <__aeabi_dmul+0x206>
   176c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   176cc:	bf18      	it	ne
   176ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   176d2:	d1d1      	bne.n	17678 <__aeabi_dmul+0x19c>
   176d4:	ea81 0103 	eor.w	r1, r1, r3
   176d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   176dc:	f04f 0000 	mov.w	r0, #0
   176e0:	bd70      	pop	{r4, r5, r6, pc}
   176e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   176e6:	bf06      	itte	eq
   176e8:	4610      	moveq	r0, r2
   176ea:	4619      	moveq	r1, r3
   176ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   176f0:	d019      	beq.n	17726 <__aeabi_dmul+0x24a>
   176f2:	ea94 0f0c 	teq	r4, ip
   176f6:	d102      	bne.n	176fe <__aeabi_dmul+0x222>
   176f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   176fc:	d113      	bne.n	17726 <__aeabi_dmul+0x24a>
   176fe:	ea95 0f0c 	teq	r5, ip
   17702:	d105      	bne.n	17710 <__aeabi_dmul+0x234>
   17704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17708:	bf1c      	itt	ne
   1770a:	4610      	movne	r0, r2
   1770c:	4619      	movne	r1, r3
   1770e:	d10a      	bne.n	17726 <__aeabi_dmul+0x24a>
   17710:	ea81 0103 	eor.w	r1, r1, r3
   17714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1771c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17720:	f04f 0000 	mov.w	r0, #0
   17724:	bd70      	pop	{r4, r5, r6, pc}
   17726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1772a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1772e:	bd70      	pop	{r4, r5, r6, pc}

00017730 <__aeabi_ddiv>:
   17730:	b570      	push	{r4, r5, r6, lr}
   17732:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1773a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1773e:	bf1d      	ittte	ne
   17740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17744:	ea94 0f0c 	teqne	r4, ip
   17748:	ea95 0f0c 	teqne	r5, ip
   1774c:	f000 f8a7 	bleq	1789e <__aeabi_ddiv+0x16e>
   17750:	eba4 0405 	sub.w	r4, r4, r5
   17754:	ea81 0e03 	eor.w	lr, r1, r3
   17758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1775c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17760:	f000 8088 	beq.w	17874 <__aeabi_ddiv+0x144>
   17764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1776c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17774:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1777c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17780:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17788:	429d      	cmp	r5, r3
   1778a:	bf08      	it	eq
   1778c:	4296      	cmpeq	r6, r2
   1778e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17792:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17796:	d202      	bcs.n	1779e <__aeabi_ddiv+0x6e>
   17798:	085b      	lsrs	r3, r3, #1
   1779a:	ea4f 0232 	mov.w	r2, r2, rrx
   1779e:	1ab6      	subs	r6, r6, r2
   177a0:	eb65 0503 	sbc.w	r5, r5, r3
   177a4:	085b      	lsrs	r3, r3, #1
   177a6:	ea4f 0232 	mov.w	r2, r2, rrx
   177aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   177ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   177b2:	ebb6 0e02 	subs.w	lr, r6, r2
   177b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   177ba:	bf22      	ittt	cs
   177bc:	1ab6      	subcs	r6, r6, r2
   177be:	4675      	movcs	r5, lr
   177c0:	ea40 000c 	orrcs.w	r0, r0, ip
   177c4:	085b      	lsrs	r3, r3, #1
   177c6:	ea4f 0232 	mov.w	r2, r2, rrx
   177ca:	ebb6 0e02 	subs.w	lr, r6, r2
   177ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   177d2:	bf22      	ittt	cs
   177d4:	1ab6      	subcs	r6, r6, r2
   177d6:	4675      	movcs	r5, lr
   177d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   177dc:	085b      	lsrs	r3, r3, #1
   177de:	ea4f 0232 	mov.w	r2, r2, rrx
   177e2:	ebb6 0e02 	subs.w	lr, r6, r2
   177e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   177ea:	bf22      	ittt	cs
   177ec:	1ab6      	subcs	r6, r6, r2
   177ee:	4675      	movcs	r5, lr
   177f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   177f4:	085b      	lsrs	r3, r3, #1
   177f6:	ea4f 0232 	mov.w	r2, r2, rrx
   177fa:	ebb6 0e02 	subs.w	lr, r6, r2
   177fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   17802:	bf22      	ittt	cs
   17804:	1ab6      	subcs	r6, r6, r2
   17806:	4675      	movcs	r5, lr
   17808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1780c:	ea55 0e06 	orrs.w	lr, r5, r6
   17810:	d018      	beq.n	17844 <__aeabi_ddiv+0x114>
   17812:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1781a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1781e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1782a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1782e:	d1c0      	bne.n	177b2 <__aeabi_ddiv+0x82>
   17830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17834:	d10b      	bne.n	1784e <__aeabi_ddiv+0x11e>
   17836:	ea41 0100 	orr.w	r1, r1, r0
   1783a:	f04f 0000 	mov.w	r0, #0
   1783e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17842:	e7b6      	b.n	177b2 <__aeabi_ddiv+0x82>
   17844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17848:	bf04      	itt	eq
   1784a:	4301      	orreq	r1, r0
   1784c:	2000      	moveq	r0, #0
   1784e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17852:	bf88      	it	hi
   17854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17858:	f63f aeaf 	bhi.w	175ba <__aeabi_dmul+0xde>
   1785c:	ebb5 0c03 	subs.w	ip, r5, r3
   17860:	bf04      	itt	eq
   17862:	ebb6 0c02 	subseq.w	ip, r6, r2
   17866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1786a:	f150 0000 	adcs.w	r0, r0, #0
   1786e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17872:	bd70      	pop	{r4, r5, r6, pc}
   17874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1787c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17880:	bfc2      	ittt	gt
   17882:	ebd4 050c 	rsbsgt	r5, r4, ip
   17886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1788a:	bd70      	popgt	{r4, r5, r6, pc}
   1788c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17890:	f04f 0e00 	mov.w	lr, #0
   17894:	3c01      	subs	r4, #1
   17896:	e690      	b.n	175ba <__aeabi_dmul+0xde>
   17898:	ea45 0e06 	orr.w	lr, r5, r6
   1789c:	e68d      	b.n	175ba <__aeabi_dmul+0xde>
   1789e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   178a2:	ea94 0f0c 	teq	r4, ip
   178a6:	bf08      	it	eq
   178a8:	ea95 0f0c 	teqeq	r5, ip
   178ac:	f43f af3b 	beq.w	17726 <__aeabi_dmul+0x24a>
   178b0:	ea94 0f0c 	teq	r4, ip
   178b4:	d10a      	bne.n	178cc <__aeabi_ddiv+0x19c>
   178b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   178ba:	f47f af34 	bne.w	17726 <__aeabi_dmul+0x24a>
   178be:	ea95 0f0c 	teq	r5, ip
   178c2:	f47f af25 	bne.w	17710 <__aeabi_dmul+0x234>
   178c6:	4610      	mov	r0, r2
   178c8:	4619      	mov	r1, r3
   178ca:	e72c      	b.n	17726 <__aeabi_dmul+0x24a>
   178cc:	ea95 0f0c 	teq	r5, ip
   178d0:	d106      	bne.n	178e0 <__aeabi_ddiv+0x1b0>
   178d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   178d6:	f43f aefd 	beq.w	176d4 <__aeabi_dmul+0x1f8>
   178da:	4610      	mov	r0, r2
   178dc:	4619      	mov	r1, r3
   178de:	e722      	b.n	17726 <__aeabi_dmul+0x24a>
   178e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   178e4:	bf18      	it	ne
   178e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   178ea:	f47f aec5 	bne.w	17678 <__aeabi_dmul+0x19c>
   178ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   178f2:	f47f af0d 	bne.w	17710 <__aeabi_dmul+0x234>
   178f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   178fa:	f47f aeeb 	bne.w	176d4 <__aeabi_dmul+0x1f8>
   178fe:	e712      	b.n	17726 <__aeabi_dmul+0x24a>

00017900 <__gedf2>:
   17900:	f04f 3cff 	mov.w	ip, #4294967295
   17904:	e006      	b.n	17914 <__cmpdf2+0x4>
   17906:	bf00      	nop

00017908 <__ledf2>:
   17908:	f04f 0c01 	mov.w	ip, #1
   1790c:	e002      	b.n	17914 <__cmpdf2+0x4>
   1790e:	bf00      	nop

00017910 <__cmpdf2>:
   17910:	f04f 0c01 	mov.w	ip, #1
   17914:	f84d cd04 	str.w	ip, [sp, #-4]!
   17918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1791c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17924:	bf18      	it	ne
   17926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1792a:	d01b      	beq.n	17964 <__cmpdf2+0x54>
   1792c:	b001      	add	sp, #4
   1792e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17932:	bf0c      	ite	eq
   17934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17938:	ea91 0f03 	teqne	r1, r3
   1793c:	bf02      	ittt	eq
   1793e:	ea90 0f02 	teqeq	r0, r2
   17942:	2000      	moveq	r0, #0
   17944:	4770      	bxeq	lr
   17946:	f110 0f00 	cmn.w	r0, #0
   1794a:	ea91 0f03 	teq	r1, r3
   1794e:	bf58      	it	pl
   17950:	4299      	cmppl	r1, r3
   17952:	bf08      	it	eq
   17954:	4290      	cmpeq	r0, r2
   17956:	bf2c      	ite	cs
   17958:	17d8      	asrcs	r0, r3, #31
   1795a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1795e:	f040 0001 	orr.w	r0, r0, #1
   17962:	4770      	bx	lr
   17964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1796c:	d102      	bne.n	17974 <__cmpdf2+0x64>
   1796e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17972:	d107      	bne.n	17984 <__cmpdf2+0x74>
   17974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1797c:	d1d6      	bne.n	1792c <__cmpdf2+0x1c>
   1797e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17982:	d0d3      	beq.n	1792c <__cmpdf2+0x1c>
   17984:	f85d 0b04 	ldr.w	r0, [sp], #4
   17988:	4770      	bx	lr
   1798a:	bf00      	nop

0001798c <__aeabi_cdrcmple>:
   1798c:	4684      	mov	ip, r0
   1798e:	4610      	mov	r0, r2
   17990:	4662      	mov	r2, ip
   17992:	468c      	mov	ip, r1
   17994:	4619      	mov	r1, r3
   17996:	4663      	mov	r3, ip
   17998:	e000      	b.n	1799c <__aeabi_cdcmpeq>
   1799a:	bf00      	nop

0001799c <__aeabi_cdcmpeq>:
   1799c:	b501      	push	{r0, lr}
   1799e:	f7ff ffb7 	bl	17910 <__cmpdf2>
   179a2:	2800      	cmp	r0, #0
   179a4:	bf48      	it	mi
   179a6:	f110 0f00 	cmnmi.w	r0, #0
   179aa:	bd01      	pop	{r0, pc}

000179ac <__aeabi_dcmpeq>:
   179ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   179b0:	f7ff fff4 	bl	1799c <__aeabi_cdcmpeq>
   179b4:	bf0c      	ite	eq
   179b6:	2001      	moveq	r0, #1
   179b8:	2000      	movne	r0, #0
   179ba:	f85d fb08 	ldr.w	pc, [sp], #8
   179be:	bf00      	nop

000179c0 <__aeabi_dcmplt>:
   179c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   179c4:	f7ff ffea 	bl	1799c <__aeabi_cdcmpeq>
   179c8:	bf34      	ite	cc
   179ca:	2001      	movcc	r0, #1
   179cc:	2000      	movcs	r0, #0
   179ce:	f85d fb08 	ldr.w	pc, [sp], #8
   179d2:	bf00      	nop

000179d4 <__aeabi_dcmple>:
   179d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   179d8:	f7ff ffe0 	bl	1799c <__aeabi_cdcmpeq>
   179dc:	bf94      	ite	ls
   179de:	2001      	movls	r0, #1
   179e0:	2000      	movhi	r0, #0
   179e2:	f85d fb08 	ldr.w	pc, [sp], #8
   179e6:	bf00      	nop

000179e8 <__aeabi_dcmpge>:
   179e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   179ec:	f7ff ffce 	bl	1798c <__aeabi_cdrcmple>
   179f0:	bf94      	ite	ls
   179f2:	2001      	movls	r0, #1
   179f4:	2000      	movhi	r0, #0
   179f6:	f85d fb08 	ldr.w	pc, [sp], #8
   179fa:	bf00      	nop

000179fc <__aeabi_dcmpgt>:
   179fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   17a00:	f7ff ffc4 	bl	1798c <__aeabi_cdrcmple>
   17a04:	bf34      	ite	cc
   17a06:	2001      	movcc	r0, #1
   17a08:	2000      	movcs	r0, #0
   17a0a:	f85d fb08 	ldr.w	pc, [sp], #8
   17a0e:	bf00      	nop

00017a10 <__aeabi_d2iz>:
   17a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17a18:	d215      	bcs.n	17a46 <__aeabi_d2iz+0x36>
   17a1a:	d511      	bpl.n	17a40 <__aeabi_d2iz+0x30>
   17a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17a24:	d912      	bls.n	17a4c <__aeabi_d2iz+0x3c>
   17a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17a36:	fa23 f002 	lsr.w	r0, r3, r2
   17a3a:	bf18      	it	ne
   17a3c:	4240      	negne	r0, r0
   17a3e:	4770      	bx	lr
   17a40:	f04f 0000 	mov.w	r0, #0
   17a44:	4770      	bx	lr
   17a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17a4a:	d105      	bne.n	17a58 <__aeabi_d2iz+0x48>
   17a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17a50:	bf08      	it	eq
   17a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17a56:	4770      	bx	lr
   17a58:	f04f 0000 	mov.w	r0, #0
   17a5c:	4770      	bx	lr
   17a5e:	bf00      	nop

00017a60 <__aeabi_d2uiz>:
   17a60:	004a      	lsls	r2, r1, #1
   17a62:	d211      	bcs.n	17a88 <__aeabi_d2uiz+0x28>
   17a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17a68:	d211      	bcs.n	17a8e <__aeabi_d2uiz+0x2e>
   17a6a:	d50d      	bpl.n	17a88 <__aeabi_d2uiz+0x28>
   17a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17a74:	d40e      	bmi.n	17a94 <__aeabi_d2uiz+0x34>
   17a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17a82:	fa23 f002 	lsr.w	r0, r3, r2
   17a86:	4770      	bx	lr
   17a88:	f04f 0000 	mov.w	r0, #0
   17a8c:	4770      	bx	lr
   17a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17a92:	d102      	bne.n	17a9a <__aeabi_d2uiz+0x3a>
   17a94:	f04f 30ff 	mov.w	r0, #4294967295
   17a98:	4770      	bx	lr
   17a9a:	f04f 0000 	mov.w	r0, #0
   17a9e:	4770      	bx	lr

00017aa0 <__aeabi_d2f>:
   17aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17aa8:	bf24      	itt	cs
   17aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17ab2:	d90d      	bls.n	17ad0 <__aeabi_d2f+0x30>
   17ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17ac8:	bf08      	it	eq
   17aca:	f020 0001 	biceq.w	r0, r0, #1
   17ace:	4770      	bx	lr
   17ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17ad4:	d121      	bne.n	17b1a <__aeabi_d2f+0x7a>
   17ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17ada:	bfbc      	itt	lt
   17adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17ae0:	4770      	bxlt	lr
   17ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17aea:	f1c2 0218 	rsb	r2, r2, #24
   17aee:	f1c2 0c20 	rsb	ip, r2, #32
   17af2:	fa10 f30c 	lsls.w	r3, r0, ip
   17af6:	fa20 f002 	lsr.w	r0, r0, r2
   17afa:	bf18      	it	ne
   17afc:	f040 0001 	orrne.w	r0, r0, #1
   17b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17b08:	fa03 fc0c 	lsl.w	ip, r3, ip
   17b0c:	ea40 000c 	orr.w	r0, r0, ip
   17b10:	fa23 f302 	lsr.w	r3, r3, r2
   17b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17b18:	e7cc      	b.n	17ab4 <__aeabi_d2f+0x14>
   17b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17b1e:	d107      	bne.n	17b30 <__aeabi_d2f+0x90>
   17b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17b24:	bf1e      	ittt	ne
   17b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17b2e:	4770      	bxne	lr
   17b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17b3c:	4770      	bx	lr
   17b3e:	bf00      	nop

00017b40 <__aeabi_frsub>:
   17b40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17b44:	e002      	b.n	17b4c <__addsf3>
   17b46:	bf00      	nop

00017b48 <__aeabi_fsub>:
   17b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017b4c <__addsf3>:
   17b4c:	0042      	lsls	r2, r0, #1
   17b4e:	bf1f      	itttt	ne
   17b50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17b54:	ea92 0f03 	teqne	r2, r3
   17b58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17b5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17b60:	d06a      	beq.n	17c38 <__addsf3+0xec>
   17b62:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17b66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17b6a:	bfc1      	itttt	gt
   17b6c:	18d2      	addgt	r2, r2, r3
   17b6e:	4041      	eorgt	r1, r0
   17b70:	4048      	eorgt	r0, r1
   17b72:	4041      	eorgt	r1, r0
   17b74:	bfb8      	it	lt
   17b76:	425b      	neglt	r3, r3
   17b78:	2b19      	cmp	r3, #25
   17b7a:	bf88      	it	hi
   17b7c:	4770      	bxhi	lr
   17b7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17b8a:	bf18      	it	ne
   17b8c:	4240      	negne	r0, r0
   17b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17b92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   17b96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   17b9a:	bf18      	it	ne
   17b9c:	4249      	negne	r1, r1
   17b9e:	ea92 0f03 	teq	r2, r3
   17ba2:	d03f      	beq.n	17c24 <__addsf3+0xd8>
   17ba4:	f1a2 0201 	sub.w	r2, r2, #1
   17ba8:	fa41 fc03 	asr.w	ip, r1, r3
   17bac:	eb10 000c 	adds.w	r0, r0, ip
   17bb0:	f1c3 0320 	rsb	r3, r3, #32
   17bb4:	fa01 f103 	lsl.w	r1, r1, r3
   17bb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17bbc:	d502      	bpl.n	17bc4 <__addsf3+0x78>
   17bbe:	4249      	negs	r1, r1
   17bc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   17bc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17bc8:	d313      	bcc.n	17bf2 <__addsf3+0xa6>
   17bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   17bce:	d306      	bcc.n	17bde <__addsf3+0x92>
   17bd0:	0840      	lsrs	r0, r0, #1
   17bd2:	ea4f 0131 	mov.w	r1, r1, rrx
   17bd6:	f102 0201 	add.w	r2, r2, #1
   17bda:	2afe      	cmp	r2, #254	; 0xfe
   17bdc:	d251      	bcs.n	17c82 <__addsf3+0x136>
   17bde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   17be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17be6:	bf08      	it	eq
   17be8:	f020 0001 	biceq.w	r0, r0, #1
   17bec:	ea40 0003 	orr.w	r0, r0, r3
   17bf0:	4770      	bx	lr
   17bf2:	0049      	lsls	r1, r1, #1
   17bf4:	eb40 0000 	adc.w	r0, r0, r0
   17bf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   17bfc:	f1a2 0201 	sub.w	r2, r2, #1
   17c00:	d1ed      	bne.n	17bde <__addsf3+0x92>
   17c02:	fab0 fc80 	clz	ip, r0
   17c06:	f1ac 0c08 	sub.w	ip, ip, #8
   17c0a:	ebb2 020c 	subs.w	r2, r2, ip
   17c0e:	fa00 f00c 	lsl.w	r0, r0, ip
   17c12:	bfaa      	itet	ge
   17c14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   17c18:	4252      	neglt	r2, r2
   17c1a:	4318      	orrge	r0, r3
   17c1c:	bfbc      	itt	lt
   17c1e:	40d0      	lsrlt	r0, r2
   17c20:	4318      	orrlt	r0, r3
   17c22:	4770      	bx	lr
   17c24:	f092 0f00 	teq	r2, #0
   17c28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   17c2c:	bf06      	itte	eq
   17c2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   17c32:	3201      	addeq	r2, #1
   17c34:	3b01      	subne	r3, #1
   17c36:	e7b5      	b.n	17ba4 <__addsf3+0x58>
   17c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17c40:	bf18      	it	ne
   17c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17c46:	d021      	beq.n	17c8c <__addsf3+0x140>
   17c48:	ea92 0f03 	teq	r2, r3
   17c4c:	d004      	beq.n	17c58 <__addsf3+0x10c>
   17c4e:	f092 0f00 	teq	r2, #0
   17c52:	bf08      	it	eq
   17c54:	4608      	moveq	r0, r1
   17c56:	4770      	bx	lr
   17c58:	ea90 0f01 	teq	r0, r1
   17c5c:	bf1c      	itt	ne
   17c5e:	2000      	movne	r0, #0
   17c60:	4770      	bxne	lr
   17c62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   17c66:	d104      	bne.n	17c72 <__addsf3+0x126>
   17c68:	0040      	lsls	r0, r0, #1
   17c6a:	bf28      	it	cs
   17c6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   17c70:	4770      	bx	lr
   17c72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   17c76:	bf3c      	itt	cc
   17c78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   17c7c:	4770      	bxcc	lr
   17c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17c82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   17c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17c8a:	4770      	bx	lr
   17c8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   17c90:	bf16      	itet	ne
   17c92:	4608      	movne	r0, r1
   17c94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   17c98:	4601      	movne	r1, r0
   17c9a:	0242      	lsls	r2, r0, #9
   17c9c:	bf06      	itte	eq
   17c9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   17ca2:	ea90 0f01 	teqeq	r0, r1
   17ca6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   17caa:	4770      	bx	lr

00017cac <__aeabi_ui2f>:
   17cac:	f04f 0300 	mov.w	r3, #0
   17cb0:	e004      	b.n	17cbc <__aeabi_i2f+0x8>
   17cb2:	bf00      	nop

00017cb4 <__aeabi_i2f>:
   17cb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   17cb8:	bf48      	it	mi
   17cba:	4240      	negmi	r0, r0
   17cbc:	ea5f 0c00 	movs.w	ip, r0
   17cc0:	bf08      	it	eq
   17cc2:	4770      	bxeq	lr
   17cc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   17cc8:	4601      	mov	r1, r0
   17cca:	f04f 0000 	mov.w	r0, #0
   17cce:	e01c      	b.n	17d0a <__aeabi_l2f+0x2a>

00017cd0 <__aeabi_ul2f>:
   17cd0:	ea50 0201 	orrs.w	r2, r0, r1
   17cd4:	bf08      	it	eq
   17cd6:	4770      	bxeq	lr
   17cd8:	f04f 0300 	mov.w	r3, #0
   17cdc:	e00a      	b.n	17cf4 <__aeabi_l2f+0x14>
   17cde:	bf00      	nop

00017ce0 <__aeabi_l2f>:
   17ce0:	ea50 0201 	orrs.w	r2, r0, r1
   17ce4:	bf08      	it	eq
   17ce6:	4770      	bxeq	lr
   17ce8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   17cec:	d502      	bpl.n	17cf4 <__aeabi_l2f+0x14>
   17cee:	4240      	negs	r0, r0
   17cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17cf4:	ea5f 0c01 	movs.w	ip, r1
   17cf8:	bf02      	ittt	eq
   17cfa:	4684      	moveq	ip, r0
   17cfc:	4601      	moveq	r1, r0
   17cfe:	2000      	moveq	r0, #0
   17d00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   17d04:	bf08      	it	eq
   17d06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   17d0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   17d0e:	fabc f28c 	clz	r2, ip
   17d12:	3a08      	subs	r2, #8
   17d14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   17d18:	db10      	blt.n	17d3c <__aeabi_l2f+0x5c>
   17d1a:	fa01 fc02 	lsl.w	ip, r1, r2
   17d1e:	4463      	add	r3, ip
   17d20:	fa00 fc02 	lsl.w	ip, r0, r2
   17d24:	f1c2 0220 	rsb	r2, r2, #32
   17d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17d2c:	fa20 f202 	lsr.w	r2, r0, r2
   17d30:	eb43 0002 	adc.w	r0, r3, r2
   17d34:	bf08      	it	eq
   17d36:	f020 0001 	biceq.w	r0, r0, #1
   17d3a:	4770      	bx	lr
   17d3c:	f102 0220 	add.w	r2, r2, #32
   17d40:	fa01 fc02 	lsl.w	ip, r1, r2
   17d44:	f1c2 0220 	rsb	r2, r2, #32
   17d48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   17d4c:	fa21 f202 	lsr.w	r2, r1, r2
   17d50:	eb43 0002 	adc.w	r0, r3, r2
   17d54:	bf08      	it	eq
   17d56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   17d5a:	4770      	bx	lr

00017d5c <__aeabi_fmul>:
   17d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   17d64:	bf1e      	ittt	ne
   17d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   17d6a:	ea92 0f0c 	teqne	r2, ip
   17d6e:	ea93 0f0c 	teqne	r3, ip
   17d72:	d06f      	beq.n	17e54 <__aeabi_fmul+0xf8>
   17d74:	441a      	add	r2, r3
   17d76:	ea80 0c01 	eor.w	ip, r0, r1
   17d7a:	0240      	lsls	r0, r0, #9
   17d7c:	bf18      	it	ne
   17d7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   17d82:	d01e      	beq.n	17dc2 <__aeabi_fmul+0x66>
   17d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   17d88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   17d8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   17d90:	fba0 3101 	umull	r3, r1, r0, r1
   17d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   17d98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   17d9c:	bf3e      	ittt	cc
   17d9e:	0049      	lslcc	r1, r1, #1
   17da0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   17da4:	005b      	lslcc	r3, r3, #1
   17da6:	ea40 0001 	orr.w	r0, r0, r1
   17daa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   17dae:	2afd      	cmp	r2, #253	; 0xfd
   17db0:	d81d      	bhi.n	17dee <__aeabi_fmul+0x92>
   17db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17db6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17dba:	bf08      	it	eq
   17dbc:	f020 0001 	biceq.w	r0, r0, #1
   17dc0:	4770      	bx	lr
   17dc2:	f090 0f00 	teq	r0, #0
   17dc6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   17dca:	bf08      	it	eq
   17dcc:	0249      	lsleq	r1, r1, #9
   17dce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   17dd2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   17dd6:	3a7f      	subs	r2, #127	; 0x7f
   17dd8:	bfc2      	ittt	gt
   17dda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   17dde:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   17de2:	4770      	bxgt	lr
   17de4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17de8:	f04f 0300 	mov.w	r3, #0
   17dec:	3a01      	subs	r2, #1
   17dee:	dc5d      	bgt.n	17eac <__aeabi_fmul+0x150>
   17df0:	f112 0f19 	cmn.w	r2, #25
   17df4:	bfdc      	itt	le
   17df6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   17dfa:	4770      	bxle	lr
   17dfc:	f1c2 0200 	rsb	r2, r2, #0
   17e00:	0041      	lsls	r1, r0, #1
   17e02:	fa21 f102 	lsr.w	r1, r1, r2
   17e06:	f1c2 0220 	rsb	r2, r2, #32
   17e0a:	fa00 fc02 	lsl.w	ip, r0, r2
   17e0e:	ea5f 0031 	movs.w	r0, r1, rrx
   17e12:	f140 0000 	adc.w	r0, r0, #0
   17e16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   17e1a:	bf08      	it	eq
   17e1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   17e20:	4770      	bx	lr
   17e22:	f092 0f00 	teq	r2, #0
   17e26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   17e2a:	bf02      	ittt	eq
   17e2c:	0040      	lsleq	r0, r0, #1
   17e2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   17e32:	3a01      	subeq	r2, #1
   17e34:	d0f9      	beq.n	17e2a <__aeabi_fmul+0xce>
   17e36:	ea40 000c 	orr.w	r0, r0, ip
   17e3a:	f093 0f00 	teq	r3, #0
   17e3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17e42:	bf02      	ittt	eq
   17e44:	0049      	lsleq	r1, r1, #1
   17e46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   17e4a:	3b01      	subeq	r3, #1
   17e4c:	d0f9      	beq.n	17e42 <__aeabi_fmul+0xe6>
   17e4e:	ea41 010c 	orr.w	r1, r1, ip
   17e52:	e78f      	b.n	17d74 <__aeabi_fmul+0x18>
   17e54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   17e58:	ea92 0f0c 	teq	r2, ip
   17e5c:	bf18      	it	ne
   17e5e:	ea93 0f0c 	teqne	r3, ip
   17e62:	d00a      	beq.n	17e7a <__aeabi_fmul+0x11e>
   17e64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   17e68:	bf18      	it	ne
   17e6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   17e6e:	d1d8      	bne.n	17e22 <__aeabi_fmul+0xc6>
   17e70:	ea80 0001 	eor.w	r0, r0, r1
   17e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   17e78:	4770      	bx	lr
   17e7a:	f090 0f00 	teq	r0, #0
   17e7e:	bf17      	itett	ne
   17e80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   17e84:	4608      	moveq	r0, r1
   17e86:	f091 0f00 	teqne	r1, #0
   17e8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   17e8e:	d014      	beq.n	17eba <__aeabi_fmul+0x15e>
   17e90:	ea92 0f0c 	teq	r2, ip
   17e94:	d101      	bne.n	17e9a <__aeabi_fmul+0x13e>
   17e96:	0242      	lsls	r2, r0, #9
   17e98:	d10f      	bne.n	17eba <__aeabi_fmul+0x15e>
   17e9a:	ea93 0f0c 	teq	r3, ip
   17e9e:	d103      	bne.n	17ea8 <__aeabi_fmul+0x14c>
   17ea0:	024b      	lsls	r3, r1, #9
   17ea2:	bf18      	it	ne
   17ea4:	4608      	movne	r0, r1
   17ea6:	d108      	bne.n	17eba <__aeabi_fmul+0x15e>
   17ea8:	ea80 0001 	eor.w	r0, r0, r1
   17eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   17eb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17eb8:	4770      	bx	lr
   17eba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17ebe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   17ec2:	4770      	bx	lr

00017ec4 <__aeabi_fdiv>:
   17ec4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17ec8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   17ecc:	bf1e      	ittt	ne
   17ece:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   17ed2:	ea92 0f0c 	teqne	r2, ip
   17ed6:	ea93 0f0c 	teqne	r3, ip
   17eda:	d069      	beq.n	17fb0 <__aeabi_fdiv+0xec>
   17edc:	eba2 0203 	sub.w	r2, r2, r3
   17ee0:	ea80 0c01 	eor.w	ip, r0, r1
   17ee4:	0249      	lsls	r1, r1, #9
   17ee6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   17eea:	d037      	beq.n	17f5c <__aeabi_fdiv+0x98>
   17eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17ef0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   17ef4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   17ef8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   17efc:	428b      	cmp	r3, r1
   17efe:	bf38      	it	cc
   17f00:	005b      	lslcc	r3, r3, #1
   17f02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   17f06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   17f0a:	428b      	cmp	r3, r1
   17f0c:	bf24      	itt	cs
   17f0e:	1a5b      	subcs	r3, r3, r1
   17f10:	ea40 000c 	orrcs.w	r0, r0, ip
   17f14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   17f18:	bf24      	itt	cs
   17f1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   17f1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   17f26:	bf24      	itt	cs
   17f28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   17f2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17f30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   17f34:	bf24      	itt	cs
   17f36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   17f3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f3e:	011b      	lsls	r3, r3, #4
   17f40:	bf18      	it	ne
   17f42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   17f46:	d1e0      	bne.n	17f0a <__aeabi_fdiv+0x46>
   17f48:	2afd      	cmp	r2, #253	; 0xfd
   17f4a:	f63f af50 	bhi.w	17dee <__aeabi_fmul+0x92>
   17f4e:	428b      	cmp	r3, r1
   17f50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17f54:	bf08      	it	eq
   17f56:	f020 0001 	biceq.w	r0, r0, #1
   17f5a:	4770      	bx	lr
   17f5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   17f60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   17f64:	327f      	adds	r2, #127	; 0x7f
   17f66:	bfc2      	ittt	gt
   17f68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   17f6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   17f70:	4770      	bxgt	lr
   17f72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17f76:	f04f 0300 	mov.w	r3, #0
   17f7a:	3a01      	subs	r2, #1
   17f7c:	e737      	b.n	17dee <__aeabi_fmul+0x92>
   17f7e:	f092 0f00 	teq	r2, #0
   17f82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   17f86:	bf02      	ittt	eq
   17f88:	0040      	lsleq	r0, r0, #1
   17f8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   17f8e:	3a01      	subeq	r2, #1
   17f90:	d0f9      	beq.n	17f86 <__aeabi_fdiv+0xc2>
   17f92:	ea40 000c 	orr.w	r0, r0, ip
   17f96:	f093 0f00 	teq	r3, #0
   17f9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17f9e:	bf02      	ittt	eq
   17fa0:	0049      	lsleq	r1, r1, #1
   17fa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   17fa6:	3b01      	subeq	r3, #1
   17fa8:	d0f9      	beq.n	17f9e <__aeabi_fdiv+0xda>
   17faa:	ea41 010c 	orr.w	r1, r1, ip
   17fae:	e795      	b.n	17edc <__aeabi_fdiv+0x18>
   17fb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   17fb4:	ea92 0f0c 	teq	r2, ip
   17fb8:	d108      	bne.n	17fcc <__aeabi_fdiv+0x108>
   17fba:	0242      	lsls	r2, r0, #9
   17fbc:	f47f af7d 	bne.w	17eba <__aeabi_fmul+0x15e>
   17fc0:	ea93 0f0c 	teq	r3, ip
   17fc4:	f47f af70 	bne.w	17ea8 <__aeabi_fmul+0x14c>
   17fc8:	4608      	mov	r0, r1
   17fca:	e776      	b.n	17eba <__aeabi_fmul+0x15e>
   17fcc:	ea93 0f0c 	teq	r3, ip
   17fd0:	d104      	bne.n	17fdc <__aeabi_fdiv+0x118>
   17fd2:	024b      	lsls	r3, r1, #9
   17fd4:	f43f af4c 	beq.w	17e70 <__aeabi_fmul+0x114>
   17fd8:	4608      	mov	r0, r1
   17fda:	e76e      	b.n	17eba <__aeabi_fmul+0x15e>
   17fdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   17fe0:	bf18      	it	ne
   17fe2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   17fe6:	d1ca      	bne.n	17f7e <__aeabi_fdiv+0xba>
   17fe8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   17fec:	f47f af5c 	bne.w	17ea8 <__aeabi_fmul+0x14c>
   17ff0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   17ff4:	f47f af3c 	bne.w	17e70 <__aeabi_fmul+0x114>
   17ff8:	e75f      	b.n	17eba <__aeabi_fmul+0x15e>
   17ffa:	bf00      	nop

00017ffc <__gesf2>:
   17ffc:	f04f 3cff 	mov.w	ip, #4294967295
   18000:	e006      	b.n	18010 <__cmpsf2+0x4>
   18002:	bf00      	nop

00018004 <__lesf2>:
   18004:	f04f 0c01 	mov.w	ip, #1
   18008:	e002      	b.n	18010 <__cmpsf2+0x4>
   1800a:	bf00      	nop

0001800c <__cmpsf2>:
   1800c:	f04f 0c01 	mov.w	ip, #1
   18010:	f84d cd04 	str.w	ip, [sp, #-4]!
   18014:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18018:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1801c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18020:	bf18      	it	ne
   18022:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18026:	d011      	beq.n	1804c <__cmpsf2+0x40>
   18028:	b001      	add	sp, #4
   1802a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1802e:	bf18      	it	ne
   18030:	ea90 0f01 	teqne	r0, r1
   18034:	bf58      	it	pl
   18036:	ebb2 0003 	subspl.w	r0, r2, r3
   1803a:	bf88      	it	hi
   1803c:	17c8      	asrhi	r0, r1, #31
   1803e:	bf38      	it	cc
   18040:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18044:	bf18      	it	ne
   18046:	f040 0001 	orrne.w	r0, r0, #1
   1804a:	4770      	bx	lr
   1804c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18050:	d102      	bne.n	18058 <__cmpsf2+0x4c>
   18052:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18056:	d105      	bne.n	18064 <__cmpsf2+0x58>
   18058:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1805c:	d1e4      	bne.n	18028 <__cmpsf2+0x1c>
   1805e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18062:	d0e1      	beq.n	18028 <__cmpsf2+0x1c>
   18064:	f85d 0b04 	ldr.w	r0, [sp], #4
   18068:	4770      	bx	lr
   1806a:	bf00      	nop

0001806c <__aeabi_cfrcmple>:
   1806c:	4684      	mov	ip, r0
   1806e:	4608      	mov	r0, r1
   18070:	4661      	mov	r1, ip
   18072:	e7ff      	b.n	18074 <__aeabi_cfcmpeq>

00018074 <__aeabi_cfcmpeq>:
   18074:	b50f      	push	{r0, r1, r2, r3, lr}
   18076:	f7ff ffc9 	bl	1800c <__cmpsf2>
   1807a:	2800      	cmp	r0, #0
   1807c:	bf48      	it	mi
   1807e:	f110 0f00 	cmnmi.w	r0, #0
   18082:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018084 <__aeabi_fcmpeq>:
   18084:	f84d ed08 	str.w	lr, [sp, #-8]!
   18088:	f7ff fff4 	bl	18074 <__aeabi_cfcmpeq>
   1808c:	bf0c      	ite	eq
   1808e:	2001      	moveq	r0, #1
   18090:	2000      	movne	r0, #0
   18092:	f85d fb08 	ldr.w	pc, [sp], #8
   18096:	bf00      	nop

00018098 <__aeabi_fcmplt>:
   18098:	f84d ed08 	str.w	lr, [sp, #-8]!
   1809c:	f7ff ffea 	bl	18074 <__aeabi_cfcmpeq>
   180a0:	bf34      	ite	cc
   180a2:	2001      	movcc	r0, #1
   180a4:	2000      	movcs	r0, #0
   180a6:	f85d fb08 	ldr.w	pc, [sp], #8
   180aa:	bf00      	nop

000180ac <__aeabi_fcmple>:
   180ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   180b0:	f7ff ffe0 	bl	18074 <__aeabi_cfcmpeq>
   180b4:	bf94      	ite	ls
   180b6:	2001      	movls	r0, #1
   180b8:	2000      	movhi	r0, #0
   180ba:	f85d fb08 	ldr.w	pc, [sp], #8
   180be:	bf00      	nop

000180c0 <__aeabi_fcmpge>:
   180c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   180c4:	f7ff ffd2 	bl	1806c <__aeabi_cfrcmple>
   180c8:	bf94      	ite	ls
   180ca:	2001      	movls	r0, #1
   180cc:	2000      	movhi	r0, #0
   180ce:	f85d fb08 	ldr.w	pc, [sp], #8
   180d2:	bf00      	nop

000180d4 <__aeabi_fcmpgt>:
   180d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   180d8:	f7ff ffc8 	bl	1806c <__aeabi_cfrcmple>
   180dc:	bf34      	ite	cc
   180de:	2001      	movcc	r0, #1
   180e0:	2000      	movcs	r0, #0
   180e2:	f85d fb08 	ldr.w	pc, [sp], #8
   180e6:	bf00      	nop

000180e8 <__aeabi_f2iz>:
   180e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   180ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   180f0:	d30f      	bcc.n	18112 <__aeabi_f2iz+0x2a>
   180f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   180f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   180fa:	d90d      	bls.n	18118 <__aeabi_f2iz+0x30>
   180fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18104:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18108:	fa23 f002 	lsr.w	r0, r3, r2
   1810c:	bf18      	it	ne
   1810e:	4240      	negne	r0, r0
   18110:	4770      	bx	lr
   18112:	f04f 0000 	mov.w	r0, #0
   18116:	4770      	bx	lr
   18118:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1811c:	d101      	bne.n	18122 <__aeabi_f2iz+0x3a>
   1811e:	0242      	lsls	r2, r0, #9
   18120:	d105      	bne.n	1812e <__aeabi_f2iz+0x46>
   18122:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   18126:	bf08      	it	eq
   18128:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1812c:	4770      	bx	lr
   1812e:	f04f 0000 	mov.w	r0, #0
   18132:	4770      	bx	lr

00018134 <memcpy>:
   18134:	2a0f      	cmp	r2, #15
   18136:	b4f0      	push	{r4, r5, r6, r7}
   18138:	d945      	bls.n	181c6 <memcpy+0x92>
   1813a:	ea40 0301 	orr.w	r3, r0, r1
   1813e:	079b      	lsls	r3, r3, #30
   18140:	d145      	bne.n	181ce <memcpy+0x9a>
   18142:	f1a2 0710 	sub.w	r7, r2, #16
   18146:	460c      	mov	r4, r1
   18148:	4603      	mov	r3, r0
   1814a:	093f      	lsrs	r7, r7, #4
   1814c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18150:	3610      	adds	r6, #16
   18152:	6825      	ldr	r5, [r4, #0]
   18154:	3310      	adds	r3, #16
   18156:	3410      	adds	r4, #16
   18158:	f843 5c10 	str.w	r5, [r3, #-16]
   1815c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18160:	f843 5c0c 	str.w	r5, [r3, #-12]
   18164:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18168:	f843 5c08 	str.w	r5, [r3, #-8]
   1816c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18170:	f843 5c04 	str.w	r5, [r3, #-4]
   18174:	42b3      	cmp	r3, r6
   18176:	d1ec      	bne.n	18152 <memcpy+0x1e>
   18178:	1c7b      	adds	r3, r7, #1
   1817a:	f002 0c0f 	and.w	ip, r2, #15
   1817e:	f1bc 0f03 	cmp.w	ip, #3
   18182:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18186:	4419      	add	r1, r3
   18188:	4403      	add	r3, r0
   1818a:	d922      	bls.n	181d2 <memcpy+0x9e>
   1818c:	460e      	mov	r6, r1
   1818e:	461d      	mov	r5, r3
   18190:	4664      	mov	r4, ip
   18192:	f856 7b04 	ldr.w	r7, [r6], #4
   18196:	3c04      	subs	r4, #4
   18198:	2c03      	cmp	r4, #3
   1819a:	f845 7b04 	str.w	r7, [r5], #4
   1819e:	d8f8      	bhi.n	18192 <memcpy+0x5e>
   181a0:	f1ac 0404 	sub.w	r4, ip, #4
   181a4:	f002 0203 	and.w	r2, r2, #3
   181a8:	f024 0403 	bic.w	r4, r4, #3
   181ac:	3404      	adds	r4, #4
   181ae:	4423      	add	r3, r4
   181b0:	4421      	add	r1, r4
   181b2:	b132      	cbz	r2, 181c2 <memcpy+0x8e>
   181b4:	440a      	add	r2, r1
   181b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   181ba:	4291      	cmp	r1, r2
   181bc:	f803 4b01 	strb.w	r4, [r3], #1
   181c0:	d1f9      	bne.n	181b6 <memcpy+0x82>
   181c2:	bcf0      	pop	{r4, r5, r6, r7}
   181c4:	4770      	bx	lr
   181c6:	4603      	mov	r3, r0
   181c8:	2a00      	cmp	r2, #0
   181ca:	d1f3      	bne.n	181b4 <memcpy+0x80>
   181cc:	e7f9      	b.n	181c2 <memcpy+0x8e>
   181ce:	4603      	mov	r3, r0
   181d0:	e7f0      	b.n	181b4 <memcpy+0x80>
   181d2:	4662      	mov	r2, ip
   181d4:	2a00      	cmp	r2, #0
   181d6:	d1ed      	bne.n	181b4 <memcpy+0x80>
   181d8:	e7f3      	b.n	181c2 <memcpy+0x8e>
   181da:	bf00      	nop

000181dc <memset>:
   181dc:	0783      	lsls	r3, r0, #30
   181de:	b4f0      	push	{r4, r5, r6, r7}
   181e0:	d048      	beq.n	18274 <memset+0x98>
   181e2:	1e54      	subs	r4, r2, #1
   181e4:	2a00      	cmp	r2, #0
   181e6:	d043      	beq.n	18270 <memset+0x94>
   181e8:	b2cd      	uxtb	r5, r1
   181ea:	4603      	mov	r3, r0
   181ec:	e002      	b.n	181f4 <memset+0x18>
   181ee:	2c00      	cmp	r4, #0
   181f0:	d03e      	beq.n	18270 <memset+0x94>
   181f2:	4614      	mov	r4, r2
   181f4:	f803 5b01 	strb.w	r5, [r3], #1
   181f8:	f013 0f03 	tst.w	r3, #3
   181fc:	f104 32ff 	add.w	r2, r4, #4294967295
   18200:	d1f5      	bne.n	181ee <memset+0x12>
   18202:	2c03      	cmp	r4, #3
   18204:	d92d      	bls.n	18262 <memset+0x86>
   18206:	b2cd      	uxtb	r5, r1
   18208:	2c0f      	cmp	r4, #15
   1820a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1820e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18212:	d918      	bls.n	18246 <memset+0x6a>
   18214:	f1a4 0710 	sub.w	r7, r4, #16
   18218:	f103 0610 	add.w	r6, r3, #16
   1821c:	461a      	mov	r2, r3
   1821e:	093f      	lsrs	r7, r7, #4
   18220:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18224:	6015      	str	r5, [r2, #0]
   18226:	3210      	adds	r2, #16
   18228:	f842 5c0c 	str.w	r5, [r2, #-12]
   1822c:	f842 5c08 	str.w	r5, [r2, #-8]
   18230:	f842 5c04 	str.w	r5, [r2, #-4]
   18234:	42b2      	cmp	r2, r6
   18236:	d1f5      	bne.n	18224 <memset+0x48>
   18238:	f004 040f 	and.w	r4, r4, #15
   1823c:	3701      	adds	r7, #1
   1823e:	2c03      	cmp	r4, #3
   18240:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18244:	d90d      	bls.n	18262 <memset+0x86>
   18246:	461e      	mov	r6, r3
   18248:	4622      	mov	r2, r4
   1824a:	3a04      	subs	r2, #4
   1824c:	f846 5b04 	str.w	r5, [r6], #4
   18250:	2a03      	cmp	r2, #3
   18252:	d8fa      	bhi.n	1824a <memset+0x6e>
   18254:	1f22      	subs	r2, r4, #4
   18256:	f004 0403 	and.w	r4, r4, #3
   1825a:	f022 0203 	bic.w	r2, r2, #3
   1825e:	3204      	adds	r2, #4
   18260:	4413      	add	r3, r2
   18262:	b12c      	cbz	r4, 18270 <memset+0x94>
   18264:	b2c9      	uxtb	r1, r1
   18266:	441c      	add	r4, r3
   18268:	f803 1b01 	strb.w	r1, [r3], #1
   1826c:	42a3      	cmp	r3, r4
   1826e:	d1fb      	bne.n	18268 <memset+0x8c>
   18270:	bcf0      	pop	{r4, r5, r6, r7}
   18272:	4770      	bx	lr
   18274:	4614      	mov	r4, r2
   18276:	4603      	mov	r3, r0
   18278:	e7c3      	b.n	18202 <memset+0x26>
   1827a:	bf00      	nop

0001827c <strncpy>:
   1827c:	ea40 0301 	orr.w	r3, r0, r1
   18280:	079b      	lsls	r3, r3, #30
   18282:	b470      	push	{r4, r5, r6}
   18284:	d12b      	bne.n	182de <strncpy+0x62>
   18286:	2a03      	cmp	r2, #3
   18288:	bf84      	itt	hi
   1828a:	460b      	movhi	r3, r1
   1828c:	4605      	movhi	r5, r0
   1828e:	d926      	bls.n	182de <strncpy+0x62>
   18290:	4619      	mov	r1, r3
   18292:	f853 4b04 	ldr.w	r4, [r3], #4
   18296:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1829a:	ea26 0604 	bic.w	r6, r6, r4
   1829e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   182a2:	d105      	bne.n	182b0 <strncpy+0x34>
   182a4:	3a04      	subs	r2, #4
   182a6:	f845 4b04 	str.w	r4, [r5], #4
   182aa:	2a03      	cmp	r2, #3
   182ac:	4619      	mov	r1, r3
   182ae:	d8ef      	bhi.n	18290 <strncpy+0x14>
   182b0:	b19a      	cbz	r2, 182da <strncpy+0x5e>
   182b2:	780c      	ldrb	r4, [r1, #0]
   182b4:	3a01      	subs	r2, #1
   182b6:	1c6b      	adds	r3, r5, #1
   182b8:	702c      	strb	r4, [r5, #0]
   182ba:	b13c      	cbz	r4, 182cc <strncpy+0x50>
   182bc:	b16a      	cbz	r2, 182da <strncpy+0x5e>
   182be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   182c2:	3a01      	subs	r2, #1
   182c4:	f803 4b01 	strb.w	r4, [r3], #1
   182c8:	2c00      	cmp	r4, #0
   182ca:	d1f7      	bne.n	182bc <strncpy+0x40>
   182cc:	b12a      	cbz	r2, 182da <strncpy+0x5e>
   182ce:	441a      	add	r2, r3
   182d0:	2100      	movs	r1, #0
   182d2:	f803 1b01 	strb.w	r1, [r3], #1
   182d6:	4293      	cmp	r3, r2
   182d8:	d1fb      	bne.n	182d2 <strncpy+0x56>
   182da:	bc70      	pop	{r4, r5, r6}
   182dc:	4770      	bx	lr
   182de:	4605      	mov	r5, r0
   182e0:	e7e6      	b.n	182b0 <strncpy+0x34>
   182e2:	bf00      	nop

000182e4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   182e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   182e6:	e003      	b.n	182f0 <LoopCopyDataInit>

000182e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   182e8:	4b0a      	ldr	r3, [pc, #40]	; (18314 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   182ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   182ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   182ee:	3104      	adds	r1, #4

000182f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   182f0:	4809      	ldr	r0, [pc, #36]	; (18318 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   182f2:	4b0a      	ldr	r3, [pc, #40]	; (1831c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   182f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   182f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   182f8:	d3f6      	bcc.n	182e8 <CopyDataInit>
	ldr	r2, =_sbss
   182fa:	4a09      	ldr	r2, [pc, #36]	; (18320 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   182fc:	e002      	b.n	18304 <LoopFillZerobss>

000182fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   182fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18300:	f842 3b04 	str.w	r3, [r2], #4

00018304 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18304:	4b07      	ldr	r3, [pc, #28]	; (18324 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18306:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18308:	d3f9      	bcc.n	182fe <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   1830a:	f7e8 f817 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   1830e:	f7fe fd4b 	bl	16da8 <main>
	bx	lr    
   18312:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18314:	00018484 	.word	0x00018484
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18318:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   1831c:	20000abc 	.word	0x20000abc
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18320:	20000ac0 	.word	0x20000ac0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18324:	2001351c 	.word	0x2001351c

00018328 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18328:	e7fe      	b.n	18328 <ADC1_2_IRQHandler>
   1832a:	0000      	movs	r0, r0
   1832c:	6c6c616d 	.word	0x6c6c616d
   18330:	6620636f 	.word	0x6620636f
   18334:	6520726f 	.word	0x6520726f
   18338:	746e6576 	.word	0x746e6576
   1833c:	61747320 	.word	0x61747320
   18340:	66206b63 	.word	0x66206b63
   18344:	656c6961 	.word	0x656c6961
   18348:	000d0a64 	.word	0x000d0a64
   1834c:	72656874 	.word	0x72656874
   18350:	72612065 	.word	0x72612065
   18354:	65732065 	.word	0x65732065
   18358:	726f736e 	.word	0x726f736e
   1835c:	73696d20 	.word	0x73696d20
   18360:	676e6973 	.word	0x676e6973
   18364:	61656420 	.word	0x61656420
   18368:	6e696c64 	.word	0x6e696c64
   1836c:	000d0a65 	.word	0x000d0a65
   18370:	72656874 	.word	0x72656874
   18374:	72612065 	.word	0x72612065
   18378:	65732065 	.word	0x65732065
   1837c:	6e617672 	.word	0x6e617672
   18380:	6d207374 	.word	0x6d207374
   18384:	69737369 	.word	0x69737369
   18388:	6420676e 	.word	0x6420676e
   1838c:	6c646165 	.word	0x6c646165
   18390:	0a656e69 	.word	0x0a656e69
   18394:	0000000d 	.word	0x0000000d
   18398:	6f727245 	.word	0x6f727245
   1839c:	54203a72 	.word	0x54203a72
   183a0:	20736968 	.word	0x20736968
   183a4:	6e657665 	.word	0x6e657665
   183a8:	61682074 	.word	0x61682074
   183ac:	72612073 	.word	0x72612073
   183b0:	65766972 	.word	0x65766972
   183b4:	0a212164 	.word	0x0a212164
   183b8:	0000000d 	.word	0x0000000d
   183bc:	454c4449 	.word	0x454c4449
   183c0:	00000000 	.word	0x00000000

000183c4 <ulKernelPriority>:
   183c4:	0000007f                                ....

000183c8 <heapSTRUCT_SIZE>:
   183c8:	00010010                                         ..

000183ca <version>:
   183ca:	3d5a0001                                         ..

000183cc <utm_east0>:
   183cc:	00093d5a                                Z=..

000183d0 <utm_north0>:
   183d0:	005875e6                                .uX.

000183d4 <climb_pgain>:
   183d4:	bcf5c28f                                ....

000183d8 <climb_igain>:
   183d8:	3dcccccd                                ...=

000183dc <level_gaz>:
   183dc:	3e9eb852                                R..>

000183e0 <nav_east0>:
   183e0:	00093d5a                                Z=..

000183e4 <nav_north0>:
   183e4:	005875e6                                .uX.

000183e8 <nb_waypoint>:
   183e8:	00000007 33323130 37363534 42413938     ....0123456789AB
   183f8:	46454443                                CDEF

000183fc <failsafe>:
	...
   18410:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18420:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18430:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18440:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18450:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18460:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18470:	00000074 736e6553 0000726f 76726573     t...Sensor..serv
   18480:	00746e61                                ant.
