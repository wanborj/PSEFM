
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 40 01 20 a9 80 01 00 ed 80 01 00 ed 80 01 00     .@. ............
      10:	ed 80 01 00 ed 80 01 00 ed 80 01 00 00 00 00 00     ................
	...
      2c:	ad 54 00 00 ed 80 01 00 00 00 00 00 b9 55 00 00     .T...........U..
      3c:	f5 55 00 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     .U..............
      4c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      5c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      6c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      7c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      8c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      9c:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      ac:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      bc:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      cc:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
      dc:	ed 80 01 00 ed 80 01 00 ed 80 01 00 ed 80 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018248 	.word	0x00018248
     6d0:	20000000 	.word	0x20000000
     6d4:	20000120 	.word	0x20000120
     6d8:	20000120 	.word	0x20000120
     6dc:	2000ae94 	.word	0x2000ae94

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 f925 	bl	5648 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 138c 	movw	r3, #396	; 0x18c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 138c 	movw	r3, #396	; 0x18c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fa64 	bl	3918 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fa5f 	bl	3918 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 1390 	movw	r3, #400	; 0x190
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 1390 	movw	r3, #400	; 0x190
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 1220 	movw	r2, #288	; 0x120
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fa3f 	bl	3930 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 1394 	movw	r3, #404	; 0x194
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 138c 	movw	r3, #396	; 0x18c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fa7e 	bl	39f0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 138c 	movw	r3, #396	; 0x18c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 1394 	movw	r3, #404	; 0x194
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 1374 	movw	r3, #372	; 0x174
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 138c 	movw	r3, #396	; 0x18c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fa28 	bl	3980 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 1370 	movw	r3, #368	; 0x170
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 138c 	movw	r3, #396	; 0x18c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fa18 	bl	3980 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 138c 	movw	r3, #396	; 0x18c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fa0b 	bl	3980 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 1378 	movw	r3, #376	; 0x178
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fa2c 	bl	39f0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fa23 	bl	39f0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 1390 	movw	r3, #400	; 0x190
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 1390 	movw	r3, #400	; 0x190
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 1220 	movw	r2, #288	; 0x120
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 f9a2 	bl	3930 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 1378 	movw	r3, #376	; 0x178
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fa71 	bl	4aec <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 1398 	movw	r3, #408	; 0x198
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 139c 	movw	r3, #412	; 0x19c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 1394 	movw	r3, #404	; 0x194
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 1394 	movw	r3, #404	; 0x194
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 139c 	movw	r3, #412	; 0x19c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 139c 	movw	r3, #412	; 0x19c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 1394 	movw	r3, #404	; 0x194
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 1370 	movw	r3, #368	; 0x170
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 1374 	movw	r3, #372	; 0x174
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 1370 	movw	r3, #368	; 0x170
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 1374 	movw	r3, #372	; 0x174
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 1370 	movw	r3, #368	; 0x170
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 1394 	movw	r3, #404	; 0x194
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 f996 	bl	39f0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 f98d 	bl	39f0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 1390 	movw	r3, #400	; 0x190
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 1390 	movw	r3, #400	; 0x190
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 1220 	movw	r2, #288	; 0x120
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 f908 	bl	3930 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 1370 	movw	r3, #368	; 0x170
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 139c 	movw	r3, #412	; 0x19c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 1394 	movw	r3, #404	; 0x194
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 1398 	movw	r3, #408	; 0x198
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 1390 	movw	r3, #400	; 0x190
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 1390 	movw	r3, #400	; 0x190
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 1390 	movw	r3, #400	; 0x190
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 1390 	movw	r3, #400	; 0x190
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 1220 	movw	r2, #288	; 0x120
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 1390 	movw	r3, #400	; 0x190
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 1220 	movw	r2, #288	; 0x120
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 138c 	movw	r3, #396	; 0x18c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 138c 	movw	r3, #396	; 0x18c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 138c 	movw	r3, #396	; 0x18c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 138c 	movw	r3, #396	; 0x18c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 1220 	movw	r2, #288	; 0x120
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f83f 	bl	38d8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 1048 	movw	r0, #328	; 0x148
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f833 	bl	38d8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 105c 	movw	r0, #348	; 0x15c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f82d 	bl	38d8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 1078 	movw	r0, #376	; 0x178
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f827 	bl	38d8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 1370 	movw	r3, #368	; 0x170
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 1248 	movw	r2, #328	; 0x148
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 1374 	movw	r3, #372	; 0x174
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 125c 	movw	r2, #348	; 0x15c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 f891 	bl	39f0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 1078 	movw	r0, #376	; 0x178
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f828 	bl	3930 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 138c 	movw	r3, #396	; 0x18c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 10a0 	movw	r0, #416	; 0x1a0
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f000 ffdf 	bl	38d8 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 12b4 	movw	r2, #436	; 0x1b4
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f000 ffcf 	bl	38d8 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fcf1 	bl	5408 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 f85d 	bl	4aec <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f240 13c8 	movw	r3, #456	; 0x1c8
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f240 13c8 	movw	r3, #456	; 0x1c8
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f240 13c8 	movw	r3, #456	; 0x1c8
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f240 13b4 	movw	r3, #436	; 0x1b4
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f240 13a0 	movw	r3, #416	; 0x1a0
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 fd2b 	bl	5554 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 fd21 	bl	5580 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 fcd7 	bl	5554 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 fd3f 	bl	5648 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f240 10a0 	movw	r0, #416	; 0x1a0
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f000 fe90 	bl	3930 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fb38 	bl	5284 <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fd16 	bl	5648 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f248 00f0 	movw	r0, #33008	; 0x80f0
    2c28:	f2c0 0001 	movt	r0, #1
    2c2c:	f014 f81e 	bl	16c6c <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>
        //vPrintString("event creating\n\r");

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fc87 	bl	5580 <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f240 13a0 	movw	r3, #416	; 0x1a0
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f240 13a0 	movw	r3, #416	; 0x1a0
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f001 ff0a 	bl	4aec <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fc2f 	bl	5554 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f000 fe78 	bl	39f0 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 fe10 	bl	3930 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fc36 	bl	5580 <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fc05 	bl	5554 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 fa9b 	bl	5284 <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f000 fe36 	bl	39f0 <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fbfc 	bl	5580 <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 fe12 	bl	39f0 <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fbd8 	bl	5580 <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fbd2 	bl	5580 <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fbb2 	bl	5554 <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fced 	bl	57d0 <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fbc3 	bl	5580 <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f000 fe63 	bl	3adc <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f240 3380 	movw	r3, #896	; 0x380
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f240 3380 	movw	r3, #896	; 0x380
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f240 3380 	movw	r3, #896	; 0x380
    2e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f000 fed3 	bl	3bf8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f240 3380 	movw	r3, #896	; 0x380
    2e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f000 ff8b 	bl	3d84 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b03      	cmp	r3, #3
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e061      	b.n	2f50 <vParameterInitialise+0xd0>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f240 13d0 	movw	r3, #464	; 0x1d0
    2e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	216c      	movs	r1, #108	; 0x6c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f240 13d0 	movw	r3, #464	; 0x1d0
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	216c      	movs	r1, #108	; 0x6c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f240 13d0 	movw	r3, #464	; 0x1d0
    2ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	216c      	movs	r1, #108	; 0x6c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f240 0330 	movw	r3, #48	; 0x30
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f240 13d0 	movw	r3, #464	; 0x1d0
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	206c      	movs	r0, #108	; 0x6c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	335c      	adds	r3, #92	; 0x5c
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2ef6:	f240 33a0 	movw	r3, #928	; 0x3a0
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f240 13d0 	movw	r3, #464	; 0x1d0
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	206c      	movs	r0, #108	; 0x6c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3368      	adds	r3, #104	; 0x68
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f1a:	f240 33a0 	movw	r3, #928	; 0x3a0
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 032c 	movw	r3, #44	; 0x2c
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f34:	f240 13d0 	movw	r3, #464	; 0x1d0
    2f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f3c:	68f9      	ldr	r1, [r7, #12]
    2f3e:	206c      	movs	r0, #108	; 0x6c
    2f40:	fb00 f101 	mul.w	r1, r0, r1
    2f44:	440b      	add	r3, r1
    2f46:	3364      	adds	r3, #100	; 0x64
    2f48:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	3301      	adds	r3, #1
    2f4e:	60fb      	str	r3, [r7, #12]
    2f50:	68fb      	ldr	r3, [r7, #12]
    2f52:	2b03      	cmp	r3, #3
    2f54:	dd9a      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f56:	2300      	movs	r3, #0
    2f58:	60fb      	str	r3, [r7, #12]
    2f5a:	e080      	b.n	305e <vParameterInitialise+0x1de>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f5c:	f240 0240 	movw	r2, #64	; 0x40
    2f60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f64:	68f9      	ldr	r1, [r7, #12]
    2f66:	460b      	mov	r3, r1
    2f68:	005b      	lsls	r3, r3, #1
    2f6a:	440b      	add	r3, r1
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4413      	add	r3, r2
    2f70:	3304      	adds	r3, #4
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f76:	f240 0240 	movw	r2, #64	; 0x40
    2f7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f7e:	68f9      	ldr	r1, [r7, #12]
    2f80:	460b      	mov	r3, r1
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	440b      	add	r3, r1
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4413      	add	r3, r2
    2f8a:	3308      	adds	r3, #8
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2f90:	f240 13d0 	movw	r3, #464	; 0x1d0
    2f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f98:	68ba      	ldr	r2, [r7, #8]
    2f9a:	216c      	movs	r1, #108	; 0x6c
    2f9c:	fb01 f202 	mul.w	r2, r1, r2
    2fa0:	4413      	add	r3, r2
    2fa2:	3308      	adds	r3, #8
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	f240 12d0 	movw	r2, #464	; 0x1d0
    2faa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fae:	68b9      	ldr	r1, [r7, #8]
    2fb0:	460b      	mov	r3, r1
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	440b      	add	r3, r1
    2fb6:	00d9      	lsls	r1, r3, #3
    2fb8:	440b      	add	r3, r1
    2fba:	4403      	add	r3, r0
    2fbc:	330c      	adds	r3, #12
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4413      	add	r3, r2
    2fc2:	687a      	ldr	r2, [r7, #4]
    2fc4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fc6:	f240 13d0 	movw	r3, #464	; 0x1d0
    2fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fce:	68ba      	ldr	r2, [r7, #8]
    2fd0:	216c      	movs	r1, #108	; 0x6c
    2fd2:	fb01 f202 	mul.w	r2, r1, r2
    2fd6:	4413      	add	r3, r2
    2fd8:	3308      	adds	r3, #8
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	1c5a      	adds	r2, r3, #1
    2fde:	f240 13d0 	movw	r3, #464	; 0x1d0
    2fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fe6:	68b9      	ldr	r1, [r7, #8]
    2fe8:	206c      	movs	r0, #108	; 0x6c
    2fea:	fb00 f101 	mul.w	r1, r0, r1
    2fee:	440b      	add	r3, r1
    2ff0:	3308      	adds	r3, #8
    2ff2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    2ff4:	f240 13d0 	movw	r3, #464	; 0x1d0
    2ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	216c      	movs	r1, #108	; 0x6c
    3000:	fb01 f202 	mul.w	r2, r1, r2
    3004:	4413      	add	r3, r2
    3006:	3304      	adds	r3, #4
    3008:	6818      	ldr	r0, [r3, #0]
    300a:	f240 12d0 	movw	r2, #464	; 0x1d0
    300e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3012:	6879      	ldr	r1, [r7, #4]
    3014:	460b      	mov	r3, r1
    3016:	005b      	lsls	r3, r3, #1
    3018:	440b      	add	r3, r1
    301a:	00d9      	lsls	r1, r3, #3
    301c:	440b      	add	r3, r1
    301e:	4403      	add	r3, r0
    3020:	3302      	adds	r3, #2
    3022:	009b      	lsls	r3, r3, #2
    3024:	4413      	add	r3, r2
    3026:	68ba      	ldr	r2, [r7, #8]
    3028:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    302a:	f240 13d0 	movw	r3, #464	; 0x1d0
    302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	216c      	movs	r1, #108	; 0x6c
    3036:	fb01 f202 	mul.w	r2, r1, r2
    303a:	4413      	add	r3, r2
    303c:	3304      	adds	r3, #4
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	1c5a      	adds	r2, r3, #1
    3042:	f240 13d0 	movw	r3, #464	; 0x1d0
    3046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304a:	6879      	ldr	r1, [r7, #4]
    304c:	206c      	movs	r0, #108	; 0x6c
    304e:	fb00 f101 	mul.w	r1, r0, r1
    3052:	440b      	add	r3, r1
    3054:	3304      	adds	r3, #4
    3056:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	3301      	adds	r3, #1
    305c:	60fb      	str	r3, [r7, #12]
    305e:	f240 0340 	movw	r3, #64	; 0x40
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	429a      	cmp	r2, r3
    306c:	f73f af76 	bgt.w	2f5c <vParameterInitialise+0xdc>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr
    307a:	bf00      	nop

0000307c <vTaskDelayLET>:

void vTaskDelayLET()
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3082:	f002 f8ff 	bl	5284 <xTaskGetCurrentTaskHandle>
    3086:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3088:	68b8      	ldr	r0, [r7, #8]
    308a:	f002 f9b1 	bl	53f0 <xTaskGetxStartTime>
    308e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3090:	68b8      	ldr	r0, [r7, #8]
    3092:	f002 f9b9 	bl	5408 <xTaskGetxLet>
    3096:	4602      	mov	r2, r0
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	4413      	add	r3, r2
    309c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    309e:	f001 fd25 	bl	4aec <xTaskGetTickCount>
    30a2:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30a4:	e002      	b.n	30ac <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30a6:	f001 fd21 	bl	4aec <xTaskGetTickCount>
    30aa:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30ac:	68fa      	ldr	r2, [r7, #12]
    30ae:	683b      	ldr	r3, [r7, #0]
    30b0:	429a      	cmp	r2, r3
    30b2:	d3f8      	bcc.n	30a6 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30b4:	3710      	adds	r7, #16
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop

000030bc <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c0:	b088      	sub	sp, #32
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
    30c6:	6039      	str	r1, [r7, #0]
    30c8:	4669      	mov	r1, sp
    30ca:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30cc:	6879      	ldr	r1, [r7, #4]
    30ce:	6849      	ldr	r1, [r1, #4]
    30d0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30d2:	69be      	ldr	r6, [r7, #24]
    30d4:	1e71      	subs	r1, r6, #1
    30d6:	6179      	str	r1, [r7, #20]
    30d8:	4631      	mov	r1, r6
    30da:	4608      	mov	r0, r1
    30dc:	f04f 0100 	mov.w	r1, #0
    30e0:	014d      	lsls	r5, r1, #5
    30e2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    30e6:	0144      	lsls	r4, r0, #5
    30e8:	4631      	mov	r1, r6
    30ea:	4608      	mov	r0, r1
    30ec:	f04f 0100 	mov.w	r1, #0
    30f0:	014b      	lsls	r3, r1, #5
    30f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    30f6:	0142      	lsls	r2, r0, #5
    30f8:	4633      	mov	r3, r6
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	3303      	adds	r3, #3
    30fe:	3307      	adds	r3, #7
    3100:	08db      	lsrs	r3, r3, #3
    3102:	00db      	lsls	r3, r3, #3
    3104:	ebad 0d03 	sub.w	sp, sp, r3
    3108:	466b      	mov	r3, sp
    310a:	3303      	adds	r3, #3
    310c:	089b      	lsrs	r3, r3, #2
    310e:	009b      	lsls	r3, r3, #2
    3110:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    3118:	f240 3380 	movw	r3, #896	; 0x380
    311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3120:	68fa      	ldr	r2, [r7, #12]
    3122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3126:	4618      	mov	r0, r3
    3128:	2100      	movs	r1, #0
    312a:	f04f 32ff 	mov.w	r2, #4294967295
    312e:	2300      	movs	r3, #0
    3130:	f000 fe28 	bl	3d84 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3134:	f001 fcda 	bl	4aec <xTaskGetTickCount>
    3138:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    313a:	f240 3390 	movw	r3, #912	; 0x390
    313e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3142:	68fa      	ldr	r2, [r7, #12]
    3144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3148:	4618      	mov	r0, r3
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	f002 f968 	bl	5420 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3150:	2300      	movs	r3, #0
    3152:	61fb      	str	r3, [r7, #28]
    3154:	e024      	b.n	31a0 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3156:	687a      	ldr	r2, [r7, #4]
    3158:	69fb      	ldr	r3, [r7, #28]
    315a:	3302      	adds	r3, #2
    315c:	009b      	lsls	r3, r3, #2
    315e:	4413      	add	r3, r2
    3160:	6859      	ldr	r1, [r3, #4]
    3162:	693b      	ldr	r3, [r7, #16]
    3164:	69fa      	ldr	r2, [r7, #28]
    3166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    316a:	69fb      	ldr	r3, [r7, #28]
    316c:	009b      	lsls	r3, r3, #2
    316e:	683a      	ldr	r2, [r7, #0]
    3170:	18d1      	adds	r1, r2, r3
    3172:	693b      	ldr	r3, [r7, #16]
    3174:	69fa      	ldr	r2, [r7, #28]
    3176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    317a:	f240 3390 	movw	r3, #912	; 0x390
    317e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3186:	f240 13cc 	movw	r3, #460	; 0x1cc
    318a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	4608      	mov	r0, r1
    3192:	4611      	mov	r1, r2
    3194:	461a      	mov	r2, r3
    3196:	f7ff fdc3 	bl	2d20 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    319a:	69fb      	ldr	r3, [r7, #28]
    319c:	3301      	adds	r3, #1
    319e:	61fb      	str	r3, [r7, #28]
    31a0:	69fa      	ldr	r2, [r7, #28]
    31a2:	69bb      	ldr	r3, [r7, #24]
    31a4:	429a      	cmp	r2, r3
    31a6:	dbd6      	blt.n	3156 <vEventReceiveAll+0x9a>
    31a8:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    31aa:	3720      	adds	r7, #32
    31ac:	46bd      	mov	sp, r7
    31ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31b2:	bf00      	nop

000031b4 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
    31bc:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	685b      	ldr	r3, [r3, #4]
    31c2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31c4:	2300      	movs	r3, #0
    31c6:	60fb      	str	r3, [r7, #12]
    31c8:	e00a      	b.n	31e0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	009b      	lsls	r3, r3, #2
    31ce:	683a      	ldr	r2, [r7, #0]
    31d0:	4413      	add	r3, r2
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	4618      	mov	r0, r3
    31d6:	f7ff fe05 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	3301      	adds	r3, #1
    31de:	60fb      	str	r3, [r7, #12]
    31e0:	68fa      	ldr	r2, [r7, #12]
    31e2:	68bb      	ldr	r3, [r7, #8]
    31e4:	429a      	cmp	r2, r3
    31e6:	dbf0      	blt.n	31ca <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    31e8:	3710      	adds	r7, #16
    31ea:	46bd      	mov	sp, r7
    31ec:	bd80      	pop	{r7, pc}
    31ee:	bf00      	nop

000031f0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    31f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f4:	b08a      	sub	sp, #40	; 0x28
    31f6:	af02      	add	r7, sp, #8
    31f8:	6078      	str	r0, [r7, #4]
    31fa:	6039      	str	r1, [r7, #0]
    31fc:	4669      	mov	r1, sp
    31fe:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3200:	6879      	ldr	r1, [r7, #4]
    3202:	6889      	ldr	r1, [r1, #8]
    3204:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    3206:	6879      	ldr	r1, [r7, #4]
    3208:	6809      	ldr	r1, [r1, #0]
    320a:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    320c:	6879      	ldr	r1, [r7, #4]
    320e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    3210:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3212:	69be      	ldr	r6, [r7, #24]
    3214:	1e71      	subs	r1, r6, #1
    3216:	60f9      	str	r1, [r7, #12]
    3218:	4631      	mov	r1, r6
    321a:	4608      	mov	r0, r1
    321c:	f04f 0100 	mov.w	r1, #0
    3220:	014d      	lsls	r5, r1, #5
    3222:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3226:	0144      	lsls	r4, r0, #5
    3228:	4631      	mov	r1, r6
    322a:	4608      	mov	r0, r1
    322c:	f04f 0100 	mov.w	r1, #0
    3230:	014b      	lsls	r3, r1, #5
    3232:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3236:	0142      	lsls	r2, r0, #5
    3238:	4633      	mov	r3, r6
    323a:	009b      	lsls	r3, r3, #2
    323c:	3303      	adds	r3, #3
    323e:	3307      	adds	r3, #7
    3240:	08db      	lsrs	r3, r3, #3
    3242:	00db      	lsls	r3, r3, #3
    3244:	ebad 0d03 	sub.w	sp, sp, r3
    3248:	ab02      	add	r3, sp, #8
    324a:	3303      	adds	r3, #3
    324c:	089b      	lsrs	r3, r3, #2
    324e:	009b      	lsls	r3, r3, #2
    3250:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3252:	2300      	movs	r3, #0
    3254:	61fb      	str	r3, [r7, #28]
    3256:	e033      	b.n	32c0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3258:	687a      	ldr	r2, [r7, #4]
    325a:	69fb      	ldr	r3, [r7, #28]
    325c:	330c      	adds	r3, #12
    325e:	009b      	lsls	r3, r3, #2
    3260:	4413      	add	r3, r2
    3262:	6859      	ldr	r1, [r3, #4]
    3264:	68bb      	ldr	r3, [r7, #8]
    3266:	69fa      	ldr	r2, [r7, #28]
    3268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    326c:	68bb      	ldr	r3, [r7, #8]
    326e:	69fa      	ldr	r2, [r7, #28]
    3270:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3274:	697b      	ldr	r3, [r7, #20]
    3276:	429a      	cmp	r2, r3
    3278:	dc06      	bgt.n	3288 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    327a:	69fb      	ldr	r3, [r7, #28]
    327c:	011b      	lsls	r3, r3, #4
    327e:	683a      	ldr	r2, [r7, #0]
    3280:	4413      	add	r3, r2
    3282:	2201      	movs	r2, #1
    3284:	609a      	str	r2, [r3, #8]
    3286:	e005      	b.n	3294 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3288:	69fb      	ldr	r3, [r7, #28]
    328a:	011b      	lsls	r3, r3, #4
    328c:	683a      	ldr	r2, [r7, #0]
    328e:	4413      	add	r3, r2
    3290:	2200      	movs	r2, #0
    3292:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3294:	68bb      	ldr	r3, [r7, #8]
    3296:	69fa      	ldr	r2, [r7, #28]
    3298:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    329c:	f240 3390 	movw	r3, #912	; 0x390
    32a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32a8:	69fb      	ldr	r3, [r7, #28]
    32aa:	011b      	lsls	r3, r3, #4
    32ac:	683a      	ldr	r2, [r7, #0]
    32ae:	4413      	add	r3, r2
    32b0:	68da      	ldr	r2, [r3, #12]
    32b2:	9200      	str	r2, [sp, #0]
    32b4:	cb0e      	ldmia	r3, {r1, r2, r3}
    32b6:	f7ff fc69 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32ba:	69fb      	ldr	r3, [r7, #28]
    32bc:	3301      	adds	r3, #1
    32be:	61fb      	str	r3, [r7, #28]
    32c0:	69fa      	ldr	r2, [r7, #28]
    32c2:	69bb      	ldr	r3, [r7, #24]
    32c4:	429a      	cmp	r2, r3
    32c6:	dbc7      	blt.n	3258 <vEventCreateAll+0x68>
    32c8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32ca:	3720      	adds	r7, #32
    32cc:	46bd      	mov	sp, r7
    32ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32d2:	bf00      	nop

000032d4 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32d4:	b480      	push	{r7}
    32d6:	b083      	sub	sp, #12
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    32dc:	370c      	adds	r7, #12
    32de:	46bd      	mov	sp, r7
    32e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e4:	4770      	bx	lr
    32e6:	bf00      	nop

000032e8 <vDoSensor>:

static void vDoSensor()
{
    32e8:	b480      	push	{r7}
    32ea:	af00      	add	r7, sp, #0

}
    32ec:	46bd      	mov	sp, r7
    32ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f2:	4770      	bx	lr

000032f4 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    32f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    32f8:	b092      	sub	sp, #72	; 0x48
    32fa:	af00      	add	r7, sp, #0
    32fc:	60f8      	str	r0, [r7, #12]
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    32fe:	2301      	movs	r3, #1
    3300:	643b      	str	r3, [r7, #64]	; 0x40
    portBASE_TYPE xCount = 1;
    3302:	2301      	movs	r3, #1
    3304:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    330c:	689b      	ldr	r3, [r3, #8]
    330e:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    331e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3320:	62bb      	str	r3, [r7, #40]	; 0x28

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3322:	f240 3390 	movw	r3, #912	; 0x390
    3326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3330:	4618      	mov	r0, r3
    3332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3334:	f002 f882 	bl	543c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3338:	6b79      	ldr	r1, [r7, #52]	; 0x34
    333a:	1e4b      	subs	r3, r1, #1
    333c:	627b      	str	r3, [r7, #36]	; 0x24
    333e:	460b      	mov	r3, r1
    3340:	461a      	mov	r2, r3
    3342:	f04f 0300 	mov.w	r3, #0
    3346:	0158      	lsls	r0, r3, #5
    3348:	6078      	str	r0, [r7, #4]
    334a:	6878      	ldr	r0, [r7, #4]
    334c:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3350:	6078      	str	r0, [r7, #4]
    3352:	0150      	lsls	r0, r2, #5
    3354:	460b      	mov	r3, r1
    3356:	461a      	mov	r2, r3
    3358:	f04f 0300 	mov.w	r3, #0
    335c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3360:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3364:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3368:	460b      	mov	r3, r1
    336a:	009b      	lsls	r3, r3, #2
    336c:	3303      	adds	r3, #3
    336e:	3307      	adds	r3, #7
    3370:	08db      	lsrs	r3, r3, #3
    3372:	00db      	lsls	r3, r3, #3
    3374:	ebad 0d03 	sub.w	sp, sp, r3
    3378:	466b      	mov	r3, sp
    337a:	3303      	adds	r3, #3
    337c:	089b      	lsrs	r3, r3, #2
    337e:	009b      	lsls	r3, r3, #2
    3380:	623b      	str	r3, [r7, #32]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3382:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3384:	1e4b      	subs	r3, r1, #1
    3386:	61fb      	str	r3, [r7, #28]
    3388:	460b      	mov	r3, r1
    338a:	461a      	mov	r2, r3
    338c:	f04f 0300 	mov.w	r3, #0
    3390:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3394:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3398:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    339c:	460b      	mov	r3, r1
    339e:	461a      	mov	r2, r3
    33a0:	f04f 0300 	mov.w	r3, #0
    33a4:	01dd      	lsls	r5, r3, #7
    33a6:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33aa:	01d4      	lsls	r4, r2, #7
    33ac:	460b      	mov	r3, r1
    33ae:	011b      	lsls	r3, r3, #4
    33b0:	3303      	adds	r3, #3
    33b2:	3307      	adds	r3, #7
    33b4:	08db      	lsrs	r3, r3, #3
    33b6:	00db      	lsls	r3, r3, #3
    33b8:	ebad 0d03 	sub.w	sp, sp, r3
    33bc:	466b      	mov	r3, sp
    33be:	3303      	adds	r3, #3
    33c0:	089b      	lsrs	r3, r3, #2
    33c2:	009b      	lsls	r3, r3, #2
    33c4:	61bb      	str	r3, [r7, #24]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    33c8:	2b01      	cmp	r3, #1
    33ca:	d110      	bne.n	33ee <vSensor+0xfa>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33cc:	f240 3380 	movw	r3, #896	; 0x380
    33d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    33d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33da:	4618      	mov	r0, r3
    33dc:	2100      	movs	r1, #0
    33de:	f04f 32ff 	mov.w	r2, #4294967295
    33e2:	2300      	movs	r3, #0
    33e4:	f000 fcce 	bl	3d84 <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    33e8:	2300      	movs	r3, #0
    33ea:	643b      	str	r3, [r7, #64]	; 0x40
    33ec:	e00d      	b.n	340a <vSensor+0x116>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    33ee:	6a3b      	ldr	r3, [r7, #32]
    33f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    33f2:	4619      	mov	r1, r3
    33f4:	f7ff fe62 	bl	30bc <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    33f8:	6a3b      	ldr	r3, [r7, #32]
    33fa:	4618      	mov	r0, r3
    33fc:	f7ff ff6a 	bl	32d4 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    3400:	6a3b      	ldr	r3, [r7, #32]
    3402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3404:	4619      	mov	r1, r3
    3406:	f7ff fed5 	bl	31b4 <vEventDeleteAll>
        }

        //vPrintNumber( xMyFlag );

        xCurrentTime = xTaskGetTickCount();
    340a:	f001 fb6f 	bl	4aec <xTaskGetTickCount>
    340e:	6178      	str	r0, [r7, #20]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3410:	f240 3390 	movw	r3, #912	; 0x390
    3414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    341a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    341e:	4618      	mov	r0, r3
    3420:	6979      	ldr	r1, [r7, #20]
    3422:	f001 fffd 	bl	5420 <vTaskSetxStartTime>

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3428:	3301      	adds	r3, #1
    342a:	63fb      	str	r3, [r7, #60]	; 0x3c
        deadline = xCount * xPeriod; 
    342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    342e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3430:	fb02 f303 	mul.w	r3, r2, r3
    3434:	613b      	str	r3, [r7, #16]

        for( i = 0; i < NUM; i ++ )
    3436:	2300      	movs	r3, #0
    3438:	647b      	str	r3, [r7, #68]	; 0x44
    343a:	e011      	b.n	3460 <vSensor+0x16c>
        {
            xDatas[i].xNextPeriod = deadline;
    343c:	69ba      	ldr	r2, [r7, #24]
    343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3440:	011b      	lsls	r3, r3, #4
    3442:	4413      	add	r3, r2
    3444:	693a      	ldr	r2, [r7, #16]
    3446:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3448:	697a      	ldr	r2, [r7, #20]
    344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    344c:	441a      	add	r2, r3
    344e:	69b9      	ldr	r1, [r7, #24]
    3450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3452:	011b      	lsls	r3, r3, #4
    3454:	440b      	add	r3, r1
    3456:	3304      	adds	r3, #4
    3458:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    345a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    345c:	3301      	adds	r3, #1
    345e:	647b      	str	r3, [r7, #68]	; 0x44
    3460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3464:	429a      	cmp	r2, r3
    3466:	dbe9      	blt.n	343c <vSensor+0x148>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3468:	69bb      	ldr	r3, [r7, #24]
    346a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    346c:	4619      	mov	r1, r3
    346e:	f7ff febf 	bl	31f0 <vEventCreateAll>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    3472:	2300      	movs	r3, #0
    3474:	647b      	str	r3, [r7, #68]	; 0x44
    3476:	e002      	b.n	347e <vSensor+0x18a>
    3478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    347a:	3301      	adds	r3, #1
    347c:	647b      	str	r3, [r7, #68]	; 0x44
    347e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3480:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    3484:	dbf8      	blt.n	3478 <vSensor+0x184>
        {
            //xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    3486:	f7ff fdf9 	bl	307c <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    348a:	f001 fb2f 	bl	4aec <xTaskGetTickCount>
    348e:	6178      	str	r0, [r7, #20]
        */
        //vPrintNumber( ( xMyFlag + 10 ) * 3 );

        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        if( xCurrentTime > xDatas[0].xNextPeriod )
    3490:	69bb      	ldr	r3, [r7, #24]
    3492:	681a      	ldr	r2, [r3, #0]
    3494:	697b      	ldr	r3, [r7, #20]
    3496:	429a      	cmp	r2, r3
    3498:	d20a      	bcs.n	34b0 <vSensor+0x1bc>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    349a:	69bb      	ldr	r3, [r7, #24]
    349c:	681b      	ldr	r3, [r3, #0]
    349e:	4618      	mov	r0, r3
    34a0:	f013 fbfe 	bl	16ca0 <vPrintNumber>

            vPrintString("there are sensor missing deadline\n\r");
    34a4:	f248 1010 	movw	r0, #33040	; 0x8110
    34a8:	f2c0 0001 	movt	r0, #1
    34ac:	f013 fbde 	bl	16c6c <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    34b0:	f240 3380 	movw	r3, #896	; 0x380
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	68db      	ldr	r3, [r3, #12]
    34ba:	4618      	mov	r0, r3
    34bc:	2100      	movs	r1, #0
    34be:	2200      	movs	r2, #0
    34c0:	2300      	movs	r3, #0
    34c2:	f000 fb99 	bl	3bf8 <xQueueGenericSend>
    }
    34c6:	e77e      	b.n	33c6 <vSensor+0xd2>

000034c8 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    34c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34cc:	b093      	sub	sp, #76	; 0x4c
    34ce:	af00      	add	r7, sp, #0
    34d0:	6178      	str	r0, [r7, #20]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    34d2:	6979      	ldr	r1, [r7, #20]
    34d4:	6439      	str	r1, [r7, #64]	; 0x40
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    34d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34d8:	6849      	ldr	r1, [r1, #4]
    34da:	63f9      	str	r1, [r7, #60]	; 0x3c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    34dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34de:	6889      	ldr	r1, [r1, #8]
    34e0:	63b9      	str	r1, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34e4:	6809      	ldr	r1, [r1, #0]
    34e6:	6379      	str	r1, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
    34ea:	6e49      	ldr	r1, [r1, #100]	; 0x64
    34ec:	6339      	str	r1, [r7, #48]	; 0x30

    xEventHandle pxEvent[xNumOfIn];
    34ee:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    34f0:	1e71      	subs	r1, r6, #1
    34f2:	62f9      	str	r1, [r7, #44]	; 0x2c
    34f4:	4631      	mov	r1, r6
    34f6:	4608      	mov	r0, r1
    34f8:	f04f 0100 	mov.w	r1, #0
    34fc:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    3500:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3504:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3508:	4631      	mov	r1, r6
    350a:	4608      	mov	r0, r1
    350c:	f04f 0100 	mov.w	r1, #0
    3510:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3514:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3518:	ea4f 1840 	mov.w	r8, r0, lsl #5
    351c:	4631      	mov	r1, r6
    351e:	0089      	lsls	r1, r1, #2
    3520:	3103      	adds	r1, #3
    3522:	3107      	adds	r1, #7
    3524:	08c9      	lsrs	r1, r1, #3
    3526:	00c9      	lsls	r1, r1, #3
    3528:	ebad 0d01 	sub.w	sp, sp, r1
    352c:	4669      	mov	r1, sp
    352e:	3103      	adds	r1, #3
    3530:	0889      	lsrs	r1, r1, #2
    3532:	0089      	lsls	r1, r1, #2
    3534:	62b9      	str	r1, [r7, #40]	; 0x28
    struct eventData xDatas[xNumOfOut];
    3536:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3538:	1e71      	subs	r1, r6, #1
    353a:	6279      	str	r1, [r7, #36]	; 0x24
    353c:	4631      	mov	r1, r6
    353e:	4608      	mov	r0, r1
    3540:	f04f 0100 	mov.w	r1, #0
    3544:	01cd      	lsls	r5, r1, #7
    3546:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    354a:	01c4      	lsls	r4, r0, #7
    354c:	4631      	mov	r1, r6
    354e:	4608      	mov	r0, r1
    3550:	f04f 0100 	mov.w	r1, #0
    3554:	01cb      	lsls	r3, r1, #7
    3556:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    355a:	01c2      	lsls	r2, r0, #7
    355c:	4633      	mov	r3, r6
    355e:	011b      	lsls	r3, r3, #4
    3560:	3303      	adds	r3, #3
    3562:	3307      	adds	r3, #7
    3564:	08db      	lsrs	r3, r3, #3
    3566:	00db      	lsls	r3, r3, #3
    3568:	ebad 0d03 	sub.w	sp, sp, r3
    356c:	466b      	mov	r3, sp
    356e:	3303      	adds	r3, #3
    3570:	089b      	lsrs	r3, r3, #2
    3572:	009b      	lsls	r3, r3, #2
    3574:	623b      	str	r3, [r7, #32]

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    357a:	61fb      	str	r3, [r7, #28]
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    357c:	f240 3390 	movw	r3, #912	; 0x390
    3580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    358a:	4618      	mov	r0, r3
    358c:	69f9      	ldr	r1, [r7, #28]
    358e:	f001 ff55 	bl	543c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    3592:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3594:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3596:	4619      	mov	r1, r3
    3598:	f7ff fd90 	bl	30bc <vEventReceiveAll>

        //vPrintNumber(xMyFlag);

        xCurrentTime = xTaskGetTickCount();
    359c:	f001 faa6 	bl	4aec <xTaskGetTickCount>
    35a0:	61b8      	str	r0, [r7, #24]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35a2:	f240 3390 	movw	r3, #912	; 0x390
    35a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35b0:	4618      	mov	r0, r3
    35b2:	69b9      	ldr	r1, [r7, #24]
    35b4:	f001 ff34 	bl	5420 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    35b8:	2300      	movs	r3, #0
    35ba:	647b      	str	r3, [r7, #68]	; 0x44
    35bc:	e01c      	b.n	35f8 <vServant+0x130>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    35be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35c6:	6a39      	ldr	r1, [r7, #32]
    35c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35ca:	0112      	lsls	r2, r2, #4
    35cc:	188c      	adds	r4, r1, r2
    35ce:	463a      	mov	r2, r7
    35d0:	4610      	mov	r0, r2
    35d2:	4619      	mov	r1, r3
    35d4:	f7ff fa0a 	bl	29ec <xEventGetxData>
    35d8:	463b      	mov	r3, r7
    35da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    35dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    35e0:	69ba      	ldr	r2, [r7, #24]
    35e2:	69fb      	ldr	r3, [r7, #28]
    35e4:	441a      	add	r2, r3
    35e6:	6a39      	ldr	r1, [r7, #32]
    35e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35ea:	011b      	lsls	r3, r3, #4
    35ec:	440b      	add	r3, r1
    35ee:	3304      	adds	r3, #4
    35f0:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCount();
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    35f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    35f4:	3301      	adds	r3, #1
    35f6:	647b      	str	r3, [r7, #68]	; 0x44
    35f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    35fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35fc:	429a      	cmp	r2, r3
    35fe:	dbde      	blt.n	35be <vServant+0xf6>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    3600:	2300      	movs	r3, #0
    3602:	647b      	str	r3, [r7, #68]	; 0x44
    3604:	e002      	b.n	360c <vServant+0x144>
    3606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3608:	3301      	adds	r3, #1
    360a:	647b      	str	r3, [r7, #68]	; 0x44
    360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    360e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    3612:	dbf8      	blt.n	3606 <vServant+0x13e>
        {
            //xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3614:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3616:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3618:	4619      	mov	r1, r3
    361a:	f7ff fdcb 	bl	31b4 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    361e:	6a3b      	ldr	r3, [r7, #32]
    3620:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3622:	4619      	mov	r1, r3
    3624:	f7ff fde4 	bl	31f0 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3628:	6a3b      	ldr	r3, [r7, #32]
    362a:	681a      	ldr	r2, [r3, #0]
    362c:	69bb      	ldr	r3, [r7, #24]
    362e:	429a      	cmp	r2, r3
    3630:	d210      	bcs.n	3654 <vServant+0x18c>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3632:	6a3b      	ldr	r3, [r7, #32]
    3634:	681b      	ldr	r3, [r3, #0]
    3636:	4618      	mov	r0, r3
    3638:	f013 fb32 	bl	16ca0 <vPrintNumber>
            vPrintNumber(xCurrentTime);
    363c:	69b8      	ldr	r0, [r7, #24]
    363e:	f013 fb2f 	bl	16ca0 <vPrintNumber>
            vPrintNumber(xMyFlag);
    3642:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3644:	f013 fb2c 	bl	16ca0 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    3648:	f248 1034 	movw	r0, #33076	; 0x8134
    364c:	f2c0 0001 	movt	r0, #1
    3650:	f013 fb0c 	bl	16c6c <vPrintString>
        }

        vTaskDelayLET();
    3654:	f7ff fd12 	bl	307c <vTaskDelayLET>

        xCurrentTime = xTaskGetTickCount();
    3658:	f001 fa48 	bl	4aec <xTaskGetTickCount>
    365c:	61b8      	str	r0, [r7, #24]
        */
        //vPrintNumber( (xMyFlag + 10) * 3 );


        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    365e:	f240 3380 	movw	r3, #896	; 0x380
    3662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3666:	68db      	ldr	r3, [r3, #12]
    3668:	4618      	mov	r0, r3
    366a:	2100      	movs	r1, #0
    366c:	2200      	movs	r2, #0
    366e:	2300      	movs	r3, #0
    3670:	f000 fac2 	bl	3bf8 <xQueueGenericSend>
        
    }
    3674:	e78d      	b.n	3592 <vServant+0xca>
    3676:	bf00      	nop

00003678 <vR_Servant>:
}

void vR_Servant( void * pvParameter)
{
    3678:	b580      	push	{r7, lr}
    367a:	b090      	sub	sp, #64	; 0x40
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3684:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    368e:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3690:	f240 3390 	movw	r3, #912	; 0x390
    3694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    369e:	4618      	mov	r0, r3
    36a0:	6a39      	ldr	r1, [r7, #32]
    36a2:	f001 fecb 	bl	543c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    36a6:	f240 3380 	movw	r3, #896	; 0x380
    36aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36b4:	4618      	mov	r0, r3
    36b6:	2100      	movs	r1, #0
    36b8:	f04f 32ff 	mov.w	r2, #4294967295
    36bc:	2300      	movs	r3, #0
    36be:	f000 fb61 	bl	3d84 <xQueueGenericReceive>

        vPrintNumber( xMyFlag );
    36c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    36c4:	f013 faec 	bl	16ca0 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
    36c8:	f001 fa10 	bl	4aec <xTaskGetTickCount>
    36cc:	61f8      	str	r0, [r7, #28]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36ce:	f240 3390 	movw	r3, #912	; 0x390
    36d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36dc:	4618      	mov	r0, r3
    36de:	69f9      	ldr	r1, [r7, #28]
    36e0:	f001 fe9e 	bl	5420 <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    36e4:	2300      	movs	r3, #0
    36e6:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    36e8:	e094      	b.n	3814 <vR_Servant+0x19c>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    36ea:	f107 030c 	add.w	r3, r7, #12
    36ee:	4618      	mov	r0, r3
    36f0:	f240 11cc 	movw	r1, #460	; 0x1cc
    36f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    36f8:	f7ff fac2 	bl	2c80 <xEventListGenericTransit>
    36fc:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    36fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3700:	f1b3 3fff 	cmp.w	r3, #4294967295
    3704:	d100      	bne.n	3708 <vR_Servant+0x90>
            {
                // no event
                break;
    3706:	e089      	b.n	381c <vR_Servant+0x1a4>
            }
            else if( xResult == 0 )
    3708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    370a:	2b00      	cmp	r3, #0
    370c:	d100      	bne.n	3710 <vR_Servant+0x98>
            {
                // not time yet
                break;
    370e:	e085      	b.n	381c <vR_Servant+0x1a4>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	68db      	ldr	r3, [r3, #12]
    3714:	4618      	mov	r0, r3
    3716:	f7ff f94b 	bl	29b0 <xEventGetpxDestination>
    371a:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    371c:	68fb      	ldr	r3, [r7, #12]
    371e:	68db      	ldr	r3, [r3, #12]
    3720:	4618      	mov	r0, r3
    3722:	f7ff f939 	bl	2998 <xEventGetpxSource>
    3726:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3728:	2301      	movs	r3, #1
    372a:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    372c:	2300      	movs	r3, #0
    372e:	63fb      	str	r3, [r7, #60]	; 0x3c
    3730:	e068      	b.n	3804 <vR_Servant+0x18c>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3732:	f240 0240 	movw	r2, #64	; 0x40
    3736:	f2c2 0200 	movt	r2, #8192	; 0x2000
    373a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    373c:	460b      	mov	r3, r1
    373e:	005b      	lsls	r3, r3, #1
    3740:	440b      	add	r3, r1
    3742:	009b      	lsls	r3, r3, #2
    3744:	4413      	add	r3, r2
    3746:	3304      	adds	r3, #4
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    374c:	f240 0240 	movw	r2, #64	; 0x40
    3750:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3756:	460b      	mov	r3, r1
    3758:	005b      	lsls	r3, r3, #1
    375a:	440b      	add	r3, r1
    375c:	009b      	lsls	r3, r3, #2
    375e:	4413      	add	r3, r2
    3760:	3308      	adds	r3, #8
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3766:	f240 3390 	movw	r3, #912	; 0x390
    376a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    376e:	693a      	ldr	r2, [r7, #16]
    3770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3776:	429a      	cmp	r2, r3
    3778:	d141      	bne.n	37fe <vR_Servant+0x186>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    377a:	f240 3390 	movw	r3, #912	; 0x390
    377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3782:	697a      	ldr	r2, [r7, #20]
    3784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3788:	69bb      	ldr	r3, [r7, #24]
    378a:	429a      	cmp	r2, r3
    378c:	d127      	bne.n	37de <vR_Servant+0x166>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    378e:	f240 0240 	movw	r2, #64	; 0x40
    3792:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3798:	460b      	mov	r3, r1
    379a:	005b      	lsls	r3, r3, #1
    379c:	440b      	add	r3, r1
    379e:	009b      	lsls	r3, r3, #2
    37a0:	4413      	add	r3, r2
    37a2:	330c      	adds	r3, #12
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	2b02      	cmp	r3, #2
    37a8:	d10b      	bne.n	37c2 <vR_Servant+0x14a>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    37aa:	f248 105c 	movw	r0, #33116	; 0x815c
    37ae:	f2c0 0001 	movt	r0, #1
    37b2:	f013 fa5b 	bl	16c6c <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	68db      	ldr	r3, [r3, #12]
    37ba:	4618      	mov	r0, r3
    37bc:	f7ff fb12 	bl	2de4 <vEventGenericDelete>
    37c0:	e01d      	b.n	37fe <vR_Servant+0x186>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    37c2:	f240 0240 	movw	r2, #64	; 0x40
    37c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37cc:	460b      	mov	r3, r1
    37ce:	005b      	lsls	r3, r3, #1
    37d0:	440b      	add	r3, r1
    37d2:	009b      	lsls	r3, r3, #2
    37d4:	4413      	add	r3, r2
    37d6:	330c      	adds	r3, #12
    37d8:	2202      	movs	r2, #2
    37da:	601a      	str	r2, [r3, #0]
    37dc:	e00f      	b.n	37fe <vR_Servant+0x186>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    37de:	f240 0240 	movw	r2, #64	; 0x40
    37e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37e8:	460b      	mov	r3, r1
    37ea:	005b      	lsls	r3, r3, #1
    37ec:	440b      	add	r3, r1
    37ee:	009b      	lsls	r3, r3, #2
    37f0:	4413      	add	r3, r2
    37f2:	330c      	adds	r3, #12
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	2b01      	cmp	r3, #1
    37f8:	d101      	bne.n	37fe <vR_Servant+0x186>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    37fa:	2300      	movs	r3, #0
    37fc:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3800:	3301      	adds	r3, #1
    3802:	63fb      	str	r3, [r7, #60]	; 0x3c
    3804:	f240 0340 	movw	r3, #64	; 0x40
    3808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    380c:	681a      	ldr	r2, [r3, #0]
    380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3810:	429a      	cmp	r2, r3
    3812:	dc8e      	bgt.n	3732 <vR_Servant+0xba>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3816:	2b00      	cmp	r3, #0
    3818:	f43f af67 	beq.w	36ea <vR_Servant+0x72>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    381e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3822:	d100      	bne.n	3826 <vR_Servant+0x1ae>
        {
            //vTaskDelayLET();
            continue; 
    3824:	e057      	b.n	38d6 <vR_Servant+0x25e>
        }
        else if ( xResult == 0 )
    3826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3828:	2b00      	cmp	r3, #0
    382a:	d109      	bne.n	3840 <vR_Servant+0x1c8>
        {
            //vTaskDelayLET();
            vPrintNumber( (xMyFlag + 10) * 3 );
    382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    382e:	f103 020a 	add.w	r2, r3, #10
    3832:	4613      	mov	r3, r2
    3834:	005b      	lsls	r3, r3, #1
    3836:	4413      	add	r3, r2
    3838:	4618      	mov	r0, r3
    383a:	f013 fa31 	bl	16ca0 <vPrintNumber>
            //vPrintString("not time yet\n\r");
            continue;
    383e:	e04a      	b.n	38d6 <vR_Servant+0x25e>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3840:	2300      	movs	r3, #0
    3842:	63fb      	str	r3, [r7, #60]	; 0x3c
    3844:	e028      	b.n	3898 <vR_Servant+0x220>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3846:	f240 0240 	movw	r2, #64	; 0x40
    384a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    384e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3850:	460b      	mov	r3, r1
    3852:	005b      	lsls	r3, r3, #1
    3854:	440b      	add	r3, r1
    3856:	009b      	lsls	r3, r3, #2
    3858:	4413      	add	r3, r2
    385a:	3308      	adds	r3, #8
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3860:	f240 3390 	movw	r3, #912	; 0x390
    3864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3868:	693a      	ldr	r2, [r7, #16]
    386a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3870:	429a      	cmp	r2, r3
    3872:	d10e      	bne.n	3892 <vR_Servant+0x21a>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3874:	f240 0240 	movw	r2, #64	; 0x40
    3878:	f2c2 0200 	movt	r2, #8192	; 0x2000
    387c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    387e:	460b      	mov	r3, r1
    3880:	005b      	lsls	r3, r3, #1
    3882:	440b      	add	r3, r1
    3884:	009b      	lsls	r3, r3, #2
    3886:	4413      	add	r3, r2
    3888:	330c      	adds	r3, #12
    388a:	2201      	movs	r2, #1
    388c:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    388e:	693b      	ldr	r3, [r7, #16]
    3890:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3894:	3301      	adds	r3, #1
    3896:	63fb      	str	r3, [r7, #60]	; 0x3c
    3898:	f240 0340 	movw	r3, #64	; 0x40
    389c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38a0:	681a      	ldr	r2, [r3, #0]
    38a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38a4:	429a      	cmp	r2, r3
    38a6:	dcce      	bgt.n	3846 <vR_Servant+0x1ce>
                }
            }

            //vTaskDelayLET();

            vPrintNumber( (xMyFlag + 10) * 3 );
    38a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38aa:	f103 020a 	add.w	r2, r3, #10
    38ae:	4613      	mov	r3, r2
    38b0:	005b      	lsls	r3, r3, #1
    38b2:	4413      	add	r3, r2
    38b4:	4618      	mov	r0, r3
    38b6:	f013 f9f3 	bl	16ca0 <vPrintNumber>

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    38ba:	f240 3380 	movw	r3, #896	; 0x380
    38be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    38c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38c8:	4618      	mov	r0, r3
    38ca:	2100      	movs	r1, #0
    38cc:	2200      	movs	r2, #0
    38ce:	2300      	movs	r3, #0
    38d0:	f000 f992 	bl	3bf8 <xQueueGenericSend>
        }
    }
    38d4:	e6e7      	b.n	36a6 <vR_Servant+0x2e>
    38d6:	e6e6      	b.n	36a6 <vR_Servant+0x2e>

000038d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    38d8:	b480      	push	{r7}
    38da:	b083      	sub	sp, #12
    38dc:	af00      	add	r7, sp, #0
    38de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	f103 0208 	add.w	r2, r3, #8
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	f04f 32ff 	mov.w	r2, #4294967295
    38f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	f103 0208 	add.w	r2, r3, #8
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	f103 0208 	add.w	r2, r3, #8
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	2200      	movs	r2, #0
    390a:	601a      	str	r2, [r3, #0]
}
    390c:	370c      	adds	r7, #12
    390e:	46bd      	mov	sp, r7
    3910:	f85d 7b04 	ldr.w	r7, [sp], #4
    3914:	4770      	bx	lr
    3916:	bf00      	nop

00003918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3918:	b480      	push	{r7}
    391a:	b083      	sub	sp, #12
    391c:	af00      	add	r7, sp, #0
    391e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3920:	687b      	ldr	r3, [r7, #4]
    3922:	2200      	movs	r2, #0
    3924:	611a      	str	r2, [r3, #16]
}
    3926:	370c      	adds	r7, #12
    3928:	46bd      	mov	sp, r7
    392a:	f85d 7b04 	ldr.w	r7, [sp], #4
    392e:	4770      	bx	lr

00003930 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3930:	b480      	push	{r7}
    3932:	b085      	sub	sp, #20
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
    3938:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	685b      	ldr	r3, [r3, #4]
    393e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	685a      	ldr	r2, [r3, #4]
    3944:	683b      	ldr	r3, [r7, #0]
    3946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	685a      	ldr	r2, [r3, #4]
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	685b      	ldr	r3, [r3, #4]
    3954:	683a      	ldr	r2, [r7, #0]
    3956:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	683a      	ldr	r2, [r7, #0]
    395c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	683a      	ldr	r2, [r7, #0]
    3962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3964:	683b      	ldr	r3, [r7, #0]
    3966:	687a      	ldr	r2, [r7, #4]
    3968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	1c5a      	adds	r2, r3, #1
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	601a      	str	r2, [r3, #0]
}
    3974:	3714      	adds	r7, #20
    3976:	46bd      	mov	sp, r7
    3978:	f85d 7b04 	ldr.w	r7, [sp], #4
    397c:	4770      	bx	lr
    397e:	bf00      	nop

00003980 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3980:	b480      	push	{r7}
    3982:	b085      	sub	sp, #20
    3984:	af00      	add	r7, sp, #0
    3986:	6078      	str	r0, [r7, #4]
    3988:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    398a:	683b      	ldr	r3, [r7, #0]
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3990:	68bb      	ldr	r3, [r7, #8]
    3992:	f1b3 3fff 	cmp.w	r3, #4294967295
    3996:	d103      	bne.n	39a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	691b      	ldr	r3, [r3, #16]
    399c:	60fb      	str	r3, [r7, #12]
    399e:	e00c      	b.n	39ba <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	3308      	adds	r3, #8
    39a4:	60fb      	str	r3, [r7, #12]
    39a6:	e002      	b.n	39ae <vListInsert+0x2e>
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	685b      	ldr	r3, [r3, #4]
    39ac:	60fb      	str	r3, [r7, #12]
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	685b      	ldr	r3, [r3, #4]
    39b2:	681a      	ldr	r2, [r3, #0]
    39b4:	68bb      	ldr	r3, [r7, #8]
    39b6:	429a      	cmp	r2, r3
    39b8:	d9f6      	bls.n	39a8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    39ba:	68fb      	ldr	r3, [r7, #12]
    39bc:	685a      	ldr	r2, [r3, #4]
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    39c2:	683b      	ldr	r3, [r7, #0]
    39c4:	685b      	ldr	r3, [r3, #4]
    39c6:	683a      	ldr	r2, [r7, #0]
    39c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    39ca:	683b      	ldr	r3, [r7, #0]
    39cc:	68fa      	ldr	r2, [r7, #12]
    39ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	683a      	ldr	r2, [r7, #0]
    39d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	687a      	ldr	r2, [r7, #4]
    39da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	681b      	ldr	r3, [r3, #0]
    39e0:	1c5a      	adds	r2, r3, #1
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	601a      	str	r2, [r3, #0]
}
    39e6:	3714      	adds	r7, #20
    39e8:	46bd      	mov	sp, r7
    39ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ee:	4770      	bx	lr

000039f0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    39f0:	b480      	push	{r7}
    39f2:	b085      	sub	sp, #20
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	685b      	ldr	r3, [r3, #4]
    39fc:	687a      	ldr	r2, [r7, #4]
    39fe:	6892      	ldr	r2, [r2, #8]
    3a00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	689b      	ldr	r3, [r3, #8]
    3a06:	687a      	ldr	r2, [r7, #4]
    3a08:	6852      	ldr	r2, [r2, #4]
    3a0a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	691b      	ldr	r3, [r3, #16]
    3a10:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	685a      	ldr	r2, [r3, #4]
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	429a      	cmp	r2, r3
    3a1a:	d103      	bne.n	3a24 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	689a      	ldr	r2, [r3, #8]
    3a20:	68fb      	ldr	r3, [r7, #12]
    3a22:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	2200      	movs	r2, #0
    3a28:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	1e5a      	subs	r2, r3, #1
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	601a      	str	r2, [r3, #0]
}
    3a34:	3714      	adds	r7, #20
    3a36:	46bd      	mov	sp, r7
    3a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop

00003a40 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3a40:	b580      	push	{r7, lr}
    3a42:	b084      	sub	sp, #16
    3a44:	af00      	add	r7, sp, #0
    3a46:	6078      	str	r0, [r7, #4]
    3a48:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3a4a:	2301      	movs	r3, #1
    3a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3a4e:	683b      	ldr	r3, [r7, #0]
    3a50:	2b01      	cmp	r3, #1
    3a52:	d00b      	beq.n	3a6c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d001      	beq.n	3a60 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3a5c:	2300      	movs	r3, #0
    3a5e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	691b      	ldr	r3, [r3, #16]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d001      	beq.n	3a6c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3a68:	2300      	movs	r3, #0
    3a6a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	2b01      	cmp	r3, #1
    3a70:	d12f      	bne.n	3ad2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	681a      	ldr	r2, [r3, #0]
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3a7a:	6879      	ldr	r1, [r7, #4]
    3a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3a7e:	fb01 f303 	mul.w	r3, r1, r3
    3a82:	441a      	add	r2, r3
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	2200      	movs	r2, #0
    3a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	681a      	ldr	r2, [r3, #0]
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	681a      	ldr	r2, [r3, #0]
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3a9e:	3b01      	subs	r3, #1
    3aa0:	6879      	ldr	r1, [r7, #4]
    3aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3aa4:	fb01 f303 	mul.w	r3, r1, r3
    3aa8:	441a      	add	r2, r3
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	f04f 32ff 	mov.w	r2, #4294967295
    3ab4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	f04f 32ff 	mov.w	r2, #4294967295
    3abc:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	3310      	adds	r3, #16
    3ac2:	4618      	mov	r0, r3
    3ac4:	f7ff ff08 	bl	38d8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3ac8:	687b      	ldr	r3, [r7, #4]
    3aca:	3324      	adds	r3, #36	; 0x24
    3acc:	4618      	mov	r0, r3
    3ace:	f7ff ff03 	bl	38d8 <vListInitialise>
	}

	return xReturn;
    3ad2:	68fb      	ldr	r3, [r7, #12]
}
    3ad4:	4618      	mov	r0, r3
    3ad6:	3710      	adds	r7, #16
    3ad8:	46bd      	mov	sp, r7
    3ada:	bd80      	pop	{r7, pc}

00003adc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b088      	sub	sp, #32
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	60f8      	str	r0, [r7, #12]
    3ae4:	60b9      	str	r1, [r7, #8]
    3ae6:	4613      	mov	r3, r2
    3ae8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3aea:	2300      	movs	r3, #0
    3aec:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3aee:	68fb      	ldr	r3, [r7, #12]
    3af0:	2b00      	cmp	r3, #0
    3af2:	d026      	beq.n	3b42 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3af4:	204c      	movs	r0, #76	; 0x4c
    3af6:	f001 fda7 	bl	5648 <pvPortMalloc>
    3afa:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3afc:	69bb      	ldr	r3, [r7, #24]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d01f      	beq.n	3b42 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	68ba      	ldr	r2, [r7, #8]
    3b06:	fb02 f303 	mul.w	r3, r2, r3
    3b0a:	3301      	adds	r3, #1
    3b0c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3b0e:	6978      	ldr	r0, [r7, #20]
    3b10:	f001 fd9a 	bl	5648 <pvPortMalloc>
    3b14:	4602      	mov	r2, r0
    3b16:	69bb      	ldr	r3, [r7, #24]
    3b18:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3b1a:	69bb      	ldr	r3, [r7, #24]
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d00c      	beq.n	3b3c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3b22:	69bb      	ldr	r3, [r7, #24]
    3b24:	68fa      	ldr	r2, [r7, #12]
    3b26:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3b28:	69bb      	ldr	r3, [r7, #24]
    3b2a:	68ba      	ldr	r2, [r7, #8]
    3b2c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3b2e:	69b8      	ldr	r0, [r7, #24]
    3b30:	2101      	movs	r1, #1
    3b32:	f7ff ff85 	bl	3a40 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3b36:	69bb      	ldr	r3, [r7, #24]
    3b38:	61fb      	str	r3, [r7, #28]
    3b3a:	e002      	b.n	3b42 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3b3c:	69b8      	ldr	r0, [r7, #24]
    3b3e:	f001 fe47 	bl	57d0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3b42:	69fb      	ldr	r3, [r7, #28]
}
    3b44:	4618      	mov	r0, r3
    3b46:	3720      	adds	r7, #32
    3b48:	46bd      	mov	sp, r7
    3b4a:	bd80      	pop	{r7, pc}

00003b4c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b084      	sub	sp, #16
    3b50:	af00      	add	r7, sp, #0
    3b52:	4603      	mov	r3, r0
    3b54:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3b56:	204c      	movs	r0, #76	; 0x4c
    3b58:	f001 fd76 	bl	5648 <pvPortMalloc>
    3b5c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3b5e:	68fb      	ldr	r3, [r7, #12]
    3b60:	2b00      	cmp	r3, #0
    3b62:	d02c      	beq.n	3bbe <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3b64:	68fb      	ldr	r3, [r7, #12]
    3b66:	2200      	movs	r2, #0
    3b68:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	2200      	movs	r2, #0
    3b6e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3b70:	68fb      	ldr	r3, [r7, #12]
    3b72:	2200      	movs	r2, #0
    3b74:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	2200      	movs	r2, #0
    3b7a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3b7c:	68fb      	ldr	r3, [r7, #12]
    3b7e:	2200      	movs	r2, #0
    3b80:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3b82:	68fb      	ldr	r3, [r7, #12]
    3b84:	2201      	movs	r2, #1
    3b86:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	2200      	movs	r2, #0
    3b8c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3b8e:	68fb      	ldr	r3, [r7, #12]
    3b90:	f04f 32ff 	mov.w	r2, #4294967295
    3b94:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3b96:	68fb      	ldr	r3, [r7, #12]
    3b98:	f04f 32ff 	mov.w	r2, #4294967295
    3b9c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3b9e:	68fb      	ldr	r3, [r7, #12]
    3ba0:	3310      	adds	r3, #16
    3ba2:	4618      	mov	r0, r3
    3ba4:	f7ff fe98 	bl	38d8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	3324      	adds	r3, #36	; 0x24
    3bac:	4618      	mov	r0, r3
    3bae:	f7ff fe93 	bl	38d8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3bb2:	68f8      	ldr	r0, [r7, #12]
    3bb4:	2100      	movs	r1, #0
    3bb6:	2200      	movs	r2, #0
    3bb8:	2300      	movs	r3, #0
    3bba:	f000 f81d 	bl	3bf8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3bbe:	68fb      	ldr	r3, [r7, #12]
	}
    3bc0:	4618      	mov	r0, r3
    3bc2:	3710      	adds	r7, #16
    3bc4:	46bd      	mov	sp, r7
    3bc6:	bd80      	pop	{r7, pc}

00003bc8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3bc8:	b580      	push	{r7, lr}
    3bca:	b084      	sub	sp, #16
    3bcc:	af00      	add	r7, sp, #0
    3bce:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3bd0:	f001 fcc0 	bl	5554 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d103      	bne.n	3be4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	685b      	ldr	r3, [r3, #4]
    3be0:	60fb      	str	r3, [r7, #12]
    3be2:	e001      	b.n	3be8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3be4:	2300      	movs	r3, #0
    3be6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3be8:	f001 fcca 	bl	5580 <vPortExitCritical>
		
		return pxReturn;
    3bec:	68fb      	ldr	r3, [r7, #12]
	}
    3bee:	4618      	mov	r0, r3
    3bf0:	3710      	adds	r7, #16
    3bf2:	46bd      	mov	sp, r7
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	bf00      	nop

00003bf8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b088      	sub	sp, #32
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	60f8      	str	r0, [r7, #12]
    3c00:	60b9      	str	r1, [r7, #8]
    3c02:	607a      	str	r2, [r7, #4]
    3c04:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3c06:	2300      	movs	r3, #0
    3c08:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3c0a:	f001 fca3 	bl	5554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3c12:	68fb      	ldr	r3, [r7, #12]
    3c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3c16:	429a      	cmp	r2, r3
    3c18:	d216      	bcs.n	3c48 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3c1a:	68f8      	ldr	r0, [r7, #12]
    3c1c:	68b9      	ldr	r1, [r7, #8]
    3c1e:	683a      	ldr	r2, [r7, #0]
    3c20:	f000 f9d6 	bl	3fd0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c24:	68fb      	ldr	r3, [r7, #12]
    3c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d009      	beq.n	3c40 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3c2c:	68fb      	ldr	r3, [r7, #12]
    3c2e:	3324      	adds	r3, #36	; 0x24
    3c30:	4618      	mov	r0, r3
    3c32:	f001 f905 	bl	4e40 <xTaskRemoveFromEventList>
    3c36:	4603      	mov	r3, r0
    3c38:	2b01      	cmp	r3, #1
    3c3a:	d101      	bne.n	3c40 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3c3c:	f001 fc7c 	bl	5538 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3c40:	f001 fc9e 	bl	5580 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3c44:	2301      	movs	r3, #1
    3c46:	e059      	b.n	3cfc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d103      	bne.n	3c56 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3c4e:	f001 fc97 	bl	5580 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3c52:	2300      	movs	r3, #0
    3c54:	e052      	b.n	3cfc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3c56:	69fb      	ldr	r3, [r7, #28]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d106      	bne.n	3c6a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3c5c:	f107 0314 	add.w	r3, r7, #20
    3c60:	4618      	mov	r0, r3
    3c62:	f001 f945 	bl	4ef0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3c66:	2301      	movs	r3, #1
    3c68:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3c6a:	f001 fc89 	bl	5580 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3c6e:	f000 fe93 	bl	4998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3c72:	f001 fc6f 	bl	5554 <vPortEnterCritical>
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c7e:	d102      	bne.n	3c86 <xQueueGenericSend+0x8e>
    3c80:	68fb      	ldr	r3, [r7, #12]
    3c82:	2200      	movs	r2, #0
    3c84:	645a      	str	r2, [r3, #68]	; 0x44
    3c86:	68fb      	ldr	r3, [r7, #12]
    3c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c8e:	d102      	bne.n	3c96 <xQueueGenericSend+0x9e>
    3c90:	68fb      	ldr	r3, [r7, #12]
    3c92:	2200      	movs	r2, #0
    3c94:	649a      	str	r2, [r3, #72]	; 0x48
    3c96:	f001 fc73 	bl	5580 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c9a:	f107 0214 	add.w	r2, r7, #20
    3c9e:	1d3b      	adds	r3, r7, #4
    3ca0:	4610      	mov	r0, r2
    3ca2:	4619      	mov	r1, r3
    3ca4:	f001 f93c 	bl	4f20 <xTaskCheckForTimeOut>
    3ca8:	4603      	mov	r3, r0
    3caa:	2b00      	cmp	r3, #0
    3cac:	d11e      	bne.n	3cec <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3cae:	68f8      	ldr	r0, [r7, #12]
    3cb0:	f000 fa86 	bl	41c0 <prvIsQueueFull>
    3cb4:	4603      	mov	r3, r0
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d012      	beq.n	3ce0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	f103 0210 	add.w	r2, r3, #16
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	4610      	mov	r0, r2
    3cc4:	4619      	mov	r1, r3
    3cc6:	f001 f883 	bl	4dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3cca:	68f8      	ldr	r0, [r7, #12]
    3ccc:	f000 fa02 	bl	40d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3cd0:	f000 fe74 	bl	49bc <xTaskResumeAll>
    3cd4:	4603      	mov	r3, r0
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d10f      	bne.n	3cfa <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3cda:	f001 fc2d 	bl	5538 <vPortYieldFromISR>
    3cde:	e00c      	b.n	3cfa <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3ce0:	68f8      	ldr	r0, [r7, #12]
    3ce2:	f000 f9f7 	bl	40d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3ce6:	f000 fe69 	bl	49bc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3cea:	e78e      	b.n	3c0a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3cec:	68f8      	ldr	r0, [r7, #12]
    3cee:	f000 f9f1 	bl	40d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3cf2:	f000 fe63 	bl	49bc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3cf6:	2300      	movs	r3, #0
    3cf8:	e000      	b.n	3cfc <xQueueGenericSend+0x104>
		}
	}
    3cfa:	e786      	b.n	3c0a <xQueueGenericSend+0x12>
}
    3cfc:	4618      	mov	r0, r3
    3cfe:	3720      	adds	r7, #32
    3d00:	46bd      	mov	sp, r7
    3d02:	bd80      	pop	{r7, pc}

00003d04 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b086      	sub	sp, #24
    3d08:	af00      	add	r7, sp, #0
    3d0a:	60f8      	str	r0, [r7, #12]
    3d0c:	60b9      	str	r1, [r7, #8]
    3d0e:	607a      	str	r2, [r7, #4]
    3d10:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d12:	2300      	movs	r3, #0
    3d14:	613b      	str	r3, [r7, #16]
    3d16:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3d1a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3d1e:	68fb      	ldr	r3, [r7, #12]
    3d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3d22:	68fb      	ldr	r3, [r7, #12]
    3d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d26:	429a      	cmp	r2, r3
    3d28:	d221      	bcs.n	3d6e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3d2a:	68f8      	ldr	r0, [r7, #12]
    3d2c:	68b9      	ldr	r1, [r7, #8]
    3d2e:	683a      	ldr	r2, [r7, #0]
    3d30:	f000 f94e 	bl	3fd0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3d34:	68fb      	ldr	r3, [r7, #12]
    3d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d38:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d3c:	d10f      	bne.n	3d5e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d3e:	68fb      	ldr	r3, [r7, #12]
    3d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d42:	2b00      	cmp	r3, #0
    3d44:	d010      	beq.n	3d68 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d46:	68fb      	ldr	r3, [r7, #12]
    3d48:	3324      	adds	r3, #36	; 0x24
    3d4a:	4618      	mov	r0, r3
    3d4c:	f001 f878 	bl	4e40 <xTaskRemoveFromEventList>
    3d50:	4603      	mov	r3, r0
    3d52:	2b00      	cmp	r3, #0
    3d54:	d008      	beq.n	3d68 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	2201      	movs	r2, #1
    3d5a:	601a      	str	r2, [r3, #0]
    3d5c:	e004      	b.n	3d68 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3d5e:	68fb      	ldr	r3, [r7, #12]
    3d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d62:	1c5a      	adds	r2, r3, #1
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3d68:	2301      	movs	r3, #1
    3d6a:	617b      	str	r3, [r7, #20]
    3d6c:	e001      	b.n	3d72 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3d6e:	2300      	movs	r3, #0
    3d70:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3d72:	f04f 0000 	mov.w	r0, #0
    3d76:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3d7a:	697b      	ldr	r3, [r7, #20]
}
    3d7c:	4618      	mov	r0, r3
    3d7e:	3718      	adds	r7, #24
    3d80:	46bd      	mov	sp, r7
    3d82:	bd80      	pop	{r7, pc}

00003d84 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b088      	sub	sp, #32
    3d88:	af00      	add	r7, sp, #0
    3d8a:	60f8      	str	r0, [r7, #12]
    3d8c:	60b9      	str	r1, [r7, #8]
    3d8e:	607a      	str	r2, [r7, #4]
    3d90:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3d92:	2300      	movs	r3, #0
    3d94:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3d96:	f001 fbdd 	bl	5554 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d03b      	beq.n	3e1a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3da2:	68fb      	ldr	r3, [r7, #12]
    3da4:	68db      	ldr	r3, [r3, #12]
    3da6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3da8:	68f8      	ldr	r0, [r7, #12]
    3daa:	68b9      	ldr	r1, [r7, #8]
    3dac:	f000 f96c 	bl	4088 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3db0:	683b      	ldr	r3, [r7, #0]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d11c      	bne.n	3df0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3db6:	68fb      	ldr	r3, [r7, #12]
    3db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dba:	1e5a      	subs	r2, r3, #1
    3dbc:	68fb      	ldr	r3, [r7, #12]
    3dbe:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3dc0:	68fb      	ldr	r3, [r7, #12]
    3dc2:	681b      	ldr	r3, [r3, #0]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d104      	bne.n	3dd2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3dc8:	f001 fa5c 	bl	5284 <xTaskGetCurrentTaskHandle>
    3dcc:	4602      	mov	r2, r0
    3dce:	68fb      	ldr	r3, [r7, #12]
    3dd0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dd2:	68fb      	ldr	r3, [r7, #12]
    3dd4:	691b      	ldr	r3, [r3, #16]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d01b      	beq.n	3e12 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3dda:	68fb      	ldr	r3, [r7, #12]
    3ddc:	3310      	adds	r3, #16
    3dde:	4618      	mov	r0, r3
    3de0:	f001 f82e 	bl	4e40 <xTaskRemoveFromEventList>
    3de4:	4603      	mov	r3, r0
    3de6:	2b01      	cmp	r3, #1
    3de8:	d113      	bne.n	3e12 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    3dea:	f001 fba5 	bl	5538 <vPortYieldFromISR>
    3dee:	e010      	b.n	3e12 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3df0:	68fb      	ldr	r3, [r7, #12]
    3df2:	69ba      	ldr	r2, [r7, #24]
    3df4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d009      	beq.n	3e12 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3dfe:	68fb      	ldr	r3, [r7, #12]
    3e00:	3324      	adds	r3, #36	; 0x24
    3e02:	4618      	mov	r0, r3
    3e04:	f001 f81c 	bl	4e40 <xTaskRemoveFromEventList>
    3e08:	4603      	mov	r3, r0
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d001      	beq.n	3e12 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3e0e:	f001 fb93 	bl	5538 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    3e12:	f001 fbb5 	bl	5580 <vPortExitCritical>
				return pdPASS;
    3e16:	2301      	movs	r3, #1
    3e18:	e066      	b.n	3ee8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	d103      	bne.n	3e28 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3e20:	f001 fbae 	bl	5580 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3e24:	2300      	movs	r3, #0
    3e26:	e05f      	b.n	3ee8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    3e28:	69fb      	ldr	r3, [r7, #28]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d106      	bne.n	3e3c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3e2e:	f107 0310 	add.w	r3, r7, #16
    3e32:	4618      	mov	r0, r3
    3e34:	f001 f85c 	bl	4ef0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3e38:	2301      	movs	r3, #1
    3e3a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3e3c:	f001 fba0 	bl	5580 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3e40:	f000 fdaa 	bl	4998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3e44:	f001 fb86 	bl	5554 <vPortEnterCritical>
    3e48:	68fb      	ldr	r3, [r7, #12]
    3e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e50:	d102      	bne.n	3e58 <xQueueGenericReceive+0xd4>
    3e52:	68fb      	ldr	r3, [r7, #12]
    3e54:	2200      	movs	r2, #0
    3e56:	645a      	str	r2, [r3, #68]	; 0x44
    3e58:	68fb      	ldr	r3, [r7, #12]
    3e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e60:	d102      	bne.n	3e68 <xQueueGenericReceive+0xe4>
    3e62:	68fb      	ldr	r3, [r7, #12]
    3e64:	2200      	movs	r2, #0
    3e66:	649a      	str	r2, [r3, #72]	; 0x48
    3e68:	f001 fb8a 	bl	5580 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e6c:	f107 0210 	add.w	r2, r7, #16
    3e70:	1d3b      	adds	r3, r7, #4
    3e72:	4610      	mov	r0, r2
    3e74:	4619      	mov	r1, r3
    3e76:	f001 f853 	bl	4f20 <xTaskCheckForTimeOut>
    3e7a:	4603      	mov	r3, r0
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d12b      	bne.n	3ed8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e80:	68f8      	ldr	r0, [r7, #12]
    3e82:	f000 f973 	bl	416c <prvIsQueueEmpty>
    3e86:	4603      	mov	r3, r0
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d01f      	beq.n	3ecc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3e8c:	68fb      	ldr	r3, [r7, #12]
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d108      	bne.n	3ea6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    3e94:	f001 fb5e 	bl	5554 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3e98:	68fb      	ldr	r3, [r7, #12]
    3e9a:	685b      	ldr	r3, [r3, #4]
    3e9c:	4618      	mov	r0, r3
    3e9e:	f001 fa01 	bl	52a4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    3ea2:	f001 fb6d 	bl	5580 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3ea6:	68fb      	ldr	r3, [r7, #12]
    3ea8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	4610      	mov	r0, r2
    3eb0:	4619      	mov	r1, r3
    3eb2:	f000 ff8d 	bl	4dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3eb6:	68f8      	ldr	r0, [r7, #12]
    3eb8:	f000 f90c 	bl	40d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3ebc:	f000 fd7e 	bl	49bc <xTaskResumeAll>
    3ec0:	4603      	mov	r3, r0
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d10f      	bne.n	3ee6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    3ec6:	f001 fb37 	bl	5538 <vPortYieldFromISR>
    3eca:	e00c      	b.n	3ee6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3ecc:	68f8      	ldr	r0, [r7, #12]
    3ece:	f000 f901 	bl	40d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3ed2:	f000 fd73 	bl	49bc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3ed6:	e75e      	b.n	3d96 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3ed8:	68f8      	ldr	r0, [r7, #12]
    3eda:	f000 f8fb 	bl	40d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3ede:	f000 fd6d 	bl	49bc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3ee2:	2300      	movs	r3, #0
    3ee4:	e000      	b.n	3ee8 <xQueueGenericReceive+0x164>
		}
	}
    3ee6:	e756      	b.n	3d96 <xQueueGenericReceive+0x12>
}
    3ee8:	4618      	mov	r0, r3
    3eea:	3720      	adds	r7, #32
    3eec:	46bd      	mov	sp, r7
    3eee:	bd80      	pop	{r7, pc}

00003ef0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3ef0:	b580      	push	{r7, lr}
    3ef2:	b086      	sub	sp, #24
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	60f8      	str	r0, [r7, #12]
    3ef8:	60b9      	str	r1, [r7, #8]
    3efa:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3efc:	2300      	movs	r3, #0
    3efe:	613b      	str	r3, [r7, #16]
    3f00:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f04:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3f08:	68fb      	ldr	r3, [r7, #12]
    3f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d025      	beq.n	3f5c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3f10:	68f8      	ldr	r0, [r7, #12]
    3f12:	68b9      	ldr	r1, [r7, #8]
    3f14:	f000 f8b8 	bl	4088 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3f18:	68fb      	ldr	r3, [r7, #12]
    3f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f1c:	1e5a      	subs	r2, r3, #1
    3f1e:	68fb      	ldr	r3, [r7, #12]
    3f20:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f26:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f2a:	d10f      	bne.n	3f4c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f2c:	68fb      	ldr	r3, [r7, #12]
    3f2e:	691b      	ldr	r3, [r3, #16]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d010      	beq.n	3f56 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f34:	68fb      	ldr	r3, [r7, #12]
    3f36:	3310      	adds	r3, #16
    3f38:	4618      	mov	r0, r3
    3f3a:	f000 ff81 	bl	4e40 <xTaskRemoveFromEventList>
    3f3e:	4603      	mov	r3, r0
    3f40:	2b00      	cmp	r3, #0
    3f42:	d008      	beq.n	3f56 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	2201      	movs	r2, #1
    3f48:	601a      	str	r2, [r3, #0]
    3f4a:	e004      	b.n	3f56 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3f4c:	68fb      	ldr	r3, [r7, #12]
    3f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f50:	1c5a      	adds	r2, r3, #1
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    3f56:	2301      	movs	r3, #1
    3f58:	617b      	str	r3, [r7, #20]
    3f5a:	e001      	b.n	3f60 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    3f5c:	2300      	movs	r3, #0
    3f5e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3f60:	f04f 0000 	mov.w	r0, #0
    3f64:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3f68:	697b      	ldr	r3, [r7, #20]
}
    3f6a:	4618      	mov	r0, r3
    3f6c:	3718      	adds	r7, #24
    3f6e:	46bd      	mov	sp, r7
    3f70:	bd80      	pop	{r7, pc}
    3f72:	bf00      	nop

00003f74 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b084      	sub	sp, #16
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3f7c:	f001 faea 	bl	5554 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f84:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3f86:	f001 fafb 	bl	5580 <vPortExitCritical>

	return uxReturn;
    3f8a:	68fb      	ldr	r3, [r7, #12]
}
    3f8c:	4618      	mov	r0, r3
    3f8e:	3710      	adds	r7, #16
    3f90:	46bd      	mov	sp, r7
    3f92:	bd80      	pop	{r7, pc}

00003f94 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3f94:	b480      	push	{r7}
    3f96:	b085      	sub	sp, #20
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3fa0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    3fa2:	68fb      	ldr	r3, [r7, #12]
}
    3fa4:	4618      	mov	r0, r3
    3fa6:	3714      	adds	r7, #20
    3fa8:	46bd      	mov	sp, r7
    3faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fae:	4770      	bx	lr

00003fb0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	b082      	sub	sp, #8
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	4618      	mov	r0, r3
    3fbe:	f001 fc07 	bl	57d0 <vPortFree>
	vPortFree( pxQueue );
    3fc2:	6878      	ldr	r0, [r7, #4]
    3fc4:	f001 fc04 	bl	57d0 <vPortFree>
}
    3fc8:	3708      	adds	r7, #8
    3fca:	46bd      	mov	sp, r7
    3fcc:	bd80      	pop	{r7, pc}
    3fce:	bf00      	nop

00003fd0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b084      	sub	sp, #16
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	60f8      	str	r0, [r7, #12]
    3fd8:	60b9      	str	r1, [r7, #8]
    3fda:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3fdc:	68fb      	ldr	r3, [r7, #12]
    3fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d10c      	bne.n	3ffe <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3fe4:	68fb      	ldr	r3, [r7, #12]
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d145      	bne.n	4078 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3fec:	68fb      	ldr	r3, [r7, #12]
    3fee:	685b      	ldr	r3, [r3, #4]
    3ff0:	4618      	mov	r0, r3
    3ff2:	f001 f9bb 	bl	536c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3ff6:	68fb      	ldr	r3, [r7, #12]
    3ff8:	2200      	movs	r2, #0
    3ffa:	605a      	str	r2, [r3, #4]
    3ffc:	e03c      	b.n	4078 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	2b00      	cmp	r3, #0
    4002:	d11a      	bne.n	403a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4004:	68fb      	ldr	r3, [r7, #12]
    4006:	689a      	ldr	r2, [r3, #8]
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    400c:	4610      	mov	r0, r2
    400e:	68b9      	ldr	r1, [r7, #8]
    4010:	461a      	mov	r2, r3
    4012:	f013 ff71 	bl	17ef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4016:	68fb      	ldr	r3, [r7, #12]
    4018:	689a      	ldr	r2, [r3, #8]
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    401e:	441a      	add	r2, r3
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	689a      	ldr	r2, [r3, #8]
    4028:	68fb      	ldr	r3, [r7, #12]
    402a:	685b      	ldr	r3, [r3, #4]
    402c:	429a      	cmp	r2, r3
    402e:	d323      	bcc.n	4078 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	681a      	ldr	r2, [r3, #0]
    4034:	68fb      	ldr	r3, [r7, #12]
    4036:	609a      	str	r2, [r3, #8]
    4038:	e01e      	b.n	4078 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    403a:	68fb      	ldr	r3, [r7, #12]
    403c:	68da      	ldr	r2, [r3, #12]
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4042:	4610      	mov	r0, r2
    4044:	68b9      	ldr	r1, [r7, #8]
    4046:	461a      	mov	r2, r3
    4048:	f013 ff56 	bl	17ef8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    404c:	68fb      	ldr	r3, [r7, #12]
    404e:	68da      	ldr	r2, [r3, #12]
    4050:	68fb      	ldr	r3, [r7, #12]
    4052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4054:	425b      	negs	r3, r3
    4056:	441a      	add	r2, r3
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	68da      	ldr	r2, [r3, #12]
    4060:	68fb      	ldr	r3, [r7, #12]
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	429a      	cmp	r2, r3
    4066:	d207      	bcs.n	4078 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4068:	68fb      	ldr	r3, [r7, #12]
    406a:	685a      	ldr	r2, [r3, #4]
    406c:	68fb      	ldr	r3, [r7, #12]
    406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4070:	425b      	negs	r3, r3
    4072:	441a      	add	r2, r3
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4078:	68fb      	ldr	r3, [r7, #12]
    407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    407c:	1c5a      	adds	r2, r3, #1
    407e:	68fb      	ldr	r3, [r7, #12]
    4080:	639a      	str	r2, [r3, #56]	; 0x38
}
    4082:	3710      	adds	r7, #16
    4084:	46bd      	mov	sp, r7
    4086:	bd80      	pop	{r7, pc}

00004088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4088:	b580      	push	{r7, lr}
    408a:	b082      	sub	sp, #8
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	681b      	ldr	r3, [r3, #0]
    4096:	2b00      	cmp	r3, #0
    4098:	d019      	beq.n	40ce <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	68da      	ldr	r2, [r3, #12]
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40a2:	441a      	add	r2, r3
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	68da      	ldr	r2, [r3, #12]
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	685b      	ldr	r3, [r3, #4]
    40b0:	429a      	cmp	r2, r3
    40b2:	d303      	bcc.n	40bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	681a      	ldr	r2, [r3, #0]
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	68da      	ldr	r2, [r3, #12]
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40c4:	6838      	ldr	r0, [r7, #0]
    40c6:	4611      	mov	r1, r2
    40c8:	461a      	mov	r2, r3
    40ca:	f013 ff15 	bl	17ef8 <memcpy>
	}
}
    40ce:	3708      	adds	r7, #8
    40d0:	46bd      	mov	sp, r7
    40d2:	bd80      	pop	{r7, pc}

000040d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    40d4:	b580      	push	{r7, lr}
    40d6:	b082      	sub	sp, #8
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    40dc:	f001 fa3a 	bl	5554 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    40e0:	e014      	b.n	410c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    40e6:	2b00      	cmp	r3, #0
    40e8:	d00f      	beq.n	410a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	3324      	adds	r3, #36	; 0x24
    40ee:	4618      	mov	r0, r3
    40f0:	f000 fea6 	bl	4e40 <xTaskRemoveFromEventList>
    40f4:	4603      	mov	r3, r0
    40f6:	2b00      	cmp	r3, #0
    40f8:	d001      	beq.n	40fe <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    40fa:	f000 ff5d 	bl	4fb8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4102:	1e5a      	subs	r2, r3, #1
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	649a      	str	r2, [r3, #72]	; 0x48
    4108:	e000      	b.n	410c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    410a:	e003      	b.n	4114 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4110:	2b00      	cmp	r3, #0
    4112:	dce6      	bgt.n	40e2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	f04f 32ff 	mov.w	r2, #4294967295
    411a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    411c:	f001 fa30 	bl	5580 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4120:	f001 fa18 	bl	5554 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4124:	e014      	b.n	4150 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	691b      	ldr	r3, [r3, #16]
    412a:	2b00      	cmp	r3, #0
    412c:	d00f      	beq.n	414e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	3310      	adds	r3, #16
    4132:	4618      	mov	r0, r3
    4134:	f000 fe84 	bl	4e40 <xTaskRemoveFromEventList>
    4138:	4603      	mov	r3, r0
    413a:	2b00      	cmp	r3, #0
    413c:	d001      	beq.n	4142 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    413e:	f000 ff3b 	bl	4fb8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4146:	1e5a      	subs	r2, r3, #1
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	645a      	str	r2, [r3, #68]	; 0x44
    414c:	e000      	b.n	4150 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    414e:	e003      	b.n	4158 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4154:	2b00      	cmp	r3, #0
    4156:	dce6      	bgt.n	4126 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	f04f 32ff 	mov.w	r2, #4294967295
    415e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4160:	f001 fa0e 	bl	5580 <vPortExitCritical>
}
    4164:	3708      	adds	r7, #8
    4166:	46bd      	mov	sp, r7
    4168:	bd80      	pop	{r7, pc}
    416a:	bf00      	nop

0000416c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    416c:	b580      	push	{r7, lr}
    416e:	b084      	sub	sp, #16
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4174:	f001 f9ee 	bl	5554 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    417c:	2b00      	cmp	r3, #0
    417e:	bf14      	ite	ne
    4180:	2300      	movne	r3, #0
    4182:	2301      	moveq	r3, #1
    4184:	b2db      	uxtb	r3, r3
    4186:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4188:	f001 f9fa 	bl	5580 <vPortExitCritical>

	return xReturn;
    418c:	68fb      	ldr	r3, [r7, #12]
}
    418e:	4618      	mov	r0, r3
    4190:	3710      	adds	r7, #16
    4192:	46bd      	mov	sp, r7
    4194:	bd80      	pop	{r7, pc}
    4196:	bf00      	nop

00004198 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4198:	b480      	push	{r7}
    419a:	b085      	sub	sp, #20
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41a4:	2b00      	cmp	r3, #0
    41a6:	bf14      	ite	ne
    41a8:	2300      	movne	r3, #0
    41aa:	2301      	moveq	r3, #1
    41ac:	b2db      	uxtb	r3, r3
    41ae:	60fb      	str	r3, [r7, #12]

	return xReturn;
    41b0:	68fb      	ldr	r3, [r7, #12]
}
    41b2:	4618      	mov	r0, r3
    41b4:	3714      	adds	r7, #20
    41b6:	46bd      	mov	sp, r7
    41b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41bc:	4770      	bx	lr
    41be:	bf00      	nop

000041c0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b084      	sub	sp, #16
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    41c8:	f001 f9c4 	bl	5554 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    41d4:	429a      	cmp	r2, r3
    41d6:	bf14      	ite	ne
    41d8:	2300      	movne	r3, #0
    41da:	2301      	moveq	r3, #1
    41dc:	b2db      	uxtb	r3, r3
    41de:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    41e0:	f001 f9ce 	bl	5580 <vPortExitCritical>

	return xReturn;
    41e4:	68fb      	ldr	r3, [r7, #12]
}
    41e6:	4618      	mov	r0, r3
    41e8:	3710      	adds	r7, #16
    41ea:	46bd      	mov	sp, r7
    41ec:	bd80      	pop	{r7, pc}
    41ee:	bf00      	nop

000041f0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    41f0:	b480      	push	{r7}
    41f2:	b085      	sub	sp, #20
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4200:	429a      	cmp	r2, r3
    4202:	bf14      	ite	ne
    4204:	2300      	movne	r3, #0
    4206:	2301      	moveq	r3, #1
    4208:	b2db      	uxtb	r3, r3
    420a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    420c:	68fb      	ldr	r3, [r7, #12]
}
    420e:	4618      	mov	r0, r3
    4210:	3714      	adds	r7, #20
    4212:	46bd      	mov	sp, r7
    4214:	f85d 7b04 	ldr.w	r7, [sp], #4
    4218:	4770      	bx	lr
    421a:	bf00      	nop

0000421c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    421c:	b580      	push	{r7, lr}
    421e:	b08a      	sub	sp, #40	; 0x28
    4220:	af02      	add	r7, sp, #8
    4222:	60f8      	str	r0, [r7, #12]
    4224:	60b9      	str	r1, [r7, #8]
    4226:	603b      	str	r3, [r7, #0]
    4228:	4613      	mov	r3, r2
    422a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    422c:	88fb      	ldrh	r3, [r7, #6]
    422e:	4618      	mov	r0, r3
    4230:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4232:	f000 ffe5 	bl	5200 <prvAllocateTCBAndStack>
    4236:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4238:	69bb      	ldr	r3, [r7, #24]
    423a:	2b00      	cmp	r3, #0
    423c:	f000 80a1 	beq.w	4382 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4240:	69bb      	ldr	r3, [r7, #24]
    4242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4244:	88fb      	ldrh	r3, [r7, #6]
    4246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    424a:	3b01      	subs	r3, #1
    424c:	009b      	lsls	r3, r3, #2
    424e:	4413      	add	r3, r2
    4250:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4252:	697b      	ldr	r3, [r7, #20]
    4254:	f023 0307 	bic.w	r3, r3, #7
    4258:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    425a:	88fb      	ldrh	r3, [r7, #6]
    425c:	9300      	str	r3, [sp, #0]
    425e:	69b8      	ldr	r0, [r7, #24]
    4260:	68b9      	ldr	r1, [r7, #8]
    4262:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4266:	f000 febd 	bl	4fe4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    426a:	6978      	ldr	r0, [r7, #20]
    426c:	68f9      	ldr	r1, [r7, #12]
    426e:	683a      	ldr	r2, [r7, #0]
    4270:	f001 f8f2 	bl	5458 <pxPortInitialiseStack>
    4274:	4602      	mov	r2, r0
    4276:	69bb      	ldr	r3, [r7, #24]
    4278:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    427c:	2b00      	cmp	r3, #0
    427e:	d002      	beq.n	4286 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4282:	69ba      	ldr	r2, [r7, #24]
    4284:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4286:	f001 f965 	bl	5554 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    428a:	f240 53b4 	movw	r3, #1460	; 0x5b4
    428e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4292:	681b      	ldr	r3, [r3, #0]
    4294:	1c5a      	adds	r2, r3, #1
    4296:	f240 53b4 	movw	r3, #1460	; 0x5b4
    429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    42a0:	f240 33b0 	movw	r3, #944	; 0x3b0
    42a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d10f      	bne.n	42ce <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    42ae:	f240 33b0 	movw	r3, #944	; 0x3b0
    42b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42b6:	69ba      	ldr	r2, [r7, #24]
    42b8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    42ba:	f240 53b4 	movw	r3, #1460	; 0x5b4
    42be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	2b01      	cmp	r3, #1
    42c6:	d118      	bne.n	42fa <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    42c8:	f000 fec2 	bl	5050 <prvInitialiseTaskLists>
    42cc:	e015      	b.n	42fa <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    42ce:	f240 53c4 	movw	r3, #1476	; 0x5c4
    42d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	2b00      	cmp	r3, #0
    42da:	d10e      	bne.n	42fa <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    42dc:	f240 33b0 	movw	r3, #944	; 0x3b0
    42e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42e4:	681b      	ldr	r3, [r3, #0]
    42e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42ea:	429a      	cmp	r2, r3
    42ec:	d805      	bhi.n	42fa <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    42ee:	f240 33b0 	movw	r3, #944	; 0x3b0
    42f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f6:	69ba      	ldr	r2, [r7, #24]
    42f8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    42fa:	69bb      	ldr	r3, [r7, #24]
    42fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42fe:	f240 53bc 	movw	r3, #1468	; 0x5bc
    4302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	429a      	cmp	r2, r3
    430a:	d906      	bls.n	431a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    430c:	69bb      	ldr	r3, [r7, #24]
    430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4310:	f240 53bc 	movw	r3, #1468	; 0x5bc
    4314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4318:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    431a:	f240 53d8 	movw	r3, #1496	; 0x5d8
    431e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4322:	681b      	ldr	r3, [r3, #0]
    4324:	1c5a      	adds	r2, r3, #1
    4326:	f240 53d8 	movw	r3, #1496	; 0x5d8
    432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    432e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4330:	69bb      	ldr	r3, [r7, #24]
    4332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4334:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	429a      	cmp	r2, r3
    4340:	d906      	bls.n	4350 <xTaskGenericCreate+0x134>
    4342:	69bb      	ldr	r3, [r7, #24]
    4344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4346:	f240 53c0 	movw	r3, #1472	; 0x5c0
    434a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434e:	601a      	str	r2, [r3, #0]
    4350:	69bb      	ldr	r3, [r7, #24]
    4352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4354:	4613      	mov	r3, r2
    4356:	009b      	lsls	r3, r3, #2
    4358:	4413      	add	r3, r2
    435a:	009b      	lsls	r3, r3, #2
    435c:	f240 32b4 	movw	r2, #948	; 0x3b4
    4360:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4364:	441a      	add	r2, r3
    4366:	69bb      	ldr	r3, [r7, #24]
    4368:	3304      	adds	r3, #4
    436a:	4610      	mov	r0, r2
    436c:	4619      	mov	r1, r3
    436e:	f7ff fadf 	bl	3930 <vListInsertEnd>

			xReturn = pdPASS;
    4372:	2301      	movs	r3, #1
    4374:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4376:	69b8      	ldr	r0, [r7, #24]
    4378:	f012 fd82 	bl	16e80 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    437c:	f001 f900 	bl	5580 <vPortExitCritical>
    4380:	e002      	b.n	4388 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4382:	f04f 33ff 	mov.w	r3, #4294967295
    4386:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4388:	69fb      	ldr	r3, [r7, #28]
    438a:	2b01      	cmp	r3, #1
    438c:	d111      	bne.n	43b2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    438e:	f240 53c4 	movw	r3, #1476	; 0x5c4
    4392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	2b00      	cmp	r3, #0
    439a:	d00a      	beq.n	43b2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    439c:	f240 33b0 	movw	r3, #944	; 0x3b0
    43a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43aa:	429a      	cmp	r2, r3
    43ac:	d201      	bcs.n	43b2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    43ae:	f001 f8c3 	bl	5538 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    43b2:	69fb      	ldr	r3, [r7, #28]
}
    43b4:	4618      	mov	r0, r3
    43b6:	3720      	adds	r7, #32
    43b8:	46bd      	mov	sp, r7
    43ba:	bd80      	pop	{r7, pc}

000043bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    43bc:	b580      	push	{r7, lr}
    43be:	b084      	sub	sp, #16
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    43c4:	f001 f8c6 	bl	5554 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    43c8:	f240 33b0 	movw	r3, #944	; 0x3b0
    43cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	687a      	ldr	r2, [r7, #4]
    43d4:	429a      	cmp	r2, r3
    43d6:	d101      	bne.n	43dc <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    43d8:	2300      	movs	r3, #0
    43da:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	2b00      	cmp	r3, #0
    43e0:	d105      	bne.n	43ee <vTaskDelete+0x32>
    43e2:	f240 33b0 	movw	r3, #944	; 0x3b0
    43e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ea:	681b      	ldr	r3, [r3, #0]
    43ec:	e000      	b.n	43f0 <vTaskDelete+0x34>
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	3304      	adds	r3, #4
    43f6:	4618      	mov	r0, r3
    43f8:	f7ff fafa 	bl	39f0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4400:	2b00      	cmp	r3, #0
    4402:	d004      	beq.n	440e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	3318      	adds	r3, #24
    4408:	4618      	mov	r0, r3
    440a:	f7ff faf1 	bl	39f0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    440e:	68fb      	ldr	r3, [r7, #12]
    4410:	3304      	adds	r3, #4
    4412:	f240 5088 	movw	r0, #1416	; 0x588
    4416:	f2c2 0000 	movt	r0, #8192	; 0x2000
    441a:	4619      	mov	r1, r3
    441c:	f7ff fa88 	bl	3930 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4420:	f240 539c 	movw	r3, #1436	; 0x59c
    4424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	1c5a      	adds	r2, r3, #1
    442c:	f240 539c 	movw	r3, #1436	; 0x59c
    4430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4434:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4436:	f240 53d8 	movw	r3, #1496	; 0x5d8
    443a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	1c5a      	adds	r2, r3, #1
    4442:	f240 53d8 	movw	r3, #1496	; 0x5d8
    4446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    444a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    444c:	f001 f898 	bl	5580 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4450:	f240 53c4 	movw	r3, #1476	; 0x5c4
    4454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4458:	681b      	ldr	r3, [r3, #0]
    445a:	2b00      	cmp	r3, #0
    445c:	d004      	beq.n	4468 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	2b00      	cmp	r3, #0
    4462:	d101      	bne.n	4468 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4464:	f001 f868 	bl	5538 <vPortYieldFromISR>
			}
		}
	}
    4468:	3710      	adds	r7, #16
    446a:	46bd      	mov	sp, r7
    446c:	bd80      	pop	{r7, pc}
    446e:	bf00      	nop

00004470 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4470:	b580      	push	{r7, lr}
    4472:	b086      	sub	sp, #24
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
    4478:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    447a:	2300      	movs	r3, #0
    447c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    447e:	f000 fa8b 	bl	4998 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	681a      	ldr	r2, [r3, #0]
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	4413      	add	r3, r2
    448a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	681a      	ldr	r2, [r3, #0]
    4490:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	429a      	cmp	r2, r3
    449c:	d90f      	bls.n	44be <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	681a      	ldr	r2, [r3, #0]
    44a2:	693b      	ldr	r3, [r7, #16]
    44a4:	429a      	cmp	r2, r3
    44a6:	d919      	bls.n	44dc <vTaskDelayUntil+0x6c>
    44a8:	f240 53b8 	movw	r3, #1464	; 0x5b8
    44ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	693a      	ldr	r2, [r7, #16]
    44b4:	429a      	cmp	r2, r3
    44b6:	d911      	bls.n	44dc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    44b8:	2301      	movs	r3, #1
    44ba:	617b      	str	r3, [r7, #20]
    44bc:	e00e      	b.n	44dc <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	681a      	ldr	r2, [r3, #0]
    44c2:	693b      	ldr	r3, [r7, #16]
    44c4:	429a      	cmp	r2, r3
    44c6:	d807      	bhi.n	44d8 <vTaskDelayUntil+0x68>
    44c8:	f240 53b8 	movw	r3, #1464	; 0x5b8
    44cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	693a      	ldr	r2, [r7, #16]
    44d4:	429a      	cmp	r2, r3
    44d6:	d901      	bls.n	44dc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    44d8:	2301      	movs	r3, #1
    44da:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	693a      	ldr	r2, [r7, #16]
    44e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    44e2:	697b      	ldr	r3, [r7, #20]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d00b      	beq.n	4500 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    44e8:	f240 33b0 	movw	r3, #944	; 0x3b0
    44ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	3304      	adds	r3, #4
    44f4:	4618      	mov	r0, r3
    44f6:	f7ff fa7b 	bl	39f0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    44fa:	6938      	ldr	r0, [r7, #16]
    44fc:	f000 fe3c 	bl	5178 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4500:	f000 fa5c 	bl	49bc <xTaskResumeAll>
    4504:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	2b00      	cmp	r3, #0
    450a:	d101      	bne.n	4510 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    450c:	f001 f814 	bl	5538 <vPortYieldFromISR>
		}
	}
    4510:	3718      	adds	r7, #24
    4512:	46bd      	mov	sp, r7
    4514:	bd80      	pop	{r7, pc}
    4516:	bf00      	nop

00004518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4518:	b580      	push	{r7, lr}
    451a:	b084      	sub	sp, #16
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4520:	2300      	movs	r3, #0
    4522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	2b00      	cmp	r3, #0
    4528:	d018      	beq.n	455c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    452a:	f000 fa35 	bl	4998 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    452e:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4536:	681a      	ldr	r2, [r3, #0]
    4538:	687b      	ldr	r3, [r7, #4]
    453a:	4413      	add	r3, r2
    453c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    453e:	f240 33b0 	movw	r3, #944	; 0x3b0
    4542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	3304      	adds	r3, #4
    454a:	4618      	mov	r0, r3
    454c:	f7ff fa50 	bl	39f0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4550:	68b8      	ldr	r0, [r7, #8]
    4552:	f000 fe11 	bl	5178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4556:	f000 fa31 	bl	49bc <xTaskResumeAll>
    455a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    455c:	68fb      	ldr	r3, [r7, #12]
    455e:	2b00      	cmp	r3, #0
    4560:	d101      	bne.n	4566 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4562:	f000 ffe9 	bl	5538 <vPortYieldFromISR>
		}
	}
    4566:	3710      	adds	r7, #16
    4568:	46bd      	mov	sp, r7
    456a:	bd80      	pop	{r7, pc}

0000456c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    456c:	b580      	push	{r7, lr}
    456e:	b084      	sub	sp, #16
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4574:	f000 ffee 	bl	5554 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	2b00      	cmp	r3, #0
    457c:	d105      	bne.n	458a <uxTaskPriorityGet+0x1e>
    457e:	f240 33b0 	movw	r3, #944	; 0x3b0
    4582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	e000      	b.n	458c <uxTaskPriorityGet+0x20>
    458a:	687b      	ldr	r3, [r7, #4]
    458c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4592:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4594:	f000 fff4 	bl	5580 <vPortExitCritical>

		return uxReturn;
    4598:	68bb      	ldr	r3, [r7, #8]
	}
    459a:	4618      	mov	r0, r3
    459c:	3710      	adds	r7, #16
    459e:	46bd      	mov	sp, r7
    45a0:	bd80      	pop	{r7, pc}
    45a2:	bf00      	nop

000045a4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    45a4:	b580      	push	{r7, lr}
    45a6:	b086      	sub	sp, #24
    45a8:	af00      	add	r7, sp, #0
    45aa:	6078      	str	r0, [r7, #4]
    45ac:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    45ae:	2300      	movs	r3, #0
    45b0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    45b2:	683b      	ldr	r3, [r7, #0]
    45b4:	2b13      	cmp	r3, #19
    45b6:	d901      	bls.n	45bc <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    45b8:	2313      	movs	r3, #19
    45ba:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    45bc:	f000 ffca 	bl	5554 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    45c0:	f240 33b0 	movw	r3, #944	; 0x3b0
    45c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45c8:	681b      	ldr	r3, [r3, #0]
    45ca:	687a      	ldr	r2, [r7, #4]
    45cc:	429a      	cmp	r2, r3
    45ce:	d101      	bne.n	45d4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    45d0:	2300      	movs	r3, #0
    45d2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	2b00      	cmp	r3, #0
    45d8:	d105      	bne.n	45e6 <vTaskPrioritySet+0x42>
    45da:	f240 33b0 	movw	r3, #944	; 0x3b0
    45de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	e000      	b.n	45e8 <vTaskPrioritySet+0x44>
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    45ea:	693b      	ldr	r3, [r7, #16]
    45ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    45ee:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    45f0:	68fa      	ldr	r2, [r7, #12]
    45f2:	683b      	ldr	r3, [r7, #0]
    45f4:	429a      	cmp	r2, r3
    45f6:	d058      	beq.n	46aa <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    45f8:	683a      	ldr	r2, [r7, #0]
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	429a      	cmp	r2, r3
    45fe:	d905      	bls.n	460c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	2b00      	cmp	r3, #0
    4604:	d007      	beq.n	4616 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4606:	2301      	movs	r3, #1
    4608:	617b      	str	r3, [r7, #20]
    460a:	e004      	b.n	4616 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	2b00      	cmp	r3, #0
    4610:	d101      	bne.n	4616 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4612:	2301      	movs	r3, #1
    4614:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4616:	693b      	ldr	r3, [r7, #16]
    4618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    461a:	693b      	ldr	r3, [r7, #16]
    461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    461e:	429a      	cmp	r2, r3
    4620:	d102      	bne.n	4628 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4622:	693b      	ldr	r3, [r7, #16]
    4624:	683a      	ldr	r2, [r7, #0]
    4626:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4628:	693b      	ldr	r3, [r7, #16]
    462a:	683a      	ldr	r2, [r7, #0]
    462c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    462e:	683b      	ldr	r3, [r7, #0]
    4630:	f1c3 0214 	rsb	r2, r3, #20
    4634:	693b      	ldr	r3, [r7, #16]
    4636:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4638:	693b      	ldr	r3, [r7, #16]
    463a:	6959      	ldr	r1, [r3, #20]
    463c:	68fa      	ldr	r2, [r7, #12]
    463e:	4613      	mov	r3, r2
    4640:	009b      	lsls	r3, r3, #2
    4642:	4413      	add	r3, r2
    4644:	009b      	lsls	r3, r3, #2
    4646:	f240 32b4 	movw	r2, #948	; 0x3b4
    464a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    464e:	4413      	add	r3, r2
    4650:	4299      	cmp	r1, r3
    4652:	d125      	bne.n	46a0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4654:	693b      	ldr	r3, [r7, #16]
    4656:	3304      	adds	r3, #4
    4658:	4618      	mov	r0, r3
    465a:	f7ff f9c9 	bl	39f0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    465e:	693b      	ldr	r3, [r7, #16]
    4660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4662:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	429a      	cmp	r2, r3
    466e:	d906      	bls.n	467e <vTaskPrioritySet+0xda>
    4670:	693b      	ldr	r3, [r7, #16]
    4672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4674:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    467c:	601a      	str	r2, [r3, #0]
    467e:	693b      	ldr	r3, [r7, #16]
    4680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4682:	4613      	mov	r3, r2
    4684:	009b      	lsls	r3, r3, #2
    4686:	4413      	add	r3, r2
    4688:	009b      	lsls	r3, r3, #2
    468a:	f240 32b4 	movw	r2, #948	; 0x3b4
    468e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4692:	441a      	add	r2, r3
    4694:	693b      	ldr	r3, [r7, #16]
    4696:	3304      	adds	r3, #4
    4698:	4610      	mov	r0, r2
    469a:	4619      	mov	r1, r3
    469c:	f7ff f948 	bl	3930 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    46a0:	697b      	ldr	r3, [r7, #20]
    46a2:	2b01      	cmp	r3, #1
    46a4:	d101      	bne.n	46aa <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    46a6:	f000 ff47 	bl	5538 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    46aa:	f000 ff69 	bl	5580 <vPortExitCritical>
	}
    46ae:	3718      	adds	r7, #24
    46b0:	46bd      	mov	sp, r7
    46b2:	bd80      	pop	{r7, pc}

000046b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    46b4:	b580      	push	{r7, lr}
    46b6:	b084      	sub	sp, #16
    46b8:	af00      	add	r7, sp, #0
    46ba:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    46bc:	f000 ff4a 	bl	5554 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    46c0:	f240 33b0 	movw	r3, #944	; 0x3b0
    46c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46c8:	681b      	ldr	r3, [r3, #0]
    46ca:	687a      	ldr	r2, [r7, #4]
    46cc:	429a      	cmp	r2, r3
    46ce:	d101      	bne.n	46d4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    46d0:	2300      	movs	r3, #0
    46d2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    46d4:	687b      	ldr	r3, [r7, #4]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d105      	bne.n	46e6 <vTaskSuspend+0x32>
    46da:	f240 33b0 	movw	r3, #944	; 0x3b0
    46de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	e000      	b.n	46e8 <vTaskSuspend+0x34>
    46e6:	687b      	ldr	r3, [r7, #4]
    46e8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    46ea:	68fb      	ldr	r3, [r7, #12]
    46ec:	3304      	adds	r3, #4
    46ee:	4618      	mov	r0, r3
    46f0:	f7ff f97e 	bl	39f0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46f8:	2b00      	cmp	r3, #0
    46fa:	d004      	beq.n	4706 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    46fc:	68fb      	ldr	r3, [r7, #12]
    46fe:	3318      	adds	r3, #24
    4700:	4618      	mov	r0, r3
    4702:	f7ff f975 	bl	39f0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	3304      	adds	r3, #4
    470a:	f240 50a0 	movw	r0, #1440	; 0x5a0
    470e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4712:	4619      	mov	r1, r3
    4714:	f7ff f90c 	bl	3930 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4718:	f000 ff32 	bl	5580 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	2b00      	cmp	r3, #0
    4720:	d11e      	bne.n	4760 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4722:	f240 53c4 	movw	r3, #1476	; 0x5c4
    4726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	2b00      	cmp	r3, #0
    472e:	d002      	beq.n	4736 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4730:	f000 ff02 	bl	5538 <vPortYieldFromISR>
    4734:	e014      	b.n	4760 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4736:	f240 53a0 	movw	r3, #1440	; 0x5a0
    473a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    473e:	681a      	ldr	r2, [r3, #0]
    4740:	f240 53b4 	movw	r3, #1460	; 0x5b4
    4744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4748:	681b      	ldr	r3, [r3, #0]
    474a:	429a      	cmp	r2, r3
    474c:	d106      	bne.n	475c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    474e:	f240 33b0 	movw	r3, #944	; 0x3b0
    4752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4756:	2200      	movs	r2, #0
    4758:	601a      	str	r2, [r3, #0]
    475a:	e001      	b.n	4760 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    475c:	f000 fadc 	bl	4d18 <vTaskSwitchContext>
				}
			}
		}
	}
    4760:	3710      	adds	r7, #16
    4762:	46bd      	mov	sp, r7
    4764:	bd80      	pop	{r7, pc}
    4766:	bf00      	nop

00004768 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4768:	b480      	push	{r7}
    476a:	b085      	sub	sp, #20
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4770:	2300      	movs	r3, #0
    4772:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4778:	68bb      	ldr	r3, [r7, #8]
    477a:	695a      	ldr	r2, [r3, #20]
    477c:	f240 53a0 	movw	r3, #1440	; 0x5a0
    4780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4784:	429a      	cmp	r2, r3
    4786:	d10d      	bne.n	47a4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4788:	68bb      	ldr	r3, [r7, #8]
    478a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    478c:	f240 5374 	movw	r3, #1396	; 0x574
    4790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4794:	429a      	cmp	r2, r3
    4796:	d005      	beq.n	47a4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4798:	68bb      	ldr	r3, [r7, #8]
    479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    479c:	2b00      	cmp	r3, #0
    479e:	d101      	bne.n	47a4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    47a0:	2301      	movs	r3, #1
    47a2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    47a4:	68fb      	ldr	r3, [r7, #12]
	}
    47a6:	4618      	mov	r0, r3
    47a8:	3714      	adds	r7, #20
    47aa:	46bd      	mov	sp, r7
    47ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop

000047b4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    47c0:	68fb      	ldr	r3, [r7, #12]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d043      	beq.n	484e <vTaskResume+0x9a>
    47c6:	f240 33b0 	movw	r3, #944	; 0x3b0
    47ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	68fa      	ldr	r2, [r7, #12]
    47d2:	429a      	cmp	r2, r3
    47d4:	d03b      	beq.n	484e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    47d6:	f000 febd 	bl	5554 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    47da:	68f8      	ldr	r0, [r7, #12]
    47dc:	f7ff ffc4 	bl	4768 <xTaskIsTaskSuspended>
    47e0:	4603      	mov	r3, r0
    47e2:	2b01      	cmp	r3, #1
    47e4:	d131      	bne.n	484a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    47e6:	68fb      	ldr	r3, [r7, #12]
    47e8:	3304      	adds	r3, #4
    47ea:	4618      	mov	r0, r3
    47ec:	f7ff f900 	bl	39f0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47f4:	f240 53c0 	movw	r3, #1472	; 0x5c0
    47f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	429a      	cmp	r2, r3
    4800:	d906      	bls.n	4810 <vTaskResume+0x5c>
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4806:	f240 53c0 	movw	r3, #1472	; 0x5c0
    480a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    480e:	601a      	str	r2, [r3, #0]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4814:	4613      	mov	r3, r2
    4816:	009b      	lsls	r3, r3, #2
    4818:	4413      	add	r3, r2
    481a:	009b      	lsls	r3, r3, #2
    481c:	f240 32b4 	movw	r2, #948	; 0x3b4
    4820:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4824:	441a      	add	r2, r3
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	3304      	adds	r3, #4
    482a:	4610      	mov	r0, r2
    482c:	4619      	mov	r1, r3
    482e:	f7ff f87f 	bl	3930 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4832:	68fb      	ldr	r3, [r7, #12]
    4834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4836:	f240 33b0 	movw	r3, #944	; 0x3b0
    483a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483e:	681b      	ldr	r3, [r3, #0]
    4840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4842:	429a      	cmp	r2, r3
    4844:	d301      	bcc.n	484a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4846:	f000 fe77 	bl	5538 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    484a:	f000 fe99 	bl	5580 <vPortExitCritical>
		}
	}
    484e:	3710      	adds	r7, #16
    4850:	46bd      	mov	sp, r7
    4852:	bd80      	pop	{r7, pc}

00004854 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4854:	b580      	push	{r7, lr}
    4856:	b086      	sub	sp, #24
    4858:	af00      	add	r7, sp, #0
    485a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    485c:	2300      	movs	r3, #0
    485e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4864:	2300      	movs	r3, #0
    4866:	60fb      	str	r3, [r7, #12]
    4868:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    486c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4870:	6938      	ldr	r0, [r7, #16]
    4872:	f7ff ff79 	bl	4768 <xTaskIsTaskSuspended>
    4876:	4603      	mov	r3, r0
    4878:	2b01      	cmp	r3, #1
    487a:	d144      	bne.n	4906 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    487c:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4884:	681b      	ldr	r3, [r3, #0]
    4886:	2b00      	cmp	r3, #0
    4888:	d134      	bne.n	48f4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    488a:	693b      	ldr	r3, [r7, #16]
    488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    488e:	f240 33b0 	movw	r3, #944	; 0x3b0
    4892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    489a:	429a      	cmp	r2, r3
    489c:	bf34      	ite	cc
    489e:	2300      	movcc	r3, #0
    48a0:	2301      	movcs	r3, #1
    48a2:	b2db      	uxtb	r3, r3
    48a4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    48a6:	693b      	ldr	r3, [r7, #16]
    48a8:	3304      	adds	r3, #4
    48aa:	4618      	mov	r0, r3
    48ac:	f7ff f8a0 	bl	39f0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    48b0:	693b      	ldr	r3, [r7, #16]
    48b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48b4:	f240 53c0 	movw	r3, #1472	; 0x5c0
    48b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48bc:	681b      	ldr	r3, [r3, #0]
    48be:	429a      	cmp	r2, r3
    48c0:	d906      	bls.n	48d0 <xTaskResumeFromISR+0x7c>
    48c2:	693b      	ldr	r3, [r7, #16]
    48c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48c6:	f240 53c0 	movw	r3, #1472	; 0x5c0
    48ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ce:	601a      	str	r2, [r3, #0]
    48d0:	693b      	ldr	r3, [r7, #16]
    48d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48d4:	4613      	mov	r3, r2
    48d6:	009b      	lsls	r3, r3, #2
    48d8:	4413      	add	r3, r2
    48da:	009b      	lsls	r3, r3, #2
    48dc:	f240 32b4 	movw	r2, #948	; 0x3b4
    48e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48e4:	441a      	add	r2, r3
    48e6:	693b      	ldr	r3, [r7, #16]
    48e8:	3304      	adds	r3, #4
    48ea:	4610      	mov	r0, r2
    48ec:	4619      	mov	r1, r3
    48ee:	f7ff f81f 	bl	3930 <vListInsertEnd>
    48f2:	e008      	b.n	4906 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    48f4:	693b      	ldr	r3, [r7, #16]
    48f6:	3318      	adds	r3, #24
    48f8:	f240 5074 	movw	r0, #1396	; 0x574
    48fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4900:	4619      	mov	r1, r3
    4902:	f7ff f815 	bl	3930 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4906:	f04f 0000 	mov.w	r0, #0
    490a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    490e:	697b      	ldr	r3, [r7, #20]
	}
    4910:	4618      	mov	r0, r3
    4912:	3718      	adds	r7, #24
    4914:	46bd      	mov	sp, r7
    4916:	bd80      	pop	{r7, pc}

00004918 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4918:	b580      	push	{r7, lr}
    491a:	b086      	sub	sp, #24
    491c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    491e:	2300      	movs	r3, #0
    4920:	9300      	str	r3, [sp, #0]
    4922:	2300      	movs	r3, #0
    4924:	9301      	str	r3, [sp, #4]
    4926:	2300      	movs	r3, #0
    4928:	9302      	str	r3, [sp, #8]
    492a:	2300      	movs	r3, #0
    492c:	9303      	str	r3, [sp, #12]
    492e:	f644 70d1 	movw	r0, #20433	; 0x4fd1
    4932:	f2c0 0000 	movt	r0, #0
    4936:	f248 1180 	movw	r1, #33152	; 0x8180
    493a:	f2c0 0101 	movt	r1, #1
    493e:	2280      	movs	r2, #128	; 0x80
    4940:	2300      	movs	r3, #0
    4942:	f7ff fc6b 	bl	421c <xTaskGenericCreate>
    4946:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	2b01      	cmp	r3, #1
    494c:	d111      	bne.n	4972 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    494e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4952:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4956:	f240 53c4 	movw	r3, #1476	; 0x5c4
    495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    495e:	2201      	movs	r2, #1
    4960:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4962:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    496a:	2200      	movs	r2, #0
    496c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    496e:	f000 fdb5 	bl	54dc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4972:	3708      	adds	r7, #8
    4974:	46bd      	mov	sp, r7
    4976:	bd80      	pop	{r7, pc}

00004978 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4978:	b580      	push	{r7, lr}
    497a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    497c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4980:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4984:	f240 53c4 	movw	r3, #1476	; 0x5c4
    4988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    498c:	2200      	movs	r2, #0
    498e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4990:	f000 fdcc 	bl	552c <vPortEndScheduler>
}
    4994:	bd80      	pop	{r7, pc}
    4996:	bf00      	nop

00004998 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4998:	b480      	push	{r7}
    499a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    499c:	f240 53c8 	movw	r3, #1480	; 0x5c8
    49a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	1c5a      	adds	r2, r3, #1
    49a8:	f240 53c8 	movw	r3, #1480	; 0x5c8
    49ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b0:	601a      	str	r2, [r3, #0]
}
    49b2:	46bd      	mov	sp, r7
    49b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b8:	4770      	bx	lr
    49ba:	bf00      	nop

000049bc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    49bc:	b590      	push	{r4, r7, lr}
    49be:	b083      	sub	sp, #12
    49c0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    49c2:	2300      	movs	r3, #0
    49c4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    49c6:	f000 fdc5 	bl	5554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    49ca:	f240 53c8 	movw	r3, #1480	; 0x5c8
    49ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	1e5a      	subs	r2, r3, #1
    49d6:	f240 53c8 	movw	r3, #1480	; 0x5c8
    49da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    49e0:	f240 53c8 	movw	r3, #1480	; 0x5c8
    49e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d177      	bne.n	4ade <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    49ee:	f240 53b4 	movw	r3, #1460	; 0x5b4
    49f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f6:	681b      	ldr	r3, [r3, #0]
    49f8:	2b00      	cmp	r3, #0
    49fa:	d070      	beq.n	4ade <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    49fc:	2300      	movs	r3, #0
    49fe:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4a00:	e036      	b.n	4a70 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4a02:	f240 5374 	movw	r3, #1396	; 0x574
    4a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0a:	68db      	ldr	r3, [r3, #12]
    4a0c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4a0e:	f104 0318 	add.w	r3, r4, #24
    4a12:	4618      	mov	r0, r3
    4a14:	f7fe ffec 	bl	39f0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4a18:	1d23      	adds	r3, r4, #4
    4a1a:	4618      	mov	r0, r3
    4a1c:	f7fe ffe8 	bl	39f0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4a20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a22:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2a:	681b      	ldr	r3, [r3, #0]
    4a2c:	429a      	cmp	r2, r3
    4a2e:	d905      	bls.n	4a3c <xTaskResumeAll+0x80>
    4a30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a32:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3a:	601a      	str	r2, [r3, #0]
    4a3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a3e:	4613      	mov	r3, r2
    4a40:	009b      	lsls	r3, r3, #2
    4a42:	4413      	add	r3, r2
    4a44:	009b      	lsls	r3, r3, #2
    4a46:	f240 32b4 	movw	r2, #948	; 0x3b4
    4a4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a4e:	441a      	add	r2, r3
    4a50:	1d23      	adds	r3, r4, #4
    4a52:	4610      	mov	r0, r2
    4a54:	4619      	mov	r1, r3
    4a56:	f7fe ff6b 	bl	3930 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4a5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a5c:	f240 33b0 	movw	r3, #944	; 0x3b0
    4a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a68:	429a      	cmp	r2, r3
    4a6a:	d301      	bcc.n	4a70 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4a6c:	2301      	movs	r3, #1
    4a6e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4a70:	f240 5374 	movw	r3, #1396	; 0x574
    4a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d1c1      	bne.n	4a02 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4a7e:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d014      	beq.n	4ab6 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4a8c:	e00c      	b.n	4aa8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4a8e:	f000 f865 	bl	4b5c <vTaskIncrementTick>
						--uxMissedTicks;
    4a92:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	1e5a      	subs	r2, r3, #1
    4a9e:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4aa8:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d1eb      	bne.n	4a8e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4ab6:	683b      	ldr	r3, [r7, #0]
    4ab8:	2b01      	cmp	r3, #1
    4aba:	d006      	beq.n	4aca <xTaskResumeAll+0x10e>
    4abc:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	2b01      	cmp	r3, #1
    4ac8:	d109      	bne.n	4ade <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4aca:	2301      	movs	r3, #1
    4acc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4ace:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad6:	2200      	movs	r2, #0
    4ad8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4ada:	f000 fd2d 	bl	5538 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4ade:	f000 fd4f 	bl	5580 <vPortExitCritical>

	return xAlreadyYielded;
    4ae2:	687b      	ldr	r3, [r7, #4]
}
    4ae4:	4618      	mov	r0, r3
    4ae6:	370c      	adds	r7, #12
    4ae8:	46bd      	mov	sp, r7
    4aea:	bd90      	pop	{r4, r7, pc}

00004aec <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4aec:	b580      	push	{r7, lr}
    4aee:	b082      	sub	sp, #8
    4af0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4af2:	f000 fd2f 	bl	5554 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4af6:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4b02:	f000 fd3d 	bl	5580 <vPortExitCritical>

	return xTicks;
    4b06:	687b      	ldr	r3, [r7, #4]
}
    4b08:	4618      	mov	r0, r3
    4b0a:	3708      	adds	r7, #8
    4b0c:	46bd      	mov	sp, r7
    4b0e:	bd80      	pop	{r7, pc}

00004b10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4b10:	b480      	push	{r7}
    4b12:	b083      	sub	sp, #12
    4b14:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b16:	2300      	movs	r3, #0
    4b18:	607b      	str	r3, [r7, #4]
    4b1a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b1e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4b22:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4b2e:	f04f 0000 	mov.w	r0, #0
    4b32:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4b36:	683b      	ldr	r3, [r7, #0]
}
    4b38:	4618      	mov	r0, r3
    4b3a:	370c      	adds	r7, #12
    4b3c:	46bd      	mov	sp, r7
    4b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b42:	4770      	bx	lr

00004b44 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4b44:	b480      	push	{r7}
    4b46:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4b48:	f240 53b4 	movw	r3, #1460	; 0x5b4
    4b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b50:	681b      	ldr	r3, [r3, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	46bd      	mov	sp, r7
    4b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5a:	4770      	bx	lr

00004b5c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4b5c:	b580      	push	{r7, lr}
    4b5e:	b084      	sub	sp, #16
    4b60:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4b62:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	f040 80b9 	bne.w	4ce4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4b72:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7a:	681b      	ldr	r3, [r3, #0]
    4b7c:	1c5a      	adds	r2, r3, #1
    4b7e:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b86:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4b88:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d13f      	bne.n	4c16 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4b96:	f240 536c 	movw	r3, #1388	; 0x56c
    4b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9e:	681b      	ldr	r3, [r3, #0]
    4ba0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4ba2:	f240 5370 	movw	r3, #1392	; 0x570
    4ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4baa:	681a      	ldr	r2, [r3, #0]
    4bac:	f240 536c 	movw	r3, #1388	; 0x56c
    4bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4bb6:	f240 5370 	movw	r3, #1392	; 0x570
    4bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbe:	68fa      	ldr	r2, [r7, #12]
    4bc0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4bc2:	f240 53d4 	movw	r3, #1492	; 0x5d4
    4bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	1c5a      	adds	r2, r3, #1
    4bce:	f240 53d4 	movw	r3, #1492	; 0x5d4
    4bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4bd8:	f240 536c 	movw	r3, #1388	; 0x56c
    4bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	2b00      	cmp	r3, #0
    4be6:	d107      	bne.n	4bf8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4be8:	f240 0374 	movw	r3, #116	; 0x74
    4bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf0:	f04f 32ff 	mov.w	r2, #4294967295
    4bf4:	601a      	str	r2, [r3, #0]
    4bf6:	e00e      	b.n	4c16 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4bf8:	f240 536c 	movw	r3, #1388	; 0x56c
    4bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c00:	681b      	ldr	r3, [r3, #0]
    4c02:	68db      	ldr	r3, [r3, #12]
    4c04:	68db      	ldr	r3, [r3, #12]
    4c06:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4c08:	68bb      	ldr	r3, [r7, #8]
    4c0a:	685a      	ldr	r2, [r3, #4]
    4c0c:	f240 0374 	movw	r3, #116	; 0x74
    4c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c14:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4c16:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1e:	681a      	ldr	r2, [r3, #0]
    4c20:	f240 0374 	movw	r3, #116	; 0x74
    4c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	429a      	cmp	r2, r3
    4c2c:	d359      	bcc.n	4ce2 <vTaskIncrementTick+0x186>
    4c2e:	f240 536c 	movw	r3, #1388	; 0x56c
    4c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c36:	681b      	ldr	r3, [r3, #0]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d107      	bne.n	4c4e <vTaskIncrementTick+0xf2>
    4c3e:	f240 0374 	movw	r3, #116	; 0x74
    4c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c46:	f04f 32ff 	mov.w	r2, #4294967295
    4c4a:	601a      	str	r2, [r3, #0]
    4c4c:	e049      	b.n	4ce2 <vTaskIncrementTick+0x186>
    4c4e:	f240 536c 	movw	r3, #1388	; 0x56c
    4c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	68db      	ldr	r3, [r3, #12]
    4c5a:	68db      	ldr	r3, [r3, #12]
    4c5c:	60bb      	str	r3, [r7, #8]
    4c5e:	68bb      	ldr	r3, [r7, #8]
    4c60:	685b      	ldr	r3, [r3, #4]
    4c62:	607b      	str	r3, [r7, #4]
    4c64:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6c:	681a      	ldr	r2, [r3, #0]
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	429a      	cmp	r2, r3
    4c72:	d206      	bcs.n	4c82 <vTaskIncrementTick+0x126>
    4c74:	f240 0374 	movw	r3, #116	; 0x74
    4c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7c:	687a      	ldr	r2, [r7, #4]
    4c7e:	601a      	str	r2, [r3, #0]
    4c80:	e02f      	b.n	4ce2 <vTaskIncrementTick+0x186>
    4c82:	68bb      	ldr	r3, [r7, #8]
    4c84:	3304      	adds	r3, #4
    4c86:	4618      	mov	r0, r3
    4c88:	f7fe feb2 	bl	39f0 <vListRemove>
    4c8c:	68bb      	ldr	r3, [r7, #8]
    4c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c90:	2b00      	cmp	r3, #0
    4c92:	d004      	beq.n	4c9e <vTaskIncrementTick+0x142>
    4c94:	68bb      	ldr	r3, [r7, #8]
    4c96:	3318      	adds	r3, #24
    4c98:	4618      	mov	r0, r3
    4c9a:	f7fe fea9 	bl	39f0 <vListRemove>
    4c9e:	68bb      	ldr	r3, [r7, #8]
    4ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ca2:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	429a      	cmp	r2, r3
    4cae:	d906      	bls.n	4cbe <vTaskIncrementTick+0x162>
    4cb0:	68bb      	ldr	r3, [r7, #8]
    4cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cb4:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cbc:	601a      	str	r2, [r3, #0]
    4cbe:	68bb      	ldr	r3, [r7, #8]
    4cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cc2:	4613      	mov	r3, r2
    4cc4:	009b      	lsls	r3, r3, #2
    4cc6:	4413      	add	r3, r2
    4cc8:	009b      	lsls	r3, r3, #2
    4cca:	f240 32b4 	movw	r2, #948	; 0x3b4
    4cce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4cd2:	441a      	add	r2, r3
    4cd4:	68bb      	ldr	r3, [r7, #8]
    4cd6:	3304      	adds	r3, #4
    4cd8:	4610      	mov	r0, r2
    4cda:	4619      	mov	r1, r3
    4cdc:	f7fe fe28 	bl	3930 <vListInsertEnd>
    4ce0:	e7a5      	b.n	4c2e <vTaskIncrementTick+0xd2>
    4ce2:	e00c      	b.n	4cfe <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4ce4:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	1c5a      	adds	r2, r3, #1
    4cf0:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4cfa:	f012 f8d3 	bl	16ea4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4cfe:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d101      	bne.n	4d10 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    4d0c:	f012 f8ca 	bl	16ea4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4d10:	3710      	adds	r7, #16
    4d12:	46bd      	mov	sp, r7
    4d14:	bd80      	pop	{r7, pc}
    4d16:	bf00      	nop

00004d18 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4d18:	b580      	push	{r7, lr}
    4d1a:	b082      	sub	sp, #8
    4d1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4d1e:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d006      	beq.n	4d3a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4d2c:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d34:	2201      	movs	r2, #1
    4d36:	601a      	str	r2, [r3, #0]
    4d38:	e047      	b.n	4dca <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    4d3a:	f012 f8ad 	bl	16e98 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4d3e:	e00a      	b.n	4d56 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4d40:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	1e5a      	subs	r2, r3, #1
    4d4c:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d54:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4d56:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5e:	6819      	ldr	r1, [r3, #0]
    4d60:	f240 32b4 	movw	r2, #948	; 0x3b4
    4d64:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d68:	460b      	mov	r3, r1
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	440b      	add	r3, r1
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	4413      	add	r3, r2
    4d72:	681b      	ldr	r3, [r3, #0]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d0e3      	beq.n	4d40 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4d78:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d80:	681a      	ldr	r2, [r3, #0]
    4d82:	4613      	mov	r3, r2
    4d84:	009b      	lsls	r3, r3, #2
    4d86:	4413      	add	r3, r2
    4d88:	009b      	lsls	r3, r3, #2
    4d8a:	f240 32b4 	movw	r2, #948	; 0x3b4
    4d8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d92:	4413      	add	r3, r2
    4d94:	607b      	str	r3, [r7, #4]
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	685b      	ldr	r3, [r3, #4]
    4d9a:	685a      	ldr	r2, [r3, #4]
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	605a      	str	r2, [r3, #4]
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	685a      	ldr	r2, [r3, #4]
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	3308      	adds	r3, #8
    4da8:	429a      	cmp	r2, r3
    4daa:	d104      	bne.n	4db6 <vTaskSwitchContext+0x9e>
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	685b      	ldr	r3, [r3, #4]
    4db0:	685a      	ldr	r2, [r3, #4]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	605a      	str	r2, [r3, #4]
    4db6:	687b      	ldr	r3, [r7, #4]
    4db8:	685b      	ldr	r3, [r3, #4]
    4dba:	68da      	ldr	r2, [r3, #12]
    4dbc:	f240 33b0 	movw	r3, #944	; 0x3b0
    4dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    4dc6:	f012 f861 	bl	16e8c <myTraceSwitchedIn>
	}
}
    4dca:	3708      	adds	r7, #8
    4dcc:	46bd      	mov	sp, r7
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b084      	sub	sp, #16
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4dda:	f240 33b0 	movw	r3, #944	; 0x3b0
    4dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	3318      	adds	r3, #24
    4de6:	6878      	ldr	r0, [r7, #4]
    4de8:	4619      	mov	r1, r3
    4dea:	f7fe fdc9 	bl	3980 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4dee:	f240 33b0 	movw	r3, #944	; 0x3b0
    4df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df6:	681b      	ldr	r3, [r3, #0]
    4df8:	3304      	adds	r3, #4
    4dfa:	4618      	mov	r0, r3
    4dfc:	f7fe fdf8 	bl	39f0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e06:	d10d      	bne.n	4e24 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4e08:	f240 33b0 	movw	r3, #944	; 0x3b0
    4e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	3304      	adds	r3, #4
    4e14:	f240 50a0 	movw	r0, #1440	; 0x5a0
    4e18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4e1c:	4619      	mov	r1, r3
    4e1e:	f7fe fd87 	bl	3930 <vListInsertEnd>
    4e22:	e00a      	b.n	4e3a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4e24:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e2c:	681a      	ldr	r2, [r3, #0]
    4e2e:	683b      	ldr	r3, [r7, #0]
    4e30:	4413      	add	r3, r2
    4e32:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4e34:	68f8      	ldr	r0, [r7, #12]
    4e36:	f000 f99f 	bl	5178 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    4e3a:	3710      	adds	r7, #16
    4e3c:	46bd      	mov	sp, r7
    4e3e:	bd80      	pop	{r7, pc}

00004e40 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4e40:	b580      	push	{r7, lr}
    4e42:	b084      	sub	sp, #16
    4e44:	af00      	add	r7, sp, #0
    4e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	68db      	ldr	r3, [r3, #12]
    4e4c:	68db      	ldr	r3, [r3, #12]
    4e4e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4e50:	68bb      	ldr	r3, [r7, #8]
    4e52:	3318      	adds	r3, #24
    4e54:	4618      	mov	r0, r3
    4e56:	f7fe fdcb 	bl	39f0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e5a:	f240 53c8 	movw	r3, #1480	; 0x5c8
    4e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	2b00      	cmp	r3, #0
    4e66:	d126      	bne.n	4eb6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	3304      	adds	r3, #4
    4e6c:	4618      	mov	r0, r3
    4e6e:	f7fe fdbf 	bl	39f0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e76:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7e:	681b      	ldr	r3, [r3, #0]
    4e80:	429a      	cmp	r2, r3
    4e82:	d906      	bls.n	4e92 <xTaskRemoveFromEventList+0x52>
    4e84:	68bb      	ldr	r3, [r7, #8]
    4e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e88:	f240 53c0 	movw	r3, #1472	; 0x5c0
    4e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e90:	601a      	str	r2, [r3, #0]
    4e92:	68bb      	ldr	r3, [r7, #8]
    4e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e96:	4613      	mov	r3, r2
    4e98:	009b      	lsls	r3, r3, #2
    4e9a:	4413      	add	r3, r2
    4e9c:	009b      	lsls	r3, r3, #2
    4e9e:	f240 32b4 	movw	r2, #948	; 0x3b4
    4ea2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ea6:	441a      	add	r2, r3
    4ea8:	68bb      	ldr	r3, [r7, #8]
    4eaa:	3304      	adds	r3, #4
    4eac:	4610      	mov	r0, r2
    4eae:	4619      	mov	r1, r3
    4eb0:	f7fe fd3e 	bl	3930 <vListInsertEnd>
    4eb4:	e008      	b.n	4ec8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4eb6:	68bb      	ldr	r3, [r7, #8]
    4eb8:	3318      	adds	r3, #24
    4eba:	f240 5074 	movw	r0, #1396	; 0x574
    4ebe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ec2:	4619      	mov	r1, r3
    4ec4:	f7fe fd34 	bl	3930 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4ec8:	68bb      	ldr	r3, [r7, #8]
    4eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ecc:	f240 33b0 	movw	r3, #944	; 0x3b0
    4ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ed8:	429a      	cmp	r2, r3
    4eda:	d302      	bcc.n	4ee2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4edc:	2301      	movs	r3, #1
    4ede:	60fb      	str	r3, [r7, #12]
    4ee0:	e001      	b.n	4ee6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    4ee2:	2300      	movs	r3, #0
    4ee4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4ee6:	68fb      	ldr	r3, [r7, #12]
}
    4ee8:	4618      	mov	r0, r3
    4eea:	3710      	adds	r7, #16
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}

00004ef0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4ef0:	b480      	push	{r7}
    4ef2:	b083      	sub	sp, #12
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4ef8:	f240 53d4 	movw	r3, #1492	; 0x5d4
    4efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f00:	681a      	ldr	r2, [r3, #0]
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4f06:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0e:	681a      	ldr	r2, [r3, #0]
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	605a      	str	r2, [r3, #4]
}
    4f14:	370c      	adds	r7, #12
    4f16:	46bd      	mov	sp, r7
    4f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1c:	4770      	bx	lr
    4f1e:	bf00      	nop

00004f20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b084      	sub	sp, #16
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
    4f28:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4f2a:	f000 fb13 	bl	5554 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4f2e:	683b      	ldr	r3, [r7, #0]
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f36:	d102      	bne.n	4f3e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    4f38:	2300      	movs	r3, #0
    4f3a:	60fb      	str	r3, [r7, #12]
    4f3c:	e035      	b.n	4faa <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4f3e:	687b      	ldr	r3, [r7, #4]
    4f40:	681a      	ldr	r2, [r3, #0]
    4f42:	f240 53d4 	movw	r3, #1492	; 0x5d4
    4f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4a:	681b      	ldr	r3, [r3, #0]
    4f4c:	429a      	cmp	r2, r3
    4f4e:	d00b      	beq.n	4f68 <xTaskCheckForTimeOut+0x48>
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	685a      	ldr	r2, [r3, #4]
    4f54:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f5c:	681b      	ldr	r3, [r3, #0]
    4f5e:	429a      	cmp	r2, r3
    4f60:	d802      	bhi.n	4f68 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4f62:	2301      	movs	r3, #1
    4f64:	60fb      	str	r3, [r7, #12]
    4f66:	e020      	b.n	4faa <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4f68:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f70:	681a      	ldr	r2, [r3, #0]
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	685b      	ldr	r3, [r3, #4]
    4f76:	1ad2      	subs	r2, r2, r3
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	429a      	cmp	r2, r3
    4f7e:	d212      	bcs.n	4fa6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4f80:	683b      	ldr	r3, [r7, #0]
    4f82:	681a      	ldr	r2, [r3, #0]
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	6859      	ldr	r1, [r3, #4]
    4f88:	f240 53b8 	movw	r3, #1464	; 0x5b8
    4f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	1acb      	subs	r3, r1, r3
    4f94:	441a      	add	r2, r3
    4f96:	683b      	ldr	r3, [r7, #0]
    4f98:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4f9a:	6878      	ldr	r0, [r7, #4]
    4f9c:	f7ff ffa8 	bl	4ef0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4fa0:	2300      	movs	r3, #0
    4fa2:	60fb      	str	r3, [r7, #12]
    4fa4:	e001      	b.n	4faa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4fa6:	2301      	movs	r3, #1
    4fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4faa:	f000 fae9 	bl	5580 <vPortExitCritical>

	return xReturn;
    4fae:	68fb      	ldr	r3, [r7, #12]
}
    4fb0:	4618      	mov	r0, r3
    4fb2:	3710      	adds	r7, #16
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}

00004fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4fb8:	b480      	push	{r7}
    4fba:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4fbc:	f240 53d0 	movw	r3, #1488	; 0x5d0
    4fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc4:	2201      	movs	r2, #1
    4fc6:	601a      	str	r2, [r3, #0]
}
    4fc8:	46bd      	mov	sp, r7
    4fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fce:	4770      	bx	lr

00004fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	b082      	sub	sp, #8
    4fd4:	af00      	add	r7, sp, #0
    4fd6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4fd8:	f000 f886 	bl	50e8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    4fdc:	f000 faac 	bl	5538 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4fe0:	e7fa      	b.n	4fd8 <prvIdleTask+0x8>
    4fe2:	bf00      	nop

00004fe4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b084      	sub	sp, #16
    4fe8:	af00      	add	r7, sp, #0
    4fea:	60f8      	str	r0, [r7, #12]
    4fec:	60b9      	str	r1, [r7, #8]
    4fee:	607a      	str	r2, [r7, #4]
    4ff0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4ff2:	68fb      	ldr	r3, [r7, #12]
    4ff4:	3334      	adds	r3, #52	; 0x34
    4ff6:	4618      	mov	r0, r3
    4ff8:	68b9      	ldr	r1, [r7, #8]
    4ffa:	2210      	movs	r2, #16
    4ffc:	f013 f820 	bl	18040 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	2200      	movs	r2, #0
    5004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5008:	687b      	ldr	r3, [r7, #4]
    500a:	2b13      	cmp	r3, #19
    500c:	d901      	bls.n	5012 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    500e:	2313      	movs	r3, #19
    5010:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5012:	68fb      	ldr	r3, [r7, #12]
    5014:	687a      	ldr	r2, [r7, #4]
    5016:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5018:	68fb      	ldr	r3, [r7, #12]
    501a:	687a      	ldr	r2, [r7, #4]
    501c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    501e:	68fb      	ldr	r3, [r7, #12]
    5020:	3304      	adds	r3, #4
    5022:	4618      	mov	r0, r3
    5024:	f7fe fc78 	bl	3918 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	3318      	adds	r3, #24
    502c:	4618      	mov	r0, r3
    502e:	f7fe fc73 	bl	3918 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5032:	68fb      	ldr	r3, [r7, #12]
    5034:	68fa      	ldr	r2, [r7, #12]
    5036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	f1c3 0214 	rsb	r2, r3, #20
    503e:	68fb      	ldr	r3, [r7, #12]
    5040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	68fa      	ldr	r2, [r7, #12]
    5046:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5048:	3710      	adds	r7, #16
    504a:	46bd      	mov	sp, r7
    504c:	bd80      	pop	{r7, pc}
    504e:	bf00      	nop

00005050 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5050:	b580      	push	{r7, lr}
    5052:	b082      	sub	sp, #8
    5054:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5056:	2300      	movs	r3, #0
    5058:	607b      	str	r3, [r7, #4]
    505a:	e00f      	b.n	507c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    505c:	687a      	ldr	r2, [r7, #4]
    505e:	4613      	mov	r3, r2
    5060:	009b      	lsls	r3, r3, #2
    5062:	4413      	add	r3, r2
    5064:	009b      	lsls	r3, r3, #2
    5066:	f240 32b4 	movw	r2, #948	; 0x3b4
    506a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    506e:	4413      	add	r3, r2
    5070:	4618      	mov	r0, r3
    5072:	f7fe fc31 	bl	38d8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	3301      	adds	r3, #1
    507a:	607b      	str	r3, [r7, #4]
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	2b13      	cmp	r3, #19
    5080:	d9ec      	bls.n	505c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5082:	f240 5044 	movw	r0, #1348	; 0x544
    5086:	f2c2 0000 	movt	r0, #8192	; 0x2000
    508a:	f7fe fc25 	bl	38d8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    508e:	f240 5058 	movw	r0, #1368	; 0x558
    5092:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5096:	f7fe fc1f 	bl	38d8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    509a:	f240 5074 	movw	r0, #1396	; 0x574
    509e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50a2:	f7fe fc19 	bl	38d8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    50a6:	f240 5088 	movw	r0, #1416	; 0x588
    50aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50ae:	f7fe fc13 	bl	38d8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    50b2:	f240 50a0 	movw	r0, #1440	; 0x5a0
    50b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50ba:	f7fe fc0d 	bl	38d8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    50be:	f240 536c 	movw	r3, #1388	; 0x56c
    50c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c6:	f240 5244 	movw	r2, #1348	; 0x544
    50ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    50d0:	f240 5370 	movw	r3, #1392	; 0x570
    50d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d8:	f240 5258 	movw	r2, #1368	; 0x558
    50dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50e0:	601a      	str	r2, [r3, #0]
}
    50e2:	3708      	adds	r7, #8
    50e4:	46bd      	mov	sp, r7
    50e6:	bd80      	pop	{r7, pc}

000050e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    50ee:	f240 539c 	movw	r3, #1436	; 0x59c
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	2b00      	cmp	r3, #0
    50fa:	d03a      	beq.n	5172 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    50fc:	f7ff fc4c 	bl	4998 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5100:	f240 5388 	movw	r3, #1416	; 0x588
    5104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	2b00      	cmp	r3, #0
    510c:	bf14      	ite	ne
    510e:	2300      	movne	r3, #0
    5110:	2301      	moveq	r3, #1
    5112:	b2db      	uxtb	r3, r3
    5114:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5116:	f7ff fc51 	bl	49bc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	2b00      	cmp	r3, #0
    511e:	d128      	bne.n	5172 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5120:	f000 fa18 	bl	5554 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5124:	f240 5388 	movw	r3, #1416	; 0x588
    5128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512c:	68db      	ldr	r3, [r3, #12]
    512e:	68db      	ldr	r3, [r3, #12]
    5130:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5132:	683b      	ldr	r3, [r7, #0]
    5134:	3304      	adds	r3, #4
    5136:	4618      	mov	r0, r3
    5138:	f7fe fc5a 	bl	39f0 <vListRemove>
					--uxCurrentNumberOfTasks;
    513c:	f240 53b4 	movw	r3, #1460	; 0x5b4
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	1e5a      	subs	r2, r3, #1
    5148:	f240 53b4 	movw	r3, #1460	; 0x5b4
    514c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5150:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5152:	f240 539c 	movw	r3, #1436	; 0x59c
    5156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	1e5a      	subs	r2, r3, #1
    515e:	f240 539c 	movw	r3, #1436	; 0x59c
    5162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5166:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5168:	f000 fa0a 	bl	5580 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    516c:	6838      	ldr	r0, [r7, #0]
    516e:	f000 f879 	bl	5264 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5172:	3708      	adds	r7, #8
    5174:	46bd      	mov	sp, r7
    5176:	bd80      	pop	{r7, pc}

00005178 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5178:	b580      	push	{r7, lr}
    517a:	b082      	sub	sp, #8
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5180:	f240 33b0 	movw	r3, #944	; 0x3b0
    5184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5188:	681b      	ldr	r3, [r3, #0]
    518a:	687a      	ldr	r2, [r7, #4]
    518c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    518e:	f240 53b8 	movw	r3, #1464	; 0x5b8
    5192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5196:	681b      	ldr	r3, [r3, #0]
    5198:	687a      	ldr	r2, [r7, #4]
    519a:	429a      	cmp	r2, r3
    519c:	d20f      	bcs.n	51be <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    519e:	f240 5370 	movw	r3, #1392	; 0x570
    51a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a6:	681a      	ldr	r2, [r3, #0]
    51a8:	f240 33b0 	movw	r3, #944	; 0x3b0
    51ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	3304      	adds	r3, #4
    51b4:	4610      	mov	r0, r2
    51b6:	4619      	mov	r1, r3
    51b8:	f7fe fbe2 	bl	3980 <vListInsert>
    51bc:	e01c      	b.n	51f8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    51be:	f240 536c 	movw	r3, #1388	; 0x56c
    51c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c6:	681a      	ldr	r2, [r3, #0]
    51c8:	f240 33b0 	movw	r3, #944	; 0x3b0
    51cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	3304      	adds	r3, #4
    51d4:	4610      	mov	r0, r2
    51d6:	4619      	mov	r1, r3
    51d8:	f7fe fbd2 	bl	3980 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    51dc:	f240 0374 	movw	r3, #116	; 0x74
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	687a      	ldr	r2, [r7, #4]
    51e8:	429a      	cmp	r2, r3
    51ea:	d205      	bcs.n	51f8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    51ec:	f240 0374 	movw	r3, #116	; 0x74
    51f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f4:	687a      	ldr	r2, [r7, #4]
    51f6:	601a      	str	r2, [r3, #0]
		}
	}
}
    51f8:	3708      	adds	r7, #8
    51fa:	46bd      	mov	sp, r7
    51fc:	bd80      	pop	{r7, pc}
    51fe:	bf00      	nop

00005200 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5200:	b580      	push	{r7, lr}
    5202:	b084      	sub	sp, #16
    5204:	af00      	add	r7, sp, #0
    5206:	4603      	mov	r3, r0
    5208:	6039      	str	r1, [r7, #0]
    520a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    520c:	2050      	movs	r0, #80	; 0x50
    520e:	f000 fa1b 	bl	5648 <pvPortMalloc>
    5212:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5214:	68fb      	ldr	r3, [r7, #12]
    5216:	2b00      	cmp	r3, #0
    5218:	d01f      	beq.n	525a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    521a:	683b      	ldr	r3, [r7, #0]
    521c:	2b00      	cmp	r3, #0
    521e:	d106      	bne.n	522e <prvAllocateTCBAndStack+0x2e>
    5220:	88fb      	ldrh	r3, [r7, #6]
    5222:	009b      	lsls	r3, r3, #2
    5224:	4618      	mov	r0, r3
    5226:	f000 fa0f 	bl	5648 <pvPortMalloc>
    522a:	4603      	mov	r3, r0
    522c:	e000      	b.n	5230 <prvAllocateTCBAndStack+0x30>
    522e:	683b      	ldr	r3, [r7, #0]
    5230:	68fa      	ldr	r2, [r7, #12]
    5232:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5234:	68fb      	ldr	r3, [r7, #12]
    5236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5238:	2b00      	cmp	r3, #0
    523a:	d105      	bne.n	5248 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    523c:	68f8      	ldr	r0, [r7, #12]
    523e:	f000 fac7 	bl	57d0 <vPortFree>
			pxNewTCB = NULL;
    5242:	2300      	movs	r3, #0
    5244:	60fb      	str	r3, [r7, #12]
    5246:	e008      	b.n	525a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5248:	68fb      	ldr	r3, [r7, #12]
    524a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    524c:	88fb      	ldrh	r3, [r7, #6]
    524e:	009b      	lsls	r3, r3, #2
    5250:	4610      	mov	r0, r2
    5252:	21a5      	movs	r1, #165	; 0xa5
    5254:	461a      	mov	r2, r3
    5256:	f012 fea3 	bl	17fa0 <memset>
		}
	}

	return pxNewTCB;
    525a:	68fb      	ldr	r3, [r7, #12]
}
    525c:	4618      	mov	r0, r3
    525e:	3710      	adds	r7, #16
    5260:	46bd      	mov	sp, r7
    5262:	bd80      	pop	{r7, pc}

00005264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5264:	b580      	push	{r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5270:	4618      	mov	r0, r3
    5272:	f000 faad 	bl	57d0 <vPortFree>
		vPortFree( pxTCB );
    5276:	6878      	ldr	r0, [r7, #4]
    5278:	f000 faaa 	bl	57d0 <vPortFree>
	}
    527c:	3708      	adds	r7, #8
    527e:	46bd      	mov	sp, r7
    5280:	bd80      	pop	{r7, pc}
    5282:	bf00      	nop

00005284 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5284:	b480      	push	{r7}
    5286:	b083      	sub	sp, #12
    5288:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    528a:	f240 33b0 	movw	r3, #944	; 0x3b0
    528e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5292:	681b      	ldr	r3, [r3, #0]
    5294:	607b      	str	r3, [r7, #4]

		return xReturn;
    5296:	687b      	ldr	r3, [r7, #4]
	}
    5298:	4618      	mov	r0, r3
    529a:	370c      	adds	r7, #12
    529c:	46bd      	mov	sp, r7
    529e:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a2:	4770      	bx	lr

000052a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    52a4:	b580      	push	{r7, lr}
    52a6:	b084      	sub	sp, #16
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    52b0:	68fb      	ldr	r3, [r7, #12]
    52b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52b4:	f240 33b0 	movw	r3, #944	; 0x3b0
    52b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52c0:	429a      	cmp	r2, r3
    52c2:	d24f      	bcs.n	5364 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    52c4:	f240 33b0 	movw	r3, #944	; 0x3b0
    52c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52cc:	681b      	ldr	r3, [r3, #0]
    52ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52d0:	f1c3 0214 	rsb	r2, r3, #20
    52d4:	68fb      	ldr	r3, [r7, #12]
    52d6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    52d8:	68fb      	ldr	r3, [r7, #12]
    52da:	6959      	ldr	r1, [r3, #20]
    52dc:	68fb      	ldr	r3, [r7, #12]
    52de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52e0:	4613      	mov	r3, r2
    52e2:	009b      	lsls	r3, r3, #2
    52e4:	4413      	add	r3, r2
    52e6:	009b      	lsls	r3, r3, #2
    52e8:	f240 32b4 	movw	r2, #948	; 0x3b4
    52ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52f0:	4413      	add	r3, r2
    52f2:	4299      	cmp	r1, r3
    52f4:	d12e      	bne.n	5354 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    52f6:	68fb      	ldr	r3, [r7, #12]
    52f8:	3304      	adds	r3, #4
    52fa:	4618      	mov	r0, r3
    52fc:	f7fe fb78 	bl	39f0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5300:	f240 33b0 	movw	r3, #944	; 0x3b0
    5304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5308:	681b      	ldr	r3, [r3, #0]
    530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5310:	68fb      	ldr	r3, [r7, #12]
    5312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5314:	f240 53c0 	movw	r3, #1472	; 0x5c0
    5318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    531c:	681b      	ldr	r3, [r3, #0]
    531e:	429a      	cmp	r2, r3
    5320:	d906      	bls.n	5330 <vTaskPriorityInherit+0x8c>
    5322:	68fb      	ldr	r3, [r7, #12]
    5324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5326:	f240 53c0 	movw	r3, #1472	; 0x5c0
    532a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532e:	601a      	str	r2, [r3, #0]
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5334:	4613      	mov	r3, r2
    5336:	009b      	lsls	r3, r3, #2
    5338:	4413      	add	r3, r2
    533a:	009b      	lsls	r3, r3, #2
    533c:	f240 32b4 	movw	r2, #948	; 0x3b4
    5340:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5344:	441a      	add	r2, r3
    5346:	68fb      	ldr	r3, [r7, #12]
    5348:	3304      	adds	r3, #4
    534a:	4610      	mov	r0, r2
    534c:	4619      	mov	r1, r3
    534e:	f7fe faef 	bl	3930 <vListInsertEnd>
    5352:	e007      	b.n	5364 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5354:	f240 33b0 	movw	r3, #944	; 0x3b0
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5360:	68fb      	ldr	r3, [r7, #12]
    5362:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5364:	3710      	adds	r7, #16
    5366:	46bd      	mov	sp, r7
    5368:	bd80      	pop	{r7, pc}
    536a:	bf00      	nop

0000536c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    536c:	b580      	push	{r7, lr}
    536e:	b084      	sub	sp, #16
    5370:	af00      	add	r7, sp, #0
    5372:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	2b00      	cmp	r3, #0
    537c:	d035      	beq.n	53ea <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    537e:	68fb      	ldr	r3, [r7, #12]
    5380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5382:	68fb      	ldr	r3, [r7, #12]
    5384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5386:	429a      	cmp	r2, r3
    5388:	d02f      	beq.n	53ea <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	3304      	adds	r3, #4
    538e:	4618      	mov	r0, r3
    5390:	f7fe fb2e 	bl	39f0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5394:	68fb      	ldr	r3, [r7, #12]
    5396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5398:	68fb      	ldr	r3, [r7, #12]
    539a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    539c:	68fb      	ldr	r3, [r7, #12]
    539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53a0:	f1c3 0214 	rsb	r2, r3, #20
    53a4:	68fb      	ldr	r3, [r7, #12]
    53a6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    53a8:	68fb      	ldr	r3, [r7, #12]
    53aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53ac:	f240 53c0 	movw	r3, #1472	; 0x5c0
    53b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	429a      	cmp	r2, r3
    53b8:	d906      	bls.n	53c8 <vTaskPriorityDisinherit+0x5c>
    53ba:	68fb      	ldr	r3, [r7, #12]
    53bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53be:	f240 53c0 	movw	r3, #1472	; 0x5c0
    53c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c6:	601a      	str	r2, [r3, #0]
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53cc:	4613      	mov	r3, r2
    53ce:	009b      	lsls	r3, r3, #2
    53d0:	4413      	add	r3, r2
    53d2:	009b      	lsls	r3, r3, #2
    53d4:	f240 32b4 	movw	r2, #948	; 0x3b4
    53d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53dc:	441a      	add	r2, r3
    53de:	68fb      	ldr	r3, [r7, #12]
    53e0:	3304      	adds	r3, #4
    53e2:	4610      	mov	r0, r2
    53e4:	4619      	mov	r1, r3
    53e6:	f7fe faa3 	bl	3930 <vListInsertEnd>
			}
		}
	}
    53ea:	3710      	adds	r7, #16
    53ec:	46bd      	mov	sp, r7
    53ee:	bd80      	pop	{r7, pc}

000053f0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    53f0:	b480      	push	{r7}
    53f2:	b083      	sub	sp, #12
    53f4:	af00      	add	r7, sp, #0
    53f6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    53fc:	4618      	mov	r0, r3
    53fe:	370c      	adds	r7, #12
    5400:	46bd      	mov	sp, r7
    5402:	f85d 7b04 	ldr.w	r7, [sp], #4
    5406:	4770      	bx	lr

00005408 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5408:	b480      	push	{r7}
    540a:	b083      	sub	sp, #12
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5414:	4618      	mov	r0, r3
    5416:	370c      	adds	r7, #12
    5418:	46bd      	mov	sp, r7
    541a:	f85d 7b04 	ldr.w	r7, [sp], #4
    541e:	4770      	bx	lr

00005420 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5420:	b480      	push	{r7}
    5422:	b083      	sub	sp, #12
    5424:	af00      	add	r7, sp, #0
    5426:	6078      	str	r0, [r7, #4]
    5428:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    542a:	687b      	ldr	r3, [r7, #4]
    542c:	683a      	ldr	r2, [r7, #0]
    542e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5430:	370c      	adds	r7, #12
    5432:	46bd      	mov	sp, r7
    5434:	f85d 7b04 	ldr.w	r7, [sp], #4
    5438:	4770      	bx	lr
    543a:	bf00      	nop

0000543c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    543c:	b480      	push	{r7}
    543e:	b083      	sub	sp, #12
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
    5444:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	683a      	ldr	r2, [r7, #0]
    544a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    544c:	370c      	adds	r7, #12
    544e:	46bd      	mov	sp, r7
    5450:	f85d 7b04 	ldr.w	r7, [sp], #4
    5454:	4770      	bx	lr
    5456:	bf00      	nop

00005458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5458:	b480      	push	{r7}
    545a:	b085      	sub	sp, #20
    545c:	af00      	add	r7, sp, #0
    545e:	60f8      	str	r0, [r7, #12]
    5460:	60b9      	str	r1, [r7, #8]
    5462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	3b04      	subs	r3, #4
    5468:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    546a:	68fb      	ldr	r3, [r7, #12]
    546c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5472:	68fb      	ldr	r3, [r7, #12]
    5474:	3b04      	subs	r3, #4
    5476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5478:	68ba      	ldr	r2, [r7, #8]
    547a:	68fb      	ldr	r3, [r7, #12]
    547c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    547e:	68fb      	ldr	r3, [r7, #12]
    5480:	3b04      	subs	r3, #4
    5482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5484:	68fb      	ldr	r3, [r7, #12]
    5486:	2200      	movs	r2, #0
    5488:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    548a:	68fb      	ldr	r3, [r7, #12]
    548c:	3b14      	subs	r3, #20
    548e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5490:	687a      	ldr	r2, [r7, #4]
    5492:	68fb      	ldr	r3, [r7, #12]
    5494:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5496:	68fb      	ldr	r3, [r7, #12]
    5498:	3b20      	subs	r3, #32
    549a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    549c:	68fb      	ldr	r3, [r7, #12]
}
    549e:	4618      	mov	r0, r3
    54a0:	3714      	adds	r7, #20
    54a2:	46bd      	mov	sp, r7
    54a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a8:	4770      	bx	lr
    54aa:	bf00      	nop

000054ac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    54ac:	4b06      	ldr	r3, [pc, #24]	; (54c8 <pxCurrentTCBConst2>)
    54ae:	6819      	ldr	r1, [r3, #0]
    54b0:	6808      	ldr	r0, [r1, #0]
    54b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    54b6:	f380 8809 	msr	PSP, r0
    54ba:	f04f 0000 	mov.w	r0, #0
    54be:	f380 8811 	msr	BASEPRI, r0
    54c2:	f04e 0e0d 	orr.w	lr, lr, #13
    54c6:	4770      	bx	lr

000054c8 <pxCurrentTCBConst2>:
    54c8:	200003b0 	.word	0x200003b0

000054cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    54cc:	485d      	ldr	r0, [pc, #372]	; (5644 <prvSetupTimerInterrupt+0x2c>)
    54ce:	6800      	ldr	r0, [r0, #0]
    54d0:	6800      	ldr	r0, [r0, #0]
    54d2:	f380 8808 	msr	MSP, r0
    54d6:	b662      	cpsie	i
    54d8:	df00      	svc	0
    54da:	bf00      	nop

000054dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    54dc:	b580      	push	{r7, lr}
    54de:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    54e0:	f64e 5320 	movw	r3, #60704	; 0xed20
    54e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    54e8:	f64e 5220 	movw	r2, #60704	; 0xed20
    54ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    54f0:	6812      	ldr	r2, [r2, #0]
    54f2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    54f6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    54f8:	f64e 5320 	movw	r3, #60704	; 0xed20
    54fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5500:	f64e 5220 	movw	r2, #60704	; 0xed20
    5504:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    550e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5510:	f000 f882 	bl	5618 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5514:	f240 0378 	movw	r3, #120	; 0x78
    5518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551c:	2200      	movs	r2, #0
    551e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5520:	f7ff ffd4 	bl	54cc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5524:	2300      	movs	r3, #0
}
    5526:	4618      	mov	r0, r3
    5528:	bd80      	pop	{r7, pc}
    552a:	bf00      	nop

0000552c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    552c:	b480      	push	{r7}
    552e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5530:	46bd      	mov	sp, r7
    5532:	f85d 7b04 	ldr.w	r7, [sp], #4
    5536:	4770      	bx	lr

00005538 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5538:	b480      	push	{r7}
    553a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    553c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5540:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5548:	601a      	str	r2, [r3, #0]
}
    554a:	46bd      	mov	sp, r7
    554c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5550:	4770      	bx	lr
    5552:	bf00      	nop

00005554 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5554:	b480      	push	{r7}
    5556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5558:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    555c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5560:	f240 0378 	movw	r3, #120	; 0x78
    5564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5568:	681b      	ldr	r3, [r3, #0]
    556a:	1c5a      	adds	r2, r3, #1
    556c:	f240 0378 	movw	r3, #120	; 0x78
    5570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5574:	601a      	str	r2, [r3, #0]
}
    5576:	46bd      	mov	sp, r7
    5578:	f85d 7b04 	ldr.w	r7, [sp], #4
    557c:	4770      	bx	lr
    557e:	bf00      	nop

00005580 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5580:	b480      	push	{r7}
    5582:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5584:	f240 0378 	movw	r3, #120	; 0x78
    5588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	1e5a      	subs	r2, r3, #1
    5590:	f240 0378 	movw	r3, #120	; 0x78
    5594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5598:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    559a:	f240 0378 	movw	r3, #120	; 0x78
    559e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	2b00      	cmp	r3, #0
    55a6:	d103      	bne.n	55b0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    55a8:	f04f 0000 	mov.w	r0, #0
    55ac:	f380 8811 	msr	BASEPRI, r0
	}
}
    55b0:	46bd      	mov	sp, r7
    55b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b6:	4770      	bx	lr

000055b8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    55b8:	f3ef 8009 	mrs	r0, PSP
    55bc:	4b0c      	ldr	r3, [pc, #48]	; (55f0 <pxCurrentTCBConst>)
    55be:	681a      	ldr	r2, [r3, #0]
    55c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    55c4:	6010      	str	r0, [r2, #0]
    55c6:	e92d 4008 	stmdb	sp!, {r3, lr}
    55ca:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    55ce:	f380 8811 	msr	BASEPRI, r0
    55d2:	f7ff fba1 	bl	4d18 <vTaskSwitchContext>
    55d6:	f04f 0000 	mov.w	r0, #0
    55da:	f380 8811 	msr	BASEPRI, r0
    55de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    55e2:	6819      	ldr	r1, [r3, #0]
    55e4:	6808      	ldr	r0, [r1, #0]
    55e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    55ea:	f380 8809 	msr	PSP, r0
    55ee:	4770      	bx	lr

000055f0 <pxCurrentTCBConst>:
    55f0:	200003b0 	.word	0x200003b0

000055f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b082      	sub	sp, #8
    55f8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    55fa:	2300      	movs	r3, #0
    55fc:	607b      	str	r3, [r7, #4]
    55fe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5602:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5606:	f7ff faa9 	bl	4b5c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    560a:	f04f 0000 	mov.w	r0, #0
    560e:	f380 8811 	msr	BASEPRI, r0
}
    5612:	3708      	adds	r7, #8
    5614:	46bd      	mov	sp, r7
    5616:	bd80      	pop	{r7, pc}

00005618 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5618:	b480      	push	{r7}
    561a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    561c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5620:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5624:	f641 123f 	movw	r2, #6463	; 0x193f
    5628:	f2c0 0201 	movt	r2, #1
    562c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    562e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5632:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5636:	2207      	movs	r2, #7
    5638:	601a      	str	r2, [r3, #0]
}
    563a:	46bd      	mov	sp, r7
    563c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5640:	4770      	bx	lr
    5642:	0000      	.short	0x0000
    5644:	e000ed08 	.word	0xe000ed08

00005648 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5648:	b580      	push	{r7, lr}
    564a:	b08a      	sub	sp, #40	; 0x28
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5650:	2300      	movs	r3, #0
    5652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5654:	f7ff f9a0 	bl	4998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5658:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    565c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	2b00      	cmp	r3, #0
    5664:	d130      	bne.n	56c8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5666:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    566a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    566e:	f240 52e0 	movw	r2, #1504	; 0x5e0
    5672:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5676:	601a      	str	r2, [r3, #0]
    5678:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    567c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5680:	2200      	movs	r2, #0
    5682:	605a      	str	r2, [r3, #4]
    5684:	f24a 53e8 	movw	r3, #42472	; 0xa5e8
    5688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5690:	605a      	str	r2, [r3, #4]
    5692:	f24a 53e8 	movw	r3, #42472	; 0xa5e8
    5696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569a:	2200      	movs	r2, #0
    569c:	601a      	str	r2, [r3, #0]
    569e:	f240 53e0 	movw	r3, #1504	; 0x5e0
    56a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a6:	617b      	str	r3, [r7, #20]
    56a8:	697b      	ldr	r3, [r7, #20]
    56aa:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    56ae:	605a      	str	r2, [r3, #4]
    56b0:	697a      	ldr	r2, [r7, #20]
    56b2:	f24a 53e8 	movw	r3, #42472	; 0xa5e8
    56b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ba:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    56bc:	f24a 53f0 	movw	r3, #42480	; 0xa5f0
    56c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c4:	2201      	movs	r2, #1
    56c6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d00d      	beq.n	56ea <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    56ce:	2310      	movs	r3, #16
    56d0:	687a      	ldr	r2, [r7, #4]
    56d2:	4413      	add	r3, r2
    56d4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	f003 0307 	and.w	r3, r3, #7
    56dc:	2b00      	cmp	r3, #0
    56de:	d004      	beq.n	56ea <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	f023 0307 	bic.w	r3, r3, #7
    56e6:	3308      	adds	r3, #8
    56e8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	2b00      	cmp	r3, #0
    56ee:	d068      	beq.n	57c2 <pvPortMalloc+0x17a>
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    56f6:	d264      	bcs.n	57c2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    56f8:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    56fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5700:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5702:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    5706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    570e:	e004      	b.n	571a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5712:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    571c:	685a      	ldr	r2, [r3, #4]
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	429a      	cmp	r2, r3
    5722:	d203      	bcs.n	572c <pvPortMalloc+0xe4>
    5724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	2b00      	cmp	r3, #0
    572a:	d1f1      	bne.n	5710 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    572e:	f24a 53e8 	movw	r3, #42472	; 0xa5e8
    5732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5736:	429a      	cmp	r2, r3
    5738:	d043      	beq.n	57c2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    573a:	6a3b      	ldr	r3, [r7, #32]
    573c:	681a      	ldr	r2, [r3, #0]
    573e:	2310      	movs	r3, #16
    5740:	4413      	add	r3, r2
    5742:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5746:	681a      	ldr	r2, [r3, #0]
    5748:	6a3b      	ldr	r3, [r7, #32]
    574a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    574e:	685a      	ldr	r2, [r3, #4]
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	1ad2      	subs	r2, r2, r3
    5754:	2310      	movs	r3, #16
    5756:	005b      	lsls	r3, r3, #1
    5758:	429a      	cmp	r2, r3
    575a:	d925      	bls.n	57a8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	4413      	add	r3, r2
    5762:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5766:	685a      	ldr	r2, [r3, #4]
    5768:	687b      	ldr	r3, [r7, #4]
    576a:	1ad2      	subs	r2, r2, r3
    576c:	693b      	ldr	r3, [r7, #16]
    576e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5772:	687a      	ldr	r2, [r7, #4]
    5774:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5776:	693b      	ldr	r3, [r7, #16]
    5778:	685b      	ldr	r3, [r3, #4]
    577a:	60fb      	str	r3, [r7, #12]
    577c:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    5780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5784:	61bb      	str	r3, [r7, #24]
    5786:	e002      	b.n	578e <pvPortMalloc+0x146>
    5788:	69bb      	ldr	r3, [r7, #24]
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	61bb      	str	r3, [r7, #24]
    578e:	69bb      	ldr	r3, [r7, #24]
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	685a      	ldr	r2, [r3, #4]
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	429a      	cmp	r2, r3
    5798:	d3f6      	bcc.n	5788 <pvPortMalloc+0x140>
    579a:	69bb      	ldr	r3, [r7, #24]
    579c:	681a      	ldr	r2, [r3, #0]
    579e:	693b      	ldr	r3, [r7, #16]
    57a0:	601a      	str	r2, [r3, #0]
    57a2:	69bb      	ldr	r3, [r7, #24]
    57a4:	693a      	ldr	r2, [r7, #16]
    57a6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    57a8:	f240 037c 	movw	r3, #124	; 0x7c
    57ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57b0:	681a      	ldr	r2, [r3, #0]
    57b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57b4:	685b      	ldr	r3, [r3, #4]
    57b6:	1ad2      	subs	r2, r2, r3
    57b8:	f240 037c 	movw	r3, #124	; 0x7c
    57bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    57c2:	f7ff f8fb 	bl	49bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    57c6:	69fb      	ldr	r3, [r7, #28]
}
    57c8:	4618      	mov	r0, r3
    57ca:	3728      	adds	r7, #40	; 0x28
    57cc:	46bd      	mov	sp, r7
    57ce:	bd80      	pop	{r7, pc}

000057d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    57d0:	b580      	push	{r7, lr}
    57d2:	b086      	sub	sp, #24
    57d4:	af00      	add	r7, sp, #0
    57d6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    57dc:	687b      	ldr	r3, [r7, #4]
    57de:	2b00      	cmp	r3, #0
    57e0:	d030      	beq.n	5844 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    57e2:	2310      	movs	r3, #16
    57e4:	425b      	negs	r3, r3
    57e6:	693a      	ldr	r2, [r7, #16]
    57e8:	4413      	add	r3, r2
    57ea:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    57ec:	693b      	ldr	r3, [r7, #16]
    57ee:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    57f0:	f7ff f8d2 	bl	4998 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    57f4:	68fb      	ldr	r3, [r7, #12]
    57f6:	685b      	ldr	r3, [r3, #4]
    57f8:	60bb      	str	r3, [r7, #8]
    57fa:	f24a 53e0 	movw	r3, #42464	; 0xa5e0
    57fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5802:	617b      	str	r3, [r7, #20]
    5804:	e002      	b.n	580c <vPortFree+0x3c>
    5806:	697b      	ldr	r3, [r7, #20]
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	617b      	str	r3, [r7, #20]
    580c:	697b      	ldr	r3, [r7, #20]
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	685a      	ldr	r2, [r3, #4]
    5812:	68bb      	ldr	r3, [r7, #8]
    5814:	429a      	cmp	r2, r3
    5816:	d3f6      	bcc.n	5806 <vPortFree+0x36>
    5818:	697b      	ldr	r3, [r7, #20]
    581a:	681a      	ldr	r2, [r3, #0]
    581c:	68fb      	ldr	r3, [r7, #12]
    581e:	601a      	str	r2, [r3, #0]
    5820:	697b      	ldr	r3, [r7, #20]
    5822:	68fa      	ldr	r2, [r7, #12]
    5824:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	685a      	ldr	r2, [r3, #4]
    582a:	f240 037c 	movw	r3, #124	; 0x7c
    582e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	441a      	add	r2, r3
    5836:	f240 037c 	movw	r3, #124	; 0x7c
    583a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5840:	f7ff f8bc 	bl	49bc <xTaskResumeAll>
	}
}
    5844:	3718      	adds	r7, #24
    5846:	46bd      	mov	sp, r7
    5848:	bd80      	pop	{r7, pc}
    584a:	bf00      	nop

0000584c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    584c:	b480      	push	{r7}
    584e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5850:	f240 037c 	movw	r3, #124	; 0x7c
    5854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5858:	681b      	ldr	r3, [r3, #0]
}
    585a:	4618      	mov	r0, r3
    585c:	46bd      	mov	sp, r7
    585e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5862:	4770      	bx	lr

00005864 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5864:	b480      	push	{r7}
    5866:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5868:	46bd      	mov	sp, r7
    586a:	f85d 7b04 	ldr.w	r7, [sp], #4
    586e:	4770      	bx	lr

00005870 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5870:	b580      	push	{r7, lr}
    5872:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5874:	f24a 6312 	movw	r3, #42514	; 0xa612
    5878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587c:	781b      	ldrb	r3, [r3, #0]
    587e:	2b00      	cmp	r3, #0
    5880:	f040 815d 	bne.w	5b3e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5884:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
    5888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588c:	881b      	ldrh	r3, [r3, #0]
    588e:	2b09      	cmp	r3, #9
    5890:	f201 8145 	bhi.w	6b1e <ground_calibrate+0x12ae>
    5894:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    5898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589c:	781b      	ldrb	r3, [r3, #0]
    589e:	2b01      	cmp	r3, #1
    58a0:	f041 813d 	bne.w	6b1e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    58a4:	f24a 6312 	movw	r3, #42514	; 0xa612
    58a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ac:	2201      	movs	r2, #1
    58ae:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    58b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    58b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b8:	781a      	ldrb	r2, [r3, #0]
    58ba:	f24a 631a 	movw	r3, #42522	; 0xa61a
    58be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	b2db      	uxtb	r3, r3
    58c6:	429a      	cmp	r2, r3
    58c8:	d313      	bcc.n	58f2 <ground_calibrate+0x82>
    58ca:	f24a 631a 	movw	r3, #42522	; 0xa61a
    58ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d2:	781b      	ldrb	r3, [r3, #0]
    58d4:	b2db      	uxtb	r3, r3
    58d6:	461a      	mov	r2, r3
    58d8:	f24a 6319 	movw	r3, #42521	; 0xa619
    58dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e0:	781b      	ldrb	r3, [r3, #0]
    58e2:	1ad3      	subs	r3, r2, r3
    58e4:	33ff      	adds	r3, #255	; 0xff
    58e6:	2b04      	cmp	r3, #4
    58e8:	bfd4      	ite	le
    58ea:	2300      	movle	r3, #0
    58ec:	2301      	movgt	r3, #1
    58ee:	b2db      	uxtb	r3, r3
    58f0:	e011      	b.n	5916 <ground_calibrate+0xa6>
    58f2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    58f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58fa:	781b      	ldrb	r3, [r3, #0]
    58fc:	b2db      	uxtb	r3, r3
    58fe:	461a      	mov	r2, r3
    5900:	f24a 6319 	movw	r3, #42521	; 0xa619
    5904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	1ad3      	subs	r3, r2, r3
    590c:	2b04      	cmp	r3, #4
    590e:	bfd4      	ite	le
    5910:	2300      	movle	r3, #0
    5912:	2301      	movgt	r3, #1
    5914:	b2db      	uxtb	r3, r3
    5916:	2b00      	cmp	r3, #0
    5918:	f000 8103 	beq.w	5b22 <ground_calibrate+0x2b2>
    591c:	f24a 6319 	movw	r3, #42521	; 0xa619
    5920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	461a      	mov	r2, r3
    5928:	f24a 631c 	movw	r3, #42524	; 0xa61c
    592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5930:	2105      	movs	r1, #5
    5932:	5499      	strb	r1, [r3, r2]
    5934:	f24a 6319 	movw	r3, #42521	; 0xa619
    5938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	3301      	adds	r3, #1
    5940:	b2da      	uxtb	r2, r3
    5942:	f24a 6319 	movw	r3, #42521	; 0xa619
    5946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594a:	701a      	strb	r2, [r3, #0]
    594c:	f24a 6319 	movw	r3, #42521	; 0xa619
    5950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	2bff      	cmp	r3, #255	; 0xff
    5958:	d105      	bne.n	5966 <ground_calibrate+0xf6>
    595a:	f24a 6319 	movw	r3, #42521	; 0xa619
    595e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5962:	2200      	movs	r2, #0
    5964:	701a      	strb	r2, [r3, #0]
    5966:	f24a 6319 	movw	r3, #42521	; 0xa619
    596a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596e:	781b      	ldrb	r3, [r3, #0]
    5970:	461a      	mov	r2, r3
    5972:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597a:	2102      	movs	r1, #2
    597c:	5499      	strb	r1, [r3, r2]
    597e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	3301      	adds	r3, #1
    598a:	b2da      	uxtb	r2, r3
    598c:	f24a 6319 	movw	r3, #42521	; 0xa619
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	701a      	strb	r2, [r3, #0]
    5996:	f24a 6319 	movw	r3, #42521	; 0xa619
    599a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	2bff      	cmp	r3, #255	; 0xff
    59a2:	d105      	bne.n	59b0 <ground_calibrate+0x140>
    59a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    59a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ac:	2200      	movs	r2, #0
    59ae:	701a      	strb	r2, [r3, #0]
    59b0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    59b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b8:	2202      	movs	r2, #2
    59ba:	701a      	strb	r2, [r3, #0]
    59bc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    59c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c4:	2202      	movs	r2, #2
    59c6:	701a      	strb	r2, [r3, #0]
    59c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    59cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	461a      	mov	r2, r3
    59d4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	7819      	ldrb	r1, [r3, #0]
    59de:	f24a 631c 	movw	r3, #42524	; 0xa61c
    59e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e6:	5499      	strb	r1, [r3, r2]
    59e8:	f24a 6319 	movw	r3, #42521	; 0xa619
    59ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	3301      	adds	r3, #1
    59f4:	b2da      	uxtb	r2, r3
    59f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    59fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59fe:	701a      	strb	r2, [r3, #0]
    5a00:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	2bff      	cmp	r3, #255	; 0xff
    5a0c:	d105      	bne.n	5a1a <ground_calibrate+0x1aa>
    5a0e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	2200      	movs	r2, #0
    5a18:	701a      	strb	r2, [r3, #0]
    5a1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a22:	781b      	ldrb	r3, [r3, #0]
    5a24:	461a      	mov	r2, r3
    5a26:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2e:	7819      	ldrb	r1, [r3, #0]
    5a30:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a38:	5499      	strb	r1, [r3, r2]
    5a3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	3301      	adds	r3, #1
    5a46:	b2da      	uxtb	r2, r3
    5a48:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a50:	701a      	strb	r2, [r3, #0]
    5a52:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	2bff      	cmp	r3, #255	; 0xff
    5a5e:	d105      	bne.n	5a6c <ground_calibrate+0x1fc>
    5a60:	f24a 6319 	movw	r3, #42521	; 0xa619
    5a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a68:	2200      	movs	r2, #0
    5a6a:	701a      	strb	r2, [r3, #0]
    5a6c:	f242 0339 	movw	r3, #8249	; 0x2039
    5a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a74:	781b      	ldrb	r3, [r3, #0]
    5a76:	b2db      	uxtb	r3, r3
    5a78:	f003 0310 	and.w	r3, r3, #16
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	f041 804e 	bne.w	6b1e <ground_calibrate+0x12ae>
    5a82:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	b2db      	uxtb	r3, r3
    5a8e:	461a      	mov	r2, r3
    5a90:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a98:	5c9a      	ldrb	r2, [r3, r2]
    5a9a:	f24a 731b 	movw	r3, #42779	; 0xa71b
    5a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa2:	701a      	strb	r2, [r3, #0]
    5aa4:	f24a 731c 	movw	r3, #42780	; 0xa71c
    5aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aac:	2200      	movs	r2, #0
    5aae:	701a      	strb	r2, [r3, #0]
    5ab0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab8:	781b      	ldrb	r3, [r3, #0]
    5aba:	b2db      	uxtb	r3, r3
    5abc:	3301      	adds	r3, #1
    5abe:	b2da      	uxtb	r2, r3
    5ac0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac8:	701a      	strb	r2, [r3, #0]
    5aca:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad2:	781b      	ldrb	r3, [r3, #0]
    5ad4:	b2db      	uxtb	r3, r3
    5ad6:	2bff      	cmp	r3, #255	; 0xff
    5ad8:	d105      	bne.n	5ae6 <ground_calibrate+0x276>
    5ada:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae2:	2200      	movs	r2, #0
    5ae4:	701a      	strb	r2, [r3, #0]
    5ae6:	f242 0338 	movw	r3, #8248	; 0x2038
    5aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aee:	f242 0238 	movw	r2, #8248	; 0x2038
    5af2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5af6:	7812      	ldrb	r2, [r2, #0]
    5af8:	b2d2      	uxtb	r2, r2
    5afa:	f042 0201 	orr.w	r2, r2, #1
    5afe:	b2d2      	uxtb	r2, r2
    5b00:	701a      	strb	r2, [r3, #0]
    5b02:	f242 0339 	movw	r3, #8249	; 0x2039
    5b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0a:	f242 0239 	movw	r2, #8249	; 0x2039
    5b0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b12:	7812      	ldrb	r2, [r2, #0]
    5b14:	b2d2      	uxtb	r2, r2
    5b16:	f042 0210 	orr.w	r2, r2, #16
    5b1a:	b2d2      	uxtb	r2, r2
    5b1c:	701a      	strb	r2, [r3, #0]
    5b1e:	f000 bffe 	b.w	6b1e <ground_calibrate+0x12ae>
    5b22:	f24a 6318 	movw	r3, #42520	; 0xa618
    5b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	3301      	adds	r3, #1
    5b2e:	b2da      	uxtb	r2, r3
    5b30:	f24a 6318 	movw	r3, #42520	; 0xa618
    5b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b38:	701a      	strb	r2, [r3, #0]
    5b3a:	f000 bff0 	b.w	6b1e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5b3e:	f24a 6312 	movw	r3, #42514	; 0xa612
    5b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b46:	781b      	ldrb	r3, [r3, #0]
    5b48:	2b01      	cmp	r3, #1
    5b4a:	f040 87e8 	bne.w	6b1e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5b4e:	f24a 7320 	movw	r3, #42784	; 0xa720
    5b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b56:	885b      	ldrh	r3, [r3, #2]
    5b58:	b21b      	sxth	r3, r3
    5b5a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5b5e:	db09      	blt.n	5b74 <ground_calibrate+0x304>
    5b60:	f24a 7320 	movw	r3, #42784	; 0xa720
    5b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b68:	885b      	ldrh	r3, [r3, #2]
    5b6a:	b21b      	sxth	r3, r3
    5b6c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5b70:	f340 87d5 	ble.w	6b1e <ground_calibrate+0x12ae>
      ir_gain_calib();
    5b74:	f00b fcfc 	bl	11570 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5b78:	f240 038c 	movw	r3, #140	; 0x8c
    5b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b80:	681a      	ldr	r2, [r3, #0]
    5b82:	f64a 430c 	movw	r3, #44044	; 0xac0c
    5b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5b8c:	f24a 6319 	movw	r3, #42521	; 0xa619
    5b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b94:	781a      	ldrb	r2, [r3, #0]
    5b96:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	429a      	cmp	r2, r3
    5ba4:	d313      	bcc.n	5bce <ground_calibrate+0x35e>
    5ba6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bae:	781b      	ldrb	r3, [r3, #0]
    5bb0:	b2db      	uxtb	r3, r3
    5bb2:	461a      	mov	r2, r3
    5bb4:	f24a 6319 	movw	r3, #42521	; 0xa619
    5bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	1ad3      	subs	r3, r2, r3
    5bc0:	33ff      	adds	r3, #255	; 0xff
    5bc2:	2b14      	cmp	r3, #20
    5bc4:	bfd4      	ite	le
    5bc6:	2300      	movle	r3, #0
    5bc8:	2301      	movgt	r3, #1
    5bca:	b2db      	uxtb	r3, r3
    5bcc:	e011      	b.n	5bf2 <ground_calibrate+0x382>
    5bce:	f24a 631a 	movw	r3, #42522	; 0xa61a
    5bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd6:	781b      	ldrb	r3, [r3, #0]
    5bd8:	b2db      	uxtb	r3, r3
    5bda:	461a      	mov	r2, r3
    5bdc:	f24a 6319 	movw	r3, #42521	; 0xa619
    5be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be4:	781b      	ldrb	r3, [r3, #0]
    5be6:	1ad3      	subs	r3, r2, r3
    5be8:	2b14      	cmp	r3, #20
    5bea:	bfd4      	ite	le
    5bec:	2300      	movle	r3, #0
    5bee:	2301      	movgt	r3, #1
    5bf0:	b2db      	uxtb	r3, r3
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	f000 85a6 	beq.w	6744 <ground_calibrate+0xed4>
    5bf8:	f24a 6319 	movw	r3, #42521	; 0xa619
    5bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c00:	781b      	ldrb	r3, [r3, #0]
    5c02:	461a      	mov	r2, r3
    5c04:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c0c:	2105      	movs	r1, #5
    5c0e:	5499      	strb	r1, [r3, r2]
    5c10:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	3301      	adds	r3, #1
    5c1c:	b2da      	uxtb	r2, r3
    5c1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c26:	701a      	strb	r2, [r3, #0]
    5c28:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	2bff      	cmp	r3, #255	; 0xff
    5c34:	d105      	bne.n	5c42 <ground_calibrate+0x3d2>
    5c36:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c3e:	2200      	movs	r2, #0
    5c40:	701a      	strb	r2, [r3, #0]
    5c42:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	461a      	mov	r2, r3
    5c4e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c56:	2105      	movs	r1, #5
    5c58:	5499      	strb	r1, [r3, r2]
    5c5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c62:	781b      	ldrb	r3, [r3, #0]
    5c64:	3301      	adds	r3, #1
    5c66:	b2da      	uxtb	r2, r3
    5c68:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c70:	701a      	strb	r2, [r3, #0]
    5c72:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c7a:	781b      	ldrb	r3, [r3, #0]
    5c7c:	2bff      	cmp	r3, #255	; 0xff
    5c7e:	d105      	bne.n	5c8c <ground_calibrate+0x41c>
    5c80:	f24a 6319 	movw	r3, #42521	; 0xa619
    5c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c88:	2200      	movs	r2, #0
    5c8a:	701a      	strb	r2, [r3, #0]
    5c8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c94:	2205      	movs	r2, #5
    5c96:	701a      	strb	r2, [r3, #0]
    5c98:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca0:	2205      	movs	r2, #5
    5ca2:	701a      	strb	r2, [r3, #0]
    5ca4:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	461a      	mov	r2, r3
    5cb0:	f64a 4310 	movw	r3, #44048	; 0xac10
    5cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb8:	7819      	ldrb	r1, [r3, #0]
    5cba:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc2:	5499      	strb	r1, [r3, r2]
    5cc4:	f64a 4310 	movw	r3, #44048	; 0xac10
    5cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ccc:	781a      	ldrb	r2, [r3, #0]
    5cce:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd6:	781b      	ldrb	r3, [r3, #0]
    5cd8:	4413      	add	r3, r2
    5cda:	b2da      	uxtb	r2, r3
    5cdc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce4:	701a      	strb	r2, [r3, #0]
    5ce6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cee:	781a      	ldrb	r2, [r3, #0]
    5cf0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf8:	781b      	ldrb	r3, [r3, #0]
    5cfa:	4413      	add	r3, r2
    5cfc:	b2da      	uxtb	r2, r3
    5cfe:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d06:	701a      	strb	r2, [r3, #0]
    5d08:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	3301      	adds	r3, #1
    5d14:	b2da      	uxtb	r2, r3
    5d16:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1e:	701a      	strb	r2, [r3, #0]
    5d20:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d28:	781b      	ldrb	r3, [r3, #0]
    5d2a:	2bff      	cmp	r3, #255	; 0xff
    5d2c:	d105      	bne.n	5d3a <ground_calibrate+0x4ca>
    5d2e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d36:	2200      	movs	r2, #0
    5d38:	701a      	strb	r2, [r3, #0]
    5d3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d42:	781b      	ldrb	r3, [r3, #0]
    5d44:	461a      	mov	r2, r3
    5d46:	f64a 4310 	movw	r3, #44048	; 0xac10
    5d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d4e:	7859      	ldrb	r1, [r3, #1]
    5d50:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d58:	5499      	strb	r1, [r3, r2]
    5d5a:	4bd2      	ldr	r3, [pc, #840]	; (60a4 <ground_calibrate+0x834>)
    5d5c:	781a      	ldrb	r2, [r3, #0]
    5d5e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	4413      	add	r3, r2
    5d6a:	b2da      	uxtb	r2, r3
    5d6c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	701a      	strb	r2, [r3, #0]
    5d76:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d7e:	781a      	ldrb	r2, [r3, #0]
    5d80:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	4413      	add	r3, r2
    5d8c:	b2da      	uxtb	r2, r3
    5d8e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d96:	701a      	strb	r2, [r3, #0]
    5d98:	f24a 6319 	movw	r3, #42521	; 0xa619
    5d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	3301      	adds	r3, #1
    5da4:	b2da      	uxtb	r2, r3
    5da6:	f24a 6319 	movw	r3, #42521	; 0xa619
    5daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dae:	701a      	strb	r2, [r3, #0]
    5db0:	f24a 6319 	movw	r3, #42521	; 0xa619
    5db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	2bff      	cmp	r3, #255	; 0xff
    5dbc:	d105      	bne.n	5dca <ground_calibrate+0x55a>
    5dbe:	f24a 6319 	movw	r3, #42521	; 0xa619
    5dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc6:	2200      	movs	r2, #0
    5dc8:	701a      	strb	r2, [r3, #0]
    5dca:	f24a 6319 	movw	r3, #42521	; 0xa619
    5dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd2:	781b      	ldrb	r3, [r3, #0]
    5dd4:	461a      	mov	r2, r3
    5dd6:	f64a 4310 	movw	r3, #44048	; 0xac10
    5dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dde:	7899      	ldrb	r1, [r3, #2]
    5de0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de8:	5499      	strb	r1, [r3, r2]
    5dea:	4baf      	ldr	r3, [pc, #700]	; (60a8 <ground_calibrate+0x838>)
    5dec:	781a      	ldrb	r2, [r3, #0]
    5dee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	4413      	add	r3, r2
    5dfa:	b2da      	uxtb	r2, r3
    5dfc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e04:	701a      	strb	r2, [r3, #0]
    5e06:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0e:	781a      	ldrb	r2, [r3, #0]
    5e10:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e18:	781b      	ldrb	r3, [r3, #0]
    5e1a:	4413      	add	r3, r2
    5e1c:	b2da      	uxtb	r2, r3
    5e1e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e26:	701a      	strb	r2, [r3, #0]
    5e28:	f24a 6319 	movw	r3, #42521	; 0xa619
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	3301      	adds	r3, #1
    5e34:	b2da      	uxtb	r2, r3
    5e36:	f24a 6319 	movw	r3, #42521	; 0xa619
    5e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3e:	701a      	strb	r2, [r3, #0]
    5e40:	f24a 6319 	movw	r3, #42521	; 0xa619
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	781b      	ldrb	r3, [r3, #0]
    5e4a:	2bff      	cmp	r3, #255	; 0xff
    5e4c:	d105      	bne.n	5e5a <ground_calibrate+0x5ea>
    5e4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e56:	2200      	movs	r2, #0
    5e58:	701a      	strb	r2, [r3, #0]
    5e5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    5e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e62:	781b      	ldrb	r3, [r3, #0]
    5e64:	461a      	mov	r2, r3
    5e66:	f64a 4310 	movw	r3, #44048	; 0xac10
    5e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e6e:	78d9      	ldrb	r1, [r3, #3]
    5e70:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e78:	5499      	strb	r1, [r3, r2]
    5e7a:	4b8c      	ldr	r3, [pc, #560]	; (60ac <ground_calibrate+0x83c>)
    5e7c:	781a      	ldrb	r2, [r3, #0]
    5e7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	4413      	add	r3, r2
    5e8a:	b2da      	uxtb	r2, r3
    5e8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e94:	701a      	strb	r2, [r3, #0]
    5e96:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9e:	781a      	ldrb	r2, [r3, #0]
    5ea0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea8:	781b      	ldrb	r3, [r3, #0]
    5eaa:	4413      	add	r3, r2
    5eac:	b2da      	uxtb	r2, r3
    5eae:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb6:	701a      	strb	r2, [r3, #0]
    5eb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec0:	781b      	ldrb	r3, [r3, #0]
    5ec2:	3301      	adds	r3, #1
    5ec4:	b2da      	uxtb	r2, r3
    5ec6:	f24a 6319 	movw	r3, #42521	; 0xa619
    5eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ece:	701a      	strb	r2, [r3, #0]
    5ed0:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	2bff      	cmp	r3, #255	; 0xff
    5edc:	d105      	bne.n	5eea <ground_calibrate+0x67a>
    5ede:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee6:	2200      	movs	r2, #0
    5ee8:	701a      	strb	r2, [r3, #0]
    5eea:	f24a 6319 	movw	r3, #42521	; 0xa619
    5eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	461a      	mov	r2, r3
    5ef6:	f64a 4314 	movw	r3, #44052	; 0xac14
    5efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efe:	7819      	ldrb	r1, [r3, #0]
    5f00:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f08:	5499      	strb	r1, [r3, r2]
    5f0a:	f64a 4314 	movw	r3, #44052	; 0xac14
    5f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f12:	781a      	ldrb	r2, [r3, #0]
    5f14:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1c:	781b      	ldrb	r3, [r3, #0]
    5f1e:	4413      	add	r3, r2
    5f20:	b2da      	uxtb	r2, r3
    5f22:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2a:	701a      	strb	r2, [r3, #0]
    5f2c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f34:	781a      	ldrb	r2, [r3, #0]
    5f36:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3e:	781b      	ldrb	r3, [r3, #0]
    5f40:	4413      	add	r3, r2
    5f42:	b2da      	uxtb	r2, r3
    5f44:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4c:	701a      	strb	r2, [r3, #0]
    5f4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    5f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f56:	781b      	ldrb	r3, [r3, #0]
    5f58:	3301      	adds	r3, #1
    5f5a:	b2da      	uxtb	r2, r3
    5f5c:	f24a 6319 	movw	r3, #42521	; 0xa619
    5f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f64:	701a      	strb	r2, [r3, #0]
    5f66:	f24a 6319 	movw	r3, #42521	; 0xa619
    5f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f6e:	781b      	ldrb	r3, [r3, #0]
    5f70:	2bff      	cmp	r3, #255	; 0xff
    5f72:	d105      	bne.n	5f80 <ground_calibrate+0x710>
    5f74:	f24a 6319 	movw	r3, #42521	; 0xa619
    5f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f7c:	2200      	movs	r2, #0
    5f7e:	701a      	strb	r2, [r3, #0]
    5f80:	f24a 6319 	movw	r3, #42521	; 0xa619
    5f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	461a      	mov	r2, r3
    5f8c:	f64a 4314 	movw	r3, #44052	; 0xac14
    5f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f94:	7859      	ldrb	r1, [r3, #1]
    5f96:	f24a 631c 	movw	r3, #42524	; 0xa61c
    5f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9e:	5499      	strb	r1, [r3, r2]
    5fa0:	4b43      	ldr	r3, [pc, #268]	; (60b0 <ground_calibrate+0x840>)
    5fa2:	781a      	ldrb	r2, [r3, #0]
    5fa4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	4413      	add	r3, r2
    5fb0:	b2da      	uxtb	r2, r3
    5fb2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fba:	701a      	strb	r2, [r3, #0]
    5fbc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc4:	781a      	ldrb	r2, [r3, #0]
    5fc6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    5fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	4413      	add	r3, r2
    5fd2:	b2da      	uxtb	r2, r3
    5fd4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	701a      	strb	r2, [r3, #0]
    5fde:	f24a 6319 	movw	r3, #42521	; 0xa619
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	3301      	adds	r3, #1
    5fea:	b2da      	uxtb	r2, r3
    5fec:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff4:	701a      	strb	r2, [r3, #0]
    5ff6:	f24a 6319 	movw	r3, #42521	; 0xa619
    5ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ffe:	781b      	ldrb	r3, [r3, #0]
    6000:	2bff      	cmp	r3, #255	; 0xff
    6002:	d105      	bne.n	6010 <ground_calibrate+0x7a0>
    6004:	f24a 6319 	movw	r3, #42521	; 0xa619
    6008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600c:	2200      	movs	r2, #0
    600e:	701a      	strb	r2, [r3, #0]
    6010:	f24a 6319 	movw	r3, #42521	; 0xa619
    6014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	461a      	mov	r2, r3
    601c:	f64a 4314 	movw	r3, #44052	; 0xac14
    6020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6024:	7899      	ldrb	r1, [r3, #2]
    6026:	f24a 631c 	movw	r3, #42524	; 0xa61c
    602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602e:	5499      	strb	r1, [r3, r2]
    6030:	4b20      	ldr	r3, [pc, #128]	; (60b4 <ground_calibrate+0x844>)
    6032:	781a      	ldrb	r2, [r3, #0]
    6034:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603c:	781b      	ldrb	r3, [r3, #0]
    603e:	4413      	add	r3, r2
    6040:	b2da      	uxtb	r2, r3
    6042:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604a:	701a      	strb	r2, [r3, #0]
    604c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6054:	781a      	ldrb	r2, [r3, #0]
    6056:	f24a 731d 	movw	r3, #42781	; 0xa71d
    605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605e:	781b      	ldrb	r3, [r3, #0]
    6060:	4413      	add	r3, r2
    6062:	b2da      	uxtb	r2, r3
    6064:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	701a      	strb	r2, [r3, #0]
    606e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	3301      	adds	r3, #1
    607a:	b2da      	uxtb	r2, r3
    607c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6084:	701a      	strb	r2, [r3, #0]
    6086:	f24a 6319 	movw	r3, #42521	; 0xa619
    608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	2bff      	cmp	r3, #255	; 0xff
    6092:	d111      	bne.n	60b8 <ground_calibrate+0x848>
    6094:	f24a 6319 	movw	r3, #42521	; 0xa619
    6098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609c:	2200      	movs	r2, #0
    609e:	701a      	strb	r2, [r3, #0]
    60a0:	e00a      	b.n	60b8 <ground_calibrate+0x848>
    60a2:	bf00      	nop
    60a4:	2000ac11 	.word	0x2000ac11
    60a8:	2000ac12 	.word	0x2000ac12
    60ac:	2000ac13 	.word	0x2000ac13
    60b0:	2000ac15 	.word	0x2000ac15
    60b4:	2000ac16 	.word	0x2000ac16
    60b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    60bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	461a      	mov	r2, r3
    60c4:	f64a 4314 	movw	r3, #44052	; 0xac14
    60c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60cc:	78d9      	ldrb	r1, [r3, #3]
    60ce:	f24a 631c 	movw	r3, #42524	; 0xa61c
    60d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d6:	5499      	strb	r1, [r3, r2]
    60d8:	4bd3      	ldr	r3, [pc, #844]	; (6428 <ground_calibrate+0xbb8>)
    60da:	781a      	ldrb	r2, [r3, #0]
    60dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    60e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e4:	781b      	ldrb	r3, [r3, #0]
    60e6:	4413      	add	r3, r2
    60e8:	b2da      	uxtb	r2, r3
    60ea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    60ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f2:	701a      	strb	r2, [r3, #0]
    60f4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    60f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fc:	781a      	ldrb	r2, [r3, #0]
    60fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	781b      	ldrb	r3, [r3, #0]
    6108:	4413      	add	r3, r2
    610a:	b2da      	uxtb	r2, r3
    610c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	701a      	strb	r2, [r3, #0]
    6116:	f24a 6319 	movw	r3, #42521	; 0xa619
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	3301      	adds	r3, #1
    6122:	b2da      	uxtb	r2, r3
    6124:	f24a 6319 	movw	r3, #42521	; 0xa619
    6128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    612c:	701a      	strb	r2, [r3, #0]
    612e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	2bff      	cmp	r3, #255	; 0xff
    613a:	d105      	bne.n	6148 <ground_calibrate+0x8d8>
    613c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6144:	2200      	movs	r2, #0
    6146:	701a      	strb	r2, [r3, #0]
    6148:	f24a 6319 	movw	r3, #42521	; 0xa619
    614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	461a      	mov	r2, r3
    6154:	f64a 430c 	movw	r3, #44044	; 0xac0c
    6158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615c:	7819      	ldrb	r1, [r3, #0]
    615e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6166:	5499      	strb	r1, [r3, r2]
    6168:	f64a 430c 	movw	r3, #44044	; 0xac0c
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	781a      	ldrb	r2, [r3, #0]
    6172:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617a:	781b      	ldrb	r3, [r3, #0]
    617c:	4413      	add	r3, r2
    617e:	b2da      	uxtb	r2, r3
    6180:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6188:	701a      	strb	r2, [r3, #0]
    618a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    618e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6192:	781a      	ldrb	r2, [r3, #0]
    6194:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	4413      	add	r3, r2
    61a0:	b2da      	uxtb	r2, r3
    61a2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    61a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61aa:	701a      	strb	r2, [r3, #0]
    61ac:	f24a 6319 	movw	r3, #42521	; 0xa619
    61b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	3301      	adds	r3, #1
    61b8:	b2da      	uxtb	r2, r3
    61ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    61be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c2:	701a      	strb	r2, [r3, #0]
    61c4:	f24a 6319 	movw	r3, #42521	; 0xa619
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2bff      	cmp	r3, #255	; 0xff
    61d0:	d105      	bne.n	61de <ground_calibrate+0x96e>
    61d2:	f24a 6319 	movw	r3, #42521	; 0xa619
    61d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61da:	2200      	movs	r2, #0
    61dc:	701a      	strb	r2, [r3, #0]
    61de:	f24a 6319 	movw	r3, #42521	; 0xa619
    61e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	461a      	mov	r2, r3
    61ea:	f64a 430c 	movw	r3, #44044	; 0xac0c
    61ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f2:	7859      	ldrb	r1, [r3, #1]
    61f4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	5499      	strb	r1, [r3, r2]
    61fe:	4b8b      	ldr	r3, [pc, #556]	; (642c <ground_calibrate+0xbbc>)
    6200:	781a      	ldrb	r2, [r3, #0]
    6202:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	4413      	add	r3, r2
    620e:	b2da      	uxtb	r2, r3
    6210:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6218:	701a      	strb	r2, [r3, #0]
    621a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    621e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6222:	781a      	ldrb	r2, [r3, #0]
    6224:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622c:	781b      	ldrb	r3, [r3, #0]
    622e:	4413      	add	r3, r2
    6230:	b2da      	uxtb	r2, r3
    6232:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623a:	701a      	strb	r2, [r3, #0]
    623c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6244:	781b      	ldrb	r3, [r3, #0]
    6246:	3301      	adds	r3, #1
    6248:	b2da      	uxtb	r2, r3
    624a:	f24a 6319 	movw	r3, #42521	; 0xa619
    624e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f24a 6319 	movw	r3, #42521	; 0xa619
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	2bff      	cmp	r3, #255	; 0xff
    6260:	d105      	bne.n	626e <ground_calibrate+0x9fe>
    6262:	f24a 6319 	movw	r3, #42521	; 0xa619
    6266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    626a:	2200      	movs	r2, #0
    626c:	701a      	strb	r2, [r3, #0]
    626e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6276:	781b      	ldrb	r3, [r3, #0]
    6278:	461a      	mov	r2, r3
    627a:	f64a 430c 	movw	r3, #44044	; 0xac0c
    627e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6282:	7899      	ldrb	r1, [r3, #2]
    6284:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    628c:	5499      	strb	r1, [r3, r2]
    628e:	4b68      	ldr	r3, [pc, #416]	; (6430 <ground_calibrate+0xbc0>)
    6290:	781a      	ldrb	r2, [r3, #0]
    6292:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	4413      	add	r3, r2
    629e:	b2da      	uxtb	r2, r3
    62a0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    62a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a8:	701a      	strb	r2, [r3, #0]
    62aa:	f24a 731e 	movw	r3, #42782	; 0xa71e
    62ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b2:	781a      	ldrb	r2, [r3, #0]
    62b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	781b      	ldrb	r3, [r3, #0]
    62be:	4413      	add	r3, r2
    62c0:	b2da      	uxtb	r2, r3
    62c2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    62c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ca:	701a      	strb	r2, [r3, #0]
    62cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	3301      	adds	r3, #1
    62d8:	b2da      	uxtb	r2, r3
    62da:	f24a 6319 	movw	r3, #42521	; 0xa619
    62de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e2:	701a      	strb	r2, [r3, #0]
    62e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	781b      	ldrb	r3, [r3, #0]
    62ee:	2bff      	cmp	r3, #255	; 0xff
    62f0:	d105      	bne.n	62fe <ground_calibrate+0xa8e>
    62f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    62f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fa:	2200      	movs	r2, #0
    62fc:	701a      	strb	r2, [r3, #0]
    62fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    6302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	461a      	mov	r2, r3
    630a:	f64a 430c 	movw	r3, #44044	; 0xac0c
    630e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6312:	78d9      	ldrb	r1, [r3, #3]
    6314:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631c:	5499      	strb	r1, [r3, r2]
    631e:	4b45      	ldr	r3, [pc, #276]	; (6434 <ground_calibrate+0xbc4>)
    6320:	781a      	ldrb	r2, [r3, #0]
    6322:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	4413      	add	r3, r2
    632e:	b2da      	uxtb	r2, r3
    6330:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6338:	701a      	strb	r2, [r3, #0]
    633a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    633e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6342:	781a      	ldrb	r2, [r3, #0]
    6344:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	4413      	add	r3, r2
    6350:	b2da      	uxtb	r2, r3
    6352:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	701a      	strb	r2, [r3, #0]
    635c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6364:	781b      	ldrb	r3, [r3, #0]
    6366:	3301      	adds	r3, #1
    6368:	b2da      	uxtb	r2, r3
    636a:	f24a 6319 	movw	r3, #42521	; 0xa619
    636e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6372:	701a      	strb	r2, [r3, #0]
    6374:	f24a 6319 	movw	r3, #42521	; 0xa619
    6378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	2bff      	cmp	r3, #255	; 0xff
    6380:	d105      	bne.n	638e <ground_calibrate+0xb1e>
    6382:	f24a 6319 	movw	r3, #42521	; 0xa619
    6386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638a:	2200      	movs	r2, #0
    638c:	701a      	strb	r2, [r3, #0]
    638e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	461a      	mov	r2, r3
    639a:	f240 0386 	movw	r3, #134	; 0x86
    639e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a2:	7819      	ldrb	r1, [r3, #0]
    63a4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    63a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ac:	5499      	strb	r1, [r3, r2]
    63ae:	f240 0386 	movw	r3, #134	; 0x86
    63b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b6:	781a      	ldrb	r2, [r3, #0]
    63b8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    63bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	4413      	add	r3, r2
    63c4:	b2da      	uxtb	r2, r3
    63c6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	701a      	strb	r2, [r3, #0]
    63d0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    63d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    63de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	4413      	add	r3, r2
    63e6:	b2da      	uxtb	r2, r3
    63e8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    63ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f0:	701a      	strb	r2, [r3, #0]
    63f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    63f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fa:	781b      	ldrb	r3, [r3, #0]
    63fc:	3301      	adds	r3, #1
    63fe:	b2da      	uxtb	r2, r3
    6400:	f24a 6319 	movw	r3, #42521	; 0xa619
    6404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6408:	701a      	strb	r2, [r3, #0]
    640a:	f24a 6319 	movw	r3, #42521	; 0xa619
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	2bff      	cmp	r3, #255	; 0xff
    6416:	d10f      	bne.n	6438 <ground_calibrate+0xbc8>
    6418:	f24a 6319 	movw	r3, #42521	; 0xa619
    641c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6420:	2200      	movs	r2, #0
    6422:	701a      	strb	r2, [r3, #0]
    6424:	e008      	b.n	6438 <ground_calibrate+0xbc8>
    6426:	bf00      	nop
    6428:	2000ac17 	.word	0x2000ac17
    642c:	2000ac0d 	.word	0x2000ac0d
    6430:	2000ac0e 	.word	0x2000ac0e
    6434:	2000ac0f 	.word	0x2000ac0f
    6438:	f24a 6319 	movw	r3, #42521	; 0xa619
    643c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6440:	781b      	ldrb	r3, [r3, #0]
    6442:	461a      	mov	r2, r3
    6444:	f240 0386 	movw	r3, #134	; 0x86
    6448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644c:	7859      	ldrb	r1, [r3, #1]
    644e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6456:	5499      	strb	r1, [r3, r2]
    6458:	4bd4      	ldr	r3, [pc, #848]	; (67ac <ground_calibrate+0xf3c>)
    645a:	781a      	ldrb	r2, [r3, #0]
    645c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	781b      	ldrb	r3, [r3, #0]
    6466:	4413      	add	r3, r2
    6468:	b2da      	uxtb	r2, r3
    646a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    646e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6472:	701a      	strb	r2, [r3, #0]
    6474:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647c:	781a      	ldrb	r2, [r3, #0]
    647e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6486:	781b      	ldrb	r3, [r3, #0]
    6488:	4413      	add	r3, r2
    648a:	b2da      	uxtb	r2, r3
    648c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6494:	701a      	strb	r2, [r3, #0]
    6496:	f24a 6319 	movw	r3, #42521	; 0xa619
    649a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    649e:	781b      	ldrb	r3, [r3, #0]
    64a0:	3301      	adds	r3, #1
    64a2:	b2da      	uxtb	r2, r3
    64a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    64a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ac:	701a      	strb	r2, [r3, #0]
    64ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    64b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b6:	781b      	ldrb	r3, [r3, #0]
    64b8:	2bff      	cmp	r3, #255	; 0xff
    64ba:	d105      	bne.n	64c8 <ground_calibrate+0xc58>
    64bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	2200      	movs	r2, #0
    64c6:	701a      	strb	r2, [r3, #0]
    64c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    64cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	461a      	mov	r2, r3
    64d4:	f240 0388 	movw	r3, #136	; 0x88
    64d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64dc:	7819      	ldrb	r1, [r3, #0]
    64de:	f24a 631c 	movw	r3, #42524	; 0xa61c
    64e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e6:	5499      	strb	r1, [r3, r2]
    64e8:	f240 0388 	movw	r3, #136	; 0x88
    64ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f0:	781a      	ldrb	r2, [r3, #0]
    64f2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    64f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	4413      	add	r3, r2
    64fe:	b2da      	uxtb	r2, r3
    6500:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6508:	701a      	strb	r2, [r3, #0]
    650a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    650e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6512:	781a      	ldrb	r2, [r3, #0]
    6514:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651c:	781b      	ldrb	r3, [r3, #0]
    651e:	4413      	add	r3, r2
    6520:	b2da      	uxtb	r2, r3
    6522:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652a:	701a      	strb	r2, [r3, #0]
    652c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6534:	781b      	ldrb	r3, [r3, #0]
    6536:	3301      	adds	r3, #1
    6538:	b2da      	uxtb	r2, r3
    653a:	f24a 6319 	movw	r3, #42521	; 0xa619
    653e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6542:	701a      	strb	r2, [r3, #0]
    6544:	f24a 6319 	movw	r3, #42521	; 0xa619
    6548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	2bff      	cmp	r3, #255	; 0xff
    6550:	d105      	bne.n	655e <ground_calibrate+0xcee>
    6552:	f24a 6319 	movw	r3, #42521	; 0xa619
    6556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655a:	2200      	movs	r2, #0
    655c:	701a      	strb	r2, [r3, #0]
    655e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	461a      	mov	r2, r3
    656a:	f240 0388 	movw	r3, #136	; 0x88
    656e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6572:	7859      	ldrb	r1, [r3, #1]
    6574:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	5499      	strb	r1, [r3, r2]
    657e:	4b8c      	ldr	r3, [pc, #560]	; (67b0 <ground_calibrate+0xf40>)
    6580:	781a      	ldrb	r2, [r3, #0]
    6582:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658a:	781b      	ldrb	r3, [r3, #0]
    658c:	4413      	add	r3, r2
    658e:	b2da      	uxtb	r2, r3
    6590:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6598:	701a      	strb	r2, [r3, #0]
    659a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    659e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a2:	781a      	ldrb	r2, [r3, #0]
    65a4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    65a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ac:	781b      	ldrb	r3, [r3, #0]
    65ae:	4413      	add	r3, r2
    65b0:	b2da      	uxtb	r2, r3
    65b2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    65b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ba:	701a      	strb	r2, [r3, #0]
    65bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    65c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	3301      	adds	r3, #1
    65c8:	b2da      	uxtb	r2, r3
    65ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    65ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d2:	701a      	strb	r2, [r3, #0]
    65d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    65d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	2bff      	cmp	r3, #255	; 0xff
    65e0:	d105      	bne.n	65ee <ground_calibrate+0xd7e>
    65e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    65e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ea:	2200      	movs	r2, #0
    65ec:	701a      	strb	r2, [r3, #0]
    65ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    65f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f6:	781b      	ldrb	r3, [r3, #0]
    65f8:	461a      	mov	r2, r3
    65fa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    65fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6602:	7819      	ldrb	r1, [r3, #0]
    6604:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660c:	5499      	strb	r1, [r3, r2]
    660e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6616:	781b      	ldrb	r3, [r3, #0]
    6618:	3301      	adds	r3, #1
    661a:	b2da      	uxtb	r2, r3
    661c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6624:	701a      	strb	r2, [r3, #0]
    6626:	f24a 6319 	movw	r3, #42521	; 0xa619
    662a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662e:	781b      	ldrb	r3, [r3, #0]
    6630:	2bff      	cmp	r3, #255	; 0xff
    6632:	d105      	bne.n	6640 <ground_calibrate+0xdd0>
    6634:	f24a 6319 	movw	r3, #42521	; 0xa619
    6638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663c:	2200      	movs	r2, #0
    663e:	701a      	strb	r2, [r3, #0]
    6640:	f24a 6319 	movw	r3, #42521	; 0xa619
    6644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	461a      	mov	r2, r3
    664c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6654:	7819      	ldrb	r1, [r3, #0]
    6656:	f24a 631c 	movw	r3, #42524	; 0xa61c
    665a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665e:	5499      	strb	r1, [r3, r2]
    6660:	f24a 6319 	movw	r3, #42521	; 0xa619
    6664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	3301      	adds	r3, #1
    666c:	b2da      	uxtb	r2, r3
    666e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6676:	701a      	strb	r2, [r3, #0]
    6678:	f24a 6319 	movw	r3, #42521	; 0xa619
    667c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	2bff      	cmp	r3, #255	; 0xff
    6684:	d105      	bne.n	6692 <ground_calibrate+0xe22>
    6686:	f24a 6319 	movw	r3, #42521	; 0xa619
    668a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    668e:	2200      	movs	r2, #0
    6690:	701a      	strb	r2, [r3, #0]
    6692:	f242 0339 	movw	r3, #8249	; 0x2039
    6696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	b2db      	uxtb	r3, r3
    669e:	f003 0310 	and.w	r3, r3, #16
    66a2:	2b00      	cmp	r3, #0
    66a4:	d15a      	bne.n	675c <ground_calibrate+0xeec>
    66a6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    66aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	b2db      	uxtb	r3, r3
    66b2:	461a      	mov	r2, r3
    66b4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    66b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66bc:	5c9a      	ldrb	r2, [r3, r2]
    66be:	f24a 731b 	movw	r3, #42779	; 0xa71b
    66c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c6:	701a      	strb	r2, [r3, #0]
    66c8:	f24a 731c 	movw	r3, #42780	; 0xa71c
    66cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d0:	2200      	movs	r2, #0
    66d2:	701a      	strb	r2, [r3, #0]
    66d4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    66d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66dc:	781b      	ldrb	r3, [r3, #0]
    66de:	b2db      	uxtb	r3, r3
    66e0:	3301      	adds	r3, #1
    66e2:	b2da      	uxtb	r2, r3
    66e4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    66e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ec:	701a      	strb	r2, [r3, #0]
    66ee:	f24a 631a 	movw	r3, #42522	; 0xa61a
    66f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	b2db      	uxtb	r3, r3
    66fa:	2bff      	cmp	r3, #255	; 0xff
    66fc:	d105      	bne.n	670a <ground_calibrate+0xe9a>
    66fe:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6706:	2200      	movs	r2, #0
    6708:	701a      	strb	r2, [r3, #0]
    670a:	f242 0338 	movw	r3, #8248	; 0x2038
    670e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6712:	f242 0238 	movw	r2, #8248	; 0x2038
    6716:	f2c2 0200 	movt	r2, #8192	; 0x2000
    671a:	7812      	ldrb	r2, [r2, #0]
    671c:	b2d2      	uxtb	r2, r2
    671e:	f042 0201 	orr.w	r2, r2, #1
    6722:	b2d2      	uxtb	r2, r2
    6724:	701a      	strb	r2, [r3, #0]
    6726:	f242 0339 	movw	r3, #8249	; 0x2039
    672a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672e:	f242 0239 	movw	r2, #8249	; 0x2039
    6732:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6736:	7812      	ldrb	r2, [r2, #0]
    6738:	b2d2      	uxtb	r2, r2
    673a:	f042 0210 	orr.w	r2, r2, #16
    673e:	b2d2      	uxtb	r2, r2
    6740:	701a      	strb	r2, [r3, #0]
    6742:	e00b      	b.n	675c <ground_calibrate+0xeec>
    6744:	f24a 6318 	movw	r3, #42520	; 0xa618
    6748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	3301      	adds	r3, #1
    6750:	b2da      	uxtb	r2, r3
    6752:	f24a 6318 	movw	r3, #42520	; 0xa618
    6756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    675c:	f24a 6312 	movw	r3, #42514	; 0xa612
    6760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6764:	2202      	movs	r2, #2
    6766:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6768:	f24a 6319 	movw	r3, #42521	; 0xa619
    676c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6770:	781a      	ldrb	r2, [r3, #0]
    6772:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677a:	781b      	ldrb	r3, [r3, #0]
    677c:	b2db      	uxtb	r3, r3
    677e:	429a      	cmp	r2, r3
    6780:	d318      	bcc.n	67b4 <ground_calibrate+0xf44>
    6782:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	b2db      	uxtb	r3, r3
    678e:	461a      	mov	r2, r3
    6790:	f24a 6319 	movw	r3, #42521	; 0xa619
    6794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	1ad3      	subs	r3, r2, r3
    679c:	33ff      	adds	r3, #255	; 0xff
    679e:	2b06      	cmp	r3, #6
    67a0:	bfd4      	ite	le
    67a2:	2300      	movle	r3, #0
    67a4:	2301      	movgt	r3, #1
    67a6:	b2db      	uxtb	r3, r3
    67a8:	e016      	b.n	67d8 <ground_calibrate+0xf68>
    67aa:	bf00      	nop
    67ac:	20000087 	.word	0x20000087
    67b0:	20000089 	.word	0x20000089
    67b4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    67b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	b2db      	uxtb	r3, r3
    67c0:	461a      	mov	r2, r3
    67c2:	f24a 6319 	movw	r3, #42521	; 0xa619
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	1ad3      	subs	r3, r2, r3
    67ce:	2b06      	cmp	r3, #6
    67d0:	bfd4      	ite	le
    67d2:	2300      	movle	r3, #0
    67d4:	2301      	movgt	r3, #1
    67d6:	b2db      	uxtb	r3, r3
    67d8:	2b00      	cmp	r3, #0
    67da:	f000 8194 	beq.w	6b06 <ground_calibrate+0x1296>
    67de:	f24a 6319 	movw	r3, #42521	; 0xa619
    67e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	461a      	mov	r2, r3
    67ea:	f24a 631c 	movw	r3, #42524	; 0xa61c
    67ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f2:	2105      	movs	r1, #5
    67f4:	5499      	strb	r1, [r3, r2]
    67f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    67fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	3301      	adds	r3, #1
    6802:	b2da      	uxtb	r2, r3
    6804:	f24a 6319 	movw	r3, #42521	; 0xa619
    6808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	2bff      	cmp	r3, #255	; 0xff
    681a:	d105      	bne.n	6828 <ground_calibrate+0xfb8>
    681c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6824:	2200      	movs	r2, #0
    6826:	701a      	strb	r2, [r3, #0]
    6828:	f24a 6319 	movw	r3, #42521	; 0xa619
    682c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6830:	781b      	ldrb	r3, [r3, #0]
    6832:	461a      	mov	r2, r3
    6834:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683c:	2103      	movs	r1, #3
    683e:	5499      	strb	r1, [r3, r2]
    6840:	f24a 6319 	movw	r3, #42521	; 0xa619
    6844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	3301      	adds	r3, #1
    684c:	b2da      	uxtb	r2, r3
    684e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6856:	701a      	strb	r2, [r3, #0]
    6858:	f24a 6319 	movw	r3, #42521	; 0xa619
    685c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	2bff      	cmp	r3, #255	; 0xff
    6864:	d105      	bne.n	6872 <ground_calibrate+0x1002>
    6866:	f24a 6319 	movw	r3, #42521	; 0xa619
    686a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686e:	2200      	movs	r2, #0
    6870:	701a      	strb	r2, [r3, #0]
    6872:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687a:	2203      	movs	r2, #3
    687c:	701a      	strb	r2, [r3, #0]
    687e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6886:	2203      	movs	r2, #3
    6888:	701a      	strb	r2, [r3, #0]
    688a:	f24a 6319 	movw	r3, #42521	; 0xa619
    688e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	461a      	mov	r2, r3
    6896:	f240 0384 	movw	r3, #132	; 0x84
    689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689e:	7819      	ldrb	r1, [r3, #0]
    68a0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    68a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a8:	5499      	strb	r1, [r3, r2]
    68aa:	f240 0384 	movw	r3, #132	; 0x84
    68ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b2:	781a      	ldrb	r2, [r3, #0]
    68b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    68b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68bc:	781b      	ldrb	r3, [r3, #0]
    68be:	4413      	add	r3, r2
    68c0:	b2da      	uxtb	r2, r3
    68c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    68c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ca:	701a      	strb	r2, [r3, #0]
    68cc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    68d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d4:	781a      	ldrb	r2, [r3, #0]
    68d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    68da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	4413      	add	r3, r2
    68e2:	b2da      	uxtb	r2, r3
    68e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    68e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ec:	701a      	strb	r2, [r3, #0]
    68ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    68f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	3301      	adds	r3, #1
    68fa:	b2da      	uxtb	r2, r3
    68fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    6900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6904:	701a      	strb	r2, [r3, #0]
    6906:	f24a 6319 	movw	r3, #42521	; 0xa619
    690a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690e:	781b      	ldrb	r3, [r3, #0]
    6910:	2bff      	cmp	r3, #255	; 0xff
    6912:	d105      	bne.n	6920 <ground_calibrate+0x10b0>
    6914:	f24a 6319 	movw	r3, #42521	; 0xa619
    6918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    691c:	2200      	movs	r2, #0
    691e:	701a      	strb	r2, [r3, #0]
    6920:	f24a 6319 	movw	r3, #42521	; 0xa619
    6924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	461a      	mov	r2, r3
    692c:	f240 0384 	movw	r3, #132	; 0x84
    6930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6934:	7859      	ldrb	r1, [r3, #1]
    6936:	f24a 631c 	movw	r3, #42524	; 0xa61c
    693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693e:	5499      	strb	r1, [r3, r2]
    6940:	4b77      	ldr	r3, [pc, #476]	; (6b20 <ground_calibrate+0x12b0>)
    6942:	781a      	ldrb	r2, [r3, #0]
    6944:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694c:	781b      	ldrb	r3, [r3, #0]
    694e:	4413      	add	r3, r2
    6950:	b2da      	uxtb	r2, r3
    6952:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695a:	701a      	strb	r2, [r3, #0]
    695c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6964:	781a      	ldrb	r2, [r3, #0]
    6966:	f24a 731d 	movw	r3, #42781	; 0xa71d
    696a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	4413      	add	r3, r2
    6972:	b2da      	uxtb	r2, r3
    6974:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    697c:	701a      	strb	r2, [r3, #0]
    697e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	3301      	adds	r3, #1
    698a:	b2da      	uxtb	r2, r3
    698c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6994:	701a      	strb	r2, [r3, #0]
    6996:	f24a 6319 	movw	r3, #42521	; 0xa619
    699a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	2bff      	cmp	r3, #255	; 0xff
    69a2:	d105      	bne.n	69b0 <ground_calibrate+0x1140>
    69a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    69a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ac:	2200      	movs	r2, #0
    69ae:	701a      	strb	r2, [r3, #0]
    69b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    69b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	461a      	mov	r2, r3
    69bc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    69c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c4:	7819      	ldrb	r1, [r3, #0]
    69c6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    69ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ce:	5499      	strb	r1, [r3, r2]
    69d0:	f24a 6319 	movw	r3, #42521	; 0xa619
    69d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d8:	781b      	ldrb	r3, [r3, #0]
    69da:	3301      	adds	r3, #1
    69dc:	b2da      	uxtb	r2, r3
    69de:	f24a 6319 	movw	r3, #42521	; 0xa619
    69e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e6:	701a      	strb	r2, [r3, #0]
    69e8:	f24a 6319 	movw	r3, #42521	; 0xa619
    69ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	2bff      	cmp	r3, #255	; 0xff
    69f4:	d105      	bne.n	6a02 <ground_calibrate+0x1192>
    69f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    69fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fe:	2200      	movs	r2, #0
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f24a 6319 	movw	r3, #42521	; 0xa619
    6a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	461a      	mov	r2, r3
    6a0e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a16:	7819      	ldrb	r1, [r3, #0]
    6a18:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a20:	5499      	strb	r1, [r3, r2]
    6a22:	f24a 6319 	movw	r3, #42521	; 0xa619
    6a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2a:	781b      	ldrb	r3, [r3, #0]
    6a2c:	3301      	adds	r3, #1
    6a2e:	b2da      	uxtb	r2, r3
    6a30:	f24a 6319 	movw	r3, #42521	; 0xa619
    6a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a38:	701a      	strb	r2, [r3, #0]
    6a3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    6a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	2bff      	cmp	r3, #255	; 0xff
    6a46:	d105      	bne.n	6a54 <ground_calibrate+0x11e4>
    6a48:	f24a 6319 	movw	r3, #42521	; 0xa619
    6a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a50:	2200      	movs	r2, #0
    6a52:	701a      	strb	r2, [r3, #0]
    6a54:	f242 0339 	movw	r3, #8249	; 0x2039
    6a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	b2db      	uxtb	r3, r3
    6a60:	f003 0310 	and.w	r3, r3, #16
    6a64:	2b00      	cmp	r3, #0
    6a66:	d15a      	bne.n	6b1e <ground_calibrate+0x12ae>
    6a68:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	b2db      	uxtb	r3, r3
    6a74:	461a      	mov	r2, r3
    6a76:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a7e:	5c9a      	ldrb	r2, [r3, r2]
    6a80:	f24a 731b 	movw	r3, #42779	; 0xa71b
    6a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a88:	701a      	strb	r2, [r3, #0]
    6a8a:	f24a 731c 	movw	r3, #42780	; 0xa71c
    6a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a92:	2200      	movs	r2, #0
    6a94:	701a      	strb	r2, [r3, #0]
    6a96:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9e:	781b      	ldrb	r3, [r3, #0]
    6aa0:	b2db      	uxtb	r3, r3
    6aa2:	3301      	adds	r3, #1
    6aa4:	b2da      	uxtb	r2, r3
    6aa6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aae:	701a      	strb	r2, [r3, #0]
    6ab0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	b2db      	uxtb	r3, r3
    6abc:	2bff      	cmp	r3, #255	; 0xff
    6abe:	d105      	bne.n	6acc <ground_calibrate+0x125c>
    6ac0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac8:	2200      	movs	r2, #0
    6aca:	701a      	strb	r2, [r3, #0]
    6acc:	f242 0338 	movw	r3, #8248	; 0x2038
    6ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad4:	f242 0238 	movw	r2, #8248	; 0x2038
    6ad8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6adc:	7812      	ldrb	r2, [r2, #0]
    6ade:	b2d2      	uxtb	r2, r2
    6ae0:	f042 0201 	orr.w	r2, r2, #1
    6ae4:	b2d2      	uxtb	r2, r2
    6ae6:	701a      	strb	r2, [r3, #0]
    6ae8:	f242 0339 	movw	r3, #8249	; 0x2039
    6aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af0:	f242 0239 	movw	r2, #8249	; 0x2039
    6af4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6af8:	7812      	ldrb	r2, [r2, #0]
    6afa:	b2d2      	uxtb	r2, r2
    6afc:	f042 0210 	orr.w	r2, r2, #16
    6b00:	b2d2      	uxtb	r2, r2
    6b02:	701a      	strb	r2, [r3, #0]
    6b04:	e00b      	b.n	6b1e <ground_calibrate+0x12ae>
    6b06:	f24a 6318 	movw	r3, #42520	; 0xa618
    6b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	3301      	adds	r3, #1
    6b12:	b2da      	uxtb	r2, r3
    6b14:	f24a 6318 	movw	r3, #42520	; 0xa618
    6b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6b1e:	bd80      	pop	{r7, pc}
    6b20:	20000085 	.word	0x20000085

00006b24 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6b24:	b480      	push	{r7}
    6b26:	b083      	sub	sp, #12
    6b28:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6b2a:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    6b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	2b03      	cmp	r3, #3
    6b36:	d10c      	bne.n	6b52 <pprz_mode_update+0x2e>
    6b38:	f24a 6300 	movw	r3, #42496	; 0xa600
    6b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b40:	781b      	ldrb	r3, [r3, #0]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d032      	beq.n	6bac <pprz_mode_update+0x88>
    6b46:	f24a 6300 	movw	r3, #42496	; 0xa600
    6b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4e:	2200      	movs	r2, #0
    6b50:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6b52:	f24a 7320 	movw	r3, #42784	; 0xa720
    6b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5a:	891b      	ldrh	r3, [r3, #8]
    6b5c:	b21b      	sxth	r3, r3
    6b5e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6b62:	dc0f      	bgt.n	6b84 <pprz_mode_update+0x60>
    6b64:	f24a 7320 	movw	r3, #42784	; 0xa720
    6b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b6c:	891b      	ldrh	r3, [r3, #8]
    6b6e:	b21a      	sxth	r2, r3
    6b70:	f64e 5341 	movw	r3, #60737	; 0xed41
    6b74:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6b78:	429a      	cmp	r2, r3
    6b7a:	bfb4      	ite	lt
    6b7c:	2300      	movlt	r3, #0
    6b7e:	2301      	movge	r3, #1
    6b80:	b2db      	uxtb	r3, r3
    6b82:	e000      	b.n	6b86 <pprz_mode_update+0x62>
    6b84:	2302      	movs	r3, #2
    6b86:	71fb      	strb	r3, [r7, #7]
    6b88:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    6b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	79fa      	ldrb	r2, [r7, #7]
    6b94:	429a      	cmp	r2, r3
    6b96:	d007      	beq.n	6ba8 <pprz_mode_update+0x84>
    6b98:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    6b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba0:	79fa      	ldrb	r2, [r7, #7]
    6ba2:	701a      	strb	r2, [r3, #0]
    6ba4:	2301      	movs	r3, #1
    6ba6:	e002      	b.n	6bae <pprz_mode_update+0x8a>
    6ba8:	2300      	movs	r3, #0
    6baa:	e000      	b.n	6bae <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6bac:	2300      	movs	r3, #0
}
    6bae:	4618      	mov	r0, r3
    6bb0:	370c      	adds	r7, #12
    6bb2:	46bd      	mov	sp, r7
    6bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop

00006bbc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6bbc:	b480      	push	{r7}
    6bbe:	b083      	sub	sp, #12
    6bc0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6bc2:	f24a 7320 	movw	r3, #42784	; 0xa720
    6bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bca:	89db      	ldrh	r3, [r3, #14]
    6bcc:	b21a      	sxth	r2, r3
    6bce:	f640 437f 	movw	r3, #3199	; 0xc7f
    6bd2:	429a      	cmp	r2, r3
    6bd4:	bfd4      	ite	le
    6bd6:	2300      	movle	r3, #0
    6bd8:	2301      	movgt	r3, #1
    6bda:	b2db      	uxtb	r3, r3
    6bdc:	71fb      	strb	r3, [r7, #7]
    6bde:	f240 0380 	movw	r3, #128	; 0x80
    6be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	79fa      	ldrb	r2, [r7, #7]
    6bea:	429a      	cmp	r2, r3
    6bec:	d007      	beq.n	6bfe <ir_estim_mode_update+0x42>
    6bee:	f240 0380 	movw	r3, #128	; 0x80
    6bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf6:	79fa      	ldrb	r2, [r7, #7]
    6bf8:	701a      	strb	r2, [r3, #0]
    6bfa:	2301      	movs	r3, #1
    6bfc:	e000      	b.n	6c00 <ir_estim_mode_update+0x44>
    6bfe:	2300      	movs	r3, #0
}
    6c00:	4618      	mov	r0, r3
    6c02:	370c      	adds	r7, #12
    6c04:	46bd      	mov	sp, r7
    6c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c0a:	4770      	bx	lr

00006c0c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6c0c:	b480      	push	{r7}
    6c0e:	b083      	sub	sp, #12
    6c10:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6c12:	f24a 7320 	movw	r3, #42784	; 0xa720
    6c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1a:	7cdb      	ldrb	r3, [r3, #19]
    6c1c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6c1e:	f24a 6303 	movw	r3, #42499	; 0xa603
    6c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	79fa      	ldrb	r2, [r7, #7]
    6c2a:	429a      	cmp	r2, r3
    6c2c:	d017      	beq.n	6c5e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6c2e:	f24a 6303 	movw	r3, #42499	; 0xa603
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	461a      	mov	r2, r3
    6c3a:	79fb      	ldrb	r3, [r7, #7]
    6c3c:	4053      	eors	r3, r2
    6c3e:	f003 0303 	and.w	r3, r3, #3
    6c42:	2b00      	cmp	r3, #0
    6c44:	bf0c      	ite	eq
    6c46:	2300      	moveq	r3, #0
    6c48:	2301      	movne	r3, #1
    6c4a:	b2db      	uxtb	r3, r3
    6c4c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    6c4e:	f24a 6303 	movw	r3, #42499	; 0xa603
    6c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c56:	79fa      	ldrb	r2, [r7, #7]
    6c58:	701a      	strb	r2, [r3, #0]
    return changed;
    6c5a:	79bb      	ldrb	r3, [r7, #6]
    6c5c:	e000      	b.n	6c60 <mcu1_status_update+0x54>
  }
  return FALSE;
    6c5e:	2300      	movs	r3, #0
}
    6c60:	4618      	mov	r0, r3
    6c62:	370c      	adds	r7, #12
    6c64:	46bd      	mov	sp, r7
    6c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c6a:	4770      	bx	lr

00006c6c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    6c6c:	b480      	push	{r7}
    6c6e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    6c70:	f64a 432c 	movw	r3, #44076	; 0xac2c
    6c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c78:	781b      	ldrb	r3, [r3, #0]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d12a      	bne.n	6cd4 <events_update+0x68>
    6c7e:	f24a 7320 	movw	r3, #42784	; 0xa720
    6c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c86:	895b      	ldrh	r3, [r3, #10]
    6c88:	b21b      	sxth	r3, r3
    6c8a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    6c8e:	dd21      	ble.n	6cd4 <events_update+0x68>
    6c90:	f24a 6314 	movw	r3, #42516	; 0xa614
    6c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c98:	881b      	ldrh	r3, [r3, #0]
    6c9a:	2b13      	cmp	r3, #19
    6c9c:	d819      	bhi.n	6cd2 <events_update+0x66>
    6c9e:	f24a 6314 	movw	r3, #42516	; 0xa614
    6ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca6:	881b      	ldrh	r3, [r3, #0]
    6ca8:	3301      	adds	r3, #1
    6caa:	b29a      	uxth	r2, r3
    6cac:	f24a 6314 	movw	r3, #42516	; 0xa614
    6cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb4:	801a      	strh	r2, [r3, #0]
    6cb6:	f24a 6314 	movw	r3, #42516	; 0xa614
    6cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cbe:	881b      	ldrh	r3, [r3, #0]
    6cc0:	2b14      	cmp	r3, #20
    6cc2:	d106      	bne.n	6cd2 <events_update+0x66>
    6cc4:	f24a 6300 	movw	r3, #42496	; 0xa600
    6cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ccc:	2201      	movs	r2, #1
    6cce:	701a      	strb	r2, [r3, #0]
    6cd0:	e00c      	b.n	6cec <events_update+0x80>
    6cd2:	e00b      	b.n	6cec <events_update+0x80>
    6cd4:	f24a 6314 	movw	r3, #42516	; 0xa614
    6cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cdc:	2200      	movs	r2, #0
    6cde:	801a      	strh	r2, [r3, #0]
    6ce0:	f24a 6300 	movw	r3, #42496	; 0xa600
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	2200      	movs	r2, #0
    6cea:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    6cec:	f64a 432c 	movw	r3, #44076	; 0xac2c
    6cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf4:	781b      	ldrb	r3, [r3, #0]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d12a      	bne.n	6d50 <events_update+0xe4>
    6cfa:	f24a 7320 	movw	r3, #42784	; 0xa720
    6cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d02:	895b      	ldrh	r3, [r3, #10]
    6d04:	b21b      	sxth	r3, r3
    6d06:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    6d0a:	da21      	bge.n	6d50 <events_update+0xe4>
    6d0c:	f24a 6316 	movw	r3, #42518	; 0xa616
    6d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d14:	881b      	ldrh	r3, [r3, #0]
    6d16:	2b13      	cmp	r3, #19
    6d18:	d819      	bhi.n	6d4e <events_update+0xe2>
    6d1a:	f24a 6316 	movw	r3, #42518	; 0xa616
    6d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d22:	881b      	ldrh	r3, [r3, #0]
    6d24:	3301      	adds	r3, #1
    6d26:	b29a      	uxth	r2, r3
    6d28:	f24a 6316 	movw	r3, #42518	; 0xa616
    6d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d30:	801a      	strh	r2, [r3, #0]
    6d32:	f24a 6316 	movw	r3, #42518	; 0xa616
    6d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3a:	881b      	ldrh	r3, [r3, #0]
    6d3c:	2b14      	cmp	r3, #20
    6d3e:	d106      	bne.n	6d4e <events_update+0xe2>
    6d40:	f24a 6301 	movw	r3, #42497	; 0xa601
    6d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d48:	2201      	movs	r2, #1
    6d4a:	701a      	strb	r2, [r3, #0]
    6d4c:	e00c      	b.n	6d68 <events_update+0xfc>
    6d4e:	e00b      	b.n	6d68 <events_update+0xfc>
    6d50:	f24a 6316 	movw	r3, #42518	; 0xa616
    6d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d58:	2200      	movs	r2, #0
    6d5a:	801a      	strh	r2, [r3, #0]
    6d5c:	f24a 6301 	movw	r3, #42497	; 0xa601
    6d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d64:	2200      	movs	r2, #0
    6d66:	701a      	strb	r2, [r3, #0]
}  
    6d68:	46bd      	mov	sp, r7
    6d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d6e:	4770      	bx	lr

00006d70 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    6d70:	b480      	push	{r7}
    6d72:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    6d74:	f24a 7320 	movw	r3, #42784	; 0xa720
    6d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d7c:	88da      	ldrh	r2, [r3, #6]
    6d7e:	f24a 7338 	movw	r3, #42808	; 0xa738
    6d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d86:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    6d88:	f24a 7338 	movw	r3, #42808	; 0xa738
    6d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d90:	2200      	movs	r2, #0
    6d92:	74da      	strb	r2, [r3, #19]
}
    6d94:	46bd      	mov	sp, r7
    6d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d9a:	4770      	bx	lr

00006d9c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    6d9c:	b480      	push	{r7}
    6d9e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    6da0:	f24a 6319 	movw	r3, #42521	; 0xa619
    6da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da8:	781a      	ldrb	r2, [r3, #0]
    6daa:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	b2db      	uxtb	r3, r3
    6db6:	429a      	cmp	r2, r3
    6db8:	d313      	bcc.n	6de2 <send_boot+0x46>
    6dba:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc2:	781b      	ldrb	r3, [r3, #0]
    6dc4:	b2db      	uxtb	r3, r3
    6dc6:	461a      	mov	r2, r3
    6dc8:	f24a 6319 	movw	r3, #42521	; 0xa619
    6dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	1ad3      	subs	r3, r2, r3
    6dd4:	33ff      	adds	r3, #255	; 0xff
    6dd6:	2b06      	cmp	r3, #6
    6dd8:	bfd4      	ite	le
    6dda:	2300      	movle	r3, #0
    6ddc:	2301      	movgt	r3, #1
    6dde:	b2db      	uxtb	r3, r3
    6de0:	e011      	b.n	6e06 <send_boot+0x6a>
    6de2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    6de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dea:	781b      	ldrb	r3, [r3, #0]
    6dec:	b2db      	uxtb	r3, r3
    6dee:	461a      	mov	r2, r3
    6df0:	f24a 6319 	movw	r3, #42521	; 0xa619
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	781b      	ldrb	r3, [r3, #0]
    6dfa:	1ad3      	subs	r3, r2, r3
    6dfc:	2b06      	cmp	r3, #6
    6dfe:	bfd4      	ite	le
    6e00:	2300      	movle	r3, #0
    6e02:	2301      	movgt	r3, #1
    6e04:	b2db      	uxtb	r3, r3
    6e06:	2b00      	cmp	r3, #0
    6e08:	f000 8194 	beq.w	7134 <send_boot+0x398>
    6e0c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e14:	781b      	ldrb	r3, [r3, #0]
    6e16:	461a      	mov	r2, r3
    6e18:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e20:	2105      	movs	r1, #5
    6e22:	5499      	strb	r1, [r3, r2]
    6e24:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	3301      	adds	r3, #1
    6e30:	b2da      	uxtb	r2, r3
    6e32:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e3a:	701a      	strb	r2, [r3, #0]
    6e3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e44:	781b      	ldrb	r3, [r3, #0]
    6e46:	2bff      	cmp	r3, #255	; 0xff
    6e48:	d105      	bne.n	6e56 <send_boot+0xba>
    6e4a:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e52:	2200      	movs	r2, #0
    6e54:	701a      	strb	r2, [r3, #0]
    6e56:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5e:	781b      	ldrb	r3, [r3, #0]
    6e60:	461a      	mov	r2, r3
    6e62:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6a:	2101      	movs	r1, #1
    6e6c:	5499      	strb	r1, [r3, r2]
    6e6e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e76:	781b      	ldrb	r3, [r3, #0]
    6e78:	3301      	adds	r3, #1
    6e7a:	b2da      	uxtb	r2, r3
    6e7c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e84:	701a      	strb	r2, [r3, #0]
    6e86:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	2bff      	cmp	r3, #255	; 0xff
    6e92:	d105      	bne.n	6ea0 <send_boot+0x104>
    6e94:	f24a 6319 	movw	r3, #42521	; 0xa619
    6e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9c:	2200      	movs	r2, #0
    6e9e:	701a      	strb	r2, [r3, #0]
    6ea0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea8:	2201      	movs	r2, #1
    6eaa:	701a      	strb	r2, [r3, #0]
    6eac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb4:	2201      	movs	r2, #1
    6eb6:	701a      	strb	r2, [r3, #0]
    6eb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    6ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec0:	781b      	ldrb	r3, [r3, #0]
    6ec2:	461a      	mov	r2, r3
    6ec4:	f248 138e 	movw	r3, #33166	; 0x818e
    6ec8:	f2c0 0301 	movt	r3, #1
    6ecc:	7819      	ldrb	r1, [r3, #0]
    6ece:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed6:	5499      	strb	r1, [r3, r2]
    6ed8:	f248 138e 	movw	r3, #33166	; 0x818e
    6edc:	f2c0 0301 	movt	r3, #1
    6ee0:	781a      	ldrb	r2, [r3, #0]
    6ee2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	4413      	add	r3, r2
    6eee:	b2da      	uxtb	r2, r3
    6ef0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef8:	701a      	strb	r2, [r3, #0]
    6efa:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f02:	781a      	ldrb	r2, [r3, #0]
    6f04:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0c:	781b      	ldrb	r3, [r3, #0]
    6f0e:	4413      	add	r3, r2
    6f10:	b2da      	uxtb	r2, r3
    6f12:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1a:	701a      	strb	r2, [r3, #0]
    6f1c:	f24a 6319 	movw	r3, #42521	; 0xa619
    6f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f24:	781b      	ldrb	r3, [r3, #0]
    6f26:	3301      	adds	r3, #1
    6f28:	b2da      	uxtb	r2, r3
    6f2a:	f24a 6319 	movw	r3, #42521	; 0xa619
    6f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f32:	701a      	strb	r2, [r3, #0]
    6f34:	f24a 6319 	movw	r3, #42521	; 0xa619
    6f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	2bff      	cmp	r3, #255	; 0xff
    6f40:	d105      	bne.n	6f4e <send_boot+0x1b2>
    6f42:	f24a 6319 	movw	r3, #42521	; 0xa619
    6f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4a:	2200      	movs	r2, #0
    6f4c:	701a      	strb	r2, [r3, #0]
    6f4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    6f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f56:	781b      	ldrb	r3, [r3, #0]
    6f58:	461a      	mov	r2, r3
    6f5a:	f248 138e 	movw	r3, #33166	; 0x818e
    6f5e:	f2c0 0301 	movt	r3, #1
    6f62:	7859      	ldrb	r1, [r3, #1]
    6f64:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f6c:	5499      	strb	r1, [r3, r2]
    6f6e:	4b88      	ldr	r3, [pc, #544]	; (7190 <send_boot+0x3f4>)
    6f70:	781a      	ldrb	r2, [r3, #0]
    6f72:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	4413      	add	r3, r2
    6f7e:	b2da      	uxtb	r2, r3
    6f80:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f88:	701a      	strb	r2, [r3, #0]
    6f8a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f92:	781a      	ldrb	r2, [r3, #0]
    6f94:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	4413      	add	r3, r2
    6fa0:	b2da      	uxtb	r2, r3
    6fa2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    6fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6faa:	701a      	strb	r2, [r3, #0]
    6fac:	f24a 6319 	movw	r3, #42521	; 0xa619
    6fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	3301      	adds	r3, #1
    6fb8:	b2da      	uxtb	r2, r3
    6fba:	f24a 6319 	movw	r3, #42521	; 0xa619
    6fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc2:	701a      	strb	r2, [r3, #0]
    6fc4:	f24a 6319 	movw	r3, #42521	; 0xa619
    6fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	2bff      	cmp	r3, #255	; 0xff
    6fd0:	d105      	bne.n	6fde <send_boot+0x242>
    6fd2:	f24a 6319 	movw	r3, #42521	; 0xa619
    6fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fda:	2200      	movs	r2, #0
    6fdc:	701a      	strb	r2, [r3, #0]
    6fde:	f24a 6319 	movw	r3, #42521	; 0xa619
    6fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe6:	781b      	ldrb	r3, [r3, #0]
    6fe8:	461a      	mov	r2, r3
    6fea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    6fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff2:	7819      	ldrb	r1, [r3, #0]
    6ff4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    6ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffc:	5499      	strb	r1, [r3, r2]
    6ffe:	f24a 6319 	movw	r3, #42521	; 0xa619
    7002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	3301      	adds	r3, #1
    700a:	b2da      	uxtb	r2, r3
    700c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7014:	701a      	strb	r2, [r3, #0]
    7016:	f24a 6319 	movw	r3, #42521	; 0xa619
    701a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	2bff      	cmp	r3, #255	; 0xff
    7022:	d105      	bne.n	7030 <send_boot+0x294>
    7024:	f24a 6319 	movw	r3, #42521	; 0xa619
    7028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702c:	2200      	movs	r2, #0
    702e:	701a      	strb	r2, [r3, #0]
    7030:	f24a 6319 	movw	r3, #42521	; 0xa619
    7034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	461a      	mov	r2, r3
    703c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7044:	7819      	ldrb	r1, [r3, #0]
    7046:	f24a 631c 	movw	r3, #42524	; 0xa61c
    704a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704e:	5499      	strb	r1, [r3, r2]
    7050:	f24a 6319 	movw	r3, #42521	; 0xa619
    7054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	3301      	adds	r3, #1
    705c:	b2da      	uxtb	r2, r3
    705e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7066:	701a      	strb	r2, [r3, #0]
    7068:	f24a 6319 	movw	r3, #42521	; 0xa619
    706c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	2bff      	cmp	r3, #255	; 0xff
    7074:	d105      	bne.n	7082 <send_boot+0x2e6>
    7076:	f24a 6319 	movw	r3, #42521	; 0xa619
    707a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    707e:	2200      	movs	r2, #0
    7080:	701a      	strb	r2, [r3, #0]
    7082:	f242 0339 	movw	r3, #8249	; 0x2039
    7086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	b2db      	uxtb	r3, r3
    708e:	f003 0310 	and.w	r3, r3, #16
    7092:	2b00      	cmp	r3, #0
    7094:	d15a      	bne.n	714c <send_boot+0x3b0>
    7096:	f24a 631a 	movw	r3, #42522	; 0xa61a
    709a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709e:	781b      	ldrb	r3, [r3, #0]
    70a0:	b2db      	uxtb	r3, r3
    70a2:	461a      	mov	r2, r3
    70a4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    70a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ac:	5c9a      	ldrb	r2, [r3, r2]
    70ae:	f24a 731b 	movw	r3, #42779	; 0xa71b
    70b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b6:	701a      	strb	r2, [r3, #0]
    70b8:	f24a 731c 	movw	r3, #42780	; 0xa71c
    70bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c0:	2200      	movs	r2, #0
    70c2:	701a      	strb	r2, [r3, #0]
    70c4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    70c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	b2db      	uxtb	r3, r3
    70d0:	3301      	adds	r3, #1
    70d2:	b2da      	uxtb	r2, r3
    70d4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    70d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70dc:	701a      	strb	r2, [r3, #0]
    70de:	f24a 631a 	movw	r3, #42522	; 0xa61a
    70e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e6:	781b      	ldrb	r3, [r3, #0]
    70e8:	b2db      	uxtb	r3, r3
    70ea:	2bff      	cmp	r3, #255	; 0xff
    70ec:	d105      	bne.n	70fa <send_boot+0x35e>
    70ee:	f24a 631a 	movw	r3, #42522	; 0xa61a
    70f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f6:	2200      	movs	r2, #0
    70f8:	701a      	strb	r2, [r3, #0]
    70fa:	f242 0338 	movw	r3, #8248	; 0x2038
    70fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7102:	f242 0238 	movw	r2, #8248	; 0x2038
    7106:	f2c2 0200 	movt	r2, #8192	; 0x2000
    710a:	7812      	ldrb	r2, [r2, #0]
    710c:	b2d2      	uxtb	r2, r2
    710e:	f042 0201 	orr.w	r2, r2, #1
    7112:	b2d2      	uxtb	r2, r2
    7114:	701a      	strb	r2, [r3, #0]
    7116:	f242 0339 	movw	r3, #8249	; 0x2039
    711a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711e:	f242 0239 	movw	r2, #8249	; 0x2039
    7122:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7126:	7812      	ldrb	r2, [r2, #0]
    7128:	b2d2      	uxtb	r2, r2
    712a:	f042 0210 	orr.w	r2, r2, #16
    712e:	b2d2      	uxtb	r2, r2
    7130:	701a      	strb	r2, [r3, #0]
    7132:	e00b      	b.n	714c <send_boot+0x3b0>
    7134:	f24a 6318 	movw	r3, #42520	; 0xa618
    7138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	3301      	adds	r3, #1
    7140:	b2da      	uxtb	r2, r3
    7142:	f24a 6318 	movw	r3, #42520	; 0xa618
    7146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    714c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7154:	781a      	ldrb	r2, [r3, #0]
    7156:	f24a 631a 	movw	r3, #42522	; 0xa61a
    715a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	b2db      	uxtb	r3, r3
    7162:	429a      	cmp	r2, r3
    7164:	d316      	bcc.n	7194 <send_boot+0x3f8>
    7166:	f24a 631a 	movw	r3, #42522	; 0xa61a
    716a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	b2db      	uxtb	r3, r3
    7172:	461a      	mov	r2, r3
    7174:	f24a 6319 	movw	r3, #42521	; 0xa619
    7178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	1ad3      	subs	r3, r2, r3
    7180:	33ff      	adds	r3, #255	; 0xff
    7182:	2b14      	cmp	r3, #20
    7184:	bfd4      	ite	le
    7186:	2300      	movle	r3, #0
    7188:	2301      	movgt	r3, #1
    718a:	b2db      	uxtb	r3, r3
    718c:	e014      	b.n	71b8 <send_boot+0x41c>
    718e:	bf00      	nop
    7190:	0001818f 	.word	0x0001818f
    7194:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719c:	781b      	ldrb	r3, [r3, #0]
    719e:	b2db      	uxtb	r3, r3
    71a0:	461a      	mov	r2, r3
    71a2:	f24a 6319 	movw	r3, #42521	; 0xa619
    71a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71aa:	781b      	ldrb	r3, [r3, #0]
    71ac:	1ad3      	subs	r3, r2, r3
    71ae:	2b14      	cmp	r3, #20
    71b0:	bfd4      	ite	le
    71b2:	2300      	movle	r3, #0
    71b4:	2301      	movgt	r3, #1
    71b6:	b2db      	uxtb	r3, r3
    71b8:	2b00      	cmp	r3, #0
    71ba:	f000 85a5 	beq.w	7d08 <send_boot+0xf6c>
    71be:	f24a 6319 	movw	r3, #42521	; 0xa619
    71c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c6:	781b      	ldrb	r3, [r3, #0]
    71c8:	461a      	mov	r2, r3
    71ca:	f24a 631c 	movw	r3, #42524	; 0xa61c
    71ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d2:	2105      	movs	r1, #5
    71d4:	5499      	strb	r1, [r3, r2]
    71d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    71da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	3301      	adds	r3, #1
    71e2:	b2da      	uxtb	r2, r3
    71e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    71e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ec:	701a      	strb	r2, [r3, #0]
    71ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    71f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f6:	781b      	ldrb	r3, [r3, #0]
    71f8:	2bff      	cmp	r3, #255	; 0xff
    71fa:	d105      	bne.n	7208 <send_boot+0x46c>
    71fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    7200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7204:	2200      	movs	r2, #0
    7206:	701a      	strb	r2, [r3, #0]
    7208:	f24a 6319 	movw	r3, #42521	; 0xa619
    720c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	461a      	mov	r2, r3
    7214:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	2105      	movs	r1, #5
    721e:	5499      	strb	r1, [r3, r2]
    7220:	f24a 6319 	movw	r3, #42521	; 0xa619
    7224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	3301      	adds	r3, #1
    722c:	b2da      	uxtb	r2, r3
    722e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7236:	701a      	strb	r2, [r3, #0]
    7238:	f24a 6319 	movw	r3, #42521	; 0xa619
    723c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	2bff      	cmp	r3, #255	; 0xff
    7244:	d105      	bne.n	7252 <send_boot+0x4b6>
    7246:	f24a 6319 	movw	r3, #42521	; 0xa619
    724a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724e:	2200      	movs	r2, #0
    7250:	701a      	strb	r2, [r3, #0]
    7252:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	2205      	movs	r2, #5
    725c:	701a      	strb	r2, [r3, #0]
    725e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7266:	2205      	movs	r2, #5
    7268:	701a      	strb	r2, [r3, #0]
    726a:	f24a 6319 	movw	r3, #42521	; 0xa619
    726e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7272:	781b      	ldrb	r3, [r3, #0]
    7274:	461a      	mov	r2, r3
    7276:	f64a 4310 	movw	r3, #44048	; 0xac10
    727a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727e:	7819      	ldrb	r1, [r3, #0]
    7280:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7288:	5499      	strb	r1, [r3, r2]
    728a:	f64a 4310 	movw	r3, #44048	; 0xac10
    728e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7292:	781a      	ldrb	r2, [r3, #0]
    7294:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    729c:	781b      	ldrb	r3, [r3, #0]
    729e:	4413      	add	r3, r2
    72a0:	b2da      	uxtb	r2, r3
    72a2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    72a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72aa:	701a      	strb	r2, [r3, #0]
    72ac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    72b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b4:	781a      	ldrb	r2, [r3, #0]
    72b6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    72ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	4413      	add	r3, r2
    72c2:	b2da      	uxtb	r2, r3
    72c4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    72c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72cc:	701a      	strb	r2, [r3, #0]
    72ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    72d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d6:	781b      	ldrb	r3, [r3, #0]
    72d8:	3301      	adds	r3, #1
    72da:	b2da      	uxtb	r2, r3
    72dc:	f24a 6319 	movw	r3, #42521	; 0xa619
    72e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e4:	701a      	strb	r2, [r3, #0]
    72e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    72ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	2bff      	cmp	r3, #255	; 0xff
    72f2:	d105      	bne.n	7300 <send_boot+0x564>
    72f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    72f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72fc:	2200      	movs	r2, #0
    72fe:	701a      	strb	r2, [r3, #0]
    7300:	f24a 6319 	movw	r3, #42521	; 0xa619
    7304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	461a      	mov	r2, r3
    730c:	f64a 4310 	movw	r3, #44048	; 0xac10
    7310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7314:	7859      	ldrb	r1, [r3, #1]
    7316:	f24a 631c 	movw	r3, #42524	; 0xa61c
    731a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731e:	5499      	strb	r1, [r3, r2]
    7320:	4bd1      	ldr	r3, [pc, #836]	; (7668 <send_boot+0x8cc>)
    7322:	781a      	ldrb	r2, [r3, #0]
    7324:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732c:	781b      	ldrb	r3, [r3, #0]
    732e:	4413      	add	r3, r2
    7330:	b2da      	uxtb	r2, r3
    7332:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733a:	701a      	strb	r2, [r3, #0]
    733c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7344:	781a      	ldrb	r2, [r3, #0]
    7346:	f24a 731d 	movw	r3, #42781	; 0xa71d
    734a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	4413      	add	r3, r2
    7352:	b2da      	uxtb	r2, r3
    7354:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    735c:	701a      	strb	r2, [r3, #0]
    735e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	3301      	adds	r3, #1
    736a:	b2da      	uxtb	r2, r3
    736c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7374:	701a      	strb	r2, [r3, #0]
    7376:	f24a 6319 	movw	r3, #42521	; 0xa619
    737a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737e:	781b      	ldrb	r3, [r3, #0]
    7380:	2bff      	cmp	r3, #255	; 0xff
    7382:	d105      	bne.n	7390 <send_boot+0x5f4>
    7384:	f24a 6319 	movw	r3, #42521	; 0xa619
    7388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738c:	2200      	movs	r2, #0
    738e:	701a      	strb	r2, [r3, #0]
    7390:	f24a 6319 	movw	r3, #42521	; 0xa619
    7394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	461a      	mov	r2, r3
    739c:	f64a 4310 	movw	r3, #44048	; 0xac10
    73a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a4:	7899      	ldrb	r1, [r3, #2]
    73a6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    73aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ae:	5499      	strb	r1, [r3, r2]
    73b0:	4bae      	ldr	r3, [pc, #696]	; (766c <send_boot+0x8d0>)
    73b2:	781a      	ldrb	r2, [r3, #0]
    73b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    73b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	4413      	add	r3, r2
    73c0:	b2da      	uxtb	r2, r3
    73c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    73c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ca:	701a      	strb	r2, [r3, #0]
    73cc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    73d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d4:	781a      	ldrb	r2, [r3, #0]
    73d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    73da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73de:	781b      	ldrb	r3, [r3, #0]
    73e0:	4413      	add	r3, r2
    73e2:	b2da      	uxtb	r2, r3
    73e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    73e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ec:	701a      	strb	r2, [r3, #0]
    73ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    73f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	3301      	adds	r3, #1
    73fa:	b2da      	uxtb	r2, r3
    73fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	701a      	strb	r2, [r3, #0]
    7406:	f24a 6319 	movw	r3, #42521	; 0xa619
    740a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	2bff      	cmp	r3, #255	; 0xff
    7412:	d105      	bne.n	7420 <send_boot+0x684>
    7414:	f24a 6319 	movw	r3, #42521	; 0xa619
    7418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741c:	2200      	movs	r2, #0
    741e:	701a      	strb	r2, [r3, #0]
    7420:	f24a 6319 	movw	r3, #42521	; 0xa619
    7424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	461a      	mov	r2, r3
    742c:	f64a 4310 	movw	r3, #44048	; 0xac10
    7430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7434:	78d9      	ldrb	r1, [r3, #3]
    7436:	f24a 631c 	movw	r3, #42524	; 0xa61c
    743a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    743e:	5499      	strb	r1, [r3, r2]
    7440:	4b8b      	ldr	r3, [pc, #556]	; (7670 <send_boot+0x8d4>)
    7442:	781a      	ldrb	r2, [r3, #0]
    7444:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	4413      	add	r3, r2
    7450:	b2da      	uxtb	r2, r3
    7452:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745a:	701a      	strb	r2, [r3, #0]
    745c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7464:	781a      	ldrb	r2, [r3, #0]
    7466:	f24a 731d 	movw	r3, #42781	; 0xa71d
    746a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    746e:	781b      	ldrb	r3, [r3, #0]
    7470:	4413      	add	r3, r2
    7472:	b2da      	uxtb	r2, r3
    7474:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747c:	701a      	strb	r2, [r3, #0]
    747e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	3301      	adds	r3, #1
    748a:	b2da      	uxtb	r2, r3
    748c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7494:	701a      	strb	r2, [r3, #0]
    7496:	f24a 6319 	movw	r3, #42521	; 0xa619
    749a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	2bff      	cmp	r3, #255	; 0xff
    74a2:	d105      	bne.n	74b0 <send_boot+0x714>
    74a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    74a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ac:	2200      	movs	r2, #0
    74ae:	701a      	strb	r2, [r3, #0]
    74b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    74b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	461a      	mov	r2, r3
    74bc:	f64a 4314 	movw	r3, #44052	; 0xac14
    74c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c4:	7819      	ldrb	r1, [r3, #0]
    74c6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	5499      	strb	r1, [r3, r2]
    74d0:	f64a 4314 	movw	r3, #44052	; 0xac14
    74d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d8:	781a      	ldrb	r2, [r3, #0]
    74da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    74de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e2:	781b      	ldrb	r3, [r3, #0]
    74e4:	4413      	add	r3, r2
    74e6:	b2da      	uxtb	r2, r3
    74e8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    74ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f0:	701a      	strb	r2, [r3, #0]
    74f2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    74f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fa:	781a      	ldrb	r2, [r3, #0]
    74fc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	4413      	add	r3, r2
    7508:	b2da      	uxtb	r2, r3
    750a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    750e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7512:	701a      	strb	r2, [r3, #0]
    7514:	f24a 6319 	movw	r3, #42521	; 0xa619
    7518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	3301      	adds	r3, #1
    7520:	b2da      	uxtb	r2, r3
    7522:	f24a 6319 	movw	r3, #42521	; 0xa619
    7526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752a:	701a      	strb	r2, [r3, #0]
    752c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	2bff      	cmp	r3, #255	; 0xff
    7538:	d105      	bne.n	7546 <send_boot+0x7aa>
    753a:	f24a 6319 	movw	r3, #42521	; 0xa619
    753e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7542:	2200      	movs	r2, #0
    7544:	701a      	strb	r2, [r3, #0]
    7546:	f24a 6319 	movw	r3, #42521	; 0xa619
    754a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    754e:	781b      	ldrb	r3, [r3, #0]
    7550:	461a      	mov	r2, r3
    7552:	f64a 4314 	movw	r3, #44052	; 0xac14
    7556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755a:	7859      	ldrb	r1, [r3, #1]
    755c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	5499      	strb	r1, [r3, r2]
    7566:	4b43      	ldr	r3, [pc, #268]	; (7674 <send_boot+0x8d8>)
    7568:	781a      	ldrb	r2, [r3, #0]
    756a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7572:	781b      	ldrb	r3, [r3, #0]
    7574:	4413      	add	r3, r2
    7576:	b2da      	uxtb	r2, r3
    7578:	f24a 731d 	movw	r3, #42781	; 0xa71d
    757c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7580:	701a      	strb	r2, [r3, #0]
    7582:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758a:	781a      	ldrb	r2, [r3, #0]
    758c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	4413      	add	r3, r2
    7598:	b2da      	uxtb	r2, r3
    759a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    759e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a2:	701a      	strb	r2, [r3, #0]
    75a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    75a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	3301      	adds	r3, #1
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f24a 6319 	movw	r3, #42521	; 0xa619
    75b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	2bff      	cmp	r3, #255	; 0xff
    75c8:	d105      	bne.n	75d6 <send_boot+0x83a>
    75ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    75ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d2:	2200      	movs	r2, #0
    75d4:	701a      	strb	r2, [r3, #0]
    75d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    75da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	461a      	mov	r2, r3
    75e2:	f64a 4314 	movw	r3, #44052	; 0xac14
    75e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ea:	7899      	ldrb	r1, [r3, #2]
    75ec:	f24a 631c 	movw	r3, #42524	; 0xa61c
    75f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f4:	5499      	strb	r1, [r3, r2]
    75f6:	4b20      	ldr	r3, [pc, #128]	; (7678 <send_boot+0x8dc>)
    75f8:	781a      	ldrb	r2, [r3, #0]
    75fa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    75fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	4413      	add	r3, r2
    7606:	b2da      	uxtb	r2, r3
    7608:	f24a 731d 	movw	r3, #42781	; 0xa71d
    760c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7610:	701a      	strb	r2, [r3, #0]
    7612:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761a:	781a      	ldrb	r2, [r3, #0]
    761c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	4413      	add	r3, r2
    7628:	b2da      	uxtb	r2, r3
    762a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7632:	701a      	strb	r2, [r3, #0]
    7634:	f24a 6319 	movw	r3, #42521	; 0xa619
    7638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	3301      	adds	r3, #1
    7640:	b2da      	uxtb	r2, r3
    7642:	f24a 6319 	movw	r3, #42521	; 0xa619
    7646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    764a:	701a      	strb	r2, [r3, #0]
    764c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	2bff      	cmp	r3, #255	; 0xff
    7658:	d110      	bne.n	767c <send_boot+0x8e0>
    765a:	f24a 6319 	movw	r3, #42521	; 0xa619
    765e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7662:	2200      	movs	r2, #0
    7664:	701a      	strb	r2, [r3, #0]
    7666:	e009      	b.n	767c <send_boot+0x8e0>
    7668:	2000ac11 	.word	0x2000ac11
    766c:	2000ac12 	.word	0x2000ac12
    7670:	2000ac13 	.word	0x2000ac13
    7674:	2000ac15 	.word	0x2000ac15
    7678:	2000ac16 	.word	0x2000ac16
    767c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	461a      	mov	r2, r3
    7688:	f64a 4314 	movw	r3, #44052	; 0xac14
    768c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7690:	78d9      	ldrb	r1, [r3, #3]
    7692:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769a:	5499      	strb	r1, [r3, r2]
    769c:	4bd3      	ldr	r3, [pc, #844]	; (79ec <send_boot+0xc50>)
    769e:	781a      	ldrb	r2, [r3, #0]
    76a0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    76a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	4413      	add	r3, r2
    76ac:	b2da      	uxtb	r2, r3
    76ae:	f24a 731d 	movw	r3, #42781	; 0xa71d
    76b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b6:	701a      	strb	r2, [r3, #0]
    76b8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    76bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c0:	781a      	ldrb	r2, [r3, #0]
    76c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    76c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ca:	781b      	ldrb	r3, [r3, #0]
    76cc:	4413      	add	r3, r2
    76ce:	b2da      	uxtb	r2, r3
    76d0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    76d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d8:	701a      	strb	r2, [r3, #0]
    76da:	f24a 6319 	movw	r3, #42521	; 0xa619
    76de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	3301      	adds	r3, #1
    76e6:	b2da      	uxtb	r2, r3
    76e8:	f24a 6319 	movw	r3, #42521	; 0xa619
    76ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f0:	701a      	strb	r2, [r3, #0]
    76f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    76f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	2bff      	cmp	r3, #255	; 0xff
    76fe:	d105      	bne.n	770c <send_boot+0x970>
    7700:	f24a 6319 	movw	r3, #42521	; 0xa619
    7704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7708:	2200      	movs	r2, #0
    770a:	701a      	strb	r2, [r3, #0]
    770c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	461a      	mov	r2, r3
    7718:	f64a 430c 	movw	r3, #44044	; 0xac0c
    771c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7720:	7819      	ldrb	r1, [r3, #0]
    7722:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772a:	5499      	strb	r1, [r3, r2]
    772c:	f64a 430c 	movw	r3, #44044	; 0xac0c
    7730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7734:	781a      	ldrb	r2, [r3, #0]
    7736:	f24a 731d 	movw	r3, #42781	; 0xa71d
    773a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	4413      	add	r3, r2
    7742:	b2da      	uxtb	r2, r3
    7744:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774c:	701a      	strb	r2, [r3, #0]
    774e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7756:	781a      	ldrb	r2, [r3, #0]
    7758:	f24a 731d 	movw	r3, #42781	; 0xa71d
    775c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7760:	781b      	ldrb	r3, [r3, #0]
    7762:	4413      	add	r3, r2
    7764:	b2da      	uxtb	r2, r3
    7766:	f24a 731e 	movw	r3, #42782	; 0xa71e
    776a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776e:	701a      	strb	r2, [r3, #0]
    7770:	f24a 6319 	movw	r3, #42521	; 0xa619
    7774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	3301      	adds	r3, #1
    777c:	b2da      	uxtb	r2, r3
    777e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f24a 6319 	movw	r3, #42521	; 0xa619
    778c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	2bff      	cmp	r3, #255	; 0xff
    7794:	d105      	bne.n	77a2 <send_boot+0xa06>
    7796:	f24a 6319 	movw	r3, #42521	; 0xa619
    779a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779e:	2200      	movs	r2, #0
    77a0:	701a      	strb	r2, [r3, #0]
    77a2:	f24a 6319 	movw	r3, #42521	; 0xa619
    77a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	461a      	mov	r2, r3
    77ae:	f64a 430c 	movw	r3, #44044	; 0xac0c
    77b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b6:	7859      	ldrb	r1, [r3, #1]
    77b8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    77bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c0:	5499      	strb	r1, [r3, r2]
    77c2:	4b8b      	ldr	r3, [pc, #556]	; (79f0 <send_boot+0xc54>)
    77c4:	781a      	ldrb	r2, [r3, #0]
    77c6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    77ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	4413      	add	r3, r2
    77d2:	b2da      	uxtb	r2, r3
    77d4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    77d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77dc:	701a      	strb	r2, [r3, #0]
    77de:	f24a 731e 	movw	r3, #42782	; 0xa71e
    77e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e6:	781a      	ldrb	r2, [r3, #0]
    77e8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    77ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	4413      	add	r3, r2
    77f4:	b2da      	uxtb	r2, r3
    77f6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    77fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fe:	701a      	strb	r2, [r3, #0]
    7800:	f24a 6319 	movw	r3, #42521	; 0xa619
    7804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7808:	781b      	ldrb	r3, [r3, #0]
    780a:	3301      	adds	r3, #1
    780c:	b2da      	uxtb	r2, r3
    780e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7816:	701a      	strb	r2, [r3, #0]
    7818:	f24a 6319 	movw	r3, #42521	; 0xa619
    781c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	2bff      	cmp	r3, #255	; 0xff
    7824:	d105      	bne.n	7832 <send_boot+0xa96>
    7826:	f24a 6319 	movw	r3, #42521	; 0xa619
    782a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782e:	2200      	movs	r2, #0
    7830:	701a      	strb	r2, [r3, #0]
    7832:	f24a 6319 	movw	r3, #42521	; 0xa619
    7836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	461a      	mov	r2, r3
    783e:	f64a 430c 	movw	r3, #44044	; 0xac0c
    7842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7846:	7899      	ldrb	r1, [r3, #2]
    7848:	f24a 631c 	movw	r3, #42524	; 0xa61c
    784c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7850:	5499      	strb	r1, [r3, r2]
    7852:	4b68      	ldr	r3, [pc, #416]	; (79f4 <send_boot+0xc58>)
    7854:	781a      	ldrb	r2, [r3, #0]
    7856:	f24a 731d 	movw	r3, #42781	; 0xa71d
    785a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	4413      	add	r3, r2
    7862:	b2da      	uxtb	r2, r3
    7864:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786c:	701a      	strb	r2, [r3, #0]
    786e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7876:	781a      	ldrb	r2, [r3, #0]
    7878:	f24a 731d 	movw	r3, #42781	; 0xa71d
    787c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	4413      	add	r3, r2
    7884:	b2da      	uxtb	r2, r3
    7886:	f24a 731e 	movw	r3, #42782	; 0xa71e
    788a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788e:	701a      	strb	r2, [r3, #0]
    7890:	f24a 6319 	movw	r3, #42521	; 0xa619
    7894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	3301      	adds	r3, #1
    789c:	b2da      	uxtb	r2, r3
    789e:	f24a 6319 	movw	r3, #42521	; 0xa619
    78a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a6:	701a      	strb	r2, [r3, #0]
    78a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    78ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b0:	781b      	ldrb	r3, [r3, #0]
    78b2:	2bff      	cmp	r3, #255	; 0xff
    78b4:	d105      	bne.n	78c2 <send_boot+0xb26>
    78b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    78ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78be:	2200      	movs	r2, #0
    78c0:	701a      	strb	r2, [r3, #0]
    78c2:	f24a 6319 	movw	r3, #42521	; 0xa619
    78c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	461a      	mov	r2, r3
    78ce:	f64a 430c 	movw	r3, #44044	; 0xac0c
    78d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d6:	78d9      	ldrb	r1, [r3, #3]
    78d8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    78dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e0:	5499      	strb	r1, [r3, r2]
    78e2:	4b45      	ldr	r3, [pc, #276]	; (79f8 <send_boot+0xc5c>)
    78e4:	781a      	ldrb	r2, [r3, #0]
    78e6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    78ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	4413      	add	r3, r2
    78f2:	b2da      	uxtb	r2, r3
    78f4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    78f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fc:	701a      	strb	r2, [r3, #0]
    78fe:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7906:	781a      	ldrb	r2, [r3, #0]
    7908:	f24a 731d 	movw	r3, #42781	; 0xa71d
    790c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	4413      	add	r3, r2
    7914:	b2da      	uxtb	r2, r3
    7916:	f24a 731e 	movw	r3, #42782	; 0xa71e
    791a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791e:	701a      	strb	r2, [r3, #0]
    7920:	f24a 6319 	movw	r3, #42521	; 0xa619
    7924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	3301      	adds	r3, #1
    792c:	b2da      	uxtb	r2, r3
    792e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7936:	701a      	strb	r2, [r3, #0]
    7938:	f24a 6319 	movw	r3, #42521	; 0xa619
    793c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7940:	781b      	ldrb	r3, [r3, #0]
    7942:	2bff      	cmp	r3, #255	; 0xff
    7944:	d105      	bne.n	7952 <send_boot+0xbb6>
    7946:	f24a 6319 	movw	r3, #42521	; 0xa619
    794a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794e:	2200      	movs	r2, #0
    7950:	701a      	strb	r2, [r3, #0]
    7952:	f24a 6319 	movw	r3, #42521	; 0xa619
    7956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	461a      	mov	r2, r3
    795e:	f240 0386 	movw	r3, #134	; 0x86
    7962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7966:	7819      	ldrb	r1, [r3, #0]
    7968:	f24a 631c 	movw	r3, #42524	; 0xa61c
    796c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7970:	5499      	strb	r1, [r3, r2]
    7972:	f240 0386 	movw	r3, #134	; 0x86
    7976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797a:	781a      	ldrb	r2, [r3, #0]
    797c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7984:	781b      	ldrb	r3, [r3, #0]
    7986:	4413      	add	r3, r2
    7988:	b2da      	uxtb	r2, r3
    798a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    798e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7992:	701a      	strb	r2, [r3, #0]
    7994:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799c:	781a      	ldrb	r2, [r3, #0]
    799e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    79a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	4413      	add	r3, r2
    79aa:	b2da      	uxtb	r2, r3
    79ac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    79b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b4:	701a      	strb	r2, [r3, #0]
    79b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    79ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	3301      	adds	r3, #1
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f24a 6319 	movw	r3, #42521	; 0xa619
    79c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    79d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	2bff      	cmp	r3, #255	; 0xff
    79da:	d10f      	bne.n	79fc <send_boot+0xc60>
    79dc:	f24a 6319 	movw	r3, #42521	; 0xa619
    79e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e4:	2200      	movs	r2, #0
    79e6:	701a      	strb	r2, [r3, #0]
    79e8:	e008      	b.n	79fc <send_boot+0xc60>
    79ea:	bf00      	nop
    79ec:	2000ac17 	.word	0x2000ac17
    79f0:	2000ac0d 	.word	0x2000ac0d
    79f4:	2000ac0e 	.word	0x2000ac0e
    79f8:	2000ac0f 	.word	0x2000ac0f
    79fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	461a      	mov	r2, r3
    7a08:	f240 0386 	movw	r3, #134	; 0x86
    7a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a10:	7859      	ldrb	r1, [r3, #1]
    7a12:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1a:	5499      	strb	r1, [r3, r2]
    7a1c:	4bc5      	ldr	r3, [pc, #788]	; (7d34 <send_boot+0xf98>)
    7a1e:	781a      	ldrb	r2, [r3, #0]
    7a20:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a28:	781b      	ldrb	r3, [r3, #0]
    7a2a:	4413      	add	r3, r2
    7a2c:	b2da      	uxtb	r2, r3
    7a2e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a36:	701a      	strb	r2, [r3, #0]
    7a38:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a40:	781a      	ldrb	r2, [r3, #0]
    7a42:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4a:	781b      	ldrb	r3, [r3, #0]
    7a4c:	4413      	add	r3, r2
    7a4e:	b2da      	uxtb	r2, r3
    7a50:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a58:	701a      	strb	r2, [r3, #0]
    7a5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a62:	781b      	ldrb	r3, [r3, #0]
    7a64:	3301      	adds	r3, #1
    7a66:	b2da      	uxtb	r2, r3
    7a68:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a70:	701a      	strb	r2, [r3, #0]
    7a72:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	2bff      	cmp	r3, #255	; 0xff
    7a7e:	d105      	bne.n	7a8c <send_boot+0xcf0>
    7a80:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	2200      	movs	r2, #0
    7a8a:	701a      	strb	r2, [r3, #0]
    7a8c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	461a      	mov	r2, r3
    7a98:	f240 0388 	movw	r3, #136	; 0x88
    7a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa0:	7819      	ldrb	r1, [r3, #0]
    7aa2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aaa:	5499      	strb	r1, [r3, r2]
    7aac:	f240 0388 	movw	r3, #136	; 0x88
    7ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab4:	781a      	ldrb	r2, [r3, #0]
    7ab6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	4413      	add	r3, r2
    7ac2:	b2da      	uxtb	r2, r3
    7ac4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7acc:	701a      	strb	r2, [r3, #0]
    7ace:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad6:	781a      	ldrb	r2, [r3, #0]
    7ad8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae0:	781b      	ldrb	r3, [r3, #0]
    7ae2:	4413      	add	r3, r2
    7ae4:	b2da      	uxtb	r2, r3
    7ae6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aee:	701a      	strb	r2, [r3, #0]
    7af0:	f24a 6319 	movw	r3, #42521	; 0xa619
    7af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	3301      	adds	r3, #1
    7afc:	b2da      	uxtb	r2, r3
    7afe:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b06:	701a      	strb	r2, [r3, #0]
    7b08:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b10:	781b      	ldrb	r3, [r3, #0]
    7b12:	2bff      	cmp	r3, #255	; 0xff
    7b14:	d105      	bne.n	7b22 <send_boot+0xd86>
    7b16:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b1e:	2200      	movs	r2, #0
    7b20:	701a      	strb	r2, [r3, #0]
    7b22:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b2a:	781b      	ldrb	r3, [r3, #0]
    7b2c:	461a      	mov	r2, r3
    7b2e:	f240 0388 	movw	r3, #136	; 0x88
    7b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b36:	7859      	ldrb	r1, [r3, #1]
    7b38:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b40:	5499      	strb	r1, [r3, r2]
    7b42:	4b7d      	ldr	r3, [pc, #500]	; (7d38 <send_boot+0xf9c>)
    7b44:	781a      	ldrb	r2, [r3, #0]
    7b46:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	4413      	add	r3, r2
    7b52:	b2da      	uxtb	r2, r3
    7b54:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b5c:	701a      	strb	r2, [r3, #0]
    7b5e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b66:	781a      	ldrb	r2, [r3, #0]
    7b68:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b70:	781b      	ldrb	r3, [r3, #0]
    7b72:	4413      	add	r3, r2
    7b74:	b2da      	uxtb	r2, r3
    7b76:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b7e:	701a      	strb	r2, [r3, #0]
    7b80:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	3301      	adds	r3, #1
    7b8c:	b2da      	uxtb	r2, r3
    7b8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b96:	701a      	strb	r2, [r3, #0]
    7b98:	f24a 6319 	movw	r3, #42521	; 0xa619
    7b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba0:	781b      	ldrb	r3, [r3, #0]
    7ba2:	2bff      	cmp	r3, #255	; 0xff
    7ba4:	d105      	bne.n	7bb2 <send_boot+0xe16>
    7ba6:	f24a 6319 	movw	r3, #42521	; 0xa619
    7baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bae:	2200      	movs	r2, #0
    7bb0:	701a      	strb	r2, [r3, #0]
    7bb2:	f24a 6319 	movw	r3, #42521	; 0xa619
    7bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bba:	781b      	ldrb	r3, [r3, #0]
    7bbc:	461a      	mov	r2, r3
    7bbe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc6:	7819      	ldrb	r1, [r3, #0]
    7bc8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd0:	5499      	strb	r1, [r3, r2]
    7bd2:	f24a 6319 	movw	r3, #42521	; 0xa619
    7bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bda:	781b      	ldrb	r3, [r3, #0]
    7bdc:	3301      	adds	r3, #1
    7bde:	b2da      	uxtb	r2, r3
    7be0:	f24a 6319 	movw	r3, #42521	; 0xa619
    7be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be8:	701a      	strb	r2, [r3, #0]
    7bea:	f24a 6319 	movw	r3, #42521	; 0xa619
    7bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	2bff      	cmp	r3, #255	; 0xff
    7bf6:	d105      	bne.n	7c04 <send_boot+0xe68>
    7bf8:	f24a 6319 	movw	r3, #42521	; 0xa619
    7bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c00:	2200      	movs	r2, #0
    7c02:	701a      	strb	r2, [r3, #0]
    7c04:	f24a 6319 	movw	r3, #42521	; 0xa619
    7c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0c:	781b      	ldrb	r3, [r3, #0]
    7c0e:	461a      	mov	r2, r3
    7c10:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c18:	7819      	ldrb	r1, [r3, #0]
    7c1a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c22:	5499      	strb	r1, [r3, r2]
    7c24:	f24a 6319 	movw	r3, #42521	; 0xa619
    7c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	3301      	adds	r3, #1
    7c30:	b2da      	uxtb	r2, r3
    7c32:	f24a 6319 	movw	r3, #42521	; 0xa619
    7c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3a:	701a      	strb	r2, [r3, #0]
    7c3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	2bff      	cmp	r3, #255	; 0xff
    7c48:	d105      	bne.n	7c56 <send_boot+0xeba>
    7c4a:	f24a 6319 	movw	r3, #42521	; 0xa619
    7c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c52:	2200      	movs	r2, #0
    7c54:	701a      	strb	r2, [r3, #0]
    7c56:	f242 0339 	movw	r3, #8249	; 0x2039
    7c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	b2db      	uxtb	r3, r3
    7c62:	f003 0310 	and.w	r3, r3, #16
    7c66:	2b00      	cmp	r3, #0
    7c68:	d15a      	bne.n	7d20 <send_boot+0xf84>
    7c6a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	b2db      	uxtb	r3, r3
    7c76:	461a      	mov	r2, r3
    7c78:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c80:	5c9a      	ldrb	r2, [r3, r2]
    7c82:	f24a 731b 	movw	r3, #42779	; 0xa71b
    7c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8a:	701a      	strb	r2, [r3, #0]
    7c8c:	f24a 731c 	movw	r3, #42780	; 0xa71c
    7c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c94:	2200      	movs	r2, #0
    7c96:	701a      	strb	r2, [r3, #0]
    7c98:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	b2db      	uxtb	r3, r3
    7ca4:	3301      	adds	r3, #1
    7ca6:	b2da      	uxtb	r2, r3
    7ca8:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb0:	701a      	strb	r2, [r3, #0]
    7cb2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cba:	781b      	ldrb	r3, [r3, #0]
    7cbc:	b2db      	uxtb	r3, r3
    7cbe:	2bff      	cmp	r3, #255	; 0xff
    7cc0:	d105      	bne.n	7cce <send_boot+0xf32>
    7cc2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cca:	2200      	movs	r2, #0
    7ccc:	701a      	strb	r2, [r3, #0]
    7cce:	f242 0338 	movw	r3, #8248	; 0x2038
    7cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd6:	f242 0238 	movw	r2, #8248	; 0x2038
    7cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7cde:	7812      	ldrb	r2, [r2, #0]
    7ce0:	b2d2      	uxtb	r2, r2
    7ce2:	f042 0201 	orr.w	r2, r2, #1
    7ce6:	b2d2      	uxtb	r2, r2
    7ce8:	701a      	strb	r2, [r3, #0]
    7cea:	f242 0339 	movw	r3, #8249	; 0x2039
    7cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf2:	f242 0239 	movw	r2, #8249	; 0x2039
    7cf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7cfa:	7812      	ldrb	r2, [r2, #0]
    7cfc:	b2d2      	uxtb	r2, r2
    7cfe:	f042 0210 	orr.w	r2, r2, #16
    7d02:	b2d2      	uxtb	r2, r2
    7d04:	701a      	strb	r2, [r3, #0]
    7d06:	e00b      	b.n	7d20 <send_boot+0xf84>
    7d08:	f24a 6318 	movw	r3, #42520	; 0xa618
    7d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d10:	781b      	ldrb	r3, [r3, #0]
    7d12:	3301      	adds	r3, #1
    7d14:	b2da      	uxtb	r2, r3
    7d16:	f24a 6318 	movw	r3, #42520	; 0xa618
    7d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d1e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    7d20:	f240 0381 	movw	r3, #129	; 0x81
    7d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d28:	2200      	movs	r2, #0
    7d2a:	701a      	strb	r2, [r3, #0]
  }
}
    7d2c:	46bd      	mov	sp, r7
    7d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d32:	4770      	bx	lr
    7d34:	20000087 	.word	0x20000087
    7d38:	20000089 	.word	0x20000089

00007d3c <send_attitude>:
void send_attitude(void){ //499ms
    7d3c:	b480      	push	{r7}
    7d3e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    7d40:	f24a 6311 	movw	r3, #42513	; 0xa611
    7d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d48:	781b      	ldrb	r3, [r3, #0]
    7d4a:	3301      	adds	r3, #1
    7d4c:	b2da      	uxtb	r2, r3
    7d4e:	f24a 6311 	movw	r3, #42513	; 0xa611
    7d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d56:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    7d58:	f24a 6311 	movw	r3, #42513	; 0xa611
    7d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	2bfa      	cmp	r3, #250	; 0xfa
    7d64:	d105      	bne.n	7d72 <send_attitude+0x36>
    7d66:	f24a 6311 	movw	r3, #42513	; 0xa611
    7d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d6e:	2200      	movs	r2, #0
    7d70:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    7d72:	f24a 6311 	movw	r3, #42513	; 0xa611
    7d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d7a:	781a      	ldrb	r2, [r3, #0]
    7d7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7d80:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7d84:	fba3 1302 	umull	r1, r3, r3, r2
    7d88:	0899      	lsrs	r1, r3, #2
    7d8a:	460b      	mov	r3, r1
    7d8c:	009b      	lsls	r3, r3, #2
    7d8e:	440b      	add	r3, r1
    7d90:	1ad3      	subs	r3, r2, r3
    7d92:	b2db      	uxtb	r3, r3
    7d94:	2b00      	cmp	r3, #0
    7d96:	f040 84c1 	bne.w	871c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    7d9a:	f24a 6319 	movw	r3, #42521	; 0xa619
    7d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da2:	781a      	ldrb	r2, [r3, #0]
    7da4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	b2db      	uxtb	r3, r3
    7db0:	429a      	cmp	r2, r3
    7db2:	d313      	bcc.n	7ddc <send_attitude+0xa0>
    7db4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dbc:	781b      	ldrb	r3, [r3, #0]
    7dbe:	b2db      	uxtb	r3, r3
    7dc0:	461a      	mov	r2, r3
    7dc2:	f24a 6319 	movw	r3, #42521	; 0xa619
    7dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dca:	781b      	ldrb	r3, [r3, #0]
    7dcc:	1ad3      	subs	r3, r2, r3
    7dce:	33ff      	adds	r3, #255	; 0xff
    7dd0:	2b10      	cmp	r3, #16
    7dd2:	bfd4      	ite	le
    7dd4:	2300      	movle	r3, #0
    7dd6:	2301      	movgt	r3, #1
    7dd8:	b2db      	uxtb	r3, r3
    7dda:	e011      	b.n	7e00 <send_attitude+0xc4>
    7ddc:	f24a 631a 	movw	r3, #42522	; 0xa61a
    7de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	b2db      	uxtb	r3, r3
    7de8:	461a      	mov	r2, r3
    7dea:	f24a 6319 	movw	r3, #42521	; 0xa619
    7dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df2:	781b      	ldrb	r3, [r3, #0]
    7df4:	1ad3      	subs	r3, r2, r3
    7df6:	2b10      	cmp	r3, #16
    7df8:	bfd4      	ite	le
    7dfa:	2300      	movle	r3, #0
    7dfc:	2301      	movgt	r3, #1
    7dfe:	b2db      	uxtb	r3, r3
    7e00:	2b00      	cmp	r3, #0
    7e02:	f000 847f 	beq.w	8704 <send_attitude+0x9c8>
    7e06:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0e:	781b      	ldrb	r3, [r3, #0]
    7e10:	461a      	mov	r2, r3
    7e12:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e1a:	2105      	movs	r1, #5
    7e1c:	5499      	strb	r1, [r3, r2]
    7e1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e26:	781b      	ldrb	r3, [r3, #0]
    7e28:	3301      	adds	r3, #1
    7e2a:	b2da      	uxtb	r2, r3
    7e2c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e34:	701a      	strb	r2, [r3, #0]
    7e36:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	2bff      	cmp	r3, #255	; 0xff
    7e42:	d105      	bne.n	7e50 <send_attitude+0x114>
    7e44:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e4c:	2200      	movs	r2, #0
    7e4e:	701a      	strb	r2, [r3, #0]
    7e50:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	461a      	mov	r2, r3
    7e5c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e64:	2106      	movs	r1, #6
    7e66:	5499      	strb	r1, [r3, r2]
    7e68:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	3301      	adds	r3, #1
    7e74:	b2da      	uxtb	r2, r3
    7e76:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e7e:	701a      	strb	r2, [r3, #0]
    7e80:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	2bff      	cmp	r3, #255	; 0xff
    7e8c:	d105      	bne.n	7e9a <send_attitude+0x15e>
    7e8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e96:	2200      	movs	r2, #0
    7e98:	701a      	strb	r2, [r3, #0]
    7e9a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea2:	2206      	movs	r2, #6
    7ea4:	701a      	strb	r2, [r3, #0]
    7ea6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eae:	2206      	movs	r2, #6
    7eb0:	701a      	strb	r2, [r3, #0]
    7eb2:	f24a 6319 	movw	r3, #42521	; 0xa619
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	461a      	mov	r2, r3
    7ebe:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    7ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec6:	7819      	ldrb	r1, [r3, #0]
    7ec8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed0:	5499      	strb	r1, [r3, r2]
    7ed2:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    7ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eda:	781a      	ldrb	r2, [r3, #0]
    7edc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee4:	781b      	ldrb	r3, [r3, #0]
    7ee6:	4413      	add	r3, r2
    7ee8:	b2da      	uxtb	r2, r3
    7eea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef2:	701a      	strb	r2, [r3, #0]
    7ef4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7efc:	781a      	ldrb	r2, [r3, #0]
    7efe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	4413      	add	r3, r2
    7f0a:	b2da      	uxtb	r2, r3
    7f0c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f14:	701a      	strb	r2, [r3, #0]
    7f16:	f24a 6319 	movw	r3, #42521	; 0xa619
    7f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	3301      	adds	r3, #1
    7f22:	b2da      	uxtb	r2, r3
    7f24:	f24a 6319 	movw	r3, #42521	; 0xa619
    7f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f2c:	701a      	strb	r2, [r3, #0]
    7f2e:	f24a 6319 	movw	r3, #42521	; 0xa619
    7f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	2bff      	cmp	r3, #255	; 0xff
    7f3a:	d105      	bne.n	7f48 <send_attitude+0x20c>
    7f3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    7f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f44:	2200      	movs	r2, #0
    7f46:	701a      	strb	r2, [r3, #0]
    7f48:	f24a 6319 	movw	r3, #42521	; 0xa619
    7f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	461a      	mov	r2, r3
    7f54:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    7f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5c:	7859      	ldrb	r1, [r3, #1]
    7f5e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f66:	5499      	strb	r1, [r3, r2]
    7f68:	4bd1      	ldr	r3, [pc, #836]	; (82b0 <send_attitude+0x574>)
    7f6a:	781a      	ldrb	r2, [r3, #0]
    7f6c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f74:	781b      	ldrb	r3, [r3, #0]
    7f76:	4413      	add	r3, r2
    7f78:	b2da      	uxtb	r2, r3
    7f7a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f82:	701a      	strb	r2, [r3, #0]
    7f84:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f8c:	781a      	ldrb	r2, [r3, #0]
    7f8e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    7f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	4413      	add	r3, r2
    7f9a:	b2da      	uxtb	r2, r3
    7f9c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    7fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa4:	701a      	strb	r2, [r3, #0]
    7fa6:	f24a 6319 	movw	r3, #42521	; 0xa619
    7faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	3301      	adds	r3, #1
    7fb2:	b2da      	uxtb	r2, r3
    7fb4:	f24a 6319 	movw	r3, #42521	; 0xa619
    7fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbc:	701a      	strb	r2, [r3, #0]
    7fbe:	f24a 6319 	movw	r3, #42521	; 0xa619
    7fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	2bff      	cmp	r3, #255	; 0xff
    7fca:	d105      	bne.n	7fd8 <send_attitude+0x29c>
    7fcc:	f24a 6319 	movw	r3, #42521	; 0xa619
    7fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd4:	2200      	movs	r2, #0
    7fd6:	701a      	strb	r2, [r3, #0]
    7fd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    7fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	461a      	mov	r2, r3
    7fe4:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    7fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fec:	7899      	ldrb	r1, [r3, #2]
    7fee:	f24a 631c 	movw	r3, #42524	; 0xa61c
    7ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff6:	5499      	strb	r1, [r3, r2]
    7ff8:	4bae      	ldr	r3, [pc, #696]	; (82b4 <send_attitude+0x578>)
    7ffa:	781a      	ldrb	r2, [r3, #0]
    7ffc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8004:	781b      	ldrb	r3, [r3, #0]
    8006:	4413      	add	r3, r2
    8008:	b2da      	uxtb	r2, r3
    800a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    800e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8012:	701a      	strb	r2, [r3, #0]
    8014:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801c:	781a      	ldrb	r2, [r3, #0]
    801e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	4413      	add	r3, r2
    802a:	b2da      	uxtb	r2, r3
    802c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8034:	701a      	strb	r2, [r3, #0]
    8036:	f24a 6319 	movw	r3, #42521	; 0xa619
    803a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    803e:	781b      	ldrb	r3, [r3, #0]
    8040:	3301      	adds	r3, #1
    8042:	b2da      	uxtb	r2, r3
    8044:	f24a 6319 	movw	r3, #42521	; 0xa619
    8048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    804c:	701a      	strb	r2, [r3, #0]
    804e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	2bff      	cmp	r3, #255	; 0xff
    805a:	d105      	bne.n	8068 <send_attitude+0x32c>
    805c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8064:	2200      	movs	r2, #0
    8066:	701a      	strb	r2, [r3, #0]
    8068:	f24a 6319 	movw	r3, #42521	; 0xa619
    806c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	461a      	mov	r2, r3
    8074:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    8078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807c:	78d9      	ldrb	r1, [r3, #3]
    807e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8086:	5499      	strb	r1, [r3, r2]
    8088:	4b8b      	ldr	r3, [pc, #556]	; (82b8 <send_attitude+0x57c>)
    808a:	781a      	ldrb	r2, [r3, #0]
    808c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8094:	781b      	ldrb	r3, [r3, #0]
    8096:	4413      	add	r3, r2
    8098:	b2da      	uxtb	r2, r3
    809a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    809e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a2:	701a      	strb	r2, [r3, #0]
    80a4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	781a      	ldrb	r2, [r3, #0]
    80ae:	f24a 731d 	movw	r3, #42781	; 0xa71d
    80b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	4413      	add	r3, r2
    80ba:	b2da      	uxtb	r2, r3
    80bc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    80c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c4:	701a      	strb	r2, [r3, #0]
    80c6:	f24a 6319 	movw	r3, #42521	; 0xa619
    80ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ce:	781b      	ldrb	r3, [r3, #0]
    80d0:	3301      	adds	r3, #1
    80d2:	b2da      	uxtb	r2, r3
    80d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    80d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80dc:	701a      	strb	r2, [r3, #0]
    80de:	f24a 6319 	movw	r3, #42521	; 0xa619
    80e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	2bff      	cmp	r3, #255	; 0xff
    80ea:	d105      	bne.n	80f8 <send_attitude+0x3bc>
    80ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    80f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f4:	2200      	movs	r2, #0
    80f6:	701a      	strb	r2, [r3, #0]
    80f8:	f24a 6319 	movw	r3, #42521	; 0xa619
    80fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	461a      	mov	r2, r3
    8104:	f64a 33dc 	movw	r3, #43996	; 0xabdc
    8108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810c:	7819      	ldrb	r1, [r3, #0]
    810e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8116:	5499      	strb	r1, [r3, r2]
    8118:	f64a 33dc 	movw	r3, #43996	; 0xabdc
    811c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8120:	781a      	ldrb	r2, [r3, #0]
    8122:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	4413      	add	r3, r2
    812e:	b2da      	uxtb	r2, r3
    8130:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	701a      	strb	r2, [r3, #0]
    813a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    813e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8142:	781a      	ldrb	r2, [r3, #0]
    8144:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	4413      	add	r3, r2
    8150:	b2da      	uxtb	r2, r3
    8152:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815a:	701a      	strb	r2, [r3, #0]
    815c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8164:	781b      	ldrb	r3, [r3, #0]
    8166:	3301      	adds	r3, #1
    8168:	b2da      	uxtb	r2, r3
    816a:	f24a 6319 	movw	r3, #42521	; 0xa619
    816e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8172:	701a      	strb	r2, [r3, #0]
    8174:	f24a 6319 	movw	r3, #42521	; 0xa619
    8178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	2bff      	cmp	r3, #255	; 0xff
    8180:	d105      	bne.n	818e <send_attitude+0x452>
    8182:	f24a 6319 	movw	r3, #42521	; 0xa619
    8186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818a:	2200      	movs	r2, #0
    818c:	701a      	strb	r2, [r3, #0]
    818e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8196:	781b      	ldrb	r3, [r3, #0]
    8198:	461a      	mov	r2, r3
    819a:	f64a 33dc 	movw	r3, #43996	; 0xabdc
    819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a2:	7859      	ldrb	r1, [r3, #1]
    81a4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    81a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ac:	5499      	strb	r1, [r3, r2]
    81ae:	4b43      	ldr	r3, [pc, #268]	; (82bc <send_attitude+0x580>)
    81b0:	781a      	ldrb	r2, [r3, #0]
    81b2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    81b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	4413      	add	r3, r2
    81be:	b2da      	uxtb	r2, r3
    81c0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    81c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c8:	701a      	strb	r2, [r3, #0]
    81ca:	f24a 731e 	movw	r3, #42782	; 0xa71e
    81ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d2:	781a      	ldrb	r2, [r3, #0]
    81d4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    81d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	4413      	add	r3, r2
    81e0:	b2da      	uxtb	r2, r3
    81e2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    81e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ea:	701a      	strb	r2, [r3, #0]
    81ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    81f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	3301      	adds	r3, #1
    81f8:	b2da      	uxtb	r2, r3
    81fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    81fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8202:	701a      	strb	r2, [r3, #0]
    8204:	f24a 6319 	movw	r3, #42521	; 0xa619
    8208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820c:	781b      	ldrb	r3, [r3, #0]
    820e:	2bff      	cmp	r3, #255	; 0xff
    8210:	d105      	bne.n	821e <send_attitude+0x4e2>
    8212:	f24a 6319 	movw	r3, #42521	; 0xa619
    8216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    821a:	2200      	movs	r2, #0
    821c:	701a      	strb	r2, [r3, #0]
    821e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	461a      	mov	r2, r3
    822a:	f64a 33dc 	movw	r3, #43996	; 0xabdc
    822e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8232:	7899      	ldrb	r1, [r3, #2]
    8234:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823c:	5499      	strb	r1, [r3, r2]
    823e:	4b20      	ldr	r3, [pc, #128]	; (82c0 <send_attitude+0x584>)
    8240:	781a      	ldrb	r2, [r3, #0]
    8242:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	4413      	add	r3, r2
    824e:	b2da      	uxtb	r2, r3
    8250:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8258:	701a      	strb	r2, [r3, #0]
    825a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    825e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8262:	781a      	ldrb	r2, [r3, #0]
    8264:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826c:	781b      	ldrb	r3, [r3, #0]
    826e:	4413      	add	r3, r2
    8270:	b2da      	uxtb	r2, r3
    8272:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    827a:	701a      	strb	r2, [r3, #0]
    827c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	3301      	adds	r3, #1
    8288:	b2da      	uxtb	r2, r3
    828a:	f24a 6319 	movw	r3, #42521	; 0xa619
    828e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8292:	701a      	strb	r2, [r3, #0]
    8294:	f24a 6319 	movw	r3, #42521	; 0xa619
    8298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829c:	781b      	ldrb	r3, [r3, #0]
    829e:	2bff      	cmp	r3, #255	; 0xff
    82a0:	d110      	bne.n	82c4 <send_attitude+0x588>
    82a2:	f24a 6319 	movw	r3, #42521	; 0xa619
    82a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82aa:	2200      	movs	r2, #0
    82ac:	701a      	strb	r2, [r3, #0]
    82ae:	e009      	b.n	82c4 <send_attitude+0x588>
    82b0:	2000abd9 	.word	0x2000abd9
    82b4:	2000abda 	.word	0x2000abda
    82b8:	2000abdb 	.word	0x2000abdb
    82bc:	2000abdd 	.word	0x2000abdd
    82c0:	2000abde 	.word	0x2000abde
    82c4:	f24a 6319 	movw	r3, #42521	; 0xa619
    82c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82cc:	781b      	ldrb	r3, [r3, #0]
    82ce:	461a      	mov	r2, r3
    82d0:	f64a 33dc 	movw	r3, #43996	; 0xabdc
    82d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d8:	78d9      	ldrb	r1, [r3, #3]
    82da:	f24a 631c 	movw	r3, #42524	; 0xa61c
    82de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e2:	5499      	strb	r1, [r3, r2]
    82e4:	4bc2      	ldr	r3, [pc, #776]	; (85f0 <send_attitude+0x8b4>)
    82e6:	781a      	ldrb	r2, [r3, #0]
    82e8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    82ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	4413      	add	r3, r2
    82f4:	b2da      	uxtb	r2, r3
    82f6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    82fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fe:	701a      	strb	r2, [r3, #0]
    8300:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8308:	781a      	ldrb	r2, [r3, #0]
    830a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    830e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	4413      	add	r3, r2
    8316:	b2da      	uxtb	r2, r3
    8318:	f24a 731e 	movw	r3, #42782	; 0xa71e
    831c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8320:	701a      	strb	r2, [r3, #0]
    8322:	f24a 6319 	movw	r3, #42521	; 0xa619
    8326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832a:	781b      	ldrb	r3, [r3, #0]
    832c:	3301      	adds	r3, #1
    832e:	b2da      	uxtb	r2, r3
    8330:	f24a 6319 	movw	r3, #42521	; 0xa619
    8334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8338:	701a      	strb	r2, [r3, #0]
    833a:	f24a 6319 	movw	r3, #42521	; 0xa619
    833e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	2bff      	cmp	r3, #255	; 0xff
    8346:	d105      	bne.n	8354 <send_attitude+0x618>
    8348:	f24a 6319 	movw	r3, #42521	; 0xa619
    834c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8350:	2200      	movs	r2, #0
    8352:	701a      	strb	r2, [r3, #0]
    8354:	f24a 6319 	movw	r3, #42521	; 0xa619
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	461a      	mov	r2, r3
    8360:	f64a 33e0 	movw	r3, #44000	; 0xabe0
    8364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8368:	7819      	ldrb	r1, [r3, #0]
    836a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    836e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8372:	5499      	strb	r1, [r3, r2]
    8374:	f64a 33e0 	movw	r3, #44000	; 0xabe0
    8378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837c:	781a      	ldrb	r2, [r3, #0]
    837e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8386:	781b      	ldrb	r3, [r3, #0]
    8388:	4413      	add	r3, r2
    838a:	b2da      	uxtb	r2, r3
    838c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8394:	701a      	strb	r2, [r3, #0]
    8396:	f24a 731e 	movw	r3, #42782	; 0xa71e
    839a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    839e:	781a      	ldrb	r2, [r3, #0]
    83a0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    83a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	4413      	add	r3, r2
    83ac:	b2da      	uxtb	r2, r3
    83ae:	f24a 731e 	movw	r3, #42782	; 0xa71e
    83b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b6:	701a      	strb	r2, [r3, #0]
    83b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    83bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	3301      	adds	r3, #1
    83c4:	b2da      	uxtb	r2, r3
    83c6:	f24a 6319 	movw	r3, #42521	; 0xa619
    83ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ce:	701a      	strb	r2, [r3, #0]
    83d0:	f24a 6319 	movw	r3, #42521	; 0xa619
    83d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	2bff      	cmp	r3, #255	; 0xff
    83dc:	d105      	bne.n	83ea <send_attitude+0x6ae>
    83de:	f24a 6319 	movw	r3, #42521	; 0xa619
    83e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e6:	2200      	movs	r2, #0
    83e8:	701a      	strb	r2, [r3, #0]
    83ea:	f24a 6319 	movw	r3, #42521	; 0xa619
    83ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	461a      	mov	r2, r3
    83f6:	f64a 33e0 	movw	r3, #44000	; 0xabe0
    83fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fe:	7859      	ldrb	r1, [r3, #1]
    8400:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8408:	5499      	strb	r1, [r3, r2]
    840a:	4b7a      	ldr	r3, [pc, #488]	; (85f4 <send_attitude+0x8b8>)
    840c:	781a      	ldrb	r2, [r3, #0]
    840e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	4413      	add	r3, r2
    841a:	b2da      	uxtb	r2, r3
    841c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8424:	701a      	strb	r2, [r3, #0]
    8426:	f24a 731e 	movw	r3, #42782	; 0xa71e
    842a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842e:	781a      	ldrb	r2, [r3, #0]
    8430:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	4413      	add	r3, r2
    843c:	b2da      	uxtb	r2, r3
    843e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8446:	701a      	strb	r2, [r3, #0]
    8448:	f24a 6319 	movw	r3, #42521	; 0xa619
    844c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	3301      	adds	r3, #1
    8454:	b2da      	uxtb	r2, r3
    8456:	f24a 6319 	movw	r3, #42521	; 0xa619
    845a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845e:	701a      	strb	r2, [r3, #0]
    8460:	f24a 6319 	movw	r3, #42521	; 0xa619
    8464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	2bff      	cmp	r3, #255	; 0xff
    846c:	d105      	bne.n	847a <send_attitude+0x73e>
    846e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8476:	2200      	movs	r2, #0
    8478:	701a      	strb	r2, [r3, #0]
    847a:	f24a 6319 	movw	r3, #42521	; 0xa619
    847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8482:	781b      	ldrb	r3, [r3, #0]
    8484:	461a      	mov	r2, r3
    8486:	f64a 33e0 	movw	r3, #44000	; 0xabe0
    848a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848e:	7899      	ldrb	r1, [r3, #2]
    8490:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8498:	5499      	strb	r1, [r3, r2]
    849a:	4b57      	ldr	r3, [pc, #348]	; (85f8 <send_attitude+0x8bc>)
    849c:	781a      	ldrb	r2, [r3, #0]
    849e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    84a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a6:	781b      	ldrb	r3, [r3, #0]
    84a8:	4413      	add	r3, r2
    84aa:	b2da      	uxtb	r2, r3
    84ac:	f24a 731d 	movw	r3, #42781	; 0xa71d
    84b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b4:	701a      	strb	r2, [r3, #0]
    84b6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    84ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84be:	781a      	ldrb	r2, [r3, #0]
    84c0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    84c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	4413      	add	r3, r2
    84cc:	b2da      	uxtb	r2, r3
    84ce:	f24a 731e 	movw	r3, #42782	; 0xa71e
    84d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d6:	701a      	strb	r2, [r3, #0]
    84d8:	f24a 6319 	movw	r3, #42521	; 0xa619
    84dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e0:	781b      	ldrb	r3, [r3, #0]
    84e2:	3301      	adds	r3, #1
    84e4:	b2da      	uxtb	r2, r3
    84e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    84ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ee:	701a      	strb	r2, [r3, #0]
    84f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    84f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	2bff      	cmp	r3, #255	; 0xff
    84fc:	d105      	bne.n	850a <send_attitude+0x7ce>
    84fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    8502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8506:	2200      	movs	r2, #0
    8508:	701a      	strb	r2, [r3, #0]
    850a:	f24a 6319 	movw	r3, #42521	; 0xa619
    850e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	461a      	mov	r2, r3
    8516:	f64a 33e0 	movw	r3, #44000	; 0xabe0
    851a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851e:	78d9      	ldrb	r1, [r3, #3]
    8520:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8528:	5499      	strb	r1, [r3, r2]
    852a:	4b34      	ldr	r3, [pc, #208]	; (85fc <send_attitude+0x8c0>)
    852c:	781a      	ldrb	r2, [r3, #0]
    852e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	4413      	add	r3, r2
    853a:	b2da      	uxtb	r2, r3
    853c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8544:	701a      	strb	r2, [r3, #0]
    8546:	f24a 731e 	movw	r3, #42782	; 0xa71e
    854a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854e:	781a      	ldrb	r2, [r3, #0]
    8550:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	4413      	add	r3, r2
    855c:	b2da      	uxtb	r2, r3
    855e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8566:	701a      	strb	r2, [r3, #0]
    8568:	f24a 6319 	movw	r3, #42521	; 0xa619
    856c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	3301      	adds	r3, #1
    8574:	b2da      	uxtb	r2, r3
    8576:	f24a 6319 	movw	r3, #42521	; 0xa619
    857a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857e:	701a      	strb	r2, [r3, #0]
    8580:	f24a 6319 	movw	r3, #42521	; 0xa619
    8584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	2bff      	cmp	r3, #255	; 0xff
    858c:	d105      	bne.n	859a <send_attitude+0x85e>
    858e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8596:	2200      	movs	r2, #0
    8598:	701a      	strb	r2, [r3, #0]
    859a:	f24a 6319 	movw	r3, #42521	; 0xa619
    859e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a2:	781b      	ldrb	r3, [r3, #0]
    85a4:	461a      	mov	r2, r3
    85a6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    85aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ae:	7819      	ldrb	r1, [r3, #0]
    85b0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    85b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b8:	5499      	strb	r1, [r3, r2]
    85ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    85be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c2:	781b      	ldrb	r3, [r3, #0]
    85c4:	3301      	adds	r3, #1
    85c6:	b2da      	uxtb	r2, r3
    85c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    85cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d0:	701a      	strb	r2, [r3, #0]
    85d2:	f24a 6319 	movw	r3, #42521	; 0xa619
    85d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	2bff      	cmp	r3, #255	; 0xff
    85de:	d10f      	bne.n	8600 <send_attitude+0x8c4>
    85e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	2200      	movs	r2, #0
    85ea:	701a      	strb	r2, [r3, #0]
    85ec:	e008      	b.n	8600 <send_attitude+0x8c4>
    85ee:	bf00      	nop
    85f0:	2000abdf 	.word	0x2000abdf
    85f4:	2000abe1 	.word	0x2000abe1
    85f8:	2000abe2 	.word	0x2000abe2
    85fc:	2000abe3 	.word	0x2000abe3
    8600:	f24a 6319 	movw	r3, #42521	; 0xa619
    8604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	461a      	mov	r2, r3
    860c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8614:	7819      	ldrb	r1, [r3, #0]
    8616:	f24a 631c 	movw	r3, #42524	; 0xa61c
    861a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    861e:	5499      	strb	r1, [r3, r2]
    8620:	f24a 6319 	movw	r3, #42521	; 0xa619
    8624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	3301      	adds	r3, #1
    862c:	b2da      	uxtb	r2, r3
    862e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8636:	701a      	strb	r2, [r3, #0]
    8638:	f24a 6319 	movw	r3, #42521	; 0xa619
    863c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2bff      	cmp	r3, #255	; 0xff
    8644:	d105      	bne.n	8652 <send_attitude+0x916>
    8646:	f24a 6319 	movw	r3, #42521	; 0xa619
    864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864e:	2200      	movs	r2, #0
    8650:	701a      	strb	r2, [r3, #0]
    8652:	f242 0339 	movw	r3, #8249	; 0x2039
    8656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865a:	781b      	ldrb	r3, [r3, #0]
    865c:	b2db      	uxtb	r3, r3
    865e:	f003 0310 	and.w	r3, r3, #16
    8662:	2b00      	cmp	r3, #0
    8664:	d15a      	bne.n	871c <send_attitude+0x9e0>
    8666:	f24a 631a 	movw	r3, #42522	; 0xa61a
    866a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    866e:	781b      	ldrb	r3, [r3, #0]
    8670:	b2db      	uxtb	r3, r3
    8672:	461a      	mov	r2, r3
    8674:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867c:	5c9a      	ldrb	r2, [r3, r2]
    867e:	f24a 731b 	movw	r3, #42779	; 0xa71b
    8682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8686:	701a      	strb	r2, [r3, #0]
    8688:	f24a 731c 	movw	r3, #42780	; 0xa71c
    868c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8690:	2200      	movs	r2, #0
    8692:	701a      	strb	r2, [r3, #0]
    8694:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    869c:	781b      	ldrb	r3, [r3, #0]
    869e:	b2db      	uxtb	r3, r3
    86a0:	3301      	adds	r3, #1
    86a2:	b2da      	uxtb	r2, r3
    86a4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    86a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ac:	701a      	strb	r2, [r3, #0]
    86ae:	f24a 631a 	movw	r3, #42522	; 0xa61a
    86b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	b2db      	uxtb	r3, r3
    86ba:	2bff      	cmp	r3, #255	; 0xff
    86bc:	d105      	bne.n	86ca <send_attitude+0x98e>
    86be:	f24a 631a 	movw	r3, #42522	; 0xa61a
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	2200      	movs	r2, #0
    86c8:	701a      	strb	r2, [r3, #0]
    86ca:	f242 0338 	movw	r3, #8248	; 0x2038
    86ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d2:	f242 0238 	movw	r2, #8248	; 0x2038
    86d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    86da:	7812      	ldrb	r2, [r2, #0]
    86dc:	b2d2      	uxtb	r2, r2
    86de:	f042 0201 	orr.w	r2, r2, #1
    86e2:	b2d2      	uxtb	r2, r2
    86e4:	701a      	strb	r2, [r3, #0]
    86e6:	f242 0339 	movw	r3, #8249	; 0x2039
    86ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ee:	f242 0239 	movw	r2, #8249	; 0x2039
    86f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    86f6:	7812      	ldrb	r2, [r2, #0]
    86f8:	b2d2      	uxtb	r2, r2
    86fa:	f042 0210 	orr.w	r2, r2, #16
    86fe:	b2d2      	uxtb	r2, r2
    8700:	701a      	strb	r2, [r3, #0]
    8702:	e00b      	b.n	871c <send_attitude+0x9e0>
    8704:	f24a 6318 	movw	r3, #42520	; 0xa618
    8708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870c:	781b      	ldrb	r3, [r3, #0]
    870e:	3301      	adds	r3, #1
    8710:	b2da      	uxtb	r2, r3
    8712:	f24a 6318 	movw	r3, #42520	; 0xa618
    8716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    871a:	701a      	strb	r2, [r3, #0]
  }
}
    871c:	46bd      	mov	sp, r7
    871e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8722:	4770      	bx	lr

00008724 <send_adc>:
  
void send_adc(void){  //500ms
    8724:	b480      	push	{r7}
    8726:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8728:	f24a 6311 	movw	r3, #42513	; 0xa611
    872c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8730:	781a      	ldrb	r2, [r3, #0]
    8732:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8736:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    873a:	fba3 1302 	umull	r1, r3, r3, r2
    873e:	0899      	lsrs	r1, r3, #2
    8740:	460b      	mov	r3, r1
    8742:	009b      	lsls	r3, r3, #2
    8744:	440b      	add	r3, r1
    8746:	1ad3      	subs	r3, r2, r3
    8748:	b2db      	uxtb	r3, r3
    874a:	2b01      	cmp	r3, #1
    874c:	f040 8269 	bne.w	8c22 <send_adc+0x4fe>
    8750:	f24a 6319 	movw	r3, #42521	; 0xa619
    8754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8758:	781a      	ldrb	r2, [r3, #0]
    875a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    875e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8762:	781b      	ldrb	r3, [r3, #0]
    8764:	b2db      	uxtb	r3, r3
    8766:	429a      	cmp	r2, r3
    8768:	d313      	bcc.n	8792 <send_adc+0x6e>
    876a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    876e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8772:	781b      	ldrb	r3, [r3, #0]
    8774:	b2db      	uxtb	r3, r3
    8776:	461a      	mov	r2, r3
    8778:	f24a 6319 	movw	r3, #42521	; 0xa619
    877c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8780:	781b      	ldrb	r3, [r3, #0]
    8782:	1ad3      	subs	r3, r2, r3
    8784:	33ff      	adds	r3, #255	; 0xff
    8786:	2b08      	cmp	r3, #8
    8788:	bfd4      	ite	le
    878a:	2300      	movle	r3, #0
    878c:	2301      	movgt	r3, #1
    878e:	b2db      	uxtb	r3, r3
    8790:	e011      	b.n	87b6 <send_adc+0x92>
    8792:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	b2db      	uxtb	r3, r3
    879e:	461a      	mov	r2, r3
    87a0:	f24a 6319 	movw	r3, #42521	; 0xa619
    87a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a8:	781b      	ldrb	r3, [r3, #0]
    87aa:	1ad3      	subs	r3, r2, r3
    87ac:	2b08      	cmp	r3, #8
    87ae:	bfd4      	ite	le
    87b0:	2300      	movle	r3, #0
    87b2:	2301      	movgt	r3, #1
    87b4:	b2db      	uxtb	r3, r3
    87b6:	2b00      	cmp	r3, #0
    87b8:	f000 8227 	beq.w	8c0a <send_adc+0x4e6>
    87bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    87c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	461a      	mov	r2, r3
    87c8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    87cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d0:	2105      	movs	r1, #5
    87d2:	5499      	strb	r1, [r3, r2]
    87d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    87d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	3301      	adds	r3, #1
    87e0:	b2da      	uxtb	r2, r3
    87e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    87e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ea:	701a      	strb	r2, [r3, #0]
    87ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    87f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	2bff      	cmp	r3, #255	; 0xff
    87f8:	d105      	bne.n	8806 <send_adc+0xe2>
    87fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    87fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8802:	2200      	movs	r2, #0
    8804:	701a      	strb	r2, [r3, #0]
    8806:	f24a 6319 	movw	r3, #42521	; 0xa619
    880a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	461a      	mov	r2, r3
    8812:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881a:	2107      	movs	r1, #7
    881c:	5499      	strb	r1, [r3, r2]
    881e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	3301      	adds	r3, #1
    882a:	b2da      	uxtb	r2, r3
    882c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8834:	701a      	strb	r2, [r3, #0]
    8836:	f24a 6319 	movw	r3, #42521	; 0xa619
    883a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	2bff      	cmp	r3, #255	; 0xff
    8842:	d105      	bne.n	8850 <send_adc+0x12c>
    8844:	f24a 6319 	movw	r3, #42521	; 0xa619
    8848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884c:	2200      	movs	r2, #0
    884e:	701a      	strb	r2, [r3, #0]
    8850:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8858:	2207      	movs	r2, #7
    885a:	701a      	strb	r2, [r3, #0]
    885c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8864:	2207      	movs	r2, #7
    8866:	701a      	strb	r2, [r3, #0]
    8868:	f24a 6319 	movw	r3, #42521	; 0xa619
    886c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	461a      	mov	r2, r3
    8874:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	7819      	ldrb	r1, [r3, #0]
    887e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	5499      	strb	r1, [r3, r2]
    8888:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
    888c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	4413      	add	r3, r2
    889e:	b2da      	uxtb	r2, r3
    88a0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	701a      	strb	r2, [r3, #0]
    88aa:	f24a 731e 	movw	r3, #42782	; 0xa71e
    88ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b2:	781a      	ldrb	r2, [r3, #0]
    88b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    88b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	4413      	add	r3, r2
    88c0:	b2da      	uxtb	r2, r3
    88c2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    88c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ca:	701a      	strb	r2, [r3, #0]
    88cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    88d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	3301      	adds	r3, #1
    88d8:	b2da      	uxtb	r2, r3
    88da:	f24a 6319 	movw	r3, #42521	; 0xa619
    88de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e2:	701a      	strb	r2, [r3, #0]
    88e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    88e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2bff      	cmp	r3, #255	; 0xff
    88f0:	d105      	bne.n	88fe <send_adc+0x1da>
    88f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    88f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fa:	2200      	movs	r2, #0
    88fc:	701a      	strb	r2, [r3, #0]
    88fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    8902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8906:	781b      	ldrb	r3, [r3, #0]
    8908:	461a      	mov	r2, r3
    890a:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
    890e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8912:	7859      	ldrb	r1, [r3, #1]
    8914:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891c:	5499      	strb	r1, [r3, r2]
    891e:	4bc3      	ldr	r3, [pc, #780]	; (8c2c <send_adc+0x508>)
    8920:	781a      	ldrb	r2, [r3, #0]
    8922:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892a:	781b      	ldrb	r3, [r3, #0]
    892c:	4413      	add	r3, r2
    892e:	b2da      	uxtb	r2, r3
    8930:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8938:	701a      	strb	r2, [r3, #0]
    893a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    893e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8942:	781a      	ldrb	r2, [r3, #0]
    8944:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	4413      	add	r3, r2
    8950:	b2da      	uxtb	r2, r3
    8952:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	3301      	adds	r3, #1
    8968:	b2da      	uxtb	r2, r3
    896a:	f24a 6319 	movw	r3, #42521	; 0xa619
    896e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8972:	701a      	strb	r2, [r3, #0]
    8974:	f24a 6319 	movw	r3, #42521	; 0xa619
    8978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	2bff      	cmp	r3, #255	; 0xff
    8980:	d105      	bne.n	898e <send_adc+0x26a>
    8982:	f24a 6319 	movw	r3, #42521	; 0xa619
    8986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898a:	2200      	movs	r2, #0
    898c:	701a      	strb	r2, [r3, #0]
    898e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	461a      	mov	r2, r3
    899a:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
    899e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a2:	7819      	ldrb	r1, [r3, #0]
    89a4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    89a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ac:	5499      	strb	r1, [r3, r2]
    89ae:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
    89b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b6:	781a      	ldrb	r2, [r3, #0]
    89b8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    89bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	4413      	add	r3, r2
    89c4:	b2da      	uxtb	r2, r3
    89c6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    89ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ce:	701a      	strb	r2, [r3, #0]
    89d0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    89d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d8:	781a      	ldrb	r2, [r3, #0]
    89da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    89de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	4413      	add	r3, r2
    89e6:	b2da      	uxtb	r2, r3
    89e8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    89ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f0:	701a      	strb	r2, [r3, #0]
    89f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    89f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	3301      	adds	r3, #1
    89fe:	b2da      	uxtb	r2, r3
    8a00:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a08:	701a      	strb	r2, [r3, #0]
    8a0a:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a12:	781b      	ldrb	r3, [r3, #0]
    8a14:	2bff      	cmp	r3, #255	; 0xff
    8a16:	d105      	bne.n	8a24 <send_adc+0x300>
    8a18:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a20:	2200      	movs	r2, #0
    8a22:	701a      	strb	r2, [r3, #0]
    8a24:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	461a      	mov	r2, r3
    8a30:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
    8a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a38:	7859      	ldrb	r1, [r3, #1]
    8a3a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a42:	5499      	strb	r1, [r3, r2]
    8a44:	4b7a      	ldr	r3, [pc, #488]	; (8c30 <send_adc+0x50c>)
    8a46:	781a      	ldrb	r2, [r3, #0]
    8a48:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a50:	781b      	ldrb	r3, [r3, #0]
    8a52:	4413      	add	r3, r2
    8a54:	b2da      	uxtb	r2, r3
    8a56:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a5e:	701a      	strb	r2, [r3, #0]
    8a60:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a68:	781a      	ldrb	r2, [r3, #0]
    8a6a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a72:	781b      	ldrb	r3, [r3, #0]
    8a74:	4413      	add	r3, r2
    8a76:	b2da      	uxtb	r2, r3
    8a78:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a80:	701a      	strb	r2, [r3, #0]
    8a82:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	3301      	adds	r3, #1
    8a8e:	b2da      	uxtb	r2, r3
    8a90:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a98:	701a      	strb	r2, [r3, #0]
    8a9a:	f24a 6319 	movw	r3, #42521	; 0xa619
    8a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa2:	781b      	ldrb	r3, [r3, #0]
    8aa4:	2bff      	cmp	r3, #255	; 0xff
    8aa6:	d105      	bne.n	8ab4 <send_adc+0x390>
    8aa8:	f24a 6319 	movw	r3, #42521	; 0xa619
    8aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab0:	2200      	movs	r2, #0
    8ab2:	701a      	strb	r2, [r3, #0]
    8ab4:	f24a 6319 	movw	r3, #42521	; 0xa619
    8ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	461a      	mov	r2, r3
    8ac0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac8:	7819      	ldrb	r1, [r3, #0]
    8aca:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad2:	5499      	strb	r1, [r3, r2]
    8ad4:	f24a 6319 	movw	r3, #42521	; 0xa619
    8ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8adc:	781b      	ldrb	r3, [r3, #0]
    8ade:	3301      	adds	r3, #1
    8ae0:	b2da      	uxtb	r2, r3
    8ae2:	f24a 6319 	movw	r3, #42521	; 0xa619
    8ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aea:	701a      	strb	r2, [r3, #0]
    8aec:	f24a 6319 	movw	r3, #42521	; 0xa619
    8af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	2bff      	cmp	r3, #255	; 0xff
    8af8:	d105      	bne.n	8b06 <send_adc+0x3e2>
    8afa:	f24a 6319 	movw	r3, #42521	; 0xa619
    8afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b02:	2200      	movs	r2, #0
    8b04:	701a      	strb	r2, [r3, #0]
    8b06:	f24a 6319 	movw	r3, #42521	; 0xa619
    8b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b0e:	781b      	ldrb	r3, [r3, #0]
    8b10:	461a      	mov	r2, r3
    8b12:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1a:	7819      	ldrb	r1, [r3, #0]
    8b1c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b24:	5499      	strb	r1, [r3, r2]
    8b26:	f24a 6319 	movw	r3, #42521	; 0xa619
    8b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	3301      	adds	r3, #1
    8b32:	b2da      	uxtb	r2, r3
    8b34:	f24a 6319 	movw	r3, #42521	; 0xa619
    8b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b3c:	701a      	strb	r2, [r3, #0]
    8b3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b46:	781b      	ldrb	r3, [r3, #0]
    8b48:	2bff      	cmp	r3, #255	; 0xff
    8b4a:	d105      	bne.n	8b58 <send_adc+0x434>
    8b4c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b54:	2200      	movs	r2, #0
    8b56:	701a      	strb	r2, [r3, #0]
    8b58:	f242 0339 	movw	r3, #8249	; 0x2039
    8b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	b2db      	uxtb	r3, r3
    8b64:	f003 0310 	and.w	r3, r3, #16
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d15a      	bne.n	8c22 <send_adc+0x4fe>
    8b6c:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b74:	781b      	ldrb	r3, [r3, #0]
    8b76:	b2db      	uxtb	r3, r3
    8b78:	461a      	mov	r2, r3
    8b7a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b82:	5c9a      	ldrb	r2, [r3, r2]
    8b84:	f24a 731b 	movw	r3, #42779	; 0xa71b
    8b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b8c:	701a      	strb	r2, [r3, #0]
    8b8e:	f24a 731c 	movw	r3, #42780	; 0xa71c
    8b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b96:	2200      	movs	r2, #0
    8b98:	701a      	strb	r2, [r3, #0]
    8b9a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba2:	781b      	ldrb	r3, [r3, #0]
    8ba4:	b2db      	uxtb	r3, r3
    8ba6:	3301      	adds	r3, #1
    8ba8:	b2da      	uxtb	r2, r3
    8baa:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb2:	701a      	strb	r2, [r3, #0]
    8bb4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	b2db      	uxtb	r3, r3
    8bc0:	2bff      	cmp	r3, #255	; 0xff
    8bc2:	d105      	bne.n	8bd0 <send_adc+0x4ac>
    8bc4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bcc:	2200      	movs	r2, #0
    8bce:	701a      	strb	r2, [r3, #0]
    8bd0:	f242 0338 	movw	r3, #8248	; 0x2038
    8bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd8:	f242 0238 	movw	r2, #8248	; 0x2038
    8bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8be0:	7812      	ldrb	r2, [r2, #0]
    8be2:	b2d2      	uxtb	r2, r2
    8be4:	f042 0201 	orr.w	r2, r2, #1
    8be8:	b2d2      	uxtb	r2, r2
    8bea:	701a      	strb	r2, [r3, #0]
    8bec:	f242 0339 	movw	r3, #8249	; 0x2039
    8bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf4:	f242 0239 	movw	r2, #8249	; 0x2039
    8bf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8bfc:	7812      	ldrb	r2, [r2, #0]
    8bfe:	b2d2      	uxtb	r2, r2
    8c00:	f042 0210 	orr.w	r2, r2, #16
    8c04:	b2d2      	uxtb	r2, r2
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	e00b      	b.n	8c22 <send_adc+0x4fe>
    8c0a:	f24a 6318 	movw	r3, #42520	; 0xa618
    8c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c12:	781b      	ldrb	r3, [r3, #0]
    8c14:	3301      	adds	r3, #1
    8c16:	b2da      	uxtb	r2, r3
    8c18:	f24a 6318 	movw	r3, #42520	; 0xa618
    8c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c20:	701a      	strb	r2, [r3, #0]
}
    8c22:	46bd      	mov	sp, r7
    8c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c28:	4770      	bx	lr
    8c2a:	bf00      	nop
    8c2c:	2000a8b9 	.word	0x2000a8b9
    8c30:	2000a8bb 	.word	0x2000a8bb

00008c34 <send_settings>:
void send_settings(void){ //500ms
    8c34:	b480      	push	{r7}
    8c36:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    8c38:	f24a 6311 	movw	r3, #42513	; 0xa611
    8c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c40:	781a      	ldrb	r2, [r3, #0]
    8c42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8c46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8c4a:	fba3 1302 	umull	r1, r3, r3, r2
    8c4e:	0899      	lsrs	r1, r3, #2
    8c50:	460b      	mov	r3, r1
    8c52:	009b      	lsls	r3, r3, #2
    8c54:	440b      	add	r3, r1
    8c56:	1ad3      	subs	r3, r2, r3
    8c58:	b2db      	uxtb	r3, r3
    8c5a:	2b02      	cmp	r3, #2
    8c5c:	f040 83e7 	bne.w	942e <send_settings+0x7fa>
    8c60:	f64a 432c 	movw	r3, #44076	; 0xac2c
    8c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	f000 83df 	beq.w	942e <send_settings+0x7fa>
    8c70:	f24a 6319 	movw	r3, #42521	; 0xa619
    8c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c78:	781a      	ldrb	r2, [r3, #0]
    8c7a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	b2db      	uxtb	r3, r3
    8c86:	429a      	cmp	r2, r3
    8c88:	d313      	bcc.n	8cb2 <send_settings+0x7e>
    8c8a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	b2db      	uxtb	r3, r3
    8c96:	461a      	mov	r2, r3
    8c98:	f24a 6319 	movw	r3, #42521	; 0xa619
    8c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca0:	781b      	ldrb	r3, [r3, #0]
    8ca2:	1ad3      	subs	r3, r2, r3
    8ca4:	33ff      	adds	r3, #255	; 0xff
    8ca6:	2b0d      	cmp	r3, #13
    8ca8:	bfd4      	ite	le
    8caa:	2300      	movle	r3, #0
    8cac:	2301      	movgt	r3, #1
    8cae:	b2db      	uxtb	r3, r3
    8cb0:	e011      	b.n	8cd6 <send_settings+0xa2>
    8cb2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    8cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	b2db      	uxtb	r3, r3
    8cbe:	461a      	mov	r2, r3
    8cc0:	f24a 6319 	movw	r3, #42521	; 0xa619
    8cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	1ad3      	subs	r3, r2, r3
    8ccc:	2b0d      	cmp	r3, #13
    8cce:	bfd4      	ite	le
    8cd0:	2300      	movle	r3, #0
    8cd2:	2301      	movgt	r3, #1
    8cd4:	b2db      	uxtb	r3, r3
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	f000 839d 	beq.w	9416 <send_settings+0x7e2>
    8cdc:	f24a 6319 	movw	r3, #42521	; 0xa619
    8ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce4:	781b      	ldrb	r3, [r3, #0]
    8ce6:	461a      	mov	r2, r3
    8ce8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf0:	2105      	movs	r1, #5
    8cf2:	5499      	strb	r1, [r3, r2]
    8cf4:	f24a 6319 	movw	r3, #42521	; 0xa619
    8cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cfc:	781b      	ldrb	r3, [r3, #0]
    8cfe:	3301      	adds	r3, #1
    8d00:	b2da      	uxtb	r2, r3
    8d02:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	701a      	strb	r2, [r3, #0]
    8d0c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	2bff      	cmp	r3, #255	; 0xff
    8d18:	d105      	bne.n	8d26 <send_settings+0xf2>
    8d1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d22:	2200      	movs	r2, #0
    8d24:	701a      	strb	r2, [r3, #0]
    8d26:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	461a      	mov	r2, r3
    8d32:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	2111      	movs	r1, #17
    8d3c:	5499      	strb	r1, [r3, r2]
    8d3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d46:	781b      	ldrb	r3, [r3, #0]
    8d48:	3301      	adds	r3, #1
    8d4a:	b2da      	uxtb	r2, r3
    8d4c:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	2bff      	cmp	r3, #255	; 0xff
    8d62:	d105      	bne.n	8d70 <send_settings+0x13c>
    8d64:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6c:	2200      	movs	r2, #0
    8d6e:	701a      	strb	r2, [r3, #0]
    8d70:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d78:	2211      	movs	r2, #17
    8d7a:	701a      	strb	r2, [r3, #0]
    8d7c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d84:	2211      	movs	r2, #17
    8d86:	701a      	strb	r2, [r3, #0]
    8d88:	f24a 6319 	movw	r3, #42521	; 0xa619
    8d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d90:	781b      	ldrb	r3, [r3, #0]
    8d92:	461a      	mov	r2, r3
    8d94:	f64a 432c 	movw	r3, #44076	; 0xac2c
    8d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9c:	7819      	ldrb	r1, [r3, #0]
    8d9e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da6:	5499      	strb	r1, [r3, r2]
    8da8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db0:	781a      	ldrb	r2, [r3, #0]
    8db2:	f64a 432c 	movw	r3, #44076	; 0xac2c
    8db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dba:	781b      	ldrb	r3, [r3, #0]
    8dbc:	4413      	add	r3, r2
    8dbe:	b2da      	uxtb	r2, r3
    8dc0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc8:	701a      	strb	r2, [r3, #0]
    8dca:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd2:	781a      	ldrb	r2, [r3, #0]
    8dd4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ddc:	781b      	ldrb	r3, [r3, #0]
    8dde:	4413      	add	r3, r2
    8de0:	b2da      	uxtb	r2, r3
    8de2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dea:	701a      	strb	r2, [r3, #0]
    8dec:	f24a 6319 	movw	r3, #42521	; 0xa619
    8df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df4:	781b      	ldrb	r3, [r3, #0]
    8df6:	3301      	adds	r3, #1
    8df8:	b2da      	uxtb	r2, r3
    8dfa:	f24a 6319 	movw	r3, #42521	; 0xa619
    8dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e02:	701a      	strb	r2, [r3, #0]
    8e04:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	2bff      	cmp	r3, #255	; 0xff
    8e10:	d105      	bne.n	8e1e <send_settings+0x1ea>
    8e12:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1a:	2200      	movs	r2, #0
    8e1c:	701a      	strb	r2, [r3, #0]
    8e1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	461a      	mov	r2, r3
    8e2a:	f24a 6308 	movw	r3, #42504	; 0xa608
    8e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e32:	7819      	ldrb	r1, [r3, #0]
    8e34:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3c:	5499      	strb	r1, [r3, r2]
    8e3e:	f24a 6308 	movw	r3, #42504	; 0xa608
    8e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e46:	781a      	ldrb	r2, [r3, #0]
    8e48:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e50:	781b      	ldrb	r3, [r3, #0]
    8e52:	4413      	add	r3, r2
    8e54:	b2da      	uxtb	r2, r3
    8e56:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e5e:	701a      	strb	r2, [r3, #0]
    8e60:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e68:	781a      	ldrb	r2, [r3, #0]
    8e6a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e72:	781b      	ldrb	r3, [r3, #0]
    8e74:	4413      	add	r3, r2
    8e76:	b2da      	uxtb	r2, r3
    8e78:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e80:	701a      	strb	r2, [r3, #0]
    8e82:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	3301      	adds	r3, #1
    8e8e:	b2da      	uxtb	r2, r3
    8e90:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e98:	701a      	strb	r2, [r3, #0]
    8e9a:	f24a 6319 	movw	r3, #42521	; 0xa619
    8e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	2bff      	cmp	r3, #255	; 0xff
    8ea6:	d105      	bne.n	8eb4 <send_settings+0x280>
    8ea8:	f24a 6319 	movw	r3, #42521	; 0xa619
    8eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb0:	2200      	movs	r2, #0
    8eb2:	701a      	strb	r2, [r3, #0]
    8eb4:	f24a 6319 	movw	r3, #42521	; 0xa619
    8eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	461a      	mov	r2, r3
    8ec0:	f24a 6308 	movw	r3, #42504	; 0xa608
    8ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec8:	7859      	ldrb	r1, [r3, #1]
    8eca:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed2:	5499      	strb	r1, [r3, r2]
    8ed4:	4bd1      	ldr	r3, [pc, #836]	; (921c <send_settings+0x5e8>)
    8ed6:	781a      	ldrb	r2, [r3, #0]
    8ed8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee0:	781b      	ldrb	r3, [r3, #0]
    8ee2:	4413      	add	r3, r2
    8ee4:	b2da      	uxtb	r2, r3
    8ee6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eee:	701a      	strb	r2, [r3, #0]
    8ef0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef8:	781a      	ldrb	r2, [r3, #0]
    8efa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f02:	781b      	ldrb	r3, [r3, #0]
    8f04:	4413      	add	r3, r2
    8f06:	b2da      	uxtb	r2, r3
    8f08:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f10:	701a      	strb	r2, [r3, #0]
    8f12:	f24a 6319 	movw	r3, #42521	; 0xa619
    8f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	3301      	adds	r3, #1
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	f24a 6319 	movw	r3, #42521	; 0xa619
    8f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f28:	701a      	strb	r2, [r3, #0]
    8f2a:	f24a 6319 	movw	r3, #42521	; 0xa619
    8f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f32:	781b      	ldrb	r3, [r3, #0]
    8f34:	2bff      	cmp	r3, #255	; 0xff
    8f36:	d105      	bne.n	8f44 <send_settings+0x310>
    8f38:	f24a 6319 	movw	r3, #42521	; 0xa619
    8f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f40:	2200      	movs	r2, #0
    8f42:	701a      	strb	r2, [r3, #0]
    8f44:	f24a 6319 	movw	r3, #42521	; 0xa619
    8f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4c:	781b      	ldrb	r3, [r3, #0]
    8f4e:	461a      	mov	r2, r3
    8f50:	f24a 6308 	movw	r3, #42504	; 0xa608
    8f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f58:	7899      	ldrb	r1, [r3, #2]
    8f5a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f62:	5499      	strb	r1, [r3, r2]
    8f64:	4bae      	ldr	r3, [pc, #696]	; (9220 <send_settings+0x5ec>)
    8f66:	781a      	ldrb	r2, [r3, #0]
    8f68:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	4413      	add	r3, r2
    8f74:	b2da      	uxtb	r2, r3
    8f76:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7e:	701a      	strb	r2, [r3, #0]
    8f80:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f88:	781a      	ldrb	r2, [r3, #0]
    8f8a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	4413      	add	r3, r2
    8f96:	b2da      	uxtb	r2, r3
    8f98:	f24a 731e 	movw	r3, #42782	; 0xa71e
    8f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa0:	701a      	strb	r2, [r3, #0]
    8fa2:	f24a 6319 	movw	r3, #42521	; 0xa619
    8fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	3301      	adds	r3, #1
    8fae:	b2da      	uxtb	r2, r3
    8fb0:	f24a 6319 	movw	r3, #42521	; 0xa619
    8fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb8:	701a      	strb	r2, [r3, #0]
    8fba:	f24a 6319 	movw	r3, #42521	; 0xa619
    8fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	2bff      	cmp	r3, #255	; 0xff
    8fc6:	d105      	bne.n	8fd4 <send_settings+0x3a0>
    8fc8:	f24a 6319 	movw	r3, #42521	; 0xa619
    8fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd0:	2200      	movs	r2, #0
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	f24a 6319 	movw	r3, #42521	; 0xa619
    8fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	461a      	mov	r2, r3
    8fe0:	f24a 6308 	movw	r3, #42504	; 0xa608
    8fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe8:	78d9      	ldrb	r1, [r3, #3]
    8fea:	f24a 631c 	movw	r3, #42524	; 0xa61c
    8fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff2:	5499      	strb	r1, [r3, r2]
    8ff4:	4b8b      	ldr	r3, [pc, #556]	; (9224 <send_settings+0x5f0>)
    8ff6:	781a      	ldrb	r2, [r3, #0]
    8ff8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    8ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9000:	781b      	ldrb	r3, [r3, #0]
    9002:	4413      	add	r3, r2
    9004:	b2da      	uxtb	r2, r3
    9006:	f24a 731d 	movw	r3, #42781	; 0xa71d
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	701a      	strb	r2, [r3, #0]
    9010:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	781a      	ldrb	r2, [r3, #0]
    901a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    901e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9022:	781b      	ldrb	r3, [r3, #0]
    9024:	4413      	add	r3, r2
    9026:	b2da      	uxtb	r2, r3
    9028:	f24a 731e 	movw	r3, #42782	; 0xa71e
    902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9030:	701a      	strb	r2, [r3, #0]
    9032:	f24a 6319 	movw	r3, #42521	; 0xa619
    9036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	3301      	adds	r3, #1
    903e:	b2da      	uxtb	r2, r3
    9040:	f24a 6319 	movw	r3, #42521	; 0xa619
    9044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9048:	701a      	strb	r2, [r3, #0]
    904a:	f24a 6319 	movw	r3, #42521	; 0xa619
    904e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	2bff      	cmp	r3, #255	; 0xff
    9056:	d105      	bne.n	9064 <send_settings+0x430>
    9058:	f24a 6319 	movw	r3, #42521	; 0xa619
    905c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9060:	2200      	movs	r2, #0
    9062:	701a      	strb	r2, [r3, #0]
    9064:	f24a 6319 	movw	r3, #42521	; 0xa619
    9068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906c:	781b      	ldrb	r3, [r3, #0]
    906e:	461a      	mov	r2, r3
    9070:	f24a 630c 	movw	r3, #42508	; 0xa60c
    9074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9078:	7819      	ldrb	r1, [r3, #0]
    907a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    907e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9082:	5499      	strb	r1, [r3, r2]
    9084:	f24a 630c 	movw	r3, #42508	; 0xa60c
    9088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908c:	781a      	ldrb	r2, [r3, #0]
    908e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	4413      	add	r3, r2
    909a:	b2da      	uxtb	r2, r3
    909c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	701a      	strb	r2, [r3, #0]
    90a6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    90aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ae:	781a      	ldrb	r2, [r3, #0]
    90b0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    90b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	4413      	add	r3, r2
    90bc:	b2da      	uxtb	r2, r3
    90be:	f24a 731e 	movw	r3, #42782	; 0xa71e
    90c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c6:	701a      	strb	r2, [r3, #0]
    90c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    90cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d0:	781b      	ldrb	r3, [r3, #0]
    90d2:	3301      	adds	r3, #1
    90d4:	b2da      	uxtb	r2, r3
    90d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    90da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90de:	701a      	strb	r2, [r3, #0]
    90e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    90e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	2bff      	cmp	r3, #255	; 0xff
    90ec:	d105      	bne.n	90fa <send_settings+0x4c6>
    90ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    90f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f6:	2200      	movs	r2, #0
    90f8:	701a      	strb	r2, [r3, #0]
    90fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    90fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9102:	781b      	ldrb	r3, [r3, #0]
    9104:	461a      	mov	r2, r3
    9106:	f24a 630c 	movw	r3, #42508	; 0xa60c
    910a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910e:	7859      	ldrb	r1, [r3, #1]
    9110:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9118:	5499      	strb	r1, [r3, r2]
    911a:	4b43      	ldr	r3, [pc, #268]	; (9228 <send_settings+0x5f4>)
    911c:	781a      	ldrb	r2, [r3, #0]
    911e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	4413      	add	r3, r2
    912a:	b2da      	uxtb	r2, r3
    912c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9134:	701a      	strb	r2, [r3, #0]
    9136:	f24a 731e 	movw	r3, #42782	; 0xa71e
    913a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    913e:	781a      	ldrb	r2, [r3, #0]
    9140:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9148:	781b      	ldrb	r3, [r3, #0]
    914a:	4413      	add	r3, r2
    914c:	b2da      	uxtb	r2, r3
    914e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9156:	701a      	strb	r2, [r3, #0]
    9158:	f24a 6319 	movw	r3, #42521	; 0xa619
    915c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	3301      	adds	r3, #1
    9164:	b2da      	uxtb	r2, r3
    9166:	f24a 6319 	movw	r3, #42521	; 0xa619
    916a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916e:	701a      	strb	r2, [r3, #0]
    9170:	f24a 6319 	movw	r3, #42521	; 0xa619
    9174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	2bff      	cmp	r3, #255	; 0xff
    917c:	d105      	bne.n	918a <send_settings+0x556>
    917e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9186:	2200      	movs	r2, #0
    9188:	701a      	strb	r2, [r3, #0]
    918a:	f24a 6319 	movw	r3, #42521	; 0xa619
    918e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	461a      	mov	r2, r3
    9196:	f24a 630c 	movw	r3, #42508	; 0xa60c
    919a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919e:	7899      	ldrb	r1, [r3, #2]
    91a0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    91a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a8:	5499      	strb	r1, [r3, r2]
    91aa:	4b20      	ldr	r3, [pc, #128]	; (922c <send_settings+0x5f8>)
    91ac:	781a      	ldrb	r2, [r3, #0]
    91ae:	f24a 731d 	movw	r3, #42781	; 0xa71d
    91b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b6:	781b      	ldrb	r3, [r3, #0]
    91b8:	4413      	add	r3, r2
    91ba:	b2da      	uxtb	r2, r3
    91bc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    91c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c4:	701a      	strb	r2, [r3, #0]
    91c6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    91ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ce:	781a      	ldrb	r2, [r3, #0]
    91d0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    91d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	4413      	add	r3, r2
    91dc:	b2da      	uxtb	r2, r3
    91de:	f24a 731e 	movw	r3, #42782	; 0xa71e
    91e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e6:	701a      	strb	r2, [r3, #0]
    91e8:	f24a 6319 	movw	r3, #42521	; 0xa619
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	3301      	adds	r3, #1
    91f4:	b2da      	uxtb	r2, r3
    91f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    91fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	f24a 6319 	movw	r3, #42521	; 0xa619
    9204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	2bff      	cmp	r3, #255	; 0xff
    920c:	d110      	bne.n	9230 <send_settings+0x5fc>
    920e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9216:	2200      	movs	r2, #0
    9218:	701a      	strb	r2, [r3, #0]
    921a:	e009      	b.n	9230 <send_settings+0x5fc>
    921c:	2000a609 	.word	0x2000a609
    9220:	2000a60a 	.word	0x2000a60a
    9224:	2000a60b 	.word	0x2000a60b
    9228:	2000a60d 	.word	0x2000a60d
    922c:	2000a60e 	.word	0x2000a60e
    9230:	f24a 6319 	movw	r3, #42521	; 0xa619
    9234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9238:	781b      	ldrb	r3, [r3, #0]
    923a:	461a      	mov	r2, r3
    923c:	f24a 630c 	movw	r3, #42508	; 0xa60c
    9240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9244:	78d9      	ldrb	r1, [r3, #3]
    9246:	f24a 631c 	movw	r3, #42524	; 0xa61c
    924a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    924e:	5499      	strb	r1, [r3, r2]
    9250:	4b79      	ldr	r3, [pc, #484]	; (9438 <send_settings+0x804>)
    9252:	781a      	ldrb	r2, [r3, #0]
    9254:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925c:	781b      	ldrb	r3, [r3, #0]
    925e:	4413      	add	r3, r2
    9260:	b2da      	uxtb	r2, r3
    9262:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926a:	701a      	strb	r2, [r3, #0]
    926c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9274:	781a      	ldrb	r2, [r3, #0]
    9276:	f24a 731d 	movw	r3, #42781	; 0xa71d
    927a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    927e:	781b      	ldrb	r3, [r3, #0]
    9280:	4413      	add	r3, r2
    9282:	b2da      	uxtb	r2, r3
    9284:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928c:	701a      	strb	r2, [r3, #0]
    928e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9296:	781b      	ldrb	r3, [r3, #0]
    9298:	3301      	adds	r3, #1
    929a:	b2da      	uxtb	r2, r3
    929c:	f24a 6319 	movw	r3, #42521	; 0xa619
    92a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    92aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	2bff      	cmp	r3, #255	; 0xff
    92b2:	d105      	bne.n	92c0 <send_settings+0x68c>
    92b4:	f24a 6319 	movw	r3, #42521	; 0xa619
    92b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92bc:	2200      	movs	r2, #0
    92be:	701a      	strb	r2, [r3, #0]
    92c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	461a      	mov	r2, r3
    92cc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    92d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d4:	7819      	ldrb	r1, [r3, #0]
    92d6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    92da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92de:	5499      	strb	r1, [r3, r2]
    92e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    92e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	3301      	adds	r3, #1
    92ec:	b2da      	uxtb	r2, r3
    92ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    92f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f6:	701a      	strb	r2, [r3, #0]
    92f8:	f24a 6319 	movw	r3, #42521	; 0xa619
    92fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9300:	781b      	ldrb	r3, [r3, #0]
    9302:	2bff      	cmp	r3, #255	; 0xff
    9304:	d105      	bne.n	9312 <send_settings+0x6de>
    9306:	f24a 6319 	movw	r3, #42521	; 0xa619
    930a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930e:	2200      	movs	r2, #0
    9310:	701a      	strb	r2, [r3, #0]
    9312:	f24a 6319 	movw	r3, #42521	; 0xa619
    9316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931a:	781b      	ldrb	r3, [r3, #0]
    931c:	461a      	mov	r2, r3
    931e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9326:	7819      	ldrb	r1, [r3, #0]
    9328:	f24a 631c 	movw	r3, #42524	; 0xa61c
    932c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9330:	5499      	strb	r1, [r3, r2]
    9332:	f24a 6319 	movw	r3, #42521	; 0xa619
    9336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	3301      	adds	r3, #1
    933e:	b2da      	uxtb	r2, r3
    9340:	f24a 6319 	movw	r3, #42521	; 0xa619
    9344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9348:	701a      	strb	r2, [r3, #0]
    934a:	f24a 6319 	movw	r3, #42521	; 0xa619
    934e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	2bff      	cmp	r3, #255	; 0xff
    9356:	d105      	bne.n	9364 <send_settings+0x730>
    9358:	f24a 6319 	movw	r3, #42521	; 0xa619
    935c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9360:	2200      	movs	r2, #0
    9362:	701a      	strb	r2, [r3, #0]
    9364:	f242 0339 	movw	r3, #8249	; 0x2039
    9368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936c:	781b      	ldrb	r3, [r3, #0]
    936e:	b2db      	uxtb	r3, r3
    9370:	f003 0310 	and.w	r3, r3, #16
    9374:	2b00      	cmp	r3, #0
    9376:	d15a      	bne.n	942e <send_settings+0x7fa>
    9378:	f24a 631a 	movw	r3, #42522	; 0xa61a
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	b2db      	uxtb	r3, r3
    9384:	461a      	mov	r2, r3
    9386:	f24a 631c 	movw	r3, #42524	; 0xa61c
    938a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938e:	5c9a      	ldrb	r2, [r3, r2]
    9390:	f24a 731b 	movw	r3, #42779	; 0xa71b
    9394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9398:	701a      	strb	r2, [r3, #0]
    939a:	f24a 731c 	movw	r3, #42780	; 0xa71c
    939e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a2:	2200      	movs	r2, #0
    93a4:	701a      	strb	r2, [r3, #0]
    93a6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    93aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	b2db      	uxtb	r3, r3
    93b2:	3301      	adds	r3, #1
    93b4:	b2da      	uxtb	r2, r3
    93b6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    93ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93be:	701a      	strb	r2, [r3, #0]
    93c0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    93c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	b2db      	uxtb	r3, r3
    93cc:	2bff      	cmp	r3, #255	; 0xff
    93ce:	d105      	bne.n	93dc <send_settings+0x7a8>
    93d0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    93d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d8:	2200      	movs	r2, #0
    93da:	701a      	strb	r2, [r3, #0]
    93dc:	f242 0338 	movw	r3, #8248	; 0x2038
    93e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e4:	f242 0238 	movw	r2, #8248	; 0x2038
    93e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93ec:	7812      	ldrb	r2, [r2, #0]
    93ee:	b2d2      	uxtb	r2, r2
    93f0:	f042 0201 	orr.w	r2, r2, #1
    93f4:	b2d2      	uxtb	r2, r2
    93f6:	701a      	strb	r2, [r3, #0]
    93f8:	f242 0339 	movw	r3, #8249	; 0x2039
    93fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9400:	f242 0239 	movw	r2, #8249	; 0x2039
    9404:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9408:	7812      	ldrb	r2, [r2, #0]
    940a:	b2d2      	uxtb	r2, r2
    940c:	f042 0210 	orr.w	r2, r2, #16
    9410:	b2d2      	uxtb	r2, r2
    9412:	701a      	strb	r2, [r3, #0]
    9414:	e00b      	b.n	942e <send_settings+0x7fa>
    9416:	f24a 6318 	movw	r3, #42520	; 0xa618
    941a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941e:	781b      	ldrb	r3, [r3, #0]
    9420:	3301      	adds	r3, #1
    9422:	b2da      	uxtb	r2, r3
    9424:	f24a 6318 	movw	r3, #42520	; 0xa618
    9428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    942c:	701a      	strb	r2, [r3, #0]
}
    942e:	46bd      	mov	sp, r7
    9430:	f85d 7b04 	ldr.w	r7, [sp], #4
    9434:	4770      	bx	lr
    9436:	bf00      	nop
    9438:	2000a60f 	.word	0x2000a60f

0000943c <send_desired>:
void send_desired(void){  //1000ms
    943c:	b480      	push	{r7}
    943e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9440:	f24a 6311 	movw	r3, #42513	; 0xa611
    9444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9448:	781a      	ldrb	r2, [r3, #0]
    944a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    944e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9452:	fba3 1302 	umull	r1, r3, r3, r2
    9456:	08d9      	lsrs	r1, r3, #3
    9458:	460b      	mov	r3, r1
    945a:	009b      	lsls	r3, r3, #2
    945c:	440b      	add	r3, r1
    945e:	005b      	lsls	r3, r3, #1
    9460:	1ad3      	subs	r3, r2, r3
    9462:	b2db      	uxtb	r3, r3
    9464:	2b03      	cmp	r3, #3
    9466:	f040 8712 	bne.w	a28e <send_desired+0xe52>
    946a:	f24a 6319 	movw	r3, #42521	; 0xa619
    946e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9472:	781a      	ldrb	r2, [r3, #0]
    9474:	f24a 631a 	movw	r3, #42522	; 0xa61a
    9478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947c:	781b      	ldrb	r3, [r3, #0]
    947e:	b2db      	uxtb	r3, r3
    9480:	429a      	cmp	r2, r3
    9482:	d313      	bcc.n	94ac <send_desired+0x70>
    9484:	f24a 631a 	movw	r3, #42522	; 0xa61a
    9488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	b2db      	uxtb	r3, r3
    9490:	461a      	mov	r2, r3
    9492:	f24a 6319 	movw	r3, #42521	; 0xa619
    9496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    949a:	781b      	ldrb	r3, [r3, #0]
    949c:	1ad3      	subs	r3, r2, r3
    949e:	33ff      	adds	r3, #255	; 0xff
    94a0:	2b18      	cmp	r3, #24
    94a2:	bfd4      	ite	le
    94a4:	2300      	movle	r3, #0
    94a6:	2301      	movgt	r3, #1
    94a8:	b2db      	uxtb	r3, r3
    94aa:	e011      	b.n	94d0 <send_desired+0x94>
    94ac:	f24a 631a 	movw	r3, #42522	; 0xa61a
    94b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	b2db      	uxtb	r3, r3
    94b8:	461a      	mov	r2, r3
    94ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    94be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c2:	781b      	ldrb	r3, [r3, #0]
    94c4:	1ad3      	subs	r3, r2, r3
    94c6:	2b18      	cmp	r3, #24
    94c8:	bfd4      	ite	le
    94ca:	2300      	movle	r3, #0
    94cc:	2301      	movgt	r3, #1
    94ce:	b2db      	uxtb	r3, r3
    94d0:	2b00      	cmp	r3, #0
    94d2:	f000 86d0 	beq.w	a276 <send_desired+0xe3a>
    94d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    94da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	461a      	mov	r2, r3
    94e2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    94e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ea:	2105      	movs	r1, #5
    94ec:	5499      	strb	r1, [r3, r2]
    94ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    94f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f6:	781b      	ldrb	r3, [r3, #0]
    94f8:	3301      	adds	r3, #1
    94fa:	b2da      	uxtb	r2, r3
    94fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    9500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9504:	701a      	strb	r2, [r3, #0]
    9506:	f24a 6319 	movw	r3, #42521	; 0xa619
    950a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	2bff      	cmp	r3, #255	; 0xff
    9512:	d105      	bne.n	9520 <send_desired+0xe4>
    9514:	f24a 6319 	movw	r3, #42521	; 0xa619
    9518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    951c:	2200      	movs	r2, #0
    951e:	701a      	strb	r2, [r3, #0]
    9520:	f24a 6319 	movw	r3, #42521	; 0xa619
    9524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9528:	781b      	ldrb	r3, [r3, #0]
    952a:	461a      	mov	r2, r3
    952c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9534:	2112      	movs	r1, #18
    9536:	5499      	strb	r1, [r3, r2]
    9538:	f24a 6319 	movw	r3, #42521	; 0xa619
    953c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	3301      	adds	r3, #1
    9544:	b2da      	uxtb	r2, r3
    9546:	f24a 6319 	movw	r3, #42521	; 0xa619
    954a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    954e:	701a      	strb	r2, [r3, #0]
    9550:	f24a 6319 	movw	r3, #42521	; 0xa619
    9554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	2bff      	cmp	r3, #255	; 0xff
    955c:	d105      	bne.n	956a <send_desired+0x12e>
    955e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9566:	2200      	movs	r2, #0
    9568:	701a      	strb	r2, [r3, #0]
    956a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    956e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9572:	2212      	movs	r2, #18
    9574:	701a      	strb	r2, [r3, #0]
    9576:	f24a 731e 	movw	r3, #42782	; 0xa71e
    957a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957e:	2212      	movs	r2, #18
    9580:	701a      	strb	r2, [r3, #0]
    9582:	f24a 6319 	movw	r3, #42521	; 0xa619
    9586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	461a      	mov	r2, r3
    958e:	f64a 1344 	movw	r3, #43332	; 0xa944
    9592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9596:	7819      	ldrb	r1, [r3, #0]
    9598:	f24a 631c 	movw	r3, #42524	; 0xa61c
    959c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a0:	5499      	strb	r1, [r3, r2]
    95a2:	f64a 1344 	movw	r3, #43332	; 0xa944
    95a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95aa:	781a      	ldrb	r2, [r3, #0]
    95ac:	f24a 731d 	movw	r3, #42781	; 0xa71d
    95b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	4413      	add	r3, r2
    95b8:	b2da      	uxtb	r2, r3
    95ba:	f24a 731d 	movw	r3, #42781	; 0xa71d
    95be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c2:	701a      	strb	r2, [r3, #0]
    95c4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    95c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95cc:	781a      	ldrb	r2, [r3, #0]
    95ce:	f24a 731d 	movw	r3, #42781	; 0xa71d
    95d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d6:	781b      	ldrb	r3, [r3, #0]
    95d8:	4413      	add	r3, r2
    95da:	b2da      	uxtb	r2, r3
    95dc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    95e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e4:	701a      	strb	r2, [r3, #0]
    95e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    95ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	3301      	adds	r3, #1
    95f2:	b2da      	uxtb	r2, r3
    95f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    95f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95fc:	701a      	strb	r2, [r3, #0]
    95fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    9602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9606:	781b      	ldrb	r3, [r3, #0]
    9608:	2bff      	cmp	r3, #255	; 0xff
    960a:	d105      	bne.n	9618 <send_desired+0x1dc>
    960c:	f24a 6319 	movw	r3, #42521	; 0xa619
    9610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9614:	2200      	movs	r2, #0
    9616:	701a      	strb	r2, [r3, #0]
    9618:	f24a 6319 	movw	r3, #42521	; 0xa619
    961c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9620:	781b      	ldrb	r3, [r3, #0]
    9622:	461a      	mov	r2, r3
    9624:	f64a 1344 	movw	r3, #43332	; 0xa944
    9628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962c:	7859      	ldrb	r1, [r3, #1]
    962e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9636:	5499      	strb	r1, [r3, r2]
    9638:	4bd1      	ldr	r3, [pc, #836]	; (9980 <send_desired+0x544>)
    963a:	781a      	ldrb	r2, [r3, #0]
    963c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	4413      	add	r3, r2
    9648:	b2da      	uxtb	r2, r3
    964a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    964e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9652:	701a      	strb	r2, [r3, #0]
    9654:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965c:	781a      	ldrb	r2, [r3, #0]
    965e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	4413      	add	r3, r2
    966a:	b2da      	uxtb	r2, r3
    966c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9674:	701a      	strb	r2, [r3, #0]
    9676:	f24a 6319 	movw	r3, #42521	; 0xa619
    967a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    967e:	781b      	ldrb	r3, [r3, #0]
    9680:	3301      	adds	r3, #1
    9682:	b2da      	uxtb	r2, r3
    9684:	f24a 6319 	movw	r3, #42521	; 0xa619
    9688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968c:	701a      	strb	r2, [r3, #0]
    968e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9696:	781b      	ldrb	r3, [r3, #0]
    9698:	2bff      	cmp	r3, #255	; 0xff
    969a:	d105      	bne.n	96a8 <send_desired+0x26c>
    969c:	f24a 6319 	movw	r3, #42521	; 0xa619
    96a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a4:	2200      	movs	r2, #0
    96a6:	701a      	strb	r2, [r3, #0]
    96a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    96ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	461a      	mov	r2, r3
    96b4:	f64a 1344 	movw	r3, #43332	; 0xa944
    96b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96bc:	7899      	ldrb	r1, [r3, #2]
    96be:	f24a 631c 	movw	r3, #42524	; 0xa61c
    96c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c6:	5499      	strb	r1, [r3, r2]
    96c8:	4bae      	ldr	r3, [pc, #696]	; (9984 <send_desired+0x548>)
    96ca:	781a      	ldrb	r2, [r3, #0]
    96cc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    96d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d4:	781b      	ldrb	r3, [r3, #0]
    96d6:	4413      	add	r3, r2
    96d8:	b2da      	uxtb	r2, r3
    96da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    96de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e2:	701a      	strb	r2, [r3, #0]
    96e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    96e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ec:	781a      	ldrb	r2, [r3, #0]
    96ee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    96f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f6:	781b      	ldrb	r3, [r3, #0]
    96f8:	4413      	add	r3, r2
    96fa:	b2da      	uxtb	r2, r3
    96fc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9704:	701a      	strb	r2, [r3, #0]
    9706:	f24a 6319 	movw	r3, #42521	; 0xa619
    970a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    970e:	781b      	ldrb	r3, [r3, #0]
    9710:	3301      	adds	r3, #1
    9712:	b2da      	uxtb	r2, r3
    9714:	f24a 6319 	movw	r3, #42521	; 0xa619
    9718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971c:	701a      	strb	r2, [r3, #0]
    971e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	2bff      	cmp	r3, #255	; 0xff
    972a:	d105      	bne.n	9738 <send_desired+0x2fc>
    972c:	f24a 6319 	movw	r3, #42521	; 0xa619
    9730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9734:	2200      	movs	r2, #0
    9736:	701a      	strb	r2, [r3, #0]
    9738:	f24a 6319 	movw	r3, #42521	; 0xa619
    973c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9740:	781b      	ldrb	r3, [r3, #0]
    9742:	461a      	mov	r2, r3
    9744:	f64a 1344 	movw	r3, #43332	; 0xa944
    9748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    974c:	78d9      	ldrb	r1, [r3, #3]
    974e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9756:	5499      	strb	r1, [r3, r2]
    9758:	4b8b      	ldr	r3, [pc, #556]	; (9988 <send_desired+0x54c>)
    975a:	781a      	ldrb	r2, [r3, #0]
    975c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9764:	781b      	ldrb	r3, [r3, #0]
    9766:	4413      	add	r3, r2
    9768:	b2da      	uxtb	r2, r3
    976a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    976e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9772:	701a      	strb	r2, [r3, #0]
    9774:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977c:	781a      	ldrb	r2, [r3, #0]
    977e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9786:	781b      	ldrb	r3, [r3, #0]
    9788:	4413      	add	r3, r2
    978a:	b2da      	uxtb	r2, r3
    978c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9794:	701a      	strb	r2, [r3, #0]
    9796:	f24a 6319 	movw	r3, #42521	; 0xa619
    979a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	3301      	adds	r3, #1
    97a2:	b2da      	uxtb	r2, r3
    97a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    97a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ac:	701a      	strb	r2, [r3, #0]
    97ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    97b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	2bff      	cmp	r3, #255	; 0xff
    97ba:	d105      	bne.n	97c8 <send_desired+0x38c>
    97bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    97c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c4:	2200      	movs	r2, #0
    97c6:	701a      	strb	r2, [r3, #0]
    97c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    97cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d0:	781b      	ldrb	r3, [r3, #0]
    97d2:	461a      	mov	r2, r3
    97d4:	f64a 1348 	movw	r3, #43336	; 0xa948
    97d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97dc:	7819      	ldrb	r1, [r3, #0]
    97de:	f24a 631c 	movw	r3, #42524	; 0xa61c
    97e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e6:	5499      	strb	r1, [r3, r2]
    97e8:	f64a 1348 	movw	r3, #43336	; 0xa948
    97ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f0:	781a      	ldrb	r2, [r3, #0]
    97f2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    97f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fa:	781b      	ldrb	r3, [r3, #0]
    97fc:	4413      	add	r3, r2
    97fe:	b2da      	uxtb	r2, r3
    9800:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9808:	701a      	strb	r2, [r3, #0]
    980a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    980e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9812:	781a      	ldrb	r2, [r3, #0]
    9814:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    981c:	781b      	ldrb	r3, [r3, #0]
    981e:	4413      	add	r3, r2
    9820:	b2da      	uxtb	r2, r3
    9822:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982a:	701a      	strb	r2, [r3, #0]
    982c:	f24a 6319 	movw	r3, #42521	; 0xa619
    9830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9834:	781b      	ldrb	r3, [r3, #0]
    9836:	3301      	adds	r3, #1
    9838:	b2da      	uxtb	r2, r3
    983a:	f24a 6319 	movw	r3, #42521	; 0xa619
    983e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9842:	701a      	strb	r2, [r3, #0]
    9844:	f24a 6319 	movw	r3, #42521	; 0xa619
    9848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	2bff      	cmp	r3, #255	; 0xff
    9850:	d105      	bne.n	985e <send_desired+0x422>
    9852:	f24a 6319 	movw	r3, #42521	; 0xa619
    9856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985a:	2200      	movs	r2, #0
    985c:	701a      	strb	r2, [r3, #0]
    985e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	461a      	mov	r2, r3
    986a:	f64a 1348 	movw	r3, #43336	; 0xa948
    986e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9872:	7859      	ldrb	r1, [r3, #1]
    9874:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987c:	5499      	strb	r1, [r3, r2]
    987e:	4b43      	ldr	r3, [pc, #268]	; (998c <send_desired+0x550>)
    9880:	781a      	ldrb	r2, [r3, #0]
    9882:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988a:	781b      	ldrb	r3, [r3, #0]
    988c:	4413      	add	r3, r2
    988e:	b2da      	uxtb	r2, r3
    9890:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9898:	701a      	strb	r2, [r3, #0]
    989a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    989e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a2:	781a      	ldrb	r2, [r3, #0]
    98a4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    98a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	4413      	add	r3, r2
    98b0:	b2da      	uxtb	r2, r3
    98b2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    98b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ba:	701a      	strb	r2, [r3, #0]
    98bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    98c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c4:	781b      	ldrb	r3, [r3, #0]
    98c6:	3301      	adds	r3, #1
    98c8:	b2da      	uxtb	r2, r3
    98ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    98ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d2:	701a      	strb	r2, [r3, #0]
    98d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    98d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98dc:	781b      	ldrb	r3, [r3, #0]
    98de:	2bff      	cmp	r3, #255	; 0xff
    98e0:	d105      	bne.n	98ee <send_desired+0x4b2>
    98e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    98e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ea:	2200      	movs	r2, #0
    98ec:	701a      	strb	r2, [r3, #0]
    98ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    98f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f6:	781b      	ldrb	r3, [r3, #0]
    98f8:	461a      	mov	r2, r3
    98fa:	f64a 1348 	movw	r3, #43336	; 0xa948
    98fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9902:	7899      	ldrb	r1, [r3, #2]
    9904:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990c:	5499      	strb	r1, [r3, r2]
    990e:	4b20      	ldr	r3, [pc, #128]	; (9990 <send_desired+0x554>)
    9910:	781a      	ldrb	r2, [r3, #0]
    9912:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991a:	781b      	ldrb	r3, [r3, #0]
    991c:	4413      	add	r3, r2
    991e:	b2da      	uxtb	r2, r3
    9920:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9928:	701a      	strb	r2, [r3, #0]
    992a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    992e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9932:	781a      	ldrb	r2, [r3, #0]
    9934:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	4413      	add	r3, r2
    9940:	b2da      	uxtb	r2, r3
    9942:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    994a:	701a      	strb	r2, [r3, #0]
    994c:	f24a 6319 	movw	r3, #42521	; 0xa619
    9950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	3301      	adds	r3, #1
    9958:	b2da      	uxtb	r2, r3
    995a:	f24a 6319 	movw	r3, #42521	; 0xa619
    995e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9962:	701a      	strb	r2, [r3, #0]
    9964:	f24a 6319 	movw	r3, #42521	; 0xa619
    9968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	2bff      	cmp	r3, #255	; 0xff
    9970:	d110      	bne.n	9994 <send_desired+0x558>
    9972:	f24a 6319 	movw	r3, #42521	; 0xa619
    9976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997a:	2200      	movs	r2, #0
    997c:	701a      	strb	r2, [r3, #0]
    997e:	e009      	b.n	9994 <send_desired+0x558>
    9980:	2000a945 	.word	0x2000a945
    9984:	2000a946 	.word	0x2000a946
    9988:	2000a947 	.word	0x2000a947
    998c:	2000a949 	.word	0x2000a949
    9990:	2000a94a 	.word	0x2000a94a
    9994:	f24a 6319 	movw	r3, #42521	; 0xa619
    9998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	461a      	mov	r2, r3
    99a0:	f64a 1348 	movw	r3, #43336	; 0xa948
    99a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a8:	78d9      	ldrb	r1, [r3, #3]
    99aa:	f24a 631c 	movw	r3, #42524	; 0xa61c
    99ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b2:	5499      	strb	r1, [r3, r2]
    99b4:	4bd3      	ldr	r3, [pc, #844]	; (9d04 <send_desired+0x8c8>)
    99b6:	781a      	ldrb	r2, [r3, #0]
    99b8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    99bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	4413      	add	r3, r2
    99c4:	b2da      	uxtb	r2, r3
    99c6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    99ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ce:	701a      	strb	r2, [r3, #0]
    99d0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    99d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d8:	781a      	ldrb	r2, [r3, #0]
    99da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    99de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	4413      	add	r3, r2
    99e6:	b2da      	uxtb	r2, r3
    99e8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    99ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f0:	701a      	strb	r2, [r3, #0]
    99f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    99f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	3301      	adds	r3, #1
    99fe:	b2da      	uxtb	r2, r3
    9a00:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a08:	701a      	strb	r2, [r3, #0]
    9a0a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a12:	781b      	ldrb	r3, [r3, #0]
    9a14:	2bff      	cmp	r3, #255	; 0xff
    9a16:	d105      	bne.n	9a24 <send_desired+0x5e8>
    9a18:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a20:	2200      	movs	r2, #0
    9a22:	701a      	strb	r2, [r3, #0]
    9a24:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	461a      	mov	r2, r3
    9a30:	f64a 1390 	movw	r3, #43408	; 0xa990
    9a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a38:	7819      	ldrb	r1, [r3, #0]
    9a3a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a42:	5499      	strb	r1, [r3, r2]
    9a44:	f64a 1390 	movw	r3, #43408	; 0xa990
    9a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4c:	781a      	ldrb	r2, [r3, #0]
    9a4e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	4413      	add	r3, r2
    9a5a:	b2da      	uxtb	r2, r3
    9a5c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a64:	701a      	strb	r2, [r3, #0]
    9a66:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a6e:	781a      	ldrb	r2, [r3, #0]
    9a70:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	4413      	add	r3, r2
    9a7c:	b2da      	uxtb	r2, r3
    9a7e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a86:	701a      	strb	r2, [r3, #0]
    9a88:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	3301      	adds	r3, #1
    9a94:	b2da      	uxtb	r2, r3
    9a96:	f24a 6319 	movw	r3, #42521	; 0xa619
    9a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f24a 6319 	movw	r3, #42521	; 0xa619
    9aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	2bff      	cmp	r3, #255	; 0xff
    9aac:	d105      	bne.n	9aba <send_desired+0x67e>
    9aae:	f24a 6319 	movw	r3, #42521	; 0xa619
    9ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab6:	2200      	movs	r2, #0
    9ab8:	701a      	strb	r2, [r3, #0]
    9aba:	f24a 6319 	movw	r3, #42521	; 0xa619
    9abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac2:	781b      	ldrb	r3, [r3, #0]
    9ac4:	461a      	mov	r2, r3
    9ac6:	f64a 1390 	movw	r3, #43408	; 0xa990
    9aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ace:	7859      	ldrb	r1, [r3, #1]
    9ad0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad8:	5499      	strb	r1, [r3, r2]
    9ada:	4b8b      	ldr	r3, [pc, #556]	; (9d08 <send_desired+0x8cc>)
    9adc:	781a      	ldrb	r2, [r3, #0]
    9ade:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	4413      	add	r3, r2
    9aea:	b2da      	uxtb	r2, r3
    9aec:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af4:	701a      	strb	r2, [r3, #0]
    9af6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afe:	781a      	ldrb	r2, [r3, #0]
    9b00:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	4413      	add	r3, r2
    9b0c:	b2da      	uxtb	r2, r3
    9b0e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b16:	701a      	strb	r2, [r3, #0]
    9b18:	f24a 6319 	movw	r3, #42521	; 0xa619
    9b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	3301      	adds	r3, #1
    9b24:	b2da      	uxtb	r2, r3
    9b26:	f24a 6319 	movw	r3, #42521	; 0xa619
    9b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2e:	701a      	strb	r2, [r3, #0]
    9b30:	f24a 6319 	movw	r3, #42521	; 0xa619
    9b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	2bff      	cmp	r3, #255	; 0xff
    9b3c:	d105      	bne.n	9b4a <send_desired+0x70e>
    9b3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b46:	2200      	movs	r2, #0
    9b48:	701a      	strb	r2, [r3, #0]
    9b4a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b52:	781b      	ldrb	r3, [r3, #0]
    9b54:	461a      	mov	r2, r3
    9b56:	f64a 1390 	movw	r3, #43408	; 0xa990
    9b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5e:	7899      	ldrb	r1, [r3, #2]
    9b60:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b68:	5499      	strb	r1, [r3, r2]
    9b6a:	4b68      	ldr	r3, [pc, #416]	; (9d0c <send_desired+0x8d0>)
    9b6c:	781a      	ldrb	r2, [r3, #0]
    9b6e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	4413      	add	r3, r2
    9b7a:	b2da      	uxtb	r2, r3
    9b7c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b84:	701a      	strb	r2, [r3, #0]
    9b86:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8e:	781a      	ldrb	r2, [r3, #0]
    9b90:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	4413      	add	r3, r2
    9b9c:	b2da      	uxtb	r2, r3
    9b9e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba6:	701a      	strb	r2, [r3, #0]
    9ba8:	f24a 6319 	movw	r3, #42521	; 0xa619
    9bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	3301      	adds	r3, #1
    9bb4:	b2da      	uxtb	r2, r3
    9bb6:	f24a 6319 	movw	r3, #42521	; 0xa619
    9bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbe:	701a      	strb	r2, [r3, #0]
    9bc0:	f24a 6319 	movw	r3, #42521	; 0xa619
    9bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc8:	781b      	ldrb	r3, [r3, #0]
    9bca:	2bff      	cmp	r3, #255	; 0xff
    9bcc:	d105      	bne.n	9bda <send_desired+0x79e>
    9bce:	f24a 6319 	movw	r3, #42521	; 0xa619
    9bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd6:	2200      	movs	r2, #0
    9bd8:	701a      	strb	r2, [r3, #0]
    9bda:	f24a 6319 	movw	r3, #42521	; 0xa619
    9bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	461a      	mov	r2, r3
    9be6:	f64a 1390 	movw	r3, #43408	; 0xa990
    9bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bee:	78d9      	ldrb	r1, [r3, #3]
    9bf0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf8:	5499      	strb	r1, [r3, r2]
    9bfa:	4b45      	ldr	r3, [pc, #276]	; (9d10 <send_desired+0x8d4>)
    9bfc:	781a      	ldrb	r2, [r3, #0]
    9bfe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c06:	781b      	ldrb	r3, [r3, #0]
    9c08:	4413      	add	r3, r2
    9c0a:	b2da      	uxtb	r2, r3
    9c0c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c14:	701a      	strb	r2, [r3, #0]
    9c16:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1e:	781a      	ldrb	r2, [r3, #0]
    9c20:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c28:	781b      	ldrb	r3, [r3, #0]
    9c2a:	4413      	add	r3, r2
    9c2c:	b2da      	uxtb	r2, r3
    9c2e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c36:	701a      	strb	r2, [r3, #0]
    9c38:	f24a 6319 	movw	r3, #42521	; 0xa619
    9c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c40:	781b      	ldrb	r3, [r3, #0]
    9c42:	3301      	adds	r3, #1
    9c44:	b2da      	uxtb	r2, r3
    9c46:	f24a 6319 	movw	r3, #42521	; 0xa619
    9c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4e:	701a      	strb	r2, [r3, #0]
    9c50:	f24a 6319 	movw	r3, #42521	; 0xa619
    9c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c58:	781b      	ldrb	r3, [r3, #0]
    9c5a:	2bff      	cmp	r3, #255	; 0xff
    9c5c:	d105      	bne.n	9c6a <send_desired+0x82e>
    9c5e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c66:	2200      	movs	r2, #0
    9c68:	701a      	strb	r2, [r3, #0]
    9c6a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	461a      	mov	r2, r3
    9c76:	f64a 1394 	movw	r3, #43412	; 0xa994
    9c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7e:	7819      	ldrb	r1, [r3, #0]
    9c80:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c88:	5499      	strb	r1, [r3, r2]
    9c8a:	f64a 1394 	movw	r3, #43412	; 0xa994
    9c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c92:	781a      	ldrb	r2, [r3, #0]
    9c94:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c9c:	781b      	ldrb	r3, [r3, #0]
    9c9e:	4413      	add	r3, r2
    9ca0:	b2da      	uxtb	r2, r3
    9ca2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9caa:	701a      	strb	r2, [r3, #0]
    9cac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb4:	781a      	ldrb	r2, [r3, #0]
    9cb6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	4413      	add	r3, r2
    9cc2:	b2da      	uxtb	r2, r3
    9cc4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ccc:	701a      	strb	r2, [r3, #0]
    9cce:	f24a 6319 	movw	r3, #42521	; 0xa619
    9cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	3301      	adds	r3, #1
    9cda:	b2da      	uxtb	r2, r3
    9cdc:	f24a 6319 	movw	r3, #42521	; 0xa619
    9ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce4:	701a      	strb	r2, [r3, #0]
    9ce6:	f24a 6319 	movw	r3, #42521	; 0xa619
    9cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	2bff      	cmp	r3, #255	; 0xff
    9cf2:	d10f      	bne.n	9d14 <send_desired+0x8d8>
    9cf4:	f24a 6319 	movw	r3, #42521	; 0xa619
    9cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfc:	2200      	movs	r2, #0
    9cfe:	701a      	strb	r2, [r3, #0]
    9d00:	e008      	b.n	9d14 <send_desired+0x8d8>
    9d02:	bf00      	nop
    9d04:	2000a94b 	.word	0x2000a94b
    9d08:	2000a991 	.word	0x2000a991
    9d0c:	2000a992 	.word	0x2000a992
    9d10:	2000a993 	.word	0x2000a993
    9d14:	f24a 6319 	movw	r3, #42521	; 0xa619
    9d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1c:	781b      	ldrb	r3, [r3, #0]
    9d1e:	461a      	mov	r2, r3
    9d20:	f64a 1394 	movw	r3, #43412	; 0xa994
    9d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d28:	7859      	ldrb	r1, [r3, #1]
    9d2a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d32:	5499      	strb	r1, [r3, r2]
    9d34:	4bd1      	ldr	r3, [pc, #836]	; (a07c <send_desired+0xc40>)
    9d36:	781a      	ldrb	r2, [r3, #0]
    9d38:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	4413      	add	r3, r2
    9d44:	b2da      	uxtb	r2, r3
    9d46:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4e:	701a      	strb	r2, [r3, #0]
    9d50:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d58:	781a      	ldrb	r2, [r3, #0]
    9d5a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	4413      	add	r3, r2
    9d66:	b2da      	uxtb	r2, r3
    9d68:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	701a      	strb	r2, [r3, #0]
    9d72:	f24a 6319 	movw	r3, #42521	; 0xa619
    9d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	3301      	adds	r3, #1
    9d7e:	b2da      	uxtb	r2, r3
    9d80:	f24a 6319 	movw	r3, #42521	; 0xa619
    9d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d88:	701a      	strb	r2, [r3, #0]
    9d8a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d92:	781b      	ldrb	r3, [r3, #0]
    9d94:	2bff      	cmp	r3, #255	; 0xff
    9d96:	d105      	bne.n	9da4 <send_desired+0x968>
    9d98:	f24a 6319 	movw	r3, #42521	; 0xa619
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	2200      	movs	r2, #0
    9da2:	701a      	strb	r2, [r3, #0]
    9da4:	f24a 6319 	movw	r3, #42521	; 0xa619
    9da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	461a      	mov	r2, r3
    9db0:	f64a 1394 	movw	r3, #43412	; 0xa994
    9db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db8:	7899      	ldrb	r1, [r3, #2]
    9dba:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc2:	5499      	strb	r1, [r3, r2]
    9dc4:	4bae      	ldr	r3, [pc, #696]	; (a080 <send_desired+0xc44>)
    9dc6:	781a      	ldrb	r2, [r3, #0]
    9dc8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	4413      	add	r3, r2
    9dd4:	b2da      	uxtb	r2, r3
    9dd6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dde:	701a      	strb	r2, [r3, #0]
    9de0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de8:	781a      	ldrb	r2, [r3, #0]
    9dea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	4413      	add	r3, r2
    9df6:	b2da      	uxtb	r2, r3
    9df8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e00:	701a      	strb	r2, [r3, #0]
    9e02:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0a:	781b      	ldrb	r3, [r3, #0]
    9e0c:	3301      	adds	r3, #1
    9e0e:	b2da      	uxtb	r2, r3
    9e10:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e18:	701a      	strb	r2, [r3, #0]
    9e1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e22:	781b      	ldrb	r3, [r3, #0]
    9e24:	2bff      	cmp	r3, #255	; 0xff
    9e26:	d105      	bne.n	9e34 <send_desired+0x9f8>
    9e28:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e30:	2200      	movs	r2, #0
    9e32:	701a      	strb	r2, [r3, #0]
    9e34:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	461a      	mov	r2, r3
    9e40:	f64a 1394 	movw	r3, #43412	; 0xa994
    9e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e48:	78d9      	ldrb	r1, [r3, #3]
    9e4a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e52:	5499      	strb	r1, [r3, r2]
    9e54:	4b8b      	ldr	r3, [pc, #556]	; (a084 <send_desired+0xc48>)
    9e56:	781a      	ldrb	r2, [r3, #0]
    9e58:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	4413      	add	r3, r2
    9e64:	b2da      	uxtb	r2, r3
    9e66:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6e:	701a      	strb	r2, [r3, #0]
    9e70:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e78:	781a      	ldrb	r2, [r3, #0]
    9e7a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e82:	781b      	ldrb	r3, [r3, #0]
    9e84:	4413      	add	r3, r2
    9e86:	b2da      	uxtb	r2, r3
    9e88:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e90:	701a      	strb	r2, [r3, #0]
    9e92:	f24a 6319 	movw	r3, #42521	; 0xa619
    9e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	3301      	adds	r3, #1
    9e9e:	b2da      	uxtb	r2, r3
    9ea0:	f24a 6319 	movw	r3, #42521	; 0xa619
    9ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea8:	701a      	strb	r2, [r3, #0]
    9eaa:	f24a 6319 	movw	r3, #42521	; 0xa619
    9eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb2:	781b      	ldrb	r3, [r3, #0]
    9eb4:	2bff      	cmp	r3, #255	; 0xff
    9eb6:	d105      	bne.n	9ec4 <send_desired+0xa88>
    9eb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    9ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec0:	2200      	movs	r2, #0
    9ec2:	701a      	strb	r2, [r3, #0]
    9ec4:	f24a 6319 	movw	r3, #42521	; 0xa619
    9ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ecc:	781b      	ldrb	r3, [r3, #0]
    9ece:	461a      	mov	r2, r3
    9ed0:	f240 03b8 	movw	r3, #184	; 0xb8
    9ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed8:	7819      	ldrb	r1, [r3, #0]
    9eda:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee2:	5499      	strb	r1, [r3, r2]
    9ee4:	f240 03b8 	movw	r3, #184	; 0xb8
    9ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eec:	781a      	ldrb	r2, [r3, #0]
    9eee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef6:	781b      	ldrb	r3, [r3, #0]
    9ef8:	4413      	add	r3, r2
    9efa:	b2da      	uxtb	r2, r3
    9efc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f04:	701a      	strb	r2, [r3, #0]
    9f06:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f0e:	781a      	ldrb	r2, [r3, #0]
    9f10:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	4413      	add	r3, r2
    9f1c:	b2da      	uxtb	r2, r3
    9f1e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	701a      	strb	r2, [r3, #0]
    9f28:	f24a 6319 	movw	r3, #42521	; 0xa619
    9f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	3301      	adds	r3, #1
    9f34:	b2da      	uxtb	r2, r3
    9f36:	f24a 6319 	movw	r3, #42521	; 0xa619
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	701a      	strb	r2, [r3, #0]
    9f40:	f24a 6319 	movw	r3, #42521	; 0xa619
    9f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f48:	781b      	ldrb	r3, [r3, #0]
    9f4a:	2bff      	cmp	r3, #255	; 0xff
    9f4c:	d105      	bne.n	9f5a <send_desired+0xb1e>
    9f4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	2200      	movs	r2, #0
    9f58:	701a      	strb	r2, [r3, #0]
    9f5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    9f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	461a      	mov	r2, r3
    9f66:	f240 03b8 	movw	r3, #184	; 0xb8
    9f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6e:	7859      	ldrb	r1, [r3, #1]
    9f70:	f24a 631c 	movw	r3, #42524	; 0xa61c
    9f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f78:	5499      	strb	r1, [r3, r2]
    9f7a:	4b43      	ldr	r3, [pc, #268]	; (a088 <send_desired+0xc4c>)
    9f7c:	781a      	ldrb	r2, [r3, #0]
    9f7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	4413      	add	r3, r2
    9f8a:	b2da      	uxtb	r2, r3
    9f8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f94:	701a      	strb	r2, [r3, #0]
    9f96:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	781a      	ldrb	r2, [r3, #0]
    9fa0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    9fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	4413      	add	r3, r2
    9fac:	b2da      	uxtb	r2, r3
    9fae:	f24a 731e 	movw	r3, #42782	; 0xa71e
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	701a      	strb	r2, [r3, #0]
    9fb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    9fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	3301      	adds	r3, #1
    9fc4:	b2da      	uxtb	r2, r3
    9fc6:	f24a 6319 	movw	r3, #42521	; 0xa619
    9fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fce:	701a      	strb	r2, [r3, #0]
    9fd0:	f24a 6319 	movw	r3, #42521	; 0xa619
    9fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd8:	781b      	ldrb	r3, [r3, #0]
    9fda:	2bff      	cmp	r3, #255	; 0xff
    9fdc:	d105      	bne.n	9fea <send_desired+0xbae>
    9fde:	f24a 6319 	movw	r3, #42521	; 0xa619
    9fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe6:	2200      	movs	r2, #0
    9fe8:	701a      	strb	r2, [r3, #0]
    9fea:	f24a 6319 	movw	r3, #42521	; 0xa619
    9fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff2:	781b      	ldrb	r3, [r3, #0]
    9ff4:	461a      	mov	r2, r3
    9ff6:	f240 03b8 	movw	r3, #184	; 0xb8
    9ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffe:	7899      	ldrb	r1, [r3, #2]
    a000:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a008:	5499      	strb	r1, [r3, r2]
    a00a:	4b20      	ldr	r3, [pc, #128]	; (a08c <send_desired+0xc50>)
    a00c:	781a      	ldrb	r2, [r3, #0]
    a00e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a016:	781b      	ldrb	r3, [r3, #0]
    a018:	4413      	add	r3, r2
    a01a:	b2da      	uxtb	r2, r3
    a01c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a024:	701a      	strb	r2, [r3, #0]
    a026:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02e:	781a      	ldrb	r2, [r3, #0]
    a030:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a038:	781b      	ldrb	r3, [r3, #0]
    a03a:	4413      	add	r3, r2
    a03c:	b2da      	uxtb	r2, r3
    a03e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a046:	701a      	strb	r2, [r3, #0]
    a048:	f24a 6319 	movw	r3, #42521	; 0xa619
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	3301      	adds	r3, #1
    a054:	b2da      	uxtb	r2, r3
    a056:	f24a 6319 	movw	r3, #42521	; 0xa619
    a05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05e:	701a      	strb	r2, [r3, #0]
    a060:	f24a 6319 	movw	r3, #42521	; 0xa619
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	781b      	ldrb	r3, [r3, #0]
    a06a:	2bff      	cmp	r3, #255	; 0xff
    a06c:	d110      	bne.n	a090 <send_desired+0xc54>
    a06e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a076:	2200      	movs	r2, #0
    a078:	701a      	strb	r2, [r3, #0]
    a07a:	e009      	b.n	a090 <send_desired+0xc54>
    a07c:	2000a995 	.word	0x2000a995
    a080:	2000a996 	.word	0x2000a996
    a084:	2000a997 	.word	0x2000a997
    a088:	200000b9 	.word	0x200000b9
    a08c:	200000ba 	.word	0x200000ba
    a090:	f24a 6319 	movw	r3, #42521	; 0xa619
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	461a      	mov	r2, r3
    a09c:	f240 03b8 	movw	r3, #184	; 0xb8
    a0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a4:	78d9      	ldrb	r1, [r3, #3]
    a0a6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ae:	5499      	strb	r1, [r3, r2]
    a0b0:	4b79      	ldr	r3, [pc, #484]	; (a298 <send_desired+0xe5c>)
    a0b2:	781a      	ldrb	r2, [r3, #0]
    a0b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0bc:	781b      	ldrb	r3, [r3, #0]
    a0be:	4413      	add	r3, r2
    a0c0:	b2da      	uxtb	r2, r3
    a0c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ca:	701a      	strb	r2, [r3, #0]
    a0cc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d4:	781a      	ldrb	r2, [r3, #0]
    a0d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	4413      	add	r3, r2
    a0e2:	b2da      	uxtb	r2, r3
    a0e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ec:	701a      	strb	r2, [r3, #0]
    a0ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    a0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f6:	781b      	ldrb	r3, [r3, #0]
    a0f8:	3301      	adds	r3, #1
    a0fa:	b2da      	uxtb	r2, r3
    a0fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    a100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a104:	701a      	strb	r2, [r3, #0]
    a106:	f24a 6319 	movw	r3, #42521	; 0xa619
    a10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a10e:	781b      	ldrb	r3, [r3, #0]
    a110:	2bff      	cmp	r3, #255	; 0xff
    a112:	d105      	bne.n	a120 <send_desired+0xce4>
    a114:	f24a 6319 	movw	r3, #42521	; 0xa619
    a118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11c:	2200      	movs	r2, #0
    a11e:	701a      	strb	r2, [r3, #0]
    a120:	f24a 6319 	movw	r3, #42521	; 0xa619
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	781b      	ldrb	r3, [r3, #0]
    a12a:	461a      	mov	r2, r3
    a12c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a134:	7819      	ldrb	r1, [r3, #0]
    a136:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a13e:	5499      	strb	r1, [r3, r2]
    a140:	f24a 6319 	movw	r3, #42521	; 0xa619
    a144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a148:	781b      	ldrb	r3, [r3, #0]
    a14a:	3301      	adds	r3, #1
    a14c:	b2da      	uxtb	r2, r3
    a14e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a156:	701a      	strb	r2, [r3, #0]
    a158:	f24a 6319 	movw	r3, #42521	; 0xa619
    a15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	2bff      	cmp	r3, #255	; 0xff
    a164:	d105      	bne.n	a172 <send_desired+0xd36>
    a166:	f24a 6319 	movw	r3, #42521	; 0xa619
    a16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a16e:	2200      	movs	r2, #0
    a170:	701a      	strb	r2, [r3, #0]
    a172:	f24a 6319 	movw	r3, #42521	; 0xa619
    a176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a17a:	781b      	ldrb	r3, [r3, #0]
    a17c:	461a      	mov	r2, r3
    a17e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a186:	7819      	ldrb	r1, [r3, #0]
    a188:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a190:	5499      	strb	r1, [r3, r2]
    a192:	f24a 6319 	movw	r3, #42521	; 0xa619
    a196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a19a:	781b      	ldrb	r3, [r3, #0]
    a19c:	3301      	adds	r3, #1
    a19e:	b2da      	uxtb	r2, r3
    a1a0:	f24a 6319 	movw	r3, #42521	; 0xa619
    a1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a8:	701a      	strb	r2, [r3, #0]
    a1aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    a1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	2bff      	cmp	r3, #255	; 0xff
    a1b6:	d105      	bne.n	a1c4 <send_desired+0xd88>
    a1b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    a1bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c0:	2200      	movs	r2, #0
    a1c2:	701a      	strb	r2, [r3, #0]
    a1c4:	f242 0339 	movw	r3, #8249	; 0x2039
    a1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1cc:	781b      	ldrb	r3, [r3, #0]
    a1ce:	b2db      	uxtb	r3, r3
    a1d0:	f003 0310 	and.w	r3, r3, #16
    a1d4:	2b00      	cmp	r3, #0
    a1d6:	d15a      	bne.n	a28e <send_desired+0xe52>
    a1d8:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	781b      	ldrb	r3, [r3, #0]
    a1e2:	b2db      	uxtb	r3, r3
    a1e4:	461a      	mov	r2, r3
    a1e6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ee:	5c9a      	ldrb	r2, [r3, r2]
    a1f0:	f24a 731b 	movw	r3, #42779	; 0xa71b
    a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f8:	701a      	strb	r2, [r3, #0]
    a1fa:	f24a 731c 	movw	r3, #42780	; 0xa71c
    a1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a202:	2200      	movs	r2, #0
    a204:	701a      	strb	r2, [r3, #0]
    a206:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	b2db      	uxtb	r3, r3
    a212:	3301      	adds	r3, #1
    a214:	b2da      	uxtb	r2, r3
    a216:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21e:	701a      	strb	r2, [r3, #0]
    a220:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	b2db      	uxtb	r3, r3
    a22c:	2bff      	cmp	r3, #255	; 0xff
    a22e:	d105      	bne.n	a23c <send_desired+0xe00>
    a230:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a238:	2200      	movs	r2, #0
    a23a:	701a      	strb	r2, [r3, #0]
    a23c:	f242 0338 	movw	r3, #8248	; 0x2038
    a240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a244:	f242 0238 	movw	r2, #8248	; 0x2038
    a248:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a24c:	7812      	ldrb	r2, [r2, #0]
    a24e:	b2d2      	uxtb	r2, r2
    a250:	f042 0201 	orr.w	r2, r2, #1
    a254:	b2d2      	uxtb	r2, r2
    a256:	701a      	strb	r2, [r3, #0]
    a258:	f242 0339 	movw	r3, #8249	; 0x2039
    a25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a260:	f242 0239 	movw	r2, #8249	; 0x2039
    a264:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a268:	7812      	ldrb	r2, [r2, #0]
    a26a:	b2d2      	uxtb	r2, r2
    a26c:	f042 0210 	orr.w	r2, r2, #16
    a270:	b2d2      	uxtb	r2, r2
    a272:	701a      	strb	r2, [r3, #0]
    a274:	e00b      	b.n	a28e <send_desired+0xe52>
    a276:	f24a 6318 	movw	r3, #42520	; 0xa618
    a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27e:	781b      	ldrb	r3, [r3, #0]
    a280:	3301      	adds	r3, #1
    a282:	b2da      	uxtb	r2, r3
    a284:	f24a 6318 	movw	r3, #42520	; 0xa618
    a288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a28c:	701a      	strb	r2, [r3, #0]
}
    a28e:	46bd      	mov	sp, r7
    a290:	f85d 7b04 	ldr.w	r7, [sp], #4
    a294:	4770      	bx	lr
    a296:	bf00      	nop
    a298:	200000bb 	.word	0x200000bb

0000a29c <send_bat>:
void send_bat(void){  //2000ms
    a29c:	b480      	push	{r7}
    a29e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a2a0:	f24a 6311 	movw	r3, #42513	; 0xa611
    a2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a8:	781a      	ldrb	r2, [r3, #0]
    a2aa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a2ae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a2b2:	fba3 1302 	umull	r1, r3, r3, r2
    a2b6:	0919      	lsrs	r1, r3, #4
    a2b8:	460b      	mov	r3, r1
    a2ba:	009b      	lsls	r3, r3, #2
    a2bc:	440b      	add	r3, r1
    a2be:	009b      	lsls	r3, r3, #2
    a2c0:	1ad3      	subs	r3, r2, r3
    a2c2:	b2db      	uxtb	r3, r3
    a2c4:	2b08      	cmp	r3, #8
    a2c6:	f040 839a 	bne.w	a9fe <send_bat+0x762>
    a2ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    a2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d2:	781a      	ldrb	r2, [r3, #0]
    a2d4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	b2db      	uxtb	r3, r3
    a2e0:	429a      	cmp	r2, r3
    a2e2:	d313      	bcc.n	a30c <send_bat+0x70>
    a2e4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ec:	781b      	ldrb	r3, [r3, #0]
    a2ee:	b2db      	uxtb	r3, r3
    a2f0:	461a      	mov	r2, r3
    a2f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    a2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2fa:	781b      	ldrb	r3, [r3, #0]
    a2fc:	1ad3      	subs	r3, r2, r3
    a2fe:	33ff      	adds	r3, #255	; 0xff
    a300:	2b0c      	cmp	r3, #12
    a302:	bfd4      	ite	le
    a304:	2300      	movle	r3, #0
    a306:	2301      	movgt	r3, #1
    a308:	b2db      	uxtb	r3, r3
    a30a:	e011      	b.n	a330 <send_bat+0x94>
    a30c:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	b2db      	uxtb	r3, r3
    a318:	461a      	mov	r2, r3
    a31a:	f24a 6319 	movw	r3, #42521	; 0xa619
    a31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	1ad3      	subs	r3, r2, r3
    a326:	2b0c      	cmp	r3, #12
    a328:	bfd4      	ite	le
    a32a:	2300      	movle	r3, #0
    a32c:	2301      	movgt	r3, #1
    a32e:	b2db      	uxtb	r3, r3
    a330:	2b00      	cmp	r3, #0
    a332:	f000 8358 	beq.w	a9e6 <send_bat+0x74a>
    a336:	f24a 6319 	movw	r3, #42521	; 0xa619
    a33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	461a      	mov	r2, r3
    a342:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a34a:	2105      	movs	r1, #5
    a34c:	5499      	strb	r1, [r3, r2]
    a34e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a356:	781b      	ldrb	r3, [r3, #0]
    a358:	3301      	adds	r3, #1
    a35a:	b2da      	uxtb	r2, r3
    a35c:	f24a 6319 	movw	r3, #42521	; 0xa619
    a360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a364:	701a      	strb	r2, [r3, #0]
    a366:	f24a 6319 	movw	r3, #42521	; 0xa619
    a36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36e:	781b      	ldrb	r3, [r3, #0]
    a370:	2bff      	cmp	r3, #255	; 0xff
    a372:	d105      	bne.n	a380 <send_bat+0xe4>
    a374:	f24a 6319 	movw	r3, #42521	; 0xa619
    a378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a37c:	2200      	movs	r2, #0
    a37e:	701a      	strb	r2, [r3, #0]
    a380:	f24a 6319 	movw	r3, #42521	; 0xa619
    a384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	461a      	mov	r2, r3
    a38c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a394:	210c      	movs	r1, #12
    a396:	5499      	strb	r1, [r3, r2]
    a398:	f24a 6319 	movw	r3, #42521	; 0xa619
    a39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	3301      	adds	r3, #1
    a3a4:	b2da      	uxtb	r2, r3
    a3a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    a3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ae:	701a      	strb	r2, [r3, #0]
    a3b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    a3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2bff      	cmp	r3, #255	; 0xff
    a3bc:	d105      	bne.n	a3ca <send_bat+0x12e>
    a3be:	f24a 6319 	movw	r3, #42521	; 0xa619
    a3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c6:	2200      	movs	r2, #0
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d2:	220c      	movs	r2, #12
    a3d4:	701a      	strb	r2, [r3, #0]
    a3d6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3de:	220c      	movs	r2, #12
    a3e0:	701a      	strb	r2, [r3, #0]
    a3e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    a3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	461a      	mov	r2, r3
    a3ee:	f24a 6302 	movw	r3, #42498	; 0xa602
    a3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f6:	7819      	ldrb	r1, [r3, #0]
    a3f8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a400:	5499      	strb	r1, [r3, r2]
    a402:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40a:	781a      	ldrb	r2, [r3, #0]
    a40c:	f24a 6302 	movw	r3, #42498	; 0xa602
    a410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a414:	781b      	ldrb	r3, [r3, #0]
    a416:	4413      	add	r3, r2
    a418:	b2da      	uxtb	r2, r3
    a41a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a422:	701a      	strb	r2, [r3, #0]
    a424:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42c:	781a      	ldrb	r2, [r3, #0]
    a42e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	4413      	add	r3, r2
    a43a:	b2da      	uxtb	r2, r3
    a43c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a444:	701a      	strb	r2, [r3, #0]
    a446:	f24a 6319 	movw	r3, #42521	; 0xa619
    a44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	3301      	adds	r3, #1
    a452:	b2da      	uxtb	r2, r3
    a454:	f24a 6319 	movw	r3, #42521	; 0xa619
    a458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a45c:	701a      	strb	r2, [r3, #0]
    a45e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	2bff      	cmp	r3, #255	; 0xff
    a46a:	d105      	bne.n	a478 <send_bat+0x1dc>
    a46c:	f24a 6319 	movw	r3, #42521	; 0xa619
    a470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a474:	2200      	movs	r2, #0
    a476:	701a      	strb	r2, [r3, #0]
    a478:	f24a 6319 	movw	r3, #42521	; 0xa619
    a47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	461a      	mov	r2, r3
    a484:	f64a 33fc 	movw	r3, #44028	; 0xabfc
    a488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48c:	7819      	ldrb	r1, [r3, #0]
    a48e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a496:	5499      	strb	r1, [r3, r2]
    a498:	f64a 33fc 	movw	r3, #44028	; 0xabfc
    a49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a0:	781a      	ldrb	r2, [r3, #0]
    a4a2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4aa:	781b      	ldrb	r3, [r3, #0]
    a4ac:	4413      	add	r3, r2
    a4ae:	b2da      	uxtb	r2, r3
    a4b0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b8:	701a      	strb	r2, [r3, #0]
    a4ba:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c2:	781a      	ldrb	r2, [r3, #0]
    a4c4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4cc:	781b      	ldrb	r3, [r3, #0]
    a4ce:	4413      	add	r3, r2
    a4d0:	b2da      	uxtb	r2, r3
    a4d2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4da:	701a      	strb	r2, [r3, #0]
    a4dc:	f24a 6319 	movw	r3, #42521	; 0xa619
    a4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e4:	781b      	ldrb	r3, [r3, #0]
    a4e6:	3301      	adds	r3, #1
    a4e8:	b2da      	uxtb	r2, r3
    a4ea:	f24a 6319 	movw	r3, #42521	; 0xa619
    a4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f2:	701a      	strb	r2, [r3, #0]
    a4f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    a4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	2bff      	cmp	r3, #255	; 0xff
    a500:	d105      	bne.n	a50e <send_bat+0x272>
    a502:	f24a 6319 	movw	r3, #42521	; 0xa619
    a506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a50a:	2200      	movs	r2, #0
    a50c:	701a      	strb	r2, [r3, #0]
    a50e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a516:	781b      	ldrb	r3, [r3, #0]
    a518:	461a      	mov	r2, r3
    a51a:	f64a 33fc 	movw	r3, #44028	; 0xabfc
    a51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a522:	7859      	ldrb	r1, [r3, #1]
    a524:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a52c:	5499      	strb	r1, [r3, r2]
    a52e:	4bd5      	ldr	r3, [pc, #852]	; (a884 <send_bat+0x5e8>)
    a530:	781a      	ldrb	r2, [r3, #0]
    a532:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a53a:	781b      	ldrb	r3, [r3, #0]
    a53c:	4413      	add	r3, r2
    a53e:	b2da      	uxtb	r2, r3
    a540:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a548:	701a      	strb	r2, [r3, #0]
    a54a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a552:	781a      	ldrb	r2, [r3, #0]
    a554:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a55c:	781b      	ldrb	r3, [r3, #0]
    a55e:	4413      	add	r3, r2
    a560:	b2da      	uxtb	r2, r3
    a562:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a56a:	701a      	strb	r2, [r3, #0]
    a56c:	f24a 6319 	movw	r3, #42521	; 0xa619
    a570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	3301      	adds	r3, #1
    a578:	b2da      	uxtb	r2, r3
    a57a:	f24a 6319 	movw	r3, #42521	; 0xa619
    a57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a582:	701a      	strb	r2, [r3, #0]
    a584:	f24a 6319 	movw	r3, #42521	; 0xa619
    a588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	2bff      	cmp	r3, #255	; 0xff
    a590:	d105      	bne.n	a59e <send_bat+0x302>
    a592:	f24a 6319 	movw	r3, #42521	; 0xa619
    a596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a59a:	2200      	movs	r2, #0
    a59c:	701a      	strb	r2, [r3, #0]
    a59e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	461a      	mov	r2, r3
    a5aa:	f24a 6305 	movw	r3, #42501	; 0xa605
    a5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b2:	7819      	ldrb	r1, [r3, #0]
    a5b4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5bc:	5499      	strb	r1, [r3, r2]
    a5be:	f24a 6305 	movw	r3, #42501	; 0xa605
    a5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c6:	781a      	ldrb	r2, [r3, #0]
    a5c8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d0:	781b      	ldrb	r3, [r3, #0]
    a5d2:	4413      	add	r3, r2
    a5d4:	b2da      	uxtb	r2, r3
    a5d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5de:	701a      	strb	r2, [r3, #0]
    a5e0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e8:	781a      	ldrb	r2, [r3, #0]
    a5ea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	4413      	add	r3, r2
    a5f6:	b2da      	uxtb	r2, r3
    a5f8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a600:	701a      	strb	r2, [r3, #0]
    a602:	f24a 6319 	movw	r3, #42521	; 0xa619
    a606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	3301      	adds	r3, #1
    a60e:	b2da      	uxtb	r2, r3
    a610:	f24a 6319 	movw	r3, #42521	; 0xa619
    a614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a618:	701a      	strb	r2, [r3, #0]
    a61a:	f24a 6319 	movw	r3, #42521	; 0xa619
    a61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	2bff      	cmp	r3, #255	; 0xff
    a626:	d105      	bne.n	a634 <send_bat+0x398>
    a628:	f24a 6319 	movw	r3, #42521	; 0xa619
    a62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a630:	2200      	movs	r2, #0
    a632:	701a      	strb	r2, [r3, #0]
    a634:	f24a 6319 	movw	r3, #42521	; 0xa619
    a638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63c:	781b      	ldrb	r3, [r3, #0]
    a63e:	461a      	mov	r2, r3
    a640:	f64a 1386 	movw	r3, #43398	; 0xa986
    a644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a648:	7819      	ldrb	r1, [r3, #0]
    a64a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a652:	5499      	strb	r1, [r3, r2]
    a654:	f64a 1386 	movw	r3, #43398	; 0xa986
    a658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65c:	781a      	ldrb	r2, [r3, #0]
    a65e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	4413      	add	r3, r2
    a66a:	b2da      	uxtb	r2, r3
    a66c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a674:	701a      	strb	r2, [r3, #0]
    a676:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a67e:	781a      	ldrb	r2, [r3, #0]
    a680:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a688:	781b      	ldrb	r3, [r3, #0]
    a68a:	4413      	add	r3, r2
    a68c:	b2da      	uxtb	r2, r3
    a68e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a696:	701a      	strb	r2, [r3, #0]
    a698:	f24a 6319 	movw	r3, #42521	; 0xa619
    a69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	3301      	adds	r3, #1
    a6a4:	b2da      	uxtb	r2, r3
    a6a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    a6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ae:	701a      	strb	r2, [r3, #0]
    a6b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    a6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b8:	781b      	ldrb	r3, [r3, #0]
    a6ba:	2bff      	cmp	r3, #255	; 0xff
    a6bc:	d105      	bne.n	a6ca <send_bat+0x42e>
    a6be:	f24a 6319 	movw	r3, #42521	; 0xa619
    a6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c6:	2200      	movs	r2, #0
    a6c8:	701a      	strb	r2, [r3, #0]
    a6ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    a6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d2:	781b      	ldrb	r3, [r3, #0]
    a6d4:	461a      	mov	r2, r3
    a6d6:	f64a 1386 	movw	r3, #43398	; 0xa986
    a6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6de:	7859      	ldrb	r1, [r3, #1]
    a6e0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e8:	5499      	strb	r1, [r3, r2]
    a6ea:	4b67      	ldr	r3, [pc, #412]	; (a888 <send_bat+0x5ec>)
    a6ec:	781a      	ldrb	r2, [r3, #0]
    a6ee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	4413      	add	r3, r2
    a6fa:	b2da      	uxtb	r2, r3
    a6fc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a704:	701a      	strb	r2, [r3, #0]
    a706:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a70e:	781a      	ldrb	r2, [r3, #0]
    a710:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	4413      	add	r3, r2
    a71c:	b2da      	uxtb	r2, r3
    a71e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a726:	701a      	strb	r2, [r3, #0]
    a728:	f24a 6319 	movw	r3, #42521	; 0xa619
    a72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	3301      	adds	r3, #1
    a734:	b2da      	uxtb	r2, r3
    a736:	f24a 6319 	movw	r3, #42521	; 0xa619
    a73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a73e:	701a      	strb	r2, [r3, #0]
    a740:	f24a 6319 	movw	r3, #42521	; 0xa619
    a744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	2bff      	cmp	r3, #255	; 0xff
    a74c:	d105      	bne.n	a75a <send_bat+0x4be>
    a74e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a756:	2200      	movs	r2, #0
    a758:	701a      	strb	r2, [r3, #0]
    a75a:	f24a 6319 	movw	r3, #42521	; 0xa619
    a75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	461a      	mov	r2, r3
    a766:	f64a 1384 	movw	r3, #43396	; 0xa984
    a76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76e:	7819      	ldrb	r1, [r3, #0]
    a770:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a778:	5499      	strb	r1, [r3, r2]
    a77a:	f64a 1384 	movw	r3, #43396	; 0xa984
    a77e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a782:	781a      	ldrb	r2, [r3, #0]
    a784:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78c:	781b      	ldrb	r3, [r3, #0]
    a78e:	4413      	add	r3, r2
    a790:	b2da      	uxtb	r2, r3
    a792:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79a:	701a      	strb	r2, [r3, #0]
    a79c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a4:	781a      	ldrb	r2, [r3, #0]
    a7a6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ae:	781b      	ldrb	r3, [r3, #0]
    a7b0:	4413      	add	r3, r2
    a7b2:	b2da      	uxtb	r2, r3
    a7b4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7bc:	701a      	strb	r2, [r3, #0]
    a7be:	f24a 6319 	movw	r3, #42521	; 0xa619
    a7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c6:	781b      	ldrb	r3, [r3, #0]
    a7c8:	3301      	adds	r3, #1
    a7ca:	b2da      	uxtb	r2, r3
    a7cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    a7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d4:	701a      	strb	r2, [r3, #0]
    a7d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    a7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7de:	781b      	ldrb	r3, [r3, #0]
    a7e0:	2bff      	cmp	r3, #255	; 0xff
    a7e2:	d105      	bne.n	a7f0 <send_bat+0x554>
    a7e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    a7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ec:	2200      	movs	r2, #0
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    a7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	461a      	mov	r2, r3
    a7fc:	f64a 1384 	movw	r3, #43396	; 0xa984
    a800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a804:	7859      	ldrb	r1, [r3, #1]
    a806:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	5499      	strb	r1, [r3, r2]
    a810:	4b1e      	ldr	r3, [pc, #120]	; (a88c <send_bat+0x5f0>)
    a812:	781a      	ldrb	r2, [r3, #0]
    a814:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81c:	781b      	ldrb	r3, [r3, #0]
    a81e:	4413      	add	r3, r2
    a820:	b2da      	uxtb	r2, r3
    a822:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82a:	701a      	strb	r2, [r3, #0]
    a82c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a834:	781a      	ldrb	r2, [r3, #0]
    a836:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83e:	781b      	ldrb	r3, [r3, #0]
    a840:	4413      	add	r3, r2
    a842:	b2da      	uxtb	r2, r3
    a844:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84c:	701a      	strb	r2, [r3, #0]
    a84e:	f24a 6319 	movw	r3, #42521	; 0xa619
    a852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	3301      	adds	r3, #1
    a85a:	b2da      	uxtb	r2, r3
    a85c:	f24a 6319 	movw	r3, #42521	; 0xa619
    a860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a864:	701a      	strb	r2, [r3, #0]
    a866:	f24a 6319 	movw	r3, #42521	; 0xa619
    a86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	2bff      	cmp	r3, #255	; 0xff
    a872:	d10d      	bne.n	a890 <send_bat+0x5f4>
    a874:	f24a 6319 	movw	r3, #42521	; 0xa619
    a878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87c:	2200      	movs	r2, #0
    a87e:	701a      	strb	r2, [r3, #0]
    a880:	e006      	b.n	a890 <send_bat+0x5f4>
    a882:	bf00      	nop
    a884:	2000abfd 	.word	0x2000abfd
    a888:	2000a987 	.word	0x2000a987
    a88c:	2000a985 	.word	0x2000a985
    a890:	f24a 6319 	movw	r3, #42521	; 0xa619
    a894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	461a      	mov	r2, r3
    a89c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    a8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a4:	7819      	ldrb	r1, [r3, #0]
    a8a6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ae:	5499      	strb	r1, [r3, r2]
    a8b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    a8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b8:	781b      	ldrb	r3, [r3, #0]
    a8ba:	3301      	adds	r3, #1
    a8bc:	b2da      	uxtb	r2, r3
    a8be:	f24a 6319 	movw	r3, #42521	; 0xa619
    a8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c6:	701a      	strb	r2, [r3, #0]
    a8c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    a8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d0:	781b      	ldrb	r3, [r3, #0]
    a8d2:	2bff      	cmp	r3, #255	; 0xff
    a8d4:	d105      	bne.n	a8e2 <send_bat+0x646>
    a8d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    a8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8de:	2200      	movs	r2, #0
    a8e0:	701a      	strb	r2, [r3, #0]
    a8e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	461a      	mov	r2, r3
    a8ee:	f24a 731e 	movw	r3, #42782	; 0xa71e
    a8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f6:	7819      	ldrb	r1, [r3, #0]
    a8f8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a900:	5499      	strb	r1, [r3, r2]
    a902:	f24a 6319 	movw	r3, #42521	; 0xa619
    a906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90a:	781b      	ldrb	r3, [r3, #0]
    a90c:	3301      	adds	r3, #1
    a90e:	b2da      	uxtb	r2, r3
    a910:	f24a 6319 	movw	r3, #42521	; 0xa619
    a914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a918:	701a      	strb	r2, [r3, #0]
    a91a:	f24a 6319 	movw	r3, #42521	; 0xa619
    a91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	2bff      	cmp	r3, #255	; 0xff
    a926:	d105      	bne.n	a934 <send_bat+0x698>
    a928:	f24a 6319 	movw	r3, #42521	; 0xa619
    a92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a930:	2200      	movs	r2, #0
    a932:	701a      	strb	r2, [r3, #0]
    a934:	f242 0339 	movw	r3, #8249	; 0x2039
    a938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	b2db      	uxtb	r3, r3
    a940:	f003 0310 	and.w	r3, r3, #16
    a944:	2b00      	cmp	r3, #0
    a946:	d15a      	bne.n	a9fe <send_bat+0x762>
    a948:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	b2db      	uxtb	r3, r3
    a954:	461a      	mov	r2, r3
    a956:	f24a 631c 	movw	r3, #42524	; 0xa61c
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	5c9a      	ldrb	r2, [r3, r2]
    a960:	f24a 731b 	movw	r3, #42779	; 0xa71b
    a964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a968:	701a      	strb	r2, [r3, #0]
    a96a:	f24a 731c 	movw	r3, #42780	; 0xa71c
    a96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a972:	2200      	movs	r2, #0
    a974:	701a      	strb	r2, [r3, #0]
    a976:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a97e:	781b      	ldrb	r3, [r3, #0]
    a980:	b2db      	uxtb	r3, r3
    a982:	3301      	adds	r3, #1
    a984:	b2da      	uxtb	r2, r3
    a986:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	701a      	strb	r2, [r3, #0]
    a990:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	b2db      	uxtb	r3, r3
    a99c:	2bff      	cmp	r3, #255	; 0xff
    a99e:	d105      	bne.n	a9ac <send_bat+0x710>
    a9a0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    a9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a8:	2200      	movs	r2, #0
    a9aa:	701a      	strb	r2, [r3, #0]
    a9ac:	f242 0338 	movw	r3, #8248	; 0x2038
    a9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b4:	f242 0238 	movw	r2, #8248	; 0x2038
    a9b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9bc:	7812      	ldrb	r2, [r2, #0]
    a9be:	b2d2      	uxtb	r2, r2
    a9c0:	f042 0201 	orr.w	r2, r2, #1
    a9c4:	b2d2      	uxtb	r2, r2
    a9c6:	701a      	strb	r2, [r3, #0]
    a9c8:	f242 0339 	movw	r3, #8249	; 0x2039
    a9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d0:	f242 0239 	movw	r2, #8249	; 0x2039
    a9d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9d8:	7812      	ldrb	r2, [r2, #0]
    a9da:	b2d2      	uxtb	r2, r2
    a9dc:	f042 0210 	orr.w	r2, r2, #16
    a9e0:	b2d2      	uxtb	r2, r2
    a9e2:	701a      	strb	r2, [r3, #0]
    a9e4:	e00b      	b.n	a9fe <send_bat+0x762>
    a9e6:	f24a 6318 	movw	r3, #42520	; 0xa618
    a9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	3301      	adds	r3, #1
    a9f2:	b2da      	uxtb	r2, r3
    a9f4:	f24a 6318 	movw	r3, #42520	; 0xa618
    a9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fc:	701a      	strb	r2, [r3, #0]
}
    a9fe:	46bd      	mov	sp, r7
    aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa04:	4770      	bx	lr
    aa06:	bf00      	nop

0000aa08 <send_climb>:
void send_climb(void){  //2000ms
    aa08:	b480      	push	{r7}
    aa0a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    aa0c:	f24a 6311 	movw	r3, #42513	; 0xa611
    aa10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa14:	781a      	ldrb	r2, [r3, #0]
    aa16:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa1a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa1e:	fba3 1302 	umull	r1, r3, r3, r2
    aa22:	0919      	lsrs	r1, r3, #4
    aa24:	460b      	mov	r3, r1
    aa26:	009b      	lsls	r3, r3, #2
    aa28:	440b      	add	r3, r1
    aa2a:	009b      	lsls	r3, r3, #2
    aa2c:	1ad3      	subs	r3, r2, r3
    aa2e:	b2db      	uxtb	r3, r3
    aa30:	2b12      	cmp	r3, #18
    aa32:	f040 8554 	bne.w	b4de <send_climb+0xad6>
    aa36:	f24a 6319 	movw	r3, #42521	; 0xa619
    aa3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3e:	781a      	ldrb	r2, [r3, #0]
    aa40:	f24a 631a 	movw	r3, #42522	; 0xa61a
    aa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa48:	781b      	ldrb	r3, [r3, #0]
    aa4a:	b2db      	uxtb	r3, r3
    aa4c:	429a      	cmp	r2, r3
    aa4e:	d313      	bcc.n	aa78 <send_climb+0x70>
    aa50:	f24a 631a 	movw	r3, #42522	; 0xa61a
    aa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	b2db      	uxtb	r3, r3
    aa5c:	461a      	mov	r2, r3
    aa5e:	f24a 6319 	movw	r3, #42521	; 0xa619
    aa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa66:	781b      	ldrb	r3, [r3, #0]
    aa68:	1ad3      	subs	r3, r2, r3
    aa6a:	33ff      	adds	r3, #255	; 0xff
    aa6c:	2b12      	cmp	r3, #18
    aa6e:	bfd4      	ite	le
    aa70:	2300      	movle	r3, #0
    aa72:	2301      	movgt	r3, #1
    aa74:	b2db      	uxtb	r3, r3
    aa76:	e011      	b.n	aa9c <send_climb+0x94>
    aa78:	f24a 631a 	movw	r3, #42522	; 0xa61a
    aa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	b2db      	uxtb	r3, r3
    aa84:	461a      	mov	r2, r3
    aa86:	f24a 6319 	movw	r3, #42521	; 0xa619
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	1ad3      	subs	r3, r2, r3
    aa92:	2b12      	cmp	r3, #18
    aa94:	bfd4      	ite	le
    aa96:	2300      	movle	r3, #0
    aa98:	2301      	movgt	r3, #1
    aa9a:	b2db      	uxtb	r3, r3
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	f000 8512 	beq.w	b4c6 <send_climb+0xabe>
    aaa2:	f24a 6319 	movw	r3, #42521	; 0xa619
    aaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	461a      	mov	r2, r3
    aaae:	f24a 631c 	movw	r3, #42524	; 0xa61c
    aab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab6:	2105      	movs	r1, #5
    aab8:	5499      	strb	r1, [r3, r2]
    aaba:	f24a 6319 	movw	r3, #42521	; 0xa619
    aabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac2:	781b      	ldrb	r3, [r3, #0]
    aac4:	3301      	adds	r3, #1
    aac6:	b2da      	uxtb	r2, r3
    aac8:	f24a 6319 	movw	r3, #42521	; 0xa619
    aacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad0:	701a      	strb	r2, [r3, #0]
    aad2:	f24a 6319 	movw	r3, #42521	; 0xa619
    aad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aada:	781b      	ldrb	r3, [r3, #0]
    aadc:	2bff      	cmp	r3, #255	; 0xff
    aade:	d105      	bne.n	aaec <send_climb+0xe4>
    aae0:	f24a 6319 	movw	r3, #42521	; 0xa619
    aae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae8:	2200      	movs	r2, #0
    aaea:	701a      	strb	r2, [r3, #0]
    aaec:	f24a 6319 	movw	r3, #42521	; 0xa619
    aaf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	461a      	mov	r2, r3
    aaf8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    aafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab00:	210e      	movs	r1, #14
    ab02:	5499      	strb	r1, [r3, r2]
    ab04:	f24a 6319 	movw	r3, #42521	; 0xa619
    ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	3301      	adds	r3, #1
    ab10:	b2da      	uxtb	r2, r3
    ab12:	f24a 6319 	movw	r3, #42521	; 0xa619
    ab16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1a:	701a      	strb	r2, [r3, #0]
    ab1c:	f24a 6319 	movw	r3, #42521	; 0xa619
    ab20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	2bff      	cmp	r3, #255	; 0xff
    ab28:	d105      	bne.n	ab36 <send_climb+0x12e>
    ab2a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ab2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab32:	2200      	movs	r2, #0
    ab34:	701a      	strb	r2, [r3, #0]
    ab36:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ab3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab3e:	220e      	movs	r2, #14
    ab40:	701a      	strb	r2, [r3, #0]
    ab42:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ab46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4a:	220e      	movs	r2, #14
    ab4c:	701a      	strb	r2, [r3, #0]
    ab4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ab52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	461a      	mov	r2, r3
    ab5a:	f64a 134c 	movw	r3, #43340	; 0xa94c
    ab5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab62:	7819      	ldrb	r1, [r3, #0]
    ab64:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ab68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab6c:	5499      	strb	r1, [r3, r2]
    ab6e:	f64a 134c 	movw	r3, #43340	; 0xa94c
    ab72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab76:	781a      	ldrb	r2, [r3, #0]
    ab78:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ab7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab80:	781b      	ldrb	r3, [r3, #0]
    ab82:	4413      	add	r3, r2
    ab84:	b2da      	uxtb	r2, r3
    ab86:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ab8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	781a      	ldrb	r2, [r3, #0]
    ab9a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ab9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba2:	781b      	ldrb	r3, [r3, #0]
    aba4:	4413      	add	r3, r2
    aba6:	b2da      	uxtb	r2, r3
    aba8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    abac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f24a 6319 	movw	r3, #42521	; 0xa619
    abb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	3301      	adds	r3, #1
    abbe:	b2da      	uxtb	r2, r3
    abc0:	f24a 6319 	movw	r3, #42521	; 0xa619
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	f24a 6319 	movw	r3, #42521	; 0xa619
    abce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	2bff      	cmp	r3, #255	; 0xff
    abd6:	d105      	bne.n	abe4 <send_climb+0x1dc>
    abd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	2200      	movs	r2, #0
    abe2:	701a      	strb	r2, [r3, #0]
    abe4:	f24a 6319 	movw	r3, #42521	; 0xa619
    abe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abec:	781b      	ldrb	r3, [r3, #0]
    abee:	461a      	mov	r2, r3
    abf0:	f64a 134c 	movw	r3, #43340	; 0xa94c
    abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf8:	7859      	ldrb	r1, [r3, #1]
    abfa:	f24a 631c 	movw	r3, #42524	; 0xa61c
    abfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac02:	5499      	strb	r1, [r3, r2]
    ac04:	4bd3      	ldr	r3, [pc, #844]	; (af54 <send_climb+0x54c>)
    ac06:	781a      	ldrb	r2, [r3, #0]
    ac08:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ac0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac10:	781b      	ldrb	r3, [r3, #0]
    ac12:	4413      	add	r3, r2
    ac14:	b2da      	uxtb	r2, r3
    ac16:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ac1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1e:	701a      	strb	r2, [r3, #0]
    ac20:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ac24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac28:	781a      	ldrb	r2, [r3, #0]
    ac2a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ac2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	4413      	add	r3, r2
    ac36:	b2da      	uxtb	r2, r3
    ac38:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ac3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac40:	701a      	strb	r2, [r3, #0]
    ac42:	f24a 6319 	movw	r3, #42521	; 0xa619
    ac46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4a:	781b      	ldrb	r3, [r3, #0]
    ac4c:	3301      	adds	r3, #1
    ac4e:	b2da      	uxtb	r2, r3
    ac50:	f24a 6319 	movw	r3, #42521	; 0xa619
    ac54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac58:	701a      	strb	r2, [r3, #0]
    ac5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ac5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac62:	781b      	ldrb	r3, [r3, #0]
    ac64:	2bff      	cmp	r3, #255	; 0xff
    ac66:	d105      	bne.n	ac74 <send_climb+0x26c>
    ac68:	f24a 6319 	movw	r3, #42521	; 0xa619
    ac6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac70:	2200      	movs	r2, #0
    ac72:	701a      	strb	r2, [r3, #0]
    ac74:	f24a 6319 	movw	r3, #42521	; 0xa619
    ac78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7c:	781b      	ldrb	r3, [r3, #0]
    ac7e:	461a      	mov	r2, r3
    ac80:	f64a 1360 	movw	r3, #43360	; 0xa960
    ac84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac88:	7819      	ldrb	r1, [r3, #0]
    ac8a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ac8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac92:	5499      	strb	r1, [r3, r2]
    ac94:	f64a 1360 	movw	r3, #43360	; 0xa960
    ac98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac9c:	781a      	ldrb	r2, [r3, #0]
    ac9e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    aca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	4413      	add	r3, r2
    acaa:	b2da      	uxtb	r2, r3
    acac:	f24a 731d 	movw	r3, #42781	; 0xa71d
    acb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb4:	701a      	strb	r2, [r3, #0]
    acb6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    acba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbe:	781a      	ldrb	r2, [r3, #0]
    acc0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	4413      	add	r3, r2
    accc:	b2da      	uxtb	r2, r3
    acce:	f24a 731e 	movw	r3, #42782	; 0xa71e
    acd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	3301      	adds	r3, #1
    ace4:	b2da      	uxtb	r2, r3
    ace6:	f24a 6319 	movw	r3, #42521	; 0xa619
    acea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acee:	701a      	strb	r2, [r3, #0]
    acf0:	f24a 6319 	movw	r3, #42521	; 0xa619
    acf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	2bff      	cmp	r3, #255	; 0xff
    acfc:	d105      	bne.n	ad0a <send_climb+0x302>
    acfe:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad06:	2200      	movs	r2, #0
    ad08:	701a      	strb	r2, [r3, #0]
    ad0a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	461a      	mov	r2, r3
    ad16:	f64a 1360 	movw	r3, #43360	; 0xa960
    ad1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad1e:	7859      	ldrb	r1, [r3, #1]
    ad20:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ad24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad28:	5499      	strb	r1, [r3, r2]
    ad2a:	4b8b      	ldr	r3, [pc, #556]	; (af58 <send_climb+0x550>)
    ad2c:	781a      	ldrb	r2, [r3, #0]
    ad2e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ad32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad36:	781b      	ldrb	r3, [r3, #0]
    ad38:	4413      	add	r3, r2
    ad3a:	b2da      	uxtb	r2, r3
    ad3c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ad40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad44:	701a      	strb	r2, [r3, #0]
    ad46:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ad4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad4e:	781a      	ldrb	r2, [r3, #0]
    ad50:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ad54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	4413      	add	r3, r2
    ad5c:	b2da      	uxtb	r2, r3
    ad5e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ad62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad66:	701a      	strb	r2, [r3, #0]
    ad68:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad70:	781b      	ldrb	r3, [r3, #0]
    ad72:	3301      	adds	r3, #1
    ad74:	b2da      	uxtb	r2, r3
    ad76:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad7e:	701a      	strb	r2, [r3, #0]
    ad80:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad88:	781b      	ldrb	r3, [r3, #0]
    ad8a:	2bff      	cmp	r3, #255	; 0xff
    ad8c:	d105      	bne.n	ad9a <send_climb+0x392>
    ad8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad96:	2200      	movs	r2, #0
    ad98:	701a      	strb	r2, [r3, #0]
    ad9a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ad9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	461a      	mov	r2, r3
    ada6:	f64a 1360 	movw	r3, #43360	; 0xa960
    adaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adae:	7899      	ldrb	r1, [r3, #2]
    adb0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    adb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb8:	5499      	strb	r1, [r3, r2]
    adba:	4b68      	ldr	r3, [pc, #416]	; (af5c <send_climb+0x554>)
    adbc:	781a      	ldrb	r2, [r3, #0]
    adbe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    adc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	4413      	add	r3, r2
    adca:	b2da      	uxtb	r2, r3
    adcc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    add0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add4:	701a      	strb	r2, [r3, #0]
    add6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    adda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adde:	781a      	ldrb	r2, [r3, #0]
    ade0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	4413      	add	r3, r2
    adec:	b2da      	uxtb	r2, r3
    adee:	f24a 731e 	movw	r3, #42782	; 0xa71e
    adf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf6:	701a      	strb	r2, [r3, #0]
    adf8:	f24a 6319 	movw	r3, #42521	; 0xa619
    adfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	3301      	adds	r3, #1
    ae04:	b2da      	uxtb	r2, r3
    ae06:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0e:	701a      	strb	r2, [r3, #0]
    ae10:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae18:	781b      	ldrb	r3, [r3, #0]
    ae1a:	2bff      	cmp	r3, #255	; 0xff
    ae1c:	d105      	bne.n	ae2a <send_climb+0x422>
    ae1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae26:	2200      	movs	r2, #0
    ae28:	701a      	strb	r2, [r3, #0]
    ae2a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	461a      	mov	r2, r3
    ae36:	f64a 1360 	movw	r3, #43360	; 0xa960
    ae3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3e:	78d9      	ldrb	r1, [r3, #3]
    ae40:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ae44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae48:	5499      	strb	r1, [r3, r2]
    ae4a:	4b45      	ldr	r3, [pc, #276]	; (af60 <send_climb+0x558>)
    ae4c:	781a      	ldrb	r2, [r3, #0]
    ae4e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ae52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	4413      	add	r3, r2
    ae5a:	b2da      	uxtb	r2, r3
    ae5c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ae60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae64:	701a      	strb	r2, [r3, #0]
    ae66:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ae6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae6e:	781a      	ldrb	r2, [r3, #0]
    ae70:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ae74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	4413      	add	r3, r2
    ae7c:	b2da      	uxtb	r2, r3
    ae7e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ae82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae86:	701a      	strb	r2, [r3, #0]
    ae88:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	3301      	adds	r3, #1
    ae94:	b2da      	uxtb	r2, r3
    ae96:	f24a 6319 	movw	r3, #42521	; 0xa619
    ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	f24a 6319 	movw	r3, #42521	; 0xa619
    aea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea8:	781b      	ldrb	r3, [r3, #0]
    aeaa:	2bff      	cmp	r3, #255	; 0xff
    aeac:	d105      	bne.n	aeba <send_climb+0x4b2>
    aeae:	f24a 6319 	movw	r3, #42521	; 0xa619
    aeb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb6:	2200      	movs	r2, #0
    aeb8:	701a      	strb	r2, [r3, #0]
    aeba:	f24a 6319 	movw	r3, #42521	; 0xa619
    aebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec2:	781b      	ldrb	r3, [r3, #0]
    aec4:	461a      	mov	r2, r3
    aec6:	f64a 1368 	movw	r3, #43368	; 0xa968
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	7819      	ldrb	r1, [r3, #0]
    aed0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed8:	5499      	strb	r1, [r3, r2]
    aeda:	f64a 1368 	movw	r3, #43368	; 0xa968
    aede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee2:	781a      	ldrb	r2, [r3, #0]
    aee4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    aee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	4413      	add	r3, r2
    aef0:	b2da      	uxtb	r2, r3
    aef2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    aef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefa:	701a      	strb	r2, [r3, #0]
    aefc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    af00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af04:	781a      	ldrb	r2, [r3, #0]
    af06:	f24a 731d 	movw	r3, #42781	; 0xa71d
    af0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	4413      	add	r3, r2
    af12:	b2da      	uxtb	r2, r3
    af14:	f24a 731e 	movw	r3, #42782	; 0xa71e
    af18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af1c:	701a      	strb	r2, [r3, #0]
    af1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    af22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	3301      	adds	r3, #1
    af2a:	b2da      	uxtb	r2, r3
    af2c:	f24a 6319 	movw	r3, #42521	; 0xa619
    af30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af34:	701a      	strb	r2, [r3, #0]
    af36:	f24a 6319 	movw	r3, #42521	; 0xa619
    af3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	2bff      	cmp	r3, #255	; 0xff
    af42:	d10f      	bne.n	af64 <send_climb+0x55c>
    af44:	f24a 6319 	movw	r3, #42521	; 0xa619
    af48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af4c:	2200      	movs	r2, #0
    af4e:	701a      	strb	r2, [r3, #0]
    af50:	e008      	b.n	af64 <send_climb+0x55c>
    af52:	bf00      	nop
    af54:	2000a94d 	.word	0x2000a94d
    af58:	2000a961 	.word	0x2000a961
    af5c:	2000a962 	.word	0x2000a962
    af60:	2000a963 	.word	0x2000a963
    af64:	f24a 6319 	movw	r3, #42521	; 0xa619
    af68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6c:	781b      	ldrb	r3, [r3, #0]
    af6e:	461a      	mov	r2, r3
    af70:	f64a 1368 	movw	r3, #43368	; 0xa968
    af74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af78:	7859      	ldrb	r1, [r3, #1]
    af7a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    af7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af82:	5499      	strb	r1, [r3, r2]
    af84:	4bd1      	ldr	r3, [pc, #836]	; (b2cc <send_climb+0x8c4>)
    af86:	781a      	ldrb	r2, [r3, #0]
    af88:	f24a 731d 	movw	r3, #42781	; 0xa71d
    af8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	4413      	add	r3, r2
    af94:	b2da      	uxtb	r2, r3
    af96:	f24a 731d 	movw	r3, #42781	; 0xa71d
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	701a      	strb	r2, [r3, #0]
    afa0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa8:	781a      	ldrb	r2, [r3, #0]
    afaa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    afae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb2:	781b      	ldrb	r3, [r3, #0]
    afb4:	4413      	add	r3, r2
    afb6:	b2da      	uxtb	r2, r3
    afb8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	701a      	strb	r2, [r3, #0]
    afc2:	f24a 6319 	movw	r3, #42521	; 0xa619
    afc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	3301      	adds	r3, #1
    afce:	b2da      	uxtb	r2, r3
    afd0:	f24a 6319 	movw	r3, #42521	; 0xa619
    afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd8:	701a      	strb	r2, [r3, #0]
    afda:	f24a 6319 	movw	r3, #42521	; 0xa619
    afde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	2bff      	cmp	r3, #255	; 0xff
    afe6:	d105      	bne.n	aff4 <send_climb+0x5ec>
    afe8:	f24a 6319 	movw	r3, #42521	; 0xa619
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	2200      	movs	r2, #0
    aff2:	701a      	strb	r2, [r3, #0]
    aff4:	f24a 6319 	movw	r3, #42521	; 0xa619
    aff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affc:	781b      	ldrb	r3, [r3, #0]
    affe:	461a      	mov	r2, r3
    b000:	f64a 1368 	movw	r3, #43368	; 0xa968
    b004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b008:	7899      	ldrb	r1, [r3, #2]
    b00a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b012:	5499      	strb	r1, [r3, r2]
    b014:	4bae      	ldr	r3, [pc, #696]	; (b2d0 <send_climb+0x8c8>)
    b016:	781a      	ldrb	r2, [r3, #0]
    b018:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	4413      	add	r3, r2
    b024:	b2da      	uxtb	r2, r3
    b026:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	701a      	strb	r2, [r3, #0]
    b030:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	781a      	ldrb	r2, [r3, #0]
    b03a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b042:	781b      	ldrb	r3, [r3, #0]
    b044:	4413      	add	r3, r2
    b046:	b2da      	uxtb	r2, r3
    b048:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	701a      	strb	r2, [r3, #0]
    b052:	f24a 6319 	movw	r3, #42521	; 0xa619
    b056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	3301      	adds	r3, #1
    b05e:	b2da      	uxtb	r2, r3
    b060:	f24a 6319 	movw	r3, #42521	; 0xa619
    b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b068:	701a      	strb	r2, [r3, #0]
    b06a:	f24a 6319 	movw	r3, #42521	; 0xa619
    b06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b072:	781b      	ldrb	r3, [r3, #0]
    b074:	2bff      	cmp	r3, #255	; 0xff
    b076:	d105      	bne.n	b084 <send_climb+0x67c>
    b078:	f24a 6319 	movw	r3, #42521	; 0xa619
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	2200      	movs	r2, #0
    b082:	701a      	strb	r2, [r3, #0]
    b084:	f24a 6319 	movw	r3, #42521	; 0xa619
    b088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	461a      	mov	r2, r3
    b090:	f64a 1368 	movw	r3, #43368	; 0xa968
    b094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b098:	78d9      	ldrb	r1, [r3, #3]
    b09a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a2:	5499      	strb	r1, [r3, r2]
    b0a4:	4b8b      	ldr	r3, [pc, #556]	; (b2d4 <send_climb+0x8cc>)
    b0a6:	781a      	ldrb	r2, [r3, #0]
    b0a8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	4413      	add	r3, r2
    b0b4:	b2da      	uxtb	r2, r3
    b0b6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0be:	701a      	strb	r2, [r3, #0]
    b0c0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c8:	781a      	ldrb	r2, [r3, #0]
    b0ca:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	4413      	add	r3, r2
    b0d6:	b2da      	uxtb	r2, r3
    b0d8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e0:	701a      	strb	r2, [r3, #0]
    b0e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ea:	781b      	ldrb	r3, [r3, #0]
    b0ec:	3301      	adds	r3, #1
    b0ee:	b2da      	uxtb	r2, r3
    b0f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    b0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f8:	701a      	strb	r2, [r3, #0]
    b0fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    b0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b102:	781b      	ldrb	r3, [r3, #0]
    b104:	2bff      	cmp	r3, #255	; 0xff
    b106:	d105      	bne.n	b114 <send_climb+0x70c>
    b108:	f24a 6319 	movw	r3, #42521	; 0xa619
    b10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b110:	2200      	movs	r2, #0
    b112:	701a      	strb	r2, [r3, #0]
    b114:	f24a 6319 	movw	r3, #42521	; 0xa619
    b118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	461a      	mov	r2, r3
    b120:	f248 1398 	movw	r3, #33176	; 0x8198
    b124:	f2c0 0301 	movt	r3, #1
    b128:	7819      	ldrb	r1, [r3, #0]
    b12a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b132:	5499      	strb	r1, [r3, r2]
    b134:	f248 1398 	movw	r3, #33176	; 0x8198
    b138:	f2c0 0301 	movt	r3, #1
    b13c:	781a      	ldrb	r2, [r3, #0]
    b13e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	4413      	add	r3, r2
    b14a:	b2da      	uxtb	r2, r3
    b14c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b154:	701a      	strb	r2, [r3, #0]
    b156:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b15e:	781a      	ldrb	r2, [r3, #0]
    b160:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b168:	781b      	ldrb	r3, [r3, #0]
    b16a:	4413      	add	r3, r2
    b16c:	b2da      	uxtb	r2, r3
    b16e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b176:	701a      	strb	r2, [r3, #0]
    b178:	f24a 6319 	movw	r3, #42521	; 0xa619
    b17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	3301      	adds	r3, #1
    b184:	b2da      	uxtb	r2, r3
    b186:	f24a 6319 	movw	r3, #42521	; 0xa619
    b18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18e:	701a      	strb	r2, [r3, #0]
    b190:	f24a 6319 	movw	r3, #42521	; 0xa619
    b194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b198:	781b      	ldrb	r3, [r3, #0]
    b19a:	2bff      	cmp	r3, #255	; 0xff
    b19c:	d105      	bne.n	b1aa <send_climb+0x7a2>
    b19e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a6:	2200      	movs	r2, #0
    b1a8:	701a      	strb	r2, [r3, #0]
    b1aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    b1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	461a      	mov	r2, r3
    b1b6:	f248 1398 	movw	r3, #33176	; 0x8198
    b1ba:	f2c0 0301 	movt	r3, #1
    b1be:	7859      	ldrb	r1, [r3, #1]
    b1c0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c8:	5499      	strb	r1, [r3, r2]
    b1ca:	4b43      	ldr	r3, [pc, #268]	; (b2d8 <send_climb+0x8d0>)
    b1cc:	781a      	ldrb	r2, [r3, #0]
    b1ce:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	4413      	add	r3, r2
    b1da:	b2da      	uxtb	r2, r3
    b1dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e4:	701a      	strb	r2, [r3, #0]
    b1e6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ee:	781a      	ldrb	r2, [r3, #0]
    b1f0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f8:	781b      	ldrb	r3, [r3, #0]
    b1fa:	4413      	add	r3, r2
    b1fc:	b2da      	uxtb	r2, r3
    b1fe:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	701a      	strb	r2, [r3, #0]
    b208:	f24a 6319 	movw	r3, #42521	; 0xa619
    b20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	3301      	adds	r3, #1
    b214:	b2da      	uxtb	r2, r3
    b216:	f24a 6319 	movw	r3, #42521	; 0xa619
    b21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21e:	701a      	strb	r2, [r3, #0]
    b220:	f24a 6319 	movw	r3, #42521	; 0xa619
    b224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b228:	781b      	ldrb	r3, [r3, #0]
    b22a:	2bff      	cmp	r3, #255	; 0xff
    b22c:	d105      	bne.n	b23a <send_climb+0x832>
    b22e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b236:	2200      	movs	r2, #0
    b238:	701a      	strb	r2, [r3, #0]
    b23a:	f24a 6319 	movw	r3, #42521	; 0xa619
    b23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	461a      	mov	r2, r3
    b246:	f248 1398 	movw	r3, #33176	; 0x8198
    b24a:	f2c0 0301 	movt	r3, #1
    b24e:	7899      	ldrb	r1, [r3, #2]
    b250:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b258:	5499      	strb	r1, [r3, r2]
    b25a:	4b20      	ldr	r3, [pc, #128]	; (b2dc <send_climb+0x8d4>)
    b25c:	781a      	ldrb	r2, [r3, #0]
    b25e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b266:	781b      	ldrb	r3, [r3, #0]
    b268:	4413      	add	r3, r2
    b26a:	b2da      	uxtb	r2, r3
    b26c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b274:	701a      	strb	r2, [r3, #0]
    b276:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27e:	781a      	ldrb	r2, [r3, #0]
    b280:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	4413      	add	r3, r2
    b28c:	b2da      	uxtb	r2, r3
    b28e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b296:	701a      	strb	r2, [r3, #0]
    b298:	f24a 6319 	movw	r3, #42521	; 0xa619
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	3301      	adds	r3, #1
    b2a4:	b2da      	uxtb	r2, r3
    b2a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ae:	701a      	strb	r2, [r3, #0]
    b2b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    b2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	2bff      	cmp	r3, #255	; 0xff
    b2bc:	d110      	bne.n	b2e0 <send_climb+0x8d8>
    b2be:	f24a 6319 	movw	r3, #42521	; 0xa619
    b2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c6:	2200      	movs	r2, #0
    b2c8:	701a      	strb	r2, [r3, #0]
    b2ca:	e009      	b.n	b2e0 <send_climb+0x8d8>
    b2cc:	2000a969 	.word	0x2000a969
    b2d0:	2000a96a 	.word	0x2000a96a
    b2d4:	2000a96b 	.word	0x2000a96b
    b2d8:	00018199 	.word	0x00018199
    b2dc:	0001819a 	.word	0x0001819a
    b2e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	461a      	mov	r2, r3
    b2ec:	f248 1398 	movw	r3, #33176	; 0x8198
    b2f0:	f2c0 0301 	movt	r3, #1
    b2f4:	78d9      	ldrb	r1, [r3, #3]
    b2f6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fe:	5499      	strb	r1, [r3, r2]
    b300:	4b79      	ldr	r3, [pc, #484]	; (b4e8 <send_climb+0xae0>)
    b302:	781a      	ldrb	r2, [r3, #0]
    b304:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30c:	781b      	ldrb	r3, [r3, #0]
    b30e:	4413      	add	r3, r2
    b310:	b2da      	uxtb	r2, r3
    b312:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b31a:	701a      	strb	r2, [r3, #0]
    b31c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b324:	781a      	ldrb	r2, [r3, #0]
    b326:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b32e:	781b      	ldrb	r3, [r3, #0]
    b330:	4413      	add	r3, r2
    b332:	b2da      	uxtb	r2, r3
    b334:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33c:	701a      	strb	r2, [r3, #0]
    b33e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	3301      	adds	r3, #1
    b34a:	b2da      	uxtb	r2, r3
    b34c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b354:	701a      	strb	r2, [r3, #0]
    b356:	f24a 6319 	movw	r3, #42521	; 0xa619
    b35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	2bff      	cmp	r3, #255	; 0xff
    b362:	d105      	bne.n	b370 <send_climb+0x968>
    b364:	f24a 6319 	movw	r3, #42521	; 0xa619
    b368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36c:	2200      	movs	r2, #0
    b36e:	701a      	strb	r2, [r3, #0]
    b370:	f24a 6319 	movw	r3, #42521	; 0xa619
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	461a      	mov	r2, r3
    b37c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b384:	7819      	ldrb	r1, [r3, #0]
    b386:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b38e:	5499      	strb	r1, [r3, r2]
    b390:	f24a 6319 	movw	r3, #42521	; 0xa619
    b394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b398:	781b      	ldrb	r3, [r3, #0]
    b39a:	3301      	adds	r3, #1
    b39c:	b2da      	uxtb	r2, r3
    b39e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a6:	701a      	strb	r2, [r3, #0]
    b3a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	2bff      	cmp	r3, #255	; 0xff
    b3b4:	d105      	bne.n	b3c2 <send_climb+0x9ba>
    b3b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3be:	2200      	movs	r2, #0
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	461a      	mov	r2, r3
    b3ce:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d6:	7819      	ldrb	r1, [r3, #0]
    b3d8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e0:	5499      	strb	r1, [r3, r2]
    b3e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ea:	781b      	ldrb	r3, [r3, #0]
    b3ec:	3301      	adds	r3, #1
    b3ee:	b2da      	uxtb	r2, r3
    b3f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f8:	701a      	strb	r2, [r3, #0]
    b3fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    b3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b402:	781b      	ldrb	r3, [r3, #0]
    b404:	2bff      	cmp	r3, #255	; 0xff
    b406:	d105      	bne.n	b414 <send_climb+0xa0c>
    b408:	f24a 6319 	movw	r3, #42521	; 0xa619
    b40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b410:	2200      	movs	r2, #0
    b412:	701a      	strb	r2, [r3, #0]
    b414:	f242 0339 	movw	r3, #8249	; 0x2039
    b418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41c:	781b      	ldrb	r3, [r3, #0]
    b41e:	b2db      	uxtb	r3, r3
    b420:	f003 0310 	and.w	r3, r3, #16
    b424:	2b00      	cmp	r3, #0
    b426:	d15a      	bne.n	b4de <send_climb+0xad6>
    b428:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b430:	781b      	ldrb	r3, [r3, #0]
    b432:	b2db      	uxtb	r3, r3
    b434:	461a      	mov	r2, r3
    b436:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43e:	5c9a      	ldrb	r2, [r3, r2]
    b440:	f24a 731b 	movw	r3, #42779	; 0xa71b
    b444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b448:	701a      	strb	r2, [r3, #0]
    b44a:	f24a 731c 	movw	r3, #42780	; 0xa71c
    b44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b452:	2200      	movs	r2, #0
    b454:	701a      	strb	r2, [r3, #0]
    b456:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	b2db      	uxtb	r3, r3
    b462:	3301      	adds	r3, #1
    b464:	b2da      	uxtb	r2, r3
    b466:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46e:	701a      	strb	r2, [r3, #0]
    b470:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	b2db      	uxtb	r3, r3
    b47c:	2bff      	cmp	r3, #255	; 0xff
    b47e:	d105      	bne.n	b48c <send_climb+0xa84>
    b480:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b488:	2200      	movs	r2, #0
    b48a:	701a      	strb	r2, [r3, #0]
    b48c:	f242 0338 	movw	r3, #8248	; 0x2038
    b490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b494:	f242 0238 	movw	r2, #8248	; 0x2038
    b498:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b49c:	7812      	ldrb	r2, [r2, #0]
    b49e:	b2d2      	uxtb	r2, r2
    b4a0:	f042 0201 	orr.w	r2, r2, #1
    b4a4:	b2d2      	uxtb	r2, r2
    b4a6:	701a      	strb	r2, [r3, #0]
    b4a8:	f242 0339 	movw	r3, #8249	; 0x2039
    b4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b0:	f242 0239 	movw	r2, #8249	; 0x2039
    b4b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b4b8:	7812      	ldrb	r2, [r2, #0]
    b4ba:	b2d2      	uxtb	r2, r2
    b4bc:	f042 0210 	orr.w	r2, r2, #16
    b4c0:	b2d2      	uxtb	r2, r2
    b4c2:	701a      	strb	r2, [r3, #0]
    b4c4:	e00b      	b.n	b4de <send_climb+0xad6>
    b4c6:	f24a 6318 	movw	r3, #42520	; 0xa618
    b4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ce:	781b      	ldrb	r3, [r3, #0]
    b4d0:	3301      	adds	r3, #1
    b4d2:	b2da      	uxtb	r2, r3
    b4d4:	f24a 6318 	movw	r3, #42520	; 0xa618
    b4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4dc:	701a      	strb	r2, [r3, #0]
}
    b4de:	46bd      	mov	sp, r7
    b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4e4:	4770      	bx	lr
    b4e6:	bf00      	nop
    b4e8:	0001819b 	.word	0x0001819b

0000b4ec <send_mode>:
void send_mode(void){  //5000ms
    b4ec:	b480      	push	{r7}
    b4ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b4f0:	f24a 6311 	movw	r3, #42513	; 0xa611
    b4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f8:	781a      	ldrb	r2, [r3, #0]
    b4fa:	f248 531f 	movw	r3, #34079	; 0x851f
    b4fe:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b502:	fba3 1302 	umull	r1, r3, r3, r2
    b506:	091b      	lsrs	r3, r3, #4
    b508:	2132      	movs	r1, #50	; 0x32
    b50a:	fb01 f303 	mul.w	r3, r1, r3
    b50e:	1ad3      	subs	r3, r2, r3
    b510:	b2db      	uxtb	r3, r3
    b512:	2b09      	cmp	r3, #9
    b514:	f040 82ba 	bne.w	ba8c <send_mode+0x5a0>
    b518:	f24a 6319 	movw	r3, #42521	; 0xa619
    b51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b520:	781a      	ldrb	r2, [r3, #0]
    b522:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	b2db      	uxtb	r3, r3
    b52e:	429a      	cmp	r2, r3
    b530:	d313      	bcc.n	b55a <send_mode+0x6e>
    b532:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b53a:	781b      	ldrb	r3, [r3, #0]
    b53c:	b2db      	uxtb	r3, r3
    b53e:	461a      	mov	r2, r3
    b540:	f24a 6319 	movw	r3, #42521	; 0xa619
    b544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b548:	781b      	ldrb	r3, [r3, #0]
    b54a:	1ad3      	subs	r3, r2, r3
    b54c:	33ff      	adds	r3, #255	; 0xff
    b54e:	2b09      	cmp	r3, #9
    b550:	bfd4      	ite	le
    b552:	2300      	movle	r3, #0
    b554:	2301      	movgt	r3, #1
    b556:	b2db      	uxtb	r3, r3
    b558:	e011      	b.n	b57e <send_mode+0x92>
    b55a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	b2db      	uxtb	r3, r3
    b566:	461a      	mov	r2, r3
    b568:	f24a 6319 	movw	r3, #42521	; 0xa619
    b56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	1ad3      	subs	r3, r2, r3
    b574:	2b09      	cmp	r3, #9
    b576:	bfd4      	ite	le
    b578:	2300      	movle	r3, #0
    b57a:	2301      	movgt	r3, #1
    b57c:	b2db      	uxtb	r3, r3
    b57e:	2b00      	cmp	r3, #0
    b580:	f000 8278 	beq.w	ba74 <send_mode+0x588>
    b584:	f24a 6319 	movw	r3, #42521	; 0xa619
    b588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58c:	781b      	ldrb	r3, [r3, #0]
    b58e:	461a      	mov	r2, r3
    b590:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b598:	2105      	movs	r1, #5
    b59a:	5499      	strb	r1, [r3, r2]
    b59c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a4:	781b      	ldrb	r3, [r3, #0]
    b5a6:	3301      	adds	r3, #1
    b5a8:	b2da      	uxtb	r2, r3
    b5aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b2:	701a      	strb	r2, [r3, #0]
    b5b4:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	2bff      	cmp	r3, #255	; 0xff
    b5c0:	d105      	bne.n	b5ce <send_mode+0xe2>
    b5c2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ca:	2200      	movs	r2, #0
    b5cc:	701a      	strb	r2, [r3, #0]
    b5ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	461a      	mov	r2, r3
    b5da:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e2:	210b      	movs	r1, #11
    b5e4:	5499      	strb	r1, [r3, r2]
    b5e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	3301      	adds	r3, #1
    b5f2:	b2da      	uxtb	r2, r3
    b5f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    b5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5fc:	701a      	strb	r2, [r3, #0]
    b5fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    b602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	2bff      	cmp	r3, #255	; 0xff
    b60a:	d105      	bne.n	b618 <send_mode+0x12c>
    b60c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b614:	2200      	movs	r2, #0
    b616:	701a      	strb	r2, [r3, #0]
    b618:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b620:	220b      	movs	r2, #11
    b622:	701a      	strb	r2, [r3, #0]
    b624:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62c:	220b      	movs	r2, #11
    b62e:	701a      	strb	r2, [r3, #0]
    b630:	f24a 6319 	movw	r3, #42521	; 0xa619
    b634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	461a      	mov	r2, r3
    b63c:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    b640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b644:	7819      	ldrb	r1, [r3, #0]
    b646:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64e:	5499      	strb	r1, [r3, r2]
    b650:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b658:	781a      	ldrb	r2, [r3, #0]
    b65a:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    b65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	4413      	add	r3, r2
    b666:	b2da      	uxtb	r2, r3
    b668:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b670:	701a      	strb	r2, [r3, #0]
    b672:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b67a:	781a      	ldrb	r2, [r3, #0]
    b67c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	4413      	add	r3, r2
    b688:	b2da      	uxtb	r2, r3
    b68a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b692:	701a      	strb	r2, [r3, #0]
    b694:	f24a 6319 	movw	r3, #42521	; 0xa619
    b698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	3301      	adds	r3, #1
    b6a0:	b2da      	uxtb	r2, r3
    b6a2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6aa:	701a      	strb	r2, [r3, #0]
    b6ac:	f24a 6319 	movw	r3, #42521	; 0xa619
    b6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b4:	781b      	ldrb	r3, [r3, #0]
    b6b6:	2bff      	cmp	r3, #255	; 0xff
    b6b8:	d105      	bne.n	b6c6 <send_mode+0x1da>
    b6ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    b6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c2:	2200      	movs	r2, #0
    b6c4:	701a      	strb	r2, [r3, #0]
    b6c6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	461a      	mov	r2, r3
    b6d2:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    b6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6da:	7819      	ldrb	r1, [r3, #0]
    b6dc:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e4:	5499      	strb	r1, [r3, r2]
    b6e6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ee:	781a      	ldrb	r2, [r3, #0]
    b6f0:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    b6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	4413      	add	r3, r2
    b6fc:	b2da      	uxtb	r2, r3
    b6fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b706:	701a      	strb	r2, [r3, #0]
    b708:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b710:	781a      	ldrb	r2, [r3, #0]
    b712:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b71a:	781b      	ldrb	r3, [r3, #0]
    b71c:	4413      	add	r3, r2
    b71e:	b2da      	uxtb	r2, r3
    b720:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b728:	701a      	strb	r2, [r3, #0]
    b72a:	f24a 6319 	movw	r3, #42521	; 0xa619
    b72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b732:	781b      	ldrb	r3, [r3, #0]
    b734:	3301      	adds	r3, #1
    b736:	b2da      	uxtb	r2, r3
    b738:	f24a 6319 	movw	r3, #42521	; 0xa619
    b73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b740:	701a      	strb	r2, [r3, #0]
    b742:	f24a 6319 	movw	r3, #42521	; 0xa619
    b746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b74a:	781b      	ldrb	r3, [r3, #0]
    b74c:	2bff      	cmp	r3, #255	; 0xff
    b74e:	d105      	bne.n	b75c <send_mode+0x270>
    b750:	f24a 6319 	movw	r3, #42521	; 0xa619
    b754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b758:	2200      	movs	r2, #0
    b75a:	701a      	strb	r2, [r3, #0]
    b75c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b764:	781b      	ldrb	r3, [r3, #0]
    b766:	461a      	mov	r2, r3
    b768:	f64a 432c 	movw	r3, #44076	; 0xac2c
    b76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b770:	7819      	ldrb	r1, [r3, #0]
    b772:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b77a:	5499      	strb	r1, [r3, r2]
    b77c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b784:	781a      	ldrb	r2, [r3, #0]
    b786:	f64a 432c 	movw	r3, #44076	; 0xac2c
    b78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b78e:	781b      	ldrb	r3, [r3, #0]
    b790:	4413      	add	r3, r2
    b792:	b2da      	uxtb	r2, r3
    b794:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b79c:	701a      	strb	r2, [r3, #0]
    b79e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a6:	781a      	ldrb	r2, [r3, #0]
    b7a8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b0:	781b      	ldrb	r3, [r3, #0]
    b7b2:	4413      	add	r3, r2
    b7b4:	b2da      	uxtb	r2, r3
    b7b6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7be:	701a      	strb	r2, [r3, #0]
    b7c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    b7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c8:	781b      	ldrb	r3, [r3, #0]
    b7ca:	3301      	adds	r3, #1
    b7cc:	b2da      	uxtb	r2, r3
    b7ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    b7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d6:	701a      	strb	r2, [r3, #0]
    b7d8:	f24a 6319 	movw	r3, #42521	; 0xa619
    b7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e0:	781b      	ldrb	r3, [r3, #0]
    b7e2:	2bff      	cmp	r3, #255	; 0xff
    b7e4:	d105      	bne.n	b7f2 <send_mode+0x306>
    b7e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ee:	2200      	movs	r2, #0
    b7f0:	701a      	strb	r2, [r3, #0]
    b7f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    b7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7fa:	781b      	ldrb	r3, [r3, #0]
    b7fc:	461a      	mov	r2, r3
    b7fe:	f24a 6303 	movw	r3, #42499	; 0xa603
    b802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b806:	7819      	ldrb	r1, [r3, #0]
    b808:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b810:	5499      	strb	r1, [r3, r2]
    b812:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b81a:	781a      	ldrb	r2, [r3, #0]
    b81c:	f24a 6303 	movw	r3, #42499	; 0xa603
    b820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b824:	781b      	ldrb	r3, [r3, #0]
    b826:	4413      	add	r3, r2
    b828:	b2da      	uxtb	r2, r3
    b82a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b832:	701a      	strb	r2, [r3, #0]
    b834:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b83c:	781a      	ldrb	r2, [r3, #0]
    b83e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	4413      	add	r3, r2
    b84a:	b2da      	uxtb	r2, r3
    b84c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b854:	701a      	strb	r2, [r3, #0]
    b856:	f24a 6319 	movw	r3, #42521	; 0xa619
    b85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	3301      	adds	r3, #1
    b862:	b2da      	uxtb	r2, r3
    b864:	f24a 6319 	movw	r3, #42521	; 0xa619
    b868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86c:	701a      	strb	r2, [r3, #0]
    b86e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b876:	781b      	ldrb	r3, [r3, #0]
    b878:	2bff      	cmp	r3, #255	; 0xff
    b87a:	d105      	bne.n	b888 <send_mode+0x39c>
    b87c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b884:	2200      	movs	r2, #0
    b886:	701a      	strb	r2, [r3, #0]
    b888:	f24a 6319 	movw	r3, #42521	; 0xa619
    b88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b890:	781b      	ldrb	r3, [r3, #0]
    b892:	461a      	mov	r2, r3
    b894:	f240 0380 	movw	r3, #128	; 0x80
    b898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b89c:	7819      	ldrb	r1, [r3, #0]
    b89e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a6:	5499      	strb	r1, [r3, r2]
    b8a8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b0:	781a      	ldrb	r2, [r3, #0]
    b8b2:	f240 0380 	movw	r3, #128	; 0x80
    b8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ba:	781b      	ldrb	r3, [r3, #0]
    b8bc:	4413      	add	r3, r2
    b8be:	b2da      	uxtb	r2, r3
    b8c0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c8:	701a      	strb	r2, [r3, #0]
    b8ca:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d2:	781a      	ldrb	r2, [r3, #0]
    b8d4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8dc:	781b      	ldrb	r3, [r3, #0]
    b8de:	4413      	add	r3, r2
    b8e0:	b2da      	uxtb	r2, r3
    b8e2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ea:	701a      	strb	r2, [r3, #0]
    b8ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    b8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f4:	781b      	ldrb	r3, [r3, #0]
    b8f6:	3301      	adds	r3, #1
    b8f8:	b2da      	uxtb	r2, r3
    b8fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    b8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b902:	701a      	strb	r2, [r3, #0]
    b904:	f24a 6319 	movw	r3, #42521	; 0xa619
    b908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	2bff      	cmp	r3, #255	; 0xff
    b910:	d105      	bne.n	b91e <send_mode+0x432>
    b912:	f24a 6319 	movw	r3, #42521	; 0xa619
    b916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91a:	2200      	movs	r2, #0
    b91c:	701a      	strb	r2, [r3, #0]
    b91e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b926:	781b      	ldrb	r3, [r3, #0]
    b928:	461a      	mov	r2, r3
    b92a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    b92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b932:	7819      	ldrb	r1, [r3, #0]
    b934:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93c:	5499      	strb	r1, [r3, r2]
    b93e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b946:	781b      	ldrb	r3, [r3, #0]
    b948:	3301      	adds	r3, #1
    b94a:	b2da      	uxtb	r2, r3
    b94c:	f24a 6319 	movw	r3, #42521	; 0xa619
    b950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b954:	701a      	strb	r2, [r3, #0]
    b956:	f24a 6319 	movw	r3, #42521	; 0xa619
    b95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b95e:	781b      	ldrb	r3, [r3, #0]
    b960:	2bff      	cmp	r3, #255	; 0xff
    b962:	d105      	bne.n	b970 <send_mode+0x484>
    b964:	f24a 6319 	movw	r3, #42521	; 0xa619
    b968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96c:	2200      	movs	r2, #0
    b96e:	701a      	strb	r2, [r3, #0]
    b970:	f24a 6319 	movw	r3, #42521	; 0xa619
    b974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	461a      	mov	r2, r3
    b97c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    b980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b984:	7819      	ldrb	r1, [r3, #0]
    b986:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b98e:	5499      	strb	r1, [r3, r2]
    b990:	f24a 6319 	movw	r3, #42521	; 0xa619
    b994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b998:	781b      	ldrb	r3, [r3, #0]
    b99a:	3301      	adds	r3, #1
    b99c:	b2da      	uxtb	r2, r3
    b99e:	f24a 6319 	movw	r3, #42521	; 0xa619
    b9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a6:	701a      	strb	r2, [r3, #0]
    b9a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    b9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b0:	781b      	ldrb	r3, [r3, #0]
    b9b2:	2bff      	cmp	r3, #255	; 0xff
    b9b4:	d105      	bne.n	b9c2 <send_mode+0x4d6>
    b9b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    b9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9be:	2200      	movs	r2, #0
    b9c0:	701a      	strb	r2, [r3, #0]
    b9c2:	f242 0339 	movw	r3, #8249	; 0x2039
    b9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	b2db      	uxtb	r3, r3
    b9ce:	f003 0310 	and.w	r3, r3, #16
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d15a      	bne.n	ba8c <send_mode+0x5a0>
    b9d6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    b9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	b2db      	uxtb	r3, r3
    b9e2:	461a      	mov	r2, r3
    b9e4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    b9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ec:	5c9a      	ldrb	r2, [r3, r2]
    b9ee:	f24a 731b 	movw	r3, #42779	; 0xa71b
    b9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f24a 731c 	movw	r3, #42780	; 0xa71c
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	2200      	movs	r2, #0
    ba02:	701a      	strb	r2, [r3, #0]
    ba04:	f24a 631a 	movw	r3, #42522	; 0xa61a
    ba08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0c:	781b      	ldrb	r3, [r3, #0]
    ba0e:	b2db      	uxtb	r3, r3
    ba10:	3301      	adds	r3, #1
    ba12:	b2da      	uxtb	r2, r3
    ba14:	f24a 631a 	movw	r3, #42522	; 0xa61a
    ba18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba1c:	701a      	strb	r2, [r3, #0]
    ba1e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    ba22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	b2db      	uxtb	r3, r3
    ba2a:	2bff      	cmp	r3, #255	; 0xff
    ba2c:	d105      	bne.n	ba3a <send_mode+0x54e>
    ba2e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    ba32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba36:	2200      	movs	r2, #0
    ba38:	701a      	strb	r2, [r3, #0]
    ba3a:	f242 0338 	movw	r3, #8248	; 0x2038
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	f242 0238 	movw	r2, #8248	; 0x2038
    ba46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba4a:	7812      	ldrb	r2, [r2, #0]
    ba4c:	b2d2      	uxtb	r2, r2
    ba4e:	f042 0201 	orr.w	r2, r2, #1
    ba52:	b2d2      	uxtb	r2, r2
    ba54:	701a      	strb	r2, [r3, #0]
    ba56:	f242 0339 	movw	r3, #8249	; 0x2039
    ba5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5e:	f242 0239 	movw	r2, #8249	; 0x2039
    ba62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba66:	7812      	ldrb	r2, [r2, #0]
    ba68:	b2d2      	uxtb	r2, r2
    ba6a:	f042 0210 	orr.w	r2, r2, #16
    ba6e:	b2d2      	uxtb	r2, r2
    ba70:	701a      	strb	r2, [r3, #0]
    ba72:	e00b      	b.n	ba8c <send_mode+0x5a0>
    ba74:	f24a 6318 	movw	r3, #42520	; 0xa618
    ba78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba7c:	781b      	ldrb	r3, [r3, #0]
    ba7e:	3301      	adds	r3, #1
    ba80:	b2da      	uxtb	r2, r3
    ba82:	f24a 6318 	movw	r3, #42520	; 0xa618
    ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8a:	701a      	strb	r2, [r3, #0]
}
    ba8c:	46bd      	mov	sp, r7
    ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba92:	4770      	bx	lr

0000ba94 <send_debug>:
void send_debug(void){  //5000ms
    ba94:	b480      	push	{r7}
    ba96:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    ba98:	f24a 6311 	movw	r3, #42513	; 0xa611
    ba9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa0:	781a      	ldrb	r2, [r3, #0]
    baa2:	f248 531f 	movw	r3, #34079	; 0x851f
    baa6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    baaa:	fba3 1302 	umull	r1, r3, r3, r2
    baae:	091b      	lsrs	r3, r3, #4
    bab0:	2132      	movs	r1, #50	; 0x32
    bab2:	fb01 f303 	mul.w	r3, r1, r3
    bab6:	1ad3      	subs	r3, r2, r3
    bab8:	b2db      	uxtb	r3, r3
    baba:	2b1d      	cmp	r3, #29
    babc:	f040 82bb 	bne.w	c036 <send_debug+0x5a2>
    bac0:	f24a 6319 	movw	r3, #42521	; 0xa619
    bac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac8:	781a      	ldrb	r2, [r3, #0]
    baca:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad2:	781b      	ldrb	r3, [r3, #0]
    bad4:	b2db      	uxtb	r3, r3
    bad6:	429a      	cmp	r2, r3
    bad8:	d313      	bcc.n	bb02 <send_debug+0x6e>
    bada:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae2:	781b      	ldrb	r3, [r3, #0]
    bae4:	b2db      	uxtb	r3, r3
    bae6:	461a      	mov	r2, r3
    bae8:	f24a 6319 	movw	r3, #42521	; 0xa619
    baec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	1ad3      	subs	r3, r2, r3
    baf4:	33ff      	adds	r3, #255	; 0xff
    baf6:	2b09      	cmp	r3, #9
    baf8:	bfd4      	ite	le
    bafa:	2300      	movle	r3, #0
    bafc:	2301      	movgt	r3, #1
    bafe:	b2db      	uxtb	r3, r3
    bb00:	e011      	b.n	bb26 <send_debug+0x92>
    bb02:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0a:	781b      	ldrb	r3, [r3, #0]
    bb0c:	b2db      	uxtb	r3, r3
    bb0e:	461a      	mov	r2, r3
    bb10:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb18:	781b      	ldrb	r3, [r3, #0]
    bb1a:	1ad3      	subs	r3, r2, r3
    bb1c:	2b09      	cmp	r3, #9
    bb1e:	bfd4      	ite	le
    bb20:	2300      	movle	r3, #0
    bb22:	2301      	movgt	r3, #1
    bb24:	b2db      	uxtb	r3, r3
    bb26:	2b00      	cmp	r3, #0
    bb28:	f000 8279 	beq.w	c01e <send_debug+0x58a>
    bb2c:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	461a      	mov	r2, r3
    bb38:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb40:	2105      	movs	r1, #5
    bb42:	5499      	strb	r1, [r3, r2]
    bb44:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4c:	781b      	ldrb	r3, [r3, #0]
    bb4e:	3301      	adds	r3, #1
    bb50:	b2da      	uxtb	r2, r3
    bb52:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb5a:	701a      	strb	r2, [r3, #0]
    bb5c:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	2bff      	cmp	r3, #255	; 0xff
    bb68:	d105      	bne.n	bb76 <send_debug+0xe2>
    bb6a:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb72:	2200      	movs	r2, #0
    bb74:	701a      	strb	r2, [r3, #0]
    bb76:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7e:	781b      	ldrb	r3, [r3, #0]
    bb80:	461a      	mov	r2, r3
    bb82:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb8a:	210d      	movs	r1, #13
    bb8c:	5499      	strb	r1, [r3, r2]
    bb8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    bb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	3301      	adds	r3, #1
    bb9a:	b2da      	uxtb	r2, r3
    bb9c:	f24a 6319 	movw	r3, #42521	; 0xa619
    bba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba4:	701a      	strb	r2, [r3, #0]
    bba6:	f24a 6319 	movw	r3, #42521	; 0xa619
    bbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	2bff      	cmp	r3, #255	; 0xff
    bbb2:	d105      	bne.n	bbc0 <send_debug+0x12c>
    bbb4:	f24a 6319 	movw	r3, #42521	; 0xa619
    bbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbbc:	2200      	movs	r2, #0
    bbbe:	701a      	strb	r2, [r3, #0]
    bbc0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc8:	220d      	movs	r2, #13
    bbca:	701a      	strb	r2, [r3, #0]
    bbcc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd4:	220d      	movs	r2, #13
    bbd6:	701a      	strb	r2, [r3, #0]
    bbd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    bbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	461a      	mov	r2, r3
    bbe4:	f24a 734f 	movw	r3, #42831	; 0xa74f
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	b2d9      	uxtb	r1, r3
    bbf0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bbf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf8:	5499      	strb	r1, [r3, r2]
    bbfa:	f24a 734f 	movw	r3, #42831	; 0xa74f
    bbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc02:	781a      	ldrb	r2, [r3, #0]
    bc04:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0c:	781b      	ldrb	r3, [r3, #0]
    bc0e:	4413      	add	r3, r2
    bc10:	b2da      	uxtb	r2, r3
    bc12:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1a:	701a      	strb	r2, [r3, #0]
    bc1c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc24:	781a      	ldrb	r2, [r3, #0]
    bc26:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bc2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2e:	781b      	ldrb	r3, [r3, #0]
    bc30:	4413      	add	r3, r2
    bc32:	b2da      	uxtb	r2, r3
    bc34:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3c:	701a      	strb	r2, [r3, #0]
    bc3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    bc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	3301      	adds	r3, #1
    bc4a:	b2da      	uxtb	r2, r3
    bc4c:	f24a 6319 	movw	r3, #42521	; 0xa619
    bc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc54:	701a      	strb	r2, [r3, #0]
    bc56:	f24a 6319 	movw	r3, #42521	; 0xa619
    bc5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	2bff      	cmp	r3, #255	; 0xff
    bc62:	d105      	bne.n	bc70 <send_debug+0x1dc>
    bc64:	f24a 6319 	movw	r3, #42521	; 0xa619
    bc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6c:	2200      	movs	r2, #0
    bc6e:	701a      	strb	r2, [r3, #0]
    bc70:	f24a 6319 	movw	r3, #42521	; 0xa619
    bc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc78:	781b      	ldrb	r3, [r3, #0]
    bc7a:	461a      	mov	r2, r3
    bc7c:	f24a 7350 	movw	r3, #42832	; 0xa750
    bc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc84:	7819      	ldrb	r1, [r3, #0]
    bc86:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8e:	5499      	strb	r1, [r3, r2]
    bc90:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc98:	781a      	ldrb	r2, [r3, #0]
    bc9a:	f24a 7350 	movw	r3, #42832	; 0xa750
    bc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca2:	781b      	ldrb	r3, [r3, #0]
    bca4:	4413      	add	r3, r2
    bca6:	b2da      	uxtb	r2, r3
    bca8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bcac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb0:	701a      	strb	r2, [r3, #0]
    bcb2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcba:	781a      	ldrb	r2, [r3, #0]
    bcbc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	4413      	add	r3, r2
    bcc8:	b2da      	uxtb	r2, r3
    bcca:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd2:	701a      	strb	r2, [r3, #0]
    bcd4:	f24a 6319 	movw	r3, #42521	; 0xa619
    bcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	3301      	adds	r3, #1
    bce0:	b2da      	uxtb	r2, r3
    bce2:	f24a 6319 	movw	r3, #42521	; 0xa619
    bce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcea:	701a      	strb	r2, [r3, #0]
    bcec:	f24a 6319 	movw	r3, #42521	; 0xa619
    bcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf4:	781b      	ldrb	r3, [r3, #0]
    bcf6:	2bff      	cmp	r3, #255	; 0xff
    bcf8:	d105      	bne.n	bd06 <send_debug+0x272>
    bcfa:	f24a 6319 	movw	r3, #42521	; 0xa619
    bcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd02:	2200      	movs	r2, #0
    bd04:	701a      	strb	r2, [r3, #0]
    bd06:	f24a 6319 	movw	r3, #42521	; 0xa619
    bd0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	461a      	mov	r2, r3
    bd12:	f24a 6318 	movw	r3, #42520	; 0xa618
    bd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd1a:	7819      	ldrb	r1, [r3, #0]
    bd1c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd24:	5499      	strb	r1, [r3, r2]
    bd26:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2e:	781a      	ldrb	r2, [r3, #0]
    bd30:	f24a 6318 	movw	r3, #42520	; 0xa618
    bd34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	4413      	add	r3, r2
    bd3c:	b2da      	uxtb	r2, r3
    bd3e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd46:	701a      	strb	r2, [r3, #0]
    bd48:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd50:	781a      	ldrb	r2, [r3, #0]
    bd52:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	4413      	add	r3, r2
    bd5e:	b2da      	uxtb	r2, r3
    bd60:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd68:	701a      	strb	r2, [r3, #0]
    bd6a:	f24a 6319 	movw	r3, #42521	; 0xa619
    bd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	3301      	adds	r3, #1
    bd76:	b2da      	uxtb	r2, r3
    bd78:	f24a 6319 	movw	r3, #42521	; 0xa619
    bd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd80:	701a      	strb	r2, [r3, #0]
    bd82:	f24a 6319 	movw	r3, #42521	; 0xa619
    bd86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd8a:	781b      	ldrb	r3, [r3, #0]
    bd8c:	2bff      	cmp	r3, #255	; 0xff
    bd8e:	d105      	bne.n	bd9c <send_debug+0x308>
    bd90:	f24a 6319 	movw	r3, #42521	; 0xa619
    bd94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd98:	2200      	movs	r2, #0
    bd9a:	701a      	strb	r2, [r3, #0]
    bd9c:	f24a 6319 	movw	r3, #42521	; 0xa619
    bda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	461a      	mov	r2, r3
    bda8:	f64a 03b7 	movw	r3, #43191	; 0xa8b7
    bdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb0:	7819      	ldrb	r1, [r3, #0]
    bdb2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdba:	5499      	strb	r1, [r3, r2]
    bdbc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc4:	781a      	ldrb	r2, [r3, #0]
    bdc6:	f64a 03b7 	movw	r3, #43191	; 0xa8b7
    bdca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdce:	781b      	ldrb	r3, [r3, #0]
    bdd0:	4413      	add	r3, r2
    bdd2:	b2da      	uxtb	r2, r3
    bdd4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bddc:	701a      	strb	r2, [r3, #0]
    bdde:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde6:	781a      	ldrb	r2, [r3, #0]
    bde8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bdec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf0:	781b      	ldrb	r3, [r3, #0]
    bdf2:	4413      	add	r3, r2
    bdf4:	b2da      	uxtb	r2, r3
    bdf6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	f24a 6319 	movw	r3, #42521	; 0xa619
    be04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	3301      	adds	r3, #1
    be0c:	b2da      	uxtb	r2, r3
    be0e:	f24a 6319 	movw	r3, #42521	; 0xa619
    be12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be16:	701a      	strb	r2, [r3, #0]
    be18:	f24a 6319 	movw	r3, #42521	; 0xa619
    be1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	2bff      	cmp	r3, #255	; 0xff
    be24:	d105      	bne.n	be32 <send_debug+0x39e>
    be26:	f24a 6319 	movw	r3, #42521	; 0xa619
    be2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2e:	2200      	movs	r2, #0
    be30:	701a      	strb	r2, [r3, #0]
    be32:	f24a 6319 	movw	r3, #42521	; 0xa619
    be36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3a:	781b      	ldrb	r3, [r3, #0]
    be3c:	461a      	mov	r2, r3
    be3e:	f24a 6304 	movw	r3, #42500	; 0xa604
    be42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be46:	7819      	ldrb	r1, [r3, #0]
    be48:	f24a 631c 	movw	r3, #42524	; 0xa61c
    be4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be50:	5499      	strb	r1, [r3, r2]
    be52:	f24a 731d 	movw	r3, #42781	; 0xa71d
    be56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5a:	781a      	ldrb	r2, [r3, #0]
    be5c:	f24a 6304 	movw	r3, #42500	; 0xa604
    be60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be64:	781b      	ldrb	r3, [r3, #0]
    be66:	4413      	add	r3, r2
    be68:	b2da      	uxtb	r2, r3
    be6a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    be6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be72:	701a      	strb	r2, [r3, #0]
    be74:	f24a 731e 	movw	r3, #42782	; 0xa71e
    be78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be7c:	781a      	ldrb	r2, [r3, #0]
    be7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    be82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be86:	781b      	ldrb	r3, [r3, #0]
    be88:	4413      	add	r3, r2
    be8a:	b2da      	uxtb	r2, r3
    be8c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    be90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be94:	701a      	strb	r2, [r3, #0]
    be96:	f24a 6319 	movw	r3, #42521	; 0xa619
    be9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	3301      	adds	r3, #1
    bea2:	b2da      	uxtb	r2, r3
    bea4:	f24a 6319 	movw	r3, #42521	; 0xa619
    bea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beac:	701a      	strb	r2, [r3, #0]
    beae:	f24a 6319 	movw	r3, #42521	; 0xa619
    beb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	2bff      	cmp	r3, #255	; 0xff
    beba:	d105      	bne.n	bec8 <send_debug+0x434>
    bebc:	f24a 6319 	movw	r3, #42521	; 0xa619
    bec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec4:	2200      	movs	r2, #0
    bec6:	701a      	strb	r2, [r3, #0]
    bec8:	f24a 6319 	movw	r3, #42521	; 0xa619
    becc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed0:	781b      	ldrb	r3, [r3, #0]
    bed2:	461a      	mov	r2, r3
    bed4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    bed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bedc:	7819      	ldrb	r1, [r3, #0]
    bede:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee6:	5499      	strb	r1, [r3, r2]
    bee8:	f24a 6319 	movw	r3, #42521	; 0xa619
    beec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef0:	781b      	ldrb	r3, [r3, #0]
    bef2:	3301      	adds	r3, #1
    bef4:	b2da      	uxtb	r2, r3
    bef6:	f24a 6319 	movw	r3, #42521	; 0xa619
    befa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befe:	701a      	strb	r2, [r3, #0]
    bf00:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	2bff      	cmp	r3, #255	; 0xff
    bf0c:	d105      	bne.n	bf1a <send_debug+0x486>
    bf0e:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf16:	2200      	movs	r2, #0
    bf18:	701a      	strb	r2, [r3, #0]
    bf1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf22:	781b      	ldrb	r3, [r3, #0]
    bf24:	461a      	mov	r2, r3
    bf26:	f24a 731e 	movw	r3, #42782	; 0xa71e
    bf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2e:	7819      	ldrb	r1, [r3, #0]
    bf30:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bf34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf38:	5499      	strb	r1, [r3, r2]
    bf3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf42:	781b      	ldrb	r3, [r3, #0]
    bf44:	3301      	adds	r3, #1
    bf46:	b2da      	uxtb	r2, r3
    bf48:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf50:	701a      	strb	r2, [r3, #0]
    bf52:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	2bff      	cmp	r3, #255	; 0xff
    bf5e:	d105      	bne.n	bf6c <send_debug+0x4d8>
    bf60:	f24a 6319 	movw	r3, #42521	; 0xa619
    bf64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf68:	2200      	movs	r2, #0
    bf6a:	701a      	strb	r2, [r3, #0]
    bf6c:	f242 0339 	movw	r3, #8249	; 0x2039
    bf70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf74:	781b      	ldrb	r3, [r3, #0]
    bf76:	b2db      	uxtb	r3, r3
    bf78:	f003 0310 	and.w	r3, r3, #16
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d15a      	bne.n	c036 <send_debug+0x5a2>
    bf80:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	b2db      	uxtb	r3, r3
    bf8c:	461a      	mov	r2, r3
    bf8e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    bf92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf96:	5c9a      	ldrb	r2, [r3, r2]
    bf98:	f24a 731b 	movw	r3, #42779	; 0xa71b
    bf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa0:	701a      	strb	r2, [r3, #0]
    bfa2:	f24a 731c 	movw	r3, #42780	; 0xa71c
    bfa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfaa:	2200      	movs	r2, #0
    bfac:	701a      	strb	r2, [r3, #0]
    bfae:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb6:	781b      	ldrb	r3, [r3, #0]
    bfb8:	b2db      	uxtb	r3, r3
    bfba:	3301      	adds	r3, #1
    bfbc:	b2da      	uxtb	r2, r3
    bfbe:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bfc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc6:	701a      	strb	r2, [r3, #0]
    bfc8:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bfcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd0:	781b      	ldrb	r3, [r3, #0]
    bfd2:	b2db      	uxtb	r3, r3
    bfd4:	2bff      	cmp	r3, #255	; 0xff
    bfd6:	d105      	bne.n	bfe4 <send_debug+0x550>
    bfd8:	f24a 631a 	movw	r3, #42522	; 0xa61a
    bfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe0:	2200      	movs	r2, #0
    bfe2:	701a      	strb	r2, [r3, #0]
    bfe4:	f242 0338 	movw	r3, #8248	; 0x2038
    bfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfec:	f242 0238 	movw	r2, #8248	; 0x2038
    bff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bff4:	7812      	ldrb	r2, [r2, #0]
    bff6:	b2d2      	uxtb	r2, r2
    bff8:	f042 0201 	orr.w	r2, r2, #1
    bffc:	b2d2      	uxtb	r2, r2
    bffe:	701a      	strb	r2, [r3, #0]
    c000:	f242 0339 	movw	r3, #8249	; 0x2039
    c004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c008:	f242 0239 	movw	r2, #8249	; 0x2039
    c00c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c010:	7812      	ldrb	r2, [r2, #0]
    c012:	b2d2      	uxtb	r2, r2
    c014:	f042 0210 	orr.w	r2, r2, #16
    c018:	b2d2      	uxtb	r2, r2
    c01a:	701a      	strb	r2, [r3, #0]
    c01c:	e00b      	b.n	c036 <send_debug+0x5a2>
    c01e:	f24a 6318 	movw	r3, #42520	; 0xa618
    c022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c026:	781b      	ldrb	r3, [r3, #0]
    c028:	3301      	adds	r3, #1
    c02a:	b2da      	uxtb	r2, r3
    c02c:	f24a 6318 	movw	r3, #42520	; 0xa618
    c030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c034:	701a      	strb	r2, [r3, #0]
}
    c036:	46bd      	mov	sp, r7
    c038:	f85d 7b04 	ldr.w	r7, [sp], #4
    c03c:	4770      	bx	lr
    c03e:	bf00      	nop

0000c040 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c040:	b480      	push	{r7}
    c042:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c044:	f24a 6311 	movw	r3, #42513	; 0xa611
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	781a      	ldrb	r2, [r3, #0]
    c04e:	f248 531f 	movw	r3, #34079	; 0x851f
    c052:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c056:	fba3 1302 	umull	r1, r3, r3, r2
    c05a:	095b      	lsrs	r3, r3, #5
    c05c:	2164      	movs	r1, #100	; 0x64
    c05e:	fb01 f303 	mul.w	r3, r1, r3
    c062:	1ad3      	subs	r3, r2, r3
    c064:	b2db      	uxtb	r3, r3
    c066:	2b31      	cmp	r3, #49	; 0x31
    c068:	f040 8395 	bne.w	c796 <send_nav_ref+0x756>
    c06c:	f24a 6319 	movw	r3, #42521	; 0xa619
    c070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c074:	781a      	ldrb	r2, [r3, #0]
    c076:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07e:	781b      	ldrb	r3, [r3, #0]
    c080:	b2db      	uxtb	r3, r3
    c082:	429a      	cmp	r2, r3
    c084:	d313      	bcc.n	c0ae <send_nav_ref+0x6e>
    c086:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08e:	781b      	ldrb	r3, [r3, #0]
    c090:	b2db      	uxtb	r3, r3
    c092:	461a      	mov	r2, r3
    c094:	f24a 6319 	movw	r3, #42521	; 0xa619
    c098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09c:	781b      	ldrb	r3, [r3, #0]
    c09e:	1ad3      	subs	r3, r2, r3
    c0a0:	33ff      	adds	r3, #255	; 0xff
    c0a2:	2b0c      	cmp	r3, #12
    c0a4:	bfd4      	ite	le
    c0a6:	2300      	movle	r3, #0
    c0a8:	2301      	movgt	r3, #1
    c0aa:	b2db      	uxtb	r3, r3
    c0ac:	e011      	b.n	c0d2 <send_nav_ref+0x92>
    c0ae:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b6:	781b      	ldrb	r3, [r3, #0]
    c0b8:	b2db      	uxtb	r3, r3
    c0ba:	461a      	mov	r2, r3
    c0bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    c0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c4:	781b      	ldrb	r3, [r3, #0]
    c0c6:	1ad3      	subs	r3, r2, r3
    c0c8:	2b0c      	cmp	r3, #12
    c0ca:	bfd4      	ite	le
    c0cc:	2300      	movle	r3, #0
    c0ce:	2301      	movgt	r3, #1
    c0d0:	b2db      	uxtb	r3, r3
    c0d2:	2b00      	cmp	r3, #0
    c0d4:	f000 8353 	beq.w	c77e <send_nav_ref+0x73e>
    c0d8:	f24a 6319 	movw	r3, #42521	; 0xa619
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	461a      	mov	r2, r3
    c0e4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ec:	2105      	movs	r1, #5
    c0ee:	5499      	strb	r1, [r3, r2]
    c0f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    c0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	3301      	adds	r3, #1
    c0fc:	b2da      	uxtb	r2, r3
    c0fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    c102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c106:	701a      	strb	r2, [r3, #0]
    c108:	f24a 6319 	movw	r3, #42521	; 0xa619
    c10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c110:	781b      	ldrb	r3, [r3, #0]
    c112:	2bff      	cmp	r3, #255	; 0xff
    c114:	d105      	bne.n	c122 <send_nav_ref+0xe2>
    c116:	f24a 6319 	movw	r3, #42521	; 0xa619
    c11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c11e:	2200      	movs	r2, #0
    c120:	701a      	strb	r2, [r3, #0]
    c122:	f24a 6319 	movw	r3, #42521	; 0xa619
    c126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12a:	781b      	ldrb	r3, [r3, #0]
    c12c:	461a      	mov	r2, r3
    c12e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c136:	2109      	movs	r1, #9
    c138:	5499      	strb	r1, [r3, r2]
    c13a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c142:	781b      	ldrb	r3, [r3, #0]
    c144:	3301      	adds	r3, #1
    c146:	b2da      	uxtb	r2, r3
    c148:	f24a 6319 	movw	r3, #42521	; 0xa619
    c14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c150:	701a      	strb	r2, [r3, #0]
    c152:	f24a 6319 	movw	r3, #42521	; 0xa619
    c156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15a:	781b      	ldrb	r3, [r3, #0]
    c15c:	2bff      	cmp	r3, #255	; 0xff
    c15e:	d105      	bne.n	c16c <send_nav_ref+0x12c>
    c160:	f24a 6319 	movw	r3, #42521	; 0xa619
    c164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c168:	2200      	movs	r2, #0
    c16a:	701a      	strb	r2, [r3, #0]
    c16c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c174:	2209      	movs	r2, #9
    c176:	701a      	strb	r2, [r3, #0]
    c178:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c180:	2209      	movs	r2, #9
    c182:	701a      	strb	r2, [r3, #0]
    c184:	f24a 6319 	movw	r3, #42521	; 0xa619
    c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18c:	781b      	ldrb	r3, [r3, #0]
    c18e:	461a      	mov	r2, r3
    c190:	f248 1390 	movw	r3, #33168	; 0x8190
    c194:	f2c0 0301 	movt	r3, #1
    c198:	7819      	ldrb	r1, [r3, #0]
    c19a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a2:	5499      	strb	r1, [r3, r2]
    c1a4:	f248 1390 	movw	r3, #33168	; 0x8190
    c1a8:	f2c0 0301 	movt	r3, #1
    c1ac:	781a      	ldrb	r2, [r3, #0]
    c1ae:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	4413      	add	r3, r2
    c1ba:	b2da      	uxtb	r2, r3
    c1bc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c4:	701a      	strb	r2, [r3, #0]
    c1c6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ce:	781a      	ldrb	r2, [r3, #0]
    c1d0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d8:	781b      	ldrb	r3, [r3, #0]
    c1da:	4413      	add	r3, r2
    c1dc:	b2da      	uxtb	r2, r3
    c1de:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e6:	701a      	strb	r2, [r3, #0]
    c1e8:	f24a 6319 	movw	r3, #42521	; 0xa619
    c1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	3301      	adds	r3, #1
    c1f4:	b2da      	uxtb	r2, r3
    c1f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    c1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fe:	701a      	strb	r2, [r3, #0]
    c200:	f24a 6319 	movw	r3, #42521	; 0xa619
    c204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c208:	781b      	ldrb	r3, [r3, #0]
    c20a:	2bff      	cmp	r3, #255	; 0xff
    c20c:	d105      	bne.n	c21a <send_nav_ref+0x1da>
    c20e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c216:	2200      	movs	r2, #0
    c218:	701a      	strb	r2, [r3, #0]
    c21a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	781b      	ldrb	r3, [r3, #0]
    c224:	461a      	mov	r2, r3
    c226:	f248 1390 	movw	r3, #33168	; 0x8190
    c22a:	f2c0 0301 	movt	r3, #1
    c22e:	7859      	ldrb	r1, [r3, #1]
    c230:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c238:	5499      	strb	r1, [r3, r2]
    c23a:	4bd2      	ldr	r3, [pc, #840]	; (c584 <send_nav_ref+0x544>)
    c23c:	781a      	ldrb	r2, [r3, #0]
    c23e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	4413      	add	r3, r2
    c24a:	b2da      	uxtb	r2, r3
    c24c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c254:	701a      	strb	r2, [r3, #0]
    c256:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25e:	781a      	ldrb	r2, [r3, #0]
    c260:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c268:	781b      	ldrb	r3, [r3, #0]
    c26a:	4413      	add	r3, r2
    c26c:	b2da      	uxtb	r2, r3
    c26e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c276:	701a      	strb	r2, [r3, #0]
    c278:	f24a 6319 	movw	r3, #42521	; 0xa619
    c27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c280:	781b      	ldrb	r3, [r3, #0]
    c282:	3301      	adds	r3, #1
    c284:	b2da      	uxtb	r2, r3
    c286:	f24a 6319 	movw	r3, #42521	; 0xa619
    c28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28e:	701a      	strb	r2, [r3, #0]
    c290:	f24a 6319 	movw	r3, #42521	; 0xa619
    c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	2bff      	cmp	r3, #255	; 0xff
    c29c:	d105      	bne.n	c2aa <send_nav_ref+0x26a>
    c29e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a6:	2200      	movs	r2, #0
    c2a8:	701a      	strb	r2, [r3, #0]
    c2aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    c2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	461a      	mov	r2, r3
    c2b6:	f248 1390 	movw	r3, #33168	; 0x8190
    c2ba:	f2c0 0301 	movt	r3, #1
    c2be:	7899      	ldrb	r1, [r3, #2]
    c2c0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c8:	5499      	strb	r1, [r3, r2]
    c2ca:	4baf      	ldr	r3, [pc, #700]	; (c588 <send_nav_ref+0x548>)
    c2cc:	781a      	ldrb	r2, [r3, #0]
    c2ce:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d6:	781b      	ldrb	r3, [r3, #0]
    c2d8:	4413      	add	r3, r2
    c2da:	b2da      	uxtb	r2, r3
    c2dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e4:	701a      	strb	r2, [r3, #0]
    c2e6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ee:	781a      	ldrb	r2, [r3, #0]
    c2f0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	4413      	add	r3, r2
    c2fc:	b2da      	uxtb	r2, r3
    c2fe:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c306:	701a      	strb	r2, [r3, #0]
    c308:	f24a 6319 	movw	r3, #42521	; 0xa619
    c30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	3301      	adds	r3, #1
    c314:	b2da      	uxtb	r2, r3
    c316:	f24a 6319 	movw	r3, #42521	; 0xa619
    c31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31e:	701a      	strb	r2, [r3, #0]
    c320:	f24a 6319 	movw	r3, #42521	; 0xa619
    c324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	2bff      	cmp	r3, #255	; 0xff
    c32c:	d105      	bne.n	c33a <send_nav_ref+0x2fa>
    c32e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c336:	2200      	movs	r2, #0
    c338:	701a      	strb	r2, [r3, #0]
    c33a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c342:	781b      	ldrb	r3, [r3, #0]
    c344:	461a      	mov	r2, r3
    c346:	f248 1390 	movw	r3, #33168	; 0x8190
    c34a:	f2c0 0301 	movt	r3, #1
    c34e:	78d9      	ldrb	r1, [r3, #3]
    c350:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c358:	5499      	strb	r1, [r3, r2]
    c35a:	4b8c      	ldr	r3, [pc, #560]	; (c58c <send_nav_ref+0x54c>)
    c35c:	781a      	ldrb	r2, [r3, #0]
    c35e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	4413      	add	r3, r2
    c36a:	b2da      	uxtb	r2, r3
    c36c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c374:	701a      	strb	r2, [r3, #0]
    c376:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37e:	781a      	ldrb	r2, [r3, #0]
    c380:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c388:	781b      	ldrb	r3, [r3, #0]
    c38a:	4413      	add	r3, r2
    c38c:	b2da      	uxtb	r2, r3
    c38e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c396:	701a      	strb	r2, [r3, #0]
    c398:	f24a 6319 	movw	r3, #42521	; 0xa619
    c39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a0:	781b      	ldrb	r3, [r3, #0]
    c3a2:	3301      	adds	r3, #1
    c3a4:	b2da      	uxtb	r2, r3
    c3a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    c3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ae:	701a      	strb	r2, [r3, #0]
    c3b0:	f24a 6319 	movw	r3, #42521	; 0xa619
    c3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	2bff      	cmp	r3, #255	; 0xff
    c3bc:	d105      	bne.n	c3ca <send_nav_ref+0x38a>
    c3be:	f24a 6319 	movw	r3, #42521	; 0xa619
    c3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c6:	2200      	movs	r2, #0
    c3c8:	701a      	strb	r2, [r3, #0]
    c3ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    c3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d2:	781b      	ldrb	r3, [r3, #0]
    c3d4:	461a      	mov	r2, r3
    c3d6:	f248 1394 	movw	r3, #33172	; 0x8194
    c3da:	f2c0 0301 	movt	r3, #1
    c3de:	7819      	ldrb	r1, [r3, #0]
    c3e0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e8:	5499      	strb	r1, [r3, r2]
    c3ea:	f248 1394 	movw	r3, #33172	; 0x8194
    c3ee:	f2c0 0301 	movt	r3, #1
    c3f2:	781a      	ldrb	r2, [r3, #0]
    c3f4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fc:	781b      	ldrb	r3, [r3, #0]
    c3fe:	4413      	add	r3, r2
    c400:	b2da      	uxtb	r2, r3
    c402:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c40a:	701a      	strb	r2, [r3, #0]
    c40c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c414:	781a      	ldrb	r2, [r3, #0]
    c416:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c41e:	781b      	ldrb	r3, [r3, #0]
    c420:	4413      	add	r3, r2
    c422:	b2da      	uxtb	r2, r3
    c424:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	701a      	strb	r2, [r3, #0]
    c42e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	3301      	adds	r3, #1
    c43a:	b2da      	uxtb	r2, r3
    c43c:	f24a 6319 	movw	r3, #42521	; 0xa619
    c440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c444:	701a      	strb	r2, [r3, #0]
    c446:	f24a 6319 	movw	r3, #42521	; 0xa619
    c44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c44e:	781b      	ldrb	r3, [r3, #0]
    c450:	2bff      	cmp	r3, #255	; 0xff
    c452:	d105      	bne.n	c460 <send_nav_ref+0x420>
    c454:	f24a 6319 	movw	r3, #42521	; 0xa619
    c458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45c:	2200      	movs	r2, #0
    c45e:	701a      	strb	r2, [r3, #0]
    c460:	f24a 6319 	movw	r3, #42521	; 0xa619
    c464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	461a      	mov	r2, r3
    c46c:	f248 1394 	movw	r3, #33172	; 0x8194
    c470:	f2c0 0301 	movt	r3, #1
    c474:	7859      	ldrb	r1, [r3, #1]
    c476:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	5499      	strb	r1, [r3, r2]
    c480:	4b43      	ldr	r3, [pc, #268]	; (c590 <send_nav_ref+0x550>)
    c482:	781a      	ldrb	r2, [r3, #0]
    c484:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	4413      	add	r3, r2
    c490:	b2da      	uxtb	r2, r3
    c492:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c49a:	701a      	strb	r2, [r3, #0]
    c49c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a4:	781a      	ldrb	r2, [r3, #0]
    c4a6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	4413      	add	r3, r2
    c4b2:	b2da      	uxtb	r2, r3
    c4b4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4bc:	701a      	strb	r2, [r3, #0]
    c4be:	f24a 6319 	movw	r3, #42521	; 0xa619
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	781b      	ldrb	r3, [r3, #0]
    c4c8:	3301      	adds	r3, #1
    c4ca:	b2da      	uxtb	r2, r3
    c4cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    c4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d4:	701a      	strb	r2, [r3, #0]
    c4d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    c4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4de:	781b      	ldrb	r3, [r3, #0]
    c4e0:	2bff      	cmp	r3, #255	; 0xff
    c4e2:	d105      	bne.n	c4f0 <send_nav_ref+0x4b0>
    c4e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    c4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ec:	2200      	movs	r2, #0
    c4ee:	701a      	strb	r2, [r3, #0]
    c4f0:	f24a 6319 	movw	r3, #42521	; 0xa619
    c4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	461a      	mov	r2, r3
    c4fc:	f248 1394 	movw	r3, #33172	; 0x8194
    c500:	f2c0 0301 	movt	r3, #1
    c504:	7899      	ldrb	r1, [r3, #2]
    c506:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	5499      	strb	r1, [r3, r2]
    c510:	4b20      	ldr	r3, [pc, #128]	; (c594 <send_nav_ref+0x554>)
    c512:	781a      	ldrb	r2, [r3, #0]
    c514:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51c:	781b      	ldrb	r3, [r3, #0]
    c51e:	4413      	add	r3, r2
    c520:	b2da      	uxtb	r2, r3
    c522:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c52a:	701a      	strb	r2, [r3, #0]
    c52c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c534:	781a      	ldrb	r2, [r3, #0]
    c536:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c53e:	781b      	ldrb	r3, [r3, #0]
    c540:	4413      	add	r3, r2
    c542:	b2da      	uxtb	r2, r3
    c544:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54c:	701a      	strb	r2, [r3, #0]
    c54e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	3301      	adds	r3, #1
    c55a:	b2da      	uxtb	r2, r3
    c55c:	f24a 6319 	movw	r3, #42521	; 0xa619
    c560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c564:	701a      	strb	r2, [r3, #0]
    c566:	f24a 6319 	movw	r3, #42521	; 0xa619
    c56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	2bff      	cmp	r3, #255	; 0xff
    c572:	d111      	bne.n	c598 <send_nav_ref+0x558>
    c574:	f24a 6319 	movw	r3, #42521	; 0xa619
    c578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c57c:	2200      	movs	r2, #0
    c57e:	701a      	strb	r2, [r3, #0]
    c580:	e00a      	b.n	c598 <send_nav_ref+0x558>
    c582:	bf00      	nop
    c584:	00018191 	.word	0x00018191
    c588:	00018192 	.word	0x00018192
    c58c:	00018193 	.word	0x00018193
    c590:	00018195 	.word	0x00018195
    c594:	00018196 	.word	0x00018196
    c598:	f24a 6319 	movw	r3, #42521	; 0xa619
    c59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5a0:	781b      	ldrb	r3, [r3, #0]
    c5a2:	461a      	mov	r2, r3
    c5a4:	f248 1394 	movw	r3, #33172	; 0x8194
    c5a8:	f2c0 0301 	movt	r3, #1
    c5ac:	78d9      	ldrb	r1, [r3, #3]
    c5ae:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b6:	5499      	strb	r1, [r3, r2]
    c5b8:	4b79      	ldr	r3, [pc, #484]	; (c7a0 <send_nav_ref+0x760>)
    c5ba:	781a      	ldrb	r2, [r3, #0]
    c5bc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c4:	781b      	ldrb	r3, [r3, #0]
    c5c6:	4413      	add	r3, r2
    c5c8:	b2da      	uxtb	r2, r3
    c5ca:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d2:	701a      	strb	r2, [r3, #0]
    c5d4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5dc:	781a      	ldrb	r2, [r3, #0]
    c5de:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e6:	781b      	ldrb	r3, [r3, #0]
    c5e8:	4413      	add	r3, r2
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f4:	701a      	strb	r2, [r3, #0]
    c5f6:	f24a 6319 	movw	r3, #42521	; 0xa619
    c5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fe:	781b      	ldrb	r3, [r3, #0]
    c600:	3301      	adds	r3, #1
    c602:	b2da      	uxtb	r2, r3
    c604:	f24a 6319 	movw	r3, #42521	; 0xa619
    c608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c60c:	701a      	strb	r2, [r3, #0]
    c60e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	2bff      	cmp	r3, #255	; 0xff
    c61a:	d105      	bne.n	c628 <send_nav_ref+0x5e8>
    c61c:	f24a 6319 	movw	r3, #42521	; 0xa619
    c620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c624:	2200      	movs	r2, #0
    c626:	701a      	strb	r2, [r3, #0]
    c628:	f24a 6319 	movw	r3, #42521	; 0xa619
    c62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	461a      	mov	r2, r3
    c634:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63c:	7819      	ldrb	r1, [r3, #0]
    c63e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c646:	5499      	strb	r1, [r3, r2]
    c648:	f24a 6319 	movw	r3, #42521	; 0xa619
    c64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	3301      	adds	r3, #1
    c654:	b2da      	uxtb	r2, r3
    c656:	f24a 6319 	movw	r3, #42521	; 0xa619
    c65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65e:	701a      	strb	r2, [r3, #0]
    c660:	f24a 6319 	movw	r3, #42521	; 0xa619
    c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	2bff      	cmp	r3, #255	; 0xff
    c66c:	d105      	bne.n	c67a <send_nav_ref+0x63a>
    c66e:	f24a 6319 	movw	r3, #42521	; 0xa619
    c672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c676:	2200      	movs	r2, #0
    c678:	701a      	strb	r2, [r3, #0]
    c67a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c682:	781b      	ldrb	r3, [r3, #0]
    c684:	461a      	mov	r2, r3
    c686:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68e:	7819      	ldrb	r1, [r3, #0]
    c690:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c698:	5499      	strb	r1, [r3, r2]
    c69a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a2:	781b      	ldrb	r3, [r3, #0]
    c6a4:	3301      	adds	r3, #1
    c6a6:	b2da      	uxtb	r2, r3
    c6a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    c6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b0:	701a      	strb	r2, [r3, #0]
    c6b2:	f24a 6319 	movw	r3, #42521	; 0xa619
    c6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ba:	781b      	ldrb	r3, [r3, #0]
    c6bc:	2bff      	cmp	r3, #255	; 0xff
    c6be:	d105      	bne.n	c6cc <send_nav_ref+0x68c>
    c6c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    c6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c8:	2200      	movs	r2, #0
    c6ca:	701a      	strb	r2, [r3, #0]
    c6cc:	f242 0339 	movw	r3, #8249	; 0x2039
    c6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d4:	781b      	ldrb	r3, [r3, #0]
    c6d6:	b2db      	uxtb	r3, r3
    c6d8:	f003 0310 	and.w	r3, r3, #16
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d15a      	bne.n	c796 <send_nav_ref+0x756>
    c6e0:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	b2db      	uxtb	r3, r3
    c6ec:	461a      	mov	r2, r3
    c6ee:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f6:	5c9a      	ldrb	r2, [r3, r2]
    c6f8:	f24a 731b 	movw	r3, #42779	; 0xa71b
    c6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c700:	701a      	strb	r2, [r3, #0]
    c702:	f24a 731c 	movw	r3, #42780	; 0xa71c
    c706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70a:	2200      	movs	r2, #0
    c70c:	701a      	strb	r2, [r3, #0]
    c70e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	b2db      	uxtb	r3, r3
    c71a:	3301      	adds	r3, #1
    c71c:	b2da      	uxtb	r2, r3
    c71e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c726:	701a      	strb	r2, [r3, #0]
    c728:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	b2db      	uxtb	r3, r3
    c734:	2bff      	cmp	r3, #255	; 0xff
    c736:	d105      	bne.n	c744 <send_nav_ref+0x704>
    c738:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c740:	2200      	movs	r2, #0
    c742:	701a      	strb	r2, [r3, #0]
    c744:	f242 0338 	movw	r3, #8248	; 0x2038
    c748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c74c:	f242 0238 	movw	r2, #8248	; 0x2038
    c750:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c754:	7812      	ldrb	r2, [r2, #0]
    c756:	b2d2      	uxtb	r2, r2
    c758:	f042 0201 	orr.w	r2, r2, #1
    c75c:	b2d2      	uxtb	r2, r2
    c75e:	701a      	strb	r2, [r3, #0]
    c760:	f242 0339 	movw	r3, #8249	; 0x2039
    c764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c768:	f242 0239 	movw	r2, #8249	; 0x2039
    c76c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c770:	7812      	ldrb	r2, [r2, #0]
    c772:	b2d2      	uxtb	r2, r2
    c774:	f042 0210 	orr.w	r2, r2, #16
    c778:	b2d2      	uxtb	r2, r2
    c77a:	701a      	strb	r2, [r3, #0]
    c77c:	e00b      	b.n	c796 <send_nav_ref+0x756>
    c77e:	f24a 6318 	movw	r3, #42520	; 0xa618
    c782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c786:	781b      	ldrb	r3, [r3, #0]
    c788:	3301      	adds	r3, #1
    c78a:	b2da      	uxtb	r2, r3
    c78c:	f24a 6318 	movw	r3, #42520	; 0xa618
    c790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c794:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    c796:	46bd      	mov	sp, r7
    c798:	f85d 7b04 	ldr.w	r7, [sp], #4
    c79c:	4770      	bx	lr
    c79e:	bf00      	nop
    c7a0:	00018197 	.word	0x00018197

0000c7a4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    c7a4:	b480      	push	{r7}
    c7a6:	b083      	sub	sp, #12
    c7a8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    c7aa:	f24a 7320 	movw	r3, #42784	; 0xa720
    c7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b2:	8a1b      	ldrh	r3, [r3, #16]
    c7b4:	b21b      	sxth	r3, r3
    c7b6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    c7ba:	db0d      	blt.n	c7d8 <inflight_calib_mode_update+0x34>
    c7bc:	f24a 7320 	movw	r3, #42784	; 0xa720
    c7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c4:	8a1b      	ldrh	r3, [r3, #16]
    c7c6:	b21a      	sxth	r2, r3
    c7c8:	f640 437f 	movw	r3, #3199	; 0xc7f
    c7cc:	429a      	cmp	r2, r3
    c7ce:	bfd4      	ite	le
    c7d0:	2300      	movle	r3, #0
    c7d2:	2301      	movgt	r3, #1
    c7d4:	b2db      	uxtb	r3, r3
    c7d6:	e000      	b.n	c7da <inflight_calib_mode_update+0x36>
    c7d8:	2302      	movs	r3, #2
    c7da:	71fb      	strb	r3, [r7, #7]
    c7dc:	f64a 432c 	movw	r3, #44076	; 0xac2c
    c7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	79fa      	ldrb	r2, [r7, #7]
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d007      	beq.n	c7fc <inflight_calib_mode_update+0x58>
    c7ec:	f64a 432c 	movw	r3, #44076	; 0xac2c
    c7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f4:	79fa      	ldrb	r2, [r7, #7]
    c7f6:	701a      	strb	r2, [r3, #0]
    c7f8:	2301      	movs	r3, #1
    c7fa:	e000      	b.n	c7fe <inflight_calib_mode_update+0x5a>
    c7fc:	2300      	movs	r3, #0
}
    c7fe:	4618      	mov	r0, r3
    c800:	370c      	adds	r7, #12
    c802:	46bd      	mov	sp, r7
    c804:	f85d 7b04 	ldr.w	r7, [sp], #4
    c808:	4770      	bx	lr
    c80a:	bf00      	nop

0000c80c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    c80c:	b580      	push	{r7, lr}
    c80e:	b082      	sub	sp, #8
    c810:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    c812:	f24a 734e 	movw	r3, #42830	; 0xa74e
    c816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81a:	2201      	movs	r2, #1
    c81c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    c81e:	f24a 734e 	movw	r3, #42830	; 0xa74e
    c822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	b2db      	uxtb	r3, r3
    c82a:	2b00      	cmp	r3, #0
    c82c:	f000 83b8 	beq.w	cfa0 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    c830:	2300      	movs	r3, #0
    c832:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    c834:	f7fa fa9c 	bl	6d70 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    c838:	4b3a      	ldr	r3, [pc, #232]	; (c924 <radio_control_task+0x118>)
    c83a:	781b      	ldrb	r3, [r3, #0]
    c83c:	b2db      	uxtb	r3, r3
    c83e:	f003 0302 	and.w	r3, r3, #2
    c842:	2b00      	cmp	r3, #0
    c844:	d00d      	beq.n	c862 <radio_control_task+0x56>
    c846:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    c84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	2b01      	cmp	r3, #1
    c852:	d00d      	beq.n	c870 <radio_control_task+0x64>
    c854:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    c858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85c:	781b      	ldrb	r3, [r3, #0]
    c85e:	2b00      	cmp	r3, #0
    c860:	d006      	beq.n	c870 <radio_control_task+0x64>
    c862:	f64a 13ac 	movw	r3, #43436	; 0xa9ac
    c866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c86a:	781b      	ldrb	r3, [r3, #0]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d007      	beq.n	c880 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    c870:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    c874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c878:	2203      	movs	r2, #3
    c87a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    c87c:	2301      	movs	r3, #1
    c87e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    c880:	f7fa f950 	bl	6b24 <pprz_mode_update>
    c884:	4603      	mov	r3, r0
    c886:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    c888:	79fa      	ldrb	r2, [r7, #7]
    c88a:	79bb      	ldrb	r3, [r7, #6]
    c88c:	4313      	orrs	r3, r2
    c88e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    c890:	f7fa f994 	bl	6bbc <ir_estim_mode_update>
    c894:	4603      	mov	r3, r0
    c896:	461a      	mov	r2, r3
    c898:	79fb      	ldrb	r3, [r7, #7]
    c89a:	4313      	orrs	r3, r2
    c89c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    c89e:	f7ff ff81 	bl	c7a4 <inflight_calib_mode_update>
    c8a2:	4603      	mov	r3, r0
    c8a4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    c8a6:	797b      	ldrb	r3, [r7, #5]
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d102      	bne.n	c8b2 <radio_control_task+0xa6>
    c8ac:	79bb      	ldrb	r3, [r7, #6]
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d001      	beq.n	c8b6 <radio_control_task+0xaa>
    c8b2:	2301      	movs	r3, #1
    c8b4:	e000      	b.n	c8b8 <radio_control_task+0xac>
    c8b6:	2300      	movs	r3, #0
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	4618      	mov	r0, r3
    c8bc:	f008 fba0 	bl	15000 <inflight_calib>
      mode_changed |= calib_mode_changed;
    c8c0:	79fa      	ldrb	r2, [r7, #7]
    c8c2:	797b      	ldrb	r3, [r7, #5]
    c8c4:	4313      	orrs	r3, r2
    c8c6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    c8c8:	f7fa f9a0 	bl	6c0c <mcu1_status_update>
    c8cc:	4603      	mov	r3, r0
    c8ce:	461a      	mov	r2, r3
    c8d0:	79fb      	ldrb	r3, [r7, #7]
    c8d2:	4313      	orrs	r3, r2
    c8d4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    c8d6:	2301      	movs	r3, #1
    c8d8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    c8da:	79fb      	ldrb	r3, [r7, #7]
    c8dc:	2b00      	cmp	r3, #0
    c8de:	f000 82bc 	beq.w	ce5a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    c8e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    c8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ea:	781a      	ldrb	r2, [r3, #0]
    c8ec:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f4:	781b      	ldrb	r3, [r3, #0]
    c8f6:	b2db      	uxtb	r3, r3
    c8f8:	429a      	cmp	r2, r3
    c8fa:	d315      	bcc.n	c928 <radio_control_task+0x11c>
    c8fc:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c904:	781b      	ldrb	r3, [r3, #0]
    c906:	b2db      	uxtb	r3, r3
    c908:	461a      	mov	r2, r3
    c90a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c912:	781b      	ldrb	r3, [r3, #0]
    c914:	1ad3      	subs	r3, r2, r3
    c916:	33ff      	adds	r3, #255	; 0xff
    c918:	2b09      	cmp	r3, #9
    c91a:	bfd4      	ite	le
    c91c:	2300      	movle	r3, #0
    c91e:	2301      	movgt	r3, #1
    c920:	b2db      	uxtb	r3, r3
    c922:	e013      	b.n	c94c <radio_control_task+0x140>
    c924:	2000a733 	.word	0x2000a733
    c928:	f24a 631a 	movw	r3, #42522	; 0xa61a
    c92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	b2db      	uxtb	r3, r3
    c934:	461a      	mov	r2, r3
    c936:	f24a 6319 	movw	r3, #42521	; 0xa619
    c93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	1ad3      	subs	r3, r2, r3
    c942:	2b09      	cmp	r3, #9
    c944:	bfd4      	ite	le
    c946:	2300      	movle	r3, #0
    c948:	2301      	movgt	r3, #1
    c94a:	b2db      	uxtb	r3, r3
    c94c:	2b00      	cmp	r3, #0
    c94e:	f000 8278 	beq.w	ce42 <radio_control_task+0x636>
    c952:	f24a 6319 	movw	r3, #42521	; 0xa619
    c956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c95a:	781b      	ldrb	r3, [r3, #0]
    c95c:	461a      	mov	r2, r3
    c95e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c966:	2105      	movs	r1, #5
    c968:	5499      	strb	r1, [r3, r2]
    c96a:	f24a 6319 	movw	r3, #42521	; 0xa619
    c96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c972:	781b      	ldrb	r3, [r3, #0]
    c974:	3301      	adds	r3, #1
    c976:	b2da      	uxtb	r2, r3
    c978:	f24a 6319 	movw	r3, #42521	; 0xa619
    c97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c980:	701a      	strb	r2, [r3, #0]
    c982:	f24a 6319 	movw	r3, #42521	; 0xa619
    c986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c98a:	781b      	ldrb	r3, [r3, #0]
    c98c:	2bff      	cmp	r3, #255	; 0xff
    c98e:	d105      	bne.n	c99c <radio_control_task+0x190>
    c990:	f24a 6319 	movw	r3, #42521	; 0xa619
    c994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c998:	2200      	movs	r2, #0
    c99a:	701a      	strb	r2, [r3, #0]
    c99c:	f24a 6319 	movw	r3, #42521	; 0xa619
    c9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a4:	781b      	ldrb	r3, [r3, #0]
    c9a6:	461a      	mov	r2, r3
    c9a8:	f24a 631c 	movw	r3, #42524	; 0xa61c
    c9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b0:	210b      	movs	r1, #11
    c9b2:	5499      	strb	r1, [r3, r2]
    c9b4:	f24a 6319 	movw	r3, #42521	; 0xa619
    c9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	3301      	adds	r3, #1
    c9c0:	b2da      	uxtb	r2, r3
    c9c2:	f24a 6319 	movw	r3, #42521	; 0xa619
    c9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ca:	701a      	strb	r2, [r3, #0]
    c9cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    c9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d4:	781b      	ldrb	r3, [r3, #0]
    c9d6:	2bff      	cmp	r3, #255	; 0xff
    c9d8:	d105      	bne.n	c9e6 <radio_control_task+0x1da>
    c9da:	f24a 6319 	movw	r3, #42521	; 0xa619
    c9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e2:	2200      	movs	r2, #0
    c9e4:	701a      	strb	r2, [r3, #0]
    c9e6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    c9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ee:	220b      	movs	r2, #11
    c9f0:	701a      	strb	r2, [r3, #0]
    c9f2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    c9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fa:	220b      	movs	r2, #11
    c9fc:	701a      	strb	r2, [r3, #0]
    c9fe:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca06:	781b      	ldrb	r3, [r3, #0]
    ca08:	461a      	mov	r2, r3
    ca0a:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    ca0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca12:	7819      	ldrb	r1, [r3, #0]
    ca14:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ca18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1c:	5499      	strb	r1, [r3, r2]
    ca1e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ca22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca26:	781a      	ldrb	r2, [r3, #0]
    ca28:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    ca2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	4413      	add	r3, r2
    ca34:	b2da      	uxtb	r2, r3
    ca36:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ca3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3e:	701a      	strb	r2, [r3, #0]
    ca40:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ca44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca48:	781a      	ldrb	r2, [r3, #0]
    ca4a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ca4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca52:	781b      	ldrb	r3, [r3, #0]
    ca54:	4413      	add	r3, r2
    ca56:	b2da      	uxtb	r2, r3
    ca58:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ca5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca60:	701a      	strb	r2, [r3, #0]
    ca62:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	3301      	adds	r3, #1
    ca6e:	b2da      	uxtb	r2, r3
    ca70:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca78:	701a      	strb	r2, [r3, #0]
    ca7a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca82:	781b      	ldrb	r3, [r3, #0]
    ca84:	2bff      	cmp	r3, #255	; 0xff
    ca86:	d105      	bne.n	ca94 <radio_control_task+0x288>
    ca88:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca90:	2200      	movs	r2, #0
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	f24a 6319 	movw	r3, #42521	; 0xa619
    ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9c:	781b      	ldrb	r3, [r3, #0]
    ca9e:	461a      	mov	r2, r3
    caa0:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    caa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa8:	7819      	ldrb	r1, [r3, #0]
    caaa:	f24a 631c 	movw	r3, #42524	; 0xa61c
    caae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab2:	5499      	strb	r1, [r3, r2]
    cab4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cabc:	781a      	ldrb	r2, [r3, #0]
    cabe:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    cac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac6:	781b      	ldrb	r3, [r3, #0]
    cac8:	4413      	add	r3, r2
    caca:	b2da      	uxtb	r2, r3
    cacc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad4:	701a      	strb	r2, [r3, #0]
    cad6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cade:	781a      	ldrb	r2, [r3, #0]
    cae0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae8:	781b      	ldrb	r3, [r3, #0]
    caea:	4413      	add	r3, r2
    caec:	b2da      	uxtb	r2, r3
    caee:	f24a 731e 	movw	r3, #42782	; 0xa71e
    caf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf6:	701a      	strb	r2, [r3, #0]
    caf8:	f24a 6319 	movw	r3, #42521	; 0xa619
    cafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb00:	781b      	ldrb	r3, [r3, #0]
    cb02:	3301      	adds	r3, #1
    cb04:	b2da      	uxtb	r2, r3
    cb06:	f24a 6319 	movw	r3, #42521	; 0xa619
    cb0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb0e:	701a      	strb	r2, [r3, #0]
    cb10:	f24a 6319 	movw	r3, #42521	; 0xa619
    cb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	2bff      	cmp	r3, #255	; 0xff
    cb1c:	d105      	bne.n	cb2a <radio_control_task+0x31e>
    cb1e:	f24a 6319 	movw	r3, #42521	; 0xa619
    cb22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb26:	2200      	movs	r2, #0
    cb28:	701a      	strb	r2, [r3, #0]
    cb2a:	f24a 6319 	movw	r3, #42521	; 0xa619
    cb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	461a      	mov	r2, r3
    cb36:	f64a 432c 	movw	r3, #44076	; 0xac2c
    cb3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb3e:	7819      	ldrb	r1, [r3, #0]
    cb40:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb48:	5499      	strb	r1, [r3, r2]
    cb4a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb52:	781a      	ldrb	r2, [r3, #0]
    cb54:	f64a 432c 	movw	r3, #44076	; 0xac2c
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	781b      	ldrb	r3, [r3, #0]
    cb5e:	4413      	add	r3, r2
    cb60:	b2da      	uxtb	r2, r3
    cb62:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb6a:	701a      	strb	r2, [r3, #0]
    cb6c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb74:	781a      	ldrb	r2, [r3, #0]
    cb76:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7e:	781b      	ldrb	r3, [r3, #0]
    cb80:	4413      	add	r3, r2
    cb82:	b2da      	uxtb	r2, r3
    cb84:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	701a      	strb	r2, [r3, #0]
    cb8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    cb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	3301      	adds	r3, #1
    cb9a:	b2da      	uxtb	r2, r3
    cb9c:	f24a 6319 	movw	r3, #42521	; 0xa619
    cba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba4:	701a      	strb	r2, [r3, #0]
    cba6:	f24a 6319 	movw	r3, #42521	; 0xa619
    cbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	2bff      	cmp	r3, #255	; 0xff
    cbb2:	d105      	bne.n	cbc0 <radio_control_task+0x3b4>
    cbb4:	f24a 6319 	movw	r3, #42521	; 0xa619
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	2200      	movs	r2, #0
    cbbe:	701a      	strb	r2, [r3, #0]
    cbc0:	f24a 6319 	movw	r3, #42521	; 0xa619
    cbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	461a      	mov	r2, r3
    cbcc:	f24a 6303 	movw	r3, #42499	; 0xa603
    cbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd4:	7819      	ldrb	r1, [r3, #0]
    cbd6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbde:	5499      	strb	r1, [r3, r2]
    cbe0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe8:	781a      	ldrb	r2, [r3, #0]
    cbea:	f24a 6303 	movw	r3, #42499	; 0xa603
    cbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	4413      	add	r3, r2
    cbf6:	b2da      	uxtb	r2, r3
    cbf8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0a:	781a      	ldrb	r2, [r3, #0]
    cc0c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc14:	781b      	ldrb	r3, [r3, #0]
    cc16:	4413      	add	r3, r2
    cc18:	b2da      	uxtb	r2, r3
    cc1a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc22:	701a      	strb	r2, [r3, #0]
    cc24:	f24a 6319 	movw	r3, #42521	; 0xa619
    cc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc2c:	781b      	ldrb	r3, [r3, #0]
    cc2e:	3301      	adds	r3, #1
    cc30:	b2da      	uxtb	r2, r3
    cc32:	f24a 6319 	movw	r3, #42521	; 0xa619
    cc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc3a:	701a      	strb	r2, [r3, #0]
    cc3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    cc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc44:	781b      	ldrb	r3, [r3, #0]
    cc46:	2bff      	cmp	r3, #255	; 0xff
    cc48:	d105      	bne.n	cc56 <radio_control_task+0x44a>
    cc4a:	f24a 6319 	movw	r3, #42521	; 0xa619
    cc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc52:	2200      	movs	r2, #0
    cc54:	701a      	strb	r2, [r3, #0]
    cc56:	f24a 6319 	movw	r3, #42521	; 0xa619
    cc5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	461a      	mov	r2, r3
    cc62:	f240 0380 	movw	r3, #128	; 0x80
    cc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6a:	7819      	ldrb	r1, [r3, #0]
    cc6c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc74:	5499      	strb	r1, [r3, r2]
    cc76:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc7e:	781a      	ldrb	r2, [r3, #0]
    cc80:	f240 0380 	movw	r3, #128	; 0x80
    cc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	4413      	add	r3, r2
    cc8c:	b2da      	uxtb	r2, r3
    cc8e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cc92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc96:	701a      	strb	r2, [r3, #0]
    cc98:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca0:	781a      	ldrb	r2, [r3, #0]
    cca2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    cca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccaa:	781b      	ldrb	r3, [r3, #0]
    ccac:	4413      	add	r3, r2
    ccae:	b2da      	uxtb	r2, r3
    ccb0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ccb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb8:	701a      	strb	r2, [r3, #0]
    ccba:	f24a 6319 	movw	r3, #42521	; 0xa619
    ccbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	3301      	adds	r3, #1
    ccc6:	b2da      	uxtb	r2, r3
    ccc8:	f24a 6319 	movw	r3, #42521	; 0xa619
    cccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd0:	701a      	strb	r2, [r3, #0]
    ccd2:	f24a 6319 	movw	r3, #42521	; 0xa619
    ccd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	2bff      	cmp	r3, #255	; 0xff
    ccde:	d105      	bne.n	ccec <radio_control_task+0x4e0>
    cce0:	f24a 6319 	movw	r3, #42521	; 0xa619
    cce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce8:	2200      	movs	r2, #0
    ccea:	701a      	strb	r2, [r3, #0]
    ccec:	f24a 6319 	movw	r3, #42521	; 0xa619
    ccf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf4:	781b      	ldrb	r3, [r3, #0]
    ccf6:	461a      	mov	r2, r3
    ccf8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ccfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd00:	7819      	ldrb	r1, [r3, #0]
    cd02:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd0a:	5499      	strb	r1, [r3, r2]
    cd0c:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd14:	781b      	ldrb	r3, [r3, #0]
    cd16:	3301      	adds	r3, #1
    cd18:	b2da      	uxtb	r2, r3
    cd1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd22:	701a      	strb	r2, [r3, #0]
    cd24:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2c:	781b      	ldrb	r3, [r3, #0]
    cd2e:	2bff      	cmp	r3, #255	; 0xff
    cd30:	d105      	bne.n	cd3e <radio_control_task+0x532>
    cd32:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3a:	2200      	movs	r2, #0
    cd3c:	701a      	strb	r2, [r3, #0]
    cd3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd46:	781b      	ldrb	r3, [r3, #0]
    cd48:	461a      	mov	r2, r3
    cd4a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    cd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd52:	7819      	ldrb	r1, [r3, #0]
    cd54:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd5c:	5499      	strb	r1, [r3, r2]
    cd5e:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	3301      	adds	r3, #1
    cd6a:	b2da      	uxtb	r2, r3
    cd6c:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd74:	701a      	strb	r2, [r3, #0]
    cd76:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	2bff      	cmp	r3, #255	; 0xff
    cd82:	d105      	bne.n	cd90 <radio_control_task+0x584>
    cd84:	f24a 6319 	movw	r3, #42521	; 0xa619
    cd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd8c:	2200      	movs	r2, #0
    cd8e:	701a      	strb	r2, [r3, #0]
    cd90:	f242 0339 	movw	r3, #8249	; 0x2039
    cd94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd98:	781b      	ldrb	r3, [r3, #0]
    cd9a:	b2db      	uxtb	r3, r3
    cd9c:	f003 0310 	and.w	r3, r3, #16
    cda0:	2b00      	cmp	r3, #0
    cda2:	d15a      	bne.n	ce5a <radio_control_task+0x64e>
    cda4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	b2db      	uxtb	r3, r3
    cdb0:	461a      	mov	r2, r3
    cdb2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    cdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdba:	5c9a      	ldrb	r2, [r3, r2]
    cdbc:	f24a 731b 	movw	r3, #42779	; 0xa71b
    cdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc4:	701a      	strb	r2, [r3, #0]
    cdc6:	f24a 731c 	movw	r3, #42780	; 0xa71c
    cdca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdce:	2200      	movs	r2, #0
    cdd0:	701a      	strb	r2, [r3, #0]
    cdd2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdda:	781b      	ldrb	r3, [r3, #0]
    cddc:	b2db      	uxtb	r3, r3
    cdde:	3301      	adds	r3, #1
    cde0:	b2da      	uxtb	r2, r3
    cde2:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdea:	701a      	strb	r2, [r3, #0]
    cdec:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	b2db      	uxtb	r3, r3
    cdf8:	2bff      	cmp	r3, #255	; 0xff
    cdfa:	d105      	bne.n	ce08 <radio_control_task+0x5fc>
    cdfc:	f24a 631a 	movw	r3, #42522	; 0xa61a
    ce00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce04:	2200      	movs	r2, #0
    ce06:	701a      	strb	r2, [r3, #0]
    ce08:	f242 0338 	movw	r3, #8248	; 0x2038
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	f242 0238 	movw	r2, #8248	; 0x2038
    ce14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce18:	7812      	ldrb	r2, [r2, #0]
    ce1a:	b2d2      	uxtb	r2, r2
    ce1c:	f042 0201 	orr.w	r2, r2, #1
    ce20:	b2d2      	uxtb	r2, r2
    ce22:	701a      	strb	r2, [r3, #0]
    ce24:	f242 0339 	movw	r3, #8249	; 0x2039
    ce28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce2c:	f242 0239 	movw	r2, #8249	; 0x2039
    ce30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce34:	7812      	ldrb	r2, [r2, #0]
    ce36:	b2d2      	uxtb	r2, r2
    ce38:	f042 0210 	orr.w	r2, r2, #16
    ce3c:	b2d2      	uxtb	r2, r2
    ce3e:	701a      	strb	r2, [r3, #0]
    ce40:	e00b      	b.n	ce5a <radio_control_task+0x64e>
    ce42:	f24a 6318 	movw	r3, #42520	; 0xa618
    ce46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce4a:	781b      	ldrb	r3, [r3, #0]
    ce4c:	3301      	adds	r3, #1
    ce4e:	b2da      	uxtb	r2, r3
    ce50:	f24a 6318 	movw	r3, #42520	; 0xa618
    ce54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce58:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    ce5a:	f24a 7320 	movw	r3, #42784	; 0xa720
    ce5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce62:	885b      	ldrh	r3, [r3, #2]
    ce64:	b21b      	sxth	r3, r3
    ce66:	4618      	mov	r0, r3
    ce68:	f00a fe06 	bl	17a78 <__aeabi_i2f>
    ce6c:	4603      	mov	r3, r0
    ce6e:	4618      	mov	r0, r3
    ce70:	f04f 0100 	mov.w	r1, #0
    ce74:	f2c4 6116 	movt	r1, #17942	; 0x4616
    ce78:	f00a ff06 	bl	17c88 <__aeabi_fdiv>
    ce7c:	4603      	mov	r3, r0
    ce7e:	4618      	mov	r0, r3
    ce80:	f00a f9ba 	bl	171f8 <__aeabi_f2d>
    ce84:	4602      	mov	r2, r0
    ce86:	460b      	mov	r3, r1
    ce88:	4610      	mov	r0, r2
    ce8a:	4619      	mov	r1, r3
    ce8c:	a346      	add	r3, pc, #280	; (adr r3, cfa8 <radio_control_task+0x79c>)
    ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce92:	f00a fa05 	bl	172a0 <__aeabi_dmul>
    ce96:	4602      	mov	r2, r0
    ce98:	460b      	mov	r3, r1
    ce9a:	4610      	mov	r0, r2
    ce9c:	4619      	mov	r1, r3
    ce9e:	f04f 0200 	mov.w	r2, #0
    cea2:	f04f 0300 	mov.w	r3, #0
    cea6:	f00a f849 	bl	16f3c <__adddf3>
    ceaa:	4602      	mov	r2, r0
    ceac:	460b      	mov	r3, r1
    ceae:	4610      	mov	r0, r2
    ceb0:	4619      	mov	r1, r3
    ceb2:	f00a fcd7 	bl	17864 <__aeabi_d2f>
    ceb6:	4602      	mov	r2, r0
    ceb8:	f64a 1344 	movw	r3, #43332	; 0xa944
    cebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    cec2:	f24a 7320 	movw	r3, #42784	; 0xa720
    cec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceca:	889b      	ldrh	r3, [r3, #4]
    cecc:	b21b      	sxth	r3, r3
    cece:	4618      	mov	r0, r3
    ced0:	f00a fdd2 	bl	17a78 <__aeabi_i2f>
    ced4:	4603      	mov	r3, r0
    ced6:	4618      	mov	r0, r3
    ced8:	f04f 0100 	mov.w	r1, #0
    cedc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    cee0:	f00a fed2 	bl	17c88 <__aeabi_fdiv>
    cee4:	4603      	mov	r3, r0
    cee6:	4618      	mov	r0, r3
    cee8:	f00a f986 	bl	171f8 <__aeabi_f2d>
    ceec:	4602      	mov	r2, r0
    ceee:	460b      	mov	r3, r1
    cef0:	4610      	mov	r0, r2
    cef2:	4619      	mov	r1, r3
    cef4:	f04f 0200 	mov.w	r2, #0
    cef8:	f04f 0300 	mov.w	r3, #0
    cefc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    cf00:	f00a f9ce 	bl	172a0 <__aeabi_dmul>
    cf04:	4602      	mov	r2, r0
    cf06:	460b      	mov	r3, r1
    cf08:	4610      	mov	r0, r2
    cf0a:	4619      	mov	r1, r3
    cf0c:	f04f 0200 	mov.w	r2, #0
    cf10:	f04f 0300 	mov.w	r3, #0
    cf14:	f00a f812 	bl	16f3c <__adddf3>
    cf18:	4602      	mov	r2, r0
    cf1a:	460b      	mov	r3, r1
    cf1c:	4610      	mov	r0, r2
    cf1e:	4619      	mov	r1, r3
    cf20:	f00a fca0 	bl	17864 <__aeabi_d2f>
    cf24:	4602      	mov	r2, r0
    cf26:	f64a 1348 	movw	r3, #43336	; 0xa948
    cf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf2e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    cf30:	f24a 7320 	movw	r3, #42784	; 0xa720
    cf34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf38:	881a      	ldrh	r2, [r3, #0]
    cf3a:	f64a 134c 	movw	r3, #43340	; 0xa94c
    cf3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf42:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    cf44:	f24a 7320 	movw	r3, #42784	; 0xa720
    cf48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf4c:	7c9a      	ldrb	r2, [r3, #18]
    cf4e:	f24a 6304 	movw	r3, #42500	; 0xa604
    cf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf56:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    cf58:	f24a 7320 	movw	r3, #42784	; 0xa720
    cf5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf60:	7d5a      	ldrb	r2, [r3, #21]
    cf62:	f24a 6302 	movw	r3, #42498	; 0xa602
    cf66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6a:	701a      	strb	r2, [r3, #0]

    events_update();
    cf6c:	f7f9 fe7e 	bl	6c6c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    cf70:	f7f8 fc7e 	bl	5870 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    cf74:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    cf78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf7c:	781b      	ldrb	r3, [r3, #0]
    cf7e:	2b02      	cmp	r3, #2
    cf80:	d10e      	bne.n	cfa0 <radio_control_task+0x794>
    cf82:	f24a 7320 	movw	r3, #42784	; 0xa720
    cf86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8a:	881b      	ldrh	r3, [r3, #0]
    cf8c:	b21b      	sxth	r3, r3
    cf8e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    cf92:	dd05      	ble.n	cfa0 <radio_control_task+0x794>
	launch = TRUE;
    cf94:	f24a 6310 	movw	r3, #42512	; 0xa610
    cf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9c:	2201      	movs	r2, #1
    cf9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    cfa0:	3708      	adds	r7, #8
    cfa2:	46bd      	mov	sp, r7
    cfa4:	bd80      	pop	{r7, pc}
    cfa6:	bf00      	nop
    cfa8:	33333333 	.word	0x33333333
    cfac:	bfe33333 	.word	0xbfe33333

0000cfb0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    cfb0:	b580      	push	{r7, lr}
    cfb2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    cfb4:	f24a 53fe 	movw	r3, #42494	; 0xa5fe
    cfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfbc:	2203      	movs	r2, #3
    cfbe:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    cfc0:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	2b03      	cmp	r3, #3
    cfcc:	d102      	bne.n	cfd4 <navigation_update+0x24>
    nav_home();
    cfce:	f007 fa9b 	bl	14508 <nav_home>
    cfd2:	e001      	b.n	cfd8 <navigation_update+0x28>
  else
    nav_update();
    cfd4:	f007 fabe 	bl	14554 <nav_update>
}
    cfd8:	bd80      	pop	{r7, pc}
    cfda:	bf00      	nop

0000cfdc <send_nav_values>:

void send_nav_values(void){
    cfdc:	b480      	push	{r7}
    cfde:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    cfe0:	f24a 6319 	movw	r3, #42521	; 0xa619
    cfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe8:	781a      	ldrb	r2, [r3, #0]
    cfea:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	b2db      	uxtb	r3, r3
    cff6:	429a      	cmp	r2, r3
    cff8:	d313      	bcc.n	d022 <send_nav_values+0x46>
    cffa:	f24a 631a 	movw	r3, #42522	; 0xa61a
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	781b      	ldrb	r3, [r3, #0]
    d004:	b2db      	uxtb	r3, r3
    d006:	461a      	mov	r2, r3
    d008:	f24a 6319 	movw	r3, #42521	; 0xa619
    d00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d010:	781b      	ldrb	r3, [r3, #0]
    d012:	1ad3      	subs	r3, r2, r3
    d014:	33ff      	adds	r3, #255	; 0xff
    d016:	2b1e      	cmp	r3, #30
    d018:	bfd4      	ite	le
    d01a:	2300      	movle	r3, #0
    d01c:	2301      	movgt	r3, #1
    d01e:	b2db      	uxtb	r3, r3
    d020:	e011      	b.n	d046 <send_nav_values+0x6a>
    d022:	f24a 631a 	movw	r3, #42522	; 0xa61a
    d026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	b2db      	uxtb	r3, r3
    d02e:	461a      	mov	r2, r3
    d030:	f24a 6319 	movw	r3, #42521	; 0xa619
    d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	1ad3      	subs	r3, r2, r3
    d03c:	2b1e      	cmp	r3, #30
    d03e:	bfd4      	ite	le
    d040:	2300      	movle	r3, #0
    d042:	2301      	movgt	r3, #1
    d044:	b2db      	uxtb	r3, r3
    d046:	2b00      	cmp	r3, #0
    d048:	f001 8094 	beq.w	e174 <send_nav_values+0x1198>
    d04c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	461a      	mov	r2, r3
    d058:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d060:	2105      	movs	r1, #5
    d062:	5499      	strb	r1, [r3, r2]
    d064:	f24a 6319 	movw	r3, #42521	; 0xa619
    d068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	3301      	adds	r3, #1
    d070:	b2da      	uxtb	r2, r3
    d072:	f24a 6319 	movw	r3, #42521	; 0xa619
    d076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d07a:	701a      	strb	r2, [r3, #0]
    d07c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	2bff      	cmp	r3, #255	; 0xff
    d088:	d105      	bne.n	d096 <send_nav_values+0xba>
    d08a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d092:	2200      	movs	r2, #0
    d094:	701a      	strb	r2, [r3, #0]
    d096:	f24a 6319 	movw	r3, #42521	; 0xa619
    d09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	461a      	mov	r2, r3
    d0a2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0aa:	210a      	movs	r1, #10
    d0ac:	5499      	strb	r1, [r3, r2]
    d0ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    d0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	3301      	adds	r3, #1
    d0ba:	b2da      	uxtb	r2, r3
    d0bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c4:	701a      	strb	r2, [r3, #0]
    d0c6:	f24a 6319 	movw	r3, #42521	; 0xa619
    d0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	2bff      	cmp	r3, #255	; 0xff
    d0d2:	d105      	bne.n	d0e0 <send_nav_values+0x104>
    d0d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    d0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0dc:	2200      	movs	r2, #0
    d0de:	701a      	strb	r2, [r3, #0]
    d0e0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e8:	220a      	movs	r2, #10
    d0ea:	701a      	strb	r2, [r3, #0]
    d0ec:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f4:	220a      	movs	r2, #10
    d0f6:	701a      	strb	r2, [r3, #0]
    d0f8:	f24a 6319 	movw	r3, #42521	; 0xa619
    d0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d100:	781b      	ldrb	r3, [r3, #0]
    d102:	461a      	mov	r2, r3
    d104:	f64a 1371 	movw	r3, #43377	; 0xa971
    d108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d10c:	7819      	ldrb	r1, [r3, #0]
    d10e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d116:	5499      	strb	r1, [r3, r2]
    d118:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d120:	781a      	ldrb	r2, [r3, #0]
    d122:	f64a 1371 	movw	r3, #43377	; 0xa971
    d126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	4413      	add	r3, r2
    d12e:	b2da      	uxtb	r2, r3
    d130:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d138:	701a      	strb	r2, [r3, #0]
    d13a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d142:	781a      	ldrb	r2, [r3, #0]
    d144:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	4413      	add	r3, r2
    d150:	b2da      	uxtb	r2, r3
    d152:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15a:	701a      	strb	r2, [r3, #0]
    d15c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	3301      	adds	r3, #1
    d168:	b2da      	uxtb	r2, r3
    d16a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d172:	701a      	strb	r2, [r3, #0]
    d174:	f24a 6319 	movw	r3, #42521	; 0xa619
    d178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	2bff      	cmp	r3, #255	; 0xff
    d180:	d105      	bne.n	d18e <send_nav_values+0x1b2>
    d182:	f24a 6319 	movw	r3, #42521	; 0xa619
    d186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18a:	2200      	movs	r2, #0
    d18c:	701a      	strb	r2, [r3, #0]
    d18e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d196:	781b      	ldrb	r3, [r3, #0]
    d198:	461a      	mov	r2, r3
    d19a:	f64a 1370 	movw	r3, #43376	; 0xa970
    d19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a2:	7819      	ldrb	r1, [r3, #0]
    d1a4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ac:	5499      	strb	r1, [r3, r2]
    d1ae:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b6:	781a      	ldrb	r2, [r3, #0]
    d1b8:	f64a 1370 	movw	r3, #43376	; 0xa970
    d1bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c0:	781b      	ldrb	r3, [r3, #0]
    d1c2:	4413      	add	r3, r2
    d1c4:	b2da      	uxtb	r2, r3
    d1c6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ce:	701a      	strb	r2, [r3, #0]
    d1d0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d8:	781a      	ldrb	r2, [r3, #0]
    d1da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e2:	781b      	ldrb	r3, [r3, #0]
    d1e4:	4413      	add	r3, r2
    d1e6:	b2da      	uxtb	r2, r3
    d1e8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f0:	701a      	strb	r2, [r3, #0]
    d1f2:	f24a 6319 	movw	r3, #42521	; 0xa619
    d1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1fa:	781b      	ldrb	r3, [r3, #0]
    d1fc:	3301      	adds	r3, #1
    d1fe:	b2da      	uxtb	r2, r3
    d200:	f24a 6319 	movw	r3, #42521	; 0xa619
    d204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	2bff      	cmp	r3, #255	; 0xff
    d216:	d105      	bne.n	d224 <send_nav_values+0x248>
    d218:	f24a 6319 	movw	r3, #42521	; 0xa619
    d21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d220:	2200      	movs	r2, #0
    d222:	701a      	strb	r2, [r3, #0]
    d224:	f24a 6319 	movw	r3, #42521	; 0xa619
    d228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22c:	781b      	ldrb	r3, [r3, #0]
    d22e:	461a      	mov	r2, r3
    d230:	f64a 33cc 	movw	r3, #43980	; 0xabcc
    d234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d238:	7819      	ldrb	r1, [r3, #0]
    d23a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d242:	5499      	strb	r1, [r3, r2]
    d244:	f64a 33cc 	movw	r3, #43980	; 0xabcc
    d248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d24c:	781a      	ldrb	r2, [r3, #0]
    d24e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	4413      	add	r3, r2
    d25a:	b2da      	uxtb	r2, r3
    d25c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d264:	701a      	strb	r2, [r3, #0]
    d266:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d26e:	781a      	ldrb	r2, [r3, #0]
    d270:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	4413      	add	r3, r2
    d27c:	b2da      	uxtb	r2, r3
    d27e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d286:	701a      	strb	r2, [r3, #0]
    d288:	f24a 6319 	movw	r3, #42521	; 0xa619
    d28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d290:	781b      	ldrb	r3, [r3, #0]
    d292:	3301      	adds	r3, #1
    d294:	b2da      	uxtb	r2, r3
    d296:	f24a 6319 	movw	r3, #42521	; 0xa619
    d29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d29e:	701a      	strb	r2, [r3, #0]
    d2a0:	f24a 6319 	movw	r3, #42521	; 0xa619
    d2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	2bff      	cmp	r3, #255	; 0xff
    d2ac:	d105      	bne.n	d2ba <send_nav_values+0x2de>
    d2ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    d2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b6:	2200      	movs	r2, #0
    d2b8:	701a      	strb	r2, [r3, #0]
    d2ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    d2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c2:	781b      	ldrb	r3, [r3, #0]
    d2c4:	461a      	mov	r2, r3
    d2c6:	f64a 33cc 	movw	r3, #43980	; 0xabcc
    d2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ce:	7859      	ldrb	r1, [r3, #1]
    d2d0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d8:	5499      	strb	r1, [r3, r2]
    d2da:	4bd2      	ldr	r3, [pc, #840]	; (d624 <send_nav_values+0x648>)
    d2dc:	781a      	ldrb	r2, [r3, #0]
    d2de:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e6:	781b      	ldrb	r3, [r3, #0]
    d2e8:	4413      	add	r3, r2
    d2ea:	b2da      	uxtb	r2, r3
    d2ec:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f4:	701a      	strb	r2, [r3, #0]
    d2f6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2fe:	781a      	ldrb	r2, [r3, #0]
    d300:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d308:	781b      	ldrb	r3, [r3, #0]
    d30a:	4413      	add	r3, r2
    d30c:	b2da      	uxtb	r2, r3
    d30e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d316:	701a      	strb	r2, [r3, #0]
    d318:	f24a 6319 	movw	r3, #42521	; 0xa619
    d31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d320:	781b      	ldrb	r3, [r3, #0]
    d322:	3301      	adds	r3, #1
    d324:	b2da      	uxtb	r2, r3
    d326:	f24a 6319 	movw	r3, #42521	; 0xa619
    d32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32e:	701a      	strb	r2, [r3, #0]
    d330:	f24a 6319 	movw	r3, #42521	; 0xa619
    d334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d338:	781b      	ldrb	r3, [r3, #0]
    d33a:	2bff      	cmp	r3, #255	; 0xff
    d33c:	d105      	bne.n	d34a <send_nav_values+0x36e>
    d33e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d346:	2200      	movs	r2, #0
    d348:	701a      	strb	r2, [r3, #0]
    d34a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d352:	781b      	ldrb	r3, [r3, #0]
    d354:	461a      	mov	r2, r3
    d356:	f64a 33cc 	movw	r3, #43980	; 0xabcc
    d35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35e:	7899      	ldrb	r1, [r3, #2]
    d360:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d368:	5499      	strb	r1, [r3, r2]
    d36a:	4baf      	ldr	r3, [pc, #700]	; (d628 <send_nav_values+0x64c>)
    d36c:	781a      	ldrb	r2, [r3, #0]
    d36e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	4413      	add	r3, r2
    d37a:	b2da      	uxtb	r2, r3
    d37c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d384:	701a      	strb	r2, [r3, #0]
    d386:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d38e:	781a      	ldrb	r2, [r3, #0]
    d390:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d398:	781b      	ldrb	r3, [r3, #0]
    d39a:	4413      	add	r3, r2
    d39c:	b2da      	uxtb	r2, r3
    d39e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a6:	701a      	strb	r2, [r3, #0]
    d3a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	3301      	adds	r3, #1
    d3b4:	b2da      	uxtb	r2, r3
    d3b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    d3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3be:	701a      	strb	r2, [r3, #0]
    d3c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    d3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c8:	781b      	ldrb	r3, [r3, #0]
    d3ca:	2bff      	cmp	r3, #255	; 0xff
    d3cc:	d105      	bne.n	d3da <send_nav_values+0x3fe>
    d3ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    d3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3d6:	2200      	movs	r2, #0
    d3d8:	701a      	strb	r2, [r3, #0]
    d3da:	f24a 6319 	movw	r3, #42521	; 0xa619
    d3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3e2:	781b      	ldrb	r3, [r3, #0]
    d3e4:	461a      	mov	r2, r3
    d3e6:	f64a 33cc 	movw	r3, #43980	; 0xabcc
    d3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ee:	78d9      	ldrb	r1, [r3, #3]
    d3f0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f8:	5499      	strb	r1, [r3, r2]
    d3fa:	4b8c      	ldr	r3, [pc, #560]	; (d62c <send_nav_values+0x650>)
    d3fc:	781a      	ldrb	r2, [r3, #0]
    d3fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d406:	781b      	ldrb	r3, [r3, #0]
    d408:	4413      	add	r3, r2
    d40a:	b2da      	uxtb	r2, r3
    d40c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d414:	701a      	strb	r2, [r3, #0]
    d416:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41e:	781a      	ldrb	r2, [r3, #0]
    d420:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d428:	781b      	ldrb	r3, [r3, #0]
    d42a:	4413      	add	r3, r2
    d42c:	b2da      	uxtb	r2, r3
    d42e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d436:	701a      	strb	r2, [r3, #0]
    d438:	f24a 6319 	movw	r3, #42521	; 0xa619
    d43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d440:	781b      	ldrb	r3, [r3, #0]
    d442:	3301      	adds	r3, #1
    d444:	b2da      	uxtb	r2, r3
    d446:	f24a 6319 	movw	r3, #42521	; 0xa619
    d44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d44e:	701a      	strb	r2, [r3, #0]
    d450:	f24a 6319 	movw	r3, #42521	; 0xa619
    d454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d458:	781b      	ldrb	r3, [r3, #0]
    d45a:	2bff      	cmp	r3, #255	; 0xff
    d45c:	d105      	bne.n	d46a <send_nav_values+0x48e>
    d45e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d466:	2200      	movs	r2, #0
    d468:	701a      	strb	r2, [r3, #0]
    d46a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d472:	781b      	ldrb	r3, [r3, #0]
    d474:	461a      	mov	r2, r3
    d476:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    d47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47e:	7819      	ldrb	r1, [r3, #0]
    d480:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d488:	5499      	strb	r1, [r3, r2]
    d48a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    d48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d492:	781a      	ldrb	r2, [r3, #0]
    d494:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d49c:	781b      	ldrb	r3, [r3, #0]
    d49e:	4413      	add	r3, r2
    d4a0:	b2da      	uxtb	r2, r3
    d4a2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4aa:	701a      	strb	r2, [r3, #0]
    d4ac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b4:	781a      	ldrb	r2, [r3, #0]
    d4b6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4be:	781b      	ldrb	r3, [r3, #0]
    d4c0:	4413      	add	r3, r2
    d4c2:	b2da      	uxtb	r2, r3
    d4c4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4cc:	701a      	strb	r2, [r3, #0]
    d4ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    d4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d6:	781b      	ldrb	r3, [r3, #0]
    d4d8:	3301      	adds	r3, #1
    d4da:	b2da      	uxtb	r2, r3
    d4dc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e4:	701a      	strb	r2, [r3, #0]
    d4e6:	f24a 6319 	movw	r3, #42521	; 0xa619
    d4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ee:	781b      	ldrb	r3, [r3, #0]
    d4f0:	2bff      	cmp	r3, #255	; 0xff
    d4f2:	d105      	bne.n	d500 <send_nav_values+0x524>
    d4f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    d4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4fc:	2200      	movs	r2, #0
    d4fe:	701a      	strb	r2, [r3, #0]
    d500:	f24a 6319 	movw	r3, #42521	; 0xa619
    d504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d508:	781b      	ldrb	r3, [r3, #0]
    d50a:	461a      	mov	r2, r3
    d50c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    d510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d514:	7859      	ldrb	r1, [r3, #1]
    d516:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51e:	5499      	strb	r1, [r3, r2]
    d520:	4b43      	ldr	r3, [pc, #268]	; (d630 <send_nav_values+0x654>)
    d522:	781a      	ldrb	r2, [r3, #0]
    d524:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	4413      	add	r3, r2
    d530:	b2da      	uxtb	r2, r3
    d532:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53a:	701a      	strb	r2, [r3, #0]
    d53c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d544:	781a      	ldrb	r2, [r3, #0]
    d546:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	4413      	add	r3, r2
    d552:	b2da      	uxtb	r2, r3
    d554:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55c:	701a      	strb	r2, [r3, #0]
    d55e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	3301      	adds	r3, #1
    d56a:	b2da      	uxtb	r2, r3
    d56c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d574:	701a      	strb	r2, [r3, #0]
    d576:	f24a 6319 	movw	r3, #42521	; 0xa619
    d57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2bff      	cmp	r3, #255	; 0xff
    d582:	d105      	bne.n	d590 <send_nav_values+0x5b4>
    d584:	f24a 6319 	movw	r3, #42521	; 0xa619
    d588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d58c:	2200      	movs	r2, #0
    d58e:	701a      	strb	r2, [r3, #0]
    d590:	f24a 6319 	movw	r3, #42521	; 0xa619
    d594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d598:	781b      	ldrb	r3, [r3, #0]
    d59a:	461a      	mov	r2, r3
    d59c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    d5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a4:	7899      	ldrb	r1, [r3, #2]
    d5a6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ae:	5499      	strb	r1, [r3, r2]
    d5b0:	4b20      	ldr	r3, [pc, #128]	; (d634 <send_nav_values+0x658>)
    d5b2:	781a      	ldrb	r2, [r3, #0]
    d5b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5bc:	781b      	ldrb	r3, [r3, #0]
    d5be:	4413      	add	r3, r2
    d5c0:	b2da      	uxtb	r2, r3
    d5c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ca:	701a      	strb	r2, [r3, #0]
    d5cc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d4:	781a      	ldrb	r2, [r3, #0]
    d5d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5de:	781b      	ldrb	r3, [r3, #0]
    d5e0:	4413      	add	r3, r2
    d5e2:	b2da      	uxtb	r2, r3
    d5e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ec:	701a      	strb	r2, [r3, #0]
    d5ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    d5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	3301      	adds	r3, #1
    d5fa:	b2da      	uxtb	r2, r3
    d5fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d604:	701a      	strb	r2, [r3, #0]
    d606:	f24a 6319 	movw	r3, #42521	; 0xa619
    d60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60e:	781b      	ldrb	r3, [r3, #0]
    d610:	2bff      	cmp	r3, #255	; 0xff
    d612:	d111      	bne.n	d638 <send_nav_values+0x65c>
    d614:	f24a 6319 	movw	r3, #42521	; 0xa619
    d618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61c:	2200      	movs	r2, #0
    d61e:	701a      	strb	r2, [r3, #0]
    d620:	e00a      	b.n	d638 <send_nav_values+0x65c>
    d622:	bf00      	nop
    d624:	2000abcd 	.word	0x2000abcd
    d628:	2000abce 	.word	0x2000abce
    d62c:	2000abcf 	.word	0x2000abcf
    d630:	2000abd1 	.word	0x2000abd1
    d634:	2000abd2 	.word	0x2000abd2
    d638:	f24a 6319 	movw	r3, #42521	; 0xa619
    d63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d640:	781b      	ldrb	r3, [r3, #0]
    d642:	461a      	mov	r2, r3
    d644:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    d648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64c:	78d9      	ldrb	r1, [r3, #3]
    d64e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d656:	5499      	strb	r1, [r3, r2]
    d658:	4bd3      	ldr	r3, [pc, #844]	; (d9a8 <send_nav_values+0x9cc>)
    d65a:	781a      	ldrb	r2, [r3, #0]
    d65c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	4413      	add	r3, r2
    d668:	b2da      	uxtb	r2, r3
    d66a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d672:	701a      	strb	r2, [r3, #0]
    d674:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67c:	781a      	ldrb	r2, [r3, #0]
    d67e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d686:	781b      	ldrb	r3, [r3, #0]
    d688:	4413      	add	r3, r2
    d68a:	b2da      	uxtb	r2, r3
    d68c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d694:	701a      	strb	r2, [r3, #0]
    d696:	f24a 6319 	movw	r3, #42521	; 0xa619
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	781b      	ldrb	r3, [r3, #0]
    d6a0:	3301      	adds	r3, #1
    d6a2:	b2da      	uxtb	r2, r3
    d6a4:	f24a 6319 	movw	r3, #42521	; 0xa619
    d6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ac:	701a      	strb	r2, [r3, #0]
    d6ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	781b      	ldrb	r3, [r3, #0]
    d6b8:	2bff      	cmp	r3, #255	; 0xff
    d6ba:	d105      	bne.n	d6c8 <send_nav_values+0x6ec>
    d6bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c4:	2200      	movs	r2, #0
    d6c6:	701a      	strb	r2, [r3, #0]
    d6c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    d6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	461a      	mov	r2, r3
    d6d4:	f64a 135c 	movw	r3, #43356	; 0xa95c
    d6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6dc:	7819      	ldrb	r1, [r3, #0]
    d6de:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	5499      	strb	r1, [r3, r2]
    d6e8:	f64a 135c 	movw	r3, #43356	; 0xa95c
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	781a      	ldrb	r2, [r3, #0]
    d6f2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fa:	781b      	ldrb	r3, [r3, #0]
    d6fc:	4413      	add	r3, r2
    d6fe:	b2da      	uxtb	r2, r3
    d700:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	701a      	strb	r2, [r3, #0]
    d70a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d712:	781a      	ldrb	r2, [r3, #0]
    d714:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71c:	781b      	ldrb	r3, [r3, #0]
    d71e:	4413      	add	r3, r2
    d720:	b2da      	uxtb	r2, r3
    d722:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72a:	701a      	strb	r2, [r3, #0]
    d72c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d734:	781b      	ldrb	r3, [r3, #0]
    d736:	3301      	adds	r3, #1
    d738:	b2da      	uxtb	r2, r3
    d73a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d742:	701a      	strb	r2, [r3, #0]
    d744:	f24a 6319 	movw	r3, #42521	; 0xa619
    d748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74c:	781b      	ldrb	r3, [r3, #0]
    d74e:	2bff      	cmp	r3, #255	; 0xff
    d750:	d105      	bne.n	d75e <send_nav_values+0x782>
    d752:	f24a 6319 	movw	r3, #42521	; 0xa619
    d756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75a:	2200      	movs	r2, #0
    d75c:	701a      	strb	r2, [r3, #0]
    d75e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d766:	781b      	ldrb	r3, [r3, #0]
    d768:	461a      	mov	r2, r3
    d76a:	f64a 135c 	movw	r3, #43356	; 0xa95c
    d76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d772:	7859      	ldrb	r1, [r3, #1]
    d774:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77c:	5499      	strb	r1, [r3, r2]
    d77e:	4b8b      	ldr	r3, [pc, #556]	; (d9ac <send_nav_values+0x9d0>)
    d780:	781a      	ldrb	r2, [r3, #0]
    d782:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	4413      	add	r3, r2
    d78e:	b2da      	uxtb	r2, r3
    d790:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d798:	701a      	strb	r2, [r3, #0]
    d79a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a2:	781a      	ldrb	r2, [r3, #0]
    d7a4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ac:	781b      	ldrb	r3, [r3, #0]
    d7ae:	4413      	add	r3, r2
    d7b0:	b2da      	uxtb	r2, r3
    d7b2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ba:	701a      	strb	r2, [r3, #0]
    d7bc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	3301      	adds	r3, #1
    d7c8:	b2da      	uxtb	r2, r3
    d7ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    d7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d2:	701a      	strb	r2, [r3, #0]
    d7d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	781b      	ldrb	r3, [r3, #0]
    d7de:	2bff      	cmp	r3, #255	; 0xff
    d7e0:	d105      	bne.n	d7ee <send_nav_values+0x812>
    d7e2:	f24a 6319 	movw	r3, #42521	; 0xa619
    d7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ea:	2200      	movs	r2, #0
    d7ec:	701a      	strb	r2, [r3, #0]
    d7ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    d7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f6:	781b      	ldrb	r3, [r3, #0]
    d7f8:	461a      	mov	r2, r3
    d7fa:	f64a 135c 	movw	r3, #43356	; 0xa95c
    d7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d802:	7899      	ldrb	r1, [r3, #2]
    d804:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d80c:	5499      	strb	r1, [r3, r2]
    d80e:	4b68      	ldr	r3, [pc, #416]	; (d9b0 <send_nav_values+0x9d4>)
    d810:	781a      	ldrb	r2, [r3, #0]
    d812:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81a:	781b      	ldrb	r3, [r3, #0]
    d81c:	4413      	add	r3, r2
    d81e:	b2da      	uxtb	r2, r3
    d820:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	701a      	strb	r2, [r3, #0]
    d82a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d832:	781a      	ldrb	r2, [r3, #0]
    d834:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	4413      	add	r3, r2
    d840:	b2da      	uxtb	r2, r3
    d842:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84a:	701a      	strb	r2, [r3, #0]
    d84c:	f24a 6319 	movw	r3, #42521	; 0xa619
    d850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	3301      	adds	r3, #1
    d858:	b2da      	uxtb	r2, r3
    d85a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d862:	701a      	strb	r2, [r3, #0]
    d864:	f24a 6319 	movw	r3, #42521	; 0xa619
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	781b      	ldrb	r3, [r3, #0]
    d86e:	2bff      	cmp	r3, #255	; 0xff
    d870:	d105      	bne.n	d87e <send_nav_values+0x8a2>
    d872:	f24a 6319 	movw	r3, #42521	; 0xa619
    d876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87a:	2200      	movs	r2, #0
    d87c:	701a      	strb	r2, [r3, #0]
    d87e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	461a      	mov	r2, r3
    d88a:	f64a 135c 	movw	r3, #43356	; 0xa95c
    d88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d892:	78d9      	ldrb	r1, [r3, #3]
    d894:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d89c:	5499      	strb	r1, [r3, r2]
    d89e:	4b45      	ldr	r3, [pc, #276]	; (d9b4 <send_nav_values+0x9d8>)
    d8a0:	781a      	ldrb	r2, [r3, #0]
    d8a2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8aa:	781b      	ldrb	r3, [r3, #0]
    d8ac:	4413      	add	r3, r2
    d8ae:	b2da      	uxtb	r2, r3
    d8b0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b8:	701a      	strb	r2, [r3, #0]
    d8ba:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c2:	781a      	ldrb	r2, [r3, #0]
    d8c4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8cc:	781b      	ldrb	r3, [r3, #0]
    d8ce:	4413      	add	r3, r2
    d8d0:	b2da      	uxtb	r2, r3
    d8d2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	701a      	strb	r2, [r3, #0]
    d8dc:	f24a 6319 	movw	r3, #42521	; 0xa619
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	3301      	adds	r3, #1
    d8e8:	b2da      	uxtb	r2, r3
    d8ea:	f24a 6319 	movw	r3, #42521	; 0xa619
    d8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f2:	701a      	strb	r2, [r3, #0]
    d8f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	2bff      	cmp	r3, #255	; 0xff
    d900:	d105      	bne.n	d90e <send_nav_values+0x932>
    d902:	f24a 6319 	movw	r3, #42521	; 0xa619
    d906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d90a:	2200      	movs	r2, #0
    d90c:	701a      	strb	r2, [r3, #0]
    d90e:	f24a 6319 	movw	r3, #42521	; 0xa619
    d912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d916:	781b      	ldrb	r3, [r3, #0]
    d918:	461a      	mov	r2, r3
    d91a:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
    d91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d922:	7819      	ldrb	r1, [r3, #0]
    d924:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92c:	5499      	strb	r1, [r3, r2]
    d92e:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
    d932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d936:	781a      	ldrb	r2, [r3, #0]
    d938:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	4413      	add	r3, r2
    d944:	b2da      	uxtb	r2, r3
    d946:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	701a      	strb	r2, [r3, #0]
    d950:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d958:	781a      	ldrb	r2, [r3, #0]
    d95a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	4413      	add	r3, r2
    d966:	b2da      	uxtb	r2, r3
    d968:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d970:	701a      	strb	r2, [r3, #0]
    d972:	f24a 6319 	movw	r3, #42521	; 0xa619
    d976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97a:	781b      	ldrb	r3, [r3, #0]
    d97c:	3301      	adds	r3, #1
    d97e:	b2da      	uxtb	r2, r3
    d980:	f24a 6319 	movw	r3, #42521	; 0xa619
    d984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d988:	701a      	strb	r2, [r3, #0]
    d98a:	f24a 6319 	movw	r3, #42521	; 0xa619
    d98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d992:	781b      	ldrb	r3, [r3, #0]
    d994:	2bff      	cmp	r3, #255	; 0xff
    d996:	d10f      	bne.n	d9b8 <send_nav_values+0x9dc>
    d998:	f24a 6319 	movw	r3, #42521	; 0xa619
    d99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a0:	2200      	movs	r2, #0
    d9a2:	701a      	strb	r2, [r3, #0]
    d9a4:	e008      	b.n	d9b8 <send_nav_values+0x9dc>
    d9a6:	bf00      	nop
    d9a8:	2000abd3 	.word	0x2000abd3
    d9ac:	2000a95d 	.word	0x2000a95d
    d9b0:	2000a95e 	.word	0x2000a95e
    d9b4:	2000a95f 	.word	0x2000a95f
    d9b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    d9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	461a      	mov	r2, r3
    d9c4:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
    d9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9cc:	7859      	ldrb	r1, [r3, #1]
    d9ce:	f24a 631c 	movw	r3, #42524	; 0xa61c
    d9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d6:	5499      	strb	r1, [r3, r2]
    d9d8:	4bd1      	ldr	r3, [pc, #836]	; (dd20 <send_nav_values+0xd44>)
    d9da:	781a      	ldrb	r2, [r3, #0]
    d9dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e4:	781b      	ldrb	r3, [r3, #0]
    d9e6:	4413      	add	r3, r2
    d9e8:	b2da      	uxtb	r2, r3
    d9ea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    d9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f2:	701a      	strb	r2, [r3, #0]
    d9f4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fc:	781a      	ldrb	r2, [r3, #0]
    d9fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    da02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da06:	781b      	ldrb	r3, [r3, #0]
    da08:	4413      	add	r3, r2
    da0a:	b2da      	uxtb	r2, r3
    da0c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    da10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da14:	701a      	strb	r2, [r3, #0]
    da16:	f24a 6319 	movw	r3, #42521	; 0xa619
    da1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1e:	781b      	ldrb	r3, [r3, #0]
    da20:	3301      	adds	r3, #1
    da22:	b2da      	uxtb	r2, r3
    da24:	f24a 6319 	movw	r3, #42521	; 0xa619
    da28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2c:	701a      	strb	r2, [r3, #0]
    da2e:	f24a 6319 	movw	r3, #42521	; 0xa619
    da32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	2bff      	cmp	r3, #255	; 0xff
    da3a:	d105      	bne.n	da48 <send_nav_values+0xa6c>
    da3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	2200      	movs	r2, #0
    da46:	701a      	strb	r2, [r3, #0]
    da48:	f24a 6319 	movw	r3, #42521	; 0xa619
    da4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	461a      	mov	r2, r3
    da54:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
    da58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5c:	7899      	ldrb	r1, [r3, #2]
    da5e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    da62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da66:	5499      	strb	r1, [r3, r2]
    da68:	4bae      	ldr	r3, [pc, #696]	; (dd24 <send_nav_values+0xd48>)
    da6a:	781a      	ldrb	r2, [r3, #0]
    da6c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    da70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da74:	781b      	ldrb	r3, [r3, #0]
    da76:	4413      	add	r3, r2
    da78:	b2da      	uxtb	r2, r3
    da7a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    da7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da82:	701a      	strb	r2, [r3, #0]
    da84:	f24a 731e 	movw	r3, #42782	; 0xa71e
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	781a      	ldrb	r2, [r3, #0]
    da8e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    da92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da96:	781b      	ldrb	r3, [r3, #0]
    da98:	4413      	add	r3, r2
    da9a:	b2da      	uxtb	r2, r3
    da9c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	701a      	strb	r2, [r3, #0]
    daa6:	f24a 6319 	movw	r3, #42521	; 0xa619
    daaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daae:	781b      	ldrb	r3, [r3, #0]
    dab0:	3301      	adds	r3, #1
    dab2:	b2da      	uxtb	r2, r3
    dab4:	f24a 6319 	movw	r3, #42521	; 0xa619
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	701a      	strb	r2, [r3, #0]
    dabe:	f24a 6319 	movw	r3, #42521	; 0xa619
    dac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac6:	781b      	ldrb	r3, [r3, #0]
    dac8:	2bff      	cmp	r3, #255	; 0xff
    daca:	d105      	bne.n	dad8 <send_nav_values+0xafc>
    dacc:	f24a 6319 	movw	r3, #42521	; 0xa619
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	2200      	movs	r2, #0
    dad6:	701a      	strb	r2, [r3, #0]
    dad8:	f24a 6319 	movw	r3, #42521	; 0xa619
    dadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	461a      	mov	r2, r3
    dae4:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
    dae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daec:	78d9      	ldrb	r1, [r3, #3]
    daee:	f24a 631c 	movw	r3, #42524	; 0xa61c
    daf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf6:	5499      	strb	r1, [r3, r2]
    daf8:	4b8b      	ldr	r3, [pc, #556]	; (dd28 <send_nav_values+0xd4c>)
    dafa:	781a      	ldrb	r2, [r3, #0]
    dafc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    db00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db04:	781b      	ldrb	r3, [r3, #0]
    db06:	4413      	add	r3, r2
    db08:	b2da      	uxtb	r2, r3
    db0a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    db0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db12:	701a      	strb	r2, [r3, #0]
    db14:	f24a 731e 	movw	r3, #42782	; 0xa71e
    db18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1c:	781a      	ldrb	r2, [r3, #0]
    db1e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    db22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db26:	781b      	ldrb	r3, [r3, #0]
    db28:	4413      	add	r3, r2
    db2a:	b2da      	uxtb	r2, r3
    db2c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    db30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db34:	701a      	strb	r2, [r3, #0]
    db36:	f24a 6319 	movw	r3, #42521	; 0xa619
    db3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3e:	781b      	ldrb	r3, [r3, #0]
    db40:	3301      	adds	r3, #1
    db42:	b2da      	uxtb	r2, r3
    db44:	f24a 6319 	movw	r3, #42521	; 0xa619
    db48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4c:	701a      	strb	r2, [r3, #0]
    db4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    db52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	2bff      	cmp	r3, #255	; 0xff
    db5a:	d105      	bne.n	db68 <send_nav_values+0xb8c>
    db5c:	f24a 6319 	movw	r3, #42521	; 0xa619
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	2200      	movs	r2, #0
    db66:	701a      	strb	r2, [r3, #0]
    db68:	f24a 6319 	movw	r3, #42521	; 0xa619
    db6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	461a      	mov	r2, r3
    db74:	f240 039c 	movw	r3, #156	; 0x9c
    db78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7c:	7819      	ldrb	r1, [r3, #0]
    db7e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    db82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db86:	5499      	strb	r1, [r3, r2]
    db88:	f240 039c 	movw	r3, #156	; 0x9c
    db8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db90:	781a      	ldrb	r2, [r3, #0]
    db92:	f24a 731d 	movw	r3, #42781	; 0xa71d
    db96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	4413      	add	r3, r2
    db9e:	b2da      	uxtb	r2, r3
    dba0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba8:	701a      	strb	r2, [r3, #0]
    dbaa:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb2:	781a      	ldrb	r2, [r3, #0]
    dbb4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbbc:	781b      	ldrb	r3, [r3, #0]
    dbbe:	4413      	add	r3, r2
    dbc0:	b2da      	uxtb	r2, r3
    dbc2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbca:	701a      	strb	r2, [r3, #0]
    dbcc:	f24a 6319 	movw	r3, #42521	; 0xa619
    dbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	3301      	adds	r3, #1
    dbd8:	b2da      	uxtb	r2, r3
    dbda:	f24a 6319 	movw	r3, #42521	; 0xa619
    dbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe2:	701a      	strb	r2, [r3, #0]
    dbe4:	f24a 6319 	movw	r3, #42521	; 0xa619
    dbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbec:	781b      	ldrb	r3, [r3, #0]
    dbee:	2bff      	cmp	r3, #255	; 0xff
    dbf0:	d105      	bne.n	dbfe <send_nav_values+0xc22>
    dbf2:	f24a 6319 	movw	r3, #42521	; 0xa619
    dbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfa:	2200      	movs	r2, #0
    dbfc:	701a      	strb	r2, [r3, #0]
    dbfe:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	461a      	mov	r2, r3
    dc0a:	f240 039c 	movw	r3, #156	; 0x9c
    dc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc12:	7859      	ldrb	r1, [r3, #1]
    dc14:	f24a 631c 	movw	r3, #42524	; 0xa61c
    dc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc1c:	5499      	strb	r1, [r3, r2]
    dc1e:	4b43      	ldr	r3, [pc, #268]	; (dd2c <send_nav_values+0xd50>)
    dc20:	781a      	ldrb	r2, [r3, #0]
    dc22:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	781b      	ldrb	r3, [r3, #0]
    dc2c:	4413      	add	r3, r2
    dc2e:	b2da      	uxtb	r2, r3
    dc30:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc38:	701a      	strb	r2, [r3, #0]
    dc3a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc42:	781a      	ldrb	r2, [r3, #0]
    dc44:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4c:	781b      	ldrb	r3, [r3, #0]
    dc4e:	4413      	add	r3, r2
    dc50:	b2da      	uxtb	r2, r3
    dc52:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5a:	701a      	strb	r2, [r3, #0]
    dc5c:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc64:	781b      	ldrb	r3, [r3, #0]
    dc66:	3301      	adds	r3, #1
    dc68:	b2da      	uxtb	r2, r3
    dc6a:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc72:	701a      	strb	r2, [r3, #0]
    dc74:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc7c:	781b      	ldrb	r3, [r3, #0]
    dc7e:	2bff      	cmp	r3, #255	; 0xff
    dc80:	d105      	bne.n	dc8e <send_nav_values+0xcb2>
    dc82:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8a:	2200      	movs	r2, #0
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    dc92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	461a      	mov	r2, r3
    dc9a:	f240 039c 	movw	r3, #156	; 0x9c
    dc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca2:	7899      	ldrb	r1, [r3, #2]
    dca4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    dca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcac:	5499      	strb	r1, [r3, r2]
    dcae:	4b20      	ldr	r3, [pc, #128]	; (dd30 <send_nav_values+0xd54>)
    dcb0:	781a      	ldrb	r2, [r3, #0]
    dcb2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	781b      	ldrb	r3, [r3, #0]
    dcbc:	4413      	add	r3, r2
    dcbe:	b2da      	uxtb	r2, r3
    dcc0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc8:	701a      	strb	r2, [r3, #0]
    dcca:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd2:	781a      	ldrb	r2, [r3, #0]
    dcd4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcdc:	781b      	ldrb	r3, [r3, #0]
    dcde:	4413      	add	r3, r2
    dce0:	b2da      	uxtb	r2, r3
    dce2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcea:	701a      	strb	r2, [r3, #0]
    dcec:	f24a 6319 	movw	r3, #42521	; 0xa619
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	781b      	ldrb	r3, [r3, #0]
    dcf6:	3301      	adds	r3, #1
    dcf8:	b2da      	uxtb	r2, r3
    dcfa:	f24a 6319 	movw	r3, #42521	; 0xa619
    dcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd02:	701a      	strb	r2, [r3, #0]
    dd04:	f24a 6319 	movw	r3, #42521	; 0xa619
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	781b      	ldrb	r3, [r3, #0]
    dd0e:	2bff      	cmp	r3, #255	; 0xff
    dd10:	d110      	bne.n	dd34 <send_nav_values+0xd58>
    dd12:	f24a 6319 	movw	r3, #42521	; 0xa619
    dd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1a:	2200      	movs	r2, #0
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	e009      	b.n	dd34 <send_nav_values+0xd58>
    dd20:	2000a9a5 	.word	0x2000a9a5
    dd24:	2000a9a6 	.word	0x2000a9a6
    dd28:	2000a9a7 	.word	0x2000a9a7
    dd2c:	2000009d 	.word	0x2000009d
    dd30:	2000009e 	.word	0x2000009e
    dd34:	f24a 6319 	movw	r3, #42521	; 0xa619
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	461a      	mov	r2, r3
    dd40:	f240 039c 	movw	r3, #156	; 0x9c
    dd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd48:	78d9      	ldrb	r1, [r3, #3]
    dd4a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    dd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd52:	5499      	strb	r1, [r3, r2]
    dd54:	4bc2      	ldr	r3, [pc, #776]	; (e060 <send_nav_values+0x1084>)
    dd56:	781a      	ldrb	r2, [r3, #0]
    dd58:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd60:	781b      	ldrb	r3, [r3, #0]
    dd62:	4413      	add	r3, r2
    dd64:	b2da      	uxtb	r2, r3
    dd66:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dd6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6e:	701a      	strb	r2, [r3, #0]
    dd70:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd78:	781a      	ldrb	r2, [r3, #0]
    dd7a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd82:	781b      	ldrb	r3, [r3, #0]
    dd84:	4413      	add	r3, r2
    dd86:	b2da      	uxtb	r2, r3
    dd88:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd90:	701a      	strb	r2, [r3, #0]
    dd92:	f24a 6319 	movw	r3, #42521	; 0xa619
    dd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9a:	781b      	ldrb	r3, [r3, #0]
    dd9c:	3301      	adds	r3, #1
    dd9e:	b2da      	uxtb	r2, r3
    dda0:	f24a 6319 	movw	r3, #42521	; 0xa619
    dda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda8:	701a      	strb	r2, [r3, #0]
    ddaa:	f24a 6319 	movw	r3, #42521	; 0xa619
    ddae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb2:	781b      	ldrb	r3, [r3, #0]
    ddb4:	2bff      	cmp	r3, #255	; 0xff
    ddb6:	d105      	bne.n	ddc4 <send_nav_values+0xde8>
    ddb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    ddbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc0:	2200      	movs	r2, #0
    ddc2:	701a      	strb	r2, [r3, #0]
    ddc4:	f24a 6319 	movw	r3, #42521	; 0xa619
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	461a      	mov	r2, r3
    ddd0:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
    ddd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd8:	7819      	ldrb	r1, [r3, #0]
    ddda:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ddde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde2:	5499      	strb	r1, [r3, r2]
    dde4:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
    dde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddec:	781a      	ldrb	r2, [r3, #0]
    ddee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ddf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	4413      	add	r3, r2
    ddfa:	b2da      	uxtb	r2, r3
    ddfc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    de00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de04:	701a      	strb	r2, [r3, #0]
    de06:	f24a 731e 	movw	r3, #42782	; 0xa71e
    de0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de0e:	781a      	ldrb	r2, [r3, #0]
    de10:	f24a 731d 	movw	r3, #42781	; 0xa71d
    de14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de18:	781b      	ldrb	r3, [r3, #0]
    de1a:	4413      	add	r3, r2
    de1c:	b2da      	uxtb	r2, r3
    de1e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    de22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de26:	701a      	strb	r2, [r3, #0]
    de28:	f24a 6319 	movw	r3, #42521	; 0xa619
    de2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de30:	781b      	ldrb	r3, [r3, #0]
    de32:	3301      	adds	r3, #1
    de34:	b2da      	uxtb	r2, r3
    de36:	f24a 6319 	movw	r3, #42521	; 0xa619
    de3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de3e:	701a      	strb	r2, [r3, #0]
    de40:	f24a 6319 	movw	r3, #42521	; 0xa619
    de44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de48:	781b      	ldrb	r3, [r3, #0]
    de4a:	2bff      	cmp	r3, #255	; 0xff
    de4c:	d105      	bne.n	de5a <send_nav_values+0xe7e>
    de4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    de52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de56:	2200      	movs	r2, #0
    de58:	701a      	strb	r2, [r3, #0]
    de5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    de5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	461a      	mov	r2, r3
    de66:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
    de6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6e:	7859      	ldrb	r1, [r3, #1]
    de70:	f24a 631c 	movw	r3, #42524	; 0xa61c
    de74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de78:	5499      	strb	r1, [r3, r2]
    de7a:	4b7a      	ldr	r3, [pc, #488]	; (e064 <send_nav_values+0x1088>)
    de7c:	781a      	ldrb	r2, [r3, #0]
    de7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    de82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	4413      	add	r3, r2
    de8a:	b2da      	uxtb	r2, r3
    de8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    de90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de94:	701a      	strb	r2, [r3, #0]
    de96:	f24a 731e 	movw	r3, #42782	; 0xa71e
    de9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9e:	781a      	ldrb	r2, [r3, #0]
    dea0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	781b      	ldrb	r3, [r3, #0]
    deaa:	4413      	add	r3, r2
    deac:	b2da      	uxtb	r2, r3
    deae:	f24a 731e 	movw	r3, #42782	; 0xa71e
    deb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb6:	701a      	strb	r2, [r3, #0]
    deb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    debc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec0:	781b      	ldrb	r3, [r3, #0]
    dec2:	3301      	adds	r3, #1
    dec4:	b2da      	uxtb	r2, r3
    dec6:	f24a 6319 	movw	r3, #42521	; 0xa619
    deca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dece:	701a      	strb	r2, [r3, #0]
    ded0:	f24a 6319 	movw	r3, #42521	; 0xa619
    ded4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded8:	781b      	ldrb	r3, [r3, #0]
    deda:	2bff      	cmp	r3, #255	; 0xff
    dedc:	d105      	bne.n	deea <send_nav_values+0xf0e>
    dede:	f24a 6319 	movw	r3, #42521	; 0xa619
    dee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee6:	2200      	movs	r2, #0
    dee8:	701a      	strb	r2, [r3, #0]
    deea:	f24a 6319 	movw	r3, #42521	; 0xa619
    deee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def2:	781b      	ldrb	r3, [r3, #0]
    def4:	461a      	mov	r2, r3
    def6:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
    defa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defe:	7899      	ldrb	r1, [r3, #2]
    df00:	f24a 631c 	movw	r3, #42524	; 0xa61c
    df04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df08:	5499      	strb	r1, [r3, r2]
    df0a:	4b57      	ldr	r3, [pc, #348]	; (e068 <send_nav_values+0x108c>)
    df0c:	781a      	ldrb	r2, [r3, #0]
    df0e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    df12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	4413      	add	r3, r2
    df1a:	b2da      	uxtb	r2, r3
    df1c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    df20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df24:	701a      	strb	r2, [r3, #0]
    df26:	f24a 731e 	movw	r3, #42782	; 0xa71e
    df2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2e:	781a      	ldrb	r2, [r3, #0]
    df30:	f24a 731d 	movw	r3, #42781	; 0xa71d
    df34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	4413      	add	r3, r2
    df3c:	b2da      	uxtb	r2, r3
    df3e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    df42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df46:	701a      	strb	r2, [r3, #0]
    df48:	f24a 6319 	movw	r3, #42521	; 0xa619
    df4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df50:	781b      	ldrb	r3, [r3, #0]
    df52:	3301      	adds	r3, #1
    df54:	b2da      	uxtb	r2, r3
    df56:	f24a 6319 	movw	r3, #42521	; 0xa619
    df5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df5e:	701a      	strb	r2, [r3, #0]
    df60:	f24a 6319 	movw	r3, #42521	; 0xa619
    df64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	2bff      	cmp	r3, #255	; 0xff
    df6c:	d105      	bne.n	df7a <send_nav_values+0xf9e>
    df6e:	f24a 6319 	movw	r3, #42521	; 0xa619
    df72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df76:	2200      	movs	r2, #0
    df78:	701a      	strb	r2, [r3, #0]
    df7a:	f24a 6319 	movw	r3, #42521	; 0xa619
    df7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	461a      	mov	r2, r3
    df86:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
    df8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df8e:	78d9      	ldrb	r1, [r3, #3]
    df90:	f24a 631c 	movw	r3, #42524	; 0xa61c
    df94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df98:	5499      	strb	r1, [r3, r2]
    df9a:	4b34      	ldr	r3, [pc, #208]	; (e06c <send_nav_values+0x1090>)
    df9c:	781a      	ldrb	r2, [r3, #0]
    df9e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dfa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	4413      	add	r3, r2
    dfaa:	b2da      	uxtb	r2, r3
    dfac:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dfb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb4:	701a      	strb	r2, [r3, #0]
    dfb6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbe:	781a      	ldrb	r2, [r3, #0]
    dfc0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    dfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc8:	781b      	ldrb	r3, [r3, #0]
    dfca:	4413      	add	r3, r2
    dfcc:	b2da      	uxtb	r2, r3
    dfce:	f24a 731e 	movw	r3, #42782	; 0xa71e
    dfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd6:	701a      	strb	r2, [r3, #0]
    dfd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    dfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	3301      	adds	r3, #1
    dfe4:	b2da      	uxtb	r2, r3
    dfe6:	f24a 6319 	movw	r3, #42521	; 0xa619
    dfea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfee:	701a      	strb	r2, [r3, #0]
    dff0:	f24a 6319 	movw	r3, #42521	; 0xa619
    dff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	2bff      	cmp	r3, #255	; 0xff
    dffc:	d105      	bne.n	e00a <send_nav_values+0x102e>
    dffe:	f24a 6319 	movw	r3, #42521	; 0xa619
    e002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e006:	2200      	movs	r2, #0
    e008:	701a      	strb	r2, [r3, #0]
    e00a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e012:	781b      	ldrb	r3, [r3, #0]
    e014:	461a      	mov	r2, r3
    e016:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01e:	7819      	ldrb	r1, [r3, #0]
    e020:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e028:	5499      	strb	r1, [r3, r2]
    e02a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e032:	781b      	ldrb	r3, [r3, #0]
    e034:	3301      	adds	r3, #1
    e036:	b2da      	uxtb	r2, r3
    e038:	f24a 6319 	movw	r3, #42521	; 0xa619
    e03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e040:	701a      	strb	r2, [r3, #0]
    e042:	f24a 6319 	movw	r3, #42521	; 0xa619
    e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	2bff      	cmp	r3, #255	; 0xff
    e04e:	d10f      	bne.n	e070 <send_nav_values+0x1094>
    e050:	f24a 6319 	movw	r3, #42521	; 0xa619
    e054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e058:	2200      	movs	r2, #0
    e05a:	701a      	strb	r2, [r3, #0]
    e05c:	e008      	b.n	e070 <send_nav_values+0x1094>
    e05e:	bf00      	nop
    e060:	2000009f 	.word	0x2000009f
    e064:	2000a9a9 	.word	0x2000a9a9
    e068:	2000a9aa 	.word	0x2000a9aa
    e06c:	2000a9ab 	.word	0x2000a9ab
    e070:	f24a 6319 	movw	r3, #42521	; 0xa619
    e074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e078:	781b      	ldrb	r3, [r3, #0]
    e07a:	461a      	mov	r2, r3
    e07c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e084:	7819      	ldrb	r1, [r3, #0]
    e086:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e08e:	5499      	strb	r1, [r3, r2]
    e090:	f24a 6319 	movw	r3, #42521	; 0xa619
    e094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e098:	781b      	ldrb	r3, [r3, #0]
    e09a:	3301      	adds	r3, #1
    e09c:	b2da      	uxtb	r2, r3
    e09e:	f24a 6319 	movw	r3, #42521	; 0xa619
    e0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a6:	701a      	strb	r2, [r3, #0]
    e0a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b0:	781b      	ldrb	r3, [r3, #0]
    e0b2:	2bff      	cmp	r3, #255	; 0xff
    e0b4:	d105      	bne.n	e0c2 <send_nav_values+0x10e6>
    e0b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    e0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0be:	2200      	movs	r2, #0
    e0c0:	701a      	strb	r2, [r3, #0]
    e0c2:	f242 0339 	movw	r3, #8249	; 0x2039
    e0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ca:	781b      	ldrb	r3, [r3, #0]
    e0cc:	b2db      	uxtb	r3, r3
    e0ce:	f003 0310 	and.w	r3, r3, #16
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d15a      	bne.n	e18c <send_nav_values+0x11b0>
    e0d6:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0de:	781b      	ldrb	r3, [r3, #0]
    e0e0:	b2db      	uxtb	r3, r3
    e0e2:	461a      	mov	r2, r3
    e0e4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ec:	5c9a      	ldrb	r2, [r3, r2]
    e0ee:	f24a 731b 	movw	r3, #42779	; 0xa71b
    e0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f6:	701a      	strb	r2, [r3, #0]
    e0f8:	f24a 731c 	movw	r3, #42780	; 0xa71c
    e0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e100:	2200      	movs	r2, #0
    e102:	701a      	strb	r2, [r3, #0]
    e104:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10c:	781b      	ldrb	r3, [r3, #0]
    e10e:	b2db      	uxtb	r3, r3
    e110:	3301      	adds	r3, #1
    e112:	b2da      	uxtb	r2, r3
    e114:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11c:	701a      	strb	r2, [r3, #0]
    e11e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e126:	781b      	ldrb	r3, [r3, #0]
    e128:	b2db      	uxtb	r3, r3
    e12a:	2bff      	cmp	r3, #255	; 0xff
    e12c:	d105      	bne.n	e13a <send_nav_values+0x115e>
    e12e:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	2200      	movs	r2, #0
    e138:	701a      	strb	r2, [r3, #0]
    e13a:	f242 0338 	movw	r3, #8248	; 0x2038
    e13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e142:	f242 0238 	movw	r2, #8248	; 0x2038
    e146:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e14a:	7812      	ldrb	r2, [r2, #0]
    e14c:	b2d2      	uxtb	r2, r2
    e14e:	f042 0201 	orr.w	r2, r2, #1
    e152:	b2d2      	uxtb	r2, r2
    e154:	701a      	strb	r2, [r3, #0]
    e156:	f242 0339 	movw	r3, #8249	; 0x2039
    e15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15e:	f242 0239 	movw	r2, #8249	; 0x2039
    e162:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e166:	7812      	ldrb	r2, [r2, #0]
    e168:	b2d2      	uxtb	r2, r2
    e16a:	f042 0210 	orr.w	r2, r2, #16
    e16e:	b2d2      	uxtb	r2, r2
    e170:	701a      	strb	r2, [r3, #0]
    e172:	e00b      	b.n	e18c <send_nav_values+0x11b0>
    e174:	f24a 6318 	movw	r3, #42520	; 0xa618
    e178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17c:	781b      	ldrb	r3, [r3, #0]
    e17e:	3301      	adds	r3, #1
    e180:	b2da      	uxtb	r2, r3
    e182:	f24a 6318 	movw	r3, #42520	; 0xa618
    e186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18a:	701a      	strb	r2, [r3, #0]
}
    e18c:	46bd      	mov	sp, r7
    e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e192:	4770      	bx	lr

0000e194 <course_run>:

void course_run(void){
    e194:	b580      	push	{r7, lr}
    e196:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e198:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a0:	781b      	ldrb	r3, [r3, #0]
    e1a2:	2b02      	cmp	r3, #2
    e1a4:	d006      	beq.n	e1b4 <course_run+0x20>
    e1a6:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	2b03      	cmp	r3, #3
    e1b2:	d112      	bne.n	e1da <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e1b4:	f24a 53fe 	movw	r3, #42494	; 0xa5fe
    e1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	2b02      	cmp	r3, #2
    e1c0:	d901      	bls.n	e1c6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e1c2:	f003 faf1 	bl	117a8 <course_pid_run>
    desired_roll = nav_desired_roll;
    e1c6:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
    e1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ce:	681a      	ldr	r2, [r3, #0]
    e1d0:	f64a 1344 	movw	r3, #43332	; 0xa944
    e1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e1da:	bd80      	pop	{r7, pc}

0000e1dc <altitude_control_task>:

void altitude_control_task(void)
{
    e1dc:	b580      	push	{r7, lr}
    e1de:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e1e0:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e8:	781b      	ldrb	r3, [r3, #0]
    e1ea:	2b02      	cmp	r3, #2
    e1ec:	d006      	beq.n	e1fc <altitude_control_task+0x20>
    e1ee:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f6:	781b      	ldrb	r3, [r3, #0]
    e1f8:	2b03      	cmp	r3, #3
    e1fa:	d108      	bne.n	e20e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e1fc:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    e200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	2b03      	cmp	r3, #3
    e208:	d101      	bne.n	e20e <altitude_control_task+0x32>
      			altitude_pid_run();
    e20a:	f003 fd55 	bl	11cb8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e20e:	bd80      	pop	{r7, pc}

0000e210 <climb_control_task>:
void climb_control_task(void)
{
    e210:	b580      	push	{r7, lr}
    e212:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e214:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21c:	781b      	ldrb	r3, [r3, #0]
    e21e:	2b02      	cmp	r3, #2
    e220:	d006      	beq.n	e230 <climb_control_task+0x20>
    e222:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    e226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e22a:	781b      	ldrb	r3, [r3, #0]
    e22c:	2b03      	cmp	r3, #3
    e22e:	d135      	bne.n	e29c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e230:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    e234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e238:	781b      	ldrb	r3, [r3, #0]
    e23a:	2b01      	cmp	r3, #1
    e23c:	d901      	bls.n	e242 <climb_control_task+0x32>
        	climb_pid_run();
    e23e:	f003 fb6b 	bl	11918 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e242:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
    e246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e24a:	781b      	ldrb	r3, [r3, #0]
    e24c:	2b01      	cmp	r3, #1
    e24e:	d10a      	bne.n	e266 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e250:	f64a 1398 	movw	r3, #43416	; 0xa998
    e254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e258:	881b      	ldrh	r3, [r3, #0]
    e25a:	b29a      	uxth	r2, r3
    e25c:	f64a 134c 	movw	r3, #43340	; 0xa94c
    e260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e264:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e266:	f24a 6305 	movw	r3, #42501	; 0xa605
    e26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	2b00      	cmp	r3, #0
    e272:	d10d      	bne.n	e290 <climb_control_task+0x80>
    e274:	f64a 33fc 	movw	r3, #44028	; 0xabfc
    e278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e27c:	881b      	ldrh	r3, [r3, #0]
    e27e:	2b00      	cmp	r3, #0
    e280:	d10c      	bne.n	e29c <climb_control_task+0x8c>
    e282:	f24a 6310 	movw	r3, #42512	; 0xa610
    e286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e28a:	781b      	ldrb	r3, [r3, #0]
    e28c:	2b00      	cmp	r3, #0
    e28e:	d105      	bne.n	e29c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e290:	f64a 134c 	movw	r3, #43340	; 0xa94c
    e294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e298:	2200      	movs	r2, #0
    e29a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e29c:	bd80      	pop	{r7, pc}
    e29e:	bf00      	nop

0000e2a0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e2a0:	b580      	push	{r7, lr}
    e2a2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e2a4:	f003 f926 	bl	114f4 <ir_update>
    estimator_update_state_infrared();
    e2a8:	f006 fbac 	bl	14a04 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e2ac:	f003 f990 	bl	115d0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e2b0:	f64a 134c 	movw	r3, #43340	; 0xa94c
    e2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b8:	881a      	ldrh	r2, [r3, #0]
    e2ba:	f24a 7338 	movw	r3, #42808	; 0xa738
    e2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e2c4:	f64a 134e 	movw	r3, #43342	; 0xa94e
    e2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2cc:	881a      	ldrh	r2, [r3, #0]
    e2ce:	f24a 7338 	movw	r3, #42808	; 0xa738
    e2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e2d8:	f64a 1350 	movw	r3, #43344	; 0xa950
    e2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e0:	881a      	ldrh	r2, [r3, #0]
    e2e2:	f24a 7338 	movw	r3, #42808	; 0xa738
    e2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ea:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e2ec:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    e2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f4:	681b      	ldr	r3, [r3, #0]
    e2f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e2fa:	4618      	mov	r0, r3
    e2fc:	f008 ff7c 	bl	171f8 <__aeabi_f2d>
    e300:	4602      	mov	r2, r0
    e302:	460b      	mov	r3, r1
    e304:	4610      	mov	r0, r2
    e306:	4619      	mov	r1, r3
    e308:	f04f 0200 	mov.w	r2, #0
    e30c:	f04f 0300 	mov.w	r3, #0
    e310:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e314:	f008 ffc4 	bl	172a0 <__aeabi_dmul>
    e318:	4602      	mov	r2, r0
    e31a:	460b      	mov	r3, r1
    e31c:	4610      	mov	r0, r2
    e31e:	4619      	mov	r1, r3
    e320:	f04f 0200 	mov.w	r2, #0
    e324:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e328:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e32c:	f009 fa2a 	bl	17784 <__aeabi_dcmplt>
    e330:	4603      	mov	r3, r0
    e332:	2b00      	cmp	r3, #0
    e334:	d002      	beq.n	e33c <stabilisation_task+0x9c>
    e336:	f64d 2280 	movw	r2, #55936	; 0xda80
    e33a:	e046      	b.n	e3ca <stabilisation_task+0x12a>
    e33c:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    e340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e344:	681b      	ldr	r3, [r3, #0]
    e346:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e34a:	4618      	mov	r0, r3
    e34c:	f008 ff54 	bl	171f8 <__aeabi_f2d>
    e350:	4602      	mov	r2, r0
    e352:	460b      	mov	r3, r1
    e354:	4610      	mov	r0, r2
    e356:	4619      	mov	r1, r3
    e358:	f04f 0200 	mov.w	r2, #0
    e35c:	f04f 0300 	mov.w	r3, #0
    e360:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e364:	f008 ff9c 	bl	172a0 <__aeabi_dmul>
    e368:	4602      	mov	r2, r0
    e36a:	460b      	mov	r3, r1
    e36c:	4610      	mov	r0, r2
    e36e:	4619      	mov	r1, r3
    e370:	f04f 0200 	mov.w	r2, #0
    e374:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e378:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e37c:	f009 fa20 	bl	177c0 <__aeabi_dcmpgt>
    e380:	4603      	mov	r3, r0
    e382:	2b00      	cmp	r3, #0
    e384:	d002      	beq.n	e38c <stabilisation_task+0xec>
    e386:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e38a:	e01d      	b.n	e3c8 <stabilisation_task+0x128>
    e38c:	f64a 33d8 	movw	r3, #43992	; 0xabd8
    e390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e394:	681b      	ldr	r3, [r3, #0]
    e396:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e39a:	4618      	mov	r0, r3
    e39c:	f008 ff2c 	bl	171f8 <__aeabi_f2d>
    e3a0:	4602      	mov	r2, r0
    e3a2:	460b      	mov	r3, r1
    e3a4:	4610      	mov	r0, r2
    e3a6:	4619      	mov	r1, r3
    e3a8:	f04f 0200 	mov.w	r2, #0
    e3ac:	f04f 0300 	mov.w	r3, #0
    e3b0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e3b4:	f008 ff74 	bl	172a0 <__aeabi_dmul>
    e3b8:	4602      	mov	r2, r0
    e3ba:	460b      	mov	r3, r1
    e3bc:	4610      	mov	r0, r2
    e3be:	4619      	mov	r1, r3
    e3c0:	f009 fa08 	bl	177d4 <__aeabi_d2iz>
    e3c4:	4603      	mov	r3, r0
    e3c6:	b29b      	uxth	r3, r3
    e3c8:	b29a      	uxth	r2, r3
    e3ca:	f24a 7338 	movw	r3, #42808	; 0xa738
    e3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e3d4:	bd80      	pop	{r7, pc}
    e3d6:	bf00      	nop

0000e3d8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e3d8:	b580      	push	{r7, lr}
    e3da:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e3dc:	f24a 73ad 	movw	r3, #42925	; 0xa7ad
    e3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e4:	2200      	movs	r2, #0
    e3e6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e3e8:	f24a 73ae 	movw	r3, #42926	; 0xa7ae
    e3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f0:	781b      	ldrb	r3, [r3, #0]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	f001 81af 	beq.w	f756 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e3f8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e400:	781a      	ldrb	r2, [r3, #0]
    e402:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e40a:	781b      	ldrb	r3, [r3, #0]
    e40c:	b2db      	uxtb	r3, r3
    e40e:	429a      	cmp	r2, r3
    e410:	d313      	bcc.n	e43a <send_gps_pos+0x62>
    e412:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e41a:	781b      	ldrb	r3, [r3, #0]
    e41c:	b2db      	uxtb	r3, r3
    e41e:	461a      	mov	r2, r3
    e420:	f24a 6319 	movw	r3, #42521	; 0xa619
    e424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e428:	781b      	ldrb	r3, [r3, #0]
    e42a:	1ad3      	subs	r3, r2, r3
    e42c:	33ff      	adds	r3, #255	; 0xff
    e42e:	2b21      	cmp	r3, #33	; 0x21
    e430:	bfd4      	ite	le
    e432:	2300      	movle	r3, #0
    e434:	2301      	movgt	r3, #1
    e436:	b2db      	uxtb	r3, r3
    e438:	e011      	b.n	e45e <send_gps_pos+0x86>
    e43a:	f24a 631a 	movw	r3, #42522	; 0xa61a
    e43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e442:	781b      	ldrb	r3, [r3, #0]
    e444:	b2db      	uxtb	r3, r3
    e446:	461a      	mov	r2, r3
    e448:	f24a 6319 	movw	r3, #42521	; 0xa619
    e44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e450:	781b      	ldrb	r3, [r3, #0]
    e452:	1ad3      	subs	r3, r2, r3
    e454:	2b21      	cmp	r3, #33	; 0x21
    e456:	bfd4      	ite	le
    e458:	2300      	movle	r3, #0
    e45a:	2301      	movgt	r3, #1
    e45c:	b2db      	uxtb	r3, r3
    e45e:	2b00      	cmp	r3, #0
    e460:	f001 816b 	beq.w	f73a <send_gps_pos+0x1362>
    e464:	f24a 6319 	movw	r3, #42521	; 0xa619
    e468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46c:	781b      	ldrb	r3, [r3, #0]
    e46e:	461a      	mov	r2, r3
    e470:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e478:	2105      	movs	r1, #5
    e47a:	5499      	strb	r1, [r3, r2]
    e47c:	f24a 6319 	movw	r3, #42521	; 0xa619
    e480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	3301      	adds	r3, #1
    e488:	b2da      	uxtb	r2, r3
    e48a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e492:	701a      	strb	r2, [r3, #0]
    e494:	f24a 6319 	movw	r3, #42521	; 0xa619
    e498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	2bff      	cmp	r3, #255	; 0xff
    e4a0:	d105      	bne.n	e4ae <send_gps_pos+0xd6>
    e4a2:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4aa:	2200      	movs	r2, #0
    e4ac:	701a      	strb	r2, [r3, #0]
    e4ae:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b6:	781b      	ldrb	r3, [r3, #0]
    e4b8:	461a      	mov	r2, r3
    e4ba:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c2:	2108      	movs	r1, #8
    e4c4:	5499      	strb	r1, [r3, r2]
    e4c6:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ce:	781b      	ldrb	r3, [r3, #0]
    e4d0:	3301      	adds	r3, #1
    e4d2:	b2da      	uxtb	r2, r3
    e4d4:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4dc:	701a      	strb	r2, [r3, #0]
    e4de:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e6:	781b      	ldrb	r3, [r3, #0]
    e4e8:	2bff      	cmp	r3, #255	; 0xff
    e4ea:	d105      	bne.n	e4f8 <send_gps_pos+0x120>
    e4ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    e4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f4:	2200      	movs	r2, #0
    e4f6:	701a      	strb	r2, [r3, #0]
    e4f8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e500:	2208      	movs	r2, #8
    e502:	701a      	strb	r2, [r3, #0]
    e504:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50c:	2208      	movs	r2, #8
    e50e:	701a      	strb	r2, [r3, #0]
    e510:	f24a 6319 	movw	r3, #42521	; 0xa619
    e514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	461a      	mov	r2, r3
    e51c:	f24a 73ac 	movw	r3, #42924	; 0xa7ac
    e520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e524:	7819      	ldrb	r1, [r3, #0]
    e526:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e52e:	5499      	strb	r1, [r3, r2]
    e530:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e538:	781a      	ldrb	r2, [r3, #0]
    e53a:	f24a 73ac 	movw	r3, #42924	; 0xa7ac
    e53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e542:	781b      	ldrb	r3, [r3, #0]
    e544:	4413      	add	r3, r2
    e546:	b2da      	uxtb	r2, r3
    e548:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e550:	701a      	strb	r2, [r3, #0]
    e552:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e55a:	781a      	ldrb	r2, [r3, #0]
    e55c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e564:	781b      	ldrb	r3, [r3, #0]
    e566:	4413      	add	r3, r2
    e568:	b2da      	uxtb	r2, r3
    e56a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e572:	701a      	strb	r2, [r3, #0]
    e574:	f24a 6319 	movw	r3, #42521	; 0xa619
    e578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e57c:	781b      	ldrb	r3, [r3, #0]
    e57e:	3301      	adds	r3, #1
    e580:	b2da      	uxtb	r2, r3
    e582:	f24a 6319 	movw	r3, #42521	; 0xa619
    e586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58a:	701a      	strb	r2, [r3, #0]
    e58c:	f24a 6319 	movw	r3, #42521	; 0xa619
    e590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e594:	781b      	ldrb	r3, [r3, #0]
    e596:	2bff      	cmp	r3, #255	; 0xff
    e598:	d105      	bne.n	e5a6 <send_gps_pos+0x1ce>
    e59a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a2:	2200      	movs	r2, #0
    e5a4:	701a      	strb	r2, [r3, #0]
    e5a6:	f24a 6319 	movw	r3, #42521	; 0xa619
    e5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ae:	781b      	ldrb	r3, [r3, #0]
    e5b0:	461a      	mov	r2, r3
    e5b2:	f24a 739c 	movw	r3, #42908	; 0xa79c
    e5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ba:	7819      	ldrb	r1, [r3, #0]
    e5bc:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c4:	5499      	strb	r1, [r3, r2]
    e5c6:	f24a 739c 	movw	r3, #42908	; 0xa79c
    e5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ce:	781a      	ldrb	r2, [r3, #0]
    e5d0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d8:	781b      	ldrb	r3, [r3, #0]
    e5da:	4413      	add	r3, r2
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e6:	701a      	strb	r2, [r3, #0]
    e5e8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f0:	781a      	ldrb	r2, [r3, #0]
    e5f2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fa:	781b      	ldrb	r3, [r3, #0]
    e5fc:	4413      	add	r3, r2
    e5fe:	b2da      	uxtb	r2, r3
    e600:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e608:	701a      	strb	r2, [r3, #0]
    e60a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	3301      	adds	r3, #1
    e616:	b2da      	uxtb	r2, r3
    e618:	f24a 6319 	movw	r3, #42521	; 0xa619
    e61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e620:	701a      	strb	r2, [r3, #0]
    e622:	f24a 6319 	movw	r3, #42521	; 0xa619
    e626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	2bff      	cmp	r3, #255	; 0xff
    e62e:	d105      	bne.n	e63c <send_gps_pos+0x264>
    e630:	f24a 6319 	movw	r3, #42521	; 0xa619
    e634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e638:	2200      	movs	r2, #0
    e63a:	701a      	strb	r2, [r3, #0]
    e63c:	f24a 6319 	movw	r3, #42521	; 0xa619
    e640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e644:	781b      	ldrb	r3, [r3, #0]
    e646:	461a      	mov	r2, r3
    e648:	f24a 739c 	movw	r3, #42908	; 0xa79c
    e64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e650:	7859      	ldrb	r1, [r3, #1]
    e652:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65a:	5499      	strb	r1, [r3, r2]
    e65c:	4bd1      	ldr	r3, [pc, #836]	; (e9a4 <send_gps_pos+0x5cc>)
    e65e:	781a      	ldrb	r2, [r3, #0]
    e660:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	4413      	add	r3, r2
    e66c:	b2da      	uxtb	r2, r3
    e66e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e676:	701a      	strb	r2, [r3, #0]
    e678:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e680:	781a      	ldrb	r2, [r3, #0]
    e682:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	4413      	add	r3, r2
    e68e:	b2da      	uxtb	r2, r3
    e690:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e698:	701a      	strb	r2, [r3, #0]
    e69a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a2:	781b      	ldrb	r3, [r3, #0]
    e6a4:	3301      	adds	r3, #1
    e6a6:	b2da      	uxtb	r2, r3
    e6a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b0:	701a      	strb	r2, [r3, #0]
    e6b2:	f24a 6319 	movw	r3, #42521	; 0xa619
    e6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	2bff      	cmp	r3, #255	; 0xff
    e6be:	d105      	bne.n	e6cc <send_gps_pos+0x2f4>
    e6c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c8:	2200      	movs	r2, #0
    e6ca:	701a      	strb	r2, [r3, #0]
    e6cc:	f24a 6319 	movw	r3, #42521	; 0xa619
    e6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	461a      	mov	r2, r3
    e6d8:	f24a 739c 	movw	r3, #42908	; 0xa79c
    e6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e0:	7899      	ldrb	r1, [r3, #2]
    e6e2:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ea:	5499      	strb	r1, [r3, r2]
    e6ec:	4bae      	ldr	r3, [pc, #696]	; (e9a8 <send_gps_pos+0x5d0>)
    e6ee:	781a      	ldrb	r2, [r3, #0]
    e6f0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	4413      	add	r3, r2
    e6fc:	b2da      	uxtb	r2, r3
    e6fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e706:	701a      	strb	r2, [r3, #0]
    e708:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e710:	781a      	ldrb	r2, [r3, #0]
    e712:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	4413      	add	r3, r2
    e71e:	b2da      	uxtb	r2, r3
    e720:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e728:	701a      	strb	r2, [r3, #0]
    e72a:	f24a 6319 	movw	r3, #42521	; 0xa619
    e72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	3301      	adds	r3, #1
    e736:	b2da      	uxtb	r2, r3
    e738:	f24a 6319 	movw	r3, #42521	; 0xa619
    e73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e740:	701a      	strb	r2, [r3, #0]
    e742:	f24a 6319 	movw	r3, #42521	; 0xa619
    e746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74a:	781b      	ldrb	r3, [r3, #0]
    e74c:	2bff      	cmp	r3, #255	; 0xff
    e74e:	d105      	bne.n	e75c <send_gps_pos+0x384>
    e750:	f24a 6319 	movw	r3, #42521	; 0xa619
    e754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e758:	2200      	movs	r2, #0
    e75a:	701a      	strb	r2, [r3, #0]
    e75c:	f24a 6319 	movw	r3, #42521	; 0xa619
    e760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e764:	781b      	ldrb	r3, [r3, #0]
    e766:	461a      	mov	r2, r3
    e768:	f24a 739c 	movw	r3, #42908	; 0xa79c
    e76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e770:	78d9      	ldrb	r1, [r3, #3]
    e772:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77a:	5499      	strb	r1, [r3, r2]
    e77c:	4b8b      	ldr	r3, [pc, #556]	; (e9ac <send_gps_pos+0x5d4>)
    e77e:	781a      	ldrb	r2, [r3, #0]
    e780:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	4413      	add	r3, r2
    e78c:	b2da      	uxtb	r2, r3
    e78e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e796:	701a      	strb	r2, [r3, #0]
    e798:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a0:	781a      	ldrb	r2, [r3, #0]
    e7a2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7aa:	781b      	ldrb	r3, [r3, #0]
    e7ac:	4413      	add	r3, r2
    e7ae:	b2da      	uxtb	r2, r3
    e7b0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b8:	701a      	strb	r2, [r3, #0]
    e7ba:	f24a 6319 	movw	r3, #42521	; 0xa619
    e7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c2:	781b      	ldrb	r3, [r3, #0]
    e7c4:	3301      	adds	r3, #1
    e7c6:	b2da      	uxtb	r2, r3
    e7c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d0:	701a      	strb	r2, [r3, #0]
    e7d2:	f24a 6319 	movw	r3, #42521	; 0xa619
    e7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	2bff      	cmp	r3, #255	; 0xff
    e7de:	d105      	bne.n	e7ec <send_gps_pos+0x414>
    e7e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    e7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e8:	2200      	movs	r2, #0
    e7ea:	701a      	strb	r2, [r3, #0]
    e7ec:	f24a 6319 	movw	r3, #42521	; 0xa619
    e7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f4:	781b      	ldrb	r3, [r3, #0]
    e7f6:	461a      	mov	r2, r3
    e7f8:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    e7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e800:	7819      	ldrb	r1, [r3, #0]
    e802:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	5499      	strb	r1, [r3, r2]
    e80c:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    e810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e814:	781a      	ldrb	r2, [r3, #0]
    e816:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e81e:	781b      	ldrb	r3, [r3, #0]
    e820:	4413      	add	r3, r2
    e822:	b2da      	uxtb	r2, r3
    e824:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82c:	701a      	strb	r2, [r3, #0]
    e82e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e836:	781a      	ldrb	r2, [r3, #0]
    e838:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	4413      	add	r3, r2
    e844:	b2da      	uxtb	r2, r3
    e846:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e84e:	701a      	strb	r2, [r3, #0]
    e850:	f24a 6319 	movw	r3, #42521	; 0xa619
    e854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	3301      	adds	r3, #1
    e85c:	b2da      	uxtb	r2, r3
    e85e:	f24a 6319 	movw	r3, #42521	; 0xa619
    e862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e866:	701a      	strb	r2, [r3, #0]
    e868:	f24a 6319 	movw	r3, #42521	; 0xa619
    e86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e870:	781b      	ldrb	r3, [r3, #0]
    e872:	2bff      	cmp	r3, #255	; 0xff
    e874:	d105      	bne.n	e882 <send_gps_pos+0x4aa>
    e876:	f24a 6319 	movw	r3, #42521	; 0xa619
    e87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87e:	2200      	movs	r2, #0
    e880:	701a      	strb	r2, [r3, #0]
    e882:	f24a 6319 	movw	r3, #42521	; 0xa619
    e886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88a:	781b      	ldrb	r3, [r3, #0]
    e88c:	461a      	mov	r2, r3
    e88e:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    e892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e896:	7859      	ldrb	r1, [r3, #1]
    e898:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a0:	5499      	strb	r1, [r3, r2]
    e8a2:	4b43      	ldr	r3, [pc, #268]	; (e9b0 <send_gps_pos+0x5d8>)
    e8a4:	781a      	ldrb	r2, [r3, #0]
    e8a6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	4413      	add	r3, r2
    e8b2:	b2da      	uxtb	r2, r3
    e8b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8bc:	701a      	strb	r2, [r3, #0]
    e8be:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c6:	781a      	ldrb	r2, [r3, #0]
    e8c8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	4413      	add	r3, r2
    e8d4:	b2da      	uxtb	r2, r3
    e8d6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8de:	701a      	strb	r2, [r3, #0]
    e8e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    e8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	3301      	adds	r3, #1
    e8ec:	b2da      	uxtb	r2, r3
    e8ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    e8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f6:	701a      	strb	r2, [r3, #0]
    e8f8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e900:	781b      	ldrb	r3, [r3, #0]
    e902:	2bff      	cmp	r3, #255	; 0xff
    e904:	d105      	bne.n	e912 <send_gps_pos+0x53a>
    e906:	f24a 6319 	movw	r3, #42521	; 0xa619
    e90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90e:	2200      	movs	r2, #0
    e910:	701a      	strb	r2, [r3, #0]
    e912:	f24a 6319 	movw	r3, #42521	; 0xa619
    e916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	461a      	mov	r2, r3
    e91e:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    e922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e926:	7899      	ldrb	r1, [r3, #2]
    e928:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e930:	5499      	strb	r1, [r3, r2]
    e932:	4b20      	ldr	r3, [pc, #128]	; (e9b4 <send_gps_pos+0x5dc>)
    e934:	781a      	ldrb	r2, [r3, #0]
    e936:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e93e:	781b      	ldrb	r3, [r3, #0]
    e940:	4413      	add	r3, r2
    e942:	b2da      	uxtb	r2, r3
    e944:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e94c:	701a      	strb	r2, [r3, #0]
    e94e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e956:	781a      	ldrb	r2, [r3, #0]
    e958:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	4413      	add	r3, r2
    e964:	b2da      	uxtb	r2, r3
    e966:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96e:	701a      	strb	r2, [r3, #0]
    e970:	f24a 6319 	movw	r3, #42521	; 0xa619
    e974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	3301      	adds	r3, #1
    e97c:	b2da      	uxtb	r2, r3
    e97e:	f24a 6319 	movw	r3, #42521	; 0xa619
    e982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e986:	701a      	strb	r2, [r3, #0]
    e988:	f24a 6319 	movw	r3, #42521	; 0xa619
    e98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	2bff      	cmp	r3, #255	; 0xff
    e994:	d110      	bne.n	e9b8 <send_gps_pos+0x5e0>
    e996:	f24a 6319 	movw	r3, #42521	; 0xa619
    e99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99e:	2200      	movs	r2, #0
    e9a0:	701a      	strb	r2, [r3, #0]
    e9a2:	e009      	b.n	e9b8 <send_gps_pos+0x5e0>
    e9a4:	2000a79d 	.word	0x2000a79d
    e9a8:	2000a79e 	.word	0x2000a79e
    e9ac:	2000a79f 	.word	0x2000a79f
    e9b0:	2000a7a1 	.word	0x2000a7a1
    e9b4:	2000a7a2 	.word	0x2000a7a2
    e9b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    e9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c0:	781b      	ldrb	r3, [r3, #0]
    e9c2:	461a      	mov	r2, r3
    e9c4:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
    e9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9cc:	78d9      	ldrb	r1, [r3, #3]
    e9ce:	f24a 631c 	movw	r3, #42524	; 0xa61c
    e9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d6:	5499      	strb	r1, [r3, r2]
    e9d8:	4bd3      	ldr	r3, [pc, #844]	; (ed28 <send_gps_pos+0x950>)
    e9da:	781a      	ldrb	r2, [r3, #0]
    e9dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e4:	781b      	ldrb	r3, [r3, #0]
    e9e6:	4413      	add	r3, r2
    e9e8:	b2da      	uxtb	r2, r3
    e9ea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    e9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f2:	701a      	strb	r2, [r3, #0]
    e9f4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    e9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fc:	781a      	ldrb	r2, [r3, #0]
    e9fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ea02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea06:	781b      	ldrb	r3, [r3, #0]
    ea08:	4413      	add	r3, r2
    ea0a:	b2da      	uxtb	r2, r3
    ea0c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ea10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea14:	701a      	strb	r2, [r3, #0]
    ea16:	f24a 6319 	movw	r3, #42521	; 0xa619
    ea1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1e:	781b      	ldrb	r3, [r3, #0]
    ea20:	3301      	adds	r3, #1
    ea22:	b2da      	uxtb	r2, r3
    ea24:	f24a 6319 	movw	r3, #42521	; 0xa619
    ea28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2c:	701a      	strb	r2, [r3, #0]
    ea2e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ea32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea36:	781b      	ldrb	r3, [r3, #0]
    ea38:	2bff      	cmp	r3, #255	; 0xff
    ea3a:	d105      	bne.n	ea48 <send_gps_pos+0x670>
    ea3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea44:	2200      	movs	r2, #0
    ea46:	701a      	strb	r2, [r3, #0]
    ea48:	f24a 6319 	movw	r3, #42521	; 0xa619
    ea4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea50:	781b      	ldrb	r3, [r3, #0]
    ea52:	461a      	mov	r2, r3
    ea54:	f24a 7398 	movw	r3, #42904	; 0xa798
    ea58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5c:	7819      	ldrb	r1, [r3, #0]
    ea5e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ea62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea66:	5499      	strb	r1, [r3, r2]
    ea68:	f24a 7398 	movw	r3, #42904	; 0xa798
    ea6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea70:	781a      	ldrb	r2, [r3, #0]
    ea72:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ea76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea7a:	781b      	ldrb	r3, [r3, #0]
    ea7c:	4413      	add	r3, r2
    ea7e:	b2da      	uxtb	r2, r3
    ea80:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ea84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea88:	701a      	strb	r2, [r3, #0]
    ea8a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ea8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea92:	781a      	ldrb	r2, [r3, #0]
    ea94:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ea98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9c:	781b      	ldrb	r3, [r3, #0]
    ea9e:	4413      	add	r3, r2
    eaa0:	b2da      	uxtb	r2, r3
    eaa2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    eaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaaa:	701a      	strb	r2, [r3, #0]
    eaac:	f24a 6319 	movw	r3, #42521	; 0xa619
    eab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	3301      	adds	r3, #1
    eab8:	b2da      	uxtb	r2, r3
    eaba:	f24a 6319 	movw	r3, #42521	; 0xa619
    eabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac2:	701a      	strb	r2, [r3, #0]
    eac4:	f24a 6319 	movw	r3, #42521	; 0xa619
    eac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	2bff      	cmp	r3, #255	; 0xff
    ead0:	d105      	bne.n	eade <send_gps_pos+0x706>
    ead2:	f24a 6319 	movw	r3, #42521	; 0xa619
    ead6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eada:	2200      	movs	r2, #0
    eadc:	701a      	strb	r2, [r3, #0]
    eade:	f24a 6319 	movw	r3, #42521	; 0xa619
    eae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae6:	781b      	ldrb	r3, [r3, #0]
    eae8:	461a      	mov	r2, r3
    eaea:	f24a 7398 	movw	r3, #42904	; 0xa798
    eaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf2:	7859      	ldrb	r1, [r3, #1]
    eaf4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    eaf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafc:	5499      	strb	r1, [r3, r2]
    eafe:	4b8b      	ldr	r3, [pc, #556]	; (ed2c <send_gps_pos+0x954>)
    eb00:	781a      	ldrb	r2, [r3, #0]
    eb02:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb0a:	781b      	ldrb	r3, [r3, #0]
    eb0c:	4413      	add	r3, r2
    eb0e:	b2da      	uxtb	r2, r3
    eb10:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb18:	701a      	strb	r2, [r3, #0]
    eb1a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    eb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb22:	781a      	ldrb	r2, [r3, #0]
    eb24:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	4413      	add	r3, r2
    eb30:	b2da      	uxtb	r2, r3
    eb32:	f24a 731e 	movw	r3, #42782	; 0xa71e
    eb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb3a:	701a      	strb	r2, [r3, #0]
    eb3c:	f24a 6319 	movw	r3, #42521	; 0xa619
    eb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	3301      	adds	r3, #1
    eb48:	b2da      	uxtb	r2, r3
    eb4a:	f24a 6319 	movw	r3, #42521	; 0xa619
    eb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb52:	701a      	strb	r2, [r3, #0]
    eb54:	f24a 6319 	movw	r3, #42521	; 0xa619
    eb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5c:	781b      	ldrb	r3, [r3, #0]
    eb5e:	2bff      	cmp	r3, #255	; 0xff
    eb60:	d105      	bne.n	eb6e <send_gps_pos+0x796>
    eb62:	f24a 6319 	movw	r3, #42521	; 0xa619
    eb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb6a:	2200      	movs	r2, #0
    eb6c:	701a      	strb	r2, [r3, #0]
    eb6e:	f24a 6319 	movw	r3, #42521	; 0xa619
    eb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb76:	781b      	ldrb	r3, [r3, #0]
    eb78:	461a      	mov	r2, r3
    eb7a:	f24a 7398 	movw	r3, #42904	; 0xa798
    eb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb82:	7899      	ldrb	r1, [r3, #2]
    eb84:	f24a 631c 	movw	r3, #42524	; 0xa61c
    eb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8c:	5499      	strb	r1, [r3, r2]
    eb8e:	4b68      	ldr	r3, [pc, #416]	; (ed30 <send_gps_pos+0x958>)
    eb90:	781a      	ldrb	r2, [r3, #0]
    eb92:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	4413      	add	r3, r2
    eb9e:	b2da      	uxtb	r2, r3
    eba0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba8:	701a      	strb	r2, [r3, #0]
    ebaa:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ebae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb2:	781a      	ldrb	r2, [r3, #0]
    ebb4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ebb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbc:	781b      	ldrb	r3, [r3, #0]
    ebbe:	4413      	add	r3, r2
    ebc0:	b2da      	uxtb	r2, r3
    ebc2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ebc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebca:	701a      	strb	r2, [r3, #0]
    ebcc:	f24a 6319 	movw	r3, #42521	; 0xa619
    ebd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd4:	781b      	ldrb	r3, [r3, #0]
    ebd6:	3301      	adds	r3, #1
    ebd8:	b2da      	uxtb	r2, r3
    ebda:	f24a 6319 	movw	r3, #42521	; 0xa619
    ebde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe2:	701a      	strb	r2, [r3, #0]
    ebe4:	f24a 6319 	movw	r3, #42521	; 0xa619
    ebe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebec:	781b      	ldrb	r3, [r3, #0]
    ebee:	2bff      	cmp	r3, #255	; 0xff
    ebf0:	d105      	bne.n	ebfe <send_gps_pos+0x826>
    ebf2:	f24a 6319 	movw	r3, #42521	; 0xa619
    ebf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebfa:	2200      	movs	r2, #0
    ebfc:	701a      	strb	r2, [r3, #0]
    ebfe:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec06:	781b      	ldrb	r3, [r3, #0]
    ec08:	461a      	mov	r2, r3
    ec0a:	f24a 7398 	movw	r3, #42904	; 0xa798
    ec0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec12:	78d9      	ldrb	r1, [r3, #3]
    ec14:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ec18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1c:	5499      	strb	r1, [r3, r2]
    ec1e:	4b45      	ldr	r3, [pc, #276]	; (ed34 <send_gps_pos+0x95c>)
    ec20:	781a      	ldrb	r2, [r3, #0]
    ec22:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ec26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	4413      	add	r3, r2
    ec2e:	b2da      	uxtb	r2, r3
    ec30:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ec34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec38:	701a      	strb	r2, [r3, #0]
    ec3a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ec3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec42:	781a      	ldrb	r2, [r3, #0]
    ec44:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ec48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4c:	781b      	ldrb	r3, [r3, #0]
    ec4e:	4413      	add	r3, r2
    ec50:	b2da      	uxtb	r2, r3
    ec52:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ec56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5a:	701a      	strb	r2, [r3, #0]
    ec5c:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec64:	781b      	ldrb	r3, [r3, #0]
    ec66:	3301      	adds	r3, #1
    ec68:	b2da      	uxtb	r2, r3
    ec6a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec72:	701a      	strb	r2, [r3, #0]
    ec74:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec7c:	781b      	ldrb	r3, [r3, #0]
    ec7e:	2bff      	cmp	r3, #255	; 0xff
    ec80:	d105      	bne.n	ec8e <send_gps_pos+0x8b6>
    ec82:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec8a:	2200      	movs	r2, #0
    ec8c:	701a      	strb	r2, [r3, #0]
    ec8e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ec92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec96:	781b      	ldrb	r3, [r3, #0]
    ec98:	461a      	mov	r2, r3
    ec9a:	f24a 738c 	movw	r3, #42892	; 0xa78c
    ec9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca2:	7819      	ldrb	r1, [r3, #0]
    eca4:	f24a 631c 	movw	r3, #42524	; 0xa61c
    eca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecac:	5499      	strb	r1, [r3, r2]
    ecae:	f24a 738c 	movw	r3, #42892	; 0xa78c
    ecb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb6:	781a      	ldrb	r2, [r3, #0]
    ecb8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ecbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc0:	781b      	ldrb	r3, [r3, #0]
    ecc2:	4413      	add	r3, r2
    ecc4:	b2da      	uxtb	r2, r3
    ecc6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ecca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecce:	701a      	strb	r2, [r3, #0]
    ecd0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ecd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd8:	781a      	ldrb	r2, [r3, #0]
    ecda:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ecde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	4413      	add	r3, r2
    ece6:	b2da      	uxtb	r2, r3
    ece8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ecec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf0:	701a      	strb	r2, [r3, #0]
    ecf2:	f24a 6319 	movw	r3, #42521	; 0xa619
    ecf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	3301      	adds	r3, #1
    ecfe:	b2da      	uxtb	r2, r3
    ed00:	f24a 6319 	movw	r3, #42521	; 0xa619
    ed04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed08:	701a      	strb	r2, [r3, #0]
    ed0a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ed0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed12:	781b      	ldrb	r3, [r3, #0]
    ed14:	2bff      	cmp	r3, #255	; 0xff
    ed16:	d10f      	bne.n	ed38 <send_gps_pos+0x960>
    ed18:	f24a 6319 	movw	r3, #42521	; 0xa619
    ed1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed20:	2200      	movs	r2, #0
    ed22:	701a      	strb	r2, [r3, #0]
    ed24:	e008      	b.n	ed38 <send_gps_pos+0x960>
    ed26:	bf00      	nop
    ed28:	2000a7a3 	.word	0x2000a7a3
    ed2c:	2000a799 	.word	0x2000a799
    ed30:	2000a79a 	.word	0x2000a79a
    ed34:	2000a79b 	.word	0x2000a79b
    ed38:	f24a 6319 	movw	r3, #42521	; 0xa619
    ed3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed40:	781b      	ldrb	r3, [r3, #0]
    ed42:	461a      	mov	r2, r3
    ed44:	f24a 738c 	movw	r3, #42892	; 0xa78c
    ed48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4c:	7859      	ldrb	r1, [r3, #1]
    ed4e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ed52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed56:	5499      	strb	r1, [r3, r2]
    ed58:	4bd1      	ldr	r3, [pc, #836]	; (f0a0 <send_gps_pos+0xcc8>)
    ed5a:	781a      	ldrb	r2, [r3, #0]
    ed5c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ed60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed64:	781b      	ldrb	r3, [r3, #0]
    ed66:	4413      	add	r3, r2
    ed68:	b2da      	uxtb	r2, r3
    ed6a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ed6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed72:	701a      	strb	r2, [r3, #0]
    ed74:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ed78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7c:	781a      	ldrb	r2, [r3, #0]
    ed7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ed82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed86:	781b      	ldrb	r3, [r3, #0]
    ed88:	4413      	add	r3, r2
    ed8a:	b2da      	uxtb	r2, r3
    ed8c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ed90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed94:	701a      	strb	r2, [r3, #0]
    ed96:	f24a 6319 	movw	r3, #42521	; 0xa619
    ed9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed9e:	781b      	ldrb	r3, [r3, #0]
    eda0:	3301      	adds	r3, #1
    eda2:	b2da      	uxtb	r2, r3
    eda4:	f24a 6319 	movw	r3, #42521	; 0xa619
    eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edac:	701a      	strb	r2, [r3, #0]
    edae:	f24a 6319 	movw	r3, #42521	; 0xa619
    edb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	2bff      	cmp	r3, #255	; 0xff
    edba:	d105      	bne.n	edc8 <send_gps_pos+0x9f0>
    edbc:	f24a 6319 	movw	r3, #42521	; 0xa619
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	2200      	movs	r2, #0
    edc6:	701a      	strb	r2, [r3, #0]
    edc8:	f24a 6319 	movw	r3, #42521	; 0xa619
    edcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd0:	781b      	ldrb	r3, [r3, #0]
    edd2:	461a      	mov	r2, r3
    edd4:	f24a 738c 	movw	r3, #42892	; 0xa78c
    edd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eddc:	7899      	ldrb	r1, [r3, #2]
    edde:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ede2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede6:	5499      	strb	r1, [r3, r2]
    ede8:	4bae      	ldr	r3, [pc, #696]	; (f0a4 <send_gps_pos+0xccc>)
    edea:	781a      	ldrb	r2, [r3, #0]
    edec:	f24a 731d 	movw	r3, #42781	; 0xa71d
    edf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf4:	781b      	ldrb	r3, [r3, #0]
    edf6:	4413      	add	r3, r2
    edf8:	b2da      	uxtb	r2, r3
    edfa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee02:	701a      	strb	r2, [r3, #0]
    ee04:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	781a      	ldrb	r2, [r3, #0]
    ee0e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ee12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee16:	781b      	ldrb	r3, [r3, #0]
    ee18:	4413      	add	r3, r2
    ee1a:	b2da      	uxtb	r2, r3
    ee1c:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ee20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee24:	701a      	strb	r2, [r3, #0]
    ee26:	f24a 6319 	movw	r3, #42521	; 0xa619
    ee2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2e:	781b      	ldrb	r3, [r3, #0]
    ee30:	3301      	adds	r3, #1
    ee32:	b2da      	uxtb	r2, r3
    ee34:	f24a 6319 	movw	r3, #42521	; 0xa619
    ee38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3c:	701a      	strb	r2, [r3, #0]
    ee3e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ee42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee46:	781b      	ldrb	r3, [r3, #0]
    ee48:	2bff      	cmp	r3, #255	; 0xff
    ee4a:	d105      	bne.n	ee58 <send_gps_pos+0xa80>
    ee4c:	f24a 6319 	movw	r3, #42521	; 0xa619
    ee50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee54:	2200      	movs	r2, #0
    ee56:	701a      	strb	r2, [r3, #0]
    ee58:	f24a 6319 	movw	r3, #42521	; 0xa619
    ee5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee60:	781b      	ldrb	r3, [r3, #0]
    ee62:	461a      	mov	r2, r3
    ee64:	f24a 738c 	movw	r3, #42892	; 0xa78c
    ee68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6c:	78d9      	ldrb	r1, [r3, #3]
    ee6e:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ee72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee76:	5499      	strb	r1, [r3, r2]
    ee78:	4b8b      	ldr	r3, [pc, #556]	; (f0a8 <send_gps_pos+0xcd0>)
    ee7a:	781a      	ldrb	r2, [r3, #0]
    ee7c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ee80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee84:	781b      	ldrb	r3, [r3, #0]
    ee86:	4413      	add	r3, r2
    ee88:	b2da      	uxtb	r2, r3
    ee8a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ee8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee92:	701a      	strb	r2, [r3, #0]
    ee94:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ee98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee9c:	781a      	ldrb	r2, [r3, #0]
    ee9e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    eea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea6:	781b      	ldrb	r3, [r3, #0]
    eea8:	4413      	add	r3, r2
    eeaa:	b2da      	uxtb	r2, r3
    eeac:	f24a 731e 	movw	r3, #42782	; 0xa71e
    eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb4:	701a      	strb	r2, [r3, #0]
    eeb6:	f24a 6319 	movw	r3, #42521	; 0xa619
    eeba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eebe:	781b      	ldrb	r3, [r3, #0]
    eec0:	3301      	adds	r3, #1
    eec2:	b2da      	uxtb	r2, r3
    eec4:	f24a 6319 	movw	r3, #42521	; 0xa619
    eec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eecc:	701a      	strb	r2, [r3, #0]
    eece:	f24a 6319 	movw	r3, #42521	; 0xa619
    eed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed6:	781b      	ldrb	r3, [r3, #0]
    eed8:	2bff      	cmp	r3, #255	; 0xff
    eeda:	d105      	bne.n	eee8 <send_gps_pos+0xb10>
    eedc:	f24a 6319 	movw	r3, #42521	; 0xa619
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	2200      	movs	r2, #0
    eee6:	701a      	strb	r2, [r3, #0]
    eee8:	f24a 6319 	movw	r3, #42521	; 0xa619
    eeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef0:	781b      	ldrb	r3, [r3, #0]
    eef2:	461a      	mov	r2, r3
    eef4:	f24a 7390 	movw	r3, #42896	; 0xa790
    eef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefc:	7819      	ldrb	r1, [r3, #0]
    eefe:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ef02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef06:	5499      	strb	r1, [r3, r2]
    ef08:	f24a 7390 	movw	r3, #42896	; 0xa790
    ef0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef10:	781a      	ldrb	r2, [r3, #0]
    ef12:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ef16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1a:	781b      	ldrb	r3, [r3, #0]
    ef1c:	4413      	add	r3, r2
    ef1e:	b2da      	uxtb	r2, r3
    ef20:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ef24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef28:	701a      	strb	r2, [r3, #0]
    ef2a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ef2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef32:	781a      	ldrb	r2, [r3, #0]
    ef34:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ef38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3c:	781b      	ldrb	r3, [r3, #0]
    ef3e:	4413      	add	r3, r2
    ef40:	b2da      	uxtb	r2, r3
    ef42:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ef46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4a:	701a      	strb	r2, [r3, #0]
    ef4c:	f24a 6319 	movw	r3, #42521	; 0xa619
    ef50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef54:	781b      	ldrb	r3, [r3, #0]
    ef56:	3301      	adds	r3, #1
    ef58:	b2da      	uxtb	r2, r3
    ef5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ef5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef62:	701a      	strb	r2, [r3, #0]
    ef64:	f24a 6319 	movw	r3, #42521	; 0xa619
    ef68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6c:	781b      	ldrb	r3, [r3, #0]
    ef6e:	2bff      	cmp	r3, #255	; 0xff
    ef70:	d105      	bne.n	ef7e <send_gps_pos+0xba6>
    ef72:	f24a 6319 	movw	r3, #42521	; 0xa619
    ef76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7a:	2200      	movs	r2, #0
    ef7c:	701a      	strb	r2, [r3, #0]
    ef7e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ef82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef86:	781b      	ldrb	r3, [r3, #0]
    ef88:	461a      	mov	r2, r3
    ef8a:	f24a 7390 	movw	r3, #42896	; 0xa790
    ef8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef92:	7859      	ldrb	r1, [r3, #1]
    ef94:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ef98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9c:	5499      	strb	r1, [r3, r2]
    ef9e:	4b43      	ldr	r3, [pc, #268]	; (f0ac <send_gps_pos+0xcd4>)
    efa0:	781a      	ldrb	r2, [r3, #0]
    efa2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    efa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	4413      	add	r3, r2
    efae:	b2da      	uxtb	r2, r3
    efb0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    efb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f24a 731e 	movw	r3, #42782	; 0xa71e
    efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc2:	781a      	ldrb	r2, [r3, #0]
    efc4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    efc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efcc:	781b      	ldrb	r3, [r3, #0]
    efce:	4413      	add	r3, r2
    efd0:	b2da      	uxtb	r2, r3
    efd2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    efd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efda:	701a      	strb	r2, [r3, #0]
    efdc:	f24a 6319 	movw	r3, #42521	; 0xa619
    efe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe4:	781b      	ldrb	r3, [r3, #0]
    efe6:	3301      	adds	r3, #1
    efe8:	b2da      	uxtb	r2, r3
    efea:	f24a 6319 	movw	r3, #42521	; 0xa619
    efee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff2:	701a      	strb	r2, [r3, #0]
    eff4:	f24a 6319 	movw	r3, #42521	; 0xa619
    eff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    effc:	781b      	ldrb	r3, [r3, #0]
    effe:	2bff      	cmp	r3, #255	; 0xff
    f000:	d105      	bne.n	f00e <send_gps_pos+0xc36>
    f002:	f24a 6319 	movw	r3, #42521	; 0xa619
    f006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00a:	2200      	movs	r2, #0
    f00c:	701a      	strb	r2, [r3, #0]
    f00e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f016:	781b      	ldrb	r3, [r3, #0]
    f018:	461a      	mov	r2, r3
    f01a:	f24a 7390 	movw	r3, #42896	; 0xa790
    f01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f022:	7899      	ldrb	r1, [r3, #2]
    f024:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02c:	5499      	strb	r1, [r3, r2]
    f02e:	4b20      	ldr	r3, [pc, #128]	; (f0b0 <send_gps_pos+0xcd8>)
    f030:	781a      	ldrb	r2, [r3, #0]
    f032:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f03a:	781b      	ldrb	r3, [r3, #0]
    f03c:	4413      	add	r3, r2
    f03e:	b2da      	uxtb	r2, r3
    f040:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f048:	701a      	strb	r2, [r3, #0]
    f04a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f052:	781a      	ldrb	r2, [r3, #0]
    f054:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05c:	781b      	ldrb	r3, [r3, #0]
    f05e:	4413      	add	r3, r2
    f060:	b2da      	uxtb	r2, r3
    f062:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f06a:	701a      	strb	r2, [r3, #0]
    f06c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	781b      	ldrb	r3, [r3, #0]
    f076:	3301      	adds	r3, #1
    f078:	b2da      	uxtb	r2, r3
    f07a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f082:	701a      	strb	r2, [r3, #0]
    f084:	f24a 6319 	movw	r3, #42521	; 0xa619
    f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	2bff      	cmp	r3, #255	; 0xff
    f090:	d110      	bne.n	f0b4 <send_gps_pos+0xcdc>
    f092:	f24a 6319 	movw	r3, #42521	; 0xa619
    f096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f09a:	2200      	movs	r2, #0
    f09c:	701a      	strb	r2, [r3, #0]
    f09e:	e009      	b.n	f0b4 <send_gps_pos+0xcdc>
    f0a0:	2000a78d 	.word	0x2000a78d
    f0a4:	2000a78e 	.word	0x2000a78e
    f0a8:	2000a78f 	.word	0x2000a78f
    f0ac:	2000a791 	.word	0x2000a791
    f0b0:	2000a792 	.word	0x2000a792
    f0b4:	f24a 6319 	movw	r3, #42521	; 0xa619
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	461a      	mov	r2, r3
    f0c0:	f24a 7390 	movw	r3, #42896	; 0xa790
    f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c8:	78d9      	ldrb	r1, [r3, #3]
    f0ca:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d2:	5499      	strb	r1, [r3, r2]
    f0d4:	4bd3      	ldr	r3, [pc, #844]	; (f424 <send_gps_pos+0x104c>)
    f0d6:	781a      	ldrb	r2, [r3, #0]
    f0d8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e0:	781b      	ldrb	r3, [r3, #0]
    f0e2:	4413      	add	r3, r2
    f0e4:	b2da      	uxtb	r2, r3
    f0e6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ee:	701a      	strb	r2, [r3, #0]
    f0f0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f8:	781a      	ldrb	r2, [r3, #0]
    f0fa:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f102:	781b      	ldrb	r3, [r3, #0]
    f104:	4413      	add	r3, r2
    f106:	b2da      	uxtb	r2, r3
    f108:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f110:	701a      	strb	r2, [r3, #0]
    f112:	f24a 6319 	movw	r3, #42521	; 0xa619
    f116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	3301      	adds	r3, #1
    f11e:	b2da      	uxtb	r2, r3
    f120:	f24a 6319 	movw	r3, #42521	; 0xa619
    f124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f128:	701a      	strb	r2, [r3, #0]
    f12a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f132:	781b      	ldrb	r3, [r3, #0]
    f134:	2bff      	cmp	r3, #255	; 0xff
    f136:	d105      	bne.n	f144 <send_gps_pos+0xd6c>
    f138:	f24a 6319 	movw	r3, #42521	; 0xa619
    f13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f140:	2200      	movs	r2, #0
    f142:	701a      	strb	r2, [r3, #0]
    f144:	f24a 6319 	movw	r3, #42521	; 0xa619
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	781b      	ldrb	r3, [r3, #0]
    f14e:	461a      	mov	r2, r3
    f150:	f24a 7394 	movw	r3, #42900	; 0xa794
    f154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f158:	7819      	ldrb	r1, [r3, #0]
    f15a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f162:	5499      	strb	r1, [r3, r2]
    f164:	f24a 7394 	movw	r3, #42900	; 0xa794
    f168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f16c:	781a      	ldrb	r2, [r3, #0]
    f16e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f176:	781b      	ldrb	r3, [r3, #0]
    f178:	4413      	add	r3, r2
    f17a:	b2da      	uxtb	r2, r3
    f17c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f184:	701a      	strb	r2, [r3, #0]
    f186:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18e:	781a      	ldrb	r2, [r3, #0]
    f190:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f198:	781b      	ldrb	r3, [r3, #0]
    f19a:	4413      	add	r3, r2
    f19c:	b2da      	uxtb	r2, r3
    f19e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a6:	701a      	strb	r2, [r3, #0]
    f1a8:	f24a 6319 	movw	r3, #42521	; 0xa619
    f1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b0:	781b      	ldrb	r3, [r3, #0]
    f1b2:	3301      	adds	r3, #1
    f1b4:	b2da      	uxtb	r2, r3
    f1b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    f1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1be:	701a      	strb	r2, [r3, #0]
    f1c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    f1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	2bff      	cmp	r3, #255	; 0xff
    f1cc:	d105      	bne.n	f1da <send_gps_pos+0xe02>
    f1ce:	f24a 6319 	movw	r3, #42521	; 0xa619
    f1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d6:	2200      	movs	r2, #0
    f1d8:	701a      	strb	r2, [r3, #0]
    f1da:	f24a 6319 	movw	r3, #42521	; 0xa619
    f1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e2:	781b      	ldrb	r3, [r3, #0]
    f1e4:	461a      	mov	r2, r3
    f1e6:	f24a 7394 	movw	r3, #42900	; 0xa794
    f1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ee:	7859      	ldrb	r1, [r3, #1]
    f1f0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f8:	5499      	strb	r1, [r3, r2]
    f1fa:	4b8b      	ldr	r3, [pc, #556]	; (f428 <send_gps_pos+0x1050>)
    f1fc:	781a      	ldrb	r2, [r3, #0]
    f1fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f206:	781b      	ldrb	r3, [r3, #0]
    f208:	4413      	add	r3, r2
    f20a:	b2da      	uxtb	r2, r3
    f20c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f214:	701a      	strb	r2, [r3, #0]
    f216:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f21e:	781a      	ldrb	r2, [r3, #0]
    f220:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f228:	781b      	ldrb	r3, [r3, #0]
    f22a:	4413      	add	r3, r2
    f22c:	b2da      	uxtb	r2, r3
    f22e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f236:	701a      	strb	r2, [r3, #0]
    f238:	f24a 6319 	movw	r3, #42521	; 0xa619
    f23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f240:	781b      	ldrb	r3, [r3, #0]
    f242:	3301      	adds	r3, #1
    f244:	b2da      	uxtb	r2, r3
    f246:	f24a 6319 	movw	r3, #42521	; 0xa619
    f24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24e:	701a      	strb	r2, [r3, #0]
    f250:	f24a 6319 	movw	r3, #42521	; 0xa619
    f254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f258:	781b      	ldrb	r3, [r3, #0]
    f25a:	2bff      	cmp	r3, #255	; 0xff
    f25c:	d105      	bne.n	f26a <send_gps_pos+0xe92>
    f25e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f266:	2200      	movs	r2, #0
    f268:	701a      	strb	r2, [r3, #0]
    f26a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f272:	781b      	ldrb	r3, [r3, #0]
    f274:	461a      	mov	r2, r3
    f276:	f24a 7394 	movw	r3, #42900	; 0xa794
    f27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27e:	7899      	ldrb	r1, [r3, #2]
    f280:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f288:	5499      	strb	r1, [r3, r2]
    f28a:	4b68      	ldr	r3, [pc, #416]	; (f42c <send_gps_pos+0x1054>)
    f28c:	781a      	ldrb	r2, [r3, #0]
    f28e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f296:	781b      	ldrb	r3, [r3, #0]
    f298:	4413      	add	r3, r2
    f29a:	b2da      	uxtb	r2, r3
    f29c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a4:	701a      	strb	r2, [r3, #0]
    f2a6:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ae:	781a      	ldrb	r2, [r3, #0]
    f2b0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	4413      	add	r3, r2
    f2bc:	b2da      	uxtb	r2, r3
    f2be:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c6:	701a      	strb	r2, [r3, #0]
    f2c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    f2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d0:	781b      	ldrb	r3, [r3, #0]
    f2d2:	3301      	adds	r3, #1
    f2d4:	b2da      	uxtb	r2, r3
    f2d6:	f24a 6319 	movw	r3, #42521	; 0xa619
    f2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2de:	701a      	strb	r2, [r3, #0]
    f2e0:	f24a 6319 	movw	r3, #42521	; 0xa619
    f2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e8:	781b      	ldrb	r3, [r3, #0]
    f2ea:	2bff      	cmp	r3, #255	; 0xff
    f2ec:	d105      	bne.n	f2fa <send_gps_pos+0xf22>
    f2ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    f2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f6:	2200      	movs	r2, #0
    f2f8:	701a      	strb	r2, [r3, #0]
    f2fa:	f24a 6319 	movw	r3, #42521	; 0xa619
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	461a      	mov	r2, r3
    f306:	f24a 7394 	movw	r3, #42900	; 0xa794
    f30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f30e:	78d9      	ldrb	r1, [r3, #3]
    f310:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f318:	5499      	strb	r1, [r3, r2]
    f31a:	4b45      	ldr	r3, [pc, #276]	; (f430 <send_gps_pos+0x1058>)
    f31c:	781a      	ldrb	r2, [r3, #0]
    f31e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f326:	781b      	ldrb	r3, [r3, #0]
    f328:	4413      	add	r3, r2
    f32a:	b2da      	uxtb	r2, r3
    f32c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f334:	701a      	strb	r2, [r3, #0]
    f336:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33e:	781a      	ldrb	r2, [r3, #0]
    f340:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f348:	781b      	ldrb	r3, [r3, #0]
    f34a:	4413      	add	r3, r2
    f34c:	b2da      	uxtb	r2, r3
    f34e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f356:	701a      	strb	r2, [r3, #0]
    f358:	f24a 6319 	movw	r3, #42521	; 0xa619
    f35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	3301      	adds	r3, #1
    f364:	b2da      	uxtb	r2, r3
    f366:	f24a 6319 	movw	r3, #42521	; 0xa619
    f36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36e:	701a      	strb	r2, [r3, #0]
    f370:	f24a 6319 	movw	r3, #42521	; 0xa619
    f374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f378:	781b      	ldrb	r3, [r3, #0]
    f37a:	2bff      	cmp	r3, #255	; 0xff
    f37c:	d105      	bne.n	f38a <send_gps_pos+0xfb2>
    f37e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f386:	2200      	movs	r2, #0
    f388:	701a      	strb	r2, [r3, #0]
    f38a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f392:	781b      	ldrb	r3, [r3, #0]
    f394:	461a      	mov	r2, r3
    f396:	f24a 7388 	movw	r3, #42888	; 0xa788
    f39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39e:	7819      	ldrb	r1, [r3, #0]
    f3a0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a8:	5499      	strb	r1, [r3, r2]
    f3aa:	f24a 7388 	movw	r3, #42888	; 0xa788
    f3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b2:	781a      	ldrb	r2, [r3, #0]
    f3b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3bc:	781b      	ldrb	r3, [r3, #0]
    f3be:	4413      	add	r3, r2
    f3c0:	b2da      	uxtb	r2, r3
    f3c2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ca:	701a      	strb	r2, [r3, #0]
    f3cc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d4:	781a      	ldrb	r2, [r3, #0]
    f3d6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	4413      	add	r3, r2
    f3e2:	b2da      	uxtb	r2, r3
    f3e4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ec:	701a      	strb	r2, [r3, #0]
    f3ee:	f24a 6319 	movw	r3, #42521	; 0xa619
    f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	3301      	adds	r3, #1
    f3fa:	b2da      	uxtb	r2, r3
    f3fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    f400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f404:	701a      	strb	r2, [r3, #0]
    f406:	f24a 6319 	movw	r3, #42521	; 0xa619
    f40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	2bff      	cmp	r3, #255	; 0xff
    f412:	d10f      	bne.n	f434 <send_gps_pos+0x105c>
    f414:	f24a 6319 	movw	r3, #42521	; 0xa619
    f418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41c:	2200      	movs	r2, #0
    f41e:	701a      	strb	r2, [r3, #0]
    f420:	e008      	b.n	f434 <send_gps_pos+0x105c>
    f422:	bf00      	nop
    f424:	2000a793 	.word	0x2000a793
    f428:	2000a795 	.word	0x2000a795
    f42c:	2000a796 	.word	0x2000a796
    f430:	2000a797 	.word	0x2000a797
    f434:	f24a 6319 	movw	r3, #42521	; 0xa619
    f438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	461a      	mov	r2, r3
    f440:	f24a 7388 	movw	r3, #42888	; 0xa788
    f444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f448:	7859      	ldrb	r1, [r3, #1]
    f44a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f452:	5499      	strb	r1, [r3, r2]
    f454:	4bc0      	ldr	r3, [pc, #768]	; (f758 <send_gps_pos+0x1380>)
    f456:	781a      	ldrb	r2, [r3, #0]
    f458:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f460:	781b      	ldrb	r3, [r3, #0]
    f462:	4413      	add	r3, r2
    f464:	b2da      	uxtb	r2, r3
    f466:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46e:	701a      	strb	r2, [r3, #0]
    f470:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f478:	781a      	ldrb	r2, [r3, #0]
    f47a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f47e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f482:	781b      	ldrb	r3, [r3, #0]
    f484:	4413      	add	r3, r2
    f486:	b2da      	uxtb	r2, r3
    f488:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f490:	701a      	strb	r2, [r3, #0]
    f492:	f24a 6319 	movw	r3, #42521	; 0xa619
    f496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49a:	781b      	ldrb	r3, [r3, #0]
    f49c:	3301      	adds	r3, #1
    f49e:	b2da      	uxtb	r2, r3
    f4a0:	f24a 6319 	movw	r3, #42521	; 0xa619
    f4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a8:	701a      	strb	r2, [r3, #0]
    f4aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    f4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	2bff      	cmp	r3, #255	; 0xff
    f4b6:	d105      	bne.n	f4c4 <send_gps_pos+0x10ec>
    f4b8:	f24a 6319 	movw	r3, #42521	; 0xa619
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	2200      	movs	r2, #0
    f4c2:	701a      	strb	r2, [r3, #0]
    f4c4:	f24a 6319 	movw	r3, #42521	; 0xa619
    f4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4cc:	781b      	ldrb	r3, [r3, #0]
    f4ce:	461a      	mov	r2, r3
    f4d0:	f24a 7388 	movw	r3, #42888	; 0xa788
    f4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d8:	7899      	ldrb	r1, [r3, #2]
    f4da:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e2:	5499      	strb	r1, [r3, r2]
    f4e4:	4b9d      	ldr	r3, [pc, #628]	; (f75c <send_gps_pos+0x1384>)
    f4e6:	781a      	ldrb	r2, [r3, #0]
    f4e8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f0:	781b      	ldrb	r3, [r3, #0]
    f4f2:	4413      	add	r3, r2
    f4f4:	b2da      	uxtb	r2, r3
    f4f6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	701a      	strb	r2, [r3, #0]
    f500:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f508:	781a      	ldrb	r2, [r3, #0]
    f50a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f512:	781b      	ldrb	r3, [r3, #0]
    f514:	4413      	add	r3, r2
    f516:	b2da      	uxtb	r2, r3
    f518:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f520:	701a      	strb	r2, [r3, #0]
    f522:	f24a 6319 	movw	r3, #42521	; 0xa619
    f526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52a:	781b      	ldrb	r3, [r3, #0]
    f52c:	3301      	adds	r3, #1
    f52e:	b2da      	uxtb	r2, r3
    f530:	f24a 6319 	movw	r3, #42521	; 0xa619
    f534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f538:	701a      	strb	r2, [r3, #0]
    f53a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	2bff      	cmp	r3, #255	; 0xff
    f546:	d105      	bne.n	f554 <send_gps_pos+0x117c>
    f548:	f24a 6319 	movw	r3, #42521	; 0xa619
    f54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f550:	2200      	movs	r2, #0
    f552:	701a      	strb	r2, [r3, #0]
    f554:	f24a 6319 	movw	r3, #42521	; 0xa619
    f558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	461a      	mov	r2, r3
    f560:	f24a 7388 	movw	r3, #42888	; 0xa788
    f564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f568:	78d9      	ldrb	r1, [r3, #3]
    f56a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f572:	5499      	strb	r1, [r3, r2]
    f574:	4b7a      	ldr	r3, [pc, #488]	; (f760 <send_gps_pos+0x1388>)
    f576:	781a      	ldrb	r2, [r3, #0]
    f578:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f580:	781b      	ldrb	r3, [r3, #0]
    f582:	4413      	add	r3, r2
    f584:	b2da      	uxtb	r2, r3
    f586:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	781a      	ldrb	r2, [r3, #0]
    f59a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	4413      	add	r3, r2
    f5a6:	b2da      	uxtb	r2, r3
    f5a8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	701a      	strb	r2, [r3, #0]
    f5b2:	f24a 6319 	movw	r3, #42521	; 0xa619
    f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	3301      	adds	r3, #1
    f5be:	b2da      	uxtb	r2, r3
    f5c0:	f24a 6319 	movw	r3, #42521	; 0xa619
    f5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c8:	701a      	strb	r2, [r3, #0]
    f5ca:	f24a 6319 	movw	r3, #42521	; 0xa619
    f5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d2:	781b      	ldrb	r3, [r3, #0]
    f5d4:	2bff      	cmp	r3, #255	; 0xff
    f5d6:	d105      	bne.n	f5e4 <send_gps_pos+0x120c>
    f5d8:	f24a 6319 	movw	r3, #42521	; 0xa619
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	2200      	movs	r2, #0
    f5e2:	701a      	strb	r2, [r3, #0]
    f5e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    f5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ec:	781b      	ldrb	r3, [r3, #0]
    f5ee:	461a      	mov	r2, r3
    f5f0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f8:	7819      	ldrb	r1, [r3, #0]
    f5fa:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f602:	5499      	strb	r1, [r3, r2]
    f604:	f24a 6319 	movw	r3, #42521	; 0xa619
    f608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	3301      	adds	r3, #1
    f610:	b2da      	uxtb	r2, r3
    f612:	f24a 6319 	movw	r3, #42521	; 0xa619
    f616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61a:	701a      	strb	r2, [r3, #0]
    f61c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	2bff      	cmp	r3, #255	; 0xff
    f628:	d105      	bne.n	f636 <send_gps_pos+0x125e>
    f62a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f632:	2200      	movs	r2, #0
    f634:	701a      	strb	r2, [r3, #0]
    f636:	f24a 6319 	movw	r3, #42521	; 0xa619
    f63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63e:	781b      	ldrb	r3, [r3, #0]
    f640:	461a      	mov	r2, r3
    f642:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64a:	7819      	ldrb	r1, [r3, #0]
    f64c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f654:	5499      	strb	r1, [r3, r2]
    f656:	f24a 6319 	movw	r3, #42521	; 0xa619
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	3301      	adds	r3, #1
    f662:	b2da      	uxtb	r2, r3
    f664:	f24a 6319 	movw	r3, #42521	; 0xa619
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	2bff      	cmp	r3, #255	; 0xff
    f67a:	d105      	bne.n	f688 <send_gps_pos+0x12b0>
    f67c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f684:	2200      	movs	r2, #0
    f686:	701a      	strb	r2, [r3, #0]
    f688:	f242 0339 	movw	r3, #8249	; 0x2039
    f68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f690:	781b      	ldrb	r3, [r3, #0]
    f692:	b2db      	uxtb	r3, r3
    f694:	f003 0310 	and.w	r3, r3, #16
    f698:	2b00      	cmp	r3, #0
    f69a:	d15a      	bne.n	f752 <send_gps_pos+0x137a>
    f69c:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a4:	781b      	ldrb	r3, [r3, #0]
    f6a6:	b2db      	uxtb	r3, r3
    f6a8:	461a      	mov	r2, r3
    f6aa:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b2:	5c9a      	ldrb	r2, [r3, r2]
    f6b4:	f24a 731b 	movw	r3, #42779	; 0xa71b
    f6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6bc:	701a      	strb	r2, [r3, #0]
    f6be:	f24a 731c 	movw	r3, #42780	; 0xa71c
    f6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c6:	2200      	movs	r2, #0
    f6c8:	701a      	strb	r2, [r3, #0]
    f6ca:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d2:	781b      	ldrb	r3, [r3, #0]
    f6d4:	b2db      	uxtb	r3, r3
    f6d6:	3301      	adds	r3, #1
    f6d8:	b2da      	uxtb	r2, r3
    f6da:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e2:	701a      	strb	r2, [r3, #0]
    f6e4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ec:	781b      	ldrb	r3, [r3, #0]
    f6ee:	b2db      	uxtb	r3, r3
    f6f0:	2bff      	cmp	r3, #255	; 0xff
    f6f2:	d105      	bne.n	f700 <send_gps_pos+0x1328>
    f6f4:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fc:	2200      	movs	r2, #0
    f6fe:	701a      	strb	r2, [r3, #0]
    f700:	f242 0338 	movw	r3, #8248	; 0x2038
    f704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f708:	f242 0238 	movw	r2, #8248	; 0x2038
    f70c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f710:	7812      	ldrb	r2, [r2, #0]
    f712:	b2d2      	uxtb	r2, r2
    f714:	f042 0201 	orr.w	r2, r2, #1
    f718:	b2d2      	uxtb	r2, r2
    f71a:	701a      	strb	r2, [r3, #0]
    f71c:	f242 0339 	movw	r3, #8249	; 0x2039
    f720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f724:	f242 0239 	movw	r2, #8249	; 0x2039
    f728:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f72c:	7812      	ldrb	r2, [r2, #0]
    f72e:	b2d2      	uxtb	r2, r2
    f730:	f042 0210 	orr.w	r2, r2, #16
    f734:	b2d2      	uxtb	r2, r2
    f736:	701a      	strb	r2, [r3, #0]
    f738:	e00b      	b.n	f752 <send_gps_pos+0x137a>
    f73a:	f24a 6318 	movw	r3, #42520	; 0xa618
    f73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f742:	781b      	ldrb	r3, [r3, #0]
    f744:	3301      	adds	r3, #1
    f746:	b2da      	uxtb	r2, r3
    f748:	f24a 6318 	movw	r3, #42520	; 0xa618
    f74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f750:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    f752:	f005 fbfd 	bl	14f50 <estimator_update_state_gps>
  }
}
    f756:	bd80      	pop	{r7, pc}
    f758:	2000a789 	.word	0x2000a789
    f75c:	2000a78a 	.word	0x2000a78a
    f760:	2000a78b 	.word	0x2000a78b

0000f764 <send_radIR>:

void send_radIR(void){
    f764:	b480      	push	{r7}
    f766:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    f768:	f24a 73ae 	movw	r3, #42926	; 0xa7ae
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	781b      	ldrb	r3, [r3, #0]
    f772:	2b00      	cmp	r3, #0
    f774:	f000 85e8 	beq.w	10348 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    f778:	f24a 6319 	movw	r3, #42521	; 0xa619
    f77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f780:	781a      	ldrb	r2, [r3, #0]
    f782:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f78a:	781b      	ldrb	r3, [r3, #0]
    f78c:	b2db      	uxtb	r3, r3
    f78e:	429a      	cmp	r2, r3
    f790:	d313      	bcc.n	f7ba <send_radIR+0x56>
    f792:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79a:	781b      	ldrb	r3, [r3, #0]
    f79c:	b2db      	uxtb	r3, r3
    f79e:	461a      	mov	r2, r3
    f7a0:	f24a 6319 	movw	r3, #42521	; 0xa619
    f7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a8:	781b      	ldrb	r3, [r3, #0]
    f7aa:	1ad3      	subs	r3, r2, r3
    f7ac:	33ff      	adds	r3, #255	; 0xff
    f7ae:	2b14      	cmp	r3, #20
    f7b0:	bfd4      	ite	le
    f7b2:	2300      	movle	r3, #0
    f7b4:	2301      	movgt	r3, #1
    f7b6:	b2db      	uxtb	r3, r3
    f7b8:	e011      	b.n	f7de <send_radIR+0x7a>
    f7ba:	f24a 631a 	movw	r3, #42522	; 0xa61a
    f7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c2:	781b      	ldrb	r3, [r3, #0]
    f7c4:	b2db      	uxtb	r3, r3
    f7c6:	461a      	mov	r2, r3
    f7c8:	f24a 6319 	movw	r3, #42521	; 0xa619
    f7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d0:	781b      	ldrb	r3, [r3, #0]
    f7d2:	1ad3      	subs	r3, r2, r3
    f7d4:	2b14      	cmp	r3, #20
    f7d6:	bfd4      	ite	le
    f7d8:	2300      	movle	r3, #0
    f7da:	2301      	movgt	r3, #1
    f7dc:	b2db      	uxtb	r3, r3
    f7de:	2b00      	cmp	r3, #0
    f7e0:	f000 85a6 	beq.w	10330 <send_radIR+0xbcc>
    f7e4:	f24a 6319 	movw	r3, #42521	; 0xa619
    f7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	461a      	mov	r2, r3
    f7f0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f8:	2105      	movs	r1, #5
    f7fa:	5499      	strb	r1, [r3, r2]
    f7fc:	f24a 6319 	movw	r3, #42521	; 0xa619
    f800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	3301      	adds	r3, #1
    f808:	b2da      	uxtb	r2, r3
    f80a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f812:	701a      	strb	r2, [r3, #0]
    f814:	f24a 6319 	movw	r3, #42521	; 0xa619
    f818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	2bff      	cmp	r3, #255	; 0xff
    f820:	d105      	bne.n	f82e <send_radIR+0xca>
    f822:	f24a 6319 	movw	r3, #42521	; 0xa619
    f826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f82a:	2200      	movs	r2, #0
    f82c:	701a      	strb	r2, [r3, #0]
    f82e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f836:	781b      	ldrb	r3, [r3, #0]
    f838:	461a      	mov	r2, r3
    f83a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f83e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f842:	2105      	movs	r1, #5
    f844:	5499      	strb	r1, [r3, r2]
    f846:	f24a 6319 	movw	r3, #42521	; 0xa619
    f84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f84e:	781b      	ldrb	r3, [r3, #0]
    f850:	3301      	adds	r3, #1
    f852:	b2da      	uxtb	r2, r3
    f854:	f24a 6319 	movw	r3, #42521	; 0xa619
    f858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f85c:	701a      	strb	r2, [r3, #0]
    f85e:	f24a 6319 	movw	r3, #42521	; 0xa619
    f862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f866:	781b      	ldrb	r3, [r3, #0]
    f868:	2bff      	cmp	r3, #255	; 0xff
    f86a:	d105      	bne.n	f878 <send_radIR+0x114>
    f86c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f874:	2200      	movs	r2, #0
    f876:	701a      	strb	r2, [r3, #0]
    f878:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f880:	2205      	movs	r2, #5
    f882:	701a      	strb	r2, [r3, #0]
    f884:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f88c:	2205      	movs	r2, #5
    f88e:	701a      	strb	r2, [r3, #0]
    f890:	f24a 6319 	movw	r3, #42521	; 0xa619
    f894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f898:	781b      	ldrb	r3, [r3, #0]
    f89a:	461a      	mov	r2, r3
    f89c:	f64a 4310 	movw	r3, #44048	; 0xac10
    f8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a4:	7819      	ldrb	r1, [r3, #0]
    f8a6:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ae:	5499      	strb	r1, [r3, r2]
    f8b0:	f64a 4310 	movw	r3, #44048	; 0xac10
    f8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b8:	781a      	ldrb	r2, [r3, #0]
    f8ba:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	4413      	add	r3, r2
    f8c6:	b2da      	uxtb	r2, r3
    f8c8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d0:	701a      	strb	r2, [r3, #0]
    f8d2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8da:	781a      	ldrb	r2, [r3, #0]
    f8dc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e4:	781b      	ldrb	r3, [r3, #0]
    f8e6:	4413      	add	r3, r2
    f8e8:	b2da      	uxtb	r2, r3
    f8ea:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f2:	701a      	strb	r2, [r3, #0]
    f8f4:	f24a 6319 	movw	r3, #42521	; 0xa619
    f8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	3301      	adds	r3, #1
    f900:	b2da      	uxtb	r2, r3
    f902:	f24a 6319 	movw	r3, #42521	; 0xa619
    f906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f90a:	701a      	strb	r2, [r3, #0]
    f90c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f914:	781b      	ldrb	r3, [r3, #0]
    f916:	2bff      	cmp	r3, #255	; 0xff
    f918:	d105      	bne.n	f926 <send_radIR+0x1c2>
    f91a:	f24a 6319 	movw	r3, #42521	; 0xa619
    f91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f922:	2200      	movs	r2, #0
    f924:	701a      	strb	r2, [r3, #0]
    f926:	f24a 6319 	movw	r3, #42521	; 0xa619
    f92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f92e:	781b      	ldrb	r3, [r3, #0]
    f930:	461a      	mov	r2, r3
    f932:	f64a 4310 	movw	r3, #44048	; 0xac10
    f936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93a:	7859      	ldrb	r1, [r3, #1]
    f93c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f944:	5499      	strb	r1, [r3, r2]
    f946:	4bd2      	ldr	r3, [pc, #840]	; (fc90 <send_radIR+0x52c>)
    f948:	781a      	ldrb	r2, [r3, #0]
    f94a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f952:	781b      	ldrb	r3, [r3, #0]
    f954:	4413      	add	r3, r2
    f956:	b2da      	uxtb	r2, r3
    f958:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f960:	701a      	strb	r2, [r3, #0]
    f962:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96a:	781a      	ldrb	r2, [r3, #0]
    f96c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f974:	781b      	ldrb	r3, [r3, #0]
    f976:	4413      	add	r3, r2
    f978:	b2da      	uxtb	r2, r3
    f97a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f982:	701a      	strb	r2, [r3, #0]
    f984:	f24a 6319 	movw	r3, #42521	; 0xa619
    f988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	3301      	adds	r3, #1
    f990:	b2da      	uxtb	r2, r3
    f992:	f24a 6319 	movw	r3, #42521	; 0xa619
    f996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99a:	701a      	strb	r2, [r3, #0]
    f99c:	f24a 6319 	movw	r3, #42521	; 0xa619
    f9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a4:	781b      	ldrb	r3, [r3, #0]
    f9a6:	2bff      	cmp	r3, #255	; 0xff
    f9a8:	d105      	bne.n	f9b6 <send_radIR+0x252>
    f9aa:	f24a 6319 	movw	r3, #42521	; 0xa619
    f9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b2:	2200      	movs	r2, #0
    f9b4:	701a      	strb	r2, [r3, #0]
    f9b6:	f24a 6319 	movw	r3, #42521	; 0xa619
    f9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9be:	781b      	ldrb	r3, [r3, #0]
    f9c0:	461a      	mov	r2, r3
    f9c2:	f64a 4310 	movw	r3, #44048	; 0xac10
    f9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ca:	7899      	ldrb	r1, [r3, #2]
    f9cc:	f24a 631c 	movw	r3, #42524	; 0xa61c
    f9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d4:	5499      	strb	r1, [r3, r2]
    f9d6:	4baf      	ldr	r3, [pc, #700]	; (fc94 <send_radIR+0x530>)
    f9d8:	781a      	ldrb	r2, [r3, #0]
    f9da:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e2:	781b      	ldrb	r3, [r3, #0]
    f9e4:	4413      	add	r3, r2
    f9e6:	b2da      	uxtb	r2, r3
    f9e8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    f9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f0:	701a      	strb	r2, [r3, #0]
    f9f2:	f24a 731e 	movw	r3, #42782	; 0xa71e
    f9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fa:	781a      	ldrb	r2, [r3, #0]
    f9fc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fa00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa04:	781b      	ldrb	r3, [r3, #0]
    fa06:	4413      	add	r3, r2
    fa08:	b2da      	uxtb	r2, r3
    fa0a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fa0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa12:	701a      	strb	r2, [r3, #0]
    fa14:	f24a 6319 	movw	r3, #42521	; 0xa619
    fa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa1c:	781b      	ldrb	r3, [r3, #0]
    fa1e:	3301      	adds	r3, #1
    fa20:	b2da      	uxtb	r2, r3
    fa22:	f24a 6319 	movw	r3, #42521	; 0xa619
    fa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2a:	701a      	strb	r2, [r3, #0]
    fa2c:	f24a 6319 	movw	r3, #42521	; 0xa619
    fa30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	2bff      	cmp	r3, #255	; 0xff
    fa38:	d105      	bne.n	fa46 <send_radIR+0x2e2>
    fa3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    fa3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa42:	2200      	movs	r2, #0
    fa44:	701a      	strb	r2, [r3, #0]
    fa46:	f24a 6319 	movw	r3, #42521	; 0xa619
    fa4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4e:	781b      	ldrb	r3, [r3, #0]
    fa50:	461a      	mov	r2, r3
    fa52:	f64a 4310 	movw	r3, #44048	; 0xac10
    fa56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa5a:	78d9      	ldrb	r1, [r3, #3]
    fa5c:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fa60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa64:	5499      	strb	r1, [r3, r2]
    fa66:	4b8c      	ldr	r3, [pc, #560]	; (fc98 <send_radIR+0x534>)
    fa68:	781a      	ldrb	r2, [r3, #0]
    fa6a:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fa6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	4413      	add	r3, r2
    fa76:	b2da      	uxtb	r2, r3
    fa78:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa80:	701a      	strb	r2, [r3, #0]
    fa82:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8a:	781a      	ldrb	r2, [r3, #0]
    fa8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fa90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa94:	781b      	ldrb	r3, [r3, #0]
    fa96:	4413      	add	r3, r2
    fa98:	b2da      	uxtb	r2, r3
    fa9a:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fa9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa2:	701a      	strb	r2, [r3, #0]
    faa4:	f24a 6319 	movw	r3, #42521	; 0xa619
    faa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faac:	781b      	ldrb	r3, [r3, #0]
    faae:	3301      	adds	r3, #1
    fab0:	b2da      	uxtb	r2, r3
    fab2:	f24a 6319 	movw	r3, #42521	; 0xa619
    fab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faba:	701a      	strb	r2, [r3, #0]
    fabc:	f24a 6319 	movw	r3, #42521	; 0xa619
    fac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac4:	781b      	ldrb	r3, [r3, #0]
    fac6:	2bff      	cmp	r3, #255	; 0xff
    fac8:	d105      	bne.n	fad6 <send_radIR+0x372>
    faca:	f24a 6319 	movw	r3, #42521	; 0xa619
    face:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad2:	2200      	movs	r2, #0
    fad4:	701a      	strb	r2, [r3, #0]
    fad6:	f24a 6319 	movw	r3, #42521	; 0xa619
    fada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	461a      	mov	r2, r3
    fae2:	f64a 4314 	movw	r3, #44052	; 0xac14
    fae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faea:	7819      	ldrb	r1, [r3, #0]
    faec:	f24a 631c 	movw	r3, #42524	; 0xa61c
    faf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf4:	5499      	strb	r1, [r3, r2]
    faf6:	f64a 4314 	movw	r3, #44052	; 0xac14
    fafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fafe:	781a      	ldrb	r2, [r3, #0]
    fb00:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	4413      	add	r3, r2
    fb0c:	b2da      	uxtb	r2, r3
    fb0e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb20:	781a      	ldrb	r2, [r3, #0]
    fb22:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb2a:	781b      	ldrb	r3, [r3, #0]
    fb2c:	4413      	add	r3, r2
    fb2e:	b2da      	uxtb	r2, r3
    fb30:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb38:	701a      	strb	r2, [r3, #0]
    fb3a:	f24a 6319 	movw	r3, #42521	; 0xa619
    fb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb42:	781b      	ldrb	r3, [r3, #0]
    fb44:	3301      	adds	r3, #1
    fb46:	b2da      	uxtb	r2, r3
    fb48:	f24a 6319 	movw	r3, #42521	; 0xa619
    fb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb50:	701a      	strb	r2, [r3, #0]
    fb52:	f24a 6319 	movw	r3, #42521	; 0xa619
    fb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5a:	781b      	ldrb	r3, [r3, #0]
    fb5c:	2bff      	cmp	r3, #255	; 0xff
    fb5e:	d105      	bne.n	fb6c <send_radIR+0x408>
    fb60:	f24a 6319 	movw	r3, #42521	; 0xa619
    fb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb68:	2200      	movs	r2, #0
    fb6a:	701a      	strb	r2, [r3, #0]
    fb6c:	f24a 6319 	movw	r3, #42521	; 0xa619
    fb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb74:	781b      	ldrb	r3, [r3, #0]
    fb76:	461a      	mov	r2, r3
    fb78:	f64a 4314 	movw	r3, #44052	; 0xac14
    fb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb80:	7859      	ldrb	r1, [r3, #1]
    fb82:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	5499      	strb	r1, [r3, r2]
    fb8c:	4b43      	ldr	r3, [pc, #268]	; (fc9c <send_radIR+0x538>)
    fb8e:	781a      	ldrb	r2, [r3, #0]
    fb90:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	4413      	add	r3, r2
    fb9c:	b2da      	uxtb	r2, r3
    fb9e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba6:	701a      	strb	r2, [r3, #0]
    fba8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fbac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb0:	781a      	ldrb	r2, [r3, #0]
    fbb2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbba:	781b      	ldrb	r3, [r3, #0]
    fbbc:	4413      	add	r3, r2
    fbbe:	b2da      	uxtb	r2, r3
    fbc0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc8:	701a      	strb	r2, [r3, #0]
    fbca:	f24a 6319 	movw	r3, #42521	; 0xa619
    fbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd2:	781b      	ldrb	r3, [r3, #0]
    fbd4:	3301      	adds	r3, #1
    fbd6:	b2da      	uxtb	r2, r3
    fbd8:	f24a 6319 	movw	r3, #42521	; 0xa619
    fbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe0:	701a      	strb	r2, [r3, #0]
    fbe2:	f24a 6319 	movw	r3, #42521	; 0xa619
    fbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbea:	781b      	ldrb	r3, [r3, #0]
    fbec:	2bff      	cmp	r3, #255	; 0xff
    fbee:	d105      	bne.n	fbfc <send_radIR+0x498>
    fbf0:	f24a 6319 	movw	r3, #42521	; 0xa619
    fbf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf8:	2200      	movs	r2, #0
    fbfa:	701a      	strb	r2, [r3, #0]
    fbfc:	f24a 6319 	movw	r3, #42521	; 0xa619
    fc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	461a      	mov	r2, r3
    fc08:	f64a 4314 	movw	r3, #44052	; 0xac14
    fc0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc10:	7899      	ldrb	r1, [r3, #2]
    fc12:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1a:	5499      	strb	r1, [r3, r2]
    fc1c:	4b20      	ldr	r3, [pc, #128]	; (fca0 <send_radIR+0x53c>)
    fc1e:	781a      	ldrb	r2, [r3, #0]
    fc20:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc28:	781b      	ldrb	r3, [r3, #0]
    fc2a:	4413      	add	r3, r2
    fc2c:	b2da      	uxtb	r2, r3
    fc2e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc36:	701a      	strb	r2, [r3, #0]
    fc38:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc40:	781a      	ldrb	r2, [r3, #0]
    fc42:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4a:	781b      	ldrb	r3, [r3, #0]
    fc4c:	4413      	add	r3, r2
    fc4e:	b2da      	uxtb	r2, r3
    fc50:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc58:	701a      	strb	r2, [r3, #0]
    fc5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    fc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc62:	781b      	ldrb	r3, [r3, #0]
    fc64:	3301      	adds	r3, #1
    fc66:	b2da      	uxtb	r2, r3
    fc68:	f24a 6319 	movw	r3, #42521	; 0xa619
    fc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc70:	701a      	strb	r2, [r3, #0]
    fc72:	f24a 6319 	movw	r3, #42521	; 0xa619
    fc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7a:	781b      	ldrb	r3, [r3, #0]
    fc7c:	2bff      	cmp	r3, #255	; 0xff
    fc7e:	d111      	bne.n	fca4 <send_radIR+0x540>
    fc80:	f24a 6319 	movw	r3, #42521	; 0xa619
    fc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc88:	2200      	movs	r2, #0
    fc8a:	701a      	strb	r2, [r3, #0]
    fc8c:	e00a      	b.n	fca4 <send_radIR+0x540>
    fc8e:	bf00      	nop
    fc90:	2000ac11 	.word	0x2000ac11
    fc94:	2000ac12 	.word	0x2000ac12
    fc98:	2000ac13 	.word	0x2000ac13
    fc9c:	2000ac15 	.word	0x2000ac15
    fca0:	2000ac16 	.word	0x2000ac16
    fca4:	f24a 6319 	movw	r3, #42521	; 0xa619
    fca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcac:	781b      	ldrb	r3, [r3, #0]
    fcae:	461a      	mov	r2, r3
    fcb0:	f64a 4314 	movw	r3, #44052	; 0xac14
    fcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb8:	78d9      	ldrb	r1, [r3, #3]
    fcba:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc2:	5499      	strb	r1, [r3, r2]
    fcc4:	4bd3      	ldr	r3, [pc, #844]	; (10014 <send_radIR+0x8b0>)
    fcc6:	781a      	ldrb	r2, [r3, #0]
    fcc8:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd0:	781b      	ldrb	r3, [r3, #0]
    fcd2:	4413      	add	r3, r2
    fcd4:	b2da      	uxtb	r2, r3
    fcd6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcde:	701a      	strb	r2, [r3, #0]
    fce0:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce8:	781a      	ldrb	r2, [r3, #0]
    fcea:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf2:	781b      	ldrb	r3, [r3, #0]
    fcf4:	4413      	add	r3, r2
    fcf6:	b2da      	uxtb	r2, r3
    fcf8:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd00:	701a      	strb	r2, [r3, #0]
    fd02:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd0a:	781b      	ldrb	r3, [r3, #0]
    fd0c:	3301      	adds	r3, #1
    fd0e:	b2da      	uxtb	r2, r3
    fd10:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd18:	701a      	strb	r2, [r3, #0]
    fd1a:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd22:	781b      	ldrb	r3, [r3, #0]
    fd24:	2bff      	cmp	r3, #255	; 0xff
    fd26:	d105      	bne.n	fd34 <send_radIR+0x5d0>
    fd28:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd30:	2200      	movs	r2, #0
    fd32:	701a      	strb	r2, [r3, #0]
    fd34:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3c:	781b      	ldrb	r3, [r3, #0]
    fd3e:	461a      	mov	r2, r3
    fd40:	f64a 430c 	movw	r3, #44044	; 0xac0c
    fd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd48:	7819      	ldrb	r1, [r3, #0]
    fd4a:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd52:	5499      	strb	r1, [r3, r2]
    fd54:	f64a 430c 	movw	r3, #44044	; 0xac0c
    fd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5c:	781a      	ldrb	r2, [r3, #0]
    fd5e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd66:	781b      	ldrb	r3, [r3, #0]
    fd68:	4413      	add	r3, r2
    fd6a:	b2da      	uxtb	r2, r3
    fd6c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd74:	701a      	strb	r2, [r3, #0]
    fd76:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fd7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7e:	781a      	ldrb	r2, [r3, #0]
    fd80:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd88:	781b      	ldrb	r3, [r3, #0]
    fd8a:	4413      	add	r3, r2
    fd8c:	b2da      	uxtb	r2, r3
    fd8e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd96:	701a      	strb	r2, [r3, #0]
    fd98:	f24a 6319 	movw	r3, #42521	; 0xa619
    fd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda0:	781b      	ldrb	r3, [r3, #0]
    fda2:	3301      	adds	r3, #1
    fda4:	b2da      	uxtb	r2, r3
    fda6:	f24a 6319 	movw	r3, #42521	; 0xa619
    fdaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdae:	701a      	strb	r2, [r3, #0]
    fdb0:	f24a 6319 	movw	r3, #42521	; 0xa619
    fdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb8:	781b      	ldrb	r3, [r3, #0]
    fdba:	2bff      	cmp	r3, #255	; 0xff
    fdbc:	d105      	bne.n	fdca <send_radIR+0x666>
    fdbe:	f24a 6319 	movw	r3, #42521	; 0xa619
    fdc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc6:	2200      	movs	r2, #0
    fdc8:	701a      	strb	r2, [r3, #0]
    fdca:	f24a 6319 	movw	r3, #42521	; 0xa619
    fdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd2:	781b      	ldrb	r3, [r3, #0]
    fdd4:	461a      	mov	r2, r3
    fdd6:	f64a 430c 	movw	r3, #44044	; 0xac0c
    fdda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdde:	7859      	ldrb	r1, [r3, #1]
    fde0:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	5499      	strb	r1, [r3, r2]
    fdea:	4b8b      	ldr	r3, [pc, #556]	; (10018 <send_radIR+0x8b4>)
    fdec:	781a      	ldrb	r2, [r3, #0]
    fdee:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fdf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	4413      	add	r3, r2
    fdfa:	b2da      	uxtb	r2, r3
    fdfc:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fe00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe04:	701a      	strb	r2, [r3, #0]
    fe06:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fe0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0e:	781a      	ldrb	r2, [r3, #0]
    fe10:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fe14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	4413      	add	r3, r2
    fe1c:	b2da      	uxtb	r2, r3
    fe1e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fe22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe26:	701a      	strb	r2, [r3, #0]
    fe28:	f24a 6319 	movw	r3, #42521	; 0xa619
    fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe30:	781b      	ldrb	r3, [r3, #0]
    fe32:	3301      	adds	r3, #1
    fe34:	b2da      	uxtb	r2, r3
    fe36:	f24a 6319 	movw	r3, #42521	; 0xa619
    fe3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3e:	701a      	strb	r2, [r3, #0]
    fe40:	f24a 6319 	movw	r3, #42521	; 0xa619
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	781b      	ldrb	r3, [r3, #0]
    fe4a:	2bff      	cmp	r3, #255	; 0xff
    fe4c:	d105      	bne.n	fe5a <send_radIR+0x6f6>
    fe4e:	f24a 6319 	movw	r3, #42521	; 0xa619
    fe52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe56:	2200      	movs	r2, #0
    fe58:	701a      	strb	r2, [r3, #0]
    fe5a:	f24a 6319 	movw	r3, #42521	; 0xa619
    fe5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	461a      	mov	r2, r3
    fe66:	f64a 430c 	movw	r3, #44044	; 0xac0c
    fe6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6e:	7899      	ldrb	r1, [r3, #2]
    fe70:	f24a 631c 	movw	r3, #42524	; 0xa61c
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	5499      	strb	r1, [r3, r2]
    fe7a:	4b68      	ldr	r3, [pc, #416]	; (1001c <send_radIR+0x8b8>)
    fe7c:	781a      	ldrb	r2, [r3, #0]
    fe7e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fe82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe86:	781b      	ldrb	r3, [r3, #0]
    fe88:	4413      	add	r3, r2
    fe8a:	b2da      	uxtb	r2, r3
    fe8c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fe90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe94:	701a      	strb	r2, [r3, #0]
    fe96:	f24a 731e 	movw	r3, #42782	; 0xa71e
    fe9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9e:	781a      	ldrb	r2, [r3, #0]
    fea0:	f24a 731d 	movw	r3, #42781	; 0xa71d
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	781b      	ldrb	r3, [r3, #0]
    feaa:	4413      	add	r3, r2
    feac:	b2da      	uxtb	r2, r3
    feae:	f24a 731e 	movw	r3, #42782	; 0xa71e
    feb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb6:	701a      	strb	r2, [r3, #0]
    feb8:	f24a 6319 	movw	r3, #42521	; 0xa619
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	781b      	ldrb	r3, [r3, #0]
    fec2:	3301      	adds	r3, #1
    fec4:	b2da      	uxtb	r2, r3
    fec6:	f24a 6319 	movw	r3, #42521	; 0xa619
    feca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fece:	701a      	strb	r2, [r3, #0]
    fed0:	f24a 6319 	movw	r3, #42521	; 0xa619
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	2bff      	cmp	r3, #255	; 0xff
    fedc:	d105      	bne.n	feea <send_radIR+0x786>
    fede:	f24a 6319 	movw	r3, #42521	; 0xa619
    fee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee6:	2200      	movs	r2, #0
    fee8:	701a      	strb	r2, [r3, #0]
    feea:	f24a 6319 	movw	r3, #42521	; 0xa619
    feee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef2:	781b      	ldrb	r3, [r3, #0]
    fef4:	461a      	mov	r2, r3
    fef6:	f64a 430c 	movw	r3, #44044	; 0xac0c
    fefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefe:	78d9      	ldrb	r1, [r3, #3]
    ff00:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	5499      	strb	r1, [r3, r2]
    ff0a:	4b45      	ldr	r3, [pc, #276]	; (10020 <send_radIR+0x8bc>)
    ff0c:	781a      	ldrb	r2, [r3, #0]
    ff0e:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ff12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	4413      	add	r3, r2
    ff1a:	b2da      	uxtb	r2, r3
    ff1c:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ff20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff24:	701a      	strb	r2, [r3, #0]
    ff26:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ff2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2e:	781a      	ldrb	r2, [r3, #0]
    ff30:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ff34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff38:	781b      	ldrb	r3, [r3, #0]
    ff3a:	4413      	add	r3, r2
    ff3c:	b2da      	uxtb	r2, r3
    ff3e:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ff42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f24a 6319 	movw	r3, #42521	; 0xa619
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	3301      	adds	r3, #1
    ff54:	b2da      	uxtb	r2, r3
    ff56:	f24a 6319 	movw	r3, #42521	; 0xa619
    ff5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5e:	701a      	strb	r2, [r3, #0]
    ff60:	f24a 6319 	movw	r3, #42521	; 0xa619
    ff64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff68:	781b      	ldrb	r3, [r3, #0]
    ff6a:	2bff      	cmp	r3, #255	; 0xff
    ff6c:	d105      	bne.n	ff7a <send_radIR+0x816>
    ff6e:	f24a 6319 	movw	r3, #42521	; 0xa619
    ff72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff76:	2200      	movs	r2, #0
    ff78:	701a      	strb	r2, [r3, #0]
    ff7a:	f24a 6319 	movw	r3, #42521	; 0xa619
    ff7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff82:	781b      	ldrb	r3, [r3, #0]
    ff84:	461a      	mov	r2, r3
    ff86:	f240 0386 	movw	r3, #134	; 0x86
    ff8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8e:	7819      	ldrb	r1, [r3, #0]
    ff90:	f24a 631c 	movw	r3, #42524	; 0xa61c
    ff94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff98:	5499      	strb	r1, [r3, r2]
    ff9a:	f240 0386 	movw	r3, #134	; 0x86
    ff9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa2:	781a      	ldrb	r2, [r3, #0]
    ffa4:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ffa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	4413      	add	r3, r2
    ffb0:	b2da      	uxtb	r2, r3
    ffb2:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	701a      	strb	r2, [r3, #0]
    ffbc:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ffc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc4:	781a      	ldrb	r2, [r3, #0]
    ffc6:	f24a 731d 	movw	r3, #42781	; 0xa71d
    ffca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffce:	781b      	ldrb	r3, [r3, #0]
    ffd0:	4413      	add	r3, r2
    ffd2:	b2da      	uxtb	r2, r3
    ffd4:	f24a 731e 	movw	r3, #42782	; 0xa71e
    ffd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffdc:	701a      	strb	r2, [r3, #0]
    ffde:	f24a 6319 	movw	r3, #42521	; 0xa619
    ffe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe6:	781b      	ldrb	r3, [r3, #0]
    ffe8:	3301      	adds	r3, #1
    ffea:	b2da      	uxtb	r2, r3
    ffec:	f24a 6319 	movw	r3, #42521	; 0xa619
    fff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff4:	701a      	strb	r2, [r3, #0]
    fff6:	f24a 6319 	movw	r3, #42521	; 0xa619
    fffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffe:	781b      	ldrb	r3, [r3, #0]
   10000:	2bff      	cmp	r3, #255	; 0xff
   10002:	d10f      	bne.n	10024 <send_radIR+0x8c0>
   10004:	f24a 6319 	movw	r3, #42521	; 0xa619
   10008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000c:	2200      	movs	r2, #0
   1000e:	701a      	strb	r2, [r3, #0]
   10010:	e008      	b.n	10024 <send_radIR+0x8c0>
   10012:	bf00      	nop
   10014:	2000ac17 	.word	0x2000ac17
   10018:	2000ac0d 	.word	0x2000ac0d
   1001c:	2000ac0e 	.word	0x2000ac0e
   10020:	2000ac0f 	.word	0x2000ac0f
   10024:	f24a 6319 	movw	r3, #42521	; 0xa619
   10028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002c:	781b      	ldrb	r3, [r3, #0]
   1002e:	461a      	mov	r2, r3
   10030:	f240 0386 	movw	r3, #134	; 0x86
   10034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10038:	7859      	ldrb	r1, [r3, #1]
   1003a:	f24a 631c 	movw	r3, #42524	; 0xa61c
   1003e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10042:	5499      	strb	r1, [r3, r2]
   10044:	4bc2      	ldr	r3, [pc, #776]	; (10350 <send_radIR+0xbec>)
   10046:	781a      	ldrb	r2, [r3, #0]
   10048:	f24a 731d 	movw	r3, #42781	; 0xa71d
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	4413      	add	r3, r2
   10054:	b2da      	uxtb	r2, r3
   10056:	f24a 731d 	movw	r3, #42781	; 0xa71d
   1005a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005e:	701a      	strb	r2, [r3, #0]
   10060:	f24a 731e 	movw	r3, #42782	; 0xa71e
   10064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10068:	781a      	ldrb	r2, [r3, #0]
   1006a:	f24a 731d 	movw	r3, #42781	; 0xa71d
   1006e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10072:	781b      	ldrb	r3, [r3, #0]
   10074:	4413      	add	r3, r2
   10076:	b2da      	uxtb	r2, r3
   10078:	f24a 731e 	movw	r3, #42782	; 0xa71e
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	701a      	strb	r2, [r3, #0]
   10082:	f24a 6319 	movw	r3, #42521	; 0xa619
   10086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008a:	781b      	ldrb	r3, [r3, #0]
   1008c:	3301      	adds	r3, #1
   1008e:	b2da      	uxtb	r2, r3
   10090:	f24a 6319 	movw	r3, #42521	; 0xa619
   10094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10098:	701a      	strb	r2, [r3, #0]
   1009a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1009e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a2:	781b      	ldrb	r3, [r3, #0]
   100a4:	2bff      	cmp	r3, #255	; 0xff
   100a6:	d105      	bne.n	100b4 <send_radIR+0x950>
   100a8:	f24a 6319 	movw	r3, #42521	; 0xa619
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	2200      	movs	r2, #0
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	f24a 6319 	movw	r3, #42521	; 0xa619
   100b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	461a      	mov	r2, r3
   100c0:	f240 0388 	movw	r3, #136	; 0x88
   100c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c8:	7819      	ldrb	r1, [r3, #0]
   100ca:	f24a 631c 	movw	r3, #42524	; 0xa61c
   100ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d2:	5499      	strb	r1, [r3, r2]
   100d4:	f240 0388 	movw	r3, #136	; 0x88
   100d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100dc:	781a      	ldrb	r2, [r3, #0]
   100de:	f24a 731d 	movw	r3, #42781	; 0xa71d
   100e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e6:	781b      	ldrb	r3, [r3, #0]
   100e8:	4413      	add	r3, r2
   100ea:	b2da      	uxtb	r2, r3
   100ec:	f24a 731d 	movw	r3, #42781	; 0xa71d
   100f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f4:	701a      	strb	r2, [r3, #0]
   100f6:	f24a 731e 	movw	r3, #42782	; 0xa71e
   100fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100fe:	781a      	ldrb	r2, [r3, #0]
   10100:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10108:	781b      	ldrb	r3, [r3, #0]
   1010a:	4413      	add	r3, r2
   1010c:	b2da      	uxtb	r2, r3
   1010e:	f24a 731e 	movw	r3, #42782	; 0xa71e
   10112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10116:	701a      	strb	r2, [r3, #0]
   10118:	f24a 6319 	movw	r3, #42521	; 0xa619
   1011c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10120:	781b      	ldrb	r3, [r3, #0]
   10122:	3301      	adds	r3, #1
   10124:	b2da      	uxtb	r2, r3
   10126:	f24a 6319 	movw	r3, #42521	; 0xa619
   1012a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1012e:	701a      	strb	r2, [r3, #0]
   10130:	f24a 6319 	movw	r3, #42521	; 0xa619
   10134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10138:	781b      	ldrb	r3, [r3, #0]
   1013a:	2bff      	cmp	r3, #255	; 0xff
   1013c:	d105      	bne.n	1014a <send_radIR+0x9e6>
   1013e:	f24a 6319 	movw	r3, #42521	; 0xa619
   10142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10146:	2200      	movs	r2, #0
   10148:	701a      	strb	r2, [r3, #0]
   1014a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1014e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	461a      	mov	r2, r3
   10156:	f240 0388 	movw	r3, #136	; 0x88
   1015a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1015e:	7859      	ldrb	r1, [r3, #1]
   10160:	f24a 631c 	movw	r3, #42524	; 0xa61c
   10164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10168:	5499      	strb	r1, [r3, r2]
   1016a:	4b7a      	ldr	r3, [pc, #488]	; (10354 <send_radIR+0xbf0>)
   1016c:	781a      	ldrb	r2, [r3, #0]
   1016e:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10176:	781b      	ldrb	r3, [r3, #0]
   10178:	4413      	add	r3, r2
   1017a:	b2da      	uxtb	r2, r3
   1017c:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10184:	701a      	strb	r2, [r3, #0]
   10186:	f24a 731e 	movw	r3, #42782	; 0xa71e
   1018a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1018e:	781a      	ldrb	r2, [r3, #0]
   10190:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10198:	781b      	ldrb	r3, [r3, #0]
   1019a:	4413      	add	r3, r2
   1019c:	b2da      	uxtb	r2, r3
   1019e:	f24a 731e 	movw	r3, #42782	; 0xa71e
   101a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a6:	701a      	strb	r2, [r3, #0]
   101a8:	f24a 6319 	movw	r3, #42521	; 0xa619
   101ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b0:	781b      	ldrb	r3, [r3, #0]
   101b2:	3301      	adds	r3, #1
   101b4:	b2da      	uxtb	r2, r3
   101b6:	f24a 6319 	movw	r3, #42521	; 0xa619
   101ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101be:	701a      	strb	r2, [r3, #0]
   101c0:	f24a 6319 	movw	r3, #42521	; 0xa619
   101c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c8:	781b      	ldrb	r3, [r3, #0]
   101ca:	2bff      	cmp	r3, #255	; 0xff
   101cc:	d105      	bne.n	101da <send_radIR+0xa76>
   101ce:	f24a 6319 	movw	r3, #42521	; 0xa619
   101d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d6:	2200      	movs	r2, #0
   101d8:	701a      	strb	r2, [r3, #0]
   101da:	f24a 6319 	movw	r3, #42521	; 0xa619
   101de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e2:	781b      	ldrb	r3, [r3, #0]
   101e4:	461a      	mov	r2, r3
   101e6:	f24a 731d 	movw	r3, #42781	; 0xa71d
   101ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ee:	7819      	ldrb	r1, [r3, #0]
   101f0:	f24a 631c 	movw	r3, #42524	; 0xa61c
   101f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f8:	5499      	strb	r1, [r3, r2]
   101fa:	f24a 6319 	movw	r3, #42521	; 0xa619
   101fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10202:	781b      	ldrb	r3, [r3, #0]
   10204:	3301      	adds	r3, #1
   10206:	b2da      	uxtb	r2, r3
   10208:	f24a 6319 	movw	r3, #42521	; 0xa619
   1020c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10210:	701a      	strb	r2, [r3, #0]
   10212:	f24a 6319 	movw	r3, #42521	; 0xa619
   10216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	2bff      	cmp	r3, #255	; 0xff
   1021e:	d105      	bne.n	1022c <send_radIR+0xac8>
   10220:	f24a 6319 	movw	r3, #42521	; 0xa619
   10224:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10228:	2200      	movs	r2, #0
   1022a:	701a      	strb	r2, [r3, #0]
   1022c:	f24a 6319 	movw	r3, #42521	; 0xa619
   10230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10234:	781b      	ldrb	r3, [r3, #0]
   10236:	461a      	mov	r2, r3
   10238:	f24a 731e 	movw	r3, #42782	; 0xa71e
   1023c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10240:	7819      	ldrb	r1, [r3, #0]
   10242:	f24a 631c 	movw	r3, #42524	; 0xa61c
   10246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1024a:	5499      	strb	r1, [r3, r2]
   1024c:	f24a 6319 	movw	r3, #42521	; 0xa619
   10250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	3301      	adds	r3, #1
   10258:	b2da      	uxtb	r2, r3
   1025a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1025e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10262:	701a      	strb	r2, [r3, #0]
   10264:	f24a 6319 	movw	r3, #42521	; 0xa619
   10268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	2bff      	cmp	r3, #255	; 0xff
   10270:	d105      	bne.n	1027e <send_radIR+0xb1a>
   10272:	f24a 6319 	movw	r3, #42521	; 0xa619
   10276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1027a:	2200      	movs	r2, #0
   1027c:	701a      	strb	r2, [r3, #0]
   1027e:	f242 0339 	movw	r3, #8249	; 0x2039
   10282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10286:	781b      	ldrb	r3, [r3, #0]
   10288:	b2db      	uxtb	r3, r3
   1028a:	f003 0310 	and.w	r3, r3, #16
   1028e:	2b00      	cmp	r3, #0
   10290:	d15a      	bne.n	10348 <send_radIR+0xbe4>
   10292:	f24a 631a 	movw	r3, #42522	; 0xa61a
   10296:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	b2db      	uxtb	r3, r3
   1029e:	461a      	mov	r2, r3
   102a0:	f24a 631c 	movw	r3, #42524	; 0xa61c
   102a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a8:	5c9a      	ldrb	r2, [r3, r2]
   102aa:	f24a 731b 	movw	r3, #42779	; 0xa71b
   102ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b2:	701a      	strb	r2, [r3, #0]
   102b4:	f24a 731c 	movw	r3, #42780	; 0xa71c
   102b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102bc:	2200      	movs	r2, #0
   102be:	701a      	strb	r2, [r3, #0]
   102c0:	f24a 631a 	movw	r3, #42522	; 0xa61a
   102c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c8:	781b      	ldrb	r3, [r3, #0]
   102ca:	b2db      	uxtb	r3, r3
   102cc:	3301      	adds	r3, #1
   102ce:	b2da      	uxtb	r2, r3
   102d0:	f24a 631a 	movw	r3, #42522	; 0xa61a
   102d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d8:	701a      	strb	r2, [r3, #0]
   102da:	f24a 631a 	movw	r3, #42522	; 0xa61a
   102de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	b2db      	uxtb	r3, r3
   102e6:	2bff      	cmp	r3, #255	; 0xff
   102e8:	d105      	bne.n	102f6 <send_radIR+0xb92>
   102ea:	f24a 631a 	movw	r3, #42522	; 0xa61a
   102ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f2:	2200      	movs	r2, #0
   102f4:	701a      	strb	r2, [r3, #0]
   102f6:	f242 0338 	movw	r3, #8248	; 0x2038
   102fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102fe:	f242 0238 	movw	r2, #8248	; 0x2038
   10302:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10306:	7812      	ldrb	r2, [r2, #0]
   10308:	b2d2      	uxtb	r2, r2
   1030a:	f042 0201 	orr.w	r2, r2, #1
   1030e:	b2d2      	uxtb	r2, r2
   10310:	701a      	strb	r2, [r3, #0]
   10312:	f242 0339 	movw	r3, #8249	; 0x2039
   10316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1031a:	f242 0239 	movw	r2, #8249	; 0x2039
   1031e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10322:	7812      	ldrb	r2, [r2, #0]
   10324:	b2d2      	uxtb	r2, r2
   10326:	f042 0210 	orr.w	r2, r2, #16
   1032a:	b2d2      	uxtb	r2, r2
   1032c:	701a      	strb	r2, [r3, #0]
   1032e:	e00b      	b.n	10348 <send_radIR+0xbe4>
   10330:	f24a 6318 	movw	r3, #42520	; 0xa618
   10334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10338:	781b      	ldrb	r3, [r3, #0]
   1033a:	3301      	adds	r3, #1
   1033c:	b2da      	uxtb	r2, r3
   1033e:	f24a 6318 	movw	r3, #42520	; 0xa618
   10342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10346:	701a      	strb	r2, [r3, #0]
}
   10348:	46bd      	mov	sp, r7
   1034a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1034e:	4770      	bx	lr
   10350:	20000087 	.word	0x20000087
   10354:	20000089 	.word	0x20000089

00010358 <send_takeOff>:

void send_takeOff(void){
   10358:	b580      	push	{r7, lr}
   1035a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   1035c:	f24a 73ae 	movw	r3, #42926	; 0xa7ae
   10360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10364:	781b      	ldrb	r3, [r3, #0]
   10366:	2b00      	cmp	r3, #0
   10368:	f000 8200 	beq.w	1076c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   1036c:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   10370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10374:	881b      	ldrh	r3, [r3, #0]
   10376:	2b00      	cmp	r3, #0
   10378:	f040 81f2 	bne.w	10760 <send_takeOff+0x408>
   1037c:	f64a 4304 	movw	r3, #44036	; 0xac04
   10380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10384:	681b      	ldr	r3, [r3, #0]
   10386:	4618      	mov	r0, r3
   10388:	f04f 0100 	mov.w	r1, #0
   1038c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10390:	f007 fd82 	bl	17e98 <__aeabi_fcmpgt>
   10394:	4603      	mov	r3, r0
   10396:	2b00      	cmp	r3, #0
   10398:	f000 81e2 	beq.w	10760 <send_takeOff+0x408>
        estimator_flight_time = 1;
   1039c:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   103a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a4:	2201      	movs	r2, #1
   103a6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   103a8:	f24a 6310 	movw	r3, #42512	; 0xa610
   103ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b0:	2201      	movs	r2, #1
   103b2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   103b4:	f24a 6319 	movw	r3, #42521	; 0xa619
   103b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103bc:	781a      	ldrb	r2, [r3, #0]
   103be:	f24a 631a 	movw	r3, #42522	; 0xa61a
   103c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c6:	781b      	ldrb	r3, [r3, #0]
   103c8:	b2db      	uxtb	r3, r3
   103ca:	429a      	cmp	r2, r3
   103cc:	d313      	bcc.n	103f6 <send_takeOff+0x9e>
   103ce:	f24a 631a 	movw	r3, #42522	; 0xa61a
   103d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d6:	781b      	ldrb	r3, [r3, #0]
   103d8:	b2db      	uxtb	r3, r3
   103da:	461a      	mov	r2, r3
   103dc:	f24a 6319 	movw	r3, #42521	; 0xa619
   103e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e4:	781b      	ldrb	r3, [r3, #0]
   103e6:	1ad3      	subs	r3, r2, r3
   103e8:	33ff      	adds	r3, #255	; 0xff
   103ea:	2b06      	cmp	r3, #6
   103ec:	bfd4      	ite	le
   103ee:	2300      	movle	r3, #0
   103f0:	2301      	movgt	r3, #1
   103f2:	b2db      	uxtb	r3, r3
   103f4:	e011      	b.n	1041a <send_takeOff+0xc2>
   103f6:	f24a 631a 	movw	r3, #42522	; 0xa61a
   103fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103fe:	781b      	ldrb	r3, [r3, #0]
   10400:	b2db      	uxtb	r3, r3
   10402:	461a      	mov	r2, r3
   10404:	f24a 6319 	movw	r3, #42521	; 0xa619
   10408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040c:	781b      	ldrb	r3, [r3, #0]
   1040e:	1ad3      	subs	r3, r2, r3
   10410:	2b06      	cmp	r3, #6
   10412:	bfd4      	ite	le
   10414:	2300      	movle	r3, #0
   10416:	2301      	movgt	r3, #1
   10418:	b2db      	uxtb	r3, r3
   1041a:	2b00      	cmp	r3, #0
   1041c:	f000 8194 	beq.w	10748 <send_takeOff+0x3f0>
   10420:	f24a 6319 	movw	r3, #42521	; 0xa619
   10424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	461a      	mov	r2, r3
   1042c:	f24a 631c 	movw	r3, #42524	; 0xa61c
   10430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10434:	2105      	movs	r1, #5
   10436:	5499      	strb	r1, [r3, r2]
   10438:	f24a 6319 	movw	r3, #42521	; 0xa619
   1043c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10440:	781b      	ldrb	r3, [r3, #0]
   10442:	3301      	adds	r3, #1
   10444:	b2da      	uxtb	r2, r3
   10446:	f24a 6319 	movw	r3, #42521	; 0xa619
   1044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044e:	701a      	strb	r2, [r3, #0]
   10450:	f24a 6319 	movw	r3, #42521	; 0xa619
   10454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	2bff      	cmp	r3, #255	; 0xff
   1045c:	d105      	bne.n	1046a <send_takeOff+0x112>
   1045e:	f24a 6319 	movw	r3, #42521	; 0xa619
   10462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10466:	2200      	movs	r2, #0
   10468:	701a      	strb	r2, [r3, #0]
   1046a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1046e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10472:	781b      	ldrb	r3, [r3, #0]
   10474:	461a      	mov	r2, r3
   10476:	f24a 631c 	movw	r3, #42524	; 0xa61c
   1047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1047e:	2104      	movs	r1, #4
   10480:	5499      	strb	r1, [r3, r2]
   10482:	f24a 6319 	movw	r3, #42521	; 0xa619
   10486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1048a:	781b      	ldrb	r3, [r3, #0]
   1048c:	3301      	adds	r3, #1
   1048e:	b2da      	uxtb	r2, r3
   10490:	f24a 6319 	movw	r3, #42521	; 0xa619
   10494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10498:	701a      	strb	r2, [r3, #0]
   1049a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1049e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a2:	781b      	ldrb	r3, [r3, #0]
   104a4:	2bff      	cmp	r3, #255	; 0xff
   104a6:	d105      	bne.n	104b4 <send_takeOff+0x15c>
   104a8:	f24a 6319 	movw	r3, #42521	; 0xa619
   104ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b0:	2200      	movs	r2, #0
   104b2:	701a      	strb	r2, [r3, #0]
   104b4:	f24a 731d 	movw	r3, #42781	; 0xa71d
   104b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104bc:	2204      	movs	r2, #4
   104be:	701a      	strb	r2, [r3, #0]
   104c0:	f24a 731e 	movw	r3, #42782	; 0xa71e
   104c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c8:	2204      	movs	r2, #4
   104ca:	701a      	strb	r2, [r3, #0]
   104cc:	f24a 6319 	movw	r3, #42521	; 0xa619
   104d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d4:	781b      	ldrb	r3, [r3, #0]
   104d6:	461a      	mov	r2, r3
   104d8:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   104dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e0:	7819      	ldrb	r1, [r3, #0]
   104e2:	f24a 631c 	movw	r3, #42524	; 0xa61c
   104e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ea:	5499      	strb	r1, [r3, r2]
   104ec:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   104f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f4:	781a      	ldrb	r2, [r3, #0]
   104f6:	f24a 731d 	movw	r3, #42781	; 0xa71d
   104fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104fe:	781b      	ldrb	r3, [r3, #0]
   10500:	4413      	add	r3, r2
   10502:	b2da      	uxtb	r2, r3
   10504:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1050c:	701a      	strb	r2, [r3, #0]
   1050e:	f24a 731e 	movw	r3, #42782	; 0xa71e
   10512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10516:	781a      	ldrb	r2, [r3, #0]
   10518:	f24a 731d 	movw	r3, #42781	; 0xa71d
   1051c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10520:	781b      	ldrb	r3, [r3, #0]
   10522:	4413      	add	r3, r2
   10524:	b2da      	uxtb	r2, r3
   10526:	f24a 731e 	movw	r3, #42782	; 0xa71e
   1052a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052e:	701a      	strb	r2, [r3, #0]
   10530:	f24a 6319 	movw	r3, #42521	; 0xa619
   10534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	3301      	adds	r3, #1
   1053c:	b2da      	uxtb	r2, r3
   1053e:	f24a 6319 	movw	r3, #42521	; 0xa619
   10542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10546:	701a      	strb	r2, [r3, #0]
   10548:	f24a 6319 	movw	r3, #42521	; 0xa619
   1054c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10550:	781b      	ldrb	r3, [r3, #0]
   10552:	2bff      	cmp	r3, #255	; 0xff
   10554:	d105      	bne.n	10562 <send_takeOff+0x20a>
   10556:	f24a 6319 	movw	r3, #42521	; 0xa619
   1055a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055e:	2200      	movs	r2, #0
   10560:	701a      	strb	r2, [r3, #0]
   10562:	f24a 6319 	movw	r3, #42521	; 0xa619
   10566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1056a:	781b      	ldrb	r3, [r3, #0]
   1056c:	461a      	mov	r2, r3
   1056e:	f24a 53fa 	movw	r3, #42490	; 0xa5fa
   10572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10576:	7859      	ldrb	r1, [r3, #1]
   10578:	f24a 631c 	movw	r3, #42524	; 0xa61c
   1057c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10580:	5499      	strb	r1, [r3, r2]
   10582:	4b7b      	ldr	r3, [pc, #492]	; (10770 <send_takeOff+0x418>)
   10584:	781a      	ldrb	r2, [r3, #0]
   10586:	f24a 731d 	movw	r3, #42781	; 0xa71d
   1058a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1058e:	781b      	ldrb	r3, [r3, #0]
   10590:	4413      	add	r3, r2
   10592:	b2da      	uxtb	r2, r3
   10594:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1059c:	701a      	strb	r2, [r3, #0]
   1059e:	f24a 731e 	movw	r3, #42782	; 0xa71e
   105a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a6:	781a      	ldrb	r2, [r3, #0]
   105a8:	f24a 731d 	movw	r3, #42781	; 0xa71d
   105ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b0:	781b      	ldrb	r3, [r3, #0]
   105b2:	4413      	add	r3, r2
   105b4:	b2da      	uxtb	r2, r3
   105b6:	f24a 731e 	movw	r3, #42782	; 0xa71e
   105ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105be:	701a      	strb	r2, [r3, #0]
   105c0:	f24a 6319 	movw	r3, #42521	; 0xa619
   105c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c8:	781b      	ldrb	r3, [r3, #0]
   105ca:	3301      	adds	r3, #1
   105cc:	b2da      	uxtb	r2, r3
   105ce:	f24a 6319 	movw	r3, #42521	; 0xa619
   105d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d6:	701a      	strb	r2, [r3, #0]
   105d8:	f24a 6319 	movw	r3, #42521	; 0xa619
   105dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e0:	781b      	ldrb	r3, [r3, #0]
   105e2:	2bff      	cmp	r3, #255	; 0xff
   105e4:	d105      	bne.n	105f2 <send_takeOff+0x29a>
   105e6:	f24a 6319 	movw	r3, #42521	; 0xa619
   105ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ee:	2200      	movs	r2, #0
   105f0:	701a      	strb	r2, [r3, #0]
   105f2:	f24a 6319 	movw	r3, #42521	; 0xa619
   105f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fa:	781b      	ldrb	r3, [r3, #0]
   105fc:	461a      	mov	r2, r3
   105fe:	f24a 731d 	movw	r3, #42781	; 0xa71d
   10602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10606:	7819      	ldrb	r1, [r3, #0]
   10608:	f24a 631c 	movw	r3, #42524	; 0xa61c
   1060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10610:	5499      	strb	r1, [r3, r2]
   10612:	f24a 6319 	movw	r3, #42521	; 0xa619
   10616:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1061a:	781b      	ldrb	r3, [r3, #0]
   1061c:	3301      	adds	r3, #1
   1061e:	b2da      	uxtb	r2, r3
   10620:	f24a 6319 	movw	r3, #42521	; 0xa619
   10624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10628:	701a      	strb	r2, [r3, #0]
   1062a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1062e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10632:	781b      	ldrb	r3, [r3, #0]
   10634:	2bff      	cmp	r3, #255	; 0xff
   10636:	d105      	bne.n	10644 <send_takeOff+0x2ec>
   10638:	f24a 6319 	movw	r3, #42521	; 0xa619
   1063c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10640:	2200      	movs	r2, #0
   10642:	701a      	strb	r2, [r3, #0]
   10644:	f24a 6319 	movw	r3, #42521	; 0xa619
   10648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064c:	781b      	ldrb	r3, [r3, #0]
   1064e:	461a      	mov	r2, r3
   10650:	f24a 731e 	movw	r3, #42782	; 0xa71e
   10654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10658:	7819      	ldrb	r1, [r3, #0]
   1065a:	f24a 631c 	movw	r3, #42524	; 0xa61c
   1065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10662:	5499      	strb	r1, [r3, r2]
   10664:	f24a 6319 	movw	r3, #42521	; 0xa619
   10668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066c:	781b      	ldrb	r3, [r3, #0]
   1066e:	3301      	adds	r3, #1
   10670:	b2da      	uxtb	r2, r3
   10672:	f24a 6319 	movw	r3, #42521	; 0xa619
   10676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067a:	701a      	strb	r2, [r3, #0]
   1067c:	f24a 6319 	movw	r3, #42521	; 0xa619
   10680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10684:	781b      	ldrb	r3, [r3, #0]
   10686:	2bff      	cmp	r3, #255	; 0xff
   10688:	d105      	bne.n	10696 <send_takeOff+0x33e>
   1068a:	f24a 6319 	movw	r3, #42521	; 0xa619
   1068e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10692:	2200      	movs	r2, #0
   10694:	701a      	strb	r2, [r3, #0]
   10696:	f242 0339 	movw	r3, #8249	; 0x2039
   1069a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1069e:	781b      	ldrb	r3, [r3, #0]
   106a0:	b2db      	uxtb	r3, r3
   106a2:	f003 0310 	and.w	r3, r3, #16
   106a6:	2b00      	cmp	r3, #0
   106a8:	d15a      	bne.n	10760 <send_takeOff+0x408>
   106aa:	f24a 631a 	movw	r3, #42522	; 0xa61a
   106ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b2:	781b      	ldrb	r3, [r3, #0]
   106b4:	b2db      	uxtb	r3, r3
   106b6:	461a      	mov	r2, r3
   106b8:	f24a 631c 	movw	r3, #42524	; 0xa61c
   106bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c0:	5c9a      	ldrb	r2, [r3, r2]
   106c2:	f24a 731b 	movw	r3, #42779	; 0xa71b
   106c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ca:	701a      	strb	r2, [r3, #0]
   106cc:	f24a 731c 	movw	r3, #42780	; 0xa71c
   106d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d4:	2200      	movs	r2, #0
   106d6:	701a      	strb	r2, [r3, #0]
   106d8:	f24a 631a 	movw	r3, #42522	; 0xa61a
   106dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	b2db      	uxtb	r3, r3
   106e4:	3301      	adds	r3, #1
   106e6:	b2da      	uxtb	r2, r3
   106e8:	f24a 631a 	movw	r3, #42522	; 0xa61a
   106ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f0:	701a      	strb	r2, [r3, #0]
   106f2:	f24a 631a 	movw	r3, #42522	; 0xa61a
   106f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106fa:	781b      	ldrb	r3, [r3, #0]
   106fc:	b2db      	uxtb	r3, r3
   106fe:	2bff      	cmp	r3, #255	; 0xff
   10700:	d105      	bne.n	1070e <send_takeOff+0x3b6>
   10702:	f24a 631a 	movw	r3, #42522	; 0xa61a
   10706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070a:	2200      	movs	r2, #0
   1070c:	701a      	strb	r2, [r3, #0]
   1070e:	f242 0338 	movw	r3, #8248	; 0x2038
   10712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10716:	f242 0238 	movw	r2, #8248	; 0x2038
   1071a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1071e:	7812      	ldrb	r2, [r2, #0]
   10720:	b2d2      	uxtb	r2, r2
   10722:	f042 0201 	orr.w	r2, r2, #1
   10726:	b2d2      	uxtb	r2, r2
   10728:	701a      	strb	r2, [r3, #0]
   1072a:	f242 0339 	movw	r3, #8249	; 0x2039
   1072e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10732:	f242 0239 	movw	r2, #8249	; 0x2039
   10736:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1073a:	7812      	ldrb	r2, [r2, #0]
   1073c:	b2d2      	uxtb	r2, r2
   1073e:	f042 0210 	orr.w	r2, r2, #16
   10742:	b2d2      	uxtb	r2, r2
   10744:	701a      	strb	r2, [r3, #0]
   10746:	e00b      	b.n	10760 <send_takeOff+0x408>
   10748:	f24a 6318 	movw	r3, #42520	; 0xa618
   1074c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	3301      	adds	r3, #1
   10754:	b2da      	uxtb	r2, r3
   10756:	f24a 6318 	movw	r3, #42520	; 0xa618
   1075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1075e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10760:	f24a 73ae 	movw	r3, #42926	; 0xa7ae
   10764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10768:	2200      	movs	r2, #0
   1076a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   1076c:	bd80      	pop	{r7, pc}
   1076e:	bf00      	nop
   10770:	2000a5fb 	.word	0x2000a5fb
   10774:	f3af 8000 	nop.w

00010778 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10778:	b480      	push	{r7}
   1077a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   1077c:	f242 0317 	movw	r3, #8215	; 0x2017
   10780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10784:	f242 0217 	movw	r2, #8215	; 0x2017
   10788:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1078c:	7812      	ldrb	r2, [r2, #0]
   1078e:	b2d2      	uxtb	r2, r2
   10790:	f042 0210 	orr.w	r2, r2, #16
   10794:	b2d2      	uxtb	r2, r2
   10796:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10798:	f242 0331 	movw	r3, #8241	; 0x2031
   1079c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a0:	2201      	movs	r2, #1
   107a2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   107a4:	f242 0333 	movw	r3, #8243	; 0x2033
   107a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ac:	2219      	movs	r2, #25
   107ae:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   107b0:	f242 0311 	movw	r3, #8209	; 0x2011
   107b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b8:	f242 0211 	movw	r2, #8209	; 0x2011
   107bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107c0:	7812      	ldrb	r2, [r2, #0]
   107c2:	b2d2      	uxtb	r2, r2
   107c4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   107c8:	b2d2      	uxtb	r2, r2
   107ca:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   107cc:	f242 0312 	movw	r3, #8210	; 0x2012
   107d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d4:	f242 0212 	movw	r2, #8210	; 0x2012
   107d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107dc:	7812      	ldrb	r2, [r2, #0]
   107de:	b2d2      	uxtb	r2, r2
   107e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   107e4:	b2d2      	uxtb	r2, r2
   107e6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   107e8:	f242 0312 	movw	r3, #8210	; 0x2012
   107ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f0:	f242 0212 	movw	r2, #8210	; 0x2012
   107f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107f8:	7812      	ldrb	r2, [r2, #0]
   107fa:	b2d2      	uxtb	r2, r2
   107fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10800:	b2d2      	uxtb	r2, r2
   10802:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10804:	f242 033a 	movw	r3, #8250	; 0x203a
   10808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080c:	f242 023a 	movw	r2, #8250	; 0x203a
   10810:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10814:	7812      	ldrb	r2, [r2, #0]
   10816:	b2d2      	uxtb	r2, r2
   10818:	f042 0202 	orr.w	r2, r2, #2
   1081c:	b2d2      	uxtb	r2, r2
   1081e:	701a      	strb	r2, [r3, #0]
}
   10820:	46bd      	mov	sp, r7
   10822:	f85d 7b04 	ldr.w	r7, [sp], #4
   10826:	4770      	bx	lr

00010828 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10828:	b480      	push	{r7}
   1082a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1082c:	f24a 731c 	movw	r3, #42780	; 0xa71c
   10830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10834:	781b      	ldrb	r3, [r3, #0]
   10836:	2b00      	cmp	r3, #0
   10838:	d10e      	bne.n	10858 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1083a:	f242 0312 	movw	r3, #8210	; 0x2012
   1083e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10842:	f242 0212 	movw	r2, #8210	; 0x2012
   10846:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1084a:	7812      	ldrb	r2, [r2, #0]
   1084c:	b2d2      	uxtb	r2, r2
   1084e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10852:	b2d2      	uxtb	r2, r2
   10854:	701a      	strb	r2, [r3, #0]
   10856:	e047      	b.n	108e8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10858:	f24a 731c 	movw	r3, #42780	; 0xa71c
   1085c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	2b08      	cmp	r3, #8
   10864:	d832      	bhi.n	108cc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10866:	f24a 731b 	movw	r3, #42779	; 0xa71b
   1086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086e:	781b      	ldrb	r3, [r3, #0]
   10870:	f003 0301 	and.w	r3, r3, #1
   10874:	2b00      	cmp	r3, #0
   10876:	d00e      	beq.n	10896 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10878:	f242 0312 	movw	r3, #8210	; 0x2012
   1087c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10880:	f242 0212 	movw	r2, #8210	; 0x2012
   10884:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10888:	7812      	ldrb	r2, [r2, #0]
   1088a:	b2d2      	uxtb	r2, r2
   1088c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10890:	b2d2      	uxtb	r2, r2
   10892:	701a      	strb	r2, [r3, #0]
   10894:	e00d      	b.n	108b2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10896:	f242 0312 	movw	r3, #8210	; 0x2012
   1089a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089e:	f242 0212 	movw	r2, #8210	; 0x2012
   108a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108a6:	7812      	ldrb	r2, [r2, #0]
   108a8:	b2d2      	uxtb	r2, r2
   108aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   108ae:	b2d2      	uxtb	r2, r2
   108b0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   108b2:	f24a 731b 	movw	r3, #42779	; 0xa71b
   108b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ba:	781b      	ldrb	r3, [r3, #0]
   108bc:	085b      	lsrs	r3, r3, #1
   108be:	b2da      	uxtb	r2, r3
   108c0:	f24a 731b 	movw	r3, #42779	; 0xa71b
   108c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c8:	701a      	strb	r2, [r3, #0]
   108ca:	e00d      	b.n	108e8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   108cc:	f242 0312 	movw	r3, #8210	; 0x2012
   108d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d4:	f242 0212 	movw	r2, #8210	; 0x2012
   108d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108dc:	7812      	ldrb	r2, [r2, #0]
   108de:	b2d2      	uxtb	r2, r2
   108e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   108e4:	b2d2      	uxtb	r2, r2
   108e6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   108e8:	f24a 731c 	movw	r3, #42780	; 0xa71c
   108ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f0:	781b      	ldrb	r3, [r3, #0]
   108f2:	3301      	adds	r3, #1
   108f4:	b2da      	uxtb	r2, r3
   108f6:	f24a 731c 	movw	r3, #42780	; 0xa71c
   108fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108fe:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10900:	f24a 731c 	movw	r3, #42780	; 0xa71c
   10904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10908:	781b      	ldrb	r3, [r3, #0]
   1090a:	2b09      	cmp	r3, #9
   1090c:	d94d      	bls.n	109aa <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1090e:	f24a 6319 	movw	r3, #42521	; 0xa619
   10912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10916:	781a      	ldrb	r2, [r3, #0]
   10918:	f24a 631a 	movw	r3, #42522	; 0xa61a
   1091c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10920:	781b      	ldrb	r3, [r3, #0]
   10922:	b2db      	uxtb	r3, r3
   10924:	429a      	cmp	r2, r3
   10926:	d10e      	bne.n	10946 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10928:	f242 0339 	movw	r3, #8249	; 0x2039
   1092c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10930:	f242 0239 	movw	r2, #8249	; 0x2039
   10934:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10938:	7812      	ldrb	r2, [r2, #0]
   1093a:	b2d2      	uxtb	r2, r2
   1093c:	f022 0210 	bic.w	r2, r2, #16
   10940:	b2d2      	uxtb	r2, r2
   10942:	701a      	strb	r2, [r3, #0]
   10944:	e031      	b.n	109aa <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10946:	f24a 631a 	movw	r3, #42522	; 0xa61a
   1094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094e:	781b      	ldrb	r3, [r3, #0]
   10950:	b2db      	uxtb	r3, r3
   10952:	461a      	mov	r2, r3
   10954:	f24a 631c 	movw	r3, #42524	; 0xa61c
   10958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095c:	5c9a      	ldrb	r2, [r3, r2]
   1095e:	f24a 731b 	movw	r3, #42779	; 0xa71b
   10962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10966:	701a      	strb	r2, [r3, #0]
   10968:	f24a 731c 	movw	r3, #42780	; 0xa71c
   1096c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10970:	2200      	movs	r2, #0
   10972:	701a      	strb	r2, [r3, #0]
   10974:	f24a 631a 	movw	r3, #42522	; 0xa61a
   10978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	b2db      	uxtb	r3, r3
   10980:	3301      	adds	r3, #1
   10982:	b2da      	uxtb	r2, r3
   10984:	f24a 631a 	movw	r3, #42522	; 0xa61a
   10988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098c:	701a      	strb	r2, [r3, #0]
   1098e:	f24a 631a 	movw	r3, #42522	; 0xa61a
   10992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10996:	781b      	ldrb	r3, [r3, #0]
   10998:	b2db      	uxtb	r3, r3
   1099a:	2bff      	cmp	r3, #255	; 0xff
   1099c:	d105      	bne.n	109aa <__vector_5+0x182>
   1099e:	f24a 631a 	movw	r3, #42522	; 0xa61a
   109a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a6:	2200      	movs	r2, #0
   109a8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   109aa:	46bd      	mov	sp, r7
   109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   109b0:	4770      	bx	lr
   109b2:	bf00      	nop

000109b4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   109b4:	b480      	push	{r7}
   109b6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   109b8:	f24a 734f 	movw	r3, #42831	; 0xa74f
   109bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   109c2:	f240 0382 	movw	r3, #130	; 0x82
   109c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ca:	2200      	movs	r2, #0
   109cc:	701a      	strb	r2, [r3, #0]
}
   109ce:	46bd      	mov	sp, r7
   109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   109d4:	4770      	bx	lr
   109d6:	bf00      	nop

000109d8 <link_fbw_send>:

void link_fbw_send(void) {
   109d8:	b480      	push	{r7}
   109da:	b083      	sub	sp, #12
   109dc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   109de:	f24a 7354 	movw	r3, #42836	; 0xa754
   109e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e6:	781b      	ldrb	r3, [r3, #0]
   109e8:	b2db      	uxtb	r3, r3
   109ea:	2b00      	cmp	r3, #0
   109ec:	d00c      	beq.n	10a08 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   109ee:	f24a 7355 	movw	r3, #42837	; 0xa755
   109f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f6:	781b      	ldrb	r3, [r3, #0]
   109f8:	3301      	adds	r3, #1
   109fa:	b2da      	uxtb	r2, r3
   109fc:	f24a 7355 	movw	r3, #42837	; 0xa755
   10a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a04:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10a06:	e064      	b.n	10ad2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10a08:	f242 030d 	movw	r3, #8205	; 0x200d
   10a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a10:	2251      	movs	r2, #81	; 0x51
   10a12:	701a      	strb	r2, [r3, #0]
   10a14:	f242 030e 	movw	r3, #8206	; 0x200e
   10a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a1c:	781b      	ldrb	r3, [r3, #0]
   10a1e:	b2db      	uxtb	r3, r3
   10a20:	b2db      	uxtb	r3, r3
   10a22:	b25b      	sxtb	r3, r3
   10a24:	2b00      	cmp	r3, #0
   10a26:	da05      	bge.n	10a34 <link_fbw_send+0x5c>
   10a28:	f242 030f 	movw	r3, #8207	; 0x200f
   10a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a30:	781b      	ldrb	r3, [r3, #0]
   10a32:	71fb      	strb	r3, [r7, #7]
   10a34:	f242 030d 	movw	r3, #8205	; 0x200d
   10a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3c:	f242 020d 	movw	r2, #8205	; 0x200d
   10a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a44:	7812      	ldrb	r2, [r2, #0]
   10a46:	b2d2      	uxtb	r2, r2
   10a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10a4c:	b2d2      	uxtb	r2, r2
   10a4e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10a50:	f24a 7354 	movw	r3, #42836	; 0xa754
   10a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a58:	2201      	movs	r2, #1
   10a5a:	701a      	strb	r2, [r3, #0]
   10a5c:	f242 0318 	movw	r3, #8216	; 0x2018
   10a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a64:	f242 0218 	movw	r2, #8216	; 0x2018
   10a68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a6c:	7812      	ldrb	r2, [r2, #0]
   10a6e:	b2d2      	uxtb	r2, r2
   10a70:	f022 0201 	bic.w	r2, r2, #1
   10a74:	b2d2      	uxtb	r2, r2
   10a76:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10a78:	f24a 7351 	movw	r3, #42833	; 0xa751
   10a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a80:	2200      	movs	r2, #0
   10a82:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10a84:	f24a 7352 	movw	r3, #42834	; 0xa752
   10a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a8c:	2200      	movs	r2, #0
   10a8e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10a90:	f24a 7351 	movw	r3, #42833	; 0xa751
   10a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	461a      	mov	r2, r3
   10a9c:	f24a 7338 	movw	r3, #42808	; 0xa738
   10aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa4:	4413      	add	r3, r2
   10aa6:	781a      	ldrb	r2, [r3, #0]
   10aa8:	f24a 7353 	movw	r3, #42835	; 0xa753
   10aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10ab2:	f242 030f 	movw	r3, #8207	; 0x200f
   10ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aba:	f24a 7253 	movw	r2, #42835	; 0xa753
   10abe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ac2:	7812      	ldrb	r2, [r2, #0]
   10ac4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10ac6:	f24a 734e 	movw	r3, #42830	; 0xa74e
   10aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ace:	2200      	movs	r2, #0
   10ad0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10ad2:	370c      	adds	r7, #12
   10ad4:	46bd      	mov	sp, r7
   10ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ada:	4770      	bx	lr

00010adc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10adc:	b480      	push	{r7}
   10ade:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10ae0:	f242 032a 	movw	r3, #8234	; 0x202a
   10ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae8:	f242 022c 	movw	r2, #8236	; 0x202c
   10aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10af0:	8812      	ldrh	r2, [r2, #0]
   10af2:	b292      	uxth	r2, r2
   10af4:	32c8      	adds	r2, #200	; 0xc8
   10af6:	b292      	uxth	r2, r2
   10af8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10afa:	f242 0336 	movw	r3, #8246	; 0x2036
   10afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b02:	f242 0236 	movw	r2, #8246	; 0x2036
   10b06:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b0a:	7812      	ldrb	r2, [r2, #0]
   10b0c:	b2d2      	uxtb	r2, r2
   10b0e:	f042 0210 	orr.w	r2, r2, #16
   10b12:	b2d2      	uxtb	r2, r2
   10b14:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10b16:	f242 0337 	movw	r3, #8247	; 0x2037
   10b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1e:	f242 0237 	movw	r2, #8247	; 0x2037
   10b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b26:	7812      	ldrb	r2, [r2, #0]
   10b28:	b2d2      	uxtb	r2, r2
   10b2a:	f042 0210 	orr.w	r2, r2, #16
   10b2e:	b2d2      	uxtb	r2, r2
   10b30:	701a      	strb	r2, [r3, #0]
}
   10b32:	46bd      	mov	sp, r7
   10b34:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b38:	4770      	bx	lr
   10b3a:	bf00      	nop

00010b3c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10b3c:	b480      	push	{r7}
   10b3e:	b083      	sub	sp, #12
   10b40:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10b42:	f242 0337 	movw	r3, #8247	; 0x2037
   10b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4a:	f242 0237 	movw	r2, #8247	; 0x2037
   10b4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b52:	7812      	ldrb	r2, [r2, #0]
   10b54:	b2d2      	uxtb	r2, r2
   10b56:	f022 0210 	bic.w	r2, r2, #16
   10b5a:	b2d2      	uxtb	r2, r2
   10b5c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10b5e:	f24a 7351 	movw	r3, #42833	; 0xa751
   10b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b66:	781b      	ldrb	r3, [r3, #0]
   10b68:	3301      	adds	r3, #1
   10b6a:	b2da      	uxtb	r2, r3
   10b6c:	f24a 7351 	movw	r3, #42833	; 0xa751
   10b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b74:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10b76:	f24a 7351 	movw	r3, #42833	; 0xa751
   10b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	2b17      	cmp	r3, #23
   10b82:	d162      	bne.n	10c4a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10b84:	f242 030f 	movw	r3, #8207	; 0x200f
   10b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b8c:	781b      	ldrb	r3, [r3, #0]
   10b8e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10b90:	f24a 7352 	movw	r3, #42834	; 0xa752
   10b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b98:	781b      	ldrb	r3, [r3, #0]
   10b9a:	79fa      	ldrb	r2, [r7, #7]
   10b9c:	429a      	cmp	r2, r3
   10b9e:	d110      	bne.n	10bc2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10ba0:	f24a 734e 	movw	r3, #42830	; 0xa74e
   10ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba8:	2201      	movs	r2, #1
   10baa:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10bac:	f24a 7320 	movw	r3, #42784	; 0xa720
   10bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb4:	7d1a      	ldrb	r2, [r3, #20]
   10bb6:	f24a 7350 	movw	r3, #42832	; 0xa750
   10bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bbe:	701a      	strb	r2, [r3, #0]
   10bc0:	e00c      	b.n	10bdc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10bc2:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bca:	781b      	ldrb	r3, [r3, #0]
   10bcc:	b2db      	uxtb	r3, r3
   10bce:	3301      	adds	r3, #1
   10bd0:	b2da      	uxtb	r2, r3
   10bd2:	f24a 734f 	movw	r3, #42831	; 0xa74f
   10bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bda:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10bdc:	f240 0382 	movw	r3, #130	; 0x82
   10be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be4:	2201      	movs	r2, #1
   10be6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10be8:	f24a 7354 	movw	r3, #42836	; 0xa754
   10bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf0:	2200      	movs	r2, #0
   10bf2:	701a      	strb	r2, [r3, #0]
   10bf4:	f242 0318 	movw	r3, #8216	; 0x2018
   10bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfc:	f242 0218 	movw	r2, #8216	; 0x2018
   10c00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c04:	7812      	ldrb	r2, [r2, #0]
   10c06:	b2d2      	uxtb	r2, r2
   10c08:	f042 0201 	orr.w	r2, r2, #1
   10c0c:	b2d2      	uxtb	r2, r2
   10c0e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10c10:	f242 030d 	movw	r3, #8205	; 0x200d
   10c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c18:	f242 020d 	movw	r2, #8205	; 0x200d
   10c1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c20:	7812      	ldrb	r2, [r2, #0]
   10c22:	b2d2      	uxtb	r2, r2
   10c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10c28:	b2d2      	uxtb	r2, r2
   10c2a:	701a      	strb	r2, [r3, #0]
   10c2c:	f242 030d 	movw	r3, #8205	; 0x200d
   10c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c34:	f242 020d 	movw	r2, #8205	; 0x200d
   10c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c3c:	7812      	ldrb	r2, [r2, #0]
   10c3e:	b2d2      	uxtb	r2, r2
   10c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10c44:	b2d2      	uxtb	r2, r2
   10c46:	701a      	strb	r2, [r3, #0]
    return;
   10c48:	e051      	b.n	10cee <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   10c4a:	f24a 7351 	movw	r3, #42833	; 0xa751
   10c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c52:	781b      	ldrb	r3, [r3, #0]
   10c54:	2b15      	cmp	r3, #21
   10c56:	d820      	bhi.n	10c9a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   10c58:	f24a 7351 	movw	r3, #42833	; 0xa751
   10c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c60:	781b      	ldrb	r3, [r3, #0]
   10c62:	461a      	mov	r2, r3
   10c64:	f24a 7338 	movw	r3, #42808	; 0xa738
   10c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6c:	4413      	add	r3, r2
   10c6e:	781b      	ldrb	r3, [r3, #0]
   10c70:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   10c72:	f242 030f 	movw	r3, #8207	; 0x200f
   10c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c7a:	79fa      	ldrb	r2, [r7, #7]
   10c7c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   10c7e:	f24a 7353 	movw	r3, #42835	; 0xa753
   10c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c86:	781a      	ldrb	r2, [r3, #0]
   10c88:	79fb      	ldrb	r3, [r7, #7]
   10c8a:	4053      	eors	r3, r2
   10c8c:	b2da      	uxtb	r2, r3
   10c8e:	f24a 7353 	movw	r3, #42835	; 0xa753
   10c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c96:	701a      	strb	r2, [r3, #0]
   10c98:	e009      	b.n	10cae <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   10c9a:	f242 030f 	movw	r3, #8207	; 0x200f
   10c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca2:	f24a 7253 	movw	r2, #42835	; 0xa753
   10ca6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10caa:	7812      	ldrb	r2, [r2, #0]
   10cac:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   10cae:	f242 030f 	movw	r3, #8207	; 0x200f
   10cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb6:	781b      	ldrb	r3, [r3, #0]
   10cb8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   10cba:	f24a 7351 	movw	r3, #42833	; 0xa751
   10cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc2:	781b      	ldrb	r3, [r3, #0]
   10cc4:	1e5a      	subs	r2, r3, #1
   10cc6:	f24a 7320 	movw	r3, #42784	; 0xa720
   10cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cce:	4413      	add	r3, r2
   10cd0:	79fa      	ldrb	r2, [r7, #7]
   10cd2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   10cd4:	f24a 7352 	movw	r3, #42834	; 0xa752
   10cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cdc:	781a      	ldrb	r2, [r3, #0]
   10cde:	79fb      	ldrb	r3, [r7, #7]
   10ce0:	4053      	eors	r3, r2
   10ce2:	b2da      	uxtb	r2, r3
   10ce4:	f24a 7352 	movw	r3, #42834	; 0xa752
   10ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cec:	701a      	strb	r2, [r3, #0]
}
   10cee:	370c      	adds	r7, #12
   10cf0:	46bd      	mov	sp, r7
   10cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cf6:	4770      	bx	lr

00010cf8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   10cf8:	b480      	push	{r7}
   10cfa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   10cfc:	f242 0317 	movw	r3, #8215	; 0x2017
   10d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d04:	f242 0217 	movw	r2, #8215	; 0x2017
   10d08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d0c:	7812      	ldrb	r2, [r2, #0]
   10d0e:	b2d2      	uxtb	r2, r2
   10d10:	f042 0206 	orr.w	r2, r2, #6
   10d14:	b2d2      	uxtb	r2, r2
   10d16:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   10d18:	f242 0317 	movw	r3, #8215	; 0x2017
   10d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d20:	f242 0217 	movw	r2, #8215	; 0x2017
   10d24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d28:	7812      	ldrb	r2, [r2, #0]
   10d2a:	b2d2      	uxtb	r2, r2
   10d2c:	f042 0201 	orr.w	r2, r2, #1
   10d30:	b2d2      	uxtb	r2, r2
   10d32:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   10d34:	f24a 7354 	movw	r3, #42836	; 0xa754
   10d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d3c:	2200      	movs	r2, #0
   10d3e:	701a      	strb	r2, [r3, #0]
   10d40:	f242 0318 	movw	r3, #8216	; 0x2018
   10d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d48:	f242 0218 	movw	r2, #8216	; 0x2018
   10d4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d50:	7812      	ldrb	r2, [r2, #0]
   10d52:	b2d2      	uxtb	r2, r2
   10d54:	f042 0201 	orr.w	r2, r2, #1
   10d58:	b2d2      	uxtb	r2, r2
   10d5a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   10d5c:	f242 0302 	movw	r3, #8194	; 0x2002
   10d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d64:	f242 0202 	movw	r2, #8194	; 0x2002
   10d68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d6c:	7812      	ldrb	r2, [r2, #0]
   10d6e:	b2d2      	uxtb	r2, r2
   10d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10d74:	b2d2      	uxtb	r2, r2
   10d76:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   10d78:	f24a 7354 	movw	r3, #42836	; 0xa754
   10d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d80:	2200      	movs	r2, #0
   10d82:	701a      	strb	r2, [r3, #0]
   10d84:	f242 0303 	movw	r3, #8195	; 0x2003
   10d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d8c:	f242 0203 	movw	r2, #8195	; 0x2003
   10d90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d94:	7812      	ldrb	r2, [r2, #0]
   10d96:	b2d2      	uxtb	r2, r2
   10d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10d9c:	b2d2      	uxtb	r2, r2
   10d9e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   10da0:	f24a 7354 	movw	r3, #42836	; 0xa754
   10da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da8:	2200      	movs	r2, #0
   10daa:	701a      	strb	r2, [r3, #0]
}
   10dac:	46bd      	mov	sp, r7
   10dae:	f85d 7b04 	ldr.w	r7, [sp], #4
   10db2:	4770      	bx	lr

00010db4 <__vector_17>:


SIGNAL(SIG_SPI) {
   10db4:	b580      	push	{r7, lr}
   10db6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   10db8:	f24a 7354 	movw	r3, #42836	; 0xa754
   10dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	b2db      	uxtb	r3, r3
   10dc4:	2b01      	cmp	r3, #1
   10dc6:	d102      	bne.n	10dce <__vector_17+0x1a>
    link_fbw_on_spi_it();
   10dc8:	f7ff fe88 	bl	10adc <link_fbw_on_spi_it>
   10dcc:	e00b      	b.n	10de6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   10dce:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   10dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd6:	781b      	ldrb	r3, [r3, #0]
   10dd8:	3301      	adds	r3, #1
   10dda:	b2da      	uxtb	r2, r3
   10ddc:	f24a 53f8 	movw	r3, #42488	; 0xa5f8
   10de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de4:	701a      	strb	r2, [r3, #0]
}
   10de6:	bd80      	pop	{r7, pc}

00010de8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   10de8:	b480      	push	{r7}
   10dea:	b083      	sub	sp, #12
   10dec:	af00      	add	r7, sp, #0
   10dee:	4603      	mov	r3, r0
   10df0:	6039      	str	r1, [r7, #0]
   10df2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   10df4:	79fa      	ldrb	r2, [r7, #7]
   10df6:	f24a 7368 	movw	r3, #42856	; 0xa768
   10dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dfe:	6839      	ldr	r1, [r7, #0]
   10e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   10e04:	370c      	adds	r7, #12
   10e06:	46bd      	mov	sp, r7
   10e08:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e0c:	4770      	bx	lr
   10e0e:	bf00      	nop

00010e10 <adc_init>:

void 
adc_init( void )
{
   10e10:	b480      	push	{r7}
   10e12:	b083      	sub	sp, #12
   10e14:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   10e16:	f242 0362 	movw	r3, #8290	; 0x2062
   10e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1e:	2200      	movs	r2, #0
   10e20:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   10e22:	f242 0361 	movw	r3, #8289	; 0x2061
   10e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e2a:	2200      	movs	r2, #0
   10e2c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   10e2e:	f242 0307 	movw	r3, #8199	; 0x2007
   10e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e36:	2240      	movs	r2, #64	; 0x40
   10e38:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   10e3a:	f242 0308 	movw	r3, #8200	; 0x2008
   10e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e42:	f242 0208 	movw	r2, #8200	; 0x2008
   10e46:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e4a:	7812      	ldrb	r2, [r2, #0]
   10e4c:	b2d2      	uxtb	r2, r2
   10e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10e52:	b2d2      	uxtb	r2, r2
   10e54:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   10e56:	f242 0306 	movw	r3, #8198	; 0x2006
   10e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5e:	22cf      	movs	r2, #207	; 0xcf
   10e60:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   10e62:	2300      	movs	r3, #0
   10e64:	71fb      	strb	r3, [r7, #7]
   10e66:	e00a      	b.n	10e7e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   10e68:	79fa      	ldrb	r2, [r7, #7]
   10e6a:	f24a 7368 	movw	r3, #42856	; 0xa768
   10e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e72:	2100      	movs	r1, #0
   10e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   10e78:	79fb      	ldrb	r3, [r7, #7]
   10e7a:	3301      	adds	r3, #1
   10e7c:	71fb      	strb	r3, [r7, #7]
   10e7e:	79fb      	ldrb	r3, [r7, #7]
   10e80:	2b07      	cmp	r3, #7
   10e82:	d9f1      	bls.n	10e68 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   10e84:	370c      	adds	r7, #12
   10e86:	46bd      	mov	sp, r7
   10e88:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e8c:	4770      	bx	lr
   10e8e:	bf00      	nop

00010e90 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   10e90:	b480      	push	{r7}
   10e92:	b085      	sub	sp, #20
   10e94:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   10e96:	f242 0307 	movw	r3, #8199	; 0x2007
   10e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	b2db      	uxtb	r3, r3
   10ea2:	f003 0307 	and.w	r3, r3, #7
   10ea6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   10ea8:	7bfa      	ldrb	r2, [r7, #15]
   10eaa:	f24a 7368 	movw	r3, #42856	; 0xa768
   10eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10eb6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   10eb8:	f242 0304 	movw	r3, #8196	; 0x2004
   10ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec0:	881b      	ldrh	r3, [r3, #0]
   10ec2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   10ec4:	7bfa      	ldrb	r2, [r7, #15]
   10ec6:	f24a 7358 	movw	r3, #42840	; 0xa758
   10eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ece:	88f9      	ldrh	r1, [r7, #6]
   10ed0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   10ed4:	68bb      	ldr	r3, [r7, #8]
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d025      	beq.n	10f26 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   10eda:	68bb      	ldr	r3, [r7, #8]
   10edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   10ee0:	3301      	adds	r3, #1
   10ee2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   10ee4:	7bbb      	ldrb	r3, [r7, #14]
   10ee6:	2b1f      	cmp	r3, #31
   10ee8:	d901      	bls.n	10eee <__vector_21+0x5e>
   10eea:	2300      	movs	r3, #0
   10eec:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   10eee:	68bb      	ldr	r3, [r7, #8]
   10ef0:	881a      	ldrh	r2, [r3, #0]
   10ef2:	7bbb      	ldrb	r3, [r7, #14]
   10ef4:	68b9      	ldr	r1, [r7, #8]
   10ef6:	005b      	lsls	r3, r3, #1
   10ef8:	440b      	add	r3, r1
   10efa:	885b      	ldrh	r3, [r3, #2]
   10efc:	1ad3      	subs	r3, r2, r3
   10efe:	b29a      	uxth	r2, r3
   10f00:	68bb      	ldr	r3, [r7, #8]
   10f02:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   10f04:	7bbb      	ldrb	r3, [r7, #14]
   10f06:	68ba      	ldr	r2, [r7, #8]
   10f08:	005b      	lsls	r3, r3, #1
   10f0a:	4413      	add	r3, r2
   10f0c:	88fa      	ldrh	r2, [r7, #6]
   10f0e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   10f10:	68bb      	ldr	r3, [r7, #8]
   10f12:	881a      	ldrh	r2, [r3, #0]
   10f14:	88fb      	ldrh	r3, [r7, #6]
   10f16:	4413      	add	r3, r2
   10f18:	b29a      	uxth	r2, r3
   10f1a:	68bb      	ldr	r3, [r7, #8]
   10f1c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   10f1e:	68bb      	ldr	r3, [r7, #8]
   10f20:	7bba      	ldrb	r2, [r7, #14]
   10f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   10f26:	7bfb      	ldrb	r3, [r7, #15]
   10f28:	3301      	adds	r3, #1
   10f2a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   10f2c:	7bfb      	ldrb	r3, [r7, #15]
   10f2e:	2b07      	cmp	r3, #7
   10f30:	d901      	bls.n	10f36 <__vector_21+0xa6>
    adc_input = 0;
   10f32:	2300      	movs	r3, #0
   10f34:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   10f36:	f242 0307 	movw	r3, #8199	; 0x2007
   10f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3e:	7bfa      	ldrb	r2, [r7, #15]
   10f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f44:	b2d2      	uxtb	r2, r2
   10f46:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   10f48:	f242 0306 	movw	r3, #8198	; 0x2006
   10f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f50:	f242 0206 	movw	r2, #8198	; 0x2006
   10f54:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f58:	7812      	ldrb	r2, [r2, #0]
   10f5a:	b2d2      	uxtb	r2, r2
   10f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f60:	b2d2      	uxtb	r2, r2
   10f62:	701a      	strb	r2, [r3, #0]
  
}
   10f64:	3714      	adds	r7, #20
   10f66:	46bd      	mov	sp, r7
   10f68:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f6c:	4770      	bx	lr
   10f6e:	bf00      	nop

00010f70 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   10f70:	b580      	push	{r7, lr}
   10f72:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   10f74:	f003 fca8 	bl	148c8 <uart1_init>
#endif
  ubx_status = UNINIT;
   10f78:	f64a 03af 	movw	r3, #43183	; 0xa8af
   10f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f80:	2200      	movs	r2, #0
   10f82:	701a      	strb	r2, [r3, #0]
}
   10f84:	bd80      	pop	{r7, pc}
   10f86:	bf00      	nop

00010f88 <parse_gps_msg>:

void parse_gps_msg( void ) {
   10f88:	b580      	push	{r7, lr}
   10f8a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   10f8c:	f64a 03b6 	movw	r3, #43190	; 0xa8b6
   10f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	2b01      	cmp	r3, #1
   10f98:	f040 80f9 	bne.w	1118e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   10f9c:	f64a 03b5 	movw	r3, #43189	; 0xa8b5
   10fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa4:	781b      	ldrb	r3, [r3, #0]
   10fa6:	2b08      	cmp	r3, #8
   10fa8:	d128      	bne.n	10ffc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   10faa:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
   10fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb2:	685a      	ldr	r2, [r3, #4]
   10fb4:	f24a 739c 	movw	r3, #42908	; 0xa79c
   10fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fbc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   10fbe:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
   10fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc6:	689a      	ldr	r2, [r3, #8]
   10fc8:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
   10fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   10fd2:	4b73      	ldr	r3, [pc, #460]	; (111a0 <parse_gps_msg+0x218>)
   10fd4:	681b      	ldr	r3, [r3, #0]
   10fd6:	4618      	mov	r0, r3
   10fd8:	f006 fd4e 	bl	17a78 <__aeabi_i2f>
   10fdc:	4603      	mov	r3, r0
   10fde:	4618      	mov	r0, r3
   10fe0:	f04f 0100 	mov.w	r1, #0
   10fe4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   10fe8:	f006 fe4e 	bl	17c88 <__aeabi_fdiv>
   10fec:	4603      	mov	r3, r0
   10fee:	461a      	mov	r2, r3
   10ff0:	f24a 738c 	movw	r3, #42892	; 0xa78c
   10ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff8:	601a      	str	r2, [r3, #0]
   10ffa:	e0c8      	b.n	1118e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   10ffc:	f64a 03b5 	movw	r3, #43189	; 0xa8b5
   11000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11004:	781b      	ldrb	r3, [r3, #0]
   11006:	2b03      	cmp	r3, #3
   11008:	d10a      	bne.n	11020 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1100a:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
   1100e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11012:	791a      	ldrb	r2, [r3, #4]
   11014:	f24a 73ac 	movw	r3, #42924	; 0xa7ac
   11018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101c:	701a      	strb	r2, [r3, #0]
   1101e:	e0b6      	b.n	1118e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11020:	f64a 03b5 	movw	r3, #43189	; 0xa8b5
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	781b      	ldrb	r3, [r3, #0]
   1102a:	2b12      	cmp	r3, #18
   1102c:	f040 80af 	bne.w	1118e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11030:	4b5c      	ldr	r3, [pc, #368]	; (111a4 <parse_gps_msg+0x21c>)
   11032:	681b      	ldr	r3, [r3, #0]
   11034:	4618      	mov	r0, r3
   11036:	f006 fd1b 	bl	17a70 <__aeabi_ui2f>
   1103a:	4603      	mov	r3, r0
   1103c:	4618      	mov	r0, r3
   1103e:	f04f 0100 	mov.w	r1, #0
   11042:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11046:	f006 fe1f 	bl	17c88 <__aeabi_fdiv>
   1104a:	4603      	mov	r3, r0
   1104c:	461a      	mov	r2, r3
   1104e:	f24a 7390 	movw	r3, #42896	; 0xa790
   11052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11056:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11058:	4b51      	ldr	r3, [pc, #324]	; (111a0 <parse_gps_msg+0x218>)
   1105a:	681b      	ldr	r3, [r3, #0]
   1105c:	4618      	mov	r0, r3
   1105e:	f006 fd0b 	bl	17a78 <__aeabi_i2f>
   11062:	4603      	mov	r3, r0
   11064:	4618      	mov	r0, r3
   11066:	f04f 0100 	mov.w	r1, #0
   1106a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1106e:	f006 fe0b 	bl	17c88 <__aeabi_fdiv>
   11072:	4603      	mov	r3, r0
   11074:	461a      	mov	r2, r3
   11076:	f24a 7394 	movw	r3, #42900	; 0xa794
   1107a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11080:	4b49      	ldr	r3, [pc, #292]	; (111a8 <parse_gps_msg+0x220>)
   11082:	681b      	ldr	r3, [r3, #0]
   11084:	4618      	mov	r0, r3
   11086:	f006 fcf7 	bl	17a78 <__aeabi_i2f>
   1108a:	4603      	mov	r3, r0
   1108c:	4618      	mov	r0, r3
   1108e:	f006 f8b3 	bl	171f8 <__aeabi_f2d>
   11092:	4602      	mov	r2, r0
   11094:	460b      	mov	r3, r1
   11096:	4610      	mov	r0, r2
   11098:	4619      	mov	r1, r3
   1109a:	a33d      	add	r3, pc, #244	; (adr r3, 11190 <parse_gps_msg+0x208>)
   1109c:	e9d3 2300 	ldrd	r2, r3, [r3]
   110a0:	f006 fa28 	bl	174f4 <__aeabi_ddiv>
   110a4:	4602      	mov	r2, r0
   110a6:	460b      	mov	r3, r1
   110a8:	4610      	mov	r0, r2
   110aa:	4619      	mov	r1, r3
   110ac:	f04f 0200 	mov.w	r2, #0
   110b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   110b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   110b8:	f006 fa1c 	bl	174f4 <__aeabi_ddiv>
   110bc:	4602      	mov	r2, r0
   110be:	460b      	mov	r3, r1
   110c0:	4610      	mov	r0, r2
   110c2:	4619      	mov	r1, r3
   110c4:	a334      	add	r3, pc, #208	; (adr r3, 11198 <parse_gps_msg+0x210>)
   110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   110ca:	f006 f8e9 	bl	172a0 <__aeabi_dmul>
   110ce:	4602      	mov	r2, r0
   110d0:	460b      	mov	r3, r1
   110d2:	4610      	mov	r0, r2
   110d4:	4619      	mov	r1, r3
   110d6:	f006 fbc5 	bl	17864 <__aeabi_d2f>
   110da:	4602      	mov	r2, r0
   110dc:	f24a 7398 	movw	r3, #42904	; 0xa798
   110e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   110e6:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
   110ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ee:	681b      	ldr	r3, [r3, #0]
   110f0:	4618      	mov	r0, r3
   110f2:	f006 fcbd 	bl	17a70 <__aeabi_ui2f>
   110f6:	4603      	mov	r3, r0
   110f8:	4618      	mov	r0, r3
   110fa:	f04f 0100 	mov.w	r1, #0
   110fe:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11102:	f006 fdc1 	bl	17c88 <__aeabi_fdiv>
   11106:	4603      	mov	r3, r0
   11108:	461a      	mov	r2, r3
   1110a:	f24a 7388 	movw	r3, #42888	; 0xa788
   1110e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11112:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11114:	f24a 739c 	movw	r3, #42908	; 0xa79c
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	681a      	ldr	r2, [r3, #0]
   1111e:	f248 531f 	movw	r3, #34079	; 0x851f
   11122:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11126:	fb83 1302 	smull	r1, r3, r3, r2
   1112a:	1159      	asrs	r1, r3, #5
   1112c:	17d3      	asrs	r3, r2, #31
   1112e:	1acb      	subs	r3, r1, r3
   11130:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11134:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11138:	4618      	mov	r0, r3
   1113a:	f006 fc9d 	bl	17a78 <__aeabi_i2f>
   1113e:	4602      	mov	r2, r0
   11140:	f24a 73a4 	movw	r3, #42916	; 0xa7a4
   11144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11148:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1114a:	f24a 73a0 	movw	r3, #42912	; 0xa7a0
   1114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11152:	681a      	ldr	r2, [r3, #0]
   11154:	f248 531f 	movw	r3, #34079	; 0x851f
   11158:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1115c:	fb83 1302 	smull	r1, r3, r3, r2
   11160:	1159      	asrs	r1, r3, #5
   11162:	17d3      	asrs	r3, r2, #31
   11164:	1aca      	subs	r2, r1, r3
   11166:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1116a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1116e:	4413      	add	r3, r2
   11170:	4618      	mov	r0, r3
   11172:	f006 fc81 	bl	17a78 <__aeabi_i2f>
   11176:	4602      	mov	r2, r0
   11178:	f24a 73a8 	movw	r3, #42920	; 0xa7a8
   1117c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11180:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11182:	f24a 73ae 	movw	r3, #42926	; 0xa7ae
   11186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1118a:	2201      	movs	r2, #1
   1118c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1118e:	bd80      	pop	{r7, pc}
   11190:	00000000 	.word	0x00000000
   11194:	40f86a00 	.word	0x40f86a00
   11198:	5a7ed197 	.word	0x5a7ed197
   1119c:	400921fb 	.word	0x400921fb
   111a0:	2000a7bc 	.word	0x2000a7bc
   111a4:	2000a7c4 	.word	0x2000a7c4
   111a8:	2000a7c8 	.word	0x2000a7c8

000111ac <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   111ac:	b480      	push	{r7}
   111ae:	b083      	sub	sp, #12
   111b0:	af00      	add	r7, sp, #0
   111b2:	4603      	mov	r3, r0
   111b4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   111b6:	f64a 03af 	movw	r3, #43183	; 0xa8af
   111ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111be:	781b      	ldrb	r3, [r3, #0]
   111c0:	2b06      	cmp	r3, #6
   111c2:	d81d      	bhi.n	11200 <parse_ubx+0x54>
    ck_a += c;
   111c4:	f64a 03b3 	movw	r3, #43187	; 0xa8b3
   111c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111cc:	781a      	ldrb	r2, [r3, #0]
   111ce:	79fb      	ldrb	r3, [r7, #7]
   111d0:	4413      	add	r3, r2
   111d2:	b2da      	uxtb	r2, r3
   111d4:	f64a 03b3 	movw	r3, #43187	; 0xa8b3
   111d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111dc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   111de:	f64a 03b4 	movw	r3, #43188	; 0xa8b4
   111e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e6:	781a      	ldrb	r2, [r3, #0]
   111e8:	f64a 03b3 	movw	r3, #43187	; 0xa8b3
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	4413      	add	r3, r2
   111f4:	b2da      	uxtb	r2, r3
   111f6:	f64a 03b4 	movw	r3, #43188	; 0xa8b4
   111fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11200:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	2b00      	cmp	r3, #0
   1120c:	d110      	bne.n	11230 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   1120e:	79fb      	ldrb	r3, [r7, #7]
   11210:	2bb5      	cmp	r3, #181	; 0xb5
   11212:	f040 8135 	bne.w	11480 <parse_ubx+0x2d4>
      ubx_status++;
   11216:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1121a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121e:	781b      	ldrb	r3, [r3, #0]
   11220:	3301      	adds	r3, #1
   11222:	b2da      	uxtb	r2, r3
   11224:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1122e:	e12f      	b.n	11490 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11230:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11238:	781b      	ldrb	r3, [r3, #0]
   1123a:	2b01      	cmp	r3, #1
   1123c:	d11c      	bne.n	11278 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1123e:	79fb      	ldrb	r3, [r7, #7]
   11240:	2b62      	cmp	r3, #98	; 0x62
   11242:	d000      	beq.n	11246 <parse_ubx+0x9a>
      goto error;
   11244:	e11d      	b.n	11482 <parse_ubx+0x2d6>
    ck_a = 0;
   11246:	f64a 03b3 	movw	r3, #43187	; 0xa8b3
   1124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124e:	2200      	movs	r2, #0
   11250:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11252:	f64a 03b4 	movw	r3, #43188	; 0xa8b4
   11256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1125a:	2200      	movs	r2, #0
   1125c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1125e:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11266:	781b      	ldrb	r3, [r3, #0]
   11268:	3301      	adds	r3, #1
   1126a:	b2da      	uxtb	r2, r3
   1126c:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11274:	701a      	strb	r2, [r3, #0]
   11276:	e103      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11278:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1127c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11280:	781b      	ldrb	r3, [r3, #0]
   11282:	2b02      	cmp	r3, #2
   11284:	d127      	bne.n	112d6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11286:	f24a 73ad 	movw	r3, #42925	; 0xa7ad
   1128a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128e:	781b      	ldrb	r3, [r3, #0]
   11290:	b2db      	uxtb	r3, r3
   11292:	2b00      	cmp	r3, #0
   11294:	d00c      	beq.n	112b0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11296:	f64a 03b7 	movw	r3, #43191	; 0xa8b7
   1129a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1129e:	781b      	ldrb	r3, [r3, #0]
   112a0:	3301      	adds	r3, #1
   112a2:	b2da      	uxtb	r2, r3
   112a4:	f64a 03b7 	movw	r3, #43191	; 0xa8b7
   112a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ac:	701a      	strb	r2, [r3, #0]
      goto error;
   112ae:	e0e8      	b.n	11482 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   112b0:	f64a 03b6 	movw	r3, #43190	; 0xa8b6
   112b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b8:	79fa      	ldrb	r2, [r7, #7]
   112ba:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   112bc:	f64a 03af 	movw	r3, #43183	; 0xa8af
   112c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c4:	781b      	ldrb	r3, [r3, #0]
   112c6:	3301      	adds	r3, #1
   112c8:	b2da      	uxtb	r2, r3
   112ca:	f64a 03af 	movw	r3, #43183	; 0xa8af
   112ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d2:	701a      	strb	r2, [r3, #0]
   112d4:	e0d4      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   112d6:	f64a 03af 	movw	r3, #43183	; 0xa8af
   112da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112de:	781b      	ldrb	r3, [r3, #0]
   112e0:	2b03      	cmp	r3, #3
   112e2:	d112      	bne.n	1130a <parse_ubx+0x15e>
  {
    ubx_id = c;
   112e4:	f64a 03b5 	movw	r3, #43189	; 0xa8b5
   112e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ec:	79fa      	ldrb	r2, [r7, #7]
   112ee:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   112f0:	f64a 03af 	movw	r3, #43183	; 0xa8af
   112f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f8:	781b      	ldrb	r3, [r3, #0]
   112fa:	3301      	adds	r3, #1
   112fc:	b2da      	uxtb	r2, r3
   112fe:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11306:	701a      	strb	r2, [r3, #0]
   11308:	e0ba      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   1130a:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1130e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11312:	781b      	ldrb	r3, [r3, #0]
   11314:	2b04      	cmp	r3, #4
   11316:	d113      	bne.n	11340 <parse_ubx+0x194>
  {
    ubx_len = c;
   11318:	79fb      	ldrb	r3, [r7, #7]
   1131a:	b29a      	uxth	r2, r3
   1131c:	f64a 03b0 	movw	r3, #43184	; 0xa8b0
   11320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11324:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11326:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1132a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132e:	781b      	ldrb	r3, [r3, #0]
   11330:	3301      	adds	r3, #1
   11332:	b2da      	uxtb	r2, r3
   11334:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133c:	701a      	strb	r2, [r3, #0]
   1133e:	e09f      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11340:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11348:	781b      	ldrb	r3, [r3, #0]
   1134a:	2b05      	cmp	r3, #5
   1134c:	d12b      	bne.n	113a6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1134e:	79fb      	ldrb	r3, [r7, #7]
   11350:	021b      	lsls	r3, r3, #8
   11352:	b29a      	uxth	r2, r3
   11354:	f64a 03b0 	movw	r3, #43184	; 0xa8b0
   11358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135c:	881b      	ldrh	r3, [r3, #0]
   1135e:	b29b      	uxth	r3, r3
   11360:	4313      	orrs	r3, r2
   11362:	b29b      	uxth	r3, r3
   11364:	b29a      	uxth	r2, r3
   11366:	f64a 03b0 	movw	r3, #43184	; 0xa8b0
   1136a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11370:	f64a 03b0 	movw	r3, #43184	; 0xa8b0
   11374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11378:	881b      	ldrh	r3, [r3, #0]
   1137a:	2bff      	cmp	r3, #255	; 0xff
   1137c:	d900      	bls.n	11380 <parse_ubx+0x1d4>
      goto error;
   1137e:	e080      	b.n	11482 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11380:	f64a 03b2 	movw	r3, #43186	; 0xa8b2
   11384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11388:	2200      	movs	r2, #0
   1138a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1138c:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11394:	781b      	ldrb	r3, [r3, #0]
   11396:	3301      	adds	r3, #1
   11398:	b2da      	uxtb	r2, r3
   1139a:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1139e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a2:	701a      	strb	r2, [r3, #0]
   113a4:	e06c      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   113a6:	f64a 03af 	movw	r3, #43183	; 0xa8af
   113aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ae:	781b      	ldrb	r3, [r3, #0]
   113b0:	2b06      	cmp	r3, #6
   113b2:	d131      	bne.n	11418 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   113b4:	f64a 03b2 	movw	r3, #43186	; 0xa8b2
   113b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113bc:	781b      	ldrb	r3, [r3, #0]
   113be:	461a      	mov	r2, r3
   113c0:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
   113c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c8:	79f9      	ldrb	r1, [r7, #7]
   113ca:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   113cc:	f64a 03b2 	movw	r3, #43186	; 0xa8b2
   113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d4:	781b      	ldrb	r3, [r3, #0]
   113d6:	3301      	adds	r3, #1
   113d8:	b2da      	uxtb	r2, r3
   113da:	f64a 03b2 	movw	r3, #43186	; 0xa8b2
   113de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   113e4:	f64a 03b2 	movw	r3, #43186	; 0xa8b2
   113e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	461a      	mov	r2, r3
   113f0:	f64a 03b0 	movw	r3, #43184	; 0xa8b0
   113f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f8:	881b      	ldrh	r3, [r3, #0]
   113fa:	429a      	cmp	r2, r3
   113fc:	d340      	bcc.n	11480 <parse_ubx+0x2d4>
      ubx_status++;
   113fe:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11406:	781b      	ldrb	r3, [r3, #0]
   11408:	3301      	adds	r3, #1
   1140a:	b2da      	uxtb	r2, r3
   1140c:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11410:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11414:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11416:	e03b      	b.n	11490 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11418:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1141c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11420:	781b      	ldrb	r3, [r3, #0]
   11422:	2b07      	cmp	r3, #7
   11424:	d115      	bne.n	11452 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11426:	f64a 03b3 	movw	r3, #43187	; 0xa8b3
   1142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	79fa      	ldrb	r2, [r7, #7]
   11432:	429a      	cmp	r2, r3
   11434:	d000      	beq.n	11438 <parse_ubx+0x28c>
      goto error;
   11436:	e024      	b.n	11482 <parse_ubx+0x2d6>
    ubx_status++;
   11438:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1143c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11440:	781b      	ldrb	r3, [r3, #0]
   11442:	3301      	adds	r3, #1
   11444:	b2da      	uxtb	r2, r3
   11446:	f64a 03af 	movw	r3, #43183	; 0xa8af
   1144a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144e:	701a      	strb	r2, [r3, #0]
   11450:	e016      	b.n	11480 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11452:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1145a:	781b      	ldrb	r3, [r3, #0]
   1145c:	2b08      	cmp	r3, #8
   1145e:	d10f      	bne.n	11480 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11460:	f64a 03b4 	movw	r3, #43188	; 0xa8b4
   11464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11468:	781b      	ldrb	r3, [r3, #0]
   1146a:	79fa      	ldrb	r2, [r7, #7]
   1146c:	429a      	cmp	r2, r3
   1146e:	d000      	beq.n	11472 <parse_ubx+0x2c6>
      goto error;
   11470:	e007      	b.n	11482 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11472:	f24a 73ad 	movw	r3, #42925	; 0xa7ad
   11476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147a:	2201      	movs	r2, #1
   1147c:	701a      	strb	r2, [r3, #0]
    goto restart;
   1147e:	e000      	b.n	11482 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11480:	e006      	b.n	11490 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11482:	f64a 03af 	movw	r3, #43183	; 0xa8af
   11486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148a:	2200      	movs	r2, #0
   1148c:	701a      	strb	r2, [r3, #0]
  return;
   1148e:	bf00      	nop
}
   11490:	370c      	adds	r7, #12
   11492:	46bd      	mov	sp, r7
   11494:	f85d 7b04 	ldr.w	r7, [sp], #4
   11498:	4770      	bx	lr
   1149a:	bf00      	nop

0001149c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   1149c:	b580      	push	{r7, lr}
   1149e:	b082      	sub	sp, #8
   114a0:	af00      	add	r7, sp, #0
   114a2:	f242 039c 	movw	r3, #8348	; 0x209c
   114a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114aa:	781b      	ldrb	r3, [r3, #0]
   114ac:	71fb      	strb	r3, [r7, #7]
   114ae:	79fb      	ldrb	r3, [r7, #7]
   114b0:	4618      	mov	r0, r3
   114b2:	f7ff fe7b 	bl	111ac <parse_ubx>
   114b6:	3708      	adds	r7, #8
   114b8:	46bd      	mov	sp, r7
   114ba:	bd80      	pop	{r7, pc}
   114bc:	f3af 8000 	nop.w

000114c0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   114c0:	b580      	push	{r7, lr}
   114c2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   114c4:	f240 038c 	movw	r3, #140	; 0x8c
   114c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114cc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   114d0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   114d4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   114d6:	2001      	movs	r0, #1
   114d8:	f64a 01bc 	movw	r1, #43196	; 0xa8bc
   114dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
   114e0:	f7ff fc82 	bl	10de8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   114e4:	2002      	movs	r0, #2
   114e6:	f64a 1100 	movw	r1, #43264	; 0xa900
   114ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
   114ee:	f7ff fc7b 	bl	10de8 <adc_buf_channel>
}
   114f2:	bd80      	pop	{r7, pc}

000114f4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   114f4:	b480      	push	{r7}
   114f6:	b083      	sub	sp, #12
   114f8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   114fa:	f64a 03bc 	movw	r3, #43196	; 0xa8bc
   114fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11502:	881b      	ldrh	r3, [r3, #0]
   11504:	095b      	lsrs	r3, r3, #5
   11506:	b29b      	uxth	r3, r3
   11508:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   1150a:	f64a 1300 	movw	r3, #43264	; 0xa900
   1150e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11512:	881b      	ldrh	r3, [r3, #0]
   11514:	095b      	lsrs	r3, r3, #5
   11516:	b29b      	uxth	r3, r3
   11518:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   1151a:	88fb      	ldrh	r3, [r7, #6]
   1151c:	425b      	negs	r3, r3
   1151e:	b29a      	uxth	r2, r3
   11520:	88bb      	ldrh	r3, [r7, #4]
   11522:	1ad3      	subs	r3, r2, r3
   11524:	b29a      	uxth	r2, r3
   11526:	f240 0386 	movw	r3, #134	; 0x86
   1152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152e:	881b      	ldrh	r3, [r3, #0]
   11530:	b29b      	uxth	r3, r3
   11532:	1ad3      	subs	r3, r2, r3
   11534:	b29b      	uxth	r3, r3
   11536:	b29a      	uxth	r2, r3
   11538:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
   1153c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11540:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11542:	88ba      	ldrh	r2, [r7, #4]
   11544:	88fb      	ldrh	r3, [r7, #6]
   11546:	1ad3      	subs	r3, r2, r3
   11548:	b29a      	uxth	r2, r3
   1154a:	f240 0388 	movw	r3, #136	; 0x88
   1154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11552:	881b      	ldrh	r3, [r3, #0]
   11554:	b29b      	uxth	r3, r3
   11556:	1ad3      	subs	r3, r2, r3
   11558:	b29b      	uxth	r3, r3
   1155a:	b29a      	uxth	r2, r3
   1155c:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
   11560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11564:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11566:	370c      	adds	r7, #12
   11568:	46bd      	mov	sp, r7
   1156a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1156e:	4770      	bx	lr

00011570 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11570:	b580      	push	{r7, lr}
   11572:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11574:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
   11578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157c:	881b      	ldrh	r3, [r3, #0]
   1157e:	b29b      	uxth	r3, r3
   11580:	425b      	negs	r3, r3
   11582:	b29b      	uxth	r3, r3
   11584:	b29a      	uxth	r2, r3
   11586:	f240 0384 	movw	r3, #132	; 0x84
   1158a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1158e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11590:	f240 0384 	movw	r3, #132	; 0x84
   11594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11598:	881b      	ldrh	r3, [r3, #0]
   1159a:	b21b      	sxth	r3, r3
   1159c:	4618      	mov	r0, r3
   1159e:	f005 fe19 	bl	171d4 <__aeabi_i2d>
   115a2:	4602      	mov	r2, r0
   115a4:	460b      	mov	r3, r1
   115a6:	f04f 0000 	mov.w	r0, #0
   115aa:	f04f 0100 	mov.w	r1, #0
   115ae:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   115b2:	f005 ff9f 	bl	174f4 <__aeabi_ddiv>
   115b6:	4602      	mov	r2, r0
   115b8:	460b      	mov	r3, r1
   115ba:	4610      	mov	r0, r2
   115bc:	4619      	mov	r1, r3
   115be:	f006 f951 	bl	17864 <__aeabi_d2f>
   115c2:	4602      	mov	r2, r0
   115c4:	f240 038c 	movw	r3, #140	; 0x8c
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	601a      	str	r2, [r3, #0]
}
   115ce:	bd80      	pop	{r7, pc}

000115d0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   115d0:	b590      	push	{r4, r7, lr}
   115d2:	b083      	sub	sp, #12
   115d4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   115d6:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   115da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115de:	681a      	ldr	r2, [r3, #0]
   115e0:	f64a 1344 	movw	r3, #43332	; 0xa944
   115e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e8:	681b      	ldr	r3, [r3, #0]
   115ea:	4610      	mov	r0, r2
   115ec:	4619      	mov	r1, r3
   115ee:	f006 f98d 	bl	1790c <__aeabi_fsub>
   115f2:	4603      	mov	r3, r0
   115f4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   115f6:	f240 0390 	movw	r3, #144	; 0x90
   115fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fe:	681b      	ldr	r3, [r3, #0]
   11600:	4618      	mov	r0, r3
   11602:	6879      	ldr	r1, [r7, #4]
   11604:	f006 fa8c 	bl	17b20 <__aeabi_fmul>
   11608:	4603      	mov	r3, r0
   1160a:	4618      	mov	r0, r3
   1160c:	f04f 0100 	mov.w	r1, #0
   11610:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11614:	f006 fc22 	bl	17e5c <__aeabi_fcmplt>
   11618:	4603      	mov	r3, r0
   1161a:	2b00      	cmp	r3, #0
   1161c:	d002      	beq.n	11624 <roll_pitch_pid_run+0x54>
   1161e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11622:	e026      	b.n	11672 <roll_pitch_pid_run+0xa2>
   11624:	f240 0390 	movw	r3, #144	; 0x90
   11628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1162c:	681b      	ldr	r3, [r3, #0]
   1162e:	4618      	mov	r0, r3
   11630:	6879      	ldr	r1, [r7, #4]
   11632:	f006 fa75 	bl	17b20 <__aeabi_fmul>
   11636:	4603      	mov	r3, r0
   11638:	4618      	mov	r0, r3
   1163a:	f04f 0100 	mov.w	r1, #0
   1163e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11642:	f006 fc29 	bl	17e98 <__aeabi_fcmpgt>
   11646:	4603      	mov	r3, r0
   11648:	2b00      	cmp	r3, #0
   1164a:	d002      	beq.n	11652 <roll_pitch_pid_run+0x82>
   1164c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11650:	e00e      	b.n	11670 <roll_pitch_pid_run+0xa0>
   11652:	f240 0390 	movw	r3, #144	; 0x90
   11656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1165a:	681b      	ldr	r3, [r3, #0]
   1165c:	4618      	mov	r0, r3
   1165e:	6879      	ldr	r1, [r7, #4]
   11660:	f006 fa5e 	bl	17b20 <__aeabi_fmul>
   11664:	4603      	mov	r3, r0
   11666:	4618      	mov	r0, r3
   11668:	f006 fc20 	bl	17eac <__aeabi_f2iz>
   1166c:	4603      	mov	r3, r0
   1166e:	b29b      	uxth	r3, r3
   11670:	b29a      	uxth	r2, r3
   11672:	f64a 134e 	movw	r3, #43342	; 0xa94e
   11676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   1167c:	f64a 1354 	movw	r3, #43348	; 0xa954
   11680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11684:	681b      	ldr	r3, [r3, #0]
   11686:	4618      	mov	r0, r3
   11688:	f04f 0100 	mov.w	r1, #0
   1168c:	f006 fbe6 	bl	17e5c <__aeabi_fcmplt>
   11690:	4603      	mov	r3, r0
   11692:	2b00      	cmp	r3, #0
   11694:	d006      	beq.n	116a4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11696:	f64a 1354 	movw	r3, #43348	; 0xa954
   1169a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169e:	f04f 0200 	mov.w	r2, #0
   116a2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   116a4:	f64a 33e0 	movw	r3, #44000	; 0xabe0
   116a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ac:	681a      	ldr	r2, [r3, #0]
   116ae:	f64a 1348 	movw	r3, #43336	; 0xa948
   116b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b6:	681b      	ldr	r3, [r3, #0]
   116b8:	4610      	mov	r0, r2
   116ba:	4619      	mov	r1, r3
   116bc:	f006 f926 	bl	1790c <__aeabi_fsub>
   116c0:	4603      	mov	r3, r0
   116c2:	461c      	mov	r4, r3
   116c4:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   116c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116cc:	681b      	ldr	r3, [r3, #0]
   116ce:	4618      	mov	r0, r3
   116d0:	f04f 0100 	mov.w	r1, #0
   116d4:	f006 fbc2 	bl	17e5c <__aeabi_fcmplt>
   116d8:	4603      	mov	r3, r0
   116da:	2b00      	cmp	r3, #0
   116dc:	d007      	beq.n	116ee <roll_pitch_pid_run+0x11e>
   116de:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   116e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   116ec:	e004      	b.n	116f8 <roll_pitch_pid_run+0x128>
   116ee:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	681a      	ldr	r2, [r3, #0]
   116f8:	f64a 1354 	movw	r3, #43348	; 0xa954
   116fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	4610      	mov	r0, r2
   11704:	4619      	mov	r1, r3
   11706:	f006 fa0b 	bl	17b20 <__aeabi_fmul>
   1170a:	4603      	mov	r3, r0
   1170c:	4620      	mov	r0, r4
   1170e:	4619      	mov	r1, r3
   11710:	f006 f8fc 	bl	1790c <__aeabi_fsub>
   11714:	4603      	mov	r3, r0
   11716:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1171a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   1171c:	f240 0394 	movw	r3, #148	; 0x94
   11720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11724:	681b      	ldr	r3, [r3, #0]
   11726:	4618      	mov	r0, r3
   11728:	6879      	ldr	r1, [r7, #4]
   1172a:	f006 f9f9 	bl	17b20 <__aeabi_fmul>
   1172e:	4603      	mov	r3, r0
   11730:	4618      	mov	r0, r3
   11732:	f04f 0100 	mov.w	r1, #0
   11736:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1173a:	f006 fb8f 	bl	17e5c <__aeabi_fcmplt>
   1173e:	4603      	mov	r3, r0
   11740:	2b00      	cmp	r3, #0
   11742:	d002      	beq.n	1174a <roll_pitch_pid_run+0x17a>
   11744:	f64d 2280 	movw	r2, #55936	; 0xda80
   11748:	e026      	b.n	11798 <roll_pitch_pid_run+0x1c8>
   1174a:	f240 0394 	movw	r3, #148	; 0x94
   1174e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11752:	681b      	ldr	r3, [r3, #0]
   11754:	4618      	mov	r0, r3
   11756:	6879      	ldr	r1, [r7, #4]
   11758:	f006 f9e2 	bl	17b20 <__aeabi_fmul>
   1175c:	4603      	mov	r3, r0
   1175e:	4618      	mov	r0, r3
   11760:	f04f 0100 	mov.w	r1, #0
   11764:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11768:	f006 fb96 	bl	17e98 <__aeabi_fcmpgt>
   1176c:	4603      	mov	r3, r0
   1176e:	2b00      	cmp	r3, #0
   11770:	d002      	beq.n	11778 <roll_pitch_pid_run+0x1a8>
   11772:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11776:	e00e      	b.n	11796 <roll_pitch_pid_run+0x1c6>
   11778:	f240 0394 	movw	r3, #148	; 0x94
   1177c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11780:	681b      	ldr	r3, [r3, #0]
   11782:	4618      	mov	r0, r3
   11784:	6879      	ldr	r1, [r7, #4]
   11786:	f006 f9cb 	bl	17b20 <__aeabi_fmul>
   1178a:	4603      	mov	r3, r0
   1178c:	4618      	mov	r0, r3
   1178e:	f006 fb8d 	bl	17eac <__aeabi_f2iz>
   11792:	4603      	mov	r3, r0
   11794:	b29b      	uxth	r3, r3
   11796:	b29a      	uxth	r2, r3
   11798:	f64a 1350 	movw	r3, #43344	; 0xa950
   1179c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a0:	801a      	strh	r2, [r3, #0]
}
   117a2:	370c      	adds	r7, #12
   117a4:	46bd      	mov	sp, r7
   117a6:	bd90      	pop	{r4, r7, pc}

000117a8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   117a8:	b580      	push	{r7, lr}
   117aa:	b082      	sub	sp, #8
   117ac:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   117ae:	f64a 4308 	movw	r3, #44040	; 0xac08
   117b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b6:	681a      	ldr	r2, [r3, #0]
   117b8:	f64a 135c 	movw	r3, #43356	; 0xa95c
   117bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c0:	681b      	ldr	r3, [r3, #0]
   117c2:	4610      	mov	r0, r2
   117c4:	4619      	mov	r1, r3
   117c6:	f006 f8a1 	bl	1790c <__aeabi_fsub>
   117ca:	4603      	mov	r3, r0
   117cc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   117ce:	e013      	b.n	117f8 <course_pid_run+0x50>
   117d0:	6878      	ldr	r0, [r7, #4]
   117d2:	f005 fd11 	bl	171f8 <__aeabi_f2d>
   117d6:	4602      	mov	r2, r0
   117d8:	460b      	mov	r3, r1
   117da:	4610      	mov	r0, r2
   117dc:	4619      	mov	r1, r3
   117de:	a348      	add	r3, pc, #288	; (adr r3, 11900 <course_pid_run+0x158>)
   117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   117e4:	f005 fba8 	bl	16f38 <__aeabi_dsub>
   117e8:	4602      	mov	r2, r0
   117ea:	460b      	mov	r3, r1
   117ec:	4610      	mov	r0, r2
   117ee:	4619      	mov	r1, r3
   117f0:	f006 f838 	bl	17864 <__aeabi_d2f>
   117f4:	4603      	mov	r3, r0
   117f6:	607b      	str	r3, [r7, #4]
   117f8:	6878      	ldr	r0, [r7, #4]
   117fa:	f005 fcfd 	bl	171f8 <__aeabi_f2d>
   117fe:	4602      	mov	r2, r0
   11800:	460b      	mov	r3, r1
   11802:	4610      	mov	r0, r2
   11804:	4619      	mov	r1, r3
   11806:	a340      	add	r3, pc, #256	; (adr r3, 11908 <course_pid_run+0x160>)
   11808:	e9d3 2300 	ldrd	r2, r3, [r3]
   1180c:	f005 ffd8 	bl	177c0 <__aeabi_dcmpgt>
   11810:	4603      	mov	r3, r0
   11812:	2b00      	cmp	r3, #0
   11814:	d1dc      	bne.n	117d0 <course_pid_run+0x28>
   11816:	e013      	b.n	11840 <course_pid_run+0x98>
   11818:	6878      	ldr	r0, [r7, #4]
   1181a:	f005 fced 	bl	171f8 <__aeabi_f2d>
   1181e:	4602      	mov	r2, r0
   11820:	460b      	mov	r3, r1
   11822:	4610      	mov	r0, r2
   11824:	4619      	mov	r1, r3
   11826:	a336      	add	r3, pc, #216	; (adr r3, 11900 <course_pid_run+0x158>)
   11828:	e9d3 2300 	ldrd	r2, r3, [r3]
   1182c:	f005 fb86 	bl	16f3c <__adddf3>
   11830:	4602      	mov	r2, r0
   11832:	460b      	mov	r3, r1
   11834:	4610      	mov	r0, r2
   11836:	4619      	mov	r1, r3
   11838:	f006 f814 	bl	17864 <__aeabi_d2f>
   1183c:	4603      	mov	r3, r0
   1183e:	607b      	str	r3, [r7, #4]
   11840:	6878      	ldr	r0, [r7, #4]
   11842:	f005 fcd9 	bl	171f8 <__aeabi_f2d>
   11846:	4602      	mov	r2, r0
   11848:	460b      	mov	r3, r1
   1184a:	4610      	mov	r0, r2
   1184c:	4619      	mov	r1, r3
   1184e:	a330      	add	r3, pc, #192	; (adr r3, 11910 <course_pid_run+0x168>)
   11850:	e9d3 2300 	ldrd	r2, r3, [r3]
   11854:	f005 ff96 	bl	17784 <__aeabi_dcmplt>
   11858:	4603      	mov	r3, r0
   1185a:	2b00      	cmp	r3, #0
   1185c:	d1dc      	bne.n	11818 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1185e:	f240 039c 	movw	r3, #156	; 0x9c
   11862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	4618      	mov	r0, r3
   1186a:	6879      	ldr	r1, [r7, #4]
   1186c:	f006 f958 	bl	17b20 <__aeabi_fmul>
   11870:	4603      	mov	r3, r0
   11872:	461a      	mov	r2, r3
   11874:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
   11878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1187c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1187e:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
   11882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11886:	681a      	ldr	r2, [r3, #0]
   11888:	f240 03a0 	movw	r3, #160	; 0xa0
   1188c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11890:	681b      	ldr	r3, [r3, #0]
   11892:	4610      	mov	r0, r2
   11894:	4619      	mov	r1, r3
   11896:	f006 faff 	bl	17e98 <__aeabi_fcmpgt>
   1189a:	4603      	mov	r3, r0
   1189c:	2b00      	cmp	r3, #0
   1189e:	d00a      	beq.n	118b6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   118a0:	f240 03a0 	movw	r3, #160	; 0xa0
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	681a      	ldr	r2, [r3, #0]
   118aa:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
   118ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b2:	601a      	str	r2, [r3, #0]
   118b4:	e01e      	b.n	118f4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   118b6:	f240 03a0 	movw	r3, #160	; 0xa0
   118ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118be:	681b      	ldr	r3, [r3, #0]
   118c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   118c4:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
   118c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118cc:	681b      	ldr	r3, [r3, #0]
   118ce:	4610      	mov	r0, r2
   118d0:	4619      	mov	r1, r3
   118d2:	f006 fae1 	bl	17e98 <__aeabi_fcmpgt>
   118d6:	4603      	mov	r3, r0
   118d8:	2b00      	cmp	r3, #0
   118da:	d00b      	beq.n	118f4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   118dc:	f240 03a0 	movw	r3, #160	; 0xa0
   118e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   118ea:	f64a 13a0 	movw	r3, #43424	; 0xa9a0
   118ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f2:	601a      	str	r2, [r3, #0]
}
   118f4:	3708      	adds	r7, #8
   118f6:	46bd      	mov	sp, r7
   118f8:	bd80      	pop	{r7, pc}
   118fa:	bf00      	nop
   118fc:	f3af 8000 	nop.w
   11900:	54442d18 	.word	0x54442d18
   11904:	401921fb 	.word	0x401921fb
   11908:	54442d18 	.word	0x54442d18
   1190c:	400921fb 	.word	0x400921fb
   11910:	54442d18 	.word	0x54442d18
   11914:	c00921fb 	.word	0xc00921fb

00011918 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11918:	b5b0      	push	{r4, r5, r7, lr}
   1191a:	b082      	sub	sp, #8
   1191c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1191e:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11926:	681a      	ldr	r2, [r3, #0]
   11928:	f64a 1360 	movw	r3, #43360	; 0xa960
   1192c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11930:	681b      	ldr	r3, [r3, #0]
   11932:	4610      	mov	r0, r2
   11934:	4619      	mov	r1, r3
   11936:	f005 ffe9 	bl	1790c <__aeabi_fsub>
   1193a:	4603      	mov	r3, r0
   1193c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1193e:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   11942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11946:	781b      	ldrb	r3, [r3, #0]
   11948:	2b00      	cmp	r3, #0
   1194a:	f000 80a8 	beq.w	11a9e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1194e:	f64a 1398 	movw	r3, #43416	; 0xa998
   11952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11956:	881b      	ldrh	r3, [r3, #0]
   11958:	b29a      	uxth	r2, r3
   1195a:	f64a 134c 	movw	r3, #43340	; 0xa94c
   1195e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11962:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11964:	f240 03a8 	movw	r3, #168	; 0xa8
   11968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1196c:	681a      	ldr	r2, [r3, #0]
   1196e:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11976:	681b      	ldr	r3, [r3, #0]
   11978:	4610      	mov	r0, r2
   1197a:	4619      	mov	r1, r3
   1197c:	f006 f8d0 	bl	17b20 <__aeabi_fmul>
   11980:	4603      	mov	r3, r0
   11982:	4618      	mov	r0, r3
   11984:	6879      	ldr	r1, [r7, #4]
   11986:	f005 ffc3 	bl	17910 <__addsf3>
   1198a:	4603      	mov	r3, r0
   1198c:	461a      	mov	r2, r3
   1198e:	f240 03a4 	movw	r3, #164	; 0xa4
   11992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	4610      	mov	r0, r2
   1199a:	4619      	mov	r1, r3
   1199c:	f006 f8c0 	bl	17b20 <__aeabi_fmul>
   119a0:	4603      	mov	r3, r0
   119a2:	461a      	mov	r2, r3
   119a4:	f64a 1348 	movw	r3, #43336	; 0xa948
   119a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ac:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   119ae:	f64a 1348 	movw	r3, #43336	; 0xa948
   119b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b6:	681a      	ldr	r2, [r3, #0]
   119b8:	f240 03ac 	movw	r3, #172	; 0xac
   119bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c0:	681b      	ldr	r3, [r3, #0]
   119c2:	4610      	mov	r0, r2
   119c4:	4619      	mov	r1, r3
   119c6:	f006 fa67 	bl	17e98 <__aeabi_fcmpgt>
   119ca:	4603      	mov	r3, r0
   119cc:	2b00      	cmp	r3, #0
   119ce:	d009      	beq.n	119e4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   119d0:	f240 03ac 	movw	r3, #172	; 0xac
   119d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d8:	681a      	ldr	r2, [r3, #0]
   119da:	f64a 1348 	movw	r3, #43336	; 0xa948
   119de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119e2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   119e4:	f64a 1348 	movw	r3, #43336	; 0xa948
   119e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ec:	681a      	ldr	r2, [r3, #0]
   119ee:	f240 03b0 	movw	r3, #176	; 0xb0
   119f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f6:	681b      	ldr	r3, [r3, #0]
   119f8:	4610      	mov	r0, r2
   119fa:	4619      	mov	r1, r3
   119fc:	f006 fa2e 	bl	17e5c <__aeabi_fcmplt>
   11a00:	4603      	mov	r3, r0
   11a02:	2b00      	cmp	r3, #0
   11a04:	d009      	beq.n	11a1a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11a06:	f240 03b0 	movw	r3, #176	; 0xb0
   11a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a0e:	681a      	ldr	r2, [r3, #0]
   11a10:	f64a 1348 	movw	r3, #43336	; 0xa948
   11a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a18:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11a1a:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a22:	681b      	ldr	r3, [r3, #0]
   11a24:	4618      	mov	r0, r3
   11a26:	6879      	ldr	r1, [r7, #4]
   11a28:	f005 ff72 	bl	17910 <__addsf3>
   11a2c:	4603      	mov	r3, r0
   11a2e:	461a      	mov	r2, r3
   11a30:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a38:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11a3a:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a42:	681b      	ldr	r3, [r3, #0]
   11a44:	4618      	mov	r0, r3
   11a46:	f04f 0100 	mov.w	r1, #0
   11a4a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11a4e:	f006 fa23 	bl	17e98 <__aeabi_fcmpgt>
   11a52:	4603      	mov	r3, r0
   11a54:	2b00      	cmp	r3, #0
   11a56:	d008      	beq.n	11a6a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11a58:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a60:	f04f 0200 	mov.w	r2, #0
   11a64:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11a68:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11a6a:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a72:	681b      	ldr	r3, [r3, #0]
   11a74:	4618      	mov	r0, r3
   11a76:	f04f 0100 	mov.w	r1, #0
   11a7a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11a7e:	f006 f9ed 	bl	17e5c <__aeabi_fcmplt>
   11a82:	4603      	mov	r3, r0
   11a84:	2b00      	cmp	r3, #0
   11a86:	d100      	bne.n	11a8a <climb_pid_run+0x172>
   11a88:	e109      	b.n	11c9e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11a8a:	f64a 136c 	movw	r3, #43372	; 0xa96c
   11a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a92:	f04f 0200 	mov.w	r2, #0
   11a96:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11a9a:	601a      	str	r2, [r3, #0]
   11a9c:	e0ff      	b.n	11c9e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11a9e:	f64a 1360 	movw	r3, #43360	; 0xa960
   11aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aa6:	681b      	ldr	r3, [r3, #0]
   11aa8:	4618      	mov	r0, r3
   11aaa:	f04f 0100 	mov.w	r1, #0
   11aae:	f006 f9f3 	bl	17e98 <__aeabi_fcmpgt>
   11ab2:	4603      	mov	r3, r0
   11ab4:	2b00      	cmp	r3, #0
   11ab6:	d010      	beq.n	11ada <climb_pid_run+0x1c2>
   11ab8:	f64a 1360 	movw	r3, #43360	; 0xa960
   11abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac0:	681a      	ldr	r2, [r3, #0]
   11ac2:	f240 0398 	movw	r3, #152	; 0x98
   11ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aca:	681b      	ldr	r3, [r3, #0]
   11acc:	4610      	mov	r0, r2
   11ace:	4619      	mov	r1, r3
   11ad0:	f006 f826 	bl	17b20 <__aeabi_fmul>
   11ad4:	4603      	mov	r3, r0
   11ad6:	461a      	mov	r2, r3
   11ad8:	e001      	b.n	11ade <climb_pid_run+0x1c6>
   11ada:	f04f 0200 	mov.w	r2, #0
   11ade:	f64a 1358 	movw	r3, #43352	; 0xa958
   11ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11ae8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11aec:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11af0:	f64a 1368 	movw	r3, #43368	; 0xa968
   11af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af8:	681b      	ldr	r3, [r3, #0]
   11afa:	4610      	mov	r0, r2
   11afc:	4619      	mov	r1, r3
   11afe:	f006 f80f 	bl	17b20 <__aeabi_fmul>
   11b02:	4603      	mov	r3, r0
   11b04:	4618      	mov	r0, r3
   11b06:	6879      	ldr	r1, [r7, #4]
   11b08:	f005 ff02 	bl	17910 <__addsf3>
   11b0c:	4603      	mov	r3, r0
   11b0e:	461a      	mov	r2, r3
   11b10:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11b14:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11b18:	4610      	mov	r0, r2
   11b1a:	4619      	mov	r1, r3
   11b1c:	f006 f800 	bl	17b20 <__aeabi_fmul>
   11b20:	4603      	mov	r3, r0
   11b22:	4618      	mov	r0, r3
   11b24:	f005 fb68 	bl	171f8 <__aeabi_f2d>
   11b28:	4602      	mov	r2, r0
   11b2a:	460b      	mov	r3, r1
   11b2c:	4610      	mov	r0, r2
   11b2e:	4619      	mov	r1, r3
   11b30:	a35d      	add	r3, pc, #372	; (adr r3, 11ca8 <climb_pid_run+0x390>)
   11b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b36:	f005 fa01 	bl	16f3c <__adddf3>
   11b3a:	4602      	mov	r2, r0
   11b3c:	460b      	mov	r3, r1
   11b3e:	4614      	mov	r4, r2
   11b40:	461d      	mov	r5, r3
   11b42:	f64a 1360 	movw	r3, #43360	; 0xa960
   11b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b4a:	681b      	ldr	r3, [r3, #0]
   11b4c:	4618      	mov	r0, r3
   11b4e:	f005 fb53 	bl	171f8 <__aeabi_f2d>
   11b52:	4602      	mov	r2, r0
   11b54:	460b      	mov	r3, r1
   11b56:	4610      	mov	r0, r2
   11b58:	4619      	mov	r1, r3
   11b5a:	a355      	add	r3, pc, #340	; (adr r3, 11cb0 <climb_pid_run+0x398>)
   11b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b60:	f005 fb9e 	bl	172a0 <__aeabi_dmul>
   11b64:	4602      	mov	r2, r0
   11b66:	460b      	mov	r3, r1
   11b68:	4620      	mov	r0, r4
   11b6a:	4629      	mov	r1, r5
   11b6c:	f005 f9e6 	bl	16f3c <__adddf3>
   11b70:	4602      	mov	r2, r0
   11b72:	460b      	mov	r3, r1
   11b74:	4610      	mov	r0, r2
   11b76:	4619      	mov	r1, r3
   11b78:	f005 fe74 	bl	17864 <__aeabi_d2f>
   11b7c:	4603      	mov	r3, r0
   11b7e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11b80:	f64a 1368 	movw	r3, #43368	; 0xa968
   11b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b88:	681b      	ldr	r3, [r3, #0]
   11b8a:	4618      	mov	r0, r3
   11b8c:	6879      	ldr	r1, [r7, #4]
   11b8e:	f005 febf 	bl	17910 <__addsf3>
   11b92:	4603      	mov	r3, r0
   11b94:	461a      	mov	r2, r3
   11b96:	f64a 1368 	movw	r3, #43368	; 0xa968
   11b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b9e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11ba0:	f64a 1368 	movw	r3, #43368	; 0xa968
   11ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ba8:	681b      	ldr	r3, [r3, #0]
   11baa:	4618      	mov	r0, r3
   11bac:	f04f 0100 	mov.w	r1, #0
   11bb0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11bb4:	f006 f970 	bl	17e98 <__aeabi_fcmpgt>
   11bb8:	4603      	mov	r3, r0
   11bba:	2b00      	cmp	r3, #0
   11bbc:	d008      	beq.n	11bd0 <climb_pid_run+0x2b8>
   11bbe:	f64a 1368 	movw	r3, #43368	; 0xa968
   11bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bc6:	f04f 0200 	mov.w	r2, #0
   11bca:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11bce:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11bd0:	f64a 1368 	movw	r3, #43368	; 0xa968
   11bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd8:	681b      	ldr	r3, [r3, #0]
   11bda:	4618      	mov	r0, r3
   11bdc:	f04f 0100 	mov.w	r1, #0
   11be0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11be4:	f006 f93a 	bl	17e5c <__aeabi_fcmplt>
   11be8:	4603      	mov	r3, r0
   11bea:	2b00      	cmp	r3, #0
   11bec:	d008      	beq.n	11c00 <climb_pid_run+0x2e8>
   11bee:	f64a 1368 	movw	r3, #43368	; 0xa968
   11bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf6:	f04f 0200 	mov.w	r2, #0
   11bfa:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11bfe:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11c00:	6838      	ldr	r0, [r7, #0]
   11c02:	f04f 0100 	mov.w	r1, #0
   11c06:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c0a:	f005 ff89 	bl	17b20 <__aeabi_fmul>
   11c0e:	4603      	mov	r3, r0
   11c10:	4618      	mov	r0, r3
   11c12:	f04f 0100 	mov.w	r1, #0
   11c16:	f006 f921 	bl	17e5c <__aeabi_fcmplt>
   11c1a:	4603      	mov	r3, r0
   11c1c:	2b00      	cmp	r3, #0
   11c1e:	d001      	beq.n	11c24 <climb_pid_run+0x30c>
   11c20:	2200      	movs	r2, #0
   11c22:	e022      	b.n	11c6a <climb_pid_run+0x352>
   11c24:	6838      	ldr	r0, [r7, #0]
   11c26:	f04f 0100 	mov.w	r1, #0
   11c2a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c2e:	f005 ff77 	bl	17b20 <__aeabi_fmul>
   11c32:	4603      	mov	r3, r0
   11c34:	4618      	mov	r0, r3
   11c36:	f04f 0100 	mov.w	r1, #0
   11c3a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c3e:	f006 f92b 	bl	17e98 <__aeabi_fcmpgt>
   11c42:	4603      	mov	r3, r0
   11c44:	2b00      	cmp	r3, #0
   11c46:	d002      	beq.n	11c4e <climb_pid_run+0x336>
   11c48:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c4c:	e00c      	b.n	11c68 <climb_pid_run+0x350>
   11c4e:	6838      	ldr	r0, [r7, #0]
   11c50:	f04f 0100 	mov.w	r1, #0
   11c54:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c58:	f005 ff62 	bl	17b20 <__aeabi_fmul>
   11c5c:	4603      	mov	r3, r0
   11c5e:	4618      	mov	r0, r3
   11c60:	f006 f924 	bl	17eac <__aeabi_f2iz>
   11c64:	4603      	mov	r3, r0
   11c66:	b29b      	uxth	r3, r3
   11c68:	b29a      	uxth	r2, r3
   11c6a:	f64a 134c 	movw	r3, #43340	; 0xa94c
   11c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c72:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   11c74:	f64a 139c 	movw	r3, #43420	; 0xa99c
   11c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7c:	681a      	ldr	r2, [r3, #0]
   11c7e:	f64a 1358 	movw	r3, #43352	; 0xa958
   11c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c86:	681b      	ldr	r3, [r3, #0]
   11c88:	4610      	mov	r0, r2
   11c8a:	4619      	mov	r1, r3
   11c8c:	f005 fe40 	bl	17910 <__addsf3>
   11c90:	4603      	mov	r3, r0
   11c92:	461a      	mov	r2, r3
   11c94:	f64a 1348 	movw	r3, #43336	; 0xa948
   11c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c9c:	601a      	str	r2, [r3, #0]
  }
}
   11c9e:	3708      	adds	r7, #8
   11ca0:	46bd      	mov	sp, r7
   11ca2:	bdb0      	pop	{r4, r5, r7, pc}
   11ca4:	f3af 8000 	nop.w
   11ca8:	3d70a3d7 	.word	0x3d70a3d7
   11cac:	3fd3d70a 	.word	0x3fd3d70a
   11cb0:	9999999a 	.word	0x9999999a
   11cb4:	3fc99999 	.word	0x3fc99999

00011cb8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   11cb8:	b580      	push	{r7, lr}
   11cba:	b082      	sub	sp, #8
   11cbc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   11cbe:	f64a 33d4 	movw	r3, #43988	; 0xabd4
   11cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cc6:	681a      	ldr	r2, [r3, #0]
   11cc8:	f240 03b8 	movw	r3, #184	; 0xb8
   11ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd0:	681b      	ldr	r3, [r3, #0]
   11cd2:	4610      	mov	r0, r2
   11cd4:	4619      	mov	r1, r3
   11cd6:	f005 fe19 	bl	1790c <__aeabi_fsub>
   11cda:	4603      	mov	r3, r0
   11cdc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   11cde:	f240 03b4 	movw	r3, #180	; 0xb4
   11ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce6:	681b      	ldr	r3, [r3, #0]
   11ce8:	4618      	mov	r0, r3
   11cea:	6879      	ldr	r1, [r7, #4]
   11cec:	f005 ff18 	bl	17b20 <__aeabi_fmul>
   11cf0:	4603      	mov	r3, r0
   11cf2:	461a      	mov	r2, r3
   11cf4:	f64a 1364 	movw	r3, #43364	; 0xa964
   11cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfc:	681b      	ldr	r3, [r3, #0]
   11cfe:	4610      	mov	r0, r2
   11d00:	4619      	mov	r1, r3
   11d02:	f005 fe05 	bl	17910 <__addsf3>
   11d06:	4603      	mov	r3, r0
   11d08:	461a      	mov	r2, r3
   11d0a:	f64a 1360 	movw	r3, #43360	; 0xa960
   11d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d12:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   11d14:	f64a 1360 	movw	r3, #43360	; 0xa960
   11d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d1c:	681b      	ldr	r3, [r3, #0]
   11d1e:	4618      	mov	r0, r3
   11d20:	f04f 0100 	mov.w	r1, #0
   11d24:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   11d28:	f006 f898 	bl	17e5c <__aeabi_fcmplt>
   11d2c:	4603      	mov	r3, r0
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d008      	beq.n	11d44 <altitude_pid_run+0x8c>
   11d32:	f64a 1360 	movw	r3, #43360	; 0xa960
   11d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3a:	f04f 0200 	mov.w	r2, #0
   11d3e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   11d42:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   11d44:	f64a 1360 	movw	r3, #43360	; 0xa960
   11d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d4c:	681b      	ldr	r3, [r3, #0]
   11d4e:	4618      	mov	r0, r3
   11d50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11d54:	f006 f8a0 	bl	17e98 <__aeabi_fcmpgt>
   11d58:	4603      	mov	r3, r0
   11d5a:	2b00      	cmp	r3, #0
   11d5c:	d006      	beq.n	11d6c <altitude_pid_run+0xb4>
   11d5e:	f64a 1360 	movw	r3, #43360	; 0xa960
   11d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   11d6a:	601a      	str	r2, [r3, #0]
}
   11d6c:	3708      	adds	r7, #8
   11d6e:	46bd      	mov	sp, r7
   11d70:	bd80      	pop	{r7, pc}
   11d72:	bf00      	nop
   11d74:	f3af 8000 	nop.w

00011d78 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   11d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d7a:	b08b      	sub	sp, #44	; 0x2c
   11d7c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   11d7e:	f64a 1371 	movw	r3, #43377	; 0xa971
   11d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d86:	781b      	ldrb	r3, [r3, #0]
   11d88:	2b00      	cmp	r3, #0
   11d8a:	f040 8169 	bne.w	12060 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   11d8e:	f64a 1370 	movw	r3, #43376	; 0xa970
   11d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d96:	781b      	ldrb	r3, [r3, #0]
   11d98:	2b00      	cmp	r3, #0
   11d9a:	d13c      	bne.n	11e16 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   11d9c:	f64a 1370 	movw	r3, #43376	; 0xa970
   11da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da4:	2200      	movs	r2, #0
   11da6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   11da8:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   11dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db0:	881b      	ldrh	r3, [r3, #0]
   11db2:	2b00      	cmp	r3, #0
   11db4:	d000      	beq.n	11db8 <auto_nav+0x40>
   11db6:	e03d      	b.n	11e34 <auto_nav+0xbc>
	else NextStage(); 
   11db8:	f64a 1370 	movw	r3, #43376	; 0xa970
   11dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dc0:	781b      	ldrb	r3, [r3, #0]
   11dc2:	3301      	adds	r3, #1
   11dc4:	b2da      	uxtb	r2, r3
   11dc6:	f64a 1370 	movw	r3, #43376	; 0xa970
   11dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dce:	701a      	strb	r2, [r3, #0]
   11dd0:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   11dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd8:	681a      	ldr	r2, [r3, #0]
   11dda:	f64a 1374 	movw	r3, #43380	; 0xa974
   11dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de2:	601a      	str	r2, [r3, #0]
   11de4:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   11de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dec:	681a      	ldr	r2, [r3, #0]
   11dee:	f64a 1378 	movw	r3, #43384	; 0xa978
   11df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11df6:	601a      	str	r2, [r3, #0]
   11df8:	f64a 1384 	movw	r3, #43396	; 0xa984
   11dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e00:	2200      	movs	r2, #0
   11e02:	801a      	strh	r2, [r3, #0]
   11e04:	f64a 1388 	movw	r3, #43400	; 0xa988
   11e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0c:	f04f 0200 	mov.w	r2, #0
   11e10:	601a      	str	r2, [r3, #0]
   11e12:	f002 b883 	b.w	13f1c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   11e16:	f64a 1370 	movw	r3, #43376	; 0xa970
   11e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1e:	781b      	ldrb	r3, [r3, #0]
   11e20:	2b01      	cmp	r3, #1
   11e22:	d100      	bne.n	11e26 <auto_nav+0xae>
    {   Goto(while_1)}
   11e24:	e7ba      	b.n	11d9c <auto_nav+0x24>
    else if (nav_stage == 2)
   11e26:	f64a 1370 	movw	r3, #43376	; 0xa970
   11e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2e:	781b      	ldrb	r3, [r3, #0]
   11e30:	2b02      	cmp	r3, #2
   11e32:	d162      	bne.n	11efa <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   11e34:	f64a 1370 	movw	r3, #43376	; 0xa970
   11e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3c:	2202      	movs	r2, #2
   11e3e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   11e40:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   11e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e48:	881b      	ldrh	r3, [r3, #0]
   11e4a:	2b08      	cmp	r3, #8
   11e4c:	d92e      	bls.n	11eac <auto_nav+0x134>
   11e4e:	f64a 1370 	movw	r3, #43376	; 0xa970
   11e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e56:	781b      	ldrb	r3, [r3, #0]
   11e58:	3301      	adds	r3, #1
   11e5a:	b2da      	uxtb	r2, r3
   11e5c:	f64a 1370 	movw	r3, #43376	; 0xa970
   11e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e64:	701a      	strb	r2, [r3, #0]
   11e66:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   11e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6e:	681a      	ldr	r2, [r3, #0]
   11e70:	f64a 1374 	movw	r3, #43380	; 0xa974
   11e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e78:	601a      	str	r2, [r3, #0]
   11e7a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   11e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e82:	681a      	ldr	r2, [r3, #0]
   11e84:	f64a 1378 	movw	r3, #43384	; 0xa978
   11e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8c:	601a      	str	r2, [r3, #0]
   11e8e:	f64a 1384 	movw	r3, #43396	; 0xa984
   11e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e96:	2200      	movs	r2, #0
   11e98:	801a      	strh	r2, [r3, #0]
   11e9a:	f64a 1388 	movw	r3, #43400	; 0xa988
   11e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea2:	f04f 0200 	mov.w	r2, #0
   11ea6:	601a      	str	r2, [r3, #0]
   11ea8:	f002 b838 	b.w	13f1c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11eac:	f64a 135c 	movw	r3, #43356	; 0xa95c
   11eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   11eb8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   11ebc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   11ebe:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   11ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec6:	2200      	movs	r2, #0
   11ec8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   11eca:	f64a 139c 	movw	r3, #43420	; 0xa99c
   11ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed2:	f649 129a 	movw	r2, #39322	; 0x999a
   11ed6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   11eda:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   11edc:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   11ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee4:	2201      	movs	r2, #1
   11ee6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   11ee8:	f64a 1398 	movw	r3, #43416	; 0xa998
   11eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   11ef4:	801a      	strh	r2, [r3, #0]
        }
        return;
   11ef6:	f002 b811 	b.w	13f1c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   11efa:	f64a 1370 	movw	r3, #43376	; 0xa970
   11efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f02:	781b      	ldrb	r3, [r3, #0]
   11f04:	2b03      	cmp	r3, #3
   11f06:	d168      	bne.n	11fda <auto_nav+0x262>
     {
	nav_stage = 3;	
   11f08:	f64a 1370 	movw	r3, #43376	; 0xa970
   11f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f10:	2203      	movs	r2, #3
   11f12:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   11f14:	f64a 33d4 	movw	r3, #43988	; 0xabd4
   11f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	4618      	mov	r0, r3
   11f20:	f04f 0100 	mov.w	r1, #0
   11f24:	f2c4 3116 	movt	r1, #17174	; 0x4316
   11f28:	f005 ffb6 	bl	17e98 <__aeabi_fcmpgt>
   11f2c:	4603      	mov	r3, r0
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d02e      	beq.n	11f90 <auto_nav+0x218>
   11f32:	f64a 1370 	movw	r3, #43376	; 0xa970
   11f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3a:	781b      	ldrb	r3, [r3, #0]
   11f3c:	3301      	adds	r3, #1
   11f3e:	b2da      	uxtb	r2, r3
   11f40:	f64a 1370 	movw	r3, #43376	; 0xa970
   11f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f48:	701a      	strb	r2, [r3, #0]
   11f4a:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   11f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f52:	681a      	ldr	r2, [r3, #0]
   11f54:	f64a 1374 	movw	r3, #43380	; 0xa974
   11f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5c:	601a      	str	r2, [r3, #0]
   11f5e:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   11f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f66:	681a      	ldr	r2, [r3, #0]
   11f68:	f64a 1378 	movw	r3, #43384	; 0xa978
   11f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f70:	601a      	str	r2, [r3, #0]
   11f72:	f64a 1384 	movw	r3, #43396	; 0xa984
   11f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f7a:	2200      	movs	r2, #0
   11f7c:	801a      	strh	r2, [r3, #0]
   11f7e:	f64a 1388 	movw	r3, #43400	; 0xa988
   11f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f86:	f04f 0200 	mov.w	r2, #0
   11f8a:	601a      	str	r2, [r3, #0]
   11f8c:	f001 bfc6 	b.w	13f1c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   11f90:	f64a 135c 	movw	r3, #43356	; 0xa95c
   11f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f98:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   11f9c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   11fa0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   11fa2:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   11fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11faa:	2200      	movs	r2, #0
   11fac:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   11fae:	f64a 139c 	movw	r3, #43420	; 0xa99c
   11fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb6:	f04f 0200 	mov.w	r2, #0
   11fba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   11fbc:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   11fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc4:	2202      	movs	r2, #2
   11fc6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   11fc8:	f64a 1360 	movw	r3, #43360	; 0xa960
   11fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   11fd4:	601a      	str	r2, [r3, #0]
        }
        return;
   11fd6:	f001 bfa1 	b.w	13f1c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   11fda:	f64a 1370 	movw	r3, #43376	; 0xa970
   11fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe2:	781b      	ldrb	r3, [r3, #0]
   11fe4:	2b04      	cmp	r3, #4
   11fe6:	f041 8799 	bne.w	13f1c <auto_nav+0x21a4>
        NextBlock()
   11fea:	f64a 1371 	movw	r3, #43377	; 0xa971
   11fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff2:	781b      	ldrb	r3, [r3, #0]
   11ff4:	3301      	adds	r3, #1
   11ff6:	b2da      	uxtb	r2, r3
   11ff8:	f64a 1371 	movw	r3, #43377	; 0xa971
   11ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12000:	701a      	strb	r2, [r3, #0]
   12002:	f64a 1370 	movw	r3, #43376	; 0xa970
   12006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1200a:	2200      	movs	r2, #0
   1200c:	701a      	strb	r2, [r3, #0]
   1200e:	f64a 1386 	movw	r3, #43398	; 0xa986
   12012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12016:	2200      	movs	r2, #0
   12018:	801a      	strh	r2, [r3, #0]
   1201a:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1201e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12022:	681a      	ldr	r2, [r3, #0]
   12024:	f64a 1374 	movw	r3, #43380	; 0xa974
   12028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1202c:	601a      	str	r2, [r3, #0]
   1202e:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12036:	681a      	ldr	r2, [r3, #0]
   12038:	f64a 1378 	movw	r3, #43384	; 0xa978
   1203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12040:	601a      	str	r2, [r3, #0]
   12042:	f64a 1384 	movw	r3, #43396	; 0xa984
   12046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204a:	2200      	movs	r2, #0
   1204c:	801a      	strh	r2, [r3, #0]
   1204e:	f64a 1388 	movw	r3, #43400	; 0xa988
   12052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12056:	f04f 0200 	mov.w	r2, #0
   1205a:	601a      	str	r2, [r3, #0]
   1205c:	f001 bf5e 	b.w	13f1c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12060:	f64a 1371 	movw	r3, #43377	; 0xa971
   12064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12068:	781b      	ldrb	r3, [r3, #0]
   1206a:	2b01      	cmp	r3, #1
   1206c:	f040 81bc 	bne.w	123e8 <auto_nav+0x670>
{
    nav_block = 1;
   12070:	f64a 1371 	movw	r3, #43377	; 0xa971
   12074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12078:	2201      	movs	r2, #1
   1207a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1207c:	f24a 6300 	movw	r3, #42496	; 0xa600
   12080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12084:	781b      	ldrb	r3, [r3, #0]
   12086:	2b00      	cmp	r3, #0
   12088:	d007      	beq.n	1209a <auto_nav+0x322>
   1208a:	f24a 6300 	movw	r3, #42496	; 0xa600
   1208e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12092:	2200      	movs	r2, #0
   12094:	701a      	strb	r2, [r3, #0]
   12096:	2301      	movs	r3, #1
   12098:	e000      	b.n	1209c <auto_nav+0x324>
   1209a:	2300      	movs	r3, #0
   1209c:	2b00      	cmp	r3, #0
   1209e:	d034      	beq.n	1210a <auto_nav+0x392>
	{ GotoBlock(2) }
   120a0:	f64a 1371 	movw	r3, #43377	; 0xa971
   120a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a8:	2202      	movs	r2, #2
   120aa:	701a      	strb	r2, [r3, #0]
   120ac:	f64a 1370 	movw	r3, #43376	; 0xa970
   120b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b4:	2200      	movs	r2, #0
   120b6:	701a      	strb	r2, [r3, #0]
   120b8:	f64a 1386 	movw	r3, #43398	; 0xa986
   120bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c0:	2200      	movs	r2, #0
   120c2:	801a      	strh	r2, [r3, #0]
   120c4:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   120c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120cc:	681a      	ldr	r2, [r3, #0]
   120ce:	f64a 1374 	movw	r3, #43380	; 0xa974
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	601a      	str	r2, [r3, #0]
   120d8:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   120dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e0:	681a      	ldr	r2, [r3, #0]
   120e2:	f64a 1378 	movw	r3, #43384	; 0xa978
   120e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ea:	601a      	str	r2, [r3, #0]
   120ec:	f64a 1384 	movw	r3, #43396	; 0xa984
   120f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f4:	2200      	movs	r2, #0
   120f6:	801a      	strh	r2, [r3, #0]
   120f8:	f64a 1388 	movw	r3, #43400	; 0xa988
   120fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12100:	f04f 0200 	mov.w	r2, #0
   12104:	601a      	str	r2, [r3, #0]
   12106:	f001 bf09 	b.w	13f1c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1210a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1210e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12112:	781b      	ldrb	r3, [r3, #0]
   12114:	2b00      	cmp	r3, #0
   12116:	d12e      	bne.n	12176 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12118:	f64a 1370 	movw	r3, #43376	; 0xa970
   1211c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12120:	781b      	ldrb	r3, [r3, #0]
   12122:	3301      	adds	r3, #1
   12124:	b2da      	uxtb	r2, r3
   12126:	f64a 1370 	movw	r3, #43376	; 0xa970
   1212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212e:	701a      	strb	r2, [r3, #0]
   12130:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12138:	681a      	ldr	r2, [r3, #0]
   1213a:	f64a 1374 	movw	r3, #43380	; 0xa974
   1213e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12142:	601a      	str	r2, [r3, #0]
   12144:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214c:	681a      	ldr	r2, [r3, #0]
   1214e:	f64a 1378 	movw	r3, #43384	; 0xa978
   12152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12156:	601a      	str	r2, [r3, #0]
   12158:	f64a 1384 	movw	r3, #43396	; 0xa984
   1215c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12160:	2200      	movs	r2, #0
   12162:	801a      	strh	r2, [r3, #0]
   12164:	f64a 1388 	movw	r3, #43400	; 0xa988
   12168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216c:	f04f 0200 	mov.w	r2, #0
   12170:	601a      	str	r2, [r3, #0]
   12172:	f001 bed3 	b.w	13f1c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12176:	f64a 1370 	movw	r3, #43376	; 0xa970
   1217a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217e:	781b      	ldrb	r3, [r3, #0]
   12180:	2b01      	cmp	r3, #1
   12182:	d169      	bne.n	12258 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12184:	f64a 1370 	movw	r3, #43376	; 0xa970
   12188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1218c:	2201      	movs	r2, #1
   1218e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12190:	2001      	movs	r0, #1
   12192:	f001 fed1 	bl	13f38 <approaching>
   12196:	4603      	mov	r3, r0
   12198:	2b00      	cmp	r3, #0
   1219a:	d034      	beq.n	12206 <auto_nav+0x48e>
   1219c:	f64a 137c 	movw	r3, #43388	; 0xa97c
   121a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a4:	2201      	movs	r2, #1
   121a6:	701a      	strb	r2, [r3, #0]
   121a8:	f64a 1370 	movw	r3, #43376	; 0xa970
   121ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b0:	781b      	ldrb	r3, [r3, #0]
   121b2:	3301      	adds	r3, #1
   121b4:	b2da      	uxtb	r2, r3
   121b6:	f64a 1370 	movw	r3, #43376	; 0xa970
   121ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121be:	701a      	strb	r2, [r3, #0]
   121c0:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   121c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c8:	681a      	ldr	r2, [r3, #0]
   121ca:	f64a 1374 	movw	r3, #43380	; 0xa974
   121ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d2:	601a      	str	r2, [r3, #0]
   121d4:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   121d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121dc:	681a      	ldr	r2, [r3, #0]
   121de:	f64a 1378 	movw	r3, #43384	; 0xa978
   121e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e6:	601a      	str	r2, [r3, #0]
   121e8:	f64a 1384 	movw	r3, #43396	; 0xa984
   121ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f0:	2200      	movs	r2, #0
   121f2:	801a      	strh	r2, [r3, #0]
   121f4:	f64a 1388 	movw	r3, #43400	; 0xa988
   121f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121fc:	f04f 0200 	mov.w	r2, #0
   12200:	601a      	str	r2, [r3, #0]
   12202:	f001 be8b 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(1);
   12206:	2001      	movs	r0, #1
   12208:	f001 ffca 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   1220c:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12214:	2200      	movs	r2, #0
   12216:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12218:	f64a 139c 	movw	r3, #43420	; 0xa99c
   1221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12220:	f04f 0200 	mov.w	r2, #0
   12224:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12226:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   1222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222e:	2203      	movs	r2, #3
   12230:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12232:	f240 03bc 	movw	r3, #188	; 0xbc
   12236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1223a:	695a      	ldr	r2, [r3, #20]
   1223c:	f240 03b8 	movw	r3, #184	; 0xb8
   12240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12244:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12246:	f64a 1364 	movw	r3, #43364	; 0xa964
   1224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224e:	f04f 0200 	mov.w	r2, #0
   12252:	601a      	str	r2, [r3, #0]
          }
          return;
   12254:	f001 be62 	b.w	13f1c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12258:	f64a 1370 	movw	r3, #43376	; 0xa970
   1225c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12260:	781b      	ldrb	r3, [r3, #0]
   12262:	2b02      	cmp	r3, #2
   12264:	d169      	bne.n	1233a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12266:	f64a 1370 	movw	r3, #43376	; 0xa970
   1226a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226e:	2202      	movs	r2, #2
   12270:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12272:	2004      	movs	r0, #4
   12274:	f001 fe60 	bl	13f38 <approaching>
   12278:	4603      	mov	r3, r0
   1227a:	2b00      	cmp	r3, #0
   1227c:	d034      	beq.n	122e8 <auto_nav+0x570>
   1227e:	f64a 137c 	movw	r3, #43388	; 0xa97c
   12282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12286:	2204      	movs	r2, #4
   12288:	701a      	strb	r2, [r3, #0]
   1228a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1228e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	3301      	adds	r3, #1
   12296:	b2da      	uxtb	r2, r3
   12298:	f64a 1370 	movw	r3, #43376	; 0xa970
   1229c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a0:	701a      	strb	r2, [r3, #0]
   122a2:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   122a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122aa:	681a      	ldr	r2, [r3, #0]
   122ac:	f64a 1374 	movw	r3, #43380	; 0xa974
   122b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b4:	601a      	str	r2, [r3, #0]
   122b6:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   122ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122be:	681a      	ldr	r2, [r3, #0]
   122c0:	f64a 1378 	movw	r3, #43384	; 0xa978
   122c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c8:	601a      	str	r2, [r3, #0]
   122ca:	f64a 1384 	movw	r3, #43396	; 0xa984
   122ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d2:	2200      	movs	r2, #0
   122d4:	801a      	strh	r2, [r3, #0]
   122d6:	f64a 1388 	movw	r3, #43400	; 0xa988
   122da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122de:	f04f 0200 	mov.w	r2, #0
   122e2:	601a      	str	r2, [r3, #0]
   122e4:	f001 be1a 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(4);
   122e8:	2004      	movs	r0, #4
   122ea:	f001 ff59 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   122ee:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   122f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f6:	2200      	movs	r2, #0
   122f8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   122fa:	f64a 139c 	movw	r3, #43420	; 0xa99c
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	f04f 0200 	mov.w	r2, #0
   12306:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12308:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   1230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12310:	2203      	movs	r2, #3
   12312:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12314:	f240 03bc 	movw	r3, #188	; 0xbc
   12318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1231e:	f240 03b8 	movw	r3, #184	; 0xb8
   12322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12326:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12328:	f64a 1364 	movw	r3, #43364	; 0xa964
   1232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12330:	f04f 0200 	mov.w	r2, #0
   12334:	601a      	str	r2, [r3, #0]
          }
          return;
   12336:	f001 bdf1 	b.w	13f1c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1233a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1233e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12342:	781b      	ldrb	r3, [r3, #0]
   12344:	2b03      	cmp	r3, #3
   12346:	d106      	bne.n	12356 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12348:	f64a 1370 	movw	r3, #43376	; 0xa970
   1234c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12350:	2203      	movs	r2, #3
   12352:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12354:	e6e0      	b.n	12118 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12356:	f64a 1370 	movw	r3, #43376	; 0xa970
   1235a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1235e:	781b      	ldrb	r3, [r3, #0]
   12360:	2b04      	cmp	r3, #4
   12362:	f041 85db 	bne.w	13f1c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12366:	f64a 1370 	movw	r3, #43376	; 0xa970
   1236a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1236e:	2204      	movs	r2, #4
   12370:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12372:	f64a 1371 	movw	r3, #43377	; 0xa971
   12376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	3301      	adds	r3, #1
   1237e:	b2da      	uxtb	r2, r3
   12380:	f64a 1371 	movw	r3, #43377	; 0xa971
   12384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12388:	701a      	strb	r2, [r3, #0]
   1238a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1238e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12392:	2200      	movs	r2, #0
   12394:	701a      	strb	r2, [r3, #0]
   12396:	f64a 1386 	movw	r3, #43398	; 0xa986
   1239a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1239e:	2200      	movs	r2, #0
   123a0:	801a      	strh	r2, [r3, #0]
   123a2:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   123a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123aa:	681a      	ldr	r2, [r3, #0]
   123ac:	f64a 1374 	movw	r3, #43380	; 0xa974
   123b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b4:	601a      	str	r2, [r3, #0]
   123b6:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   123ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123be:	681a      	ldr	r2, [r3, #0]
   123c0:	f64a 1378 	movw	r3, #43384	; 0xa978
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	601a      	str	r2, [r3, #0]
   123ca:	f64a 1384 	movw	r3, #43396	; 0xa984
   123ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d2:	2200      	movs	r2, #0
   123d4:	801a      	strh	r2, [r3, #0]
   123d6:	f64a 1388 	movw	r3, #43400	; 0xa988
   123da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123de:	f04f 0200 	mov.w	r2, #0
   123e2:	601a      	str	r2, [r3, #0]
   123e4:	f001 bd9a 	b.w	13f1c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   123e8:	f64a 1371 	movw	r3, #43377	; 0xa971
   123ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f0:	781b      	ldrb	r3, [r3, #0]
   123f2:	2b02      	cmp	r3, #2
   123f4:	f040 8392 	bne.w	12b1c <auto_nav+0xda4>
{
	nav_block = 2;
   123f8:	f64a 1371 	movw	r3, #43377	; 0xa971
   123fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12400:	2202      	movs	r2, #2
   12402:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12404:	f24a 6300 	movw	r3, #42496	; 0xa600
   12408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1240c:	781b      	ldrb	r3, [r3, #0]
   1240e:	2b00      	cmp	r3, #0
   12410:	d007      	beq.n	12422 <auto_nav+0x6aa>
   12412:	f24a 6300 	movw	r3, #42496	; 0xa600
   12416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241a:	2200      	movs	r2, #0
   1241c:	701a      	strb	r2, [r3, #0]
   1241e:	2301      	movs	r3, #1
   12420:	e000      	b.n	12424 <auto_nav+0x6ac>
   12422:	2300      	movs	r3, #0
   12424:	2b00      	cmp	r3, #0
   12426:	d034      	beq.n	12492 <auto_nav+0x71a>
   12428:	f64a 1371 	movw	r3, #43377	; 0xa971
   1242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12430:	2203      	movs	r2, #3
   12432:	701a      	strb	r2, [r3, #0]
   12434:	f64a 1370 	movw	r3, #43376	; 0xa970
   12438:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243c:	2200      	movs	r2, #0
   1243e:	701a      	strb	r2, [r3, #0]
   12440:	f64a 1386 	movw	r3, #43398	; 0xa986
   12444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12448:	2200      	movs	r2, #0
   1244a:	801a      	strh	r2, [r3, #0]
   1244c:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12454:	681a      	ldr	r2, [r3, #0]
   12456:	f64a 1374 	movw	r3, #43380	; 0xa974
   1245a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1245e:	601a      	str	r2, [r3, #0]
   12460:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12468:	681a      	ldr	r2, [r3, #0]
   1246a:	f64a 1378 	movw	r3, #43384	; 0xa978
   1246e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12472:	601a      	str	r2, [r3, #0]
   12474:	f64a 1384 	movw	r3, #43396	; 0xa984
   12478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1247c:	2200      	movs	r2, #0
   1247e:	801a      	strh	r2, [r3, #0]
   12480:	f64a 1388 	movw	r3, #43400	; 0xa988
   12484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12488:	f04f 0200 	mov.w	r2, #0
   1248c:	601a      	str	r2, [r3, #0]
   1248e:	f001 bd45 	b.w	13f1c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12492:	f64a 1370 	movw	r3, #43376	; 0xa970
   12496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249a:	781b      	ldrb	r3, [r3, #0]
   1249c:	2b00      	cmp	r3, #0
   1249e:	d134      	bne.n	1250a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   124a0:	f64a 1370 	movw	r3, #43376	; 0xa970
   124a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a8:	2200      	movs	r2, #0
   124aa:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   124ac:	f64a 1370 	movw	r3, #43376	; 0xa970
   124b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b4:	781b      	ldrb	r3, [r3, #0]
   124b6:	3301      	adds	r3, #1
   124b8:	b2da      	uxtb	r2, r3
   124ba:	f64a 1370 	movw	r3, #43376	; 0xa970
   124be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c2:	701a      	strb	r2, [r3, #0]
   124c4:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   124c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124cc:	681a      	ldr	r2, [r3, #0]
   124ce:	f64a 1374 	movw	r3, #43380	; 0xa974
   124d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d6:	601a      	str	r2, [r3, #0]
   124d8:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   124dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e0:	681a      	ldr	r2, [r3, #0]
   124e2:	f64a 1378 	movw	r3, #43384	; 0xa978
   124e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ea:	601a      	str	r2, [r3, #0]
   124ec:	f64a 1384 	movw	r3, #43396	; 0xa984
   124f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f4:	2200      	movs	r2, #0
   124f6:	801a      	strh	r2, [r3, #0]
   124f8:	f64a 1388 	movw	r3, #43400	; 0xa988
   124fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12500:	f04f 0200 	mov.w	r2, #0
   12504:	601a      	str	r2, [r3, #0]
   12506:	f001 bd09 	b.w	13f1c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   1250a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1250e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2b01      	cmp	r3, #1
   12516:	d169      	bne.n	125ec <auto_nav+0x874>
    {
         nav_stage =1;
   12518:	f64a 1370 	movw	r3, #43376	; 0xa970
   1251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12520:	2201      	movs	r2, #1
   12522:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12524:	2006      	movs	r0, #6
   12526:	f001 fd07 	bl	13f38 <approaching>
   1252a:	4603      	mov	r3, r0
   1252c:	2b00      	cmp	r3, #0
   1252e:	d034      	beq.n	1259a <auto_nav+0x822>
   12530:	f64a 137c 	movw	r3, #43388	; 0xa97c
   12534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12538:	2206      	movs	r2, #6
   1253a:	701a      	strb	r2, [r3, #0]
   1253c:	f64a 1370 	movw	r3, #43376	; 0xa970
   12540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12544:	781b      	ldrb	r3, [r3, #0]
   12546:	3301      	adds	r3, #1
   12548:	b2da      	uxtb	r2, r3
   1254a:	f64a 1370 	movw	r3, #43376	; 0xa970
   1254e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12552:	701a      	strb	r2, [r3, #0]
   12554:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255c:	681a      	ldr	r2, [r3, #0]
   1255e:	f64a 1374 	movw	r3, #43380	; 0xa974
   12562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12566:	601a      	str	r2, [r3, #0]
   12568:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   1256c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12570:	681a      	ldr	r2, [r3, #0]
   12572:	f64a 1378 	movw	r3, #43384	; 0xa978
   12576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257a:	601a      	str	r2, [r3, #0]
   1257c:	f64a 1384 	movw	r3, #43396	; 0xa984
   12580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12584:	2200      	movs	r2, #0
   12586:	801a      	strh	r2, [r3, #0]
   12588:	f64a 1388 	movw	r3, #43400	; 0xa988
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	f04f 0200 	mov.w	r2, #0
   12594:	601a      	str	r2, [r3, #0]
   12596:	f001 bcc1 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(6);
   1259a:	2006      	movs	r0, #6
   1259c:	f001 fe00 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   125a0:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   125a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a8:	2200      	movs	r2, #0
   125aa:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   125ac:	f64a 139c 	movw	r3, #43420	; 0xa99c
   125b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b4:	f04f 0200 	mov.w	r2, #0
   125b8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   125ba:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   125be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c2:	2203      	movs	r2, #3
   125c4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   125c6:	f240 03bc 	movw	r3, #188	; 0xbc
   125ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   125d0:	f240 03b8 	movw	r3, #184	; 0xb8
   125d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   125da:	f64a 1364 	movw	r3, #43364	; 0xa964
   125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e2:	f04f 0200 	mov.w	r2, #0
   125e6:	601a      	str	r2, [r3, #0]
          }
          return;
   125e8:	f001 bc98 	b.w	13f1c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   125ec:	f64a 1370 	movw	r3, #43376	; 0xa970
   125f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f4:	781b      	ldrb	r3, [r3, #0]
   125f6:	2b02      	cmp	r3, #2
   125f8:	d169      	bne.n	126ce <auto_nav+0x956>
     {
         nav_stage =2; 
   125fa:	f64a 1370 	movw	r3, #43376	; 0xa970
   125fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12602:	2202      	movs	r2, #2
   12604:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12606:	2001      	movs	r0, #1
   12608:	f001 fc96 	bl	13f38 <approaching>
   1260c:	4603      	mov	r3, r0
   1260e:	2b00      	cmp	r3, #0
   12610:	d034      	beq.n	1267c <auto_nav+0x904>
   12612:	f64a 137c 	movw	r3, #43388	; 0xa97c
   12616:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1261a:	2201      	movs	r2, #1
   1261c:	701a      	strb	r2, [r3, #0]
   1261e:	f64a 1370 	movw	r3, #43376	; 0xa970
   12622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12626:	781b      	ldrb	r3, [r3, #0]
   12628:	3301      	adds	r3, #1
   1262a:	b2da      	uxtb	r2, r3
   1262c:	f64a 1370 	movw	r3, #43376	; 0xa970
   12630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12634:	701a      	strb	r2, [r3, #0]
   12636:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263e:	681a      	ldr	r2, [r3, #0]
   12640:	f64a 1374 	movw	r3, #43380	; 0xa974
   12644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12648:	601a      	str	r2, [r3, #0]
   1264a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   1264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12652:	681a      	ldr	r2, [r3, #0]
   12654:	f64a 1378 	movw	r3, #43384	; 0xa978
   12658:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1265c:	601a      	str	r2, [r3, #0]
   1265e:	f64a 1384 	movw	r3, #43396	; 0xa984
   12662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12666:	2200      	movs	r2, #0
   12668:	801a      	strh	r2, [r3, #0]
   1266a:	f64a 1388 	movw	r3, #43400	; 0xa988
   1266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12672:	f04f 0200 	mov.w	r2, #0
   12676:	601a      	str	r2, [r3, #0]
   12678:	f001 bc50 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(1);
   1267c:	2001      	movs	r0, #1
   1267e:	f001 fd8f 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   12682:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1268a:	2200      	movs	r2, #0
   1268c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1268e:	f64a 139c 	movw	r3, #43420	; 0xa99c
   12692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12696:	f04f 0200 	mov.w	r2, #0
   1269a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1269c:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a4:	2203      	movs	r2, #3
   126a6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   126a8:	f240 03bc 	movw	r3, #188	; 0xbc
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	695a      	ldr	r2, [r3, #20]
   126b2:	f240 03b8 	movw	r3, #184	; 0xb8
   126b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ba:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   126bc:	f64a 1364 	movw	r3, #43364	; 0xa964
   126c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c4:	f04f 0200 	mov.w	r2, #0
   126c8:	601a      	str	r2, [r3, #0]
          }
          return;
   126ca:	f001 bc27 	b.w	13f1c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   126ce:	f64a 1370 	movw	r3, #43376	; 0xa970
   126d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d6:	781b      	ldrb	r3, [r3, #0]
   126d8:	2b03      	cmp	r3, #3
   126da:	d16f      	bne.n	127bc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   126dc:	f64a 1370 	movw	r3, #43376	; 0xa970
   126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e4:	2203      	movs	r2, #3
   126e6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   126e8:	2002      	movs	r0, #2
   126ea:	f001 fc25 	bl	13f38 <approaching>
   126ee:	4603      	mov	r3, r0
   126f0:	2b00      	cmp	r3, #0
   126f2:	d034      	beq.n	1275e <auto_nav+0x9e6>
   126f4:	f64a 137c 	movw	r3, #43388	; 0xa97c
   126f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fc:	2202      	movs	r2, #2
   126fe:	701a      	strb	r2, [r3, #0]
   12700:	f64a 1370 	movw	r3, #43376	; 0xa970
   12704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12708:	781b      	ldrb	r3, [r3, #0]
   1270a:	3301      	adds	r3, #1
   1270c:	b2da      	uxtb	r2, r3
   1270e:	f64a 1370 	movw	r3, #43376	; 0xa970
   12712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12716:	701a      	strb	r2, [r3, #0]
   12718:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1271c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12720:	681a      	ldr	r2, [r3, #0]
   12722:	f64a 1374 	movw	r3, #43380	; 0xa974
   12726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272a:	601a      	str	r2, [r3, #0]
   1272c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12734:	681a      	ldr	r2, [r3, #0]
   12736:	f64a 1378 	movw	r3, #43384	; 0xa978
   1273a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273e:	601a      	str	r2, [r3, #0]
   12740:	f64a 1384 	movw	r3, #43396	; 0xa984
   12744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12748:	2200      	movs	r2, #0
   1274a:	801a      	strh	r2, [r3, #0]
   1274c:	f64a 1388 	movw	r3, #43400	; 0xa988
   12750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12754:	f04f 0200 	mov.w	r2, #0
   12758:	601a      	str	r2, [r3, #0]
   1275a:	f001 bbdf 	b.w	13f1c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1275e:	f64a 137c 	movw	r3, #43388	; 0xa97c
   12762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	4618      	mov	r0, r3
   1276a:	2102      	movs	r1, #2
   1276c:	f001 fd3a 	bl	141e4 <route_to>
            auto_pitch = FALSE;
   12770:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12778:	2200      	movs	r2, #0
   1277a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1277c:	f64a 139c 	movw	r3, #43420	; 0xa99c
   12780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12784:	f04f 0200 	mov.w	r2, #0
   12788:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1278a:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   1278e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12792:	2203      	movs	r2, #3
   12794:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12796:	f240 03bc 	movw	r3, #188	; 0xbc
   1279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1279e:	6a1a      	ldr	r2, [r3, #32]
   127a0:	f240 03b8 	movw	r3, #184	; 0xb8
   127a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   127aa:	f64a 1364 	movw	r3, #43364	; 0xa964
   127ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b2:	f04f 0200 	mov.w	r2, #0
   127b6:	601a      	str	r2, [r3, #0]
          }
          return;
   127b8:	f001 bbb0 	b.w	13f1c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   127bc:	f64a 1370 	movw	r3, #43376	; 0xa970
   127c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c4:	781b      	ldrb	r3, [r3, #0]
   127c6:	2b04      	cmp	r3, #4
   127c8:	d169      	bne.n	1289e <auto_nav+0xb26>
       {
          nav_stage = 4;
   127ca:	f64a 1370 	movw	r3, #43376	; 0xa970
   127ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d2:	2204      	movs	r2, #4
   127d4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   127d6:	2003      	movs	r0, #3
   127d8:	f001 fbae 	bl	13f38 <approaching>
   127dc:	4603      	mov	r3, r0
   127de:	2b00      	cmp	r3, #0
   127e0:	d034      	beq.n	1284c <auto_nav+0xad4>
   127e2:	f64a 137c 	movw	r3, #43388	; 0xa97c
   127e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ea:	2203      	movs	r2, #3
   127ec:	701a      	strb	r2, [r3, #0]
   127ee:	f64a 1370 	movw	r3, #43376	; 0xa970
   127f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f6:	781b      	ldrb	r3, [r3, #0]
   127f8:	3301      	adds	r3, #1
   127fa:	b2da      	uxtb	r2, r3
   127fc:	f64a 1370 	movw	r3, #43376	; 0xa970
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	701a      	strb	r2, [r3, #0]
   12806:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1280e:	681a      	ldr	r2, [r3, #0]
   12810:	f64a 1374 	movw	r3, #43380	; 0xa974
   12814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12818:	601a      	str	r2, [r3, #0]
   1281a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   1281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12822:	681a      	ldr	r2, [r3, #0]
   12824:	f64a 1378 	movw	r3, #43384	; 0xa978
   12828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282c:	601a      	str	r2, [r3, #0]
   1282e:	f64a 1384 	movw	r3, #43396	; 0xa984
   12832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12836:	2200      	movs	r2, #0
   12838:	801a      	strh	r2, [r3, #0]
   1283a:	f64a 1388 	movw	r3, #43400	; 0xa988
   1283e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12842:	f04f 0200 	mov.w	r2, #0
   12846:	601a      	str	r2, [r3, #0]
   12848:	f001 bb68 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(3);
   1284c:	2003      	movs	r0, #3
   1284e:	f001 fca7 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   12852:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1285a:	2200      	movs	r2, #0
   1285c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1285e:	f64a 139c 	movw	r3, #43420	; 0xa99c
   12862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12866:	f04f 0200 	mov.w	r2, #0
   1286a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1286c:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   12870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12874:	2203      	movs	r2, #3
   12876:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12878:	f240 03bc 	movw	r3, #188	; 0xbc
   1287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12882:	f240 03b8 	movw	r3, #184	; 0xb8
   12886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1288c:	f64a 1364 	movw	r3, #43364	; 0xa964
   12890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12894:	f04f 0200 	mov.w	r2, #0
   12898:	601a      	str	r2, [r3, #0]
          }
          return;
   1289a:	f001 bb3f 	b.w	13f1c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1289e:	f64a 1370 	movw	r3, #43376	; 0xa970
   128a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	2b05      	cmp	r3, #5
   128aa:	d169      	bne.n	12980 <auto_nav+0xc08>
       {
          nav_stage =5;
   128ac:	f64a 1370 	movw	r3, #43376	; 0xa970
   128b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b4:	2205      	movs	r2, #5
   128b6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   128b8:	2004      	movs	r0, #4
   128ba:	f001 fb3d 	bl	13f38 <approaching>
   128be:	4603      	mov	r3, r0
   128c0:	2b00      	cmp	r3, #0
   128c2:	d034      	beq.n	1292e <auto_nav+0xbb6>
   128c4:	f64a 137c 	movw	r3, #43388	; 0xa97c
   128c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128cc:	2204      	movs	r2, #4
   128ce:	701a      	strb	r2, [r3, #0]
   128d0:	f64a 1370 	movw	r3, #43376	; 0xa970
   128d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d8:	781b      	ldrb	r3, [r3, #0]
   128da:	3301      	adds	r3, #1
   128dc:	b2da      	uxtb	r2, r3
   128de:	f64a 1370 	movw	r3, #43376	; 0xa970
   128e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   128ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f0:	681a      	ldr	r2, [r3, #0]
   128f2:	f64a 1374 	movw	r3, #43380	; 0xa974
   128f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fa:	601a      	str	r2, [r3, #0]
   128fc:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12904:	681a      	ldr	r2, [r3, #0]
   12906:	f64a 1378 	movw	r3, #43384	; 0xa978
   1290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290e:	601a      	str	r2, [r3, #0]
   12910:	f64a 1384 	movw	r3, #43396	; 0xa984
   12914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12918:	2200      	movs	r2, #0
   1291a:	801a      	strh	r2, [r3, #0]
   1291c:	f64a 1388 	movw	r3, #43400	; 0xa988
   12920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12924:	f04f 0200 	mov.w	r2, #0
   12928:	601a      	str	r2, [r3, #0]
   1292a:	f001 baf7 	b.w	13f1c <auto_nav+0x21a4>
            fly_to(4);
   1292e:	2004      	movs	r0, #4
   12930:	f001 fc36 	bl	141a0 <fly_to>
            auto_pitch = FALSE;
   12934:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1293c:	2200      	movs	r2, #0
   1293e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12940:	f64a 139c 	movw	r3, #43420	; 0xa99c
   12944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12948:	f04f 0200 	mov.w	r2, #0
   1294c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1294e:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   12952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12956:	2203      	movs	r2, #3
   12958:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1295a:	f240 03bc 	movw	r3, #188	; 0xbc
   1295e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12964:	f240 03b8 	movw	r3, #184	; 0xb8
   12968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1296e:	f64a 1364 	movw	r3, #43364	; 0xa964
   12972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12976:	f04f 0200 	mov.w	r2, #0
   1297a:	601a      	str	r2, [r3, #0]
          }
          return;
   1297c:	f001 bace 	b.w	13f1c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12980:	f64a 1370 	movw	r3, #43376	; 0xa970
   12984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12988:	781b      	ldrb	r3, [r3, #0]
   1298a:	2b06      	cmp	r3, #6
   1298c:	d16f      	bne.n	12a6e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1298e:	f64a 1370 	movw	r3, #43376	; 0xa970
   12992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12996:	2206      	movs	r2, #6
   12998:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1299a:	2005      	movs	r0, #5
   1299c:	f001 facc 	bl	13f38 <approaching>
   129a0:	4603      	mov	r3, r0
   129a2:	2b00      	cmp	r3, #0
   129a4:	d034      	beq.n	12a10 <auto_nav+0xc98>
   129a6:	f64a 137c 	movw	r3, #43388	; 0xa97c
   129aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ae:	2205      	movs	r2, #5
   129b0:	701a      	strb	r2, [r3, #0]
   129b2:	f64a 1370 	movw	r3, #43376	; 0xa970
   129b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ba:	781b      	ldrb	r3, [r3, #0]
   129bc:	3301      	adds	r3, #1
   129be:	b2da      	uxtb	r2, r3
   129c0:	f64a 1370 	movw	r3, #43376	; 0xa970
   129c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c8:	701a      	strb	r2, [r3, #0]
   129ca:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   129ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d2:	681a      	ldr	r2, [r3, #0]
   129d4:	f64a 1374 	movw	r3, #43380	; 0xa974
   129d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129dc:	601a      	str	r2, [r3, #0]
   129de:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   129e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e6:	681a      	ldr	r2, [r3, #0]
   129e8:	f64a 1378 	movw	r3, #43384	; 0xa978
   129ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f0:	601a      	str	r2, [r3, #0]
   129f2:	f64a 1384 	movw	r3, #43396	; 0xa984
   129f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fa:	2200      	movs	r2, #0
   129fc:	801a      	strh	r2, [r3, #0]
   129fe:	f64a 1388 	movw	r3, #43400	; 0xa988
   12a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a06:	f04f 0200 	mov.w	r2, #0
   12a0a:	601a      	str	r2, [r3, #0]
   12a0c:	f001 ba86 	b.w	13f1c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12a10:	f64a 137c 	movw	r3, #43388	; 0xa97c
   12a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	4618      	mov	r0, r3
   12a1c:	2105      	movs	r1, #5
   12a1e:	f001 fbe1 	bl	141e4 <route_to>
            auto_pitch = FALSE;
   12a22:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   12a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2a:	2200      	movs	r2, #0
   12a2c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a2e:	f64a 139c 	movw	r3, #43420	; 0xa99c
   12a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a36:	f04f 0200 	mov.w	r2, #0
   12a3a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a3c:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	2203      	movs	r2, #3
   12a46:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12a48:	f240 03bc 	movw	r3, #188	; 0xbc
   12a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12a52:	f240 03b8 	movw	r3, #184	; 0xb8
   12a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a5a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a5c:	f64a 1364 	movw	r3, #43364	; 0xa964
   12a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a64:	f04f 0200 	mov.w	r2, #0
   12a68:	601a      	str	r2, [r3, #0]
          }
          return;
   12a6a:	f001 ba57 	b.w	13f1c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12a6e:	f64a 1370 	movw	r3, #43376	; 0xa970
   12a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	2b07      	cmp	r3, #7
   12a7a:	d106      	bne.n	12a8a <auto_nav+0xd12>
       {
	   nav_stage =7;
   12a7c:	f64a 1370 	movw	r3, #43376	; 0xa970
   12a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a84:	2207      	movs	r2, #7
   12a86:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12a88:	e50a      	b.n	124a0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12a8a:	f64a 1370 	movw	r3, #43376	; 0xa970
   12a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a92:	781b      	ldrb	r3, [r3, #0]
   12a94:	2b08      	cmp	r3, #8
   12a96:	f041 8241 	bne.w	13f1c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12a9a:	f64a 1370 	movw	r3, #43376	; 0xa970
   12a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa2:	2208      	movs	r2, #8
   12aa4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12aa6:	f64a 1371 	movw	r3, #43377	; 0xa971
   12aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aae:	781b      	ldrb	r3, [r3, #0]
   12ab0:	3301      	adds	r3, #1
   12ab2:	b2da      	uxtb	r2, r3
   12ab4:	f64a 1371 	movw	r3, #43377	; 0xa971
   12ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12abc:	701a      	strb	r2, [r3, #0]
   12abe:	f64a 1370 	movw	r3, #43376	; 0xa970
   12ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac6:	2200      	movs	r2, #0
   12ac8:	701a      	strb	r2, [r3, #0]
   12aca:	f64a 1386 	movw	r3, #43398	; 0xa986
   12ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad2:	2200      	movs	r2, #0
   12ad4:	801a      	strh	r2, [r3, #0]
   12ad6:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ade:	681a      	ldr	r2, [r3, #0]
   12ae0:	f64a 1374 	movw	r3, #43380	; 0xa974
   12ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae8:	601a      	str	r2, [r3, #0]
   12aea:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af2:	681a      	ldr	r2, [r3, #0]
   12af4:	f64a 1378 	movw	r3, #43384	; 0xa978
   12af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afc:	601a      	str	r2, [r3, #0]
   12afe:	f64a 1384 	movw	r3, #43396	; 0xa984
   12b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b06:	2200      	movs	r2, #0
   12b08:	801a      	strh	r2, [r3, #0]
   12b0a:	f64a 1388 	movw	r3, #43400	; 0xa988
   12b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b12:	f04f 0200 	mov.w	r2, #0
   12b16:	601a      	str	r2, [r3, #0]
   12b18:	f001 ba00 	b.w	13f1c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12b1c:	f64a 1371 	movw	r3, #43377	; 0xa971
   12b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b24:	781b      	ldrb	r3, [r3, #0]
   12b26:	2b03      	cmp	r3, #3
   12b28:	f040 8388 	bne.w	1323c <auto_nav+0x14c4>
{
    nav_block = 3;
   12b2c:	f64a 1371 	movw	r3, #43377	; 0xa971
   12b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b34:	2203      	movs	r2, #3
   12b36:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12b38:	f24a 6300 	movw	r3, #42496	; 0xa600
   12b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b40:	781b      	ldrb	r3, [r3, #0]
   12b42:	2b00      	cmp	r3, #0
   12b44:	d007      	beq.n	12b56 <auto_nav+0xdde>
   12b46:	f24a 6300 	movw	r3, #42496	; 0xa600
   12b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4e:	2200      	movs	r2, #0
   12b50:	701a      	strb	r2, [r3, #0]
   12b52:	2301      	movs	r3, #1
   12b54:	e000      	b.n	12b58 <auto_nav+0xde0>
   12b56:	2300      	movs	r3, #0
   12b58:	2b00      	cmp	r3, #0
   12b5a:	d034      	beq.n	12bc6 <auto_nav+0xe4e>
   12b5c:	f64a 1371 	movw	r3, #43377	; 0xa971
   12b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b64:	2204      	movs	r2, #4
   12b66:	701a      	strb	r2, [r3, #0]
   12b68:	f64a 1370 	movw	r3, #43376	; 0xa970
   12b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b70:	2200      	movs	r2, #0
   12b72:	701a      	strb	r2, [r3, #0]
   12b74:	f64a 1386 	movw	r3, #43398	; 0xa986
   12b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7c:	2200      	movs	r2, #0
   12b7e:	801a      	strh	r2, [r3, #0]
   12b80:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b88:	681a      	ldr	r2, [r3, #0]
   12b8a:	f64a 1374 	movw	r3, #43380	; 0xa974
   12b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b92:	601a      	str	r2, [r3, #0]
   12b94:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b9c:	681a      	ldr	r2, [r3, #0]
   12b9e:	f64a 1378 	movw	r3, #43384	; 0xa978
   12ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba6:	601a      	str	r2, [r3, #0]
   12ba8:	f64a 1384 	movw	r3, #43396	; 0xa984
   12bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb0:	2200      	movs	r2, #0
   12bb2:	801a      	strh	r2, [r3, #0]
   12bb4:	f64a 1388 	movw	r3, #43400	; 0xa988
   12bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbc:	f04f 0200 	mov.w	r2, #0
   12bc0:	601a      	str	r2, [r3, #0]
   12bc2:	f001 b9ab 	b.w	13f1c <auto_nav+0x21a4>
    if(nav_stage == 0)
   12bc6:	f64a 1370 	movw	r3, #43376	; 0xa970
   12bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bce:	781b      	ldrb	r3, [r3, #0]
   12bd0:	2b00      	cmp	r3, #0
   12bd2:	f040 82ea 	bne.w	131aa <auto_nav+0x1432>
    {
        nav_stage = 0;
   12bd6:	f64a 1370 	movw	r3, #43376	; 0xa970
   12bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bde:	2200      	movs	r2, #0
   12be0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12be2:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   12be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bea:	781b      	ldrb	r3, [r3, #0]
   12bec:	2b02      	cmp	r3, #2
   12bee:	f040 81a5 	bne.w	12f3c <auto_nav+0x11c4>
   12bf2:	f24a 7320 	movw	r3, #42784	; 0xa720
   12bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bfa:	88db      	ldrh	r3, [r3, #6]
   12bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
   12bfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c02:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12c06:	dc04      	bgt.n	12c12 <auto_nav+0xe9a>
   12c08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c0c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12c10:	da7e      	bge.n	12d10 <auto_nav+0xf98>
   12c12:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c1a:	681b      	ldr	r3, [r3, #0]
   12c1c:	4618      	mov	r0, r3
   12c1e:	f004 faeb 	bl	171f8 <__aeabi_f2d>
   12c22:	4604      	mov	r4, r0
   12c24:	460d      	mov	r5, r1
   12c26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12c2a:	4618      	mov	r0, r3
   12c2c:	f004 ff24 	bl	17a78 <__aeabi_i2f>
   12c30:	4603      	mov	r3, r0
   12c32:	4618      	mov	r0, r3
   12c34:	f04f 0100 	mov.w	r1, #0
   12c38:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12c3c:	f005 f824 	bl	17c88 <__aeabi_fdiv>
   12c40:	4603      	mov	r3, r0
   12c42:	4618      	mov	r0, r3
   12c44:	f004 fad8 	bl	171f8 <__aeabi_f2d>
   12c48:	4602      	mov	r2, r0
   12c4a:	460b      	mov	r3, r1
   12c4c:	4610      	mov	r0, r2
   12c4e:	4619      	mov	r1, r3
   12c50:	f04f 0200 	mov.w	r2, #0
   12c54:	f04f 0300 	mov.w	r3, #0
   12c58:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12c5c:	f004 fb20 	bl	172a0 <__aeabi_dmul>
   12c60:	4602      	mov	r2, r0
   12c62:	460b      	mov	r3, r1
   12c64:	4610      	mov	r0, r2
   12c66:	4619      	mov	r1, r3
   12c68:	f04f 0200 	mov.w	r2, #0
   12c6c:	f04f 0300 	mov.w	r3, #0
   12c70:	f004 f964 	bl	16f3c <__adddf3>
   12c74:	4602      	mov	r2, r0
   12c76:	460b      	mov	r3, r1
   12c78:	4620      	mov	r0, r4
   12c7a:	4629      	mov	r1, r5
   12c7c:	f004 f95e 	bl	16f3c <__adddf3>
   12c80:	4602      	mov	r2, r0
   12c82:	460b      	mov	r3, r1
   12c84:	4610      	mov	r0, r2
   12c86:	4619      	mov	r1, r3
   12c88:	f004 fdec 	bl	17864 <__aeabi_d2f>
   12c8c:	4602      	mov	r2, r0
   12c8e:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c96:	601a      	str	r2, [r3, #0]
   12c98:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca0:	681b      	ldr	r3, [r3, #0]
   12ca2:	4618      	mov	r0, r3
   12ca4:	f04f 0100 	mov.w	r1, #0
   12ca8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12cac:	f005 f8e0 	bl	17e70 <__aeabi_fcmple>
   12cb0:	4603      	mov	r3, r0
   12cb2:	2b00      	cmp	r3, #0
   12cb4:	d005      	beq.n	12cc2 <auto_nav+0xf4a>
   12cb6:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cbe:	681a      	ldr	r2, [r3, #0]
   12cc0:	e003      	b.n	12cca <auto_nav+0xf52>
   12cc2:	f04f 0200 	mov.w	r2, #0
   12cc6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12cca:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd2:	601a      	str	r2, [r3, #0]
   12cd4:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cdc:	681b      	ldr	r3, [r3, #0]
   12cde:	4618      	mov	r0, r3
   12ce0:	f04f 0100 	mov.w	r1, #0
   12ce4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12ce8:	f005 f8cc 	bl	17e84 <__aeabi_fcmpge>
   12cec:	4603      	mov	r3, r0
   12cee:	2b00      	cmp	r3, #0
   12cf0:	d005      	beq.n	12cfe <auto_nav+0xf86>
   12cf2:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cfa:	681a      	ldr	r2, [r3, #0]
   12cfc:	e003      	b.n	12d06 <auto_nav+0xf8e>
   12cfe:	f04f 0200 	mov.w	r2, #0
   12d02:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12d06:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d0e:	601a      	str	r2, [r3, #0]
   12d10:	f24a 7320 	movw	r3, #42784	; 0xa720
   12d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d18:	889b      	ldrh	r3, [r3, #4]
   12d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
   12d1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d20:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12d24:	dc04      	bgt.n	12d30 <auto_nav+0xfb8>
   12d26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d2a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12d2e:	da7e      	bge.n	12e2e <auto_nav+0x10b6>
   12d30:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d38:	681b      	ldr	r3, [r3, #0]
   12d3a:	4618      	mov	r0, r3
   12d3c:	f004 fa5c 	bl	171f8 <__aeabi_f2d>
   12d40:	4604      	mov	r4, r0
   12d42:	460d      	mov	r5, r1
   12d44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12d48:	4618      	mov	r0, r3
   12d4a:	f004 fe95 	bl	17a78 <__aeabi_i2f>
   12d4e:	4603      	mov	r3, r0
   12d50:	4618      	mov	r0, r3
   12d52:	f04f 0100 	mov.w	r1, #0
   12d56:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12d5a:	f004 ff95 	bl	17c88 <__aeabi_fdiv>
   12d5e:	4603      	mov	r3, r0
   12d60:	4618      	mov	r0, r3
   12d62:	f004 fa49 	bl	171f8 <__aeabi_f2d>
   12d66:	4602      	mov	r2, r0
   12d68:	460b      	mov	r3, r1
   12d6a:	4610      	mov	r0, r2
   12d6c:	4619      	mov	r1, r3
   12d6e:	f04f 0200 	mov.w	r2, #0
   12d72:	f04f 0300 	mov.w	r3, #0
   12d76:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12d7a:	f004 fa91 	bl	172a0 <__aeabi_dmul>
   12d7e:	4602      	mov	r2, r0
   12d80:	460b      	mov	r3, r1
   12d82:	4610      	mov	r0, r2
   12d84:	4619      	mov	r1, r3
   12d86:	f04f 0200 	mov.w	r2, #0
   12d8a:	f04f 0300 	mov.w	r3, #0
   12d8e:	f004 f8d5 	bl	16f3c <__adddf3>
   12d92:	4602      	mov	r2, r0
   12d94:	460b      	mov	r3, r1
   12d96:	4620      	mov	r0, r4
   12d98:	4629      	mov	r1, r5
   12d9a:	f004 f8cf 	bl	16f3c <__adddf3>
   12d9e:	4602      	mov	r2, r0
   12da0:	460b      	mov	r3, r1
   12da2:	4610      	mov	r0, r2
   12da4:	4619      	mov	r1, r3
   12da6:	f004 fd5d 	bl	17864 <__aeabi_d2f>
   12daa:	4602      	mov	r2, r0
   12dac:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db4:	601a      	str	r2, [r3, #0]
   12db6:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dbe:	681b      	ldr	r3, [r3, #0]
   12dc0:	4618      	mov	r0, r3
   12dc2:	f04f 0100 	mov.w	r1, #0
   12dc6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12dca:	f005 f851 	bl	17e70 <__aeabi_fcmple>
   12dce:	4603      	mov	r3, r0
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d005      	beq.n	12de0 <auto_nav+0x1068>
   12dd4:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ddc:	681a      	ldr	r2, [r3, #0]
   12dde:	e003      	b.n	12de8 <auto_nav+0x1070>
   12de0:	f04f 0200 	mov.w	r2, #0
   12de4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12de8:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df0:	601a      	str	r2, [r3, #0]
   12df2:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dfa:	681b      	ldr	r3, [r3, #0]
   12dfc:	4618      	mov	r0, r3
   12dfe:	f04f 0100 	mov.w	r1, #0
   12e02:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12e06:	f005 f83d 	bl	17e84 <__aeabi_fcmpge>
   12e0a:	4603      	mov	r3, r0
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d005      	beq.n	12e1c <auto_nav+0x10a4>
   12e10:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e18:	681a      	ldr	r2, [r3, #0]
   12e1a:	e003      	b.n	12e24 <auto_nav+0x10ac>
   12e1c:	f04f 0200 	mov.w	r2, #0
   12e20:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12e24:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e2c:	601a      	str	r2, [r3, #0]
   12e2e:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   12e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e36:	2203      	movs	r2, #3
   12e38:	701a      	strb	r2, [r3, #0]
   12e3a:	f24a 7320 	movw	r3, #42784	; 0xa720
   12e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e42:	885b      	ldrh	r3, [r3, #2]
   12e44:	847b      	strh	r3, [r7, #34]	; 0x22
   12e46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e4a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12e4e:	dc04      	bgt.n	12e5a <auto_nav+0x10e2>
   12e50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e54:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12e58:	da70      	bge.n	12f3c <auto_nav+0x11c4>
   12e5a:	f240 03b8 	movw	r3, #184	; 0xb8
   12e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e62:	681b      	ldr	r3, [r3, #0]
   12e64:	4618      	mov	r0, r3
   12e66:	f004 f9c7 	bl	171f8 <__aeabi_f2d>
   12e6a:	4604      	mov	r4, r0
   12e6c:	460d      	mov	r5, r1
   12e6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   12e72:	4618      	mov	r0, r3
   12e74:	f004 fe00 	bl	17a78 <__aeabi_i2f>
   12e78:	4603      	mov	r3, r0
   12e7a:	4618      	mov	r0, r3
   12e7c:	f04f 0100 	mov.w	r1, #0
   12e80:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12e84:	f004 ff00 	bl	17c88 <__aeabi_fdiv>
   12e88:	4603      	mov	r3, r0
   12e8a:	4618      	mov	r0, r3
   12e8c:	f004 f9b4 	bl	171f8 <__aeabi_f2d>
   12e90:	4602      	mov	r2, r0
   12e92:	460b      	mov	r3, r1
   12e94:	f04f 0000 	mov.w	r0, #0
   12e98:	f04f 0100 	mov.w	r1, #0
   12e9c:	f004 f84c 	bl	16f38 <__aeabi_dsub>
   12ea0:	4602      	mov	r2, r0
   12ea2:	460b      	mov	r3, r1
   12ea4:	4620      	mov	r0, r4
   12ea6:	4629      	mov	r1, r5
   12ea8:	f004 f848 	bl	16f3c <__adddf3>
   12eac:	4602      	mov	r2, r0
   12eae:	460b      	mov	r3, r1
   12eb0:	4610      	mov	r0, r2
   12eb2:	4619      	mov	r1, r3
   12eb4:	f004 fcd6 	bl	17864 <__aeabi_d2f>
   12eb8:	4602      	mov	r2, r0
   12eba:	f240 03b8 	movw	r3, #184	; 0xb8
   12ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec2:	601a      	str	r2, [r3, #0]
   12ec4:	f240 03b8 	movw	r3, #184	; 0xb8
   12ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ecc:	681b      	ldr	r3, [r3, #0]
   12ece:	4618      	mov	r0, r3
   12ed0:	f04f 0100 	mov.w	r1, #0
   12ed4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   12ed8:	f004 ffd4 	bl	17e84 <__aeabi_fcmpge>
   12edc:	4603      	mov	r3, r0
   12ede:	2b00      	cmp	r3, #0
   12ee0:	d005      	beq.n	12eee <auto_nav+0x1176>
   12ee2:	f240 03b8 	movw	r3, #184	; 0xb8
   12ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eea:	681a      	ldr	r2, [r3, #0]
   12eec:	e003      	b.n	12ef6 <auto_nav+0x117e>
   12eee:	f04f 0200 	mov.w	r2, #0
   12ef2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   12ef6:	f240 03b8 	movw	r3, #184	; 0xb8
   12efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efe:	601a      	str	r2, [r3, #0]
   12f00:	f240 03b8 	movw	r3, #184	; 0xb8
   12f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f08:	681b      	ldr	r3, [r3, #0]
   12f0a:	4618      	mov	r0, r3
   12f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12f10:	f2c4 3189 	movt	r1, #17289	; 0x4389
   12f14:	f004 ffac 	bl	17e70 <__aeabi_fcmple>
   12f18:	4603      	mov	r3, r0
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d005      	beq.n	12f2a <auto_nav+0x11b2>
   12f1e:	f240 03b8 	movw	r3, #184	; 0xb8
   12f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f26:	681a      	ldr	r2, [r3, #0]
   12f28:	e003      	b.n	12f32 <auto_nav+0x11ba>
   12f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12f2e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   12f32:	f240 03b8 	movw	r3, #184	; 0xb8
   12f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f3a:	601a      	str	r2, [r3, #0]
   12f3c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   12f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f44:	681a      	ldr	r2, [r3, #0]
   12f46:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   12f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f4e:	681b      	ldr	r3, [r3, #0]
   12f50:	4610      	mov	r0, r2
   12f52:	4619      	mov	r1, r3
   12f54:	f004 fcda 	bl	1790c <__aeabi_fsub>
   12f58:	4603      	mov	r3, r0
   12f5a:	4618      	mov	r0, r3
   12f5c:	f004 f94c 	bl	171f8 <__aeabi_f2d>
   12f60:	4604      	mov	r4, r0
   12f62:	460d      	mov	r5, r1
   12f64:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   12f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6c:	681a      	ldr	r2, [r3, #0]
   12f6e:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   12f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	4610      	mov	r0, r2
   12f7a:	4619      	mov	r1, r3
   12f7c:	f004 fcc6 	bl	1790c <__aeabi_fsub>
   12f80:	4603      	mov	r3, r0
   12f82:	4618      	mov	r0, r3
   12f84:	f004 f938 	bl	171f8 <__aeabi_f2d>
   12f88:	4602      	mov	r2, r0
   12f8a:	460b      	mov	r3, r1
   12f8c:	4620      	mov	r0, r4
   12f8e:	4629      	mov	r1, r5
   12f90:	f002 fa12 	bl	153b8 <pp_atan2>
   12f94:	4602      	mov	r2, r0
   12f96:	460b      	mov	r3, r1
   12f98:	4610      	mov	r0, r2
   12f9a:	4619      	mov	r1, r3
   12f9c:	f004 fc62 	bl	17864 <__aeabi_d2f>
   12fa0:	4603      	mov	r3, r0
   12fa2:	61fb      	str	r3, [r7, #28]
   12fa4:	69f8      	ldr	r0, [r7, #28]
   12fa6:	f004 f927 	bl	171f8 <__aeabi_f2d>
   12faa:	4604      	mov	r4, r0
   12fac:	460d      	mov	r5, r1
   12fae:	f64a 4304 	movw	r3, #44036	; 0xac04
   12fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb6:	681b      	ldr	r3, [r3, #0]
   12fb8:	4618      	mov	r0, r3
   12fba:	f04f 0100 	mov.w	r1, #0
   12fbe:	f2cc 2148 	movt	r1, #49736	; 0xc248
   12fc2:	f004 fdad 	bl	17b20 <__aeabi_fmul>
   12fc6:	4603      	mov	r3, r0
   12fc8:	4618      	mov	r0, r3
   12fca:	f004 f915 	bl	171f8 <__aeabi_f2d>
   12fce:	4602      	mov	r2, r0
   12fd0:	460b      	mov	r3, r1
   12fd2:	f04f 0000 	mov.w	r0, #0
   12fd6:	f04f 0100 	mov.w	r1, #0
   12fda:	f2c4 0114 	movt	r1, #16404	; 0x4014
   12fde:	f004 fa89 	bl	174f4 <__aeabi_ddiv>
   12fe2:	4602      	mov	r2, r0
   12fe4:	460b      	mov	r3, r1
   12fe6:	4620      	mov	r0, r4
   12fe8:	4629      	mov	r1, r5
   12fea:	f003 ffa7 	bl	16f3c <__adddf3>
   12fee:	4602      	mov	r2, r0
   12ff0:	460b      	mov	r3, r1
   12ff2:	4610      	mov	r0, r2
   12ff4:	4619      	mov	r1, r3
   12ff6:	f004 fc35 	bl	17864 <__aeabi_d2f>
   12ffa:	4603      	mov	r3, r0
   12ffc:	61bb      	str	r3, [r7, #24]
   12ffe:	f64a 13bc 	movw	r3, #43452	; 0xa9bc
   13002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13006:	681b      	ldr	r3, [r3, #0]
   13008:	4618      	mov	r0, r3
   1300a:	f004 f8f5 	bl	171f8 <__aeabi_f2d>
   1300e:	4604      	mov	r4, r0
   13010:	460d      	mov	r5, r1
   13012:	69b8      	ldr	r0, [r7, #24]
   13014:	f004 f8f0 	bl	171f8 <__aeabi_f2d>
   13018:	4602      	mov	r2, r0
   1301a:	460b      	mov	r3, r1
   1301c:	4610      	mov	r0, r2
   1301e:	4619      	mov	r1, r3
   13020:	a3b1      	add	r3, pc, #708	; (adr r3, 132e8 <auto_nav+0x1570>)
   13022:	e9d3 2300 	ldrd	r2, r3, [r3]
   13026:	f003 ff89 	bl	16f3c <__adddf3>
   1302a:	4602      	mov	r2, r0
   1302c:	460b      	mov	r3, r1
   1302e:	4610      	mov	r0, r2
   13030:	4619      	mov	r1, r3
   13032:	f002 fa81 	bl	15538 <pp_sin>
   13036:	4602      	mov	r2, r0
   13038:	460b      	mov	r3, r1
   1303a:	4610      	mov	r0, r2
   1303c:	4619      	mov	r1, r3
   1303e:	f04f 0200 	mov.w	r2, #0
   13042:	f04f 0300 	mov.w	r3, #0
   13046:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1304a:	f004 f929 	bl	172a0 <__aeabi_dmul>
   1304e:	4602      	mov	r2, r0
   13050:	460b      	mov	r3, r1
   13052:	4620      	mov	r0, r4
   13054:	4629      	mov	r1, r5
   13056:	f003 ff71 	bl	16f3c <__adddf3>
   1305a:	4602      	mov	r2, r0
   1305c:	460b      	mov	r3, r1
   1305e:	4610      	mov	r0, r2
   13060:	4619      	mov	r1, r3
   13062:	f004 fbff 	bl	17864 <__aeabi_d2f>
   13066:	4606      	mov	r6, r0
   13068:	f64a 13c0 	movw	r3, #43456	; 0xa9c0
   1306c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13070:	681b      	ldr	r3, [r3, #0]
   13072:	4618      	mov	r0, r3
   13074:	f004 f8c0 	bl	171f8 <__aeabi_f2d>
   13078:	4604      	mov	r4, r0
   1307a:	460d      	mov	r5, r1
   1307c:	69b8      	ldr	r0, [r7, #24]
   1307e:	f004 f8bb 	bl	171f8 <__aeabi_f2d>
   13082:	4602      	mov	r2, r0
   13084:	460b      	mov	r3, r1
   13086:	4610      	mov	r0, r2
   13088:	4619      	mov	r1, r3
   1308a:	f002 fa55 	bl	15538 <pp_sin>
   1308e:	4602      	mov	r2, r0
   13090:	460b      	mov	r3, r1
   13092:	4610      	mov	r0, r2
   13094:	4619      	mov	r1, r3
   13096:	f04f 0200 	mov.w	r2, #0
   1309a:	f04f 0300 	mov.w	r3, #0
   1309e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   130a2:	f004 f8fd 	bl	172a0 <__aeabi_dmul>
   130a6:	4602      	mov	r2, r0
   130a8:	460b      	mov	r3, r1
   130aa:	4620      	mov	r0, r4
   130ac:	4629      	mov	r1, r5
   130ae:	f003 ff45 	bl	16f3c <__adddf3>
   130b2:	4602      	mov	r2, r0
   130b4:	460b      	mov	r3, r1
   130b6:	4610      	mov	r0, r2
   130b8:	4619      	mov	r1, r3
   130ba:	f004 fbd3 	bl	17864 <__aeabi_d2f>
   130be:	4603      	mov	r3, r0
   130c0:	4630      	mov	r0, r6
   130c2:	4619      	mov	r1, r3
   130c4:	f001 f81c 	bl	14100 <fly_to_xy>
   130c8:	69b8      	ldr	r0, [r7, #24]
   130ca:	f004 f895 	bl	171f8 <__aeabi_f2d>
   130ce:	4602      	mov	r2, r0
   130d0:	460b      	mov	r3, r1
   130d2:	a185      	add	r1, pc, #532	; (adr r1, 132e8 <auto_nav+0x1570>)
   130d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   130d8:	f003 ff2e 	bl	16f38 <__aeabi_dsub>
   130dc:	4602      	mov	r2, r0
   130de:	460b      	mov	r3, r1
   130e0:	4610      	mov	r0, r2
   130e2:	4619      	mov	r1, r3
   130e4:	a382      	add	r3, pc, #520	; (adr r3, 132f0 <auto_nav+0x1578>)
   130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   130ea:	f004 fa03 	bl	174f4 <__aeabi_ddiv>
   130ee:	4602      	mov	r2, r0
   130f0:	460b      	mov	r3, r1
   130f2:	4610      	mov	r0, r2
   130f4:	4619      	mov	r1, r3
   130f6:	f04f 0200 	mov.w	r2, #0
   130fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   130fe:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13102:	f004 f8cd 	bl	172a0 <__aeabi_dmul>
   13106:	4602      	mov	r2, r0
   13108:	460b      	mov	r3, r1
   1310a:	4610      	mov	r0, r2
   1310c:	4619      	mov	r1, r3
   1310e:	f004 fba9 	bl	17864 <__aeabi_d2f>
   13112:	4602      	mov	r2, r0
   13114:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1311c:	601a      	str	r2, [r3, #0]
   1311e:	e012      	b.n	13146 <auto_nav+0x13ce>
   13120:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13128:	681b      	ldr	r3, [r3, #0]
   1312a:	4618      	mov	r0, r3
   1312c:	f04f 0100 	mov.w	r1, #0
   13130:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13134:	f004 fbec 	bl	17910 <__addsf3>
   13138:	4603      	mov	r3, r0
   1313a:	461a      	mov	r2, r3
   1313c:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13144:	601a      	str	r2, [r3, #0]
   13146:	f64a 138c 	movw	r3, #43404	; 0xa98c
   1314a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	4618      	mov	r0, r3
   13152:	f04f 0100 	mov.w	r1, #0
   13156:	f004 fe81 	bl	17e5c <__aeabi_fcmplt>
   1315a:	4603      	mov	r3, r0
   1315c:	2b00      	cmp	r3, #0
   1315e:	d1df      	bne.n	13120 <auto_nav+0x13a8>
   13160:	e012      	b.n	13188 <auto_nav+0x1410>
   13162:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1316a:	681b      	ldr	r3, [r3, #0]
   1316c:	4618      	mov	r0, r3
   1316e:	f04f 0100 	mov.w	r1, #0
   13172:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13176:	f004 fbc9 	bl	1790c <__aeabi_fsub>
   1317a:	4603      	mov	r3, r0
   1317c:	461a      	mov	r2, r3
   1317e:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13186:	601a      	str	r2, [r3, #0]
   13188:	f64a 138c 	movw	r3, #43404	; 0xa98c
   1318c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13190:	681b      	ldr	r3, [r3, #0]
   13192:	4618      	mov	r0, r3
   13194:	f04f 0100 	mov.w	r1, #0
   13198:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1319c:	f004 fe72 	bl	17e84 <__aeabi_fcmpge>
   131a0:	4603      	mov	r3, r0
   131a2:	2b00      	cmp	r3, #0
   131a4:	d1dd      	bne.n	13162 <auto_nav+0x13ea>
        return;
   131a6:	f000 beb9 	b.w	13f1c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   131aa:	f64a 1370 	movw	r3, #43376	; 0xa970
   131ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131b2:	781b      	ldrb	r3, [r3, #0]
   131b4:	2b01      	cmp	r3, #1
   131b6:	f040 86b1 	bne.w	13f1c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   131ba:	f64a 1370 	movw	r3, #43376	; 0xa970
   131be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131c2:	2201      	movs	r2, #1
   131c4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   131c6:	f64a 1371 	movw	r3, #43377	; 0xa971
   131ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ce:	781b      	ldrb	r3, [r3, #0]
   131d0:	3301      	adds	r3, #1
   131d2:	b2da      	uxtb	r2, r3
   131d4:	f64a 1371 	movw	r3, #43377	; 0xa971
   131d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131dc:	701a      	strb	r2, [r3, #0]
   131de:	f64a 1370 	movw	r3, #43376	; 0xa970
   131e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131e6:	2200      	movs	r2, #0
   131e8:	701a      	strb	r2, [r3, #0]
   131ea:	f64a 1386 	movw	r3, #43398	; 0xa986
   131ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f2:	2200      	movs	r2, #0
   131f4:	801a      	strh	r2, [r3, #0]
   131f6:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   131fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fe:	681a      	ldr	r2, [r3, #0]
   13200:	f64a 1374 	movw	r3, #43380	; 0xa974
   13204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13208:	601a      	str	r2, [r3, #0]
   1320a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   1320e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13212:	681a      	ldr	r2, [r3, #0]
   13214:	f64a 1378 	movw	r3, #43384	; 0xa978
   13218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1321c:	601a      	str	r2, [r3, #0]
   1321e:	f64a 1384 	movw	r3, #43396	; 0xa984
   13222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13226:	2200      	movs	r2, #0
   13228:	801a      	strh	r2, [r3, #0]
   1322a:	f64a 1388 	movw	r3, #43400	; 0xa988
   1322e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13232:	f04f 0200 	mov.w	r2, #0
   13236:	601a      	str	r2, [r3, #0]
   13238:	f000 be70 	b.w	13f1c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1323c:	f64a 1371 	movw	r3, #43377	; 0xa971
   13240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13244:	781b      	ldrb	r3, [r3, #0]
   13246:	2b04      	cmp	r3, #4
   13248:	f040 8202 	bne.w	13650 <auto_nav+0x18d8>
{
    nav_block = 4;
   1324c:	f64a 1371 	movw	r3, #43377	; 0xa971
   13250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13254:	2204      	movs	r2, #4
   13256:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13258:	f24a 6300 	movw	r3, #42496	; 0xa600
   1325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13260:	781b      	ldrb	r3, [r3, #0]
   13262:	2b00      	cmp	r3, #0
   13264:	d007      	beq.n	13276 <auto_nav+0x14fe>
   13266:	f24a 6300 	movw	r3, #42496	; 0xa600
   1326a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326e:	2200      	movs	r2, #0
   13270:	701a      	strb	r2, [r3, #0]
   13272:	2301      	movs	r3, #1
   13274:	e000      	b.n	13278 <auto_nav+0x1500>
   13276:	2300      	movs	r3, #0
   13278:	2b00      	cmp	r3, #0
   1327a:	d03d      	beq.n	132f8 <auto_nav+0x1580>
   1327c:	f64a 1371 	movw	r3, #43377	; 0xa971
   13280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13284:	2205      	movs	r2, #5
   13286:	701a      	strb	r2, [r3, #0]
   13288:	f64a 1370 	movw	r3, #43376	; 0xa970
   1328c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13290:	2200      	movs	r2, #0
   13292:	701a      	strb	r2, [r3, #0]
   13294:	f64a 1386 	movw	r3, #43398	; 0xa986
   13298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1329c:	2200      	movs	r2, #0
   1329e:	801a      	strh	r2, [r3, #0]
   132a0:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   132a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132a8:	681a      	ldr	r2, [r3, #0]
   132aa:	f64a 1374 	movw	r3, #43380	; 0xa974
   132ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132b2:	601a      	str	r2, [r3, #0]
   132b4:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   132b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132bc:	681a      	ldr	r2, [r3, #0]
   132be:	f64a 1378 	movw	r3, #43384	; 0xa978
   132c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c6:	601a      	str	r2, [r3, #0]
   132c8:	f64a 1384 	movw	r3, #43396	; 0xa984
   132cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132d0:	2200      	movs	r2, #0
   132d2:	801a      	strh	r2, [r3, #0]
   132d4:	f64a 1388 	movw	r3, #43400	; 0xa988
   132d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132dc:	f04f 0200 	mov.w	r2, #0
   132e0:	601a      	str	r2, [r3, #0]
   132e2:	f000 be1b 	b.w	13f1c <auto_nav+0x21a4>
   132e6:	bf00      	nop
   132e8:	54442d18 	.word	0x54442d18
   132ec:	3ff921fb 	.word	0x3ff921fb
   132f0:	54442d18 	.word	0x54442d18
   132f4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   132f8:	f64a 1370 	movw	r3, #43376	; 0xa970
   132fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2b00      	cmp	r3, #0
   13304:	f040 815b 	bne.w	135be <auto_nav+0x1846>
    {
        nav_stage = 0;
   13308:	f64a 1370 	movw	r3, #43376	; 0xa970
   1330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13310:	2200      	movs	r2, #0
   13312:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13314:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   13318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1331c:	2200      	movs	r2, #0
   1331e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13320:	f64a 139c 	movw	r3, #43420	; 0xa99c
   13324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13328:	f04f 0200 	mov.w	r2, #0
   1332c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1332e:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   13332:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13336:	2203      	movs	r2, #3
   13338:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1333a:	f240 03bc 	movw	r3, #188	; 0xbc
   1333e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13342:	689a      	ldr	r2, [r3, #8]
   13344:	f240 03b8 	movw	r3, #184	; 0xb8
   13348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1334c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1334e:	f64a 1364 	movw	r3, #43364	; 0xa964
   13352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13356:	f04f 0200 	mov.w	r2, #0
   1335a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1335c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13364:	681a      	ldr	r2, [r3, #0]
   13366:	f240 03bc 	movw	r3, #188	; 0xbc
   1336a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1336e:	685b      	ldr	r3, [r3, #4]
   13370:	4610      	mov	r0, r2
   13372:	4619      	mov	r1, r3
   13374:	f004 faca 	bl	1790c <__aeabi_fsub>
   13378:	4603      	mov	r3, r0
   1337a:	4618      	mov	r0, r3
   1337c:	f003 ff3c 	bl	171f8 <__aeabi_f2d>
   13380:	4604      	mov	r4, r0
   13382:	460d      	mov	r5, r1
   13384:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1338c:	681a      	ldr	r2, [r3, #0]
   1338e:	f240 03bc 	movw	r3, #188	; 0xbc
   13392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13396:	681b      	ldr	r3, [r3, #0]
   13398:	4610      	mov	r0, r2
   1339a:	4619      	mov	r1, r3
   1339c:	f004 fab6 	bl	1790c <__aeabi_fsub>
   133a0:	4603      	mov	r3, r0
   133a2:	4618      	mov	r0, r3
   133a4:	f003 ff28 	bl	171f8 <__aeabi_f2d>
   133a8:	4602      	mov	r2, r0
   133aa:	460b      	mov	r3, r1
   133ac:	4620      	mov	r0, r4
   133ae:	4629      	mov	r1, r5
   133b0:	f002 f802 	bl	153b8 <pp_atan2>
   133b4:	4602      	mov	r2, r0
   133b6:	460b      	mov	r3, r1
   133b8:	4610      	mov	r0, r2
   133ba:	4619      	mov	r1, r3
   133bc:	f004 fa52 	bl	17864 <__aeabi_d2f>
   133c0:	4603      	mov	r3, r0
   133c2:	617b      	str	r3, [r7, #20]
   133c4:	6978      	ldr	r0, [r7, #20]
   133c6:	f003 ff17 	bl	171f8 <__aeabi_f2d>
   133ca:	4604      	mov	r4, r0
   133cc:	460d      	mov	r5, r1
   133ce:	f64a 4304 	movw	r3, #44036	; 0xac04
   133d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133d6:	681b      	ldr	r3, [r3, #0]
   133d8:	4618      	mov	r0, r3
   133da:	f04f 0100 	mov.w	r1, #0
   133de:	f2cc 3116 	movt	r1, #49942	; 0xc316
   133e2:	f004 fb9d 	bl	17b20 <__aeabi_fmul>
   133e6:	4603      	mov	r3, r0
   133e8:	4618      	mov	r0, r3
   133ea:	f003 ff05 	bl	171f8 <__aeabi_f2d>
   133ee:	4602      	mov	r2, r0
   133f0:	460b      	mov	r3, r1
   133f2:	f04f 0000 	mov.w	r0, #0
   133f6:	f04f 0100 	mov.w	r1, #0
   133fa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   133fe:	f004 f879 	bl	174f4 <__aeabi_ddiv>
   13402:	4602      	mov	r2, r0
   13404:	460b      	mov	r3, r1
   13406:	4620      	mov	r0, r4
   13408:	4629      	mov	r1, r5
   1340a:	f003 fd97 	bl	16f3c <__adddf3>
   1340e:	4602      	mov	r2, r0
   13410:	460b      	mov	r3, r1
   13412:	4610      	mov	r0, r2
   13414:	4619      	mov	r1, r3
   13416:	f004 fa25 	bl	17864 <__aeabi_d2f>
   1341a:	4603      	mov	r3, r0
   1341c:	613b      	str	r3, [r7, #16]
   1341e:	f240 03bc 	movw	r3, #188	; 0xbc
   13422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13426:	681b      	ldr	r3, [r3, #0]
   13428:	4618      	mov	r0, r3
   1342a:	f003 fee5 	bl	171f8 <__aeabi_f2d>
   1342e:	4604      	mov	r4, r0
   13430:	460d      	mov	r5, r1
   13432:	6938      	ldr	r0, [r7, #16]
   13434:	f003 fee0 	bl	171f8 <__aeabi_f2d>
   13438:	4602      	mov	r2, r0
   1343a:	460b      	mov	r3, r1
   1343c:	4610      	mov	r0, r2
   1343e:	4619      	mov	r1, r3
   13440:	a3af      	add	r3, pc, #700	; (adr r3, 13700 <auto_nav+0x1988>)
   13442:	e9d3 2300 	ldrd	r2, r3, [r3]
   13446:	f003 fd79 	bl	16f3c <__adddf3>
   1344a:	4602      	mov	r2, r0
   1344c:	460b      	mov	r3, r1
   1344e:	4610      	mov	r0, r2
   13450:	4619      	mov	r1, r3
   13452:	f002 f871 	bl	15538 <pp_sin>
   13456:	4602      	mov	r2, r0
   13458:	460b      	mov	r3, r1
   1345a:	4610      	mov	r0, r2
   1345c:	4619      	mov	r1, r3
   1345e:	a3aa      	add	r3, pc, #680	; (adr r3, 13708 <auto_nav+0x1990>)
   13460:	e9d3 2300 	ldrd	r2, r3, [r3]
   13464:	f003 ff1c 	bl	172a0 <__aeabi_dmul>
   13468:	4602      	mov	r2, r0
   1346a:	460b      	mov	r3, r1
   1346c:	4620      	mov	r0, r4
   1346e:	4629      	mov	r1, r5
   13470:	f003 fd64 	bl	16f3c <__adddf3>
   13474:	4602      	mov	r2, r0
   13476:	460b      	mov	r3, r1
   13478:	4610      	mov	r0, r2
   1347a:	4619      	mov	r1, r3
   1347c:	f004 f9f2 	bl	17864 <__aeabi_d2f>
   13480:	4606      	mov	r6, r0
   13482:	f240 03bc 	movw	r3, #188	; 0xbc
   13486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1348a:	685b      	ldr	r3, [r3, #4]
   1348c:	4618      	mov	r0, r3
   1348e:	f003 feb3 	bl	171f8 <__aeabi_f2d>
   13492:	4604      	mov	r4, r0
   13494:	460d      	mov	r5, r1
   13496:	6938      	ldr	r0, [r7, #16]
   13498:	f003 feae 	bl	171f8 <__aeabi_f2d>
   1349c:	4602      	mov	r2, r0
   1349e:	460b      	mov	r3, r1
   134a0:	4610      	mov	r0, r2
   134a2:	4619      	mov	r1, r3
   134a4:	f002 f848 	bl	15538 <pp_sin>
   134a8:	4602      	mov	r2, r0
   134aa:	460b      	mov	r3, r1
   134ac:	4610      	mov	r0, r2
   134ae:	4619      	mov	r1, r3
   134b0:	a395      	add	r3, pc, #596	; (adr r3, 13708 <auto_nav+0x1990>)
   134b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   134b6:	f003 fef3 	bl	172a0 <__aeabi_dmul>
   134ba:	4602      	mov	r2, r0
   134bc:	460b      	mov	r3, r1
   134be:	4620      	mov	r0, r4
   134c0:	4629      	mov	r1, r5
   134c2:	f003 fd3b 	bl	16f3c <__adddf3>
   134c6:	4602      	mov	r2, r0
   134c8:	460b      	mov	r3, r1
   134ca:	4610      	mov	r0, r2
   134cc:	4619      	mov	r1, r3
   134ce:	f004 f9c9 	bl	17864 <__aeabi_d2f>
   134d2:	4603      	mov	r3, r0
   134d4:	4630      	mov	r0, r6
   134d6:	4619      	mov	r1, r3
   134d8:	f000 fe12 	bl	14100 <fly_to_xy>
   134dc:	6938      	ldr	r0, [r7, #16]
   134de:	f003 fe8b 	bl	171f8 <__aeabi_f2d>
   134e2:	4602      	mov	r2, r0
   134e4:	460b      	mov	r3, r1
   134e6:	a186      	add	r1, pc, #536	; (adr r1, 13700 <auto_nav+0x1988>)
   134e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   134ec:	f003 fd24 	bl	16f38 <__aeabi_dsub>
   134f0:	4602      	mov	r2, r0
   134f2:	460b      	mov	r3, r1
   134f4:	4610      	mov	r0, r2
   134f6:	4619      	mov	r1, r3
   134f8:	a385      	add	r3, pc, #532	; (adr r3, 13710 <auto_nav+0x1998>)
   134fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   134fe:	f003 fff9 	bl	174f4 <__aeabi_ddiv>
   13502:	4602      	mov	r2, r0
   13504:	460b      	mov	r3, r1
   13506:	4610      	mov	r0, r2
   13508:	4619      	mov	r1, r3
   1350a:	f04f 0200 	mov.w	r2, #0
   1350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13512:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13516:	f003 fec3 	bl	172a0 <__aeabi_dmul>
   1351a:	4602      	mov	r2, r0
   1351c:	460b      	mov	r3, r1
   1351e:	4610      	mov	r0, r2
   13520:	4619      	mov	r1, r3
   13522:	f004 f99f 	bl	17864 <__aeabi_d2f>
   13526:	4602      	mov	r2, r0
   13528:	f64a 138c 	movw	r3, #43404	; 0xa98c
   1352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13530:	601a      	str	r2, [r3, #0]
   13532:	e012      	b.n	1355a <auto_nav+0x17e2>
   13534:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1353c:	681b      	ldr	r3, [r3, #0]
   1353e:	4618      	mov	r0, r3
   13540:	f04f 0100 	mov.w	r1, #0
   13544:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13548:	f004 f9e2 	bl	17910 <__addsf3>
   1354c:	4603      	mov	r3, r0
   1354e:	461a      	mov	r2, r3
   13550:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13558:	601a      	str	r2, [r3, #0]
   1355a:	f64a 138c 	movw	r3, #43404	; 0xa98c
   1355e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13562:	681b      	ldr	r3, [r3, #0]
   13564:	4618      	mov	r0, r3
   13566:	f04f 0100 	mov.w	r1, #0
   1356a:	f004 fc77 	bl	17e5c <__aeabi_fcmplt>
   1356e:	4603      	mov	r3, r0
   13570:	2b00      	cmp	r3, #0
   13572:	d1df      	bne.n	13534 <auto_nav+0x17bc>
   13574:	e012      	b.n	1359c <auto_nav+0x1824>
   13576:	f64a 138c 	movw	r3, #43404	; 0xa98c
   1357a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1357e:	681b      	ldr	r3, [r3, #0]
   13580:	4618      	mov	r0, r3
   13582:	f04f 0100 	mov.w	r1, #0
   13586:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1358a:	f004 f9bf 	bl	1790c <__aeabi_fsub>
   1358e:	4603      	mov	r3, r0
   13590:	461a      	mov	r2, r3
   13592:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1359a:	601a      	str	r2, [r3, #0]
   1359c:	f64a 138c 	movw	r3, #43404	; 0xa98c
   135a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a4:	681b      	ldr	r3, [r3, #0]
   135a6:	4618      	mov	r0, r3
   135a8:	f04f 0100 	mov.w	r1, #0
   135ac:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   135b0:	f004 fc68 	bl	17e84 <__aeabi_fcmpge>
   135b4:	4603      	mov	r3, r0
   135b6:	2b00      	cmp	r3, #0
   135b8:	d1dd      	bne.n	13576 <auto_nav+0x17fe>
        return;
   135ba:	f000 bcaf 	b.w	13f1c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   135be:	f64a 1370 	movw	r3, #43376	; 0xa970
   135c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c6:	781b      	ldrb	r3, [r3, #0]
   135c8:	2b01      	cmp	r3, #1
   135ca:	f040 84a7 	bne.w	13f1c <auto_nav+0x21a4>
    {
        nav_stage =1;
   135ce:	f64a 1370 	movw	r3, #43376	; 0xa970
   135d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d6:	2201      	movs	r2, #1
   135d8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   135da:	f64a 1371 	movw	r3, #43377	; 0xa971
   135de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e2:	781b      	ldrb	r3, [r3, #0]
   135e4:	3301      	adds	r3, #1
   135e6:	b2da      	uxtb	r2, r3
   135e8:	f64a 1371 	movw	r3, #43377	; 0xa971
   135ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135f0:	701a      	strb	r2, [r3, #0]
   135f2:	f64a 1370 	movw	r3, #43376	; 0xa970
   135f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135fa:	2200      	movs	r2, #0
   135fc:	701a      	strb	r2, [r3, #0]
   135fe:	f64a 1386 	movw	r3, #43398	; 0xa986
   13602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13606:	2200      	movs	r2, #0
   13608:	801a      	strh	r2, [r3, #0]
   1360a:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1360e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13612:	681a      	ldr	r2, [r3, #0]
   13614:	f64a 1374 	movw	r3, #43380	; 0xa974
   13618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1361c:	601a      	str	r2, [r3, #0]
   1361e:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13626:	681a      	ldr	r2, [r3, #0]
   13628:	f64a 1378 	movw	r3, #43384	; 0xa978
   1362c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13630:	601a      	str	r2, [r3, #0]
   13632:	f64a 1384 	movw	r3, #43396	; 0xa984
   13636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1363a:	2200      	movs	r2, #0
   1363c:	801a      	strh	r2, [r3, #0]
   1363e:	f64a 1388 	movw	r3, #43400	; 0xa988
   13642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13646:	f04f 0200 	mov.w	r2, #0
   1364a:	601a      	str	r2, [r3, #0]
   1364c:	f000 bc66 	b.w	13f1c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13650:	f64a 1371 	movw	r3, #43377	; 0xa971
   13654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13658:	781b      	ldrb	r3, [r3, #0]
   1365a:	2b05      	cmp	r3, #5
   1365c:	f040 845e 	bne.w	13f1c <auto_nav+0x21a4>
{
    nav_block = 5;
   13660:	f64a 1371 	movw	r3, #43377	; 0xa971
   13664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13668:	2205      	movs	r2, #5
   1366a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   1366c:	f24a 6300 	movw	r3, #42496	; 0xa600
   13670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13674:	781b      	ldrb	r3, [r3, #0]
   13676:	2b00      	cmp	r3, #0
   13678:	d007      	beq.n	1368a <auto_nav+0x1912>
   1367a:	f24a 6300 	movw	r3, #42496	; 0xa600
   1367e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13682:	2200      	movs	r2, #0
   13684:	701a      	strb	r2, [r3, #0]
   13686:	2301      	movs	r3, #1
   13688:	e000      	b.n	1368c <auto_nav+0x1914>
   1368a:	2300      	movs	r3, #0
   1368c:	2b00      	cmp	r3, #0
   1368e:	d043      	beq.n	13718 <auto_nav+0x19a0>
   13690:	f64a 1371 	movw	r3, #43377	; 0xa971
   13694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13698:	2201      	movs	r2, #1
   1369a:	701a      	strb	r2, [r3, #0]
   1369c:	f64a 1370 	movw	r3, #43376	; 0xa970
   136a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136a4:	2200      	movs	r2, #0
   136a6:	701a      	strb	r2, [r3, #0]
   136a8:	f64a 1386 	movw	r3, #43398	; 0xa986
   136ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136b0:	2200      	movs	r2, #0
   136b2:	801a      	strh	r2, [r3, #0]
   136b4:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   136b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136bc:	681a      	ldr	r2, [r3, #0]
   136be:	f64a 1374 	movw	r3, #43380	; 0xa974
   136c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c6:	601a      	str	r2, [r3, #0]
   136c8:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   136cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d0:	681a      	ldr	r2, [r3, #0]
   136d2:	f64a 1378 	movw	r3, #43384	; 0xa978
   136d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136da:	601a      	str	r2, [r3, #0]
   136dc:	f64a 1384 	movw	r3, #43396	; 0xa984
   136e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e4:	2200      	movs	r2, #0
   136e6:	801a      	strh	r2, [r3, #0]
   136e8:	f64a 1388 	movw	r3, #43400	; 0xa988
   136ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f0:	f04f 0200 	mov.w	r2, #0
   136f4:	601a      	str	r2, [r3, #0]
   136f6:	f000 bc11 	b.w	13f1c <auto_nav+0x21a4>
   136fa:	bf00      	nop
   136fc:	f3af 8000 	nop.w
   13700:	54442d18 	.word	0x54442d18
   13704:	3ff921fb 	.word	0x3ff921fb
   13708:	00000000 	.word	0x00000000
   1370c:	4062c000 	.word	0x4062c000
   13710:	54442d18 	.word	0x54442d18
   13714:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13718:	f64a 1370 	movw	r3, #43376	; 0xa970
   1371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13720:	781b      	ldrb	r3, [r3, #0]
   13722:	2b00      	cmp	r3, #0
   13724:	d133      	bne.n	1378e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13726:	f64a 1370 	movw	r3, #43376	; 0xa970
   1372a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1372e:	2200      	movs	r2, #0
   13730:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13732:	f64a 1370 	movw	r3, #43376	; 0xa970
   13736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1373a:	781b      	ldrb	r3, [r3, #0]
   1373c:	3301      	adds	r3, #1
   1373e:	b2da      	uxtb	r2, r3
   13740:	f64a 1370 	movw	r3, #43376	; 0xa970
   13744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13748:	701a      	strb	r2, [r3, #0]
   1374a:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1374e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13752:	681a      	ldr	r2, [r3, #0]
   13754:	f64a 1374 	movw	r3, #43380	; 0xa974
   13758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375c:	601a      	str	r2, [r3, #0]
   1375e:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13766:	681a      	ldr	r2, [r3, #0]
   13768:	f64a 1378 	movw	r3, #43384	; 0xa978
   1376c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13770:	601a      	str	r2, [r3, #0]
   13772:	f64a 1384 	movw	r3, #43396	; 0xa984
   13776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1377a:	2200      	movs	r2, #0
   1377c:	801a      	strh	r2, [r3, #0]
   1377e:	f64a 1388 	movw	r3, #43400	; 0xa988
   13782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13786:	f04f 0200 	mov.w	r2, #0
   1378a:	601a      	str	r2, [r3, #0]
   1378c:	e3c6      	b.n	13f1c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1378e:	f64a 1370 	movw	r3, #43376	; 0xa970
   13792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13796:	781b      	ldrb	r3, [r3, #0]
   13798:	2b01      	cmp	r3, #1
   1379a:	f040 81b5 	bne.w	13b08 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1379e:	f64a 1370 	movw	r3, #43376	; 0xa970
   137a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a6:	2201      	movs	r2, #1
   137a8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   137aa:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   137ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b2:	2200      	movs	r2, #0
   137b4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   137b6:	f64a 139c 	movw	r3, #43420	; 0xa99c
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	f04f 0200 	mov.w	r2, #0
   137c2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   137c4:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   137c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137cc:	2203      	movs	r2, #3
   137ce:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   137d0:	f240 03bc 	movw	r3, #188	; 0xbc
   137d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d8:	695a      	ldr	r2, [r3, #20]
   137da:	f240 03b8 	movw	r3, #184	; 0xb8
   137de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   137e4:	f64a 1364 	movw	r3, #43364	; 0xa964
   137e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ec:	f04f 0200 	mov.w	r2, #0
   137f0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   137f2:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	681a      	ldr	r2, [r3, #0]
   137fc:	f240 03bc 	movw	r3, #188	; 0xbc
   13800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13804:	691b      	ldr	r3, [r3, #16]
   13806:	4610      	mov	r0, r2
   13808:	4619      	mov	r1, r3
   1380a:	f004 f87f 	bl	1790c <__aeabi_fsub>
   1380e:	4603      	mov	r3, r0
   13810:	4618      	mov	r0, r3
   13812:	f003 fcf1 	bl	171f8 <__aeabi_f2d>
   13816:	4604      	mov	r4, r0
   13818:	460d      	mov	r5, r1
   1381a:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   1381e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13822:	681a      	ldr	r2, [r3, #0]
   13824:	f240 03bc 	movw	r3, #188	; 0xbc
   13828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1382c:	68db      	ldr	r3, [r3, #12]
   1382e:	4610      	mov	r0, r2
   13830:	4619      	mov	r1, r3
   13832:	f004 f86b 	bl	1790c <__aeabi_fsub>
   13836:	4603      	mov	r3, r0
   13838:	4618      	mov	r0, r3
   1383a:	f003 fcdd 	bl	171f8 <__aeabi_f2d>
   1383e:	4602      	mov	r2, r0
   13840:	460b      	mov	r3, r1
   13842:	4620      	mov	r0, r4
   13844:	4629      	mov	r1, r5
   13846:	f001 fdb7 	bl	153b8 <pp_atan2>
   1384a:	4602      	mov	r2, r0
   1384c:	460b      	mov	r3, r1
   1384e:	4610      	mov	r0, r2
   13850:	4619      	mov	r1, r3
   13852:	f004 f807 	bl	17864 <__aeabi_d2f>
   13856:	4603      	mov	r3, r0
   13858:	60fb      	str	r3, [r7, #12]
   1385a:	68f8      	ldr	r0, [r7, #12]
   1385c:	f003 fccc 	bl	171f8 <__aeabi_f2d>
   13860:	4604      	mov	r4, r0
   13862:	460d      	mov	r5, r1
   13864:	f64a 4304 	movw	r3, #44036	; 0xac04
   13868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386c:	681b      	ldr	r3, [r3, #0]
   1386e:	4618      	mov	r0, r3
   13870:	f04f 0100 	mov.w	r1, #0
   13874:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13878:	f004 f952 	bl	17b20 <__aeabi_fmul>
   1387c:	4603      	mov	r3, r0
   1387e:	4618      	mov	r0, r3
   13880:	f003 fcba 	bl	171f8 <__aeabi_f2d>
   13884:	4602      	mov	r2, r0
   13886:	460b      	mov	r3, r1
   13888:	f04f 0000 	mov.w	r0, #0
   1388c:	f04f 0100 	mov.w	r1, #0
   13890:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13894:	f003 fe2e 	bl	174f4 <__aeabi_ddiv>
   13898:	4602      	mov	r2, r0
   1389a:	460b      	mov	r3, r1
   1389c:	4620      	mov	r0, r4
   1389e:	4629      	mov	r1, r5
   138a0:	f003 fb4c 	bl	16f3c <__adddf3>
   138a4:	4602      	mov	r2, r0
   138a6:	460b      	mov	r3, r1
   138a8:	4610      	mov	r0, r2
   138aa:	4619      	mov	r1, r3
   138ac:	f003 ffda 	bl	17864 <__aeabi_d2f>
   138b0:	4603      	mov	r3, r0
   138b2:	60bb      	str	r3, [r7, #8]
   138b4:	f240 03bc 	movw	r3, #188	; 0xbc
   138b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138bc:	68db      	ldr	r3, [r3, #12]
   138be:	4618      	mov	r0, r3
   138c0:	f003 fc9a 	bl	171f8 <__aeabi_f2d>
   138c4:	4604      	mov	r4, r0
   138c6:	460d      	mov	r5, r1
   138c8:	68b8      	ldr	r0, [r7, #8]
   138ca:	f003 fc95 	bl	171f8 <__aeabi_f2d>
   138ce:	4602      	mov	r2, r0
   138d0:	460b      	mov	r3, r1
   138d2:	4610      	mov	r0, r2
   138d4:	4619      	mov	r1, r3
   138d6:	a388      	add	r3, pc, #544	; (adr r3, 13af8 <auto_nav+0x1d80>)
   138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   138dc:	f003 fb2e 	bl	16f3c <__adddf3>
   138e0:	4602      	mov	r2, r0
   138e2:	460b      	mov	r3, r1
   138e4:	4610      	mov	r0, r2
   138e6:	4619      	mov	r1, r3
   138e8:	f001 fe26 	bl	15538 <pp_sin>
   138ec:	4602      	mov	r2, r0
   138ee:	460b      	mov	r3, r1
   138f0:	4610      	mov	r0, r2
   138f2:	4619      	mov	r1, r3
   138f4:	f04f 0200 	mov.w	r2, #0
   138f8:	f04f 0300 	mov.w	r3, #0
   138fc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13900:	f003 fcce 	bl	172a0 <__aeabi_dmul>
   13904:	4602      	mov	r2, r0
   13906:	460b      	mov	r3, r1
   13908:	4620      	mov	r0, r4
   1390a:	4629      	mov	r1, r5
   1390c:	f003 fb16 	bl	16f3c <__adddf3>
   13910:	4602      	mov	r2, r0
   13912:	460b      	mov	r3, r1
   13914:	4610      	mov	r0, r2
   13916:	4619      	mov	r1, r3
   13918:	f003 ffa4 	bl	17864 <__aeabi_d2f>
   1391c:	4606      	mov	r6, r0
   1391e:	f240 03bc 	movw	r3, #188	; 0xbc
   13922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13926:	691b      	ldr	r3, [r3, #16]
   13928:	4618      	mov	r0, r3
   1392a:	f003 fc65 	bl	171f8 <__aeabi_f2d>
   1392e:	4604      	mov	r4, r0
   13930:	460d      	mov	r5, r1
   13932:	68b8      	ldr	r0, [r7, #8]
   13934:	f003 fc60 	bl	171f8 <__aeabi_f2d>
   13938:	4602      	mov	r2, r0
   1393a:	460b      	mov	r3, r1
   1393c:	4610      	mov	r0, r2
   1393e:	4619      	mov	r1, r3
   13940:	f001 fdfa 	bl	15538 <pp_sin>
   13944:	4602      	mov	r2, r0
   13946:	460b      	mov	r3, r1
   13948:	4610      	mov	r0, r2
   1394a:	4619      	mov	r1, r3
   1394c:	f04f 0200 	mov.w	r2, #0
   13950:	f04f 0300 	mov.w	r3, #0
   13954:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13958:	f003 fca2 	bl	172a0 <__aeabi_dmul>
   1395c:	4602      	mov	r2, r0
   1395e:	460b      	mov	r3, r1
   13960:	4620      	mov	r0, r4
   13962:	4629      	mov	r1, r5
   13964:	f003 faea 	bl	16f3c <__adddf3>
   13968:	4602      	mov	r2, r0
   1396a:	460b      	mov	r3, r1
   1396c:	4610      	mov	r0, r2
   1396e:	4619      	mov	r1, r3
   13970:	f003 ff78 	bl	17864 <__aeabi_d2f>
   13974:	4603      	mov	r3, r0
   13976:	4630      	mov	r0, r6
   13978:	4619      	mov	r1, r3
   1397a:	f000 fbc1 	bl	14100 <fly_to_xy>
   1397e:	68b8      	ldr	r0, [r7, #8]
   13980:	f003 fc3a 	bl	171f8 <__aeabi_f2d>
   13984:	4602      	mov	r2, r0
   13986:	460b      	mov	r3, r1
   13988:	a15b      	add	r1, pc, #364	; (adr r1, 13af8 <auto_nav+0x1d80>)
   1398a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1398e:	f003 fad3 	bl	16f38 <__aeabi_dsub>
   13992:	4602      	mov	r2, r0
   13994:	460b      	mov	r3, r1
   13996:	4610      	mov	r0, r2
   13998:	4619      	mov	r1, r3
   1399a:	a359      	add	r3, pc, #356	; (adr r3, 13b00 <auto_nav+0x1d88>)
   1399c:	e9d3 2300 	ldrd	r2, r3, [r3]
   139a0:	f003 fda8 	bl	174f4 <__aeabi_ddiv>
   139a4:	4602      	mov	r2, r0
   139a6:	460b      	mov	r3, r1
   139a8:	4610      	mov	r0, r2
   139aa:	4619      	mov	r1, r3
   139ac:	f04f 0200 	mov.w	r2, #0
   139b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   139b8:	f003 fc72 	bl	172a0 <__aeabi_dmul>
   139bc:	4602      	mov	r2, r0
   139be:	460b      	mov	r3, r1
   139c0:	4610      	mov	r0, r2
   139c2:	4619      	mov	r1, r3
   139c4:	f003 ff4e 	bl	17864 <__aeabi_d2f>
   139c8:	4602      	mov	r2, r0
   139ca:	f64a 138c 	movw	r3, #43404	; 0xa98c
   139ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d2:	601a      	str	r2, [r3, #0]
   139d4:	e012      	b.n	139fc <auto_nav+0x1c84>
   139d6:	f64a 138c 	movw	r3, #43404	; 0xa98c
   139da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139de:	681b      	ldr	r3, [r3, #0]
   139e0:	4618      	mov	r0, r3
   139e2:	f04f 0100 	mov.w	r1, #0
   139e6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139ea:	f003 ff91 	bl	17910 <__addsf3>
   139ee:	4603      	mov	r3, r0
   139f0:	461a      	mov	r2, r3
   139f2:	f64a 138c 	movw	r3, #43404	; 0xa98c
   139f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139fa:	601a      	str	r2, [r3, #0]
   139fc:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a04:	681b      	ldr	r3, [r3, #0]
   13a06:	4618      	mov	r0, r3
   13a08:	f04f 0100 	mov.w	r1, #0
   13a0c:	f004 fa26 	bl	17e5c <__aeabi_fcmplt>
   13a10:	4603      	mov	r3, r0
   13a12:	2b00      	cmp	r3, #0
   13a14:	d1df      	bne.n	139d6 <auto_nav+0x1c5e>
   13a16:	e012      	b.n	13a3e <auto_nav+0x1cc6>
   13a18:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a20:	681b      	ldr	r3, [r3, #0]
   13a22:	4618      	mov	r0, r3
   13a24:	f04f 0100 	mov.w	r1, #0
   13a28:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a2c:	f003 ff6e 	bl	1790c <__aeabi_fsub>
   13a30:	4603      	mov	r3, r0
   13a32:	461a      	mov	r2, r3
   13a34:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a3c:	601a      	str	r2, [r3, #0]
   13a3e:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a46:	681b      	ldr	r3, [r3, #0]
   13a48:	4618      	mov	r0, r3
   13a4a:	f04f 0100 	mov.w	r1, #0
   13a4e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a52:	f004 fa17 	bl	17e84 <__aeabi_fcmpge>
   13a56:	4603      	mov	r3, r0
   13a58:	2b00      	cmp	r3, #0
   13a5a:	d1dd      	bne.n	13a18 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13a5c:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a64:	681b      	ldr	r3, [r3, #0]
   13a66:	4618      	mov	r0, r3
   13a68:	f04f 0100 	mov.w	r1, #0
   13a6c:	f004 fa14 	bl	17e98 <__aeabi_fcmpgt>
   13a70:	4603      	mov	r3, r0
   13a72:	2b00      	cmp	r3, #0
   13a74:	d100      	bne.n	13a78 <auto_nav+0x1d00>
        return;
   13a76:	e251      	b.n	13f1c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13a78:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a80:	681b      	ldr	r3, [r3, #0]
   13a82:	4618      	mov	r0, r3
   13a84:	f04f 0100 	mov.w	r1, #0
   13a88:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13a8c:	f004 f9e6 	bl	17e5c <__aeabi_fcmplt>
   13a90:	4603      	mov	r3, r0
   13a92:	2b00      	cmp	r3, #0
   13a94:	d100      	bne.n	13a98 <auto_nav+0x1d20>
        return;
   13a96:	e241      	b.n	13f1c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13a98:	f64a 1370 	movw	r3, #43376	; 0xa970
   13a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa0:	781b      	ldrb	r3, [r3, #0]
   13aa2:	3301      	adds	r3, #1
   13aa4:	b2da      	uxtb	r2, r3
   13aa6:	f64a 1370 	movw	r3, #43376	; 0xa970
   13aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aae:	701a      	strb	r2, [r3, #0]
   13ab0:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab8:	681a      	ldr	r2, [r3, #0]
   13aba:	f64a 1374 	movw	r3, #43380	; 0xa974
   13abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ac2:	601a      	str	r2, [r3, #0]
   13ac4:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13acc:	681a      	ldr	r2, [r3, #0]
   13ace:	f64a 1378 	movw	r3, #43384	; 0xa978
   13ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ad6:	601a      	str	r2, [r3, #0]
   13ad8:	f64a 1384 	movw	r3, #43396	; 0xa984
   13adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae0:	2200      	movs	r2, #0
   13ae2:	801a      	strh	r2, [r3, #0]
   13ae4:	f64a 1388 	movw	r3, #43400	; 0xa988
   13ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aec:	f04f 0200 	mov.w	r2, #0
   13af0:	601a      	str	r2, [r3, #0]
   13af2:	e213      	b.n	13f1c <auto_nav+0x21a4>
   13af4:	f3af 8000 	nop.w
   13af8:	54442d18 	.word	0x54442d18
   13afc:	3ff921fb 	.word	0x3ff921fb
   13b00:	54442d18 	.word	0x54442d18
   13b04:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13b08:	f64a 1370 	movw	r3, #43376	; 0xa970
   13b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b10:	781b      	ldrb	r3, [r3, #0]
   13b12:	2b02      	cmp	r3, #2
   13b14:	f040 81ad 	bne.w	13e72 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13b18:	f64a 1370 	movw	r3, #43376	; 0xa970
   13b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b20:	2202      	movs	r2, #2
   13b22:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13b24:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
   13b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2c:	2200      	movs	r2, #0
   13b2e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13b30:	f64a 139c 	movw	r3, #43420	; 0xa99c
   13b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b38:	f04f 0200 	mov.w	r2, #0
   13b3c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13b3e:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   13b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b46:	2203      	movs	r2, #3
   13b48:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13b4a:	f240 03bc 	movw	r3, #188	; 0xbc
   13b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13b54:	f240 03b8 	movw	r3, #184	; 0xb8
   13b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b5c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13b5e:	f64a 1364 	movw	r3, #43364	; 0xa964
   13b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b66:	f04f 0200 	mov.w	r2, #0
   13b6a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13b6c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b74:	681a      	ldr	r2, [r3, #0]
   13b76:	f240 03bc 	movw	r3, #188	; 0xbc
   13b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13b80:	4610      	mov	r0, r2
   13b82:	4619      	mov	r1, r3
   13b84:	f003 fec2 	bl	1790c <__aeabi_fsub>
   13b88:	4603      	mov	r3, r0
   13b8a:	4618      	mov	r0, r3
   13b8c:	f003 fb34 	bl	171f8 <__aeabi_f2d>
   13b90:	4604      	mov	r4, r0
   13b92:	460d      	mov	r5, r1
   13b94:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b9c:	681a      	ldr	r2, [r3, #0]
   13b9e:	f240 03bc 	movw	r3, #188	; 0xbc
   13ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13ba8:	4610      	mov	r0, r2
   13baa:	4619      	mov	r1, r3
   13bac:	f003 feae 	bl	1790c <__aeabi_fsub>
   13bb0:	4603      	mov	r3, r0
   13bb2:	4618      	mov	r0, r3
   13bb4:	f003 fb20 	bl	171f8 <__aeabi_f2d>
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
   13bbc:	4620      	mov	r0, r4
   13bbe:	4629      	mov	r1, r5
   13bc0:	f001 fbfa 	bl	153b8 <pp_atan2>
   13bc4:	4602      	mov	r2, r0
   13bc6:	460b      	mov	r3, r1
   13bc8:	4610      	mov	r0, r2
   13bca:	4619      	mov	r1, r3
   13bcc:	f003 fe4a 	bl	17864 <__aeabi_d2f>
   13bd0:	4603      	mov	r3, r0
   13bd2:	607b      	str	r3, [r7, #4]
   13bd4:	6878      	ldr	r0, [r7, #4]
   13bd6:	f003 fb0f 	bl	171f8 <__aeabi_f2d>
   13bda:	4604      	mov	r4, r0
   13bdc:	460d      	mov	r5, r1
   13bde:	f64a 4304 	movw	r3, #44036	; 0xac04
   13be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	4618      	mov	r0, r3
   13bea:	f04f 0100 	mov.w	r1, #0
   13bee:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13bf2:	f003 ff95 	bl	17b20 <__aeabi_fmul>
   13bf6:	4603      	mov	r3, r0
   13bf8:	4618      	mov	r0, r3
   13bfa:	f003 fafd 	bl	171f8 <__aeabi_f2d>
   13bfe:	4602      	mov	r2, r0
   13c00:	460b      	mov	r3, r1
   13c02:	f04f 0000 	mov.w	r0, #0
   13c06:	f04f 0100 	mov.w	r1, #0
   13c0a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c0e:	f003 fc71 	bl	174f4 <__aeabi_ddiv>
   13c12:	4602      	mov	r2, r0
   13c14:	460b      	mov	r3, r1
   13c16:	4620      	mov	r0, r4
   13c18:	4629      	mov	r1, r5
   13c1a:	f003 f98f 	bl	16f3c <__adddf3>
   13c1e:	4602      	mov	r2, r0
   13c20:	460b      	mov	r3, r1
   13c22:	4610      	mov	r0, r2
   13c24:	4619      	mov	r1, r3
   13c26:	f003 fe1d 	bl	17864 <__aeabi_d2f>
   13c2a:	4603      	mov	r3, r0
   13c2c:	603b      	str	r3, [r7, #0]
   13c2e:	f240 03bc 	movw	r3, #188	; 0xbc
   13c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13c38:	4618      	mov	r0, r3
   13c3a:	f003 fadd 	bl	171f8 <__aeabi_f2d>
   13c3e:	4604      	mov	r4, r0
   13c40:	460d      	mov	r5, r1
   13c42:	6838      	ldr	r0, [r7, #0]
   13c44:	f003 fad8 	bl	171f8 <__aeabi_f2d>
   13c48:	4602      	mov	r2, r0
   13c4a:	460b      	mov	r3, r1
   13c4c:	4610      	mov	r0, r2
   13c4e:	4619      	mov	r1, r3
   13c50:	a3b5      	add	r3, pc, #724	; (adr r3, 13f28 <auto_nav+0x21b0>)
   13c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c56:	f003 f971 	bl	16f3c <__adddf3>
   13c5a:	4602      	mov	r2, r0
   13c5c:	460b      	mov	r3, r1
   13c5e:	4610      	mov	r0, r2
   13c60:	4619      	mov	r1, r3
   13c62:	f001 fc69 	bl	15538 <pp_sin>
   13c66:	4602      	mov	r2, r0
   13c68:	460b      	mov	r3, r1
   13c6a:	4610      	mov	r0, r2
   13c6c:	4619      	mov	r1, r3
   13c6e:	f04f 0200 	mov.w	r2, #0
   13c72:	f04f 0300 	mov.w	r3, #0
   13c76:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13c7a:	f003 fb11 	bl	172a0 <__aeabi_dmul>
   13c7e:	4602      	mov	r2, r0
   13c80:	460b      	mov	r3, r1
   13c82:	4620      	mov	r0, r4
   13c84:	4629      	mov	r1, r5
   13c86:	f003 f959 	bl	16f3c <__adddf3>
   13c8a:	4602      	mov	r2, r0
   13c8c:	460b      	mov	r3, r1
   13c8e:	4610      	mov	r0, r2
   13c90:	4619      	mov	r1, r3
   13c92:	f003 fde7 	bl	17864 <__aeabi_d2f>
   13c96:	4606      	mov	r6, r0
   13c98:	f240 03bc 	movw	r3, #188	; 0xbc
   13c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13ca2:	4618      	mov	r0, r3
   13ca4:	f003 faa8 	bl	171f8 <__aeabi_f2d>
   13ca8:	4604      	mov	r4, r0
   13caa:	460d      	mov	r5, r1
   13cac:	6838      	ldr	r0, [r7, #0]
   13cae:	f003 faa3 	bl	171f8 <__aeabi_f2d>
   13cb2:	4602      	mov	r2, r0
   13cb4:	460b      	mov	r3, r1
   13cb6:	4610      	mov	r0, r2
   13cb8:	4619      	mov	r1, r3
   13cba:	f001 fc3d 	bl	15538 <pp_sin>
   13cbe:	4602      	mov	r2, r0
   13cc0:	460b      	mov	r3, r1
   13cc2:	4610      	mov	r0, r2
   13cc4:	4619      	mov	r1, r3
   13cc6:	f04f 0200 	mov.w	r2, #0
   13cca:	f04f 0300 	mov.w	r3, #0
   13cce:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13cd2:	f003 fae5 	bl	172a0 <__aeabi_dmul>
   13cd6:	4602      	mov	r2, r0
   13cd8:	460b      	mov	r3, r1
   13cda:	4620      	mov	r0, r4
   13cdc:	4629      	mov	r1, r5
   13cde:	f003 f92d 	bl	16f3c <__adddf3>
   13ce2:	4602      	mov	r2, r0
   13ce4:	460b      	mov	r3, r1
   13ce6:	4610      	mov	r0, r2
   13ce8:	4619      	mov	r1, r3
   13cea:	f003 fdbb 	bl	17864 <__aeabi_d2f>
   13cee:	4603      	mov	r3, r0
   13cf0:	4630      	mov	r0, r6
   13cf2:	4619      	mov	r1, r3
   13cf4:	f000 fa04 	bl	14100 <fly_to_xy>
   13cf8:	6838      	ldr	r0, [r7, #0]
   13cfa:	f003 fa7d 	bl	171f8 <__aeabi_f2d>
   13cfe:	4602      	mov	r2, r0
   13d00:	460b      	mov	r3, r1
   13d02:	a189      	add	r1, pc, #548	; (adr r1, 13f28 <auto_nav+0x21b0>)
   13d04:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d08:	f003 f916 	bl	16f38 <__aeabi_dsub>
   13d0c:	4602      	mov	r2, r0
   13d0e:	460b      	mov	r3, r1
   13d10:	4610      	mov	r0, r2
   13d12:	4619      	mov	r1, r3
   13d14:	a386      	add	r3, pc, #536	; (adr r3, 13f30 <auto_nav+0x21b8>)
   13d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d1a:	f003 fbeb 	bl	174f4 <__aeabi_ddiv>
   13d1e:	4602      	mov	r2, r0
   13d20:	460b      	mov	r3, r1
   13d22:	4610      	mov	r0, r2
   13d24:	4619      	mov	r1, r3
   13d26:	f04f 0200 	mov.w	r2, #0
   13d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13d2e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13d32:	f003 fab5 	bl	172a0 <__aeabi_dmul>
   13d36:	4602      	mov	r2, r0
   13d38:	460b      	mov	r3, r1
   13d3a:	4610      	mov	r0, r2
   13d3c:	4619      	mov	r1, r3
   13d3e:	f003 fd91 	bl	17864 <__aeabi_d2f>
   13d42:	4602      	mov	r2, r0
   13d44:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4c:	601a      	str	r2, [r3, #0]
   13d4e:	e012      	b.n	13d76 <auto_nav+0x1ffe>
   13d50:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d58:	681b      	ldr	r3, [r3, #0]
   13d5a:	4618      	mov	r0, r3
   13d5c:	f04f 0100 	mov.w	r1, #0
   13d60:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d64:	f003 fdd4 	bl	17910 <__addsf3>
   13d68:	4603      	mov	r3, r0
   13d6a:	461a      	mov	r2, r3
   13d6c:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d74:	601a      	str	r2, [r3, #0]
   13d76:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	4618      	mov	r0, r3
   13d82:	f04f 0100 	mov.w	r1, #0
   13d86:	f004 f869 	bl	17e5c <__aeabi_fcmplt>
   13d8a:	4603      	mov	r3, r0
   13d8c:	2b00      	cmp	r3, #0
   13d8e:	d1df      	bne.n	13d50 <auto_nav+0x1fd8>
   13d90:	e012      	b.n	13db8 <auto_nav+0x2040>
   13d92:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d9a:	681b      	ldr	r3, [r3, #0]
   13d9c:	4618      	mov	r0, r3
   13d9e:	f04f 0100 	mov.w	r1, #0
   13da2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13da6:	f003 fdb1 	bl	1790c <__aeabi_fsub>
   13daa:	4603      	mov	r3, r0
   13dac:	461a      	mov	r2, r3
   13dae:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13db6:	601a      	str	r2, [r3, #0]
   13db8:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dc0:	681b      	ldr	r3, [r3, #0]
   13dc2:	4618      	mov	r0, r3
   13dc4:	f04f 0100 	mov.w	r1, #0
   13dc8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13dcc:	f004 f85a 	bl	17e84 <__aeabi_fcmpge>
   13dd0:	4603      	mov	r3, r0
   13dd2:	2b00      	cmp	r3, #0
   13dd4:	d1dd      	bne.n	13d92 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   13dd6:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dde:	681b      	ldr	r3, [r3, #0]
   13de0:	4618      	mov	r0, r3
   13de2:	f04f 0100 	mov.w	r1, #0
   13de6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   13dea:	f004 f855 	bl	17e98 <__aeabi_fcmpgt>
   13dee:	4603      	mov	r3, r0
   13df0:	2b00      	cmp	r3, #0
   13df2:	d100      	bne.n	13df6 <auto_nav+0x207e>
          return;
   13df4:	e092      	b.n	13f1c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   13df6:	f64a 138c 	movw	r3, #43404	; 0xa98c
   13dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dfe:	681b      	ldr	r3, [r3, #0]
   13e00:	4618      	mov	r0, r3
   13e02:	f04f 0100 	mov.w	r1, #0
   13e06:	f2c4 313e 	movt	r1, #17214	; 0x433e
   13e0a:	f004 f827 	bl	17e5c <__aeabi_fcmplt>
   13e0e:	4603      	mov	r3, r0
   13e10:	2b00      	cmp	r3, #0
   13e12:	d100      	bne.n	13e16 <auto_nav+0x209e>
          return;
   13e14:	e082      	b.n	13f1c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   13e16:	f64a 1370 	movw	r3, #43376	; 0xa970
   13e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e1e:	781b      	ldrb	r3, [r3, #0]
   13e20:	3301      	adds	r3, #1
   13e22:	b2da      	uxtb	r2, r3
   13e24:	f64a 1370 	movw	r3, #43376	; 0xa970
   13e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e2c:	701a      	strb	r2, [r3, #0]
   13e2e:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e36:	681a      	ldr	r2, [r3, #0]
   13e38:	f64a 1374 	movw	r3, #43380	; 0xa974
   13e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e40:	601a      	str	r2, [r3, #0]
   13e42:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e4a:	681a      	ldr	r2, [r3, #0]
   13e4c:	f64a 1378 	movw	r3, #43384	; 0xa978
   13e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e54:	601a      	str	r2, [r3, #0]
   13e56:	f64a 1384 	movw	r3, #43396	; 0xa984
   13e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e5e:	2200      	movs	r2, #0
   13e60:	801a      	strh	r2, [r3, #0]
   13e62:	f64a 1388 	movw	r3, #43400	; 0xa988
   13e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e6a:	f04f 0200 	mov.w	r2, #0
   13e6e:	601a      	str	r2, [r3, #0]
   13e70:	e054      	b.n	13f1c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   13e72:	f64a 1370 	movw	r3, #43376	; 0xa970
   13e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e7a:	781b      	ldrb	r3, [r3, #0]
   13e7c:	2b03      	cmp	r3, #3
   13e7e:	d106      	bne.n	13e8e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   13e80:	f64a 1370 	movw	r3, #43376	; 0xa970
   13e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e88:	2203      	movs	r2, #3
   13e8a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   13e8c:	e44b      	b.n	13726 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   13e8e:	f64a 1370 	movw	r3, #43376	; 0xa970
   13e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e96:	781b      	ldrb	r3, [r3, #0]
   13e98:	2b04      	cmp	r3, #4
   13e9a:	d13f      	bne.n	13f1c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   13e9c:	f64a 1370 	movw	r3, #43376	; 0xa970
   13ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ea4:	2204      	movs	r2, #4
   13ea6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ea8:	f64a 1371 	movw	r3, #43377	; 0xa971
   13eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb0:	781b      	ldrb	r3, [r3, #0]
   13eb2:	3301      	adds	r3, #1
   13eb4:	b2da      	uxtb	r2, r3
   13eb6:	f64a 1371 	movw	r3, #43377	; 0xa971
   13eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ebe:	701a      	strb	r2, [r3, #0]
   13ec0:	f64a 1370 	movw	r3, #43376	; 0xa970
   13ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ec8:	2200      	movs	r2, #0
   13eca:	701a      	strb	r2, [r3, #0]
   13ecc:	f64a 1386 	movw	r3, #43398	; 0xa986
   13ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ed4:	2200      	movs	r2, #0
   13ed6:	801a      	strh	r2, [r3, #0]
   13ed8:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ee0:	681a      	ldr	r2, [r3, #0]
   13ee2:	f64a 1374 	movw	r3, #43380	; 0xa974
   13ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eea:	601a      	str	r2, [r3, #0]
   13eec:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ef4:	681a      	ldr	r2, [r3, #0]
   13ef6:	f64a 1378 	movw	r3, #43384	; 0xa978
   13efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13efe:	601a      	str	r2, [r3, #0]
   13f00:	f64a 1384 	movw	r3, #43396	; 0xa984
   13f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f08:	2200      	movs	r2, #0
   13f0a:	801a      	strh	r2, [r3, #0]
   13f0c:	f64a 1388 	movw	r3, #43400	; 0xa988
   13f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f14:	f04f 0200 	mov.w	r2, #0
   13f18:	601a      	str	r2, [r3, #0]
   13f1a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   13f1c:	372c      	adds	r7, #44	; 0x2c
   13f1e:	46bd      	mov	sp, r7
   13f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f22:	bf00      	nop
   13f24:	f3af 8000 	nop.w
   13f28:	54442d18 	.word	0x54442d18
   13f2c:	3ff921fb 	.word	0x3ff921fb
   13f30:	54442d18 	.word	0x54442d18
   13f34:	400921fb 	.word	0x400921fb

00013f38 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   13f38:	b590      	push	{r4, r7, lr}
   13f3a:	b087      	sub	sp, #28
   13f3c:	af00      	add	r7, sp, #0
   13f3e:	4603      	mov	r3, r0
   13f40:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   13f42:	79f9      	ldrb	r1, [r7, #7]
   13f44:	f240 02bc 	movw	r2, #188	; 0xbc
   13f48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f4c:	460b      	mov	r3, r1
   13f4e:	005b      	lsls	r3, r3, #1
   13f50:	440b      	add	r3, r1
   13f52:	009b      	lsls	r3, r3, #2
   13f54:	4413      	add	r3, r2
   13f56:	681a      	ldr	r2, [r3, #0]
   13f58:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   13f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f60:	681b      	ldr	r3, [r3, #0]
   13f62:	4610      	mov	r0, r2
   13f64:	4619      	mov	r1, r3
   13f66:	f003 fcd1 	bl	1790c <__aeabi_fsub>
   13f6a:	4603      	mov	r3, r0
   13f6c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   13f6e:	79f9      	ldrb	r1, [r7, #7]
   13f70:	f240 02bc 	movw	r2, #188	; 0xbc
   13f74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f78:	460b      	mov	r3, r1
   13f7a:	005b      	lsls	r3, r3, #1
   13f7c:	440b      	add	r3, r1
   13f7e:	009b      	lsls	r3, r3, #2
   13f80:	4413      	add	r3, r2
   13f82:	3304      	adds	r3, #4
   13f84:	681a      	ldr	r2, [r3, #0]
   13f86:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   13f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f8e:	681b      	ldr	r3, [r3, #0]
   13f90:	4610      	mov	r0, r2
   13f92:	4619      	mov	r1, r3
   13f94:	f003 fcba 	bl	1790c <__aeabi_fsub>
   13f98:	4603      	mov	r3, r0
   13f9a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   13f9c:	6978      	ldr	r0, [r7, #20]
   13f9e:	6979      	ldr	r1, [r7, #20]
   13fa0:	f003 fdbe 	bl	17b20 <__aeabi_fmul>
   13fa4:	4603      	mov	r3, r0
   13fa6:	461c      	mov	r4, r3
   13fa8:	6938      	ldr	r0, [r7, #16]
   13faa:	6939      	ldr	r1, [r7, #16]
   13fac:	f003 fdb8 	bl	17b20 <__aeabi_fmul>
   13fb0:	4603      	mov	r3, r0
   13fb2:	4620      	mov	r0, r4
   13fb4:	4619      	mov	r1, r3
   13fb6:	f003 fcab 	bl	17910 <__addsf3>
   13fba:	4603      	mov	r3, r0
   13fbc:	461a      	mov	r2, r3
   13fbe:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
   13fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   13fc8:	f64a 4304 	movw	r3, #44036	; 0xac04
   13fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd0:	681b      	ldr	r3, [r3, #0]
   13fd2:	4618      	mov	r0, r3
   13fd4:	f04f 0100 	mov.w	r1, #0
   13fd8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   13fdc:	f003 fda0 	bl	17b20 <__aeabi_fmul>
   13fe0:	4603      	mov	r3, r0
   13fe2:	461a      	mov	r2, r3
   13fe4:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   13fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fec:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   13fee:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   13ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff6:	681b      	ldr	r3, [r3, #0]
   13ff8:	4618      	mov	r0, r3
   13ffa:	f04f 0100 	mov.w	r1, #0
   13ffe:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14002:	f003 ff2b 	bl	17e5c <__aeabi_fcmplt>
   14006:	4603      	mov	r3, r0
   14008:	2b00      	cmp	r3, #0
   1400a:	d004      	beq.n	14016 <approaching+0xde>
   1400c:	f04f 0200 	mov.w	r2, #0
   14010:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14014:	e004      	b.n	14020 <approaching+0xe8>
   14016:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   1401a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1401e:	681a      	ldr	r2, [r3, #0]
   14020:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   14024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14028:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1402a:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   1402e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14032:	681a      	ldr	r2, [r3, #0]
   14034:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	681b      	ldr	r3, [r3, #0]
   1403e:	4610      	mov	r0, r2
   14040:	4619      	mov	r1, r3
   14042:	f003 fd6d 	bl	17b20 <__aeabi_fmul>
   14046:	4603      	mov	r3, r0
   14048:	461a      	mov	r2, r3
   1404a:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
   1404e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14052:	681b      	ldr	r3, [r3, #0]
   14054:	4610      	mov	r0, r2
   14056:	4619      	mov	r1, r3
   14058:	f003 ff1e 	bl	17e98 <__aeabi_fcmpgt>
   1405c:	4603      	mov	r3, r0
   1405e:	2b00      	cmp	r3, #0
   14060:	d001      	beq.n	14066 <approaching+0x12e>
    return TRUE;
   14062:	2301      	movs	r3, #1
   14064:	e048      	b.n	140f8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14066:	79f9      	ldrb	r1, [r7, #7]
   14068:	f240 02bc 	movw	r2, #188	; 0xbc
   1406c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14070:	460b      	mov	r3, r1
   14072:	005b      	lsls	r3, r3, #1
   14074:	440b      	add	r3, r1
   14076:	009b      	lsls	r3, r3, #2
   14078:	4413      	add	r3, r2
   1407a:	681a      	ldr	r2, [r3, #0]
   1407c:	f64a 1374 	movw	r3, #43380	; 0xa974
   14080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14084:	681b      	ldr	r3, [r3, #0]
   14086:	4610      	mov	r0, r2
   14088:	4619      	mov	r1, r3
   1408a:	f003 fc3f 	bl	1790c <__aeabi_fsub>
   1408e:	4603      	mov	r3, r0
   14090:	4618      	mov	r0, r3
   14092:	6979      	ldr	r1, [r7, #20]
   14094:	f003 fd44 	bl	17b20 <__aeabi_fmul>
   14098:	4603      	mov	r3, r0
   1409a:	461c      	mov	r4, r3
   1409c:	79f9      	ldrb	r1, [r7, #7]
   1409e:	f240 02bc 	movw	r2, #188	; 0xbc
   140a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   140a6:	460b      	mov	r3, r1
   140a8:	005b      	lsls	r3, r3, #1
   140aa:	440b      	add	r3, r1
   140ac:	009b      	lsls	r3, r3, #2
   140ae:	4413      	add	r3, r2
   140b0:	3304      	adds	r3, #4
   140b2:	681a      	ldr	r2, [r3, #0]
   140b4:	f64a 1378 	movw	r3, #43384	; 0xa978
   140b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140bc:	681b      	ldr	r3, [r3, #0]
   140be:	4610      	mov	r0, r2
   140c0:	4619      	mov	r1, r3
   140c2:	f003 fc23 	bl	1790c <__aeabi_fsub>
   140c6:	4603      	mov	r3, r0
   140c8:	4618      	mov	r0, r3
   140ca:	6939      	ldr	r1, [r7, #16]
   140cc:	f003 fd28 	bl	17b20 <__aeabi_fmul>
   140d0:	4603      	mov	r3, r0
   140d2:	4620      	mov	r0, r4
   140d4:	4619      	mov	r1, r3
   140d6:	f003 fc1b 	bl	17910 <__addsf3>
   140da:	4603      	mov	r3, r0
   140dc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   140de:	2301      	movs	r3, #1
   140e0:	461c      	mov	r4, r3
   140e2:	68f8      	ldr	r0, [r7, #12]
   140e4:	f04f 0100 	mov.w	r1, #0
   140e8:	f003 feb8 	bl	17e5c <__aeabi_fcmplt>
   140ec:	4603      	mov	r3, r0
   140ee:	2b00      	cmp	r3, #0
   140f0:	d101      	bne.n	140f6 <approaching+0x1be>
   140f2:	2300      	movs	r3, #0
   140f4:	461c      	mov	r4, r3
   140f6:	b2e3      	uxtb	r3, r4
}
   140f8:	4618      	mov	r0, r3
   140fa:	371c      	adds	r7, #28
   140fc:	46bd      	mov	sp, r7
   140fe:	bd90      	pop	{r4, r7, pc}

00014100 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14100:	b5b0      	push	{r4, r5, r7, lr}
   14102:	b082      	sub	sp, #8
   14104:	af00      	add	r7, sp, #0
   14106:	6078      	str	r0, [r7, #4]
   14108:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1410a:	f64a 1390 	movw	r3, #43408	; 0xa990
   1410e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14112:	687a      	ldr	r2, [r7, #4]
   14114:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14116:	f64a 1394 	movw	r3, #43412	; 0xa994
   1411a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1411e:	683a      	ldr	r2, [r7, #0]
   14120:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14122:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   14126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1412a:	681b      	ldr	r3, [r3, #0]
   1412c:	6838      	ldr	r0, [r7, #0]
   1412e:	4619      	mov	r1, r3
   14130:	f003 fbec 	bl	1790c <__aeabi_fsub>
   14134:	4603      	mov	r3, r0
   14136:	4618      	mov	r0, r3
   14138:	f003 f85e 	bl	171f8 <__aeabi_f2d>
   1413c:	4604      	mov	r4, r0
   1413e:	460d      	mov	r5, r1
   14140:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   14144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14148:	681b      	ldr	r3, [r3, #0]
   1414a:	6878      	ldr	r0, [r7, #4]
   1414c:	4619      	mov	r1, r3
   1414e:	f003 fbdd 	bl	1790c <__aeabi_fsub>
   14152:	4603      	mov	r3, r0
   14154:	4618      	mov	r0, r3
   14156:	f003 f84f 	bl	171f8 <__aeabi_f2d>
   1415a:	4602      	mov	r2, r0
   1415c:	460b      	mov	r3, r1
   1415e:	4620      	mov	r0, r4
   14160:	4629      	mov	r1, r5
   14162:	f001 f929 	bl	153b8 <pp_atan2>
   14166:	4602      	mov	r2, r0
   14168:	460b      	mov	r3, r1
   1416a:	a10b      	add	r1, pc, #44	; (adr r1, 14198 <fly_to_xy+0x98>)
   1416c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14170:	f002 fee2 	bl	16f38 <__aeabi_dsub>
   14174:	4602      	mov	r2, r0
   14176:	460b      	mov	r3, r1
   14178:	4610      	mov	r0, r2
   1417a:	4619      	mov	r1, r3
   1417c:	f003 fb72 	bl	17864 <__aeabi_d2f>
   14180:	4602      	mov	r2, r0
   14182:	f64a 135c 	movw	r3, #43356	; 0xa95c
   14186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1418a:	601a      	str	r2, [r3, #0]
}
   1418c:	3708      	adds	r7, #8
   1418e:	46bd      	mov	sp, r7
   14190:	bdb0      	pop	{r4, r5, r7, pc}
   14192:	bf00      	nop
   14194:	f3af 8000 	nop.w
   14198:	54442d18 	.word	0x54442d18
   1419c:	3ff921fb 	.word	0x3ff921fb

000141a0 <fly_to>:

static void fly_to(uint8_t wp) { 
   141a0:	b580      	push	{r7, lr}
   141a2:	b082      	sub	sp, #8
   141a4:	af00      	add	r7, sp, #0
   141a6:	4603      	mov	r3, r0
   141a8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   141aa:	79f9      	ldrb	r1, [r7, #7]
   141ac:	f240 02bc 	movw	r2, #188	; 0xbc
   141b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141b4:	460b      	mov	r3, r1
   141b6:	005b      	lsls	r3, r3, #1
   141b8:	440b      	add	r3, r1
   141ba:	009b      	lsls	r3, r3, #2
   141bc:	4413      	add	r3, r2
   141be:	6818      	ldr	r0, [r3, #0]
   141c0:	79f9      	ldrb	r1, [r7, #7]
   141c2:	f240 02bc 	movw	r2, #188	; 0xbc
   141c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141ca:	460b      	mov	r3, r1
   141cc:	005b      	lsls	r3, r3, #1
   141ce:	440b      	add	r3, r1
   141d0:	009b      	lsls	r3, r3, #2
   141d2:	4413      	add	r3, r2
   141d4:	3304      	adds	r3, #4
   141d6:	681b      	ldr	r3, [r3, #0]
   141d8:	4619      	mov	r1, r3
   141da:	f7ff ff91 	bl	14100 <fly_to_xy>
}
   141de:	3708      	adds	r7, #8
   141e0:	46bd      	mov	sp, r7
   141e2:	bd80      	pop	{r7, pc}

000141e4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   141e4:	b5b0      	push	{r4, r5, r7, lr}
   141e6:	b088      	sub	sp, #32
   141e8:	af00      	add	r7, sp, #0
   141ea:	4602      	mov	r2, r0
   141ec:	460b      	mov	r3, r1
   141ee:	71fa      	strb	r2, [r7, #7]
   141f0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   141f2:	79f9      	ldrb	r1, [r7, #7]
   141f4:	f240 02bc 	movw	r2, #188	; 0xbc
   141f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141fc:	460b      	mov	r3, r1
   141fe:	005b      	lsls	r3, r3, #1
   14200:	440b      	add	r3, r1
   14202:	009b      	lsls	r3, r3, #2
   14204:	4413      	add	r3, r2
   14206:	681b      	ldr	r3, [r3, #0]
   14208:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   1420a:	79f9      	ldrb	r1, [r7, #7]
   1420c:	f240 02bc 	movw	r2, #188	; 0xbc
   14210:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14214:	460b      	mov	r3, r1
   14216:	005b      	lsls	r3, r3, #1
   14218:	440b      	add	r3, r1
   1421a:	009b      	lsls	r3, r3, #2
   1421c:	4413      	add	r3, r2
   1421e:	3304      	adds	r3, #4
   14220:	681b      	ldr	r3, [r3, #0]
   14222:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14224:	79b9      	ldrb	r1, [r7, #6]
   14226:	f240 02bc 	movw	r2, #188	; 0xbc
   1422a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1422e:	460b      	mov	r3, r1
   14230:	005b      	lsls	r3, r3, #1
   14232:	440b      	add	r3, r1
   14234:	009b      	lsls	r3, r3, #2
   14236:	4413      	add	r3, r2
   14238:	681b      	ldr	r3, [r3, #0]
   1423a:	4618      	mov	r0, r3
   1423c:	69f9      	ldr	r1, [r7, #28]
   1423e:	f003 fb65 	bl	1790c <__aeabi_fsub>
   14242:	4603      	mov	r3, r0
   14244:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14246:	79b9      	ldrb	r1, [r7, #6]
   14248:	f240 02bc 	movw	r2, #188	; 0xbc
   1424c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14250:	460b      	mov	r3, r1
   14252:	005b      	lsls	r3, r3, #1
   14254:	440b      	add	r3, r1
   14256:	009b      	lsls	r3, r3, #2
   14258:	4413      	add	r3, r2
   1425a:	3304      	adds	r3, #4
   1425c:	681b      	ldr	r3, [r3, #0]
   1425e:	4618      	mov	r0, r3
   14260:	69b9      	ldr	r1, [r7, #24]
   14262:	f003 fb53 	bl	1790c <__aeabi_fsub>
   14266:	4603      	mov	r3, r0
   14268:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1426a:	6978      	ldr	r0, [r7, #20]
   1426c:	6979      	ldr	r1, [r7, #20]
   1426e:	f003 fc57 	bl	17b20 <__aeabi_fmul>
   14272:	4603      	mov	r3, r0
   14274:	461c      	mov	r4, r3
   14276:	6938      	ldr	r0, [r7, #16]
   14278:	6939      	ldr	r1, [r7, #16]
   1427a:	f003 fc51 	bl	17b20 <__aeabi_fmul>
   1427e:	4603      	mov	r3, r0
   14280:	4620      	mov	r0, r4
   14282:	4619      	mov	r1, r3
   14284:	f003 fb44 	bl	17910 <__addsf3>
   14288:	4603      	mov	r3, r0
   1428a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1428c:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   14290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14294:	681b      	ldr	r3, [r3, #0]
   14296:	4618      	mov	r0, r3
   14298:	69f9      	ldr	r1, [r7, #28]
   1429a:	f003 fb37 	bl	1790c <__aeabi_fsub>
   1429e:	4603      	mov	r3, r0
   142a0:	4618      	mov	r0, r3
   142a2:	6979      	ldr	r1, [r7, #20]
   142a4:	f003 fc3c 	bl	17b20 <__aeabi_fmul>
   142a8:	4603      	mov	r3, r0
   142aa:	461c      	mov	r4, r3
   142ac:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   142b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142b4:	681b      	ldr	r3, [r3, #0]
   142b6:	4618      	mov	r0, r3
   142b8:	69b9      	ldr	r1, [r7, #24]
   142ba:	f003 fb27 	bl	1790c <__aeabi_fsub>
   142be:	4603      	mov	r3, r0
   142c0:	4618      	mov	r0, r3
   142c2:	6939      	ldr	r1, [r7, #16]
   142c4:	f003 fc2c 	bl	17b20 <__aeabi_fmul>
   142c8:	4603      	mov	r3, r0
   142ca:	4620      	mov	r0, r4
   142cc:	4619      	mov	r1, r3
   142ce:	f003 fb1f 	bl	17910 <__addsf3>
   142d2:	4603      	mov	r3, r0
   142d4:	4618      	mov	r0, r3
   142d6:	68f9      	ldr	r1, [r7, #12]
   142d8:	f003 fcd6 	bl	17c88 <__aeabi_fdiv>
   142dc:	4603      	mov	r3, r0
   142de:	461a      	mov	r2, r3
   142e0:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   142e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   142ea:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   142ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142f2:	681b      	ldr	r3, [r3, #0]
   142f4:	4618      	mov	r0, r3
   142f6:	f04f 0100 	mov.w	r1, #0
   142fa:	f003 fdc3 	bl	17e84 <__aeabi_fcmpge>
   142fe:	4603      	mov	r3, r0
   14300:	2b00      	cmp	r3, #0
   14302:	d005      	beq.n	14310 <route_to+0x12c>
   14304:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   14308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1430c:	681a      	ldr	r2, [r3, #0]
   1430e:	e001      	b.n	14314 <route_to+0x130>
   14310:	f04f 0200 	mov.w	r2, #0
   14314:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   14318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   1431e:	68f8      	ldr	r0, [r7, #12]
   14320:	f002 ff6a 	bl	171f8 <__aeabi_f2d>
   14324:	4602      	mov	r2, r0
   14326:	460b      	mov	r3, r1
   14328:	4610      	mov	r0, r2
   1432a:	4619      	mov	r1, r3
   1432c:	f001 f9f4 	bl	15718 <pp_sqrt>
   14330:	4602      	mov	r2, r0
   14332:	460b      	mov	r3, r1
   14334:	4610      	mov	r0, r2
   14336:	4619      	mov	r1, r3
   14338:	f003 fa94 	bl	17864 <__aeabi_d2f>
   1433c:	4602      	mov	r2, r0
   1433e:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14346:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14348:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   1434c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14350:	681b      	ldr	r3, [r3, #0]
   14352:	4618      	mov	r0, r3
   14354:	f002 ff50 	bl	171f8 <__aeabi_f2d>
   14358:	4604      	mov	r4, r0
   1435a:	460d      	mov	r5, r1
   1435c:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   14360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14364:	681a      	ldr	r2, [r3, #0]
   14366:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   1436a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1436e:	681b      	ldr	r3, [r3, #0]
   14370:	4610      	mov	r0, r2
   14372:	4619      	mov	r1, r3
   14374:	f003 fc88 	bl	17c88 <__aeabi_fdiv>
   14378:	4603      	mov	r3, r0
   1437a:	4618      	mov	r0, r3
   1437c:	f04f 0100 	mov.w	r1, #0
   14380:	f003 fd80 	bl	17e84 <__aeabi_fcmpge>
   14384:	4603      	mov	r3, r0
   14386:	2b00      	cmp	r3, #0
   14388:	d014      	beq.n	143b4 <route_to+0x1d0>
   1438a:	f64a 13b0 	movw	r3, #43440	; 0xa9b0
   1438e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14392:	681a      	ldr	r2, [r3, #0]
   14394:	f64a 13b8 	movw	r3, #43448	; 0xa9b8
   14398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1439c:	681b      	ldr	r3, [r3, #0]
   1439e:	4610      	mov	r0, r2
   143a0:	4619      	mov	r1, r3
   143a2:	f003 fc71 	bl	17c88 <__aeabi_fdiv>
   143a6:	4603      	mov	r3, r0
   143a8:	4618      	mov	r0, r3
   143aa:	f002 ff25 	bl	171f8 <__aeabi_f2d>
   143ae:	4602      	mov	r2, r0
   143b0:	460b      	mov	r3, r1
   143b2:	e003      	b.n	143bc <route_to+0x1d8>
   143b4:	f04f 0200 	mov.w	r2, #0
   143b8:	f04f 0300 	mov.w	r3, #0
   143bc:	4620      	mov	r0, r4
   143be:	4629      	mov	r1, r5
   143c0:	f002 fdbc 	bl	16f3c <__adddf3>
   143c4:	4602      	mov	r2, r0
   143c6:	460b      	mov	r3, r1
   143c8:	4610      	mov	r0, r2
   143ca:	4619      	mov	r1, r3
   143cc:	f003 fa4a 	bl	17864 <__aeabi_d2f>
   143d0:	4602      	mov	r2, r0
   143d2:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   143d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143da:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   143dc:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   143e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e4:	681b      	ldr	r3, [r3, #0]
   143e6:	4618      	mov	r0, r3
   143e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   143ec:	f003 fd4a 	bl	17e84 <__aeabi_fcmpge>
   143f0:	4603      	mov	r3, r0
   143f2:	2b00      	cmp	r3, #0
   143f4:	d002      	beq.n	143fc <route_to+0x218>
   143f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   143fa:	e004      	b.n	14406 <route_to+0x222>
   143fc:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   14400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14404:	681a      	ldr	r2, [r3, #0]
   14406:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   1440a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1440e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14410:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   14414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14418:	681b      	ldr	r3, [r3, #0]
   1441a:	4618      	mov	r0, r3
   1441c:	6979      	ldr	r1, [r7, #20]
   1441e:	f003 fb7f 	bl	17b20 <__aeabi_fmul>
   14422:	4603      	mov	r3, r0
   14424:	4618      	mov	r0, r3
   14426:	69f9      	ldr	r1, [r7, #28]
   14428:	f003 fa72 	bl	17910 <__addsf3>
   1442c:	4603      	mov	r3, r0
   1442e:	461c      	mov	r4, r3
   14430:	f64a 13b4 	movw	r3, #43444	; 0xa9b4
   14434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14438:	681b      	ldr	r3, [r3, #0]
   1443a:	4618      	mov	r0, r3
   1443c:	6939      	ldr	r1, [r7, #16]
   1443e:	f003 fb6f 	bl	17b20 <__aeabi_fmul>
   14442:	4603      	mov	r3, r0
   14444:	4618      	mov	r0, r3
   14446:	69b9      	ldr	r1, [r7, #24]
   14448:	f003 fa62 	bl	17910 <__addsf3>
   1444c:	4603      	mov	r3, r0
   1444e:	4620      	mov	r0, r4
   14450:	4619      	mov	r1, r3
   14452:	f7ff fe55 	bl	14100 <fly_to_xy>
}
   14456:	3720      	adds	r7, #32
   14458:	46bd      	mov	sp, r7
   1445a:	bdb0      	pop	{r4, r5, r7, pc}

0001445c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   1445c:	b590      	push	{r4, r7, lr}
   1445e:	b083      	sub	sp, #12
   14460:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14462:	f240 03bc 	movw	r3, #188	; 0xbc
   14466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446a:	681a      	ldr	r2, [r3, #0]
   1446c:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   14470:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14474:	681b      	ldr	r3, [r3, #0]
   14476:	4610      	mov	r0, r2
   14478:	4619      	mov	r1, r3
   1447a:	f003 fa47 	bl	1790c <__aeabi_fsub>
   1447e:	4603      	mov	r3, r0
   14480:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14482:	f240 03bc 	movw	r3, #188	; 0xbc
   14486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1448a:	685a      	ldr	r2, [r3, #4]
   1448c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   14490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14494:	681b      	ldr	r3, [r3, #0]
   14496:	4610      	mov	r0, r2
   14498:	4619      	mov	r1, r3
   1449a:	f003 fa37 	bl	1790c <__aeabi_fsub>
   1449e:	4603      	mov	r3, r0
   144a0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   144a2:	6878      	ldr	r0, [r7, #4]
   144a4:	6879      	ldr	r1, [r7, #4]
   144a6:	f003 fb3b 	bl	17b20 <__aeabi_fmul>
   144aa:	4603      	mov	r3, r0
   144ac:	461c      	mov	r4, r3
   144ae:	6838      	ldr	r0, [r7, #0]
   144b0:	6839      	ldr	r1, [r7, #0]
   144b2:	f003 fb35 	bl	17b20 <__aeabi_fmul>
   144b6:	4603      	mov	r3, r0
   144b8:	4620      	mov	r0, r4
   144ba:	4619      	mov	r1, r3
   144bc:	f003 fa28 	bl	17910 <__addsf3>
   144c0:	4603      	mov	r3, r0
   144c2:	461a      	mov	r2, r3
   144c4:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
   144c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144cc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   144ce:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
   144d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144d6:	681b      	ldr	r3, [r3, #0]
   144d8:	2201      	movs	r2, #1
   144da:	4614      	mov	r4, r2
   144dc:	4618      	mov	r0, r3
   144de:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   144e2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   144e6:	f003 fcd7 	bl	17e98 <__aeabi_fcmpgt>
   144ea:	4603      	mov	r3, r0
   144ec:	2b00      	cmp	r3, #0
   144ee:	d101      	bne.n	144f4 <compute_dist2_to_home+0x98>
   144f0:	2300      	movs	r3, #0
   144f2:	461c      	mov	r4, r3
   144f4:	b2e3      	uxtb	r3, r4
   144f6:	461a      	mov	r2, r3
   144f8:	f64a 13ac 	movw	r3, #43436	; 0xa9ac
   144fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14500:	701a      	strb	r2, [r3, #0]
}
   14502:	370c      	adds	r7, #12
   14504:	46bd      	mov	sp, r7
   14506:	bd90      	pop	{r4, r7, pc}

00014508 <nav_home>:

void nav_home(void) {
   14508:	b580      	push	{r7, lr}
   1450a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   1450c:	f64a 139c 	movw	r3, #43420	; 0xa99c
   14510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14514:	f04f 0200 	mov.w	r2, #0
   14518:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1451a:	f24a 53fd 	movw	r3, #42493	; 0xa5fd
   1451e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14522:	2203      	movs	r2, #3
   14524:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14526:	f240 03b8 	movw	r3, #184	; 0xb8
   1452a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1452e:	f04f 0200 	mov.w	r2, #0
   14532:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14536:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14538:	f7ff ff90 	bl	1445c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   1453c:	f64a 13a8 	movw	r3, #43432	; 0xa9a8
   14540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14544:	681a      	ldr	r2, [r3, #0]
   14546:	f64a 13a4 	movw	r3, #43428	; 0xa9a4
   1454a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1454e:	601a      	str	r2, [r3, #0]
}
   14550:	bd80      	pop	{r7, pc}
   14552:	bf00      	nop

00014554 <nav_update>:

void nav_update(void) {
   14554:	b580      	push	{r7, lr}
   14556:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14558:	f7ff ff80 	bl	1445c <compute_dist2_to_home>

  auto_nav();
   1455c:	f7fd fc0c 	bl	11d78 <auto_nav>
}
   14560:	bd80      	pop	{r7, pc}
   14562:	bf00      	nop

00014564 <nav_init>:


void nav_init(void) {
   14564:	b480      	push	{r7}
   14566:	af00      	add	r7, sp, #0
  nav_block = 0;
   14568:	f64a 1371 	movw	r3, #43377	; 0xa971
   1456c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14570:	2200      	movs	r2, #0
   14572:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14574:	f64a 1370 	movw	r3, #43376	; 0xa970
   14578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1457c:	2200      	movs	r2, #0
   1457e:	701a      	strb	r2, [r3, #0]
}
   14580:	46bd      	mov	sp, r7
   14582:	f85d 7b04 	ldr.w	r7, [sp], #4
   14586:	4770      	bx	lr

00014588 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14588:	b480      	push	{r7}
   1458a:	b083      	sub	sp, #12
   1458c:	af00      	add	r7, sp, #0
   1458e:	4603      	mov	r3, r0
   14590:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14592:	f242 030a 	movw	r3, #8202	; 0x200a
   14596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1459a:	781b      	ldrb	r3, [r3, #0]
   1459c:	b2db      	uxtb	r3, r3
   1459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   145a2:	2b00      	cmp	r3, #0
   145a4:	d028      	beq.n	145f8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   145a6:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
   145aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ae:	781b      	ldrb	r3, [r3, #0]
   145b0:	b2db      	uxtb	r3, r3
   145b2:	461a      	mov	r2, r3
   145b4:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   145b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145bc:	781b      	ldrb	r3, [r3, #0]
   145be:	3301      	adds	r3, #1
   145c0:	429a      	cmp	r2, r3
   145c2:	d100      	bne.n	145c6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   145c4:	e02c      	b.n	14620 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   145c6:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   145ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ce:	781b      	ldrb	r3, [r3, #0]
   145d0:	461a      	mov	r2, r3
   145d2:	f64a 13c8 	movw	r3, #43464	; 0xa9c8
   145d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145da:	79f9      	ldrb	r1, [r7, #7]
   145dc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   145de:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   145e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	3301      	adds	r3, #1
   145ea:	b2da      	uxtb	r2, r3
   145ec:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   145f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145f4:	701a      	strb	r2, [r3, #0]
   145f6:	e013      	b.n	14620 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   145f8:	f242 030c 	movw	r3, #8204	; 0x200c
   145fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14600:	79fa      	ldrb	r2, [r7, #7]
   14602:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14604:	f242 030a 	movw	r3, #8202	; 0x200a
   14608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1460c:	f242 020a 	movw	r2, #8202	; 0x200a
   14610:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14614:	7812      	ldrb	r2, [r2, #0]
   14616:	b2d2      	uxtb	r2, r2
   14618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1461c:	b2d2      	uxtb	r2, r2
   1461e:	701a      	strb	r2, [r3, #0]
  }
}
   14620:	370c      	adds	r7, #12
   14622:	46bd      	mov	sp, r7
   14624:	f85d 7b04 	ldr.w	r7, [sp], #4
   14628:	4770      	bx	lr
   1462a:	bf00      	nop

0001462c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   1462c:	b480      	push	{r7}
   1462e:	b083      	sub	sp, #12
   14630:	af00      	add	r7, sp, #0
   14632:	4603      	mov	r3, r0
   14634:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14636:	f242 039a 	movw	r3, #8346	; 0x209a
   1463a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	b2db      	uxtb	r3, r3
   14642:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14646:	2b00      	cmp	r3, #0
   14648:	d028      	beq.n	1469c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   1464a:	f64a 23c9 	movw	r3, #43721	; 0xaac9
   1464e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14652:	781b      	ldrb	r3, [r3, #0]
   14654:	b2db      	uxtb	r3, r3
   14656:	461a      	mov	r2, r3
   14658:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   1465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14660:	781b      	ldrb	r3, [r3, #0]
   14662:	3301      	adds	r3, #1
   14664:	429a      	cmp	r2, r3
   14666:	d100      	bne.n	1466a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14668:	e02c      	b.n	146c4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   1466a:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   1466e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14672:	781b      	ldrb	r3, [r3, #0]
   14674:	461a      	mov	r2, r3
   14676:	f64a 23cc 	movw	r3, #43724	; 0xaacc
   1467a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1467e:	79f9      	ldrb	r1, [r7, #7]
   14680:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14682:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   14686:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1468a:	781b      	ldrb	r3, [r3, #0]
   1468c:	3301      	adds	r3, #1
   1468e:	b2da      	uxtb	r2, r3
   14690:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   14694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14698:	701a      	strb	r2, [r3, #0]
   1469a:	e013      	b.n	146c4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   1469c:	f242 039c 	movw	r3, #8348	; 0x209c
   146a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146a4:	79fa      	ldrb	r2, [r7, #7]
   146a6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   146a8:	f242 039a 	movw	r3, #8346	; 0x209a
   146ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146b0:	f242 029a 	movw	r2, #8346	; 0x209a
   146b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146b8:	7812      	ldrb	r2, [r2, #0]
   146ba:	b2d2      	uxtb	r2, r2
   146bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   146c0:	b2d2      	uxtb	r2, r2
   146c2:	701a      	strb	r2, [r3, #0]
  }
}
   146c4:	370c      	adds	r7, #12
   146c6:	46bd      	mov	sp, r7
   146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   146cc:	4770      	bx	lr
   146ce:	bf00      	nop

000146d0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   146d0:	b580      	push	{r7, lr}
   146d2:	b084      	sub	sp, #16
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   146d8:	2300      	movs	r3, #0
   146da:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   146dc:	e009      	b.n	146f2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   146de:	7bfb      	ldrb	r3, [r7, #15]
   146e0:	687a      	ldr	r2, [r7, #4]
   146e2:	4413      	add	r3, r2
   146e4:	781b      	ldrb	r3, [r3, #0]
   146e6:	4618      	mov	r0, r3
   146e8:	f7ff ff4e 	bl	14588 <uart0_transmit>
    i++;
   146ec:	7bfb      	ldrb	r3, [r7, #15]
   146ee:	3301      	adds	r3, #1
   146f0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   146f2:	7bfb      	ldrb	r3, [r7, #15]
   146f4:	687a      	ldr	r2, [r7, #4]
   146f6:	4413      	add	r3, r2
   146f8:	781b      	ldrb	r3, [r3, #0]
   146fa:	2b00      	cmp	r3, #0
   146fc:	d1ef      	bne.n	146de <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   146fe:	3710      	adds	r7, #16
   14700:	46bd      	mov	sp, r7
   14702:	bd80      	pop	{r7, pc}

00014704 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14704:	b590      	push	{r4, r7, lr}
   14706:	b089      	sub	sp, #36	; 0x24
   14708:	af00      	add	r7, sp, #0
   1470a:	4603      	mov	r3, r0
   1470c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1470e:	f248 13b0 	movw	r3, #33200	; 0x81b0
   14712:	f2c0 0301 	movt	r3, #1
   14716:	f107 040c 	add.w	r4, r7, #12
   1471a:	6818      	ldr	r0, [r3, #0]
   1471c:	6859      	ldr	r1, [r3, #4]
   1471e:	689a      	ldr	r2, [r3, #8]
   14720:	68db      	ldr	r3, [r3, #12]
   14722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14724:	79fb      	ldrb	r3, [r7, #7]
   14726:	091b      	lsrs	r3, r3, #4
   14728:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1472a:	79fb      	ldrb	r3, [r7, #7]
   1472c:	f003 030f 	and.w	r3, r3, #15
   14730:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14732:	230f      	movs	r3, #15
   14734:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14736:	230f      	movs	r3, #15
   14738:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   1473a:	7ffb      	ldrb	r3, [r7, #31]
   1473c:	f107 0220 	add.w	r2, r7, #32
   14740:	4413      	add	r3, r2
   14742:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14746:	4618      	mov	r0, r3
   14748:	f7ff ff1e 	bl	14588 <uart0_transmit>
  uart0_transmit(hex[low]);
   1474c:	7fbb      	ldrb	r3, [r7, #30]
   1474e:	f107 0220 	add.w	r2, r7, #32
   14752:	4413      	add	r3, r2
   14754:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14758:	4618      	mov	r0, r3
   1475a:	f7ff ff15 	bl	14588 <uart0_transmit>
}
   1475e:	3724      	adds	r7, #36	; 0x24
   14760:	46bd      	mov	sp, r7
   14762:	bd90      	pop	{r4, r7, pc}

00014764 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14764:	b480      	push	{r7}
   14766:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14768:	f64a 13c4 	movw	r3, #43460	; 0xa9c4
   1476c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14770:	781a      	ldrb	r2, [r3, #0]
   14772:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
   14776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1477a:	781b      	ldrb	r3, [r3, #0]
   1477c:	b2db      	uxtb	r3, r3
   1477e:	429a      	cmp	r2, r3
   14780:	d10e      	bne.n	147a0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14782:	f242 030a 	movw	r3, #8202	; 0x200a
   14786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1478a:	f242 020a 	movw	r2, #8202	; 0x200a
   1478e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14792:	7812      	ldrb	r2, [r2, #0]
   14794:	b2d2      	uxtb	r2, r2
   14796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1479a:	b2d2      	uxtb	r2, r2
   1479c:	701a      	strb	r2, [r3, #0]
   1479e:	e01d      	b.n	147dc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   147a0:	f242 030c 	movw	r3, #8204	; 0x200c
   147a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147a8:	f64a 12c5 	movw	r2, #43461	; 0xa9c5
   147ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147b0:	7812      	ldrb	r2, [r2, #0]
   147b2:	b2d2      	uxtb	r2, r2
   147b4:	4611      	mov	r1, r2
   147b6:	f64a 12c8 	movw	r2, #43464	; 0xa9c8
   147ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147be:	5c52      	ldrb	r2, [r2, r1]
   147c0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   147c2:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
   147c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147ca:	781b      	ldrb	r3, [r3, #0]
   147cc:	b2db      	uxtb	r3, r3
   147ce:	3301      	adds	r3, #1
   147d0:	b2da      	uxtb	r2, r3
   147d2:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
   147d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147da:	701a      	strb	r2, [r3, #0]
  }
}
   147dc:	46bd      	mov	sp, r7
   147de:	f85d 7b04 	ldr.w	r7, [sp], #4
   147e2:	4770      	bx	lr

000147e4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   147e4:	b480      	push	{r7}
   147e6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   147e8:	f64a 23c8 	movw	r3, #43720	; 0xaac8
   147ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147f0:	781a      	ldrb	r2, [r3, #0]
   147f2:	f64a 23c9 	movw	r3, #43721	; 0xaac9
   147f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147fa:	781b      	ldrb	r3, [r3, #0]
   147fc:	b2db      	uxtb	r3, r3
   147fe:	429a      	cmp	r2, r3
   14800:	d10e      	bne.n	14820 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14802:	f242 039a 	movw	r3, #8346	; 0x209a
   14806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1480a:	f242 029a 	movw	r2, #8346	; 0x209a
   1480e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14812:	7812      	ldrb	r2, [r2, #0]
   14814:	b2d2      	uxtb	r2, r2
   14816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1481a:	b2d2      	uxtb	r2, r2
   1481c:	701a      	strb	r2, [r3, #0]
   1481e:	e01d      	b.n	1485c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14820:	f242 039c 	movw	r3, #8348	; 0x209c
   14824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14828:	f64a 22c9 	movw	r2, #43721	; 0xaac9
   1482c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14830:	7812      	ldrb	r2, [r2, #0]
   14832:	b2d2      	uxtb	r2, r2
   14834:	4611      	mov	r1, r2
   14836:	f64a 22cc 	movw	r2, #43724	; 0xaacc
   1483a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1483e:	5c52      	ldrb	r2, [r2, r1]
   14840:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14842:	f64a 23c9 	movw	r3, #43721	; 0xaac9
   14846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1484a:	781b      	ldrb	r3, [r3, #0]
   1484c:	b2db      	uxtb	r3, r3
   1484e:	3301      	adds	r3, #1
   14850:	b2da      	uxtb	r2, r3
   14852:	f64a 23c9 	movw	r3, #43721	; 0xaac9
   14856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485a:	701a      	strb	r2, [r3, #0]
  }
}
   1485c:	46bd      	mov	sp, r7
   1485e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14862:	4770      	bx	lr

00014864 <uart0_init>:

void uart0_init( void ) {
   14864:	b480      	push	{r7}
   14866:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14868:	f242 0390 	movw	r3, #8336	; 0x2090
   1486c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14870:	2200      	movs	r2, #0
   14872:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14874:	f242 0309 	movw	r3, #8201	; 0x2009
   14878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1487c:	2219      	movs	r2, #25
   1487e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14880:	f242 030b 	movw	r3, #8203	; 0x200b
   14884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14888:	2200      	movs	r2, #0
   1488a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1488c:	f242 030a 	movw	r3, #8202	; 0x200a
   14890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14894:	2218      	movs	r2, #24
   14896:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14898:	f242 0395 	movw	r3, #8341	; 0x2095
   1489c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a0:	2206      	movs	r2, #6
   148a2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   148a4:	f242 030a 	movw	r3, #8202	; 0x200a
   148a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ac:	f242 020a 	movw	r2, #8202	; 0x200a
   148b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148b4:	7812      	ldrb	r2, [r2, #0]
   148b6:	b2d2      	uxtb	r2, r2
   148b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   148bc:	b2d2      	uxtb	r2, r2
   148be:	701a      	strb	r2, [r3, #0]
}
   148c0:	46bd      	mov	sp, r7
   148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   148c6:	4770      	bx	lr

000148c8 <uart1_init>:

void uart1_init( void ) {
   148c8:	b480      	push	{r7}
   148ca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   148cc:	f242 0398 	movw	r3, #8344	; 0x2098
   148d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148d4:	2200      	movs	r2, #0
   148d6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   148d8:	f242 0399 	movw	r3, #8345	; 0x2099
   148dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148e0:	2219      	movs	r2, #25
   148e2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   148e4:	f242 039b 	movw	r3, #8347	; 0x209b
   148e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ec:	2200      	movs	r2, #0
   148ee:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   148f0:	f242 039a 	movw	r3, #8346	; 0x209a
   148f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f8:	2218      	movs	r2, #24
   148fa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   148fc:	f242 039d 	movw	r3, #8349	; 0x209d
   14900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14904:	2206      	movs	r2, #6
   14906:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14908:	f242 039a 	movw	r3, #8346	; 0x209a
   1490c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14910:	f242 029a 	movw	r2, #8346	; 0x209a
   14914:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14918:	7812      	ldrb	r2, [r2, #0]
   1491a:	b2d2      	uxtb	r2, r2
   1491c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14920:	b2d2      	uxtb	r2, r2
   14922:	701a      	strb	r2, [r3, #0]
}
   14924:	46bd      	mov	sp, r7
   14926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1492a:	4770      	bx	lr
   1492c:	0000      	movs	r0, r0
	...

00014930 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14930:	b480      	push	{r7}
   14932:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14934:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   14938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1493c:	f04f 0200 	mov.w	r2, #0
   14940:	601a      	str	r2, [r3, #0]
   14942:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   14946:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1494a:	f04f 0200 	mov.w	r2, #0
   1494e:	601a      	str	r2, [r3, #0]
   14950:	f64a 33d4 	movw	r3, #43988	; 0xabd4
   14954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14958:	f04f 0200 	mov.w	r2, #0
   1495c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1495e:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   14962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14966:	f04f 0200 	mov.w	r2, #0
   1496a:	601a      	str	r2, [r3, #0]
   1496c:	f64a 33dc 	movw	r3, #43996	; 0xabdc
   14970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14974:	f04f 0200 	mov.w	r2, #0
   14978:	601a      	str	r2, [r3, #0]
   1497a:	f64a 33e0 	movw	r3, #44000	; 0xabe0
   1497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14982:	f04f 0200 	mov.w	r2, #0
   14986:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14988:	f64a 4304 	movw	r3, #44036	; 0xac04
   1498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14990:	f04f 0200 	mov.w	r2, #0
   14994:	601a      	str	r2, [r3, #0]
   14996:	f64a 4308 	movw	r3, #44040	; 0xac08
   1499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1499e:	f04f 0200 	mov.w	r2, #0
   149a2:	601a      	str	r2, [r3, #0]
   149a4:	f64a 33ec 	movw	r3, #44012	; 0xabec
   149a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149ac:	f04f 0200 	mov.w	r2, #0
   149b0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   149b2:	f64a 33f0 	movw	r3, #44016	; 0xabf0
   149b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149ba:	f04f 0200 	mov.w	r2, #0
   149be:	601a      	str	r2, [r3, #0]
   149c0:	f64a 33f4 	movw	r3, #44020	; 0xabf4
   149c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c8:	f04f 0200 	mov.w	r2, #0
   149cc:	601a      	str	r2, [r3, #0]
   149ce:	f64a 33f8 	movw	r3, #44024	; 0xabf8
   149d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149d6:	f04f 0200 	mov.w	r2, #0
   149da:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   149dc:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   149e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149e4:	2200      	movs	r2, #0
   149e6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   149e8:	f240 038c 	movw	r3, #140	; 0x8c
   149ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149f0:	681a      	ldr	r2, [r3, #0]
   149f2:	f64a 430c 	movw	r3, #44044	; 0xac0c
   149f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149fa:	601a      	str	r2, [r3, #0]
}
   149fc:	46bd      	mov	sp, r7
   149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a02:	4770      	bx	lr

00014a04 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14a04:	b580      	push	{r7, lr}
   14a06:	b082      	sub	sp, #8
   14a08:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14a0a:	f240 0380 	movw	r3, #128	; 0x80
   14a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a12:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14a14:	2b01      	cmp	r3, #1
   14a16:	d105      	bne.n	14a24 <estimator_update_state_infrared+0x20>
   14a18:	f64a 430c 	movw	r3, #44044	; 0xac0c
   14a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	e004      	b.n	14a2e <estimator_update_state_infrared+0x2a>
   14a24:	f240 038c 	movw	r3, #140	; 0x8c
   14a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a2c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14a2e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14a30:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
   14a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a38:	881b      	ldrh	r3, [r3, #0]
   14a3a:	b21b      	sxth	r3, r3
   14a3c:	4618      	mov	r0, r3
   14a3e:	f003 f81b 	bl	17a78 <__aeabi_i2f>
   14a42:	4603      	mov	r3, r0
   14a44:	4618      	mov	r0, r3
   14a46:	6879      	ldr	r1, [r7, #4]
   14a48:	f003 f86a 	bl	17b20 <__aeabi_fmul>
   14a4c:	4603      	mov	r3, r0
   14a4e:	461a      	mov	r2, r3
   14a50:	f64a 33d8 	movw	r3, #43992	; 0xabd8
   14a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a58:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14a5a:	f64a 03ba 	movw	r3, #43194	; 0xa8ba
   14a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a62:	881b      	ldrh	r3, [r3, #0]
   14a64:	b21b      	sxth	r3, r3
   14a66:	4618      	mov	r0, r3
   14a68:	f003 f806 	bl	17a78 <__aeabi_i2f>
   14a6c:	4603      	mov	r3, r0
   14a6e:	4618      	mov	r0, r3
   14a70:	6879      	ldr	r1, [r7, #4]
   14a72:	f003 f855 	bl	17b20 <__aeabi_fmul>
   14a76:	4603      	mov	r3, r0
   14a78:	461a      	mov	r2, r3
   14a7a:	f64a 33e0 	movw	r3, #44000	; 0xabe0
   14a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a82:	601a      	str	r2, [r3, #0]
}
   14a84:	3708      	adds	r7, #8
   14a86:	46bd      	mov	sp, r7
   14a88:	bd80      	pop	{r7, pc}
   14a8a:	bf00      	nop

00014a8c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14a8c:	b5b0      	push	{r4, r5, r7, lr}
   14a8e:	b084      	sub	sp, #16
   14a90:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14a92:	f64a 4318 	movw	r3, #44056	; 0xac18
   14a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a9a:	781b      	ldrb	r3, [r3, #0]
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	f000 81e8 	beq.w	14e72 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14aa2:	f24a 7388 	movw	r3, #42888	; 0xa788
   14aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aaa:	681a      	ldr	r2, [r3, #0]
   14aac:	f64a 431c 	movw	r3, #44060	; 0xac1c
   14ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	4610      	mov	r0, r2
   14ab8:	4619      	mov	r1, r3
   14aba:	f002 ff27 	bl	1790c <__aeabi_fsub>
   14abe:	4603      	mov	r3, r0
   14ac0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14ac2:	68b8      	ldr	r0, [r7, #8]
   14ac4:	f002 fb98 	bl	171f8 <__aeabi_f2d>
   14ac8:	4602      	mov	r2, r0
   14aca:	460b      	mov	r3, r1
   14acc:	4610      	mov	r0, r2
   14ace:	4619      	mov	r1, r3
   14ad0:	a385      	add	r3, pc, #532	; (adr r3, 14ce8 <estimator_update_ir_estim+0x25c>)
   14ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ad6:	f002 fe73 	bl	177c0 <__aeabi_dcmpgt>
   14ada:	4603      	mov	r3, r0
   14adc:	2b00      	cmp	r3, #0
   14ade:	d100      	bne.n	14ae2 <estimator_update_ir_estim+0x56>
   14ae0:	e219      	b.n	14f16 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14ae2:	f64a 4308 	movw	r3, #44040	; 0xac08
   14ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aea:	681a      	ldr	r2, [r3, #0]
   14aec:	f64a 4320 	movw	r3, #44064	; 0xac20
   14af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af4:	681b      	ldr	r3, [r3, #0]
   14af6:	4610      	mov	r0, r2
   14af8:	4619      	mov	r1, r3
   14afa:	f002 ff07 	bl	1790c <__aeabi_fsub>
   14afe:	4603      	mov	r3, r0
   14b00:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14b02:	e013      	b.n	14b2c <estimator_update_ir_estim+0xa0>
   14b04:	68f8      	ldr	r0, [r7, #12]
   14b06:	f002 fb77 	bl	171f8 <__aeabi_f2d>
   14b0a:	4602      	mov	r2, r0
   14b0c:	460b      	mov	r3, r1
   14b0e:	4610      	mov	r0, r2
   14b10:	4619      	mov	r1, r3
   14b12:	a377      	add	r3, pc, #476	; (adr r3, 14cf0 <estimator_update_ir_estim+0x264>)
   14b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b18:	f002 fa0e 	bl	16f38 <__aeabi_dsub>
   14b1c:	4602      	mov	r2, r0
   14b1e:	460b      	mov	r3, r1
   14b20:	4610      	mov	r0, r2
   14b22:	4619      	mov	r1, r3
   14b24:	f002 fe9e 	bl	17864 <__aeabi_d2f>
   14b28:	4603      	mov	r3, r0
   14b2a:	60fb      	str	r3, [r7, #12]
   14b2c:	68f8      	ldr	r0, [r7, #12]
   14b2e:	f002 fb63 	bl	171f8 <__aeabi_f2d>
   14b32:	4602      	mov	r2, r0
   14b34:	460b      	mov	r3, r1
   14b36:	4610      	mov	r0, r2
   14b38:	4619      	mov	r1, r3
   14b3a:	a36f      	add	r3, pc, #444	; (adr r3, 14cf8 <estimator_update_ir_estim+0x26c>)
   14b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b40:	f002 fe3e 	bl	177c0 <__aeabi_dcmpgt>
   14b44:	4603      	mov	r3, r0
   14b46:	2b00      	cmp	r3, #0
   14b48:	d1dc      	bne.n	14b04 <estimator_update_ir_estim+0x78>
   14b4a:	e013      	b.n	14b74 <estimator_update_ir_estim+0xe8>
   14b4c:	68f8      	ldr	r0, [r7, #12]
   14b4e:	f002 fb53 	bl	171f8 <__aeabi_f2d>
   14b52:	4602      	mov	r2, r0
   14b54:	460b      	mov	r3, r1
   14b56:	4610      	mov	r0, r2
   14b58:	4619      	mov	r1, r3
   14b5a:	a365      	add	r3, pc, #404	; (adr r3, 14cf0 <estimator_update_ir_estim+0x264>)
   14b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b60:	f002 f9ec 	bl	16f3c <__adddf3>
   14b64:	4602      	mov	r2, r0
   14b66:	460b      	mov	r3, r1
   14b68:	4610      	mov	r0, r2
   14b6a:	4619      	mov	r1, r3
   14b6c:	f002 fe7a 	bl	17864 <__aeabi_d2f>
   14b70:	4603      	mov	r3, r0
   14b72:	60fb      	str	r3, [r7, #12]
   14b74:	68f8      	ldr	r0, [r7, #12]
   14b76:	f002 fb3f 	bl	171f8 <__aeabi_f2d>
   14b7a:	4602      	mov	r2, r0
   14b7c:	460b      	mov	r3, r1
   14b7e:	4610      	mov	r0, r2
   14b80:	4619      	mov	r1, r3
   14b82:	a35f      	add	r3, pc, #380	; (adr r3, 14d00 <estimator_update_ir_estim+0x274>)
   14b84:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b88:	f002 fdfc 	bl	17784 <__aeabi_dcmplt>
   14b8c:	4603      	mov	r3, r0
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d1dc      	bne.n	14b4c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14b92:	68f8      	ldr	r0, [r7, #12]
   14b94:	68b9      	ldr	r1, [r7, #8]
   14b96:	f003 f877 	bl	17c88 <__aeabi_fdiv>
   14b9a:	4603      	mov	r3, r0
   14b9c:	4618      	mov	r0, r3
   14b9e:	f002 fb2b 	bl	171f8 <__aeabi_f2d>
   14ba2:	4602      	mov	r2, r0
   14ba4:	460b      	mov	r3, r1
   14ba6:	4610      	mov	r0, r2
   14ba8:	4619      	mov	r1, r3
   14baa:	f04f 0200 	mov.w	r2, #0
   14bae:	f04f 0300 	mov.w	r3, #0
   14bb2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14bb6:	f002 fb73 	bl	172a0 <__aeabi_dmul>
   14bba:	4602      	mov	r2, r0
   14bbc:	460b      	mov	r3, r1
   14bbe:	4610      	mov	r0, r2
   14bc0:	4619      	mov	r1, r3
   14bc2:	a351      	add	r3, pc, #324	; (adr r3, 14d08 <estimator_update_ir_estim+0x27c>)
   14bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14bc8:	f002 fc94 	bl	174f4 <__aeabi_ddiv>
   14bcc:	4602      	mov	r2, r0
   14bce:	460b      	mov	r3, r1
   14bd0:	4610      	mov	r0, r2
   14bd2:	4619      	mov	r1, r3
   14bd4:	f002 fe46 	bl	17864 <__aeabi_d2f>
   14bd8:	4603      	mov	r3, r0
   14bda:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14bdc:	e013      	b.n	14c06 <estimator_update_ir_estim+0x17a>
   14bde:	68f8      	ldr	r0, [r7, #12]
   14be0:	f002 fb0a 	bl	171f8 <__aeabi_f2d>
   14be4:	4602      	mov	r2, r0
   14be6:	460b      	mov	r3, r1
   14be8:	4610      	mov	r0, r2
   14bea:	4619      	mov	r1, r3
   14bec:	a340      	add	r3, pc, #256	; (adr r3, 14cf0 <estimator_update_ir_estim+0x264>)
   14bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   14bf2:	f002 f9a1 	bl	16f38 <__aeabi_dsub>
   14bf6:	4602      	mov	r2, r0
   14bf8:	460b      	mov	r3, r1
   14bfa:	4610      	mov	r0, r2
   14bfc:	4619      	mov	r1, r3
   14bfe:	f002 fe31 	bl	17864 <__aeabi_d2f>
   14c02:	4603      	mov	r3, r0
   14c04:	60fb      	str	r3, [r7, #12]
   14c06:	68f8      	ldr	r0, [r7, #12]
   14c08:	f002 faf6 	bl	171f8 <__aeabi_f2d>
   14c0c:	4602      	mov	r2, r0
   14c0e:	460b      	mov	r3, r1
   14c10:	4610      	mov	r0, r2
   14c12:	4619      	mov	r1, r3
   14c14:	a338      	add	r3, pc, #224	; (adr r3, 14cf8 <estimator_update_ir_estim+0x26c>)
   14c16:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c1a:	f002 fdd1 	bl	177c0 <__aeabi_dcmpgt>
   14c1e:	4603      	mov	r3, r0
   14c20:	2b00      	cmp	r3, #0
   14c22:	d1dc      	bne.n	14bde <estimator_update_ir_estim+0x152>
   14c24:	e013      	b.n	14c4e <estimator_update_ir_estim+0x1c2>
   14c26:	68f8      	ldr	r0, [r7, #12]
   14c28:	f002 fae6 	bl	171f8 <__aeabi_f2d>
   14c2c:	4602      	mov	r2, r0
   14c2e:	460b      	mov	r3, r1
   14c30:	4610      	mov	r0, r2
   14c32:	4619      	mov	r1, r3
   14c34:	a32e      	add	r3, pc, #184	; (adr r3, 14cf0 <estimator_update_ir_estim+0x264>)
   14c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c3a:	f002 f97f 	bl	16f3c <__adddf3>
   14c3e:	4602      	mov	r2, r0
   14c40:	460b      	mov	r3, r1
   14c42:	4610      	mov	r0, r2
   14c44:	4619      	mov	r1, r3
   14c46:	f002 fe0d 	bl	17864 <__aeabi_d2f>
   14c4a:	4603      	mov	r3, r0
   14c4c:	60fb      	str	r3, [r7, #12]
   14c4e:	68f8      	ldr	r0, [r7, #12]
   14c50:	f002 fad2 	bl	171f8 <__aeabi_f2d>
   14c54:	4602      	mov	r2, r0
   14c56:	460b      	mov	r3, r1
   14c58:	4610      	mov	r0, r2
   14c5a:	4619      	mov	r1, r3
   14c5c:	a328      	add	r3, pc, #160	; (adr r3, 14d00 <estimator_update_ir_estim+0x274>)
   14c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c62:	f002 fd8f 	bl	17784 <__aeabi_dcmplt>
   14c66:	4603      	mov	r3, r0
   14c68:	2b00      	cmp	r3, #0
   14c6a:	d1dc      	bne.n	14c26 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   14c6c:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
   14c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c74:	881b      	ldrh	r3, [r3, #0]
   14c76:	b21b      	sxth	r3, r3
   14c78:	4618      	mov	r0, r3
   14c7a:	f002 fefd 	bl	17a78 <__aeabi_i2f>
   14c7e:	4602      	mov	r2, r0
   14c80:	f64a 4310 	movw	r3, #44048	; 0xac10
   14c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c88:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   14c8a:	f64a 4314 	movw	r3, #44052	; 0xac14
   14c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c92:	68fa      	ldr	r2, [r7, #12]
   14c94:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   14c96:	68f8      	ldr	r0, [r7, #12]
   14c98:	f04f 0100 	mov.w	r1, #0
   14c9c:	f003 f8de 	bl	17e5c <__aeabi_fcmplt>
   14ca0:	4603      	mov	r3, r0
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d003      	beq.n	14cae <estimator_update_ir_estim+0x222>
   14ca6:	68fb      	ldr	r3, [r7, #12]
   14ca8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   14cac:	e000      	b.n	14cb0 <estimator_update_ir_estim+0x224>
   14cae:	68fb      	ldr	r3, [r7, #12]
   14cb0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   14cb2:	6878      	ldr	r0, [r7, #4]
   14cb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cb8:	f003 f8d0 	bl	17e5c <__aeabi_fcmplt>
   14cbc:	4603      	mov	r3, r0
   14cbe:	2b00      	cmp	r3, #0
   14cc0:	d100      	bne.n	14cc4 <estimator_update_ir_estim+0x238>
   14cc2:	e128      	b.n	14f16 <estimator_update_ir_estim+0x48a>
   14cc4:	6878      	ldr	r0, [r7, #4]
   14cc6:	f002 fa97 	bl	171f8 <__aeabi_f2d>
   14cca:	4602      	mov	r2, r0
   14ccc:	460b      	mov	r3, r1
   14cce:	4610      	mov	r0, r2
   14cd0:	4619      	mov	r1, r3
   14cd2:	a30f      	add	r3, pc, #60	; (adr r3, 14d10 <estimator_update_ir_estim+0x284>)
   14cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cd8:	f002 fd72 	bl	177c0 <__aeabi_dcmpgt>
   14cdc:	4603      	mov	r3, r0
   14cde:	2b00      	cmp	r3, #0
   14ce0:	d11a      	bne.n	14d18 <estimator_update_ir_estim+0x28c>
   14ce2:	e118      	b.n	14f16 <estimator_update_ir_estim+0x48a>
   14ce4:	f3af 8000 	nop.w
   14ce8:	9999999a 	.word	0x9999999a
   14cec:	3fb99999 	.word	0x3fb99999
   14cf0:	54442d18 	.word	0x54442d18
   14cf4:	401921fb 	.word	0x401921fb
   14cf8:	54442d18 	.word	0x54442d18
   14cfc:	400921fb 	.word	0x400921fb
   14d00:	54442d18 	.word	0x54442d18
   14d04:	c00921fb 	.word	0xc00921fb
   14d08:	51eb851f 	.word	0x51eb851f
   14d0c:	40239eb8 	.word	0x40239eb8
   14d10:	9999999a 	.word	0x9999999a
   14d14:	3fa99999 	.word	0x3fa99999
   14d18:	f240 0384 	movw	r3, #132	; 0x84
   14d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d20:	881b      	ldrh	r3, [r3, #0]
   14d22:	b21b      	sxth	r3, r3
   14d24:	425b      	negs	r3, r3
   14d26:	0fda      	lsrs	r2, r3, #31
   14d28:	4413      	add	r3, r2
   14d2a:	105b      	asrs	r3, r3, #1
   14d2c:	461a      	mov	r2, r3
   14d2e:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
   14d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d36:	881b      	ldrh	r3, [r3, #0]
   14d38:	b21b      	sxth	r3, r3
   14d3a:	429a      	cmp	r2, r3
   14d3c:	f280 8098 	bge.w	14e70 <estimator_update_ir_estim+0x3e4>
   14d40:	f240 0384 	movw	r3, #132	; 0x84
   14d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d48:	881b      	ldrh	r3, [r3, #0]
   14d4a:	b21b      	sxth	r3, r3
   14d4c:	0fda      	lsrs	r2, r3, #31
   14d4e:	4413      	add	r3, r2
   14d50:	105b      	asrs	r3, r3, #1
   14d52:	b29a      	uxth	r2, r3
   14d54:	f64a 03b8 	movw	r3, #43192	; 0xa8b8
   14d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d5c:	881b      	ldrh	r3, [r3, #0]
   14d5e:	b212      	sxth	r2, r2
   14d60:	b21b      	sxth	r3, r3
   14d62:	429a      	cmp	r2, r3
   14d64:	f340 8084 	ble.w	14e70 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   14d68:	f64a 4314 	movw	r3, #44052	; 0xac14
   14d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d70:	681a      	ldr	r2, [r3, #0]
   14d72:	f64a 4310 	movw	r3, #44048	; 0xac10
   14d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7a:	681b      	ldr	r3, [r3, #0]
   14d7c:	4610      	mov	r0, r2
   14d7e:	4619      	mov	r1, r3
   14d80:	f002 fece 	bl	17b20 <__aeabi_fmul>
   14d84:	4603      	mov	r3, r0
   14d86:	4618      	mov	r0, r3
   14d88:	f002 fa36 	bl	171f8 <__aeabi_f2d>
   14d8c:	4604      	mov	r4, r0
   14d8e:	460d      	mov	r5, r1
   14d90:	f64a 4324 	movw	r3, #44068	; 0xac24
   14d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d98:	681b      	ldr	r3, [r3, #0]
   14d9a:	4618      	mov	r0, r3
   14d9c:	f002 fa2c 	bl	171f8 <__aeabi_f2d>
   14da0:	4602      	mov	r2, r0
   14da2:	460b      	mov	r3, r1
   14da4:	4610      	mov	r0, r2
   14da6:	4619      	mov	r1, r3
   14da8:	a367      	add	r3, pc, #412	; (adr r3, 14f48 <estimator_update_ir_estim+0x4bc>)
   14daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dae:	f002 fa77 	bl	172a0 <__aeabi_dmul>
   14db2:	4602      	mov	r2, r0
   14db4:	460b      	mov	r3, r1
   14db6:	4620      	mov	r0, r4
   14db8:	4629      	mov	r1, r5
   14dba:	f002 f8bf 	bl	16f3c <__adddf3>
   14dbe:	4602      	mov	r2, r0
   14dc0:	460b      	mov	r3, r1
   14dc2:	4610      	mov	r0, r2
   14dc4:	4619      	mov	r1, r3
   14dc6:	f002 fd4d 	bl	17864 <__aeabi_d2f>
   14dca:	4602      	mov	r2, r0
   14dcc:	f64a 4324 	movw	r3, #44068	; 0xac24
   14dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   14dd6:	f64a 4310 	movw	r3, #44048	; 0xac10
   14dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dde:	681a      	ldr	r2, [r3, #0]
   14de0:	f64a 4310 	movw	r3, #44048	; 0xac10
   14de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de8:	681b      	ldr	r3, [r3, #0]
   14dea:	4610      	mov	r0, r2
   14dec:	4619      	mov	r1, r3
   14dee:	f002 fe97 	bl	17b20 <__aeabi_fmul>
   14df2:	4603      	mov	r3, r0
   14df4:	4618      	mov	r0, r3
   14df6:	f002 f9ff 	bl	171f8 <__aeabi_f2d>
   14dfa:	4604      	mov	r4, r0
   14dfc:	460d      	mov	r5, r1
   14dfe:	f64a 4328 	movw	r3, #44072	; 0xac28
   14e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e06:	681b      	ldr	r3, [r3, #0]
   14e08:	4618      	mov	r0, r3
   14e0a:	f002 f9f5 	bl	171f8 <__aeabi_f2d>
   14e0e:	4602      	mov	r2, r0
   14e10:	460b      	mov	r3, r1
   14e12:	4610      	mov	r0, r2
   14e14:	4619      	mov	r1, r3
   14e16:	a34c      	add	r3, pc, #304	; (adr r3, 14f48 <estimator_update_ir_estim+0x4bc>)
   14e18:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e1c:	f002 fa40 	bl	172a0 <__aeabi_dmul>
   14e20:	4602      	mov	r2, r0
   14e22:	460b      	mov	r3, r1
   14e24:	4620      	mov	r0, r4
   14e26:	4629      	mov	r1, r5
   14e28:	f002 f888 	bl	16f3c <__adddf3>
   14e2c:	4602      	mov	r2, r0
   14e2e:	460b      	mov	r3, r1
   14e30:	4610      	mov	r0, r2
   14e32:	4619      	mov	r1, r3
   14e34:	f002 fd16 	bl	17864 <__aeabi_d2f>
   14e38:	4602      	mov	r2, r0
   14e3a:	f64a 4328 	movw	r3, #44072	; 0xac28
   14e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e42:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   14e44:	f64a 4324 	movw	r3, #44068	; 0xac24
   14e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4c:	681a      	ldr	r2, [r3, #0]
   14e4e:	f64a 4328 	movw	r3, #44072	; 0xac28
   14e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e56:	681b      	ldr	r3, [r3, #0]
   14e58:	4610      	mov	r0, r2
   14e5a:	4619      	mov	r1, r3
   14e5c:	f002 ff14 	bl	17c88 <__aeabi_fdiv>
   14e60:	4603      	mov	r3, r0
   14e62:	461a      	mov	r2, r3
   14e64:	f64a 430c 	movw	r3, #44044	; 0xac0c
   14e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e6c:	601a      	str	r2, [r3, #0]
   14e6e:	e052      	b.n	14f16 <estimator_update_ir_estim+0x48a>
   14e70:	e051      	b.n	14f16 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   14e72:	f64a 4318 	movw	r3, #44056	; 0xac18
   14e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e7a:	2201      	movs	r2, #1
   14e7c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   14e7e:	f240 0384 	movw	r3, #132	; 0x84
   14e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e86:	881b      	ldrh	r3, [r3, #0]
   14e88:	b21b      	sxth	r3, r3
   14e8a:	4618      	mov	r0, r3
   14e8c:	f002 fdf4 	bl	17a78 <__aeabi_i2f>
   14e90:	4603      	mov	r3, r0
   14e92:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   14e94:	6838      	ldr	r0, [r7, #0]
   14e96:	6839      	ldr	r1, [r7, #0]
   14e98:	f002 fe42 	bl	17b20 <__aeabi_fmul>
   14e9c:	4603      	mov	r3, r0
   14e9e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   14ea0:	f64a 430c 	movw	r3, #44044	; 0xac0c
   14ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea8:	681b      	ldr	r3, [r3, #0]
   14eaa:	4618      	mov	r0, r3
   14eac:	f002 f9a4 	bl	171f8 <__aeabi_f2d>
   14eb0:	4602      	mov	r2, r0
   14eb2:	460b      	mov	r3, r1
   14eb4:	4610      	mov	r0, r2
   14eb6:	4619      	mov	r1, r3
   14eb8:	f04f 0200 	mov.w	r2, #0
   14ebc:	f04f 0300 	mov.w	r3, #0
   14ec0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14ec4:	f002 f9ec 	bl	172a0 <__aeabi_dmul>
   14ec8:	4602      	mov	r2, r0
   14eca:	460b      	mov	r3, r1
   14ecc:	4614      	mov	r4, r2
   14ece:	461d      	mov	r5, r3
   14ed0:	6838      	ldr	r0, [r7, #0]
   14ed2:	f002 f991 	bl	171f8 <__aeabi_f2d>
   14ed6:	4602      	mov	r2, r0
   14ed8:	460b      	mov	r3, r1
   14eda:	4620      	mov	r0, r4
   14edc:	4629      	mov	r1, r5
   14ede:	f002 f9df 	bl	172a0 <__aeabi_dmul>
   14ee2:	4602      	mov	r2, r0
   14ee4:	460b      	mov	r3, r1
   14ee6:	4610      	mov	r0, r2
   14ee8:	4619      	mov	r1, r3
   14eea:	f002 fcbb 	bl	17864 <__aeabi_d2f>
   14eee:	4602      	mov	r2, r0
   14ef0:	f64a 4324 	movw	r3, #44068	; 0xac24
   14ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   14efa:	6838      	ldr	r0, [r7, #0]
   14efc:	f04f 0100 	mov.w	r1, #0
   14f00:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   14f04:	f002 fe0c 	bl	17b20 <__aeabi_fmul>
   14f08:	4603      	mov	r3, r0
   14f0a:	461a      	mov	r2, r3
   14f0c:	f64a 4328 	movw	r3, #44072	; 0xac28
   14f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f14:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   14f16:	f64a 4308 	movw	r3, #44040	; 0xac08
   14f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f1e:	681a      	ldr	r2, [r3, #0]
   14f20:	f64a 4320 	movw	r3, #44064	; 0xac20
   14f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f28:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   14f2a:	f24a 7388 	movw	r3, #42888	; 0xa788
   14f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f32:	681a      	ldr	r2, [r3, #0]
   14f34:	f64a 431c 	movw	r3, #44060	; 0xac1c
   14f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3c:	601a      	str	r2, [r3, #0]
}
   14f3e:	3710      	adds	r7, #16
   14f40:	46bd      	mov	sp, r7
   14f42:	bdb0      	pop	{r4, r5, r7, pc}
   14f44:	f3af 8000 	nop.w
   14f48:	d916872b 	.word	0xd916872b
   14f4c:	3feff7ce 	.word	0x3feff7ce

00014f50 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   14f50:	b580      	push	{r7, lr}
   14f52:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   14f54:	f24a 73ac 	movw	r3, #42924	; 0xa7ac
   14f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5c:	781b      	ldrb	r3, [r3, #0]
   14f5e:	f003 0320 	and.w	r3, r3, #32
   14f62:	2b00      	cmp	r3, #0
   14f64:	d044      	beq.n	14ff0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   14f66:	f24a 73a4 	movw	r3, #42916	; 0xa7a4
   14f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f6e:	681a      	ldr	r2, [r3, #0]
   14f70:	f64a 33cc 	movw	r3, #43980	; 0xabcc
   14f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f78:	601a      	str	r2, [r3, #0]
   14f7a:	f24a 73a8 	movw	r3, #42920	; 0xa7a8
   14f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f82:	681a      	ldr	r2, [r3, #0]
   14f84:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   14f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8c:	601a      	str	r2, [r3, #0]
   14f8e:	f24a 738c 	movw	r3, #42892	; 0xa78c
   14f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f96:	681a      	ldr	r2, [r3, #0]
   14f98:	f64a 33d4 	movw	r3, #43988	; 0xabd4
   14f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   14fa2:	f24a 7390 	movw	r3, #42896	; 0xa790
   14fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14faa:	681a      	ldr	r2, [r3, #0]
   14fac:	f64a 4304 	movw	r3, #44036	; 0xac04
   14fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb4:	601a      	str	r2, [r3, #0]
   14fb6:	f24a 7398 	movw	r3, #42904	; 0xa798
   14fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fbe:	681a      	ldr	r2, [r3, #0]
   14fc0:	f64a 4308 	movw	r3, #44040	; 0xac08
   14fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc8:	601a      	str	r2, [r3, #0]
   14fca:	f24a 7394 	movw	r3, #42900	; 0xa794
   14fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd2:	681a      	ldr	r2, [r3, #0]
   14fd4:	f64a 33ec 	movw	r3, #44012	; 0xabec
   14fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fdc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   14fde:	f64a 33fc 	movw	r3, #44028	; 0xabfc
   14fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe6:	881b      	ldrh	r3, [r3, #0]
   14fe8:	2b00      	cmp	r3, #0
   14fea:	d001      	beq.n	14ff0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   14fec:	f7ff fd4e 	bl	14a8c <estimator_update_ir_estim>
  }
}
   14ff0:	bd80      	pop	{r7, pc}
   14ff2:	bf00      	nop

00014ff4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   14ff4:	b480      	push	{r7}
   14ff6:	af00      	add	r7, sp, #0
  
}
   14ff8:	46bd      	mov	sp, r7
   14ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ffe:	4770      	bx	lr

00015000 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15000:	b5b0      	push	{r4, r5, r7, lr}
   15002:	b082      	sub	sp, #8
   15004:	af00      	add	r7, sp, #0
   15006:	4603      	mov	r3, r0
   15008:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1500a:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   1500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15012:	781b      	ldrb	r3, [r3, #0]
   15014:	2b01      	cmp	r3, #1
   15016:	f040 80e0 	bne.w	151da <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1501a:	f64a 432c 	movw	r3, #44076	; 0xac2c
   1501e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15022:	781b      	ldrb	r3, [r3, #0]
   15024:	2b02      	cmp	r3, #2
   15026:	d168      	bne.n	150fa <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15028:	79fb      	ldrb	r3, [r7, #7]
   1502a:	2b00      	cmp	r3, #0
   1502c:	d013      	beq.n	15056 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1502e:	f240 0388 	movw	r3, #136	; 0x88
   15032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15036:	881a      	ldrh	r2, [r3, #0]
   15038:	f64a 4332 	movw	r3, #44082	; 0xac32
   1503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15040:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15042:	f24a 7320 	movw	r3, #42784	; 0xa720
   15046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1504a:	895a      	ldrh	r2, [r3, #10]
   1504c:	f64a 432e 	movw	r3, #44078	; 0xac2e
   15050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15054:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15056:	f24a 7320 	movw	r3, #42784	; 0xa720
   1505a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1505e:	895b      	ldrh	r3, [r3, #10]
   15060:	b21a      	sxth	r2, r3
   15062:	f64a 432e 	movw	r3, #44078	; 0xac2e
   15066:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1506a:	881b      	ldrh	r3, [r3, #0]
   1506c:	b21b      	sxth	r3, r3
   1506e:	1ad3      	subs	r3, r2, r3
   15070:	4618      	mov	r0, r3
   15072:	f002 fd01 	bl	17a78 <__aeabi_i2f>
   15076:	4603      	mov	r3, r0
   15078:	4618      	mov	r0, r3
   1507a:	f002 f8bd 	bl	171f8 <__aeabi_f2d>
   1507e:	4602      	mov	r2, r0
   15080:	460b      	mov	r3, r1
   15082:	4610      	mov	r0, r2
   15084:	4619      	mov	r1, r3
   15086:	f04f 0200 	mov.w	r2, #0
   1508a:	f04f 0300 	mov.w	r3, #0
   1508e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15092:	f002 f905 	bl	172a0 <__aeabi_dmul>
   15096:	4602      	mov	r2, r0
   15098:	460b      	mov	r3, r1
   1509a:	4610      	mov	r0, r2
   1509c:	4619      	mov	r1, r3
   1509e:	f04f 0200 	mov.w	r2, #0
   150a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   150a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   150aa:	f002 fa23 	bl	174f4 <__aeabi_ddiv>
   150ae:	4602      	mov	r2, r0
   150b0:	460b      	mov	r3, r1
   150b2:	4610      	mov	r0, r2
   150b4:	4619      	mov	r1, r3
   150b6:	f002 fb8d 	bl	177d4 <__aeabi_d2iz>
   150ba:	4603      	mov	r3, r0
   150bc:	b29b      	uxth	r3, r3
   150be:	b29a      	uxth	r2, r3
   150c0:	f64a 4332 	movw	r3, #44082	; 0xac32
   150c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c8:	881b      	ldrh	r3, [r3, #0]
   150ca:	b29b      	uxth	r3, r3
   150cc:	4413      	add	r3, r2
   150ce:	b29b      	uxth	r3, r3
   150d0:	b29a      	uxth	r2, r3
   150d2:	f240 0388 	movw	r3, #136	; 0x88
   150d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150da:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   150dc:	f240 0388 	movw	r3, #136	; 0x88
   150e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e4:	881b      	ldrh	r3, [r3, #0]
   150e6:	b21b      	sxth	r3, r3
   150e8:	4618      	mov	r0, r3
   150ea:	f002 fcc5 	bl	17a78 <__aeabi_i2f>
   150ee:	4602      	mov	r2, r0
   150f0:	f24a 6308 	movw	r3, #42504	; 0xa608
   150f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   150fa:	f64a 432c 	movw	r3, #44076	; 0xac2c
   150fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15102:	781b      	ldrb	r3, [r3, #0]
   15104:	2b02      	cmp	r3, #2
   15106:	d168      	bne.n	151da <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15108:	79fb      	ldrb	r3, [r7, #7]
   1510a:	2b00      	cmp	r3, #0
   1510c:	d013      	beq.n	15136 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1510e:	f240 0386 	movw	r3, #134	; 0x86
   15112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15116:	881a      	ldrh	r2, [r3, #0]
   15118:	f64a 4334 	movw	r3, #44084	; 0xac34
   1511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15120:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15122:	f24a 7320 	movw	r3, #42784	; 0xa720
   15126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1512a:	899a      	ldrh	r2, [r3, #12]
   1512c:	f64a 4330 	movw	r3, #44080	; 0xac30
   15130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15134:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15136:	f24a 7320 	movw	r3, #42784	; 0xa720
   1513a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1513e:	899b      	ldrh	r3, [r3, #12]
   15140:	b21a      	sxth	r2, r3
   15142:	f64a 4330 	movw	r3, #44080	; 0xac30
   15146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1514a:	881b      	ldrh	r3, [r3, #0]
   1514c:	b21b      	sxth	r3, r3
   1514e:	1ad3      	subs	r3, r2, r3
   15150:	4618      	mov	r0, r3
   15152:	f002 fc91 	bl	17a78 <__aeabi_i2f>
   15156:	4603      	mov	r3, r0
   15158:	4618      	mov	r0, r3
   1515a:	f002 f84d 	bl	171f8 <__aeabi_f2d>
   1515e:	4602      	mov	r2, r0
   15160:	460b      	mov	r3, r1
   15162:	4610      	mov	r0, r2
   15164:	4619      	mov	r1, r3
   15166:	f04f 0200 	mov.w	r2, #0
   1516a:	f04f 0300 	mov.w	r3, #0
   1516e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15172:	f002 f895 	bl	172a0 <__aeabi_dmul>
   15176:	4602      	mov	r2, r0
   15178:	460b      	mov	r3, r1
   1517a:	4610      	mov	r0, r2
   1517c:	4619      	mov	r1, r3
   1517e:	f04f 0200 	mov.w	r2, #0
   15182:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15186:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1518a:	f002 f9b3 	bl	174f4 <__aeabi_ddiv>
   1518e:	4602      	mov	r2, r0
   15190:	460b      	mov	r3, r1
   15192:	4610      	mov	r0, r2
   15194:	4619      	mov	r1, r3
   15196:	f002 fb1d 	bl	177d4 <__aeabi_d2iz>
   1519a:	4603      	mov	r3, r0
   1519c:	b29b      	uxth	r3, r3
   1519e:	b29a      	uxth	r2, r3
   151a0:	f64a 4334 	movw	r3, #44084	; 0xac34
   151a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a8:	881b      	ldrh	r3, [r3, #0]
   151aa:	b29b      	uxth	r3, r3
   151ac:	4413      	add	r3, r2
   151ae:	b29b      	uxth	r3, r3
   151b0:	b29a      	uxth	r2, r3
   151b2:	f240 0386 	movw	r3, #134	; 0x86
   151b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ba:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   151bc:	f240 0386 	movw	r3, #134	; 0x86
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	881b      	ldrh	r3, [r3, #0]
   151c6:	b21b      	sxth	r3, r3
   151c8:	4618      	mov	r0, r3
   151ca:	f002 fc55 	bl	17a78 <__aeabi_i2f>
   151ce:	4602      	mov	r2, r0
   151d0:	f24a 630c 	movw	r3, #42508	; 0xa60c
   151d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   151da:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
   151de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e2:	781b      	ldrb	r3, [r3, #0]
   151e4:	2b02      	cmp	r3, #2
   151e6:	f040 80da 	bne.w	1539e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   151ea:	f64a 432c 	movw	r3, #44076	; 0xac2c
   151ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f2:	781b      	ldrb	r3, [r3, #0]
   151f4:	2b02      	cmp	r3, #2
   151f6:	d165      	bne.n	152c4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   151f8:	79fb      	ldrb	r3, [r7, #7]
   151fa:	2b00      	cmp	r3, #0
   151fc:	d013      	beq.n	15226 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   151fe:	f240 039c 	movw	r3, #156	; 0x9c
   15202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15206:	681a      	ldr	r2, [r3, #0]
   15208:	f64a 4338 	movw	r3, #44088	; 0xac38
   1520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15210:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15212:	f24a 7320 	movw	r3, #42784	; 0xa720
   15216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521a:	895a      	ldrh	r2, [r3, #10]
   1521c:	f64a 432e 	movw	r3, #44078	; 0xac2e
   15220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15224:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15226:	f64a 4338 	movw	r3, #44088	; 0xac38
   1522a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1522e:	681b      	ldr	r3, [r3, #0]
   15230:	4618      	mov	r0, r3
   15232:	f001 ffe1 	bl	171f8 <__aeabi_f2d>
   15236:	4604      	mov	r4, r0
   15238:	460d      	mov	r5, r1
   1523a:	f24a 7320 	movw	r3, #42784	; 0xa720
   1523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15242:	895b      	ldrh	r3, [r3, #10]
   15244:	b21a      	sxth	r2, r3
   15246:	f64a 432e 	movw	r3, #44078	; 0xac2e
   1524a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524e:	881b      	ldrh	r3, [r3, #0]
   15250:	b21b      	sxth	r3, r3
   15252:	1ad3      	subs	r3, r2, r3
   15254:	4618      	mov	r0, r3
   15256:	f002 fc0f 	bl	17a78 <__aeabi_i2f>
   1525a:	4603      	mov	r3, r0
   1525c:	4618      	mov	r0, r3
   1525e:	f001 ffcb 	bl	171f8 <__aeabi_f2d>
   15262:	4602      	mov	r2, r0
   15264:	460b      	mov	r3, r1
   15266:	4610      	mov	r0, r2
   15268:	4619      	mov	r1, r3
   1526a:	a34f      	add	r3, pc, #316	; (adr r3, 153a8 <inflight_calib+0x3a8>)
   1526c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15270:	f002 f816 	bl	172a0 <__aeabi_dmul>
   15274:	4602      	mov	r2, r0
   15276:	460b      	mov	r3, r1
   15278:	4610      	mov	r0, r2
   1527a:	4619      	mov	r1, r3
   1527c:	f04f 0200 	mov.w	r2, #0
   15280:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15284:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15288:	f002 f934 	bl	174f4 <__aeabi_ddiv>
   1528c:	4602      	mov	r2, r0
   1528e:	460b      	mov	r3, r1
   15290:	4620      	mov	r0, r4
   15292:	4629      	mov	r1, r5
   15294:	f001 fe52 	bl	16f3c <__adddf3>
   15298:	4602      	mov	r2, r0
   1529a:	460b      	mov	r3, r1
   1529c:	4610      	mov	r0, r2
   1529e:	4619      	mov	r1, r3
   152a0:	f002 fae0 	bl	17864 <__aeabi_d2f>
   152a4:	4602      	mov	r2, r0
   152a6:	f240 039c 	movw	r3, #156	; 0x9c
   152aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ae:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   152b0:	f240 039c 	movw	r3, #156	; 0x9c
   152b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152b8:	681a      	ldr	r2, [r3, #0]
   152ba:	f24a 6308 	movw	r3, #42504	; 0xa608
   152be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   152c4:	f64a 432c 	movw	r3, #44076	; 0xac2c
   152c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152cc:	781b      	ldrb	r3, [r3, #0]
   152ce:	2b02      	cmp	r3, #2
   152d0:	d165      	bne.n	1539e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   152d2:	79fb      	ldrb	r3, [r7, #7]
   152d4:	2b00      	cmp	r3, #0
   152d6:	d013      	beq.n	15300 <inflight_calib+0x300>
        max_roll_init = max_roll;
   152d8:	f240 03a0 	movw	r3, #160	; 0xa0
   152dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152e0:	681a      	ldr	r2, [r3, #0]
   152e2:	f64a 433c 	movw	r3, #44092	; 0xac3c
   152e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ea:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   152ec:	f24a 7320 	movw	r3, #42784	; 0xa720
   152f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f4:	899a      	ldrh	r2, [r3, #12]
   152f6:	f64a 4330 	movw	r3, #44080	; 0xac30
   152fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152fe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15300:	f64a 433c 	movw	r3, #44092	; 0xac3c
   15304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15308:	681b      	ldr	r3, [r3, #0]
   1530a:	4618      	mov	r0, r3
   1530c:	f001 ff74 	bl	171f8 <__aeabi_f2d>
   15310:	4604      	mov	r4, r0
   15312:	460d      	mov	r5, r1
   15314:	f24a 7320 	movw	r3, #42784	; 0xa720
   15318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1531c:	899b      	ldrh	r3, [r3, #12]
   1531e:	b21a      	sxth	r2, r3
   15320:	f64a 4330 	movw	r3, #44080	; 0xac30
   15324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15328:	881b      	ldrh	r3, [r3, #0]
   1532a:	b21b      	sxth	r3, r3
   1532c:	1ad3      	subs	r3, r2, r3
   1532e:	4618      	mov	r0, r3
   15330:	f002 fba2 	bl	17a78 <__aeabi_i2f>
   15334:	4603      	mov	r3, r0
   15336:	4618      	mov	r0, r3
   15338:	f001 ff5e 	bl	171f8 <__aeabi_f2d>
   1533c:	4602      	mov	r2, r0
   1533e:	460b      	mov	r3, r1
   15340:	4610      	mov	r0, r2
   15342:	4619      	mov	r1, r3
   15344:	a31a      	add	r3, pc, #104	; (adr r3, 153b0 <inflight_calib+0x3b0>)
   15346:	e9d3 2300 	ldrd	r2, r3, [r3]
   1534a:	f001 ffa9 	bl	172a0 <__aeabi_dmul>
   1534e:	4602      	mov	r2, r0
   15350:	460b      	mov	r3, r1
   15352:	4610      	mov	r0, r2
   15354:	4619      	mov	r1, r3
   15356:	f04f 0200 	mov.w	r2, #0
   1535a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1535e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15362:	f002 f8c7 	bl	174f4 <__aeabi_ddiv>
   15366:	4602      	mov	r2, r0
   15368:	460b      	mov	r3, r1
   1536a:	4620      	mov	r0, r4
   1536c:	4629      	mov	r1, r5
   1536e:	f001 fde5 	bl	16f3c <__adddf3>
   15372:	4602      	mov	r2, r0
   15374:	460b      	mov	r3, r1
   15376:	4610      	mov	r0, r2
   15378:	4619      	mov	r1, r3
   1537a:	f002 fa73 	bl	17864 <__aeabi_d2f>
   1537e:	4602      	mov	r2, r0
   15380:	f240 03a0 	movw	r3, #160	; 0xa0
   15384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15388:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1538a:	f240 03a0 	movw	r3, #160	; 0xa0
   1538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15392:	681a      	ldr	r2, [r3, #0]
   15394:	f24a 630c 	movw	r3, #42508	; 0xa60c
   15398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1539c:	601a      	str	r2, [r3, #0]
    }
  }
}
   1539e:	3708      	adds	r7, #8
   153a0:	46bd      	mov	sp, r7
   153a2:	bdb0      	pop	{r4, r5, r7, pc}
   153a4:	f3af 8000 	nop.w
   153a8:	9999999a 	.word	0x9999999a
   153ac:	3fb99999 	.word	0x3fb99999
   153b0:	9999999a 	.word	0x9999999a
   153b4:	bfc99999 	.word	0xbfc99999

000153b8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   153b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   153bc:	b08e      	sub	sp, #56	; 0x38
   153be:	af00      	add	r7, sp, #0
   153c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   153c4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   153c8:	a357      	add	r3, pc, #348	; (adr r3, 15528 <pp_atan2+0x170>)
   153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   153ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   153d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   153d6:	f04f 0200 	mov.w	r2, #0
   153da:	f04f 0300 	mov.w	r3, #0
   153de:	f2c4 0308 	movt	r3, #16392	; 0x4008
   153e2:	f001 ff5d 	bl	172a0 <__aeabi_dmul>
   153e6:	4602      	mov	r2, r0
   153e8:	460b      	mov	r3, r1
   153ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   153ee:	e9d7 0100 	ldrd	r0, r1, [r7]
   153f2:	f04f 0200 	mov.w	r2, #0
   153f6:	f04f 0300 	mov.w	r3, #0
   153fa:	f002 f9c3 	bl	17784 <__aeabi_dcmplt>
   153fe:	4603      	mov	r3, r0
   15400:	2b00      	cmp	r3, #0
   15402:	d009      	beq.n	15418 <pp_atan2+0x60>
   15404:	a14a      	add	r1, pc, #296	; (adr r1, 15530 <pp_atan2+0x178>)
   15406:	e9d1 0100 	ldrd	r0, r1, [r1]
   1540a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1540e:	f001 fd93 	bl	16f38 <__aeabi_dsub>
   15412:	4602      	mov	r2, r0
   15414:	460b      	mov	r3, r1
   15416:	e008      	b.n	1542a <pp_atan2+0x72>
   15418:	e9d7 0100 	ldrd	r0, r1, [r7]
   1541c:	a344      	add	r3, pc, #272	; (adr r3, 15530 <pp_atan2+0x178>)
   1541e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15422:	f001 fd8b 	bl	16f3c <__adddf3>
   15426:	4602      	mov	r2, r0
   15428:	460b      	mov	r3, r1
   1542a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   1542e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15432:	f04f 0200 	mov.w	r2, #0
   15436:	f04f 0300 	mov.w	r3, #0
   1543a:	f002 f9c1 	bl	177c0 <__aeabi_dcmpgt>
   1543e:	4603      	mov	r3, r0
   15440:	2b00      	cmp	r3, #0
   15442:	d02a      	beq.n	1549a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1544c:	f001 fd74 	bl	16f38 <__aeabi_dsub>
   15450:	4602      	mov	r2, r0
   15452:	460b      	mov	r3, r1
   15454:	4690      	mov	r8, r2
   15456:	4699      	mov	r9, r3
   15458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1545c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15460:	f001 fd6c 	bl	16f3c <__adddf3>
   15464:	4602      	mov	r2, r0
   15466:	460b      	mov	r3, r1
   15468:	4640      	mov	r0, r8
   1546a:	4649      	mov	r1, r9
   1546c:	f002 f842 	bl	174f4 <__aeabi_ddiv>
   15470:	4602      	mov	r2, r0
   15472:	460b      	mov	r3, r1
   15474:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15478:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1547c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15480:	f001 ff0e 	bl	172a0 <__aeabi_dmul>
   15484:	4602      	mov	r2, r0
   15486:	460b      	mov	r3, r1
   15488:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1548c:	f001 fd54 	bl	16f38 <__aeabi_dsub>
   15490:	4602      	mov	r2, r0
   15492:	460b      	mov	r3, r1
   15494:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15498:	e029      	b.n	154ee <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   1549a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1549e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   154a2:	f001 fd4b 	bl	16f3c <__adddf3>
   154a6:	4602      	mov	r2, r0
   154a8:	460b      	mov	r3, r1
   154aa:	4690      	mov	r8, r2
   154ac:	4699      	mov	r9, r3
   154ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   154b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   154b6:	f001 fd3f 	bl	16f38 <__aeabi_dsub>
   154ba:	4602      	mov	r2, r0
   154bc:	460b      	mov	r3, r1
   154be:	4640      	mov	r0, r8
   154c0:	4649      	mov	r1, r9
   154c2:	f002 f817 	bl	174f4 <__aeabi_ddiv>
   154c6:	4602      	mov	r2, r0
   154c8:	460b      	mov	r3, r1
   154ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   154ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   154d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   154d6:	f001 fee3 	bl	172a0 <__aeabi_dmul>
   154da:	4602      	mov	r2, r0
   154dc:	460b      	mov	r3, r1
   154de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   154e2:	f001 fd29 	bl	16f38 <__aeabi_dsub>
   154e6:	4602      	mov	r2, r0
   154e8:	460b      	mov	r3, r1
   154ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   154ee:	e9d7 0100 	ldrd	r0, r1, [r7]
   154f2:	f04f 0200 	mov.w	r2, #0
   154f6:	f04f 0300 	mov.w	r3, #0
   154fa:	f002 f943 	bl	17784 <__aeabi_dcmplt>
   154fe:	4603      	mov	r3, r0
   15500:	2b00      	cmp	r3, #0
   15502:	d004      	beq.n	1550e <pp_atan2+0x156>
		return (-angle);
   15504:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15508:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1550c:	e001      	b.n	15512 <pp_atan2+0x15a>
	else
		return angle;
   1550e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15512:	4622      	mov	r2, r4
   15514:	462b      	mov	r3, r5
}
   15516:	4610      	mov	r0, r2
   15518:	4619      	mov	r1, r3
   1551a:	3738      	adds	r7, #56	; 0x38
   1551c:	46bd      	mov	sp, r7
   1551e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15522:	bf00      	nop
   15524:	f3af 8000 	nop.w
   15528:	54442d18 	.word	0x54442d18
   1552c:	3fe921fb 	.word	0x3fe921fb
   15530:	d9d7bdbb 	.word	0xd9d7bdbb
   15534:	3ddb7cdf 	.word	0x3ddb7cdf

00015538 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15538:	b5b0      	push	{r4, r5, r7, lr}
   1553a:	b08c      	sub	sp, #48	; 0x30
   1553c:	af00      	add	r7, sp, #0
   1553e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15542:	e9d7 2300 	ldrd	r2, r3, [r7]
   15546:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1554a:	2301      	movs	r3, #1
   1554c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   1554e:	e00a      	b.n	15566 <pp_sin+0x2e>
   15550:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15554:	a35a      	add	r3, pc, #360	; (adr r3, 156c0 <pp_sin+0x188>)
   15556:	e9d3 2300 	ldrd	r2, r3, [r3]
   1555a:	f001 fcef 	bl	16f3c <__adddf3>
   1555e:	4602      	mov	r2, r0
   15560:	460b      	mov	r3, r1
   15562:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1556a:	a357      	add	r3, pc, #348	; (adr r3, 156c8 <pp_sin+0x190>)
   1556c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15570:	f002 f908 	bl	17784 <__aeabi_dcmplt>
   15574:	4603      	mov	r3, r0
   15576:	2b00      	cmp	r3, #0
   15578:	d1ea      	bne.n	15550 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   1557a:	e00a      	b.n	15592 <pp_sin+0x5a>
   1557c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15580:	a34f      	add	r3, pc, #316	; (adr r3, 156c0 <pp_sin+0x188>)
   15582:	e9d3 2300 	ldrd	r2, r3, [r3]
   15586:	f001 fcd7 	bl	16f38 <__aeabi_dsub>
   1558a:	4602      	mov	r2, r0
   1558c:	460b      	mov	r3, r1
   1558e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15596:	a34e      	add	r3, pc, #312	; (adr r3, 156d0 <pp_sin+0x198>)
   15598:	e9d3 2300 	ldrd	r2, r3, [r3]
   1559c:	f002 f910 	bl	177c0 <__aeabi_dcmpgt>
   155a0:	4603      	mov	r3, r0
   155a2:	2b00      	cmp	r3, #0
   155a4:	d1ea      	bne.n	1557c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   155a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155aa:	a34b      	add	r3, pc, #300	; (adr r3, 156d8 <pp_sin+0x1a0>)
   155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   155b0:	f002 f906 	bl	177c0 <__aeabi_dcmpgt>
   155b4:	4603      	mov	r3, r0
   155b6:	2b00      	cmp	r3, #0
   155b8:	d00d      	beq.n	155d6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   155ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155be:	a348      	add	r3, pc, #288	; (adr r3, 156e0 <pp_sin+0x1a8>)
   155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   155c4:	f001 fcb8 	bl	16f38 <__aeabi_dsub>
   155c8:	4602      	mov	r2, r0
   155ca:	460b      	mov	r3, r1
   155cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   155d0:	f04f 33ff 	mov.w	r3, #4294967295
   155d4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   155d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   155da:	a343      	add	r3, pc, #268	; (adr r3, 156e8 <pp_sin+0x1b0>)
   155dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   155e0:	f001 ff88 	bl	174f4 <__aeabi_ddiv>
   155e4:	4602      	mov	r2, r0
   155e6:	460b      	mov	r3, r1
   155e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   155ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   155f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   155f4:	f001 fe54 	bl	172a0 <__aeabi_dmul>
   155f8:	4602      	mov	r2, r0
   155fa:	460b      	mov	r3, r1
   155fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15604:	a33a      	add	r3, pc, #232	; (adr r3, 156f0 <pp_sin+0x1b8>)
   15606:	e9d3 2300 	ldrd	r2, r3, [r3]
   1560a:	f001 fe49 	bl	172a0 <__aeabi_dmul>
   1560e:	4602      	mov	r2, r0
   15610:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15612:	4610      	mov	r0, r2
   15614:	4619      	mov	r1, r3
   15616:	a338      	add	r3, pc, #224	; (adr r3, 156f8 <pp_sin+0x1c0>)
   15618:	e9d3 2300 	ldrd	r2, r3, [r3]
   1561c:	f001 fc8c 	bl	16f38 <__aeabi_dsub>
   15620:	4602      	mov	r2, r0
   15622:	460b      	mov	r3, r1
   15624:	4610      	mov	r0, r2
   15626:	4619      	mov	r1, r3
   15628:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1562c:	f001 fe38 	bl	172a0 <__aeabi_dmul>
   15630:	4602      	mov	r2, r0
   15632:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15634:	4610      	mov	r0, r2
   15636:	4619      	mov	r1, r3
   15638:	a331      	add	r3, pc, #196	; (adr r3, 15700 <pp_sin+0x1c8>)
   1563a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1563e:	f001 fc7d 	bl	16f3c <__adddf3>
   15642:	4602      	mov	r2, r0
   15644:	460b      	mov	r3, r1
   15646:	4610      	mov	r0, r2
   15648:	4619      	mov	r1, r3
   1564a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1564e:	f001 fe27 	bl	172a0 <__aeabi_dmul>
   15652:	4602      	mov	r2, r0
   15654:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15656:	4610      	mov	r0, r2
   15658:	4619      	mov	r1, r3
   1565a:	a32b      	add	r3, pc, #172	; (adr r3, 15708 <pp_sin+0x1d0>)
   1565c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15660:	f001 fc6a 	bl	16f38 <__aeabi_dsub>
   15664:	4602      	mov	r2, r0
   15666:	460b      	mov	r3, r1
   15668:	4610      	mov	r0, r2
   1566a:	4619      	mov	r1, r3
   1566c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15670:	f001 fe16 	bl	172a0 <__aeabi_dmul>
   15674:	4602      	mov	r2, r0
   15676:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15678:	4610      	mov	r0, r2
   1567a:	4619      	mov	r1, r3
   1567c:	a324      	add	r3, pc, #144	; (adr r3, 15710 <pp_sin+0x1d8>)
   1567e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15682:	f001 fc5b 	bl	16f3c <__adddf3>
   15686:	4602      	mov	r2, r0
   15688:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   1568a:	4610      	mov	r0, r2
   1568c:	4619      	mov	r1, r3
   1568e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15692:	f001 fe05 	bl	172a0 <__aeabi_dmul>
   15696:	4602      	mov	r2, r0
   15698:	460b      	mov	r3, r1
   1569a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   1569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156a0:	2b00      	cmp	r3, #0
   156a2:	da04      	bge.n	156ae <pp_sin+0x176>
   156a4:	68bc      	ldr	r4, [r7, #8]
   156a6:	68fb      	ldr	r3, [r7, #12]
   156a8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   156ac:	e001      	b.n	156b2 <pp_sin+0x17a>
   156ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   156b2:	4622      	mov	r2, r4
   156b4:	462b      	mov	r3, r5
}
   156b6:	4610      	mov	r0, r2
   156b8:	4619      	mov	r1, r3
   156ba:	3730      	adds	r7, #48	; 0x30
   156bc:	46bd      	mov	sp, r7
   156be:	bdb0      	pop	{r4, r5, r7, pc}
   156c0:	54442d18 	.word	0x54442d18
   156c4:	401921fb 	.word	0x401921fb
   156c8:	54442d18 	.word	0x54442d18
   156cc:	bff921fb 	.word	0xbff921fb
   156d0:	7f3321d2 	.word	0x7f3321d2
   156d4:	4012d97c 	.word	0x4012d97c
   156d8:	54442d18 	.word	0x54442d18
   156dc:	3ff921fb 	.word	0x3ff921fb
   156e0:	54442d18 	.word	0x54442d18
   156e4:	400921fb 	.word	0x400921fb
   156e8:	5443d6f4 	.word	0x5443d6f4
   156ec:	3ff921fb 	.word	0x3ff921fb
   156f0:	48a890af 	.word	0x48a890af
   156f4:	3f23daf7 	.word	0x3f23daf7
   156f8:	645b6d0e 	.word	0x645b6d0e
   156fc:	3f7324cc 	.word	0x3f7324cc
   15700:	f65619a5 	.word	0xf65619a5
   15704:	3fb4668a 	.word	0x3fb4668a
   15708:	16acf9cd 	.word	0x16acf9cd
   1570c:	3fe4abbc 	.word	0x3fe4abbc
   15710:	520817f7 	.word	0x520817f7
   15714:	3ff921fb 	.word	0x3ff921fb

00015718 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15718:	b480      	push	{r7}
   1571a:	b083      	sub	sp, #12
   1571c:	af00      	add	r7, sp, #0
   1571e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15722:	4610      	mov	r0, r2
   15724:	4619      	mov	r1, r3
   15726:	370c      	adds	r7, #12
   15728:	46bd      	mov	sp, r7
   1572a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1572e:	4770      	bx	lr

00015730 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15730:	b480      	push	{r7}
   15732:	b083      	sub	sp, #12
   15734:	af00      	add	r7, sp, #0
   15736:	4603      	mov	r3, r0
   15738:	6039      	str	r1, [r7, #0]
   1573a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1573c:	79fa      	ldrb	r2, [r7, #7]
   1573e:	f64a 4350 	movw	r3, #44112	; 0xac50
   15742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15746:	6839      	ldr	r1, [r7, #0]
   15748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1574c:	370c      	adds	r7, #12
   1574e:	46bd      	mov	sp, r7
   15750:	f85d 7b04 	ldr.w	r7, [sp], #4
   15754:	4770      	bx	lr
   15756:	bf00      	nop

00015758 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15758:	b480      	push	{r7}
   1575a:	b083      	sub	sp, #12
   1575c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1575e:	f242 0315 	movw	r3, #8213	; 0x2015
   15762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15766:	2200      	movs	r2, #0
   15768:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1576a:	f242 0314 	movw	r3, #8212	; 0x2014
   1576e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15772:	2200      	movs	r2, #0
   15774:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15776:	f242 0307 	movw	r3, #8199	; 0x2007
   1577a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1577e:	22c0      	movs	r2, #192	; 0xc0
   15780:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15782:	f242 0306 	movw	r3, #8198	; 0x2006
   15786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1578a:	22cf      	movs	r2, #207	; 0xcf
   1578c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1578e:	2300      	movs	r3, #0
   15790:	71fb      	strb	r3, [r7, #7]
   15792:	e00a      	b.n	157aa <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15794:	79fa      	ldrb	r2, [r7, #7]
   15796:	f64a 4350 	movw	r3, #44112	; 0xac50
   1579a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1579e:	2100      	movs	r1, #0
   157a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   157a4:	79fb      	ldrb	r3, [r7, #7]
   157a6:	3301      	adds	r3, #1
   157a8:	71fb      	strb	r3, [r7, #7]
   157aa:	79fb      	ldrb	r3, [r7, #7]
   157ac:	2b07      	cmp	r3, #7
   157ae:	d9f1      	bls.n	15794 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   157b0:	370c      	adds	r7, #12
   157b2:	46bd      	mov	sp, r7
   157b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   157b8:	4770      	bx	lr
   157ba:	bf00      	nop

000157bc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   157bc:	b480      	push	{r7}
   157be:	b083      	sub	sp, #12
   157c0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   157c2:	f242 0326 	movw	r3, #8230	; 0x2026
   157c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157ca:	881b      	ldrh	r3, [r3, #0]
   157cc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   157ce:	f64a 43ac 	movw	r3, #44204	; 0xacac
   157d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157d6:	881b      	ldrh	r3, [r3, #0]
   157d8:	88fa      	ldrh	r2, [r7, #6]
   157da:	1ad3      	subs	r3, r2, r3
   157dc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   157de:	f64a 43ac 	movw	r3, #44204	; 0xacac
   157e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157e6:	88fa      	ldrh	r2, [r7, #6]
   157e8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   157ea:	f64a 43ae 	movw	r3, #44206	; 0xacae
   157ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f2:	781b      	ldrb	r3, [r3, #0]
   157f4:	2b00      	cmp	r3, #0
   157f6:	d11e      	bne.n	15836 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   157f8:	f242 0324 	movw	r3, #8228	; 0x2024
   157fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15800:	781b      	ldrb	r3, [r3, #0]
   15802:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15804:	f64a 43af 	movw	r3, #44207	; 0xacaf
   15808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1580c:	781b      	ldrb	r3, [r3, #0]
   1580e:	78fa      	ldrb	r2, [r7, #3]
   15810:	1ad3      	subs	r3, r2, r3
   15812:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15814:	f64a 43af 	movw	r3, #44207	; 0xacaf
   15818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1581c:	78fa      	ldrb	r2, [r7, #3]
   1581e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15820:	78bb      	ldrb	r3, [r7, #2]
   15822:	2b6d      	cmp	r3, #109	; 0x6d
   15824:	d906      	bls.n	15834 <__vector_34+0x78>
      state = 1;
   15826:	f64a 43ae 	movw	r3, #44206	; 0xacae
   1582a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1582e:	2201      	movs	r2, #1
   15830:	701a      	strb	r2, [r3, #0]
   15832:	e053      	b.n	158dc <__vector_34+0x120>
   15834:	e052      	b.n	158dc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15836:	88bb      	ldrh	r3, [r7, #4]
   15838:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1583c:	d304      	bcc.n	15848 <__vector_34+0x8c>
   1583e:	88ba      	ldrh	r2, [r7, #4]
   15840:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15844:	429a      	cmp	r2, r3
   15846:	d911      	bls.n	1586c <__vector_34+0xb0>
      RestartPpmCycle();
   15848:	f64a 43ae 	movw	r3, #44206	; 0xacae
   1584c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15850:	2200      	movs	r2, #0
   15852:	701a      	strb	r2, [r3, #0]
   15854:	f242 0324 	movw	r3, #8228	; 0x2024
   15858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1585c:	781b      	ldrb	r3, [r3, #0]
   1585e:	b2da      	uxtb	r2, r3
   15860:	f64a 43af 	movw	r3, #44207	; 0xacaf
   15864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15868:	701a      	strb	r2, [r3, #0]
   1586a:	e038      	b.n	158de <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1586c:	f64a 43ae 	movw	r3, #44206	; 0xacae
   15870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15874:	781b      	ldrb	r3, [r3, #0]
   15876:	1e5a      	subs	r2, r3, #1
   15878:	f64a 4370 	movw	r3, #44144	; 0xac70
   1587c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15880:	88b9      	ldrh	r1, [r7, #4]
   15882:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15886:	f64a 43ae 	movw	r3, #44206	; 0xacae
   1588a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1588e:	781b      	ldrb	r3, [r3, #0]
   15890:	2b08      	cmp	r3, #8
   15892:	d917      	bls.n	158c4 <__vector_34+0x108>
      ppm_valid	= 1;
   15894:	f64a 43ab 	movw	r3, #44203	; 0xacab
   15898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1589c:	2201      	movs	r2, #1
   1589e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   158a0:	f64a 43ae 	movw	r3, #44206	; 0xacae
   158a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a8:	2200      	movs	r2, #0
   158aa:	701a      	strb	r2, [r3, #0]
   158ac:	f242 0324 	movw	r3, #8228	; 0x2024
   158b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158b4:	781b      	ldrb	r3, [r3, #0]
   158b6:	b2da      	uxtb	r2, r3
   158b8:	f64a 43af 	movw	r3, #44207	; 0xacaf
   158bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158c0:	701a      	strb	r2, [r3, #0]
   158c2:	e00c      	b.n	158de <__vector_34+0x122>
    } else 
      state++;
   158c4:	f64a 43ae 	movw	r3, #44206	; 0xacae
   158c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158cc:	781b      	ldrb	r3, [r3, #0]
   158ce:	3301      	adds	r3, #1
   158d0:	b2da      	uxtb	r2, r3
   158d2:	f64a 43ae 	movw	r3, #44206	; 0xacae
   158d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158da:	701a      	strb	r2, [r3, #0]
  }
  return;
   158dc:	bf00      	nop
}
   158de:	370c      	adds	r7, #12
   158e0:	46bd      	mov	sp, r7
   158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   158e6:	4770      	bx	lr

000158e8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   158e8:	b590      	push	{r4, r7, lr}
   158ea:	b083      	sub	sp, #12
   158ec:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   158ee:	f64a 4370 	movw	r3, #44144	; 0xac70
   158f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f6:	881b      	ldrh	r3, [r3, #0]
   158f8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   158fc:	b29b      	uxth	r3, r3
   158fe:	80fb      	strh	r3, [r7, #6]
   15900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15904:	4618      	mov	r0, r3
   15906:	f002 f8b7 	bl	17a78 <__aeabi_i2f>
   1590a:	4603      	mov	r3, r0
   1590c:	4618      	mov	r0, r3
   1590e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15912:	f002 f905 	bl	17b20 <__aeabi_fmul>
   15916:	4603      	mov	r3, r0
   15918:	4618      	mov	r0, r3
   1591a:	f002 fac7 	bl	17eac <__aeabi_f2iz>
   1591e:	4603      	mov	r3, r0
   15920:	b29a      	uxth	r2, r3
   15922:	f64a 4384 	movw	r3, #44164	; 0xac84
   15926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1592a:	801a      	strh	r2, [r3, #0]
   1592c:	f64a 4384 	movw	r3, #44164	; 0xac84
   15930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15934:	881b      	ldrh	r3, [r3, #0]
   15936:	b21b      	sxth	r3, r3
   15938:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1593c:	dd07      	ble.n	1594e <last_radio_from_ppm+0x66>
   1593e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15946:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1594a:	801a      	strh	r2, [r3, #0]
   1594c:	e00d      	b.n	1596a <last_radio_from_ppm+0x82>
   1594e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15956:	881b      	ldrh	r3, [r3, #0]
   15958:	b21b      	sxth	r3, r3
   1595a:	2b00      	cmp	r3, #0
   1595c:	da05      	bge.n	1596a <last_radio_from_ppm+0x82>
   1595e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15966:	2200      	movs	r2, #0
   15968:	801a      	strh	r2, [r3, #0]
   1596a:	f64a 4370 	movw	r3, #44144	; 0xac70
   1596e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15972:	885b      	ldrh	r3, [r3, #2]
   15974:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15978:	b29b      	uxth	r3, r3
   1597a:	80fb      	strh	r3, [r7, #6]
   1597c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15980:	4618      	mov	r0, r3
   15982:	f002 f879 	bl	17a78 <__aeabi_i2f>
   15986:	4603      	mov	r3, r0
   15988:	4618      	mov	r0, r3
   1598a:	f002 fa8f 	bl	17eac <__aeabi_f2iz>
   1598e:	4603      	mov	r3, r0
   15990:	b29a      	uxth	r2, r3
   15992:	f64a 4384 	movw	r3, #44164	; 0xac84
   15996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1599a:	805a      	strh	r2, [r3, #2]
   1599c:	f64a 4384 	movw	r3, #44164	; 0xac84
   159a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a4:	885b      	ldrh	r3, [r3, #2]
   159a6:	b21b      	sxth	r3, r3
   159a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   159ac:	dd07      	ble.n	159be <last_radio_from_ppm+0xd6>
   159ae:	f64a 4384 	movw	r3, #44164	; 0xac84
   159b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   159ba:	805a      	strh	r2, [r3, #2]
   159bc:	e00f      	b.n	159de <last_radio_from_ppm+0xf6>
   159be:	f64a 4384 	movw	r3, #44164	; 0xac84
   159c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c6:	885b      	ldrh	r3, [r3, #2]
   159c8:	b21b      	sxth	r3, r3
   159ca:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   159ce:	da06      	bge.n	159de <last_radio_from_ppm+0xf6>
   159d0:	f64a 4384 	movw	r3, #44164	; 0xac84
   159d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159d8:	f64d 2280 	movw	r2, #55936	; 0xda80
   159dc:	805a      	strh	r2, [r3, #2]
   159de:	f64a 4370 	movw	r3, #44144	; 0xac70
   159e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159e6:	889b      	ldrh	r3, [r3, #4]
   159e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   159ec:	b29b      	uxth	r3, r3
   159ee:	80fb      	strh	r3, [r7, #6]
   159f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   159f4:	4618      	mov	r0, r3
   159f6:	f002 f83f 	bl	17a78 <__aeabi_i2f>
   159fa:	4603      	mov	r3, r0
   159fc:	4618      	mov	r0, r3
   159fe:	f002 fa55 	bl	17eac <__aeabi_f2iz>
   15a02:	4603      	mov	r3, r0
   15a04:	b29a      	uxth	r2, r3
   15a06:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a0e:	809a      	strh	r2, [r3, #4]
   15a10:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a18:	889b      	ldrh	r3, [r3, #4]
   15a1a:	b21b      	sxth	r3, r3
   15a1c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15a20:	dd07      	ble.n	15a32 <last_radio_from_ppm+0x14a>
   15a22:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a2a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15a2e:	809a      	strh	r2, [r3, #4]
   15a30:	e00f      	b.n	15a52 <last_radio_from_ppm+0x16a>
   15a32:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a3a:	889b      	ldrh	r3, [r3, #4]
   15a3c:	b21b      	sxth	r3, r3
   15a3e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15a42:	da06      	bge.n	15a52 <last_radio_from_ppm+0x16a>
   15a44:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a4c:	f64d 2280 	movw	r2, #55936	; 0xda80
   15a50:	809a      	strh	r2, [r3, #4]
   15a52:	f64a 4370 	movw	r3, #44144	; 0xac70
   15a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a5a:	88db      	ldrh	r3, [r3, #6]
   15a5c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15a60:	b29b      	uxth	r3, r3
   15a62:	80fb      	strh	r3, [r7, #6]
   15a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15a68:	4618      	mov	r0, r3
   15a6a:	f002 f805 	bl	17a78 <__aeabi_i2f>
   15a6e:	4603      	mov	r3, r0
   15a70:	4618      	mov	r0, r3
   15a72:	f002 fa1b 	bl	17eac <__aeabi_f2iz>
   15a76:	4603      	mov	r3, r0
   15a78:	b29a      	uxth	r2, r3
   15a7a:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a82:	80da      	strh	r2, [r3, #6]
   15a84:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a8c:	88db      	ldrh	r3, [r3, #6]
   15a8e:	b21b      	sxth	r3, r3
   15a90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15a94:	dd07      	ble.n	15aa6 <last_radio_from_ppm+0x1be>
   15a96:	f64a 4384 	movw	r3, #44164	; 0xac84
   15a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15aa2:	80da      	strh	r2, [r3, #6]
   15aa4:	e00f      	b.n	15ac6 <last_radio_from_ppm+0x1de>
   15aa6:	f64a 4384 	movw	r3, #44164	; 0xac84
   15aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aae:	88db      	ldrh	r3, [r3, #6]
   15ab0:	b21b      	sxth	r3, r3
   15ab2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ab6:	da06      	bge.n	15ac6 <last_radio_from_ppm+0x1de>
   15ab8:	f64a 4384 	movw	r3, #44164	; 0xac84
   15abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15ac4:	80da      	strh	r2, [r3, #6]
   15ac6:	f64a 4370 	movw	r3, #44144	; 0xac70
   15aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ace:	891b      	ldrh	r3, [r3, #8]
   15ad0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ad4:	b29b      	uxth	r3, r3
   15ad6:	80fb      	strh	r3, [r7, #6]
   15ad8:	f64a 4398 	movw	r3, #44184	; 0xac98
   15adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae0:	891b      	ldrh	r3, [r3, #8]
   15ae2:	b21b      	sxth	r3, r3
   15ae4:	4618      	mov	r0, r3
   15ae6:	f001 ffc7 	bl	17a78 <__aeabi_i2f>
   15aea:	4604      	mov	r4, r0
   15aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15af0:	4618      	mov	r0, r3
   15af2:	f001 ffc1 	bl	17a78 <__aeabi_i2f>
   15af6:	4603      	mov	r3, r0
   15af8:	4618      	mov	r0, r3
   15afa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15afe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15b02:	f002 f80d 	bl	17b20 <__aeabi_fmul>
   15b06:	4603      	mov	r3, r0
   15b08:	4620      	mov	r0, r4
   15b0a:	4619      	mov	r1, r3
   15b0c:	f001 ff00 	bl	17910 <__addsf3>
   15b10:	4603      	mov	r3, r0
   15b12:	4618      	mov	r0, r3
   15b14:	f002 f9ca 	bl	17eac <__aeabi_f2iz>
   15b18:	4603      	mov	r3, r0
   15b1a:	b29a      	uxth	r2, r3
   15b1c:	f64a 4398 	movw	r3, #44184	; 0xac98
   15b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b24:	811a      	strh	r2, [r3, #8]
   15b26:	f64a 4370 	movw	r3, #44144	; 0xac70
   15b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b2e:	895b      	ldrh	r3, [r3, #10]
   15b30:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15b34:	b29b      	uxth	r3, r3
   15b36:	80fb      	strh	r3, [r7, #6]
   15b38:	f64a 4398 	movw	r3, #44184	; 0xac98
   15b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b40:	895b      	ldrh	r3, [r3, #10]
   15b42:	b21b      	sxth	r3, r3
   15b44:	4618      	mov	r0, r3
   15b46:	f001 ff97 	bl	17a78 <__aeabi_i2f>
   15b4a:	4604      	mov	r4, r0
   15b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15b50:	4618      	mov	r0, r3
   15b52:	f001 ff91 	bl	17a78 <__aeabi_i2f>
   15b56:	4603      	mov	r3, r0
   15b58:	4618      	mov	r0, r3
   15b5a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15b5e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15b62:	f001 ffdd 	bl	17b20 <__aeabi_fmul>
   15b66:	4603      	mov	r3, r0
   15b68:	4620      	mov	r0, r4
   15b6a:	4619      	mov	r1, r3
   15b6c:	f001 fed0 	bl	17910 <__addsf3>
   15b70:	4603      	mov	r3, r0
   15b72:	4618      	mov	r0, r3
   15b74:	f002 f99a 	bl	17eac <__aeabi_f2iz>
   15b78:	4603      	mov	r3, r0
   15b7a:	b29a      	uxth	r2, r3
   15b7c:	f64a 4398 	movw	r3, #44184	; 0xac98
   15b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b84:	815a      	strh	r2, [r3, #10]
   15b86:	f64a 4370 	movw	r3, #44144	; 0xac70
   15b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b8e:	899b      	ldrh	r3, [r3, #12]
   15b90:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15b94:	b29b      	uxth	r3, r3
   15b96:	80fb      	strh	r3, [r7, #6]
   15b98:	f64a 4398 	movw	r3, #44184	; 0xac98
   15b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ba0:	899b      	ldrh	r3, [r3, #12]
   15ba2:	b21b      	sxth	r3, r3
   15ba4:	4618      	mov	r0, r3
   15ba6:	f001 ff67 	bl	17a78 <__aeabi_i2f>
   15baa:	4604      	mov	r4, r0
   15bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15bb0:	4618      	mov	r0, r3
   15bb2:	f001 ff61 	bl	17a78 <__aeabi_i2f>
   15bb6:	4603      	mov	r3, r0
   15bb8:	4618      	mov	r0, r3
   15bba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15bbe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15bc2:	f001 ffad 	bl	17b20 <__aeabi_fmul>
   15bc6:	4603      	mov	r3, r0
   15bc8:	4620      	mov	r0, r4
   15bca:	4619      	mov	r1, r3
   15bcc:	f001 fea0 	bl	17910 <__addsf3>
   15bd0:	4603      	mov	r3, r0
   15bd2:	4618      	mov	r0, r3
   15bd4:	f002 f96a 	bl	17eac <__aeabi_f2iz>
   15bd8:	4603      	mov	r3, r0
   15bda:	b29a      	uxth	r2, r3
   15bdc:	f64a 4398 	movw	r3, #44184	; 0xac98
   15be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15be4:	819a      	strh	r2, [r3, #12]
   15be6:	f64a 4370 	movw	r3, #44144	; 0xac70
   15bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bee:	89db      	ldrh	r3, [r3, #14]
   15bf0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15bf4:	b29b      	uxth	r3, r3
   15bf6:	80fb      	strh	r3, [r7, #6]
   15bf8:	f64a 4398 	movw	r3, #44184	; 0xac98
   15bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c00:	89db      	ldrh	r3, [r3, #14]
   15c02:	b21b      	sxth	r3, r3
   15c04:	4618      	mov	r0, r3
   15c06:	f001 ff37 	bl	17a78 <__aeabi_i2f>
   15c0a:	4604      	mov	r4, r0
   15c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c10:	4618      	mov	r0, r3
   15c12:	f001 ff31 	bl	17a78 <__aeabi_i2f>
   15c16:	4603      	mov	r3, r0
   15c18:	4618      	mov	r0, r3
   15c1a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15c1e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15c22:	f001 ff7d 	bl	17b20 <__aeabi_fmul>
   15c26:	4603      	mov	r3, r0
   15c28:	4620      	mov	r0, r4
   15c2a:	4619      	mov	r1, r3
   15c2c:	f001 fe70 	bl	17910 <__addsf3>
   15c30:	4603      	mov	r3, r0
   15c32:	4618      	mov	r0, r3
   15c34:	f002 f93a 	bl	17eac <__aeabi_f2iz>
   15c38:	4603      	mov	r3, r0
   15c3a:	b29a      	uxth	r2, r3
   15c3c:	f64a 4398 	movw	r3, #44184	; 0xac98
   15c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c44:	81da      	strh	r2, [r3, #14]
   15c46:	f64a 4370 	movw	r3, #44144	; 0xac70
   15c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c4e:	8a1b      	ldrh	r3, [r3, #16]
   15c50:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c54:	b29b      	uxth	r3, r3
   15c56:	80fb      	strh	r3, [r7, #6]
   15c58:	f64a 4398 	movw	r3, #44184	; 0xac98
   15c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c60:	8a1b      	ldrh	r3, [r3, #16]
   15c62:	b21b      	sxth	r3, r3
   15c64:	4618      	mov	r0, r3
   15c66:	f001 ff07 	bl	17a78 <__aeabi_i2f>
   15c6a:	4604      	mov	r4, r0
   15c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c70:	4618      	mov	r0, r3
   15c72:	f001 ff01 	bl	17a78 <__aeabi_i2f>
   15c76:	4603      	mov	r3, r0
   15c78:	4618      	mov	r0, r3
   15c7a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15c7e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15c82:	f001 ff4d 	bl	17b20 <__aeabi_fmul>
   15c86:	4603      	mov	r3, r0
   15c88:	4620      	mov	r0, r4
   15c8a:	4619      	mov	r1, r3
   15c8c:	f001 fe40 	bl	17910 <__addsf3>
   15c90:	4603      	mov	r3, r0
   15c92:	4618      	mov	r0, r3
   15c94:	f002 f90a 	bl	17eac <__aeabi_f2iz>
   15c98:	4603      	mov	r3, r0
   15c9a:	b29a      	uxth	r2, r3
   15c9c:	f64a 4398 	movw	r3, #44184	; 0xac98
   15ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ca4:	821a      	strh	r2, [r3, #16]
   15ca6:	f64a 43b0 	movw	r3, #44208	; 0xacb0
   15caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cae:	781b      	ldrb	r3, [r3, #0]
   15cb0:	3301      	adds	r3, #1
   15cb2:	b2da      	uxtb	r2, r3
   15cb4:	f64a 43b0 	movw	r3, #44208	; 0xacb0
   15cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cbc:	701a      	strb	r2, [r3, #0]
   15cbe:	f64a 43b0 	movw	r3, #44208	; 0xacb0
   15cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cc6:	781b      	ldrb	r3, [r3, #0]
   15cc8:	2b0a      	cmp	r3, #10
   15cca:	f040 8101 	bne.w	15ed0 <last_radio_from_ppm+0x5e8>
   15cce:	f64a 43b0 	movw	r3, #44208	; 0xacb0
   15cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cd6:	2200      	movs	r2, #0
   15cd8:	701a      	strb	r2, [r3, #0]
   15cda:	f64a 4398 	movw	r3, #44184	; 0xac98
   15cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ce2:	891a      	ldrh	r2, [r3, #8]
   15ce4:	f64a 4384 	movw	r3, #44164	; 0xac84
   15ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cec:	811a      	strh	r2, [r3, #8]
   15cee:	f64a 4398 	movw	r3, #44184	; 0xac98
   15cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf6:	2200      	movs	r2, #0
   15cf8:	811a      	strh	r2, [r3, #8]
   15cfa:	f64a 4384 	movw	r3, #44164	; 0xac84
   15cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d02:	891b      	ldrh	r3, [r3, #8]
   15d04:	b21b      	sxth	r3, r3
   15d06:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d0a:	dd07      	ble.n	15d1c <last_radio_from_ppm+0x434>
   15d0c:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d18:	811a      	strh	r2, [r3, #8]
   15d1a:	e00f      	b.n	15d3c <last_radio_from_ppm+0x454>
   15d1c:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d24:	891b      	ldrh	r3, [r3, #8]
   15d26:	b21b      	sxth	r3, r3
   15d28:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d2c:	da06      	bge.n	15d3c <last_radio_from_ppm+0x454>
   15d2e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d36:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d3a:	811a      	strh	r2, [r3, #8]
   15d3c:	f64a 4398 	movw	r3, #44184	; 0xac98
   15d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d44:	895a      	ldrh	r2, [r3, #10]
   15d46:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d4e:	815a      	strh	r2, [r3, #10]
   15d50:	f64a 4398 	movw	r3, #44184	; 0xac98
   15d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d58:	2200      	movs	r2, #0
   15d5a:	815a      	strh	r2, [r3, #10]
   15d5c:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d64:	895b      	ldrh	r3, [r3, #10]
   15d66:	b21b      	sxth	r3, r3
   15d68:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d6c:	dd07      	ble.n	15d7e <last_radio_from_ppm+0x496>
   15d6e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d76:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d7a:	815a      	strh	r2, [r3, #10]
   15d7c:	e00f      	b.n	15d9e <last_radio_from_ppm+0x4b6>
   15d7e:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d86:	895b      	ldrh	r3, [r3, #10]
   15d88:	b21b      	sxth	r3, r3
   15d8a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d8e:	da06      	bge.n	15d9e <last_radio_from_ppm+0x4b6>
   15d90:	f64a 4384 	movw	r3, #44164	; 0xac84
   15d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d98:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d9c:	815a      	strh	r2, [r3, #10]
   15d9e:	f64a 4398 	movw	r3, #44184	; 0xac98
   15da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da6:	899a      	ldrh	r2, [r3, #12]
   15da8:	f64a 4384 	movw	r3, #44164	; 0xac84
   15dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15db0:	819a      	strh	r2, [r3, #12]
   15db2:	f64a 4398 	movw	r3, #44184	; 0xac98
   15db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dba:	2200      	movs	r2, #0
   15dbc:	819a      	strh	r2, [r3, #12]
   15dbe:	f64a 4384 	movw	r3, #44164	; 0xac84
   15dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dc6:	899b      	ldrh	r3, [r3, #12]
   15dc8:	b21b      	sxth	r3, r3
   15dca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15dce:	dd07      	ble.n	15de0 <last_radio_from_ppm+0x4f8>
   15dd0:	f64a 4384 	movw	r3, #44164	; 0xac84
   15dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15ddc:	819a      	strh	r2, [r3, #12]
   15dde:	e00f      	b.n	15e00 <last_radio_from_ppm+0x518>
   15de0:	f64a 4384 	movw	r3, #44164	; 0xac84
   15de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15de8:	899b      	ldrh	r3, [r3, #12]
   15dea:	b21b      	sxth	r3, r3
   15dec:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15df0:	da06      	bge.n	15e00 <last_radio_from_ppm+0x518>
   15df2:	f64a 4384 	movw	r3, #44164	; 0xac84
   15df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dfa:	f64d 2280 	movw	r2, #55936	; 0xda80
   15dfe:	819a      	strh	r2, [r3, #12]
   15e00:	f64a 4398 	movw	r3, #44184	; 0xac98
   15e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e08:	89da      	ldrh	r2, [r3, #14]
   15e0a:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e12:	81da      	strh	r2, [r3, #14]
   15e14:	f64a 4398 	movw	r3, #44184	; 0xac98
   15e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e1c:	2200      	movs	r2, #0
   15e1e:	81da      	strh	r2, [r3, #14]
   15e20:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e28:	89db      	ldrh	r3, [r3, #14]
   15e2a:	b21b      	sxth	r3, r3
   15e2c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e30:	dd07      	ble.n	15e42 <last_radio_from_ppm+0x55a>
   15e32:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e3a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15e3e:	81da      	strh	r2, [r3, #14]
   15e40:	e00f      	b.n	15e62 <last_radio_from_ppm+0x57a>
   15e42:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4a:	89db      	ldrh	r3, [r3, #14]
   15e4c:	b21b      	sxth	r3, r3
   15e4e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15e52:	da06      	bge.n	15e62 <last_radio_from_ppm+0x57a>
   15e54:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e5c:	f64d 2280 	movw	r2, #55936	; 0xda80
   15e60:	81da      	strh	r2, [r3, #14]
   15e62:	f64a 4398 	movw	r3, #44184	; 0xac98
   15e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e6a:	8a1a      	ldrh	r2, [r3, #16]
   15e6c:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e74:	821a      	strh	r2, [r3, #16]
   15e76:	f64a 4398 	movw	r3, #44184	; 0xac98
   15e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e7e:	2200      	movs	r2, #0
   15e80:	821a      	strh	r2, [r3, #16]
   15e82:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e8a:	8a1b      	ldrh	r3, [r3, #16]
   15e8c:	b21b      	sxth	r3, r3
   15e8e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e92:	dd07      	ble.n	15ea4 <last_radio_from_ppm+0x5bc>
   15e94:	f64a 4384 	movw	r3, #44164	; 0xac84
   15e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15ea0:	821a      	strh	r2, [r3, #16]
   15ea2:	e00f      	b.n	15ec4 <last_radio_from_ppm+0x5dc>
   15ea4:	f64a 4384 	movw	r3, #44164	; 0xac84
   15ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eac:	8a1b      	ldrh	r3, [r3, #16]
   15eae:	b21b      	sxth	r3, r3
   15eb0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15eb4:	da06      	bge.n	15ec4 <last_radio_from_ppm+0x5dc>
   15eb6:	f64a 4384 	movw	r3, #44164	; 0xac84
   15eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ebe:	f64d 2280 	movw	r2, #55936	; 0xda80
   15ec2:	821a      	strh	r2, [r3, #16]
   15ec4:	f64a 43aa 	movw	r3, #44202	; 0xacaa
   15ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ecc:	2201      	movs	r2, #1
   15ece:	701a      	strb	r2, [r3, #0]
}
   15ed0:	370c      	adds	r7, #12
   15ed2:	46bd      	mov	sp, r7
   15ed4:	bd90      	pop	{r4, r7, pc}
   15ed6:	bf00      	nop

00015ed8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   15ed8:	b480      	push	{r7}
   15eda:	af00      	add	r7, sp, #0
  idx_buf = 0;
   15edc:	f64a 43e4 	movw	r3, #44260	; 0xace4
   15ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ee4:	2200      	movs	r2, #0
   15ee6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   15ee8:	f64a 43e5 	movw	r3, #44261	; 0xace5
   15eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef0:	2200      	movs	r2, #0
   15ef2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   15ef4:	f64a 43e4 	movw	r3, #44260	; 0xace4
   15ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15efc:	781b      	ldrb	r3, [r3, #0]
   15efe:	b2db      	uxtb	r3, r3
   15f00:	461a      	mov	r2, r3
   15f02:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   15f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f0a:	4413      	add	r3, r2
   15f0c:	781a      	ldrb	r2, [r3, #0]
   15f0e:	f64a 43e6 	movw	r3, #44262	; 0xace6
   15f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f16:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   15f18:	f242 030f 	movw	r3, #8207	; 0x200f
   15f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f20:	f64a 42e6 	movw	r2, #44262	; 0xace6
   15f24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15f28:	7812      	ldrb	r2, [r2, #0]
   15f2a:	b2d2      	uxtb	r2, r2
   15f2c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   15f2e:	f64a 43e2 	movw	r3, #44258	; 0xace2
   15f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f36:	2200      	movs	r2, #0
   15f38:	701a      	strb	r2, [r3, #0]
}
   15f3a:	46bd      	mov	sp, r7
   15f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f40:	4770      	bx	lr
   15f42:	bf00      	nop

00015f44 <fbw_spi_init>:

void fbw_spi_init(void) {
   15f44:	b480      	push	{r7}
   15f46:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   15f48:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   15f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f50:	2200      	movs	r2, #0
   15f52:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   15f54:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   15f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f5c:	2200      	movs	r2, #0
   15f5e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   15f60:	f242 0317 	movw	r3, #8215	; 0x2017
   15f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f68:	f242 0217 	movw	r2, #8215	; 0x2017
   15f6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15f70:	7812      	ldrb	r2, [r2, #0]
   15f72:	b2d2      	uxtb	r2, r2
   15f74:	f042 0210 	orr.w	r2, r2, #16
   15f78:	b2d2      	uxtb	r2, r2
   15f7a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   15f7c:	f242 030d 	movw	r3, #8205	; 0x200d
   15f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f84:	2240      	movs	r2, #64	; 0x40
   15f86:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   15f88:	f242 030d 	movw	r3, #8205	; 0x200d
   15f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f90:	f242 020d 	movw	r2, #8205	; 0x200d
   15f94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15f98:	7812      	ldrb	r2, [r2, #0]
   15f9a:	b2d2      	uxtb	r2, r2
   15f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15fa0:	b2d2      	uxtb	r2, r2
   15fa2:	701a      	strb	r2, [r3, #0]
}
   15fa4:	46bd      	mov	sp, r7
   15fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
   15faa:	4770      	bx	lr
   15fac:	0000      	movs	r0, r0
	...

00015fb0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   15fb0:	b480      	push	{r7}
   15fb2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   15fb4:	f242 032f 	movw	r3, #8239	; 0x202f
   15fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fbc:	2200      	movs	r2, #0
   15fbe:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   15fc0:	f242 032e 	movw	r3, #8238	; 0x202e
   15fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc8:	2201      	movs	r2, #1
   15fca:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   15fcc:	f242 0325 	movw	r3, #8229	; 0x2025
   15fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd4:	2207      	movs	r2, #7
   15fd6:	701a      	strb	r2, [r3, #0]
}
   15fd8:	46bd      	mov	sp, r7
   15fda:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fde:	4770      	bx	lr

00015fe0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   15fe0:	b480      	push	{r7}
   15fe2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   15fe4:	f242 032e 	movw	r3, #8238	; 0x202e
   15fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fec:	f242 022e 	movw	r2, #8238	; 0x202e
   15ff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15ff4:	7812      	ldrb	r2, [r2, #0]
   15ff6:	b2d2      	uxtb	r2, r2
   15ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15ffc:	b2d2      	uxtb	r2, r2
   15ffe:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16000:	f242 032e 	movw	r3, #8238	; 0x202e
   16004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16008:	f242 022e 	movw	r2, #8238	; 0x202e
   1600c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16010:	7812      	ldrb	r2, [r2, #0]
   16012:	b2d2      	uxtb	r2, r2
   16014:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16018:	b2d2      	uxtb	r2, r2
   1601a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1601c:	f242 0317 	movw	r3, #8215	; 0x2017
   16020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16024:	f242 0217 	movw	r2, #8215	; 0x2017
   16028:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1602c:	7812      	ldrb	r2, [r2, #0]
   1602e:	b2d2      	uxtb	r2, r2
   16030:	f022 0201 	bic.w	r2, r2, #1
   16034:	b2d2      	uxtb	r2, r2
   16036:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16038:	f242 0337 	movw	r3, #8247	; 0x2037
   1603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16040:	f242 0237 	movw	r2, #8247	; 0x2037
   16044:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16048:	7812      	ldrb	r2, [r2, #0]
   1604a:	b2d2      	uxtb	r2, r2
   1604c:	f042 0220 	orr.w	r2, r2, #32
   16050:	b2d2      	uxtb	r2, r2
   16052:	701a      	strb	r2, [r3, #0]
}
   16054:	46bd      	mov	sp, r7
   16056:	f85d 7b04 	ldr.w	r7, [sp], #4
   1605a:	4770      	bx	lr

0001605c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1605c:	b580      	push	{r7, lr}
   1605e:	b082      	sub	sp, #8
   16060:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16062:	2300      	movs	r3, #0
   16064:	71fb      	strb	r3, [r7, #7]
   16066:	e010      	b.n	1608a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16068:	79fa      	ldrb	r2, [r7, #7]
   1606a:	79f9      	ldrb	r1, [r7, #7]
   1606c:	f64a 4384 	movw	r3, #44164	; 0xac84
   16070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16074:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16078:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   1607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16080:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16084:	79fb      	ldrb	r3, [r7, #7]
   16086:	3301      	adds	r3, #1
   16088:	71fb      	strb	r3, [r7, #7]
   1608a:	79fb      	ldrb	r3, [r7, #7]
   1608c:	2b08      	cmp	r3, #8
   1608e:	d9eb      	bls.n	16068 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16090:	f64a 5374 	movw	r3, #44404	; 0xad74
   16094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16098:	781b      	ldrb	r3, [r3, #0]
   1609a:	2b00      	cmp	r3, #0
   1609c:	bf0c      	ite	eq
   1609e:	2300      	moveq	r3, #0
   160a0:	2301      	movne	r3, #1
   160a2:	b2db      	uxtb	r3, r3
   160a4:	461a      	mov	r2, r3
   160a6:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   160aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ae:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   160b0:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   160b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b8:	7cdb      	ldrb	r3, [r3, #19]
   160ba:	b2da      	uxtb	r2, r3
   160bc:	f64a 5376 	movw	r3, #44406	; 0xad76
   160c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c4:	781b      	ldrb	r3, [r3, #0]
   160c6:	2b00      	cmp	r3, #0
   160c8:	d001      	beq.n	160ce <to_autopilot_from_last_radio+0x72>
   160ca:	2302      	movs	r3, #2
   160cc:	e000      	b.n	160d0 <to_autopilot_from_last_radio+0x74>
   160ce:	2300      	movs	r3, #0
   160d0:	4313      	orrs	r3, r2
   160d2:	b2db      	uxtb	r3, r3
   160d4:	b2da      	uxtb	r2, r3
   160d6:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   160da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160de:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   160e0:	f64a 43aa 	movw	r3, #44202	; 0xacaa
   160e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e8:	781b      	ldrb	r3, [r3, #0]
   160ea:	2b00      	cmp	r3, #0
   160ec:	d012      	beq.n	16114 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   160ee:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   160f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f6:	7cdb      	ldrb	r3, [r3, #19]
   160f8:	f043 0304 	orr.w	r3, r3, #4
   160fc:	b2da      	uxtb	r2, r3
   160fe:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   16102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16106:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16108:	f64a 43aa 	movw	r3, #44202	; 0xacaa
   1610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16110:	2200      	movs	r2, #0
   16112:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16114:	f64a 5378 	movw	r3, #44408	; 0xad78
   16118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1611c:	781a      	ldrb	r2, [r3, #0]
   1611e:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   16122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16126:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16128:	f64a 43e8 	movw	r3, #44264	; 0xace8
   1612c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16130:	881b      	ldrh	r3, [r3, #0]
   16132:	4618      	mov	r0, r3
   16134:	f001 f84e 	bl	171d4 <__aeabi_i2d>
   16138:	4602      	mov	r2, r0
   1613a:	460b      	mov	r3, r1
   1613c:	4610      	mov	r0, r2
   1613e:	4619      	mov	r1, r3
   16140:	a31b      	add	r3, pc, #108	; (adr r3, 161b0 <to_autopilot_from_last_radio+0x154>)
   16142:	e9d3 2300 	ldrd	r2, r3, [r3]
   16146:	f001 f8ab 	bl	172a0 <__aeabi_dmul>
   1614a:	4602      	mov	r2, r0
   1614c:	460b      	mov	r3, r1
   1614e:	4610      	mov	r0, r2
   16150:	4619      	mov	r1, r3
   16152:	f04f 0200 	mov.w	r2, #0
   16156:	f04f 0300 	mov.w	r3, #0
   1615a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1615e:	f001 f9c9 	bl	174f4 <__aeabi_ddiv>
   16162:	4602      	mov	r2, r0
   16164:	460b      	mov	r3, r1
   16166:	4610      	mov	r0, r2
   16168:	4619      	mov	r1, r3
   1616a:	a313      	add	r3, pc, #76	; (adr r3, 161b8 <to_autopilot_from_last_radio+0x15c>)
   1616c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16170:	f000 fee4 	bl	16f3c <__adddf3>
   16174:	4602      	mov	r2, r0
   16176:	460b      	mov	r3, r1
   16178:	4610      	mov	r0, r2
   1617a:	4619      	mov	r1, r3
   1617c:	f04f 0200 	mov.w	r2, #0
   16180:	f04f 0300 	mov.w	r3, #0
   16184:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16188:	f001 f88a 	bl	172a0 <__aeabi_dmul>
   1618c:	4602      	mov	r2, r0
   1618e:	460b      	mov	r3, r1
   16190:	4610      	mov	r0, r2
   16192:	4619      	mov	r1, r3
   16194:	f001 fb46 	bl	17824 <__aeabi_d2uiz>
   16198:	4603      	mov	r3, r0
   1619a:	b2da      	uxtb	r2, r3
   1619c:	f64a 43cc 	movw	r3, #44236	; 0xaccc
   161a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161a4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   161a6:	3708      	adds	r7, #8
   161a8:	46bd      	mov	sp, r7
   161aa:	bd80      	pop	{r7, pc}
   161ac:	f3af 8000 	nop.w
   161b0:	1eb851ec 	.word	0x1eb851ec
   161b4:	3f91eb85 	.word	0x3f91eb85
   161b8:	020c49ba 	.word	0x020c49ba
   161bc:	3fb6872b 	.word	0x3fb6872b

000161c0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   161c0:	b580      	push	{r7, lr}
   161c2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   161c4:	f64a 43e3 	movw	r3, #44259	; 0xace3
   161c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161cc:	2200      	movs	r2, #0
   161ce:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   161d0:	f7ff ff44 	bl	1605c <to_autopilot_from_last_radio>
      spi_reset();
   161d4:	f7ff fe80 	bl	15ed8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   161d8:	bd80      	pop	{r7, pc}
   161da:	bf00      	nop

000161dc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   161dc:	b580      	push	{r7, lr}
   161de:	af00      	add	r7, sp, #0
  uart_init_tx();
   161e0:	f000 fb02 	bl	167e8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   161e4:	f248 10d4 	movw	r0, #33236	; 0x81d4
   161e8:	f2c0 0001 	movt	r0, #1
   161ec:	f000 fbda 	bl	169a4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   161f0:	f7ff fab2 	bl	15758 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   161f4:	2003      	movs	r0, #3
   161f6:	f64a 41e8 	movw	r1, #44264	; 0xace8
   161fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
   161fe:	f7ff fa97 	bl	15730 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16202:	2006      	movs	r0, #6
   16204:	f64a 512c 	movw	r1, #44332	; 0xad2c
   16208:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1620c:	f7ff fa90 	bl	15730 <fbw_adc_buf_channel>
#endif
  timer_init();
   16210:	f7ff fece 	bl	15fb0 <timer_init>
  servo_init();
   16214:	f000 f894 	bl	16340 <servo_init>
  ppm_init();
   16218:	f7ff fee2 	bl	15fe0 <ppm_init>
  fbw_spi_init();
   1621c:	f7ff fe92 	bl	15f44 <fbw_spi_init>
  //sei(); //FN
}
   16220:	bd80      	pop	{r7, pc}
   16222:	bf00      	nop

00016224 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16224:	b580      	push	{r7, lr}
   16226:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16228:	f64a 43ab 	movw	r3, #44203	; 0xacab
   1622c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16230:	2200      	movs	r2, #0
   16232:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16234:	f64a 5377 	movw	r3, #44407	; 0xad77
   16238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1623c:	781b      	ldrb	r3, [r3, #0]
   1623e:	3301      	adds	r3, #1
   16240:	b2da      	uxtb	r2, r3
   16242:	f64a 5377 	movw	r3, #44407	; 0xad77
   16246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1624a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1624c:	f64a 5374 	movw	r3, #44404	; 0xad74
   16250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16254:	2201      	movs	r2, #1
   16256:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16258:	f64a 5376 	movw	r3, #44406	; 0xad76
   1625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16260:	2200      	movs	r2, #0
   16262:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16264:	f64a 5372 	movw	r3, #44402	; 0xad72
   16268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1626c:	2200      	movs	r2, #0
   1626e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16270:	f7ff fb3a 	bl	158e8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16274:	f64a 4384 	movw	r3, #44164	; 0xac84
   16278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1627c:	891b      	ldrh	r3, [r3, #8]
   1627e:	b21b      	sxth	r3, r3
   16280:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16284:	bfb4      	ite	lt
   16286:	2300      	movlt	r3, #0
   16288:	2301      	movge	r3, #1
   1628a:	b2db      	uxtb	r3, r3
   1628c:	461a      	mov	r2, r3
   1628e:	f64a 5370 	movw	r3, #44400	; 0xad70
   16292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16296:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16298:	f64a 5370 	movw	r3, #44400	; 0xad70
   1629c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a0:	781b      	ldrb	r3, [r3, #0]
   162a2:	2b00      	cmp	r3, #0
   162a4:	d105      	bne.n	162b2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   162a6:	f64a 4084 	movw	r0, #44164	; 0xac84
   162aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   162ae:	f000 f925 	bl	164fc <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   162b2:	f64a 5370 	movw	r3, #44400	; 0xad70
   162b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162ba:	2201      	movs	r2, #1
   162bc:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   162be:	f64a 5374 	movw	r3, #44404	; 0xad74
   162c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c6:	2200      	movs	r2, #0
   162c8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   162ca:	f64a 5376 	movw	r3, #44406	; 0xad76
   162ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d2:	2201      	movs	r2, #1
   162d4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   162d6:	bd80      	pop	{r7, pc}

000162d8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   162d8:	b580      	push	{r7, lr}
   162da:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   162dc:	f248 10c0 	movw	r0, #33216	; 0x81c0
   162e0:	f2c0 0001 	movt	r0, #1
   162e4:	f000 f90a 	bl	164fc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   162e8:	bd80      	pop	{r7, pc}
   162ea:	bf00      	nop

000162ec <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   162ec:	b580      	push	{r7, lr}
   162ee:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   162f0:	f64a 43e2 	movw	r3, #44258	; 0xace2
   162f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162f8:	781b      	ldrb	r3, [r3, #0]
   162fa:	b2db      	uxtb	r3, r3
   162fc:	2b00      	cmp	r3, #0
   162fe:	d018      	beq.n	16332 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16300:	f64a 5371 	movw	r3, #44401	; 0xad71
   16304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16308:	2200      	movs	r2, #0
   1630a:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   1630c:	f64a 5375 	movw	r3, #44405	; 0xad75
   16310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16314:	2201      	movs	r2, #1
   16316:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16318:	f64a 5370 	movw	r3, #44400	; 0xad70
   1631c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16320:	781b      	ldrb	r3, [r3, #0]
   16322:	2b01      	cmp	r3, #1
   16324:	d105      	bne.n	16332 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16326:	f64a 40b4 	movw	r0, #44212	; 0xacb4
   1632a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1632e:	f000 f8e5 	bl	164fc <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16332:	f64a 5375 	movw	r3, #44405	; 0xad75
   16336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1633a:	2200      	movs	r2, #0
   1633c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1633e:	bd80      	pop	{r7, pc}

00016340 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16340:	b480      	push	{r7}
   16342:	b083      	sub	sp, #12
   16344:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16346:	f242 0311 	movw	r3, #8209	; 0x2011
   1634a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1634e:	f242 0211 	movw	r2, #8209	; 0x2011
   16352:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16356:	7812      	ldrb	r2, [r2, #0]
   16358:	b2d2      	uxtb	r2, r2
   1635a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1635e:	b2d2      	uxtb	r2, r2
   16360:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16362:	f242 0317 	movw	r3, #8215	; 0x2017
   16366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1636a:	f242 0217 	movw	r2, #8215	; 0x2017
   1636e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16372:	7812      	ldrb	r2, [r2, #0]
   16374:	b2d2      	uxtb	r2, r2
   16376:	f042 0202 	orr.w	r2, r2, #2
   1637a:	b2d2      	uxtb	r2, r2
   1637c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1637e:	f242 0312 	movw	r3, #8210	; 0x2012
   16382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16386:	f242 0212 	movw	r2, #8210	; 0x2012
   1638a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1638e:	7812      	ldrb	r2, [r2, #0]
   16390:	b2d2      	uxtb	r2, r2
   16392:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16396:	b2d2      	uxtb	r2, r2
   16398:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   1639a:	f242 0318 	movw	r3, #8216	; 0x2018
   1639e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163a2:	f242 0218 	movw	r2, #8216	; 0x2018
   163a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163aa:	7812      	ldrb	r2, [r2, #0]
   163ac:	b2d2      	uxtb	r2, r2
   163ae:	f022 0202 	bic.w	r2, r2, #2
   163b2:	b2d2      	uxtb	r2, r2
   163b4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   163b6:	2300      	movs	r3, #0
   163b8:	71fb      	strb	r3, [r7, #7]
   163ba:	e00b      	b.n	163d4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   163bc:	79fa      	ldrb	r2, [r7, #7]
   163be:	f64a 537c 	movw	r3, #44412	; 0xad7c
   163c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163c6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   163ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   163ce:	79fb      	ldrb	r3, [r7, #7]
   163d0:	3301      	adds	r3, #1
   163d2:	71fb      	strb	r3, [r7, #7]
   163d4:	79fb      	ldrb	r3, [r7, #7]
   163d6:	2b09      	cmp	r3, #9
   163d8:	d9f0      	bls.n	163bc <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   163da:	f242 032a 	movw	r3, #8234	; 0x202a
   163de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   163e6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   163e8:	f242 032f 	movw	r3, #8239	; 0x202f
   163ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163f0:	f242 022f 	movw	r2, #8239	; 0x202f
   163f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   163f8:	7812      	ldrb	r2, [r2, #0]
   163fa:	b2d2      	uxtb	r2, r2
   163fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16400:	b2d2      	uxtb	r2, r2
   16402:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16404:	f242 0336 	movw	r3, #8246	; 0x2036
   16408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1640c:	2210      	movs	r2, #16
   1640e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16410:	f242 0312 	movw	r3, #8210	; 0x2012
   16414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16418:	f242 0212 	movw	r2, #8210	; 0x2012
   1641c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16420:	7812      	ldrb	r2, [r2, #0]
   16422:	b2d2      	uxtb	r2, r2
   16424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16428:	b2d2      	uxtb	r2, r2
   1642a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   1642c:	f242 0337 	movw	r3, #8247	; 0x2037
   16430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16434:	f242 0237 	movw	r2, #8247	; 0x2037
   16438:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1643c:	7812      	ldrb	r2, [r2, #0]
   1643e:	b2d2      	uxtb	r2, r2
   16440:	f042 0210 	orr.w	r2, r2, #16
   16444:	b2d2      	uxtb	r2, r2
   16446:	701a      	strb	r2, [r3, #0]
}
   16448:	370c      	adds	r7, #12
   1644a:	46bd      	mov	sp, r7
   1644c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16450:	4770      	bx	lr
   16452:	bf00      	nop

00016454 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16454:	b480      	push	{r7}
   16456:	b083      	sub	sp, #12
   16458:	af00      	add	r7, sp, #0
   1645a:	4602      	mov	r2, r0
   1645c:	460b      	mov	r3, r1
   1645e:	71fa      	strb	r2, [r7, #7]
   16460:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16462:	79f9      	ldrb	r1, [r7, #7]
   16464:	88bb      	ldrh	r3, [r7, #4]
   16466:	011b      	lsls	r3, r3, #4
   16468:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1646c:	d308      	bcc.n	16480 <servo_set_one+0x2c>
   1646e:	88bb      	ldrh	r3, [r7, #4]
   16470:	011b      	lsls	r3, r3, #4
   16472:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16476:	bf28      	it	cs
   16478:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1647c:	b29a      	uxth	r2, r3
   1647e:	e001      	b.n	16484 <servo_set_one+0x30>
   16480:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16484:	f64a 537c 	movw	r3, #44412	; 0xad7c
   16488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1648c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16490:	370c      	adds	r7, #12
   16492:	46bd      	mov	sp, r7
   16494:	f85d 7b04 	ldr.w	r7, [sp], #4
   16498:	4770      	bx	lr
   1649a:	bf00      	nop

0001649c <servo_transmit>:

void 
servo_transmit(void) {
   1649c:	b580      	push	{r7, lr}
   1649e:	b082      	sub	sp, #8
   164a0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   164a2:	2000      	movs	r0, #0
   164a4:	f000 f9e6 	bl	16874 <uart_transmit>
   164a8:	2000      	movs	r0, #0
   164aa:	f000 f9e3 	bl	16874 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   164ae:	2300      	movs	r3, #0
   164b0:	71fb      	strb	r3, [r7, #7]
   164b2:	e01a      	b.n	164ea <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   164b4:	79fa      	ldrb	r2, [r7, #7]
   164b6:	f64a 537c 	movw	r3, #44412	; 0xad7c
   164ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   164c2:	0a1b      	lsrs	r3, r3, #8
   164c4:	b29b      	uxth	r3, r3
   164c6:	b2db      	uxtb	r3, r3
   164c8:	4618      	mov	r0, r3
   164ca:	f000 f9d3 	bl	16874 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   164ce:	79fa      	ldrb	r2, [r7, #7]
   164d0:	f64a 537c 	movw	r3, #44412	; 0xad7c
   164d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   164dc:	b2db      	uxtb	r3, r3
   164de:	4618      	mov	r0, r3
   164e0:	f000 f9c8 	bl	16874 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   164e4:	79fb      	ldrb	r3, [r7, #7]
   164e6:	3301      	adds	r3, #1
   164e8:	71fb      	strb	r3, [r7, #7]
   164ea:	79fb      	ldrb	r3, [r7, #7]
   164ec:	2b09      	cmp	r3, #9
   164ee:	d9e1      	bls.n	164b4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   164f0:	200a      	movs	r0, #10
   164f2:	f000 f9bf 	bl	16874 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   164f6:	3708      	adds	r7, #8
   164f8:	46bd      	mov	sp, r7
   164fa:	bd80      	pop	{r7, pc}

000164fc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   164fc:	b5b0      	push	{r4, r5, r7, lr}
   164fe:	b084      	sub	sp, #16
   16500:	af00      	add	r7, sp, #0
   16502:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16504:	687b      	ldr	r3, [r7, #4]
   16506:	330a      	adds	r3, #10
   16508:	881b      	ldrh	r3, [r3, #0]
   1650a:	b21b      	sxth	r3, r3
   1650c:	005b      	lsls	r3, r3, #1
   1650e:	4618      	mov	r0, r3
   16510:	f000 fe60 	bl	171d4 <__aeabi_i2d>
   16514:	4602      	mov	r2, r0
   16516:	460b      	mov	r3, r1
   16518:	4610      	mov	r0, r2
   1651a:	4619      	mov	r1, r3
   1651c:	a3a6      	add	r3, pc, #664	; (adr r3, 167b8 <servo_set+0x2bc>)
   1651e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16522:	f000 febd 	bl	172a0 <__aeabi_dmul>
   16526:	4602      	mov	r2, r0
   16528:	460b      	mov	r3, r1
   1652a:	4610      	mov	r0, r2
   1652c:	4619      	mov	r1, r3
   1652e:	f001 f951 	bl	177d4 <__aeabi_d2iz>
   16532:	4603      	mov	r3, r0
   16534:	b29b      	uxth	r3, r3
   16536:	b29b      	uxth	r3, r3
   16538:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1653c:	81fb      	strh	r3, [r7, #14]
   1653e:	89fb      	ldrh	r3, [r7, #14]
   16540:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16544:	d307      	bcc.n	16556 <servo_set+0x5a>
   16546:	89fb      	ldrh	r3, [r7, #14]
   16548:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1654c:	bf28      	it	cs
   1654e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16552:	b29a      	uxth	r2, r3
   16554:	e001      	b.n	1655a <servo_set+0x5e>
   16556:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1655a:	f64a 537c 	movw	r3, #44412	; 0xad7c
   1655e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16562:	80da      	strh	r2, [r3, #6]
   16564:	687b      	ldr	r3, [r7, #4]
   16566:	881b      	ldrh	r3, [r3, #0]
   16568:	b21b      	sxth	r3, r3
   1656a:	005b      	lsls	r3, r3, #1
   1656c:	4618      	mov	r0, r3
   1656e:	f000 fe31 	bl	171d4 <__aeabi_i2d>
   16572:	4602      	mov	r2, r0
   16574:	460b      	mov	r3, r1
   16576:	4610      	mov	r0, r2
   16578:	4619      	mov	r1, r3
   1657a:	a38f      	add	r3, pc, #572	; (adr r3, 167b8 <servo_set+0x2bc>)
   1657c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16580:	f000 fe8e 	bl	172a0 <__aeabi_dmul>
   16584:	4602      	mov	r2, r0
   16586:	460b      	mov	r3, r1
   16588:	4610      	mov	r0, r2
   1658a:	4619      	mov	r1, r3
   1658c:	f001 f922 	bl	177d4 <__aeabi_d2iz>
   16590:	4603      	mov	r3, r0
   16592:	b29b      	uxth	r3, r3
   16594:	b29b      	uxth	r3, r3
   16596:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1659a:	81fb      	strh	r3, [r7, #14]
   1659c:	89fb      	ldrh	r3, [r7, #14]
   1659e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   165a2:	d307      	bcc.n	165b4 <servo_set+0xb8>
   165a4:	89fb      	ldrh	r3, [r7, #14]
   165a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   165aa:	bf28      	it	cs
   165ac:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   165b0:	b29a      	uxth	r2, r3
   165b2:	e001      	b.n	165b8 <servo_set+0xbc>
   165b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   165b8:	f64a 537c 	movw	r3, #44412	; 0xad7c
   165bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c0:	825a      	strh	r2, [r3, #18]
   165c2:	687b      	ldr	r3, [r7, #4]
   165c4:	3304      	adds	r3, #4
   165c6:	881b      	ldrh	r3, [r3, #0]
   165c8:	b21b      	sxth	r3, r3
   165ca:	4618      	mov	r0, r3
   165cc:	f000 fe02 	bl	171d4 <__aeabi_i2d>
   165d0:	4602      	mov	r2, r0
   165d2:	460b      	mov	r3, r1
   165d4:	4610      	mov	r0, r2
   165d6:	4619      	mov	r1, r3
   165d8:	a379      	add	r3, pc, #484	; (adr r3, 167c0 <servo_set+0x2c4>)
   165da:	e9d3 2300 	ldrd	r2, r3, [r3]
   165de:	f000 fe5f 	bl	172a0 <__aeabi_dmul>
   165e2:	4602      	mov	r2, r0
   165e4:	460b      	mov	r3, r1
   165e6:	4610      	mov	r0, r2
   165e8:	4619      	mov	r1, r3
   165ea:	f001 f8f3 	bl	177d4 <__aeabi_d2iz>
   165ee:	4603      	mov	r3, r0
   165f0:	b29b      	uxth	r3, r3
   165f2:	b29b      	uxth	r3, r3
   165f4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   165f8:	3320      	adds	r3, #32
   165fa:	81fb      	strh	r3, [r7, #14]
   165fc:	89fb      	ldrh	r3, [r7, #14]
   165fe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16602:	d307      	bcc.n	16614 <servo_set+0x118>
   16604:	89fb      	ldrh	r3, [r7, #14]
   16606:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1660a:	bf28      	it	cs
   1660c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16610:	b29a      	uxth	r2, r3
   16612:	e001      	b.n	16618 <servo_set+0x11c>
   16614:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16618:	f64a 537c 	movw	r3, #44412	; 0xad7c
   1661c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16620:	819a      	strh	r2, [r3, #12]
   16622:	687b      	ldr	r3, [r7, #4]
   16624:	885b      	ldrh	r3, [r3, #2]
   16626:	81bb      	strh	r3, [r7, #12]
   16628:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1662c:	2b00      	cmp	r3, #0
   1662e:	dd06      	ble.n	1663e <servo_set+0x142>
   16630:	f04f 0400 	mov.w	r4, #0
   16634:	f04f 0500 	mov.w	r5, #0
   16638:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1663c:	e002      	b.n	16644 <servo_set+0x148>
   1663e:	a562      	add	r5, pc, #392	; (adr r5, 167c8 <servo_set+0x2cc>)
   16640:	e9d5 4500 	ldrd	r4, r5, [r5]
   16644:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16648:	4618      	mov	r0, r3
   1664a:	f000 fdc3 	bl	171d4 <__aeabi_i2d>
   1664e:	4602      	mov	r2, r0
   16650:	460b      	mov	r3, r1
   16652:	4620      	mov	r0, r4
   16654:	4629      	mov	r1, r5
   16656:	f000 fe23 	bl	172a0 <__aeabi_dmul>
   1665a:	4602      	mov	r2, r0
   1665c:	460b      	mov	r3, r1
   1665e:	4610      	mov	r0, r2
   16660:	4619      	mov	r1, r3
   16662:	a35b      	add	r3, pc, #364	; (adr r3, 167d0 <servo_set+0x2d4>)
   16664:	e9d3 2300 	ldrd	r2, r3, [r3]
   16668:	f000 fe1a 	bl	172a0 <__aeabi_dmul>
   1666c:	4602      	mov	r2, r0
   1666e:	460b      	mov	r3, r1
   16670:	4610      	mov	r0, r2
   16672:	4619      	mov	r1, r3
   16674:	f001 f8ae 	bl	177d4 <__aeabi_d2iz>
   16678:	4603      	mov	r3, r0
   1667a:	b29b      	uxth	r3, r3
   1667c:	b29b      	uxth	r3, r3
   1667e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16682:	81fb      	strh	r3, [r7, #14]
   16684:	89fb      	ldrh	r3, [r7, #14]
   16686:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1668a:	d307      	bcc.n	1669c <servo_set+0x1a0>
   1668c:	89fb      	ldrh	r3, [r7, #14]
   1668e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16692:	bf28      	it	cs
   16694:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16698:	b29a      	uxth	r2, r3
   1669a:	e001      	b.n	166a0 <servo_set+0x1a4>
   1669c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   166a0:	f64a 537c 	movw	r3, #44412	; 0xad7c
   166a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166a8:	801a      	strh	r2, [r3, #0]
   166aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   166ae:	2b00      	cmp	r3, #0
   166b0:	dd03      	ble.n	166ba <servo_set+0x1be>
   166b2:	a545      	add	r5, pc, #276	; (adr r5, 167c8 <servo_set+0x2cc>)
   166b4:	e9d5 4500 	ldrd	r4, r5, [r5]
   166b8:	e005      	b.n	166c6 <servo_set+0x1ca>
   166ba:	f04f 0400 	mov.w	r4, #0
   166be:	f04f 0500 	mov.w	r5, #0
   166c2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   166c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   166ca:	4618      	mov	r0, r3
   166cc:	f000 fd82 	bl	171d4 <__aeabi_i2d>
   166d0:	4602      	mov	r2, r0
   166d2:	460b      	mov	r3, r1
   166d4:	4620      	mov	r0, r4
   166d6:	4629      	mov	r1, r5
   166d8:	f000 fde2 	bl	172a0 <__aeabi_dmul>
   166dc:	4602      	mov	r2, r0
   166de:	460b      	mov	r3, r1
   166e0:	4610      	mov	r0, r2
   166e2:	4619      	mov	r1, r3
   166e4:	a33c      	add	r3, pc, #240	; (adr r3, 167d8 <servo_set+0x2dc>)
   166e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   166ea:	f000 fdd9 	bl	172a0 <__aeabi_dmul>
   166ee:	4602      	mov	r2, r0
   166f0:	460b      	mov	r3, r1
   166f2:	4610      	mov	r0, r2
   166f4:	4619      	mov	r1, r3
   166f6:	f001 f86d 	bl	177d4 <__aeabi_d2iz>
   166fa:	4603      	mov	r3, r0
   166fc:	b29b      	uxth	r3, r3
   166fe:	b29b      	uxth	r3, r3
   16700:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16704:	3320      	adds	r3, #32
   16706:	81fb      	strh	r3, [r7, #14]
   16708:	89fb      	ldrh	r3, [r7, #14]
   1670a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1670e:	d307      	bcc.n	16720 <servo_set+0x224>
   16710:	89fb      	ldrh	r3, [r7, #14]
   16712:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16716:	bf28      	it	cs
   16718:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1671c:	b29a      	uxth	r2, r3
   1671e:	e001      	b.n	16724 <servo_set+0x228>
   16720:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16724:	f64a 537c 	movw	r3, #44412	; 0xad7c
   16728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1672c:	809a      	strh	r2, [r3, #4]
   1672e:	687b      	ldr	r3, [r7, #4]
   16730:	3306      	adds	r3, #6
   16732:	881b      	ldrh	r3, [r3, #0]
   16734:	b21b      	sxth	r3, r3
   16736:	4618      	mov	r0, r3
   16738:	f000 fd4c 	bl	171d4 <__aeabi_i2d>
   1673c:	4604      	mov	r4, r0
   1673e:	460d      	mov	r5, r1
   16740:	687b      	ldr	r3, [r7, #4]
   16742:	3302      	adds	r3, #2
   16744:	881b      	ldrh	r3, [r3, #0]
   16746:	b21b      	sxth	r3, r3
   16748:	4618      	mov	r0, r3
   1674a:	f000 fd43 	bl	171d4 <__aeabi_i2d>
   1674e:	4602      	mov	r2, r0
   16750:	460b      	mov	r3, r1
   16752:	4620      	mov	r0, r4
   16754:	4629      	mov	r1, r5
   16756:	f000 fbf1 	bl	16f3c <__adddf3>
   1675a:	4602      	mov	r2, r0
   1675c:	460b      	mov	r3, r1
   1675e:	4610      	mov	r0, r2
   16760:	4619      	mov	r1, r3
   16762:	a31f      	add	r3, pc, #124	; (adr r3, 167e0 <servo_set+0x2e4>)
   16764:	e9d3 2300 	ldrd	r2, r3, [r3]
   16768:	f000 fd9a 	bl	172a0 <__aeabi_dmul>
   1676c:	4602      	mov	r2, r0
   1676e:	460b      	mov	r3, r1
   16770:	4610      	mov	r0, r2
   16772:	4619      	mov	r1, r3
   16774:	f001 f82e 	bl	177d4 <__aeabi_d2iz>
   16778:	4603      	mov	r3, r0
   1677a:	b29b      	uxth	r3, r3
   1677c:	b29b      	uxth	r3, r3
   1677e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16782:	3320      	adds	r3, #32
   16784:	81fb      	strh	r3, [r7, #14]
   16786:	89fb      	ldrh	r3, [r7, #14]
   16788:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1678c:	d307      	bcc.n	1679e <servo_set+0x2a2>
   1678e:	89fb      	ldrh	r3, [r7, #14]
   16790:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16794:	bf28      	it	cs
   16796:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1679a:	b29a      	uxth	r2, r3
   1679c:	e001      	b.n	167a2 <servo_set+0x2a6>
   1679e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   167a2:	f64a 537c 	movw	r3, #44412	; 0xad7c
   167a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167aa:	81da      	strh	r2, [r3, #14]
}
   167ac:	3710      	adds	r7, #16
   167ae:	46bd      	mov	sp, r7
   167b0:	bdb0      	pop	{r4, r5, r7, pc}
   167b2:	bf00      	nop
   167b4:	f3af 8000 	nop.w
   167b8:	aaaa9ef0 	.word	0xaaaa9ef0
   167bc:	3feaaaaa 	.word	0x3feaaaaa
   167c0:	fc96473e 	.word	0xfc96473e
   167c4:	3fdfc962 	.word	0x3fdfc962
   167c8:	51eb851f 	.word	0x51eb851f
   167cc:	3fe51eb8 	.word	0x3fe51eb8
   167d0:	9999999a 	.word	0x9999999a
   167d4:	bfe19999 	.word	0xbfe19999
   167d8:	aaaa9ef0 	.word	0xaaaa9ef0
   167dc:	bfe0aaaa 	.word	0xbfe0aaaa
   167e0:	eeeed77a 	.word	0xeeeed77a
   167e4:	bfdeeeee 	.word	0xbfdeeeee

000167e8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   167e8:	b480      	push	{r7}
   167ea:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   167ec:	f242 0320 	movw	r3, #8224	; 0x2020
   167f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167f4:	2200      	movs	r2, #0
   167f6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   167f8:	f242 0309 	movw	r3, #8201	; 0x2009
   167fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16800:	2219      	movs	r2, #25
   16802:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16804:	f242 030b 	movw	r3, #8203	; 0x200b
   16808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1680c:	2200      	movs	r2, #0
   1680e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16810:	f242 030a 	movw	r3, #8202	; 0x200a
   16814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16818:	2208      	movs	r2, #8
   1681a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1681c:	f242 0320 	movw	r3, #8224	; 0x2020
   16820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16824:	2286      	movs	r2, #134	; 0x86
   16826:	701a      	strb	r2, [r3, #0]
}
   16828:	46bd      	mov	sp, r7
   1682a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1682e:	4770      	bx	lr

00016830 <uart_init_rx>:

void uart_init_rx() {
   16830:	b480      	push	{r7}
   16832:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16834:	f242 030a 	movw	r3, #8202	; 0x200a
   16838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1683c:	f242 020a 	movw	r2, #8202	; 0x200a
   16840:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16844:	7812      	ldrb	r2, [r2, #0]
   16846:	b2d2      	uxtb	r2, r2
   16848:	f042 0210 	orr.w	r2, r2, #16
   1684c:	b2d2      	uxtb	r2, r2
   1684e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16850:	f242 030a 	movw	r3, #8202	; 0x200a
   16854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16858:	f242 020a 	movw	r2, #8202	; 0x200a
   1685c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16860:	7812      	ldrb	r2, [r2, #0]
   16862:	b2d2      	uxtb	r2, r2
   16864:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16868:	b2d2      	uxtb	r2, r2
   1686a:	701a      	strb	r2, [r3, #0]
}
   1686c:	46bd      	mov	sp, r7
   1686e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16872:	4770      	bx	lr

00016874 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16874:	b480      	push	{r7}
   16876:	b083      	sub	sp, #12
   16878:	af00      	add	r7, sp, #0
   1687a:	4603      	mov	r3, r0
   1687c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1687e:	f242 030a 	movw	r3, #8202	; 0x200a
   16882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16886:	781b      	ldrb	r3, [r3, #0]
   16888:	b2db      	uxtb	r3, r3
   1688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1688e:	2b00      	cmp	r3, #0
   16890:	d028      	beq.n	168e4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16892:	f64a 5391 	movw	r3, #44433	; 0xad91
   16896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1689a:	781b      	ldrb	r3, [r3, #0]
   1689c:	b2db      	uxtb	r3, r3
   1689e:	461a      	mov	r2, r3
   168a0:	f64a 5390 	movw	r3, #44432	; 0xad90
   168a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	3301      	adds	r3, #1
   168ac:	429a      	cmp	r2, r3
   168ae:	d100      	bne.n	168b2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   168b0:	e02c      	b.n	1690c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   168b2:	f64a 5390 	movw	r3, #44432	; 0xad90
   168b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ba:	781b      	ldrb	r3, [r3, #0]
   168bc:	461a      	mov	r2, r3
   168be:	f64a 5394 	movw	r3, #44436	; 0xad94
   168c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c6:	79f9      	ldrb	r1, [r7, #7]
   168c8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   168ca:	f64a 5390 	movw	r3, #44432	; 0xad90
   168ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d2:	781b      	ldrb	r3, [r3, #0]
   168d4:	3301      	adds	r3, #1
   168d6:	b2da      	uxtb	r2, r3
   168d8:	f64a 5390 	movw	r3, #44432	; 0xad90
   168dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e0:	701a      	strb	r2, [r3, #0]
   168e2:	e013      	b.n	1690c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   168e4:	f242 030c 	movw	r3, #8204	; 0x200c
   168e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ec:	79fa      	ldrb	r2, [r7, #7]
   168ee:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   168f0:	f242 030a 	movw	r3, #8202	; 0x200a
   168f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168f8:	f242 020a 	movw	r2, #8202	; 0x200a
   168fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16900:	7812      	ldrb	r2, [r2, #0]
   16902:	b2d2      	uxtb	r2, r2
   16904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16908:	b2d2      	uxtb	r2, r2
   1690a:	701a      	strb	r2, [r3, #0]
  }
}
   1690c:	370c      	adds	r7, #12
   1690e:	46bd      	mov	sp, r7
   16910:	f85d 7b04 	ldr.w	r7, [sp], #4
   16914:	4770      	bx	lr
   16916:	bf00      	nop

00016918 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16918:	b590      	push	{r4, r7, lr}
   1691a:	b089      	sub	sp, #36	; 0x24
   1691c:	af00      	add	r7, sp, #0
   1691e:	4603      	mov	r3, r0
   16920:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16922:	f248 2314 	movw	r3, #33300	; 0x8214
   16926:	f2c0 0301 	movt	r3, #1
   1692a:	f107 040c 	add.w	r4, r7, #12
   1692e:	6818      	ldr	r0, [r3, #0]
   16930:	6859      	ldr	r1, [r3, #4]
   16932:	689a      	ldr	r2, [r3, #8]
   16934:	68db      	ldr	r3, [r3, #12]
   16936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16938:	79fb      	ldrb	r3, [r7, #7]
   1693a:	091b      	lsrs	r3, r3, #4
   1693c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1693e:	79fb      	ldrb	r3, [r7, #7]
   16940:	f003 030f 	and.w	r3, r3, #15
   16944:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16946:	230f      	movs	r3, #15
   16948:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1694a:	230f      	movs	r3, #15
   1694c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1694e:	7ffb      	ldrb	r3, [r7, #31]
   16950:	f107 0220 	add.w	r2, r7, #32
   16954:	4413      	add	r3, r2
   16956:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1695a:	4618      	mov	r0, r3
   1695c:	f7ff ff8a 	bl	16874 <uart_transmit>
  uart_transmit(hex[low]);
   16960:	7fbb      	ldrb	r3, [r7, #30]
   16962:	f107 0220 	add.w	r2, r7, #32
   16966:	4413      	add	r3, r2
   16968:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1696c:	4618      	mov	r0, r3
   1696e:	f7ff ff81 	bl	16874 <uart_transmit>
} 
   16972:	3724      	adds	r7, #36	; 0x24
   16974:	46bd      	mov	sp, r7
   16976:	bd90      	pop	{r4, r7, pc}

00016978 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16978:	b580      	push	{r7, lr}
   1697a:	b084      	sub	sp, #16
   1697c:	af00      	add	r7, sp, #0
   1697e:	4603      	mov	r3, r0
   16980:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16982:	88fb      	ldrh	r3, [r7, #6]
   16984:	0a1b      	lsrs	r3, r3, #8
   16986:	b29b      	uxth	r3, r3
   16988:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1698a:	88fb      	ldrh	r3, [r7, #6]
   1698c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1698e:	7bfb      	ldrb	r3, [r7, #15]
   16990:	4618      	mov	r0, r3
   16992:	f7ff ffc1 	bl	16918 <uart_print_hex>
  uart_print_hex(low);
   16996:	7bbb      	ldrb	r3, [r7, #14]
   16998:	4618      	mov	r0, r3
   1699a:	f7ff ffbd 	bl	16918 <uart_print_hex>
}
   1699e:	3710      	adds	r7, #16
   169a0:	46bd      	mov	sp, r7
   169a2:	bd80      	pop	{r7, pc}

000169a4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   169a4:	b580      	push	{r7, lr}
   169a6:	b084      	sub	sp, #16
   169a8:	af00      	add	r7, sp, #0
   169aa:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   169ac:	2300      	movs	r3, #0
   169ae:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   169b0:	e009      	b.n	169c6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   169b2:	7bfb      	ldrb	r3, [r7, #15]
   169b4:	687a      	ldr	r2, [r7, #4]
   169b6:	4413      	add	r3, r2
   169b8:	781b      	ldrb	r3, [r3, #0]
   169ba:	4618      	mov	r0, r3
   169bc:	f7ff ff5a 	bl	16874 <uart_transmit>
    i++;
   169c0:	7bfb      	ldrb	r3, [r7, #15]
   169c2:	3301      	adds	r3, #1
   169c4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   169c6:	7bfb      	ldrb	r3, [r7, #15]
   169c8:	687a      	ldr	r2, [r7, #4]
   169ca:	4413      	add	r3, r2
   169cc:	781b      	ldrb	r3, [r3, #0]
   169ce:	2b00      	cmp	r3, #0
   169d0:	d1ef      	bne.n	169b2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   169d2:	3710      	adds	r7, #16
   169d4:	46bd      	mov	sp, r7
   169d6:	bd80      	pop	{r7, pc}

000169d8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   169d8:	b480      	push	{r7}
   169da:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   169dc:	f64a 5390 	movw	r3, #44432	; 0xad90
   169e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169e4:	781a      	ldrb	r2, [r3, #0]
   169e6:	f64a 5391 	movw	r3, #44433	; 0xad91
   169ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169ee:	781b      	ldrb	r3, [r3, #0]
   169f0:	b2db      	uxtb	r3, r3
   169f2:	429a      	cmp	r2, r3
   169f4:	d10e      	bne.n	16a14 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   169f6:	f242 030a 	movw	r3, #8202	; 0x200a
   169fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169fe:	f242 020a 	movw	r2, #8202	; 0x200a
   16a02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a06:	7812      	ldrb	r2, [r2, #0]
   16a08:	b2d2      	uxtb	r2, r2
   16a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16a0e:	b2d2      	uxtb	r2, r2
   16a10:	701a      	strb	r2, [r3, #0]
   16a12:	e01d      	b.n	16a50 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16a14:	f242 030c 	movw	r3, #8204	; 0x200c
   16a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a1c:	f64a 5291 	movw	r2, #44433	; 0xad91
   16a20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a24:	7812      	ldrb	r2, [r2, #0]
   16a26:	b2d2      	uxtb	r2, r2
   16a28:	4611      	mov	r1, r2
   16a2a:	f64a 5294 	movw	r2, #44436	; 0xad94
   16a2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a32:	5c52      	ldrb	r2, [r2, r1]
   16a34:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16a36:	f64a 5391 	movw	r3, #44433	; 0xad91
   16a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a3e:	781b      	ldrb	r3, [r3, #0]
   16a40:	b2db      	uxtb	r3, r3
   16a42:	3301      	adds	r3, #1
   16a44:	b2da      	uxtb	r2, r3
   16a46:	f64a 5391 	movw	r3, #44433	; 0xad91
   16a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a4e:	701a      	strb	r2, [r3, #0]
  }
}
   16a50:	46bd      	mov	sp, r7
   16a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a56:	4770      	bx	lr

00016a58 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16a58:	b580      	push	{r7, lr}
   16a5a:	b082      	sub	sp, #8
   16a5c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16a5e:	2010      	movs	r0, #16
   16a60:	2101      	movs	r1, #1
   16a62:	f7ea f9ad 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16a66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16a6a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16a72:	2201      	movs	r2, #1
   16a74:	f7ea fcb4 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16a7c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16a7e:	2310      	movs	r3, #16
   16a80:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16a82:	2303      	movs	r3, #3
   16a84:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16a86:	1d3b      	adds	r3, r7, #4
   16a88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16a8c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16a90:	4619      	mov	r1, r3
   16a92:	f7ea fb69 	bl	1168 <GPIO_Init>
}
   16a96:	3708      	adds	r7, #8
   16a98:	46bd      	mov	sp, r7
   16a9a:	bd80      	pop	{r7, pc}

00016a9c <init_button>:

void init_button(void)
{
   16a9c:	b580      	push	{r7, lr}
   16a9e:	b082      	sub	sp, #8
   16aa0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16aa2:	2004      	movs	r0, #4
   16aa4:	2101      	movs	r1, #1
   16aa6:	f7ea f98b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16aaa:	2301      	movs	r3, #1
   16aac:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16aae:	2304      	movs	r3, #4
   16ab0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16ab2:	2303      	movs	r3, #3
   16ab4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16ab6:	1d3b      	adds	r3, r7, #4
   16ab8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16abc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16ac0:	4619      	mov	r1, r3
   16ac2:	f7ea fb51 	bl	1168 <GPIO_Init>
}
   16ac6:	3708      	adds	r7, #8
   16ac8:	46bd      	mov	sp, r7
   16aca:	bd80      	pop	{r7, pc}

00016acc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16acc:	b580      	push	{r7, lr}
   16ace:	b084      	sub	sp, #16
   16ad0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16ad2:	2001      	movs	r0, #1
   16ad4:	2101      	movs	r1, #1
   16ad6:	f7ea f973 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16ada:	2000      	movs	r0, #0
   16adc:	2100      	movs	r1, #0
   16ade:	f7ea fd77 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16ae2:	2301      	movs	r3, #1
   16ae4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16ae6:	2300      	movs	r3, #0
   16ae8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16aea:	2308      	movs	r3, #8
   16aec:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16aee:	2301      	movs	r3, #1
   16af0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16af2:	f107 0308 	add.w	r3, r7, #8
   16af6:	4618      	mov	r0, r3
   16af8:	f7eb fa70 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16afc:	2306      	movs	r3, #6
   16afe:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16b00:	230f      	movs	r3, #15
   16b02:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16b04:	230f      	movs	r3, #15
   16b06:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16b08:	2301      	movs	r3, #1
   16b0a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16b0c:	1d3b      	adds	r3, r7, #4
   16b0e:	4618      	mov	r0, r3
   16b10:	f7eb fb9e 	bl	2250 <NVIC_Init>
}
   16b14:	3710      	adds	r7, #16
   16b16:	46bd      	mov	sp, r7
   16b18:	bd80      	pop	{r7, pc}
   16b1a:	bf00      	nop

00016b1c <init_rs232>:

void init_rs232(void)
{
   16b1c:	b580      	push	{r7, lr}
   16b1e:	b086      	sub	sp, #24
   16b20:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16b22:	2005      	movs	r0, #5
   16b24:	2101      	movs	r1, #1
   16b26:	f7ea f94b 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16b2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16b2e:	2101      	movs	r1, #1
   16b30:	f7ea f96e 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16b34:	2308      	movs	r3, #8
   16b36:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16b38:	2304      	movs	r3, #4
   16b3a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16b3c:	1d3b      	adds	r3, r7, #4
   16b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16b42:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16b46:	4619      	mov	r1, r3
   16b48:	f7ea fb0e 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16b4c:	2304      	movs	r3, #4
   16b4e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16b50:	2303      	movs	r3, #3
   16b52:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16b54:	2318      	movs	r3, #24
   16b56:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16b58:	1d3b      	adds	r3, r7, #4
   16b5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16b5e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16b62:	4619      	mov	r1, r3
   16b64:	f7ea fb00 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16b68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16b6c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16b6e:	2300      	movs	r3, #0
   16b70:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16b72:	2300      	movs	r3, #0
   16b74:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16b76:	2300      	movs	r3, #0
   16b78:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16b7a:	2300      	movs	r3, #0
   16b7c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16b7e:	230c      	movs	r3, #12
   16b80:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16b82:	f107 0308 	add.w	r3, r7, #8
   16b86:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16b8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16b8e:	4619      	mov	r1, r3
   16b90:	f7ea fdd2 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16b94:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16b98:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16b9c:	2101      	movs	r1, #1
   16b9e:	f7ea fee9 	bl	1974 <USART_Cmd>
}
   16ba2:	3718      	adds	r7, #24
   16ba4:	46bd      	mov	sp, r7
   16ba6:	bd80      	pop	{r7, pc}

00016ba8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16ba8:	b580      	push	{r7, lr}
   16baa:	b082      	sub	sp, #8
   16bac:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16bae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bb2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16bb6:	f240 7127 	movw	r1, #1831	; 0x727
   16bba:	2200      	movs	r2, #0
   16bbc:	f7ea fefa 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16bc0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bc4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16bc8:	f240 5125 	movw	r1, #1317	; 0x525
   16bcc:	2201      	movs	r2, #1
   16bce:	f7ea fef1 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16bd2:	2326      	movs	r3, #38	; 0x26
   16bd4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16bd6:	2300      	movs	r3, #0
   16bd8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16bda:	2301      	movs	r3, #1
   16bdc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16bde:	1d3b      	adds	r3, r7, #4
   16be0:	4618      	mov	r0, r3
   16be2:	f7eb fb35 	bl	2250 <NVIC_Init>
}
   16be6:	3708      	adds	r7, #8
   16be8:	46bd      	mov	sp, r7
   16bea:	bd80      	pop	{r7, pc}

00016bec <enable_rs232>:

void enable_rs232(void)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16bf0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16bf4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16bf8:	2101      	movs	r1, #1
   16bfa:	f7ea febb 	bl	1974 <USART_Cmd>
}
   16bfe:	bd80      	pop	{r7, pc}

00016c00 <send_byte>:

void send_byte(uint8_t b)
{
   16c00:	b580      	push	{r7, lr}
   16c02:	b082      	sub	sp, #8
   16c04:	af00      	add	r7, sp, #0
   16c06:	4603      	mov	r3, r0
   16c08:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16c0a:	bf00      	nop
   16c0c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16c10:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16c14:	2180      	movs	r1, #128	; 0x80
   16c16:	f7eb f919 	bl	1e4c <USART_GetFlagStatus>
   16c1a:	4603      	mov	r3, r0
   16c1c:	2b00      	cmp	r3, #0
   16c1e:	d0f5      	beq.n	16c0c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16c24:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16c2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16c30:	68d2      	ldr	r2, [r2, #12]
   16c32:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16c36:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   16c38:	79fb      	ldrb	r3, [r7, #7]
   16c3a:	b29b      	uxth	r3, r3
   16c3c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16c40:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16c44:	4619      	mov	r1, r3
   16c46:	f7ea ffb5 	bl	1bb4 <USART_SendData>
}
   16c4a:	3708      	adds	r7, #8
   16c4c:	46bd      	mov	sp, r7
   16c4e:	bd80      	pop	{r7, pc}

00016c50 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   16c50:	b580      	push	{r7, lr}
   16c52:	b082      	sub	sp, #8
   16c54:	af00      	add	r7, sp, #0
   16c56:	4603      	mov	r3, r0
   16c58:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   16c5a:	79fb      	ldrb	r3, [r7, #7]
   16c5c:	3330      	adds	r3, #48	; 0x30
   16c5e:	b2db      	uxtb	r3, r3
   16c60:	4618      	mov	r0, r3
   16c62:	f7ff ffcd 	bl	16c00 <send_byte>
}
   16c66:	3708      	adds	r7, #8
   16c68:	46bd      	mov	sp, r7
   16c6a:	bd80      	pop	{r7, pc}

00016c6c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   16c6c:	b580      	push	{r7, lr}
   16c6e:	b084      	sub	sp, #16
   16c70:	af00      	add	r7, sp, #0
   16c72:	6078      	str	r0, [r7, #4]
    int i = 0;
   16c74:	2300      	movs	r3, #0
   16c76:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   16c78:	e009      	b.n	16c8e <vPrintString+0x22>
    {
        send_byte(string[i]);
   16c7a:	68fb      	ldr	r3, [r7, #12]
   16c7c:	687a      	ldr	r2, [r7, #4]
   16c7e:	4413      	add	r3, r2
   16c80:	781b      	ldrb	r3, [r3, #0]
   16c82:	4618      	mov	r0, r3
   16c84:	f7ff ffbc 	bl	16c00 <send_byte>
        i++;
   16c88:	68fb      	ldr	r3, [r7, #12]
   16c8a:	3301      	adds	r3, #1
   16c8c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   16c8e:	68fb      	ldr	r3, [r7, #12]
   16c90:	687a      	ldr	r2, [r7, #4]
   16c92:	4413      	add	r3, r2
   16c94:	781b      	ldrb	r3, [r3, #0]
   16c96:	2b00      	cmp	r3, #0
   16c98:	d1ef      	bne.n	16c7a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   16c9a:	3710      	adds	r7, #16
   16c9c:	46bd      	mov	sp, r7
   16c9e:	bd80      	pop	{r7, pc}

00016ca0 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   16ca0:	b580      	push	{r7, lr}
   16ca2:	b08a      	sub	sp, #40	; 0x28
   16ca4:	af00      	add	r7, sp, #0
   16ca6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   16ca8:	2300      	movs	r3, #0
   16caa:	623b      	str	r3, [r7, #32]
    long num = c_num;
   16cac:	687b      	ldr	r3, [r7, #4]
   16cae:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   16cb0:	69fb      	ldr	r3, [r7, #28]
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	d106      	bne.n	16cc4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   16cb6:	f248 2024 	movw	r0, #33316	; 0x8224
   16cba:	f2c0 0001 	movt	r0, #1
   16cbe:	f7ff ffd5 	bl	16c6c <vPrintString>
   16cc2:	e062      	b.n	16d8a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   16cc4:	e024      	b.n	16d10 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   16cc6:	69f9      	ldr	r1, [r7, #28]
   16cc8:	f246 6367 	movw	r3, #26215	; 0x6667
   16ccc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16cd0:	fb83 2301 	smull	r2, r3, r3, r1
   16cd4:	109a      	asrs	r2, r3, #2
   16cd6:	17cb      	asrs	r3, r1, #31
   16cd8:	1ad2      	subs	r2, r2, r3
   16cda:	4613      	mov	r3, r2
   16cdc:	009b      	lsls	r3, r3, #2
   16cde:	4413      	add	r3, r2
   16ce0:	005b      	lsls	r3, r3, #1
   16ce2:	1aca      	subs	r2, r1, r3
   16ce4:	b2d3      	uxtb	r3, r2
   16ce6:	3330      	adds	r3, #48	; 0x30
   16ce8:	b2da      	uxtb	r2, r3
   16cea:	f107 010c 	add.w	r1, r7, #12
   16cee:	6a3b      	ldr	r3, [r7, #32]
   16cf0:	440b      	add	r3, r1
   16cf2:	701a      	strb	r2, [r3, #0]
            count ++;
   16cf4:	6a3b      	ldr	r3, [r7, #32]
   16cf6:	3301      	adds	r3, #1
   16cf8:	623b      	str	r3, [r7, #32]
            num /= 10;
   16cfa:	69fa      	ldr	r2, [r7, #28]
   16cfc:	f246 6367 	movw	r3, #26215	; 0x6667
   16d00:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16d04:	fb83 1302 	smull	r1, r3, r3, r2
   16d08:	1099      	asrs	r1, r3, #2
   16d0a:	17d3      	asrs	r3, r2, #31
   16d0c:	1acb      	subs	r3, r1, r3
   16d0e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   16d10:	69fb      	ldr	r3, [r7, #28]
   16d12:	2b00      	cmp	r3, #0
   16d14:	d1d7      	bne.n	16cc6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   16d16:	f107 020c 	add.w	r2, r7, #12
   16d1a:	6a3b      	ldr	r3, [r7, #32]
   16d1c:	4413      	add	r3, r2
   16d1e:	2200      	movs	r2, #0
   16d20:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   16d22:	2300      	movs	r3, #0
   16d24:	627b      	str	r3, [r7, #36]	; 0x24
   16d26:	e020      	b.n	16d6a <vPrintNumber+0xca>
        {
            tmp = time[i];
   16d28:	f107 020c 	add.w	r2, r7, #12
   16d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d2e:	4413      	add	r3, r2
   16d30:	781b      	ldrb	r3, [r3, #0]
   16d32:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   16d34:	6a3a      	ldr	r2, [r7, #32]
   16d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d38:	1ad3      	subs	r3, r2, r3
   16d3a:	3b01      	subs	r3, #1
   16d3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16d40:	4413      	add	r3, r2
   16d42:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   16d46:	f107 010c 	add.w	r1, r7, #12
   16d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d4c:	440b      	add	r3, r1
   16d4e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   16d50:	6a3a      	ldr	r2, [r7, #32]
   16d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d54:	1ad3      	subs	r3, r2, r3
   16d56:	3b01      	subs	r3, #1
   16d58:	f107 0128 	add.w	r1, r7, #40	; 0x28
   16d5c:	440b      	add	r3, r1
   16d5e:	7efa      	ldrb	r2, [r7, #27]
   16d60:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   16d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d66:	3301      	adds	r3, #1
   16d68:	627b      	str	r3, [r7, #36]	; 0x24
   16d6a:	6a3b      	ldr	r3, [r7, #32]
   16d6c:	085a      	lsrs	r2, r3, #1
   16d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16d70:	429a      	cmp	r2, r3
   16d72:	d8d9      	bhi.n	16d28 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   16d74:	f107 030c 	add.w	r3, r7, #12
   16d78:	4618      	mov	r0, r3
   16d7a:	f7ff ff77 	bl	16c6c <vPrintString>
        vPrintString("\n\r");
   16d7e:	f248 2028 	movw	r0, #33320	; 0x8228
   16d82:	f2c0 0001 	movt	r0, #1
   16d86:	f7ff ff71 	bl	16c6c <vPrintString>
    }
}
   16d8a:	3728      	adds	r7, #40	; 0x28
   16d8c:	46bd      	mov	sp, r7
   16d8e:	bd80      	pop	{r7, pc}

00016d90 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   16d90:	b580      	push	{r7, lr}
   16d92:	b084      	sub	sp, #16
   16d94:	af04      	add	r7, sp, #16
    init_led();
   16d96:	f7ff fe5f 	bl	16a58 <init_led>
    init_rs232();
   16d9a:	f7ff febf 	bl	16b1c <init_rs232>
    enable_rs232_interrupts();
   16d9e:	f7ff ff03 	bl	16ba8 <enable_rs232_interrupts>
    enable_rs232();
   16da2:	f7ff ff23 	bl	16bec <enable_rs232>

    //vTaskCompleteInitialise();
    vSemaphoreInitialise();
   16da6:	f7ec f82b 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
   16daa:	f7ec f869 	bl	2e80 <vParameterInitialise>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   16dae:	2301      	movs	r3, #1
   16db0:	9300      	str	r3, [sp, #0]
   16db2:	4b2d      	ldr	r3, [pc, #180]	; (16e68 <main+0xd8>)
   16db4:	9301      	str	r3, [sp, #4]
   16db6:	2300      	movs	r3, #0
   16db8:	9302      	str	r3, [sp, #8]
   16dba:	2300      	movs	r3, #0
   16dbc:	9303      	str	r3, [sp, #12]
   16dbe:	f243 6079 	movw	r0, #13945	; 0x3679
   16dc2:	f2c0 0000 	movt	r0, #0
   16dc6:	f248 212c 	movw	r1, #33324	; 0x822c
   16dca:	f2c0 0101 	movt	r1, #1
   16dce:	2280      	movs	r2, #128	; 0x80
   16dd0:	4b26      	ldr	r3, [pc, #152]	; (16e6c <main+0xdc>)
   16dd2:	f7ed fa23 	bl	421c <xTaskGenericCreate>

    xTaskCreate( vSensor, "Sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[0],tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   16dd6:	2301      	movs	r3, #1
   16dd8:	9300      	str	r3, [sp, #0]
   16dda:	f240 3390 	movw	r3, #912	; 0x390
   16dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de2:	9301      	str	r3, [sp, #4]
   16de4:	2300      	movs	r3, #0
   16de6:	9302      	str	r3, [sp, #8]
   16de8:	2300      	movs	r3, #0
   16dea:	9303      	str	r3, [sp, #12]
   16dec:	f243 20f5 	movw	r0, #13045	; 0x32f5
   16df0:	f2c0 0000 	movt	r0, #0
   16df4:	f248 2138 	movw	r1, #33336	; 0x8238
   16df8:	f2c0 0101 	movt	r1, #1
   16dfc:	2280      	movs	r2, #128	; 0x80
   16dfe:	f240 13d0 	movw	r3, #464	; 0x1d0
   16e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e06:	f7ed fa09 	bl	421c <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[1]);
   16e0a:	2301      	movs	r3, #1
   16e0c:	9300      	str	r3, [sp, #0]
   16e0e:	4b18      	ldr	r3, [pc, #96]	; (16e70 <main+0xe0>)
   16e10:	9301      	str	r3, [sp, #4]
   16e12:	2300      	movs	r3, #0
   16e14:	9302      	str	r3, [sp, #8]
   16e16:	2300      	movs	r3, #0
   16e18:	9303      	str	r3, [sp, #12]
   16e1a:	f243 40c9 	movw	r0, #13513	; 0x34c9
   16e1e:	f2c0 0000 	movt	r0, #0
   16e22:	f248 2140 	movw	r1, #33344	; 0x8240
   16e26:	f2c0 0101 	movt	r1, #1
   16e2a:	2280      	movs	r2, #128	; 0x80
   16e2c:	4b11      	ldr	r3, [pc, #68]	; (16e74 <main+0xe4>)
   16e2e:	f7ed f9f5 	bl	421c <xTaskGenericCreate>
    xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[2],tskIDLE_PRIORITY + 1, &xTaskOfHandle[2]);
   16e32:	2301      	movs	r3, #1
   16e34:	9300      	str	r3, [sp, #0]
   16e36:	4b10      	ldr	r3, [pc, #64]	; (16e78 <main+0xe8>)
   16e38:	9301      	str	r3, [sp, #4]
   16e3a:	2300      	movs	r3, #0
   16e3c:	9302      	str	r3, [sp, #8]
   16e3e:	2300      	movs	r3, #0
   16e40:	9303      	str	r3, [sp, #12]
   16e42:	f243 40c9 	movw	r0, #13513	; 0x34c9
   16e46:	f2c0 0000 	movt	r0, #0
   16e4a:	f248 2140 	movw	r1, #33344	; 0x8240
   16e4e:	f2c0 0101 	movt	r1, #1
   16e52:	2280      	movs	r2, #128	; 0x80
   16e54:	4b09      	ldr	r3, [pc, #36]	; (16e7c <main+0xec>)
   16e56:	f7ed f9e1 	bl	421c <xTaskGenericCreate>

    /* Start running the task. */
    vTaskStartScheduler();
   16e5a:	f7ed fd5d 	bl	4918 <vTaskStartScheduler>

    return 0;
   16e5e:	2300      	movs	r3, #0
}
   16e60:	4618      	mov	r0, r3
   16e62:	46bd      	mov	sp, r7
   16e64:	bd80      	pop	{r7, pc}
   16e66:	bf00      	nop
   16e68:	2000039c 	.word	0x2000039c
   16e6c:	20000314 	.word	0x20000314
   16e70:	20000394 	.word	0x20000394
   16e74:	2000023c 	.word	0x2000023c
   16e78:	20000398 	.word	0x20000398
   16e7c:	200002a8 	.word	0x200002a8

00016e80 <myTraceCreate>:

void myTraceCreate      (){
   16e80:	b480      	push	{r7}
   16e82:	af00      	add	r7, sp, #0
}
   16e84:	46bd      	mov	sp, r7
   16e86:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e8a:	4770      	bx	lr

00016e8c <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   16e8c:	b480      	push	{r7}
   16e8e:	af00      	add	r7, sp, #0
}
   16e90:	46bd      	mov	sp, r7
   16e92:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e96:	4770      	bx	lr

00016e98 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   16e98:	b480      	push	{r7}
   16e9a:	af00      	add	r7, sp, #0
}
   16e9c:	46bd      	mov	sp, r7
   16e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ea2:	4770      	bx	lr

00016ea4 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   16ea4:	b580      	push	{r7, lr}
   16ea6:	b082      	sub	sp, #8
   16ea8:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   16eaa:	f7ed fe1f 	bl	4aec <xTaskGetTickCount>
   16eae:	6078      	str	r0, [r7, #4]
    if( IS_INIT == 1 && xCurrentTime == 100 )
   16eb0:	f240 131c 	movw	r3, #284	; 0x11c
   16eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eb8:	681b      	ldr	r3, [r3, #0]
   16eba:	2b01      	cmp	r3, #1
   16ebc:	d113      	bne.n	16ee6 <vApplicationTickHook+0x42>
   16ebe:	687b      	ldr	r3, [r7, #4]
   16ec0:	2b64      	cmp	r3, #100	; 0x64
   16ec2:	d110      	bne.n	16ee6 <vApplicationTickHook+0x42>
    {
        xSemaphoreGive( xBinarySemaphore[0] );
   16ec4:	f240 3380 	movw	r3, #896	; 0x380
   16ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ecc:	681b      	ldr	r3, [r3, #0]
   16ece:	4618      	mov	r0, r3
   16ed0:	2100      	movs	r1, #0
   16ed2:	2200      	movs	r2, #0
   16ed4:	2300      	movs	r3, #0
   16ed6:	f7ec fe8f 	bl	3bf8 <xQueueGenericSend>
        IS_INIT = 0;
   16eda:	f240 131c 	movw	r3, #284	; 0x11c
   16ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee2:	2200      	movs	r2, #0
   16ee4:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   16ee6:	f240 032c 	movw	r3, #44	; 0x2c
   16eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	005a      	lsls	r2, r3, #1
   16ef2:	687b      	ldr	r3, [r7, #4]
   16ef4:	429a      	cmp	r2, r3
   16ef6:	d817      	bhi.n	16f28 <vApplicationTickHook+0x84>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 )
   16ef8:	f240 032c 	movw	r3, #44	; 0x2c
   16efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f00:	681a      	ldr	r2, [r3, #0]
   16f02:	687b      	ldr	r3, [r7, #4]
   16f04:	fbb3 f1f2 	udiv	r1, r3, r2
   16f08:	fb02 f201 	mul.w	r2, r2, r1
   16f0c:	1a9b      	subs	r3, r3, r2
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d10a      	bne.n	16f28 <vApplicationTickHook+0x84>
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] ); 
   16f12:	f240 3380 	movw	r3, #896	; 0x380
   16f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f1a:	68db      	ldr	r3, [r3, #12]
   16f1c:	4618      	mov	r0, r3
   16f1e:	2100      	movs	r1, #0
   16f20:	2200      	movs	r2, #0
   16f22:	2300      	movs	r3, #0
   16f24:	f7ec fe68 	bl	3bf8 <xQueueGenericSend>
        }
    }
}
   16f28:	3708      	adds	r7, #8
   16f2a:	46bd      	mov	sp, r7
   16f2c:	bd80      	pop	{r7, pc}
   16f2e:	bf00      	nop

00016f30 <__aeabi_drsub>:
   16f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   16f34:	e002      	b.n	16f3c <__adddf3>
   16f36:	bf00      	nop

00016f38 <__aeabi_dsub>:
   16f38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00016f3c <__adddf3>:
   16f3c:	b530      	push	{r4, r5, lr}
   16f3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   16f42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   16f46:	ea94 0f05 	teq	r4, r5
   16f4a:	bf08      	it	eq
   16f4c:	ea90 0f02 	teqeq	r0, r2
   16f50:	bf1f      	itttt	ne
   16f52:	ea54 0c00 	orrsne.w	ip, r4, r0
   16f56:	ea55 0c02 	orrsne.w	ip, r5, r2
   16f5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   16f5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   16f62:	f000 80e2 	beq.w	1712a <__adddf3+0x1ee>
   16f66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   16f6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   16f6e:	bfb8      	it	lt
   16f70:	426d      	neglt	r5, r5
   16f72:	dd0c      	ble.n	16f8e <__adddf3+0x52>
   16f74:	442c      	add	r4, r5
   16f76:	ea80 0202 	eor.w	r2, r0, r2
   16f7a:	ea81 0303 	eor.w	r3, r1, r3
   16f7e:	ea82 0000 	eor.w	r0, r2, r0
   16f82:	ea83 0101 	eor.w	r1, r3, r1
   16f86:	ea80 0202 	eor.w	r2, r0, r2
   16f8a:	ea81 0303 	eor.w	r3, r1, r3
   16f8e:	2d36      	cmp	r5, #54	; 0x36
   16f90:	bf88      	it	hi
   16f92:	bd30      	pophi	{r4, r5, pc}
   16f94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16f9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   16fa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   16fa4:	d002      	beq.n	16fac <__adddf3+0x70>
   16fa6:	4240      	negs	r0, r0
   16fa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16fac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   16fb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   16fb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   16fb8:	d002      	beq.n	16fc0 <__adddf3+0x84>
   16fba:	4252      	negs	r2, r2
   16fbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   16fc0:	ea94 0f05 	teq	r4, r5
   16fc4:	f000 80a7 	beq.w	17116 <__adddf3+0x1da>
   16fc8:	f1a4 0401 	sub.w	r4, r4, #1
   16fcc:	f1d5 0e20 	rsbs	lr, r5, #32
   16fd0:	db0d      	blt.n	16fee <__adddf3+0xb2>
   16fd2:	fa02 fc0e 	lsl.w	ip, r2, lr
   16fd6:	fa22 f205 	lsr.w	r2, r2, r5
   16fda:	1880      	adds	r0, r0, r2
   16fdc:	f141 0100 	adc.w	r1, r1, #0
   16fe0:	fa03 f20e 	lsl.w	r2, r3, lr
   16fe4:	1880      	adds	r0, r0, r2
   16fe6:	fa43 f305 	asr.w	r3, r3, r5
   16fea:	4159      	adcs	r1, r3
   16fec:	e00e      	b.n	1700c <__adddf3+0xd0>
   16fee:	f1a5 0520 	sub.w	r5, r5, #32
   16ff2:	f10e 0e20 	add.w	lr, lr, #32
   16ff6:	2a01      	cmp	r2, #1
   16ff8:	fa03 fc0e 	lsl.w	ip, r3, lr
   16ffc:	bf28      	it	cs
   16ffe:	f04c 0c02 	orrcs.w	ip, ip, #2
   17002:	fa43 f305 	asr.w	r3, r3, r5
   17006:	18c0      	adds	r0, r0, r3
   17008:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1700c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17010:	d507      	bpl.n	17022 <__adddf3+0xe6>
   17012:	f04f 0e00 	mov.w	lr, #0
   17016:	f1dc 0c00 	rsbs	ip, ip, #0
   1701a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1701e:	eb6e 0101 	sbc.w	r1, lr, r1
   17022:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17026:	d31b      	bcc.n	17060 <__adddf3+0x124>
   17028:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1702c:	d30c      	bcc.n	17048 <__adddf3+0x10c>
   1702e:	0849      	lsrs	r1, r1, #1
   17030:	ea5f 0030 	movs.w	r0, r0, rrx
   17034:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17038:	f104 0401 	add.w	r4, r4, #1
   1703c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17040:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17044:	f080 809a 	bcs.w	1717c <__adddf3+0x240>
   17048:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1704c:	bf08      	it	eq
   1704e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17052:	f150 0000 	adcs.w	r0, r0, #0
   17056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1705a:	ea41 0105 	orr.w	r1, r1, r5
   1705e:	bd30      	pop	{r4, r5, pc}
   17060:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17064:	4140      	adcs	r0, r0
   17066:	eb41 0101 	adc.w	r1, r1, r1
   1706a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1706e:	f1a4 0401 	sub.w	r4, r4, #1
   17072:	d1e9      	bne.n	17048 <__adddf3+0x10c>
   17074:	f091 0f00 	teq	r1, #0
   17078:	bf04      	itt	eq
   1707a:	4601      	moveq	r1, r0
   1707c:	2000      	moveq	r0, #0
   1707e:	fab1 f381 	clz	r3, r1
   17082:	bf08      	it	eq
   17084:	3320      	addeq	r3, #32
   17086:	f1a3 030b 	sub.w	r3, r3, #11
   1708a:	f1b3 0220 	subs.w	r2, r3, #32
   1708e:	da0c      	bge.n	170aa <__adddf3+0x16e>
   17090:	320c      	adds	r2, #12
   17092:	dd08      	ble.n	170a6 <__adddf3+0x16a>
   17094:	f102 0c14 	add.w	ip, r2, #20
   17098:	f1c2 020c 	rsb	r2, r2, #12
   1709c:	fa01 f00c 	lsl.w	r0, r1, ip
   170a0:	fa21 f102 	lsr.w	r1, r1, r2
   170a4:	e00c      	b.n	170c0 <__adddf3+0x184>
   170a6:	f102 0214 	add.w	r2, r2, #20
   170aa:	bfd8      	it	le
   170ac:	f1c2 0c20 	rsble	ip, r2, #32
   170b0:	fa01 f102 	lsl.w	r1, r1, r2
   170b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   170b8:	bfdc      	itt	le
   170ba:	ea41 010c 	orrle.w	r1, r1, ip
   170be:	4090      	lslle	r0, r2
   170c0:	1ae4      	subs	r4, r4, r3
   170c2:	bfa2      	ittt	ge
   170c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   170c8:	4329      	orrge	r1, r5
   170ca:	bd30      	popge	{r4, r5, pc}
   170cc:	ea6f 0404 	mvn.w	r4, r4
   170d0:	3c1f      	subs	r4, #31
   170d2:	da1c      	bge.n	1710e <__adddf3+0x1d2>
   170d4:	340c      	adds	r4, #12
   170d6:	dc0e      	bgt.n	170f6 <__adddf3+0x1ba>
   170d8:	f104 0414 	add.w	r4, r4, #20
   170dc:	f1c4 0220 	rsb	r2, r4, #32
   170e0:	fa20 f004 	lsr.w	r0, r0, r4
   170e4:	fa01 f302 	lsl.w	r3, r1, r2
   170e8:	ea40 0003 	orr.w	r0, r0, r3
   170ec:	fa21 f304 	lsr.w	r3, r1, r4
   170f0:	ea45 0103 	orr.w	r1, r5, r3
   170f4:	bd30      	pop	{r4, r5, pc}
   170f6:	f1c4 040c 	rsb	r4, r4, #12
   170fa:	f1c4 0220 	rsb	r2, r4, #32
   170fe:	fa20 f002 	lsr.w	r0, r0, r2
   17102:	fa01 f304 	lsl.w	r3, r1, r4
   17106:	ea40 0003 	orr.w	r0, r0, r3
   1710a:	4629      	mov	r1, r5
   1710c:	bd30      	pop	{r4, r5, pc}
   1710e:	fa21 f004 	lsr.w	r0, r1, r4
   17112:	4629      	mov	r1, r5
   17114:	bd30      	pop	{r4, r5, pc}
   17116:	f094 0f00 	teq	r4, #0
   1711a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1711e:	bf06      	itte	eq
   17120:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17124:	3401      	addeq	r4, #1
   17126:	3d01      	subne	r5, #1
   17128:	e74e      	b.n	16fc8 <__adddf3+0x8c>
   1712a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1712e:	bf18      	it	ne
   17130:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17134:	d029      	beq.n	1718a <__adddf3+0x24e>
   17136:	ea94 0f05 	teq	r4, r5
   1713a:	bf08      	it	eq
   1713c:	ea90 0f02 	teqeq	r0, r2
   17140:	d005      	beq.n	1714e <__adddf3+0x212>
   17142:	ea54 0c00 	orrs.w	ip, r4, r0
   17146:	bf04      	itt	eq
   17148:	4619      	moveq	r1, r3
   1714a:	4610      	moveq	r0, r2
   1714c:	bd30      	pop	{r4, r5, pc}
   1714e:	ea91 0f03 	teq	r1, r3
   17152:	bf1e      	ittt	ne
   17154:	2100      	movne	r1, #0
   17156:	2000      	movne	r0, #0
   17158:	bd30      	popne	{r4, r5, pc}
   1715a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1715e:	d105      	bne.n	1716c <__adddf3+0x230>
   17160:	0040      	lsls	r0, r0, #1
   17162:	4149      	adcs	r1, r1
   17164:	bf28      	it	cs
   17166:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1716a:	bd30      	pop	{r4, r5, pc}
   1716c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17170:	bf3c      	itt	cc
   17172:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17176:	bd30      	popcc	{r4, r5, pc}
   17178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1717c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17184:	f04f 0000 	mov.w	r0, #0
   17188:	bd30      	pop	{r4, r5, pc}
   1718a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1718e:	bf1a      	itte	ne
   17190:	4619      	movne	r1, r3
   17192:	4610      	movne	r0, r2
   17194:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17198:	bf1c      	itt	ne
   1719a:	460b      	movne	r3, r1
   1719c:	4602      	movne	r2, r0
   1719e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   171a2:	bf06      	itte	eq
   171a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   171a8:	ea91 0f03 	teqeq	r1, r3
   171ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   171b0:	bd30      	pop	{r4, r5, pc}
   171b2:	bf00      	nop

000171b4 <__aeabi_ui2d>:
   171b4:	f090 0f00 	teq	r0, #0
   171b8:	bf04      	itt	eq
   171ba:	2100      	moveq	r1, #0
   171bc:	4770      	bxeq	lr
   171be:	b530      	push	{r4, r5, lr}
   171c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   171c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   171c8:	f04f 0500 	mov.w	r5, #0
   171cc:	f04f 0100 	mov.w	r1, #0
   171d0:	e750      	b.n	17074 <__adddf3+0x138>
   171d2:	bf00      	nop

000171d4 <__aeabi_i2d>:
   171d4:	f090 0f00 	teq	r0, #0
   171d8:	bf04      	itt	eq
   171da:	2100      	moveq	r1, #0
   171dc:	4770      	bxeq	lr
   171de:	b530      	push	{r4, r5, lr}
   171e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   171e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   171e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   171ec:	bf48      	it	mi
   171ee:	4240      	negmi	r0, r0
   171f0:	f04f 0100 	mov.w	r1, #0
   171f4:	e73e      	b.n	17074 <__adddf3+0x138>
   171f6:	bf00      	nop

000171f8 <__aeabi_f2d>:
   171f8:	0042      	lsls	r2, r0, #1
   171fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   171fe:	ea4f 0131 	mov.w	r1, r1, rrx
   17202:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17206:	bf1f      	itttt	ne
   17208:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1720c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17210:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17214:	4770      	bxne	lr
   17216:	f092 0f00 	teq	r2, #0
   1721a:	bf14      	ite	ne
   1721c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17220:	4770      	bxeq	lr
   17222:	b530      	push	{r4, r5, lr}
   17224:	f44f 7460 	mov.w	r4, #896	; 0x380
   17228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1722c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17230:	e720      	b.n	17074 <__adddf3+0x138>
   17232:	bf00      	nop

00017234 <__aeabi_ul2d>:
   17234:	ea50 0201 	orrs.w	r2, r0, r1
   17238:	bf08      	it	eq
   1723a:	4770      	bxeq	lr
   1723c:	b530      	push	{r4, r5, lr}
   1723e:	f04f 0500 	mov.w	r5, #0
   17242:	e00a      	b.n	1725a <__aeabi_l2d+0x16>

00017244 <__aeabi_l2d>:
   17244:	ea50 0201 	orrs.w	r2, r0, r1
   17248:	bf08      	it	eq
   1724a:	4770      	bxeq	lr
   1724c:	b530      	push	{r4, r5, lr}
   1724e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17252:	d502      	bpl.n	1725a <__aeabi_l2d+0x16>
   17254:	4240      	negs	r0, r0
   17256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1725a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1725e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17262:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17266:	f43f aedc 	beq.w	17022 <__adddf3+0xe6>
   1726a:	f04f 0203 	mov.w	r2, #3
   1726e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17272:	bf18      	it	ne
   17274:	3203      	addne	r2, #3
   17276:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1727a:	bf18      	it	ne
   1727c:	3203      	addne	r2, #3
   1727e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17282:	f1c2 0320 	rsb	r3, r2, #32
   17286:	fa00 fc03 	lsl.w	ip, r0, r3
   1728a:	fa20 f002 	lsr.w	r0, r0, r2
   1728e:	fa01 fe03 	lsl.w	lr, r1, r3
   17292:	ea40 000e 	orr.w	r0, r0, lr
   17296:	fa21 f102 	lsr.w	r1, r1, r2
   1729a:	4414      	add	r4, r2
   1729c:	e6c1      	b.n	17022 <__adddf3+0xe6>
   1729e:	bf00      	nop

000172a0 <__aeabi_dmul>:
   172a0:	b570      	push	{r4, r5, r6, lr}
   172a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   172a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   172aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   172ae:	bf1d      	ittte	ne
   172b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   172b4:	ea94 0f0c 	teqne	r4, ip
   172b8:	ea95 0f0c 	teqne	r5, ip
   172bc:	f000 f8de 	bleq	1747c <__aeabi_dmul+0x1dc>
   172c0:	442c      	add	r4, r5
   172c2:	ea81 0603 	eor.w	r6, r1, r3
   172c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   172ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   172ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   172d2:	bf18      	it	ne
   172d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   172d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   172dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   172e0:	d038      	beq.n	17354 <__aeabi_dmul+0xb4>
   172e2:	fba0 ce02 	umull	ip, lr, r0, r2
   172e6:	f04f 0500 	mov.w	r5, #0
   172ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   172ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   172f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   172f6:	f04f 0600 	mov.w	r6, #0
   172fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   172fe:	f09c 0f00 	teq	ip, #0
   17302:	bf18      	it	ne
   17304:	f04e 0e01 	orrne.w	lr, lr, #1
   17308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1730c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17314:	d204      	bcs.n	17320 <__aeabi_dmul+0x80>
   17316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1731a:	416d      	adcs	r5, r5
   1731c:	eb46 0606 	adc.w	r6, r6, r6
   17320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1732c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17338:	bf88      	it	hi
   1733a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1733e:	d81e      	bhi.n	1737e <__aeabi_dmul+0xde>
   17340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17344:	bf08      	it	eq
   17346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1734a:	f150 0000 	adcs.w	r0, r0, #0
   1734e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17352:	bd70      	pop	{r4, r5, r6, pc}
   17354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17358:	ea46 0101 	orr.w	r1, r6, r1
   1735c:	ea40 0002 	orr.w	r0, r0, r2
   17360:	ea81 0103 	eor.w	r1, r1, r3
   17364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17368:	bfc2      	ittt	gt
   1736a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1736e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17372:	bd70      	popgt	{r4, r5, r6, pc}
   17374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17378:	f04f 0e00 	mov.w	lr, #0
   1737c:	3c01      	subs	r4, #1
   1737e:	f300 80ab 	bgt.w	174d8 <__aeabi_dmul+0x238>
   17382:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17386:	bfde      	ittt	le
   17388:	2000      	movle	r0, #0
   1738a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1738e:	bd70      	pople	{r4, r5, r6, pc}
   17390:	f1c4 0400 	rsb	r4, r4, #0
   17394:	3c20      	subs	r4, #32
   17396:	da35      	bge.n	17404 <__aeabi_dmul+0x164>
   17398:	340c      	adds	r4, #12
   1739a:	dc1b      	bgt.n	173d4 <__aeabi_dmul+0x134>
   1739c:	f104 0414 	add.w	r4, r4, #20
   173a0:	f1c4 0520 	rsb	r5, r4, #32
   173a4:	fa00 f305 	lsl.w	r3, r0, r5
   173a8:	fa20 f004 	lsr.w	r0, r0, r4
   173ac:	fa01 f205 	lsl.w	r2, r1, r5
   173b0:	ea40 0002 	orr.w	r0, r0, r2
   173b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   173b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   173bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   173c0:	fa21 f604 	lsr.w	r6, r1, r4
   173c4:	eb42 0106 	adc.w	r1, r2, r6
   173c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   173cc:	bf08      	it	eq
   173ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   173d2:	bd70      	pop	{r4, r5, r6, pc}
   173d4:	f1c4 040c 	rsb	r4, r4, #12
   173d8:	f1c4 0520 	rsb	r5, r4, #32
   173dc:	fa00 f304 	lsl.w	r3, r0, r4
   173e0:	fa20 f005 	lsr.w	r0, r0, r5
   173e4:	fa01 f204 	lsl.w	r2, r1, r4
   173e8:	ea40 0002 	orr.w	r0, r0, r2
   173ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   173f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   173f4:	f141 0100 	adc.w	r1, r1, #0
   173f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   173fc:	bf08      	it	eq
   173fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17402:	bd70      	pop	{r4, r5, r6, pc}
   17404:	f1c4 0520 	rsb	r5, r4, #32
   17408:	fa00 f205 	lsl.w	r2, r0, r5
   1740c:	ea4e 0e02 	orr.w	lr, lr, r2
   17410:	fa20 f304 	lsr.w	r3, r0, r4
   17414:	fa01 f205 	lsl.w	r2, r1, r5
   17418:	ea43 0302 	orr.w	r3, r3, r2
   1741c:	fa21 f004 	lsr.w	r0, r1, r4
   17420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17424:	fa21 f204 	lsr.w	r2, r1, r4
   17428:	ea20 0002 	bic.w	r0, r0, r2
   1742c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17434:	bf08      	it	eq
   17436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1743a:	bd70      	pop	{r4, r5, r6, pc}
   1743c:	f094 0f00 	teq	r4, #0
   17440:	d10f      	bne.n	17462 <__aeabi_dmul+0x1c2>
   17442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17446:	0040      	lsls	r0, r0, #1
   17448:	eb41 0101 	adc.w	r1, r1, r1
   1744c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17450:	bf08      	it	eq
   17452:	3c01      	subeq	r4, #1
   17454:	d0f7      	beq.n	17446 <__aeabi_dmul+0x1a6>
   17456:	ea41 0106 	orr.w	r1, r1, r6
   1745a:	f095 0f00 	teq	r5, #0
   1745e:	bf18      	it	ne
   17460:	4770      	bxne	lr
   17462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17466:	0052      	lsls	r2, r2, #1
   17468:	eb43 0303 	adc.w	r3, r3, r3
   1746c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17470:	bf08      	it	eq
   17472:	3d01      	subeq	r5, #1
   17474:	d0f7      	beq.n	17466 <__aeabi_dmul+0x1c6>
   17476:	ea43 0306 	orr.w	r3, r3, r6
   1747a:	4770      	bx	lr
   1747c:	ea94 0f0c 	teq	r4, ip
   17480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17484:	bf18      	it	ne
   17486:	ea95 0f0c 	teqne	r5, ip
   1748a:	d00c      	beq.n	174a6 <__aeabi_dmul+0x206>
   1748c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17490:	bf18      	it	ne
   17492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17496:	d1d1      	bne.n	1743c <__aeabi_dmul+0x19c>
   17498:	ea81 0103 	eor.w	r1, r1, r3
   1749c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   174a0:	f04f 0000 	mov.w	r0, #0
   174a4:	bd70      	pop	{r4, r5, r6, pc}
   174a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   174aa:	bf06      	itte	eq
   174ac:	4610      	moveq	r0, r2
   174ae:	4619      	moveq	r1, r3
   174b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   174b4:	d019      	beq.n	174ea <__aeabi_dmul+0x24a>
   174b6:	ea94 0f0c 	teq	r4, ip
   174ba:	d102      	bne.n	174c2 <__aeabi_dmul+0x222>
   174bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   174c0:	d113      	bne.n	174ea <__aeabi_dmul+0x24a>
   174c2:	ea95 0f0c 	teq	r5, ip
   174c6:	d105      	bne.n	174d4 <__aeabi_dmul+0x234>
   174c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   174cc:	bf1c      	itt	ne
   174ce:	4610      	movne	r0, r2
   174d0:	4619      	movne	r1, r3
   174d2:	d10a      	bne.n	174ea <__aeabi_dmul+0x24a>
   174d4:	ea81 0103 	eor.w	r1, r1, r3
   174d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   174dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   174e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   174e4:	f04f 0000 	mov.w	r0, #0
   174e8:	bd70      	pop	{r4, r5, r6, pc}
   174ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   174ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   174f2:	bd70      	pop	{r4, r5, r6, pc}

000174f4 <__aeabi_ddiv>:
   174f4:	b570      	push	{r4, r5, r6, lr}
   174f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   174fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   174fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17502:	bf1d      	ittte	ne
   17504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17508:	ea94 0f0c 	teqne	r4, ip
   1750c:	ea95 0f0c 	teqne	r5, ip
   17510:	f000 f8a7 	bleq	17662 <__aeabi_ddiv+0x16e>
   17514:	eba4 0405 	sub.w	r4, r4, r5
   17518:	ea81 0e03 	eor.w	lr, r1, r3
   1751c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17520:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17524:	f000 8088 	beq.w	17638 <__aeabi_ddiv+0x144>
   17528:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1752c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17530:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17534:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17538:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1753c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17540:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17544:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17548:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1754c:	429d      	cmp	r5, r3
   1754e:	bf08      	it	eq
   17550:	4296      	cmpeq	r6, r2
   17552:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17556:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1755a:	d202      	bcs.n	17562 <__aeabi_ddiv+0x6e>
   1755c:	085b      	lsrs	r3, r3, #1
   1755e:	ea4f 0232 	mov.w	r2, r2, rrx
   17562:	1ab6      	subs	r6, r6, r2
   17564:	eb65 0503 	sbc.w	r5, r5, r3
   17568:	085b      	lsrs	r3, r3, #1
   1756a:	ea4f 0232 	mov.w	r2, r2, rrx
   1756e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17572:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17576:	ebb6 0e02 	subs.w	lr, r6, r2
   1757a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1757e:	bf22      	ittt	cs
   17580:	1ab6      	subcs	r6, r6, r2
   17582:	4675      	movcs	r5, lr
   17584:	ea40 000c 	orrcs.w	r0, r0, ip
   17588:	085b      	lsrs	r3, r3, #1
   1758a:	ea4f 0232 	mov.w	r2, r2, rrx
   1758e:	ebb6 0e02 	subs.w	lr, r6, r2
   17592:	eb75 0e03 	sbcs.w	lr, r5, r3
   17596:	bf22      	ittt	cs
   17598:	1ab6      	subcs	r6, r6, r2
   1759a:	4675      	movcs	r5, lr
   1759c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   175a0:	085b      	lsrs	r3, r3, #1
   175a2:	ea4f 0232 	mov.w	r2, r2, rrx
   175a6:	ebb6 0e02 	subs.w	lr, r6, r2
   175aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   175ae:	bf22      	ittt	cs
   175b0:	1ab6      	subcs	r6, r6, r2
   175b2:	4675      	movcs	r5, lr
   175b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   175b8:	085b      	lsrs	r3, r3, #1
   175ba:	ea4f 0232 	mov.w	r2, r2, rrx
   175be:	ebb6 0e02 	subs.w	lr, r6, r2
   175c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   175c6:	bf22      	ittt	cs
   175c8:	1ab6      	subcs	r6, r6, r2
   175ca:	4675      	movcs	r5, lr
   175cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   175d0:	ea55 0e06 	orrs.w	lr, r5, r6
   175d4:	d018      	beq.n	17608 <__aeabi_ddiv+0x114>
   175d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   175da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   175de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   175e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   175e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   175ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   175ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   175f2:	d1c0      	bne.n	17576 <__aeabi_ddiv+0x82>
   175f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   175f8:	d10b      	bne.n	17612 <__aeabi_ddiv+0x11e>
   175fa:	ea41 0100 	orr.w	r1, r1, r0
   175fe:	f04f 0000 	mov.w	r0, #0
   17602:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17606:	e7b6      	b.n	17576 <__aeabi_ddiv+0x82>
   17608:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1760c:	bf04      	itt	eq
   1760e:	4301      	orreq	r1, r0
   17610:	2000      	moveq	r0, #0
   17612:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17616:	bf88      	it	hi
   17618:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1761c:	f63f aeaf 	bhi.w	1737e <__aeabi_dmul+0xde>
   17620:	ebb5 0c03 	subs.w	ip, r5, r3
   17624:	bf04      	itt	eq
   17626:	ebb6 0c02 	subseq.w	ip, r6, r2
   1762a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1762e:	f150 0000 	adcs.w	r0, r0, #0
   17632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17636:	bd70      	pop	{r4, r5, r6, pc}
   17638:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1763c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17640:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17644:	bfc2      	ittt	gt
   17646:	ebd4 050c 	rsbsgt	r5, r4, ip
   1764a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1764e:	bd70      	popgt	{r4, r5, r6, pc}
   17650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17654:	f04f 0e00 	mov.w	lr, #0
   17658:	3c01      	subs	r4, #1
   1765a:	e690      	b.n	1737e <__aeabi_dmul+0xde>
   1765c:	ea45 0e06 	orr.w	lr, r5, r6
   17660:	e68d      	b.n	1737e <__aeabi_dmul+0xde>
   17662:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17666:	ea94 0f0c 	teq	r4, ip
   1766a:	bf08      	it	eq
   1766c:	ea95 0f0c 	teqeq	r5, ip
   17670:	f43f af3b 	beq.w	174ea <__aeabi_dmul+0x24a>
   17674:	ea94 0f0c 	teq	r4, ip
   17678:	d10a      	bne.n	17690 <__aeabi_ddiv+0x19c>
   1767a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1767e:	f47f af34 	bne.w	174ea <__aeabi_dmul+0x24a>
   17682:	ea95 0f0c 	teq	r5, ip
   17686:	f47f af25 	bne.w	174d4 <__aeabi_dmul+0x234>
   1768a:	4610      	mov	r0, r2
   1768c:	4619      	mov	r1, r3
   1768e:	e72c      	b.n	174ea <__aeabi_dmul+0x24a>
   17690:	ea95 0f0c 	teq	r5, ip
   17694:	d106      	bne.n	176a4 <__aeabi_ddiv+0x1b0>
   17696:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1769a:	f43f aefd 	beq.w	17498 <__aeabi_dmul+0x1f8>
   1769e:	4610      	mov	r0, r2
   176a0:	4619      	mov	r1, r3
   176a2:	e722      	b.n	174ea <__aeabi_dmul+0x24a>
   176a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   176a8:	bf18      	it	ne
   176aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   176ae:	f47f aec5 	bne.w	1743c <__aeabi_dmul+0x19c>
   176b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   176b6:	f47f af0d 	bne.w	174d4 <__aeabi_dmul+0x234>
   176ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   176be:	f47f aeeb 	bne.w	17498 <__aeabi_dmul+0x1f8>
   176c2:	e712      	b.n	174ea <__aeabi_dmul+0x24a>

000176c4 <__gedf2>:
   176c4:	f04f 3cff 	mov.w	ip, #4294967295
   176c8:	e006      	b.n	176d8 <__cmpdf2+0x4>
   176ca:	bf00      	nop

000176cc <__ledf2>:
   176cc:	f04f 0c01 	mov.w	ip, #1
   176d0:	e002      	b.n	176d8 <__cmpdf2+0x4>
   176d2:	bf00      	nop

000176d4 <__cmpdf2>:
   176d4:	f04f 0c01 	mov.w	ip, #1
   176d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   176dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   176e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   176e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   176e8:	bf18      	it	ne
   176ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   176ee:	d01b      	beq.n	17728 <__cmpdf2+0x54>
   176f0:	b001      	add	sp, #4
   176f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   176f6:	bf0c      	ite	eq
   176f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   176fc:	ea91 0f03 	teqne	r1, r3
   17700:	bf02      	ittt	eq
   17702:	ea90 0f02 	teqeq	r0, r2
   17706:	2000      	moveq	r0, #0
   17708:	4770      	bxeq	lr
   1770a:	f110 0f00 	cmn.w	r0, #0
   1770e:	ea91 0f03 	teq	r1, r3
   17712:	bf58      	it	pl
   17714:	4299      	cmppl	r1, r3
   17716:	bf08      	it	eq
   17718:	4290      	cmpeq	r0, r2
   1771a:	bf2c      	ite	cs
   1771c:	17d8      	asrcs	r0, r3, #31
   1771e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17722:	f040 0001 	orr.w	r0, r0, #1
   17726:	4770      	bx	lr
   17728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1772c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17730:	d102      	bne.n	17738 <__cmpdf2+0x64>
   17732:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17736:	d107      	bne.n	17748 <__cmpdf2+0x74>
   17738:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1773c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17740:	d1d6      	bne.n	176f0 <__cmpdf2+0x1c>
   17742:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17746:	d0d3      	beq.n	176f0 <__cmpdf2+0x1c>
   17748:	f85d 0b04 	ldr.w	r0, [sp], #4
   1774c:	4770      	bx	lr
   1774e:	bf00      	nop

00017750 <__aeabi_cdrcmple>:
   17750:	4684      	mov	ip, r0
   17752:	4610      	mov	r0, r2
   17754:	4662      	mov	r2, ip
   17756:	468c      	mov	ip, r1
   17758:	4619      	mov	r1, r3
   1775a:	4663      	mov	r3, ip
   1775c:	e000      	b.n	17760 <__aeabi_cdcmpeq>
   1775e:	bf00      	nop

00017760 <__aeabi_cdcmpeq>:
   17760:	b501      	push	{r0, lr}
   17762:	f7ff ffb7 	bl	176d4 <__cmpdf2>
   17766:	2800      	cmp	r0, #0
   17768:	bf48      	it	mi
   1776a:	f110 0f00 	cmnmi.w	r0, #0
   1776e:	bd01      	pop	{r0, pc}

00017770 <__aeabi_dcmpeq>:
   17770:	f84d ed08 	str.w	lr, [sp, #-8]!
   17774:	f7ff fff4 	bl	17760 <__aeabi_cdcmpeq>
   17778:	bf0c      	ite	eq
   1777a:	2001      	moveq	r0, #1
   1777c:	2000      	movne	r0, #0
   1777e:	f85d fb08 	ldr.w	pc, [sp], #8
   17782:	bf00      	nop

00017784 <__aeabi_dcmplt>:
   17784:	f84d ed08 	str.w	lr, [sp, #-8]!
   17788:	f7ff ffea 	bl	17760 <__aeabi_cdcmpeq>
   1778c:	bf34      	ite	cc
   1778e:	2001      	movcc	r0, #1
   17790:	2000      	movcs	r0, #0
   17792:	f85d fb08 	ldr.w	pc, [sp], #8
   17796:	bf00      	nop

00017798 <__aeabi_dcmple>:
   17798:	f84d ed08 	str.w	lr, [sp, #-8]!
   1779c:	f7ff ffe0 	bl	17760 <__aeabi_cdcmpeq>
   177a0:	bf94      	ite	ls
   177a2:	2001      	movls	r0, #1
   177a4:	2000      	movhi	r0, #0
   177a6:	f85d fb08 	ldr.w	pc, [sp], #8
   177aa:	bf00      	nop

000177ac <__aeabi_dcmpge>:
   177ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   177b0:	f7ff ffce 	bl	17750 <__aeabi_cdrcmple>
   177b4:	bf94      	ite	ls
   177b6:	2001      	movls	r0, #1
   177b8:	2000      	movhi	r0, #0
   177ba:	f85d fb08 	ldr.w	pc, [sp], #8
   177be:	bf00      	nop

000177c0 <__aeabi_dcmpgt>:
   177c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   177c4:	f7ff ffc4 	bl	17750 <__aeabi_cdrcmple>
   177c8:	bf34      	ite	cc
   177ca:	2001      	movcc	r0, #1
   177cc:	2000      	movcs	r0, #0
   177ce:	f85d fb08 	ldr.w	pc, [sp], #8
   177d2:	bf00      	nop

000177d4 <__aeabi_d2iz>:
   177d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   177d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   177dc:	d215      	bcs.n	1780a <__aeabi_d2iz+0x36>
   177de:	d511      	bpl.n	17804 <__aeabi_d2iz+0x30>
   177e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   177e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   177e8:	d912      	bls.n	17810 <__aeabi_d2iz+0x3c>
   177ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   177ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   177f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   177f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   177fa:	fa23 f002 	lsr.w	r0, r3, r2
   177fe:	bf18      	it	ne
   17800:	4240      	negne	r0, r0
   17802:	4770      	bx	lr
   17804:	f04f 0000 	mov.w	r0, #0
   17808:	4770      	bx	lr
   1780a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1780e:	d105      	bne.n	1781c <__aeabi_d2iz+0x48>
   17810:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17814:	bf08      	it	eq
   17816:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1781a:	4770      	bx	lr
   1781c:	f04f 0000 	mov.w	r0, #0
   17820:	4770      	bx	lr
   17822:	bf00      	nop

00017824 <__aeabi_d2uiz>:
   17824:	004a      	lsls	r2, r1, #1
   17826:	d211      	bcs.n	1784c <__aeabi_d2uiz+0x28>
   17828:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1782c:	d211      	bcs.n	17852 <__aeabi_d2uiz+0x2e>
   1782e:	d50d      	bpl.n	1784c <__aeabi_d2uiz+0x28>
   17830:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17834:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17838:	d40e      	bmi.n	17858 <__aeabi_d2uiz+0x34>
   1783a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1783e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17842:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17846:	fa23 f002 	lsr.w	r0, r3, r2
   1784a:	4770      	bx	lr
   1784c:	f04f 0000 	mov.w	r0, #0
   17850:	4770      	bx	lr
   17852:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17856:	d102      	bne.n	1785e <__aeabi_d2uiz+0x3a>
   17858:	f04f 30ff 	mov.w	r0, #4294967295
   1785c:	4770      	bx	lr
   1785e:	f04f 0000 	mov.w	r0, #0
   17862:	4770      	bx	lr

00017864 <__aeabi_d2f>:
   17864:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17868:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1786c:	bf24      	itt	cs
   1786e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17872:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17876:	d90d      	bls.n	17894 <__aeabi_d2f+0x30>
   17878:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1787c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17880:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17884:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17888:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1788c:	bf08      	it	eq
   1788e:	f020 0001 	biceq.w	r0, r0, #1
   17892:	4770      	bx	lr
   17894:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17898:	d121      	bne.n	178de <__aeabi_d2f+0x7a>
   1789a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1789e:	bfbc      	itt	lt
   178a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   178a4:	4770      	bxlt	lr
   178a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   178aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   178ae:	f1c2 0218 	rsb	r2, r2, #24
   178b2:	f1c2 0c20 	rsb	ip, r2, #32
   178b6:	fa10 f30c 	lsls.w	r3, r0, ip
   178ba:	fa20 f002 	lsr.w	r0, r0, r2
   178be:	bf18      	it	ne
   178c0:	f040 0001 	orrne.w	r0, r0, #1
   178c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   178c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   178cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   178d0:	ea40 000c 	orr.w	r0, r0, ip
   178d4:	fa23 f302 	lsr.w	r3, r3, r2
   178d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   178dc:	e7cc      	b.n	17878 <__aeabi_d2f+0x14>
   178de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   178e2:	d107      	bne.n	178f4 <__aeabi_d2f+0x90>
   178e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   178e8:	bf1e      	ittt	ne
   178ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   178ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   178f2:	4770      	bxne	lr
   178f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   178f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   178fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17900:	4770      	bx	lr
   17902:	bf00      	nop

00017904 <__aeabi_frsub>:
   17904:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17908:	e002      	b.n	17910 <__addsf3>
   1790a:	bf00      	nop

0001790c <__aeabi_fsub>:
   1790c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017910 <__addsf3>:
   17910:	0042      	lsls	r2, r0, #1
   17912:	bf1f      	itttt	ne
   17914:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17918:	ea92 0f03 	teqne	r2, r3
   1791c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17920:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17924:	d06a      	beq.n	179fc <__addsf3+0xec>
   17926:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1792a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1792e:	bfc1      	itttt	gt
   17930:	18d2      	addgt	r2, r2, r3
   17932:	4041      	eorgt	r1, r0
   17934:	4048      	eorgt	r0, r1
   17936:	4041      	eorgt	r1, r0
   17938:	bfb8      	it	lt
   1793a:	425b      	neglt	r3, r3
   1793c:	2b19      	cmp	r3, #25
   1793e:	bf88      	it	hi
   17940:	4770      	bxhi	lr
   17942:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17946:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1794a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1794e:	bf18      	it	ne
   17950:	4240      	negne	r0, r0
   17952:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17956:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1795a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1795e:	bf18      	it	ne
   17960:	4249      	negne	r1, r1
   17962:	ea92 0f03 	teq	r2, r3
   17966:	d03f      	beq.n	179e8 <__addsf3+0xd8>
   17968:	f1a2 0201 	sub.w	r2, r2, #1
   1796c:	fa41 fc03 	asr.w	ip, r1, r3
   17970:	eb10 000c 	adds.w	r0, r0, ip
   17974:	f1c3 0320 	rsb	r3, r3, #32
   17978:	fa01 f103 	lsl.w	r1, r1, r3
   1797c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17980:	d502      	bpl.n	17988 <__addsf3+0x78>
   17982:	4249      	negs	r1, r1
   17984:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   17988:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1798c:	d313      	bcc.n	179b6 <__addsf3+0xa6>
   1798e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   17992:	d306      	bcc.n	179a2 <__addsf3+0x92>
   17994:	0840      	lsrs	r0, r0, #1
   17996:	ea4f 0131 	mov.w	r1, r1, rrx
   1799a:	f102 0201 	add.w	r2, r2, #1
   1799e:	2afe      	cmp	r2, #254	; 0xfe
   179a0:	d251      	bcs.n	17a46 <__addsf3+0x136>
   179a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   179a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   179aa:	bf08      	it	eq
   179ac:	f020 0001 	biceq.w	r0, r0, #1
   179b0:	ea40 0003 	orr.w	r0, r0, r3
   179b4:	4770      	bx	lr
   179b6:	0049      	lsls	r1, r1, #1
   179b8:	eb40 0000 	adc.w	r0, r0, r0
   179bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   179c0:	f1a2 0201 	sub.w	r2, r2, #1
   179c4:	d1ed      	bne.n	179a2 <__addsf3+0x92>
   179c6:	fab0 fc80 	clz	ip, r0
   179ca:	f1ac 0c08 	sub.w	ip, ip, #8
   179ce:	ebb2 020c 	subs.w	r2, r2, ip
   179d2:	fa00 f00c 	lsl.w	r0, r0, ip
   179d6:	bfaa      	itet	ge
   179d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   179dc:	4252      	neglt	r2, r2
   179de:	4318      	orrge	r0, r3
   179e0:	bfbc      	itt	lt
   179e2:	40d0      	lsrlt	r0, r2
   179e4:	4318      	orrlt	r0, r3
   179e6:	4770      	bx	lr
   179e8:	f092 0f00 	teq	r2, #0
   179ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   179f0:	bf06      	itte	eq
   179f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   179f6:	3201      	addeq	r2, #1
   179f8:	3b01      	subne	r3, #1
   179fa:	e7b5      	b.n	17968 <__addsf3+0x58>
   179fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17a00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17a04:	bf18      	it	ne
   17a06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17a0a:	d021      	beq.n	17a50 <__addsf3+0x140>
   17a0c:	ea92 0f03 	teq	r2, r3
   17a10:	d004      	beq.n	17a1c <__addsf3+0x10c>
   17a12:	f092 0f00 	teq	r2, #0
   17a16:	bf08      	it	eq
   17a18:	4608      	moveq	r0, r1
   17a1a:	4770      	bx	lr
   17a1c:	ea90 0f01 	teq	r0, r1
   17a20:	bf1c      	itt	ne
   17a22:	2000      	movne	r0, #0
   17a24:	4770      	bxne	lr
   17a26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   17a2a:	d104      	bne.n	17a36 <__addsf3+0x126>
   17a2c:	0040      	lsls	r0, r0, #1
   17a2e:	bf28      	it	cs
   17a30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   17a34:	4770      	bx	lr
   17a36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   17a3a:	bf3c      	itt	cc
   17a3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   17a40:	4770      	bxcc	lr
   17a42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17a46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   17a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17a4e:	4770      	bx	lr
   17a50:	ea7f 6222 	mvns.w	r2, r2, asr #24
   17a54:	bf16      	itet	ne
   17a56:	4608      	movne	r0, r1
   17a58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   17a5c:	4601      	movne	r1, r0
   17a5e:	0242      	lsls	r2, r0, #9
   17a60:	bf06      	itte	eq
   17a62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   17a66:	ea90 0f01 	teqeq	r0, r1
   17a6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   17a6e:	4770      	bx	lr

00017a70 <__aeabi_ui2f>:
   17a70:	f04f 0300 	mov.w	r3, #0
   17a74:	e004      	b.n	17a80 <__aeabi_i2f+0x8>
   17a76:	bf00      	nop

00017a78 <__aeabi_i2f>:
   17a78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   17a7c:	bf48      	it	mi
   17a7e:	4240      	negmi	r0, r0
   17a80:	ea5f 0c00 	movs.w	ip, r0
   17a84:	bf08      	it	eq
   17a86:	4770      	bxeq	lr
   17a88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   17a8c:	4601      	mov	r1, r0
   17a8e:	f04f 0000 	mov.w	r0, #0
   17a92:	e01c      	b.n	17ace <__aeabi_l2f+0x2a>

00017a94 <__aeabi_ul2f>:
   17a94:	ea50 0201 	orrs.w	r2, r0, r1
   17a98:	bf08      	it	eq
   17a9a:	4770      	bxeq	lr
   17a9c:	f04f 0300 	mov.w	r3, #0
   17aa0:	e00a      	b.n	17ab8 <__aeabi_l2f+0x14>
   17aa2:	bf00      	nop

00017aa4 <__aeabi_l2f>:
   17aa4:	ea50 0201 	orrs.w	r2, r0, r1
   17aa8:	bf08      	it	eq
   17aaa:	4770      	bxeq	lr
   17aac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   17ab0:	d502      	bpl.n	17ab8 <__aeabi_l2f+0x14>
   17ab2:	4240      	negs	r0, r0
   17ab4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17ab8:	ea5f 0c01 	movs.w	ip, r1
   17abc:	bf02      	ittt	eq
   17abe:	4684      	moveq	ip, r0
   17ac0:	4601      	moveq	r1, r0
   17ac2:	2000      	moveq	r0, #0
   17ac4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   17ac8:	bf08      	it	eq
   17aca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   17ace:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   17ad2:	fabc f28c 	clz	r2, ip
   17ad6:	3a08      	subs	r2, #8
   17ad8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   17adc:	db10      	blt.n	17b00 <__aeabi_l2f+0x5c>
   17ade:	fa01 fc02 	lsl.w	ip, r1, r2
   17ae2:	4463      	add	r3, ip
   17ae4:	fa00 fc02 	lsl.w	ip, r0, r2
   17ae8:	f1c2 0220 	rsb	r2, r2, #32
   17aec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17af0:	fa20 f202 	lsr.w	r2, r0, r2
   17af4:	eb43 0002 	adc.w	r0, r3, r2
   17af8:	bf08      	it	eq
   17afa:	f020 0001 	biceq.w	r0, r0, #1
   17afe:	4770      	bx	lr
   17b00:	f102 0220 	add.w	r2, r2, #32
   17b04:	fa01 fc02 	lsl.w	ip, r1, r2
   17b08:	f1c2 0220 	rsb	r2, r2, #32
   17b0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   17b10:	fa21 f202 	lsr.w	r2, r1, r2
   17b14:	eb43 0002 	adc.w	r0, r3, r2
   17b18:	bf08      	it	eq
   17b1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   17b1e:	4770      	bx	lr

00017b20 <__aeabi_fmul>:
   17b20:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17b24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   17b28:	bf1e      	ittt	ne
   17b2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   17b2e:	ea92 0f0c 	teqne	r2, ip
   17b32:	ea93 0f0c 	teqne	r3, ip
   17b36:	d06f      	beq.n	17c18 <__aeabi_fmul+0xf8>
   17b38:	441a      	add	r2, r3
   17b3a:	ea80 0c01 	eor.w	ip, r0, r1
   17b3e:	0240      	lsls	r0, r0, #9
   17b40:	bf18      	it	ne
   17b42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   17b46:	d01e      	beq.n	17b86 <__aeabi_fmul+0x66>
   17b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   17b4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   17b50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   17b54:	fba0 3101 	umull	r3, r1, r0, r1
   17b58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   17b5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   17b60:	bf3e      	ittt	cc
   17b62:	0049      	lslcc	r1, r1, #1
   17b64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   17b68:	005b      	lslcc	r3, r3, #1
   17b6a:	ea40 0001 	orr.w	r0, r0, r1
   17b6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   17b72:	2afd      	cmp	r2, #253	; 0xfd
   17b74:	d81d      	bhi.n	17bb2 <__aeabi_fmul+0x92>
   17b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17b7e:	bf08      	it	eq
   17b80:	f020 0001 	biceq.w	r0, r0, #1
   17b84:	4770      	bx	lr
   17b86:	f090 0f00 	teq	r0, #0
   17b8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   17b8e:	bf08      	it	eq
   17b90:	0249      	lsleq	r1, r1, #9
   17b92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   17b96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   17b9a:	3a7f      	subs	r2, #127	; 0x7f
   17b9c:	bfc2      	ittt	gt
   17b9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   17ba2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   17ba6:	4770      	bxgt	lr
   17ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17bac:	f04f 0300 	mov.w	r3, #0
   17bb0:	3a01      	subs	r2, #1
   17bb2:	dc5d      	bgt.n	17c70 <__aeabi_fmul+0x150>
   17bb4:	f112 0f19 	cmn.w	r2, #25
   17bb8:	bfdc      	itt	le
   17bba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   17bbe:	4770      	bxle	lr
   17bc0:	f1c2 0200 	rsb	r2, r2, #0
   17bc4:	0041      	lsls	r1, r0, #1
   17bc6:	fa21 f102 	lsr.w	r1, r1, r2
   17bca:	f1c2 0220 	rsb	r2, r2, #32
   17bce:	fa00 fc02 	lsl.w	ip, r0, r2
   17bd2:	ea5f 0031 	movs.w	r0, r1, rrx
   17bd6:	f140 0000 	adc.w	r0, r0, #0
   17bda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   17bde:	bf08      	it	eq
   17be0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   17be4:	4770      	bx	lr
   17be6:	f092 0f00 	teq	r2, #0
   17bea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   17bee:	bf02      	ittt	eq
   17bf0:	0040      	lsleq	r0, r0, #1
   17bf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   17bf6:	3a01      	subeq	r2, #1
   17bf8:	d0f9      	beq.n	17bee <__aeabi_fmul+0xce>
   17bfa:	ea40 000c 	orr.w	r0, r0, ip
   17bfe:	f093 0f00 	teq	r3, #0
   17c02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17c06:	bf02      	ittt	eq
   17c08:	0049      	lsleq	r1, r1, #1
   17c0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   17c0e:	3b01      	subeq	r3, #1
   17c10:	d0f9      	beq.n	17c06 <__aeabi_fmul+0xe6>
   17c12:	ea41 010c 	orr.w	r1, r1, ip
   17c16:	e78f      	b.n	17b38 <__aeabi_fmul+0x18>
   17c18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   17c1c:	ea92 0f0c 	teq	r2, ip
   17c20:	bf18      	it	ne
   17c22:	ea93 0f0c 	teqne	r3, ip
   17c26:	d00a      	beq.n	17c3e <__aeabi_fmul+0x11e>
   17c28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   17c2c:	bf18      	it	ne
   17c2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   17c32:	d1d8      	bne.n	17be6 <__aeabi_fmul+0xc6>
   17c34:	ea80 0001 	eor.w	r0, r0, r1
   17c38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   17c3c:	4770      	bx	lr
   17c3e:	f090 0f00 	teq	r0, #0
   17c42:	bf17      	itett	ne
   17c44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   17c48:	4608      	moveq	r0, r1
   17c4a:	f091 0f00 	teqne	r1, #0
   17c4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   17c52:	d014      	beq.n	17c7e <__aeabi_fmul+0x15e>
   17c54:	ea92 0f0c 	teq	r2, ip
   17c58:	d101      	bne.n	17c5e <__aeabi_fmul+0x13e>
   17c5a:	0242      	lsls	r2, r0, #9
   17c5c:	d10f      	bne.n	17c7e <__aeabi_fmul+0x15e>
   17c5e:	ea93 0f0c 	teq	r3, ip
   17c62:	d103      	bne.n	17c6c <__aeabi_fmul+0x14c>
   17c64:	024b      	lsls	r3, r1, #9
   17c66:	bf18      	it	ne
   17c68:	4608      	movne	r0, r1
   17c6a:	d108      	bne.n	17c7e <__aeabi_fmul+0x15e>
   17c6c:	ea80 0001 	eor.w	r0, r0, r1
   17c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   17c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17c7c:	4770      	bx	lr
   17c7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17c82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   17c86:	4770      	bx	lr

00017c88 <__aeabi_fdiv>:
   17c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   17c90:	bf1e      	ittt	ne
   17c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   17c96:	ea92 0f0c 	teqne	r2, ip
   17c9a:	ea93 0f0c 	teqne	r3, ip
   17c9e:	d069      	beq.n	17d74 <__aeabi_fdiv+0xec>
   17ca0:	eba2 0203 	sub.w	r2, r2, r3
   17ca4:	ea80 0c01 	eor.w	ip, r0, r1
   17ca8:	0249      	lsls	r1, r1, #9
   17caa:	ea4f 2040 	mov.w	r0, r0, lsl #9
   17cae:	d037      	beq.n	17d20 <__aeabi_fdiv+0x98>
   17cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17cb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   17cb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   17cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   17cc0:	428b      	cmp	r3, r1
   17cc2:	bf38      	it	cc
   17cc4:	005b      	lslcc	r3, r3, #1
   17cc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   17cca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   17cce:	428b      	cmp	r3, r1
   17cd0:	bf24      	itt	cs
   17cd2:	1a5b      	subcs	r3, r3, r1
   17cd4:	ea40 000c 	orrcs.w	r0, r0, ip
   17cd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   17cdc:	bf24      	itt	cs
   17cde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   17ce2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17ce6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   17cea:	bf24      	itt	cs
   17cec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   17cf0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17cf4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   17cf8:	bf24      	itt	cs
   17cfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   17cfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17d02:	011b      	lsls	r3, r3, #4
   17d04:	bf18      	it	ne
   17d06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   17d0a:	d1e0      	bne.n	17cce <__aeabi_fdiv+0x46>
   17d0c:	2afd      	cmp	r2, #253	; 0xfd
   17d0e:	f63f af50 	bhi.w	17bb2 <__aeabi_fmul+0x92>
   17d12:	428b      	cmp	r3, r1
   17d14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17d18:	bf08      	it	eq
   17d1a:	f020 0001 	biceq.w	r0, r0, #1
   17d1e:	4770      	bx	lr
   17d20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   17d24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   17d28:	327f      	adds	r2, #127	; 0x7f
   17d2a:	bfc2      	ittt	gt
   17d2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   17d30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   17d34:	4770      	bxgt	lr
   17d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17d3a:	f04f 0300 	mov.w	r3, #0
   17d3e:	3a01      	subs	r2, #1
   17d40:	e737      	b.n	17bb2 <__aeabi_fmul+0x92>
   17d42:	f092 0f00 	teq	r2, #0
   17d46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   17d4a:	bf02      	ittt	eq
   17d4c:	0040      	lsleq	r0, r0, #1
   17d4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   17d52:	3a01      	subeq	r2, #1
   17d54:	d0f9      	beq.n	17d4a <__aeabi_fdiv+0xc2>
   17d56:	ea40 000c 	orr.w	r0, r0, ip
   17d5a:	f093 0f00 	teq	r3, #0
   17d5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17d62:	bf02      	ittt	eq
   17d64:	0049      	lsleq	r1, r1, #1
   17d66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   17d6a:	3b01      	subeq	r3, #1
   17d6c:	d0f9      	beq.n	17d62 <__aeabi_fdiv+0xda>
   17d6e:	ea41 010c 	orr.w	r1, r1, ip
   17d72:	e795      	b.n	17ca0 <__aeabi_fdiv+0x18>
   17d74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   17d78:	ea92 0f0c 	teq	r2, ip
   17d7c:	d108      	bne.n	17d90 <__aeabi_fdiv+0x108>
   17d7e:	0242      	lsls	r2, r0, #9
   17d80:	f47f af7d 	bne.w	17c7e <__aeabi_fmul+0x15e>
   17d84:	ea93 0f0c 	teq	r3, ip
   17d88:	f47f af70 	bne.w	17c6c <__aeabi_fmul+0x14c>
   17d8c:	4608      	mov	r0, r1
   17d8e:	e776      	b.n	17c7e <__aeabi_fmul+0x15e>
   17d90:	ea93 0f0c 	teq	r3, ip
   17d94:	d104      	bne.n	17da0 <__aeabi_fdiv+0x118>
   17d96:	024b      	lsls	r3, r1, #9
   17d98:	f43f af4c 	beq.w	17c34 <__aeabi_fmul+0x114>
   17d9c:	4608      	mov	r0, r1
   17d9e:	e76e      	b.n	17c7e <__aeabi_fmul+0x15e>
   17da0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   17da4:	bf18      	it	ne
   17da6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   17daa:	d1ca      	bne.n	17d42 <__aeabi_fdiv+0xba>
   17dac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   17db0:	f47f af5c 	bne.w	17c6c <__aeabi_fmul+0x14c>
   17db4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   17db8:	f47f af3c 	bne.w	17c34 <__aeabi_fmul+0x114>
   17dbc:	e75f      	b.n	17c7e <__aeabi_fmul+0x15e>
   17dbe:	bf00      	nop

00017dc0 <__gesf2>:
   17dc0:	f04f 3cff 	mov.w	ip, #4294967295
   17dc4:	e006      	b.n	17dd4 <__cmpsf2+0x4>
   17dc6:	bf00      	nop

00017dc8 <__lesf2>:
   17dc8:	f04f 0c01 	mov.w	ip, #1
   17dcc:	e002      	b.n	17dd4 <__cmpsf2+0x4>
   17dce:	bf00      	nop

00017dd0 <__cmpsf2>:
   17dd0:	f04f 0c01 	mov.w	ip, #1
   17dd4:	f84d cd04 	str.w	ip, [sp, #-4]!
   17dd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   17ddc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   17de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17de4:	bf18      	it	ne
   17de6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17dea:	d011      	beq.n	17e10 <__cmpsf2+0x40>
   17dec:	b001      	add	sp, #4
   17dee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   17df2:	bf18      	it	ne
   17df4:	ea90 0f01 	teqne	r0, r1
   17df8:	bf58      	it	pl
   17dfa:	ebb2 0003 	subspl.w	r0, r2, r3
   17dfe:	bf88      	it	hi
   17e00:	17c8      	asrhi	r0, r1, #31
   17e02:	bf38      	it	cc
   17e04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   17e08:	bf18      	it	ne
   17e0a:	f040 0001 	orrne.w	r0, r0, #1
   17e0e:	4770      	bx	lr
   17e10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   17e14:	d102      	bne.n	17e1c <__cmpsf2+0x4c>
   17e16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   17e1a:	d105      	bne.n	17e28 <__cmpsf2+0x58>
   17e1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   17e20:	d1e4      	bne.n	17dec <__cmpsf2+0x1c>
   17e22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   17e26:	d0e1      	beq.n	17dec <__cmpsf2+0x1c>
   17e28:	f85d 0b04 	ldr.w	r0, [sp], #4
   17e2c:	4770      	bx	lr
   17e2e:	bf00      	nop

00017e30 <__aeabi_cfrcmple>:
   17e30:	4684      	mov	ip, r0
   17e32:	4608      	mov	r0, r1
   17e34:	4661      	mov	r1, ip
   17e36:	e7ff      	b.n	17e38 <__aeabi_cfcmpeq>

00017e38 <__aeabi_cfcmpeq>:
   17e38:	b50f      	push	{r0, r1, r2, r3, lr}
   17e3a:	f7ff ffc9 	bl	17dd0 <__cmpsf2>
   17e3e:	2800      	cmp	r0, #0
   17e40:	bf48      	it	mi
   17e42:	f110 0f00 	cmnmi.w	r0, #0
   17e46:	bd0f      	pop	{r0, r1, r2, r3, pc}

00017e48 <__aeabi_fcmpeq>:
   17e48:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e4c:	f7ff fff4 	bl	17e38 <__aeabi_cfcmpeq>
   17e50:	bf0c      	ite	eq
   17e52:	2001      	moveq	r0, #1
   17e54:	2000      	movne	r0, #0
   17e56:	f85d fb08 	ldr.w	pc, [sp], #8
   17e5a:	bf00      	nop

00017e5c <__aeabi_fcmplt>:
   17e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e60:	f7ff ffea 	bl	17e38 <__aeabi_cfcmpeq>
   17e64:	bf34      	ite	cc
   17e66:	2001      	movcc	r0, #1
   17e68:	2000      	movcs	r0, #0
   17e6a:	f85d fb08 	ldr.w	pc, [sp], #8
   17e6e:	bf00      	nop

00017e70 <__aeabi_fcmple>:
   17e70:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e74:	f7ff ffe0 	bl	17e38 <__aeabi_cfcmpeq>
   17e78:	bf94      	ite	ls
   17e7a:	2001      	movls	r0, #1
   17e7c:	2000      	movhi	r0, #0
   17e7e:	f85d fb08 	ldr.w	pc, [sp], #8
   17e82:	bf00      	nop

00017e84 <__aeabi_fcmpge>:
   17e84:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e88:	f7ff ffd2 	bl	17e30 <__aeabi_cfrcmple>
   17e8c:	bf94      	ite	ls
   17e8e:	2001      	movls	r0, #1
   17e90:	2000      	movhi	r0, #0
   17e92:	f85d fb08 	ldr.w	pc, [sp], #8
   17e96:	bf00      	nop

00017e98 <__aeabi_fcmpgt>:
   17e98:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e9c:	f7ff ffc8 	bl	17e30 <__aeabi_cfrcmple>
   17ea0:	bf34      	ite	cc
   17ea2:	2001      	movcc	r0, #1
   17ea4:	2000      	movcs	r0, #0
   17ea6:	f85d fb08 	ldr.w	pc, [sp], #8
   17eaa:	bf00      	nop

00017eac <__aeabi_f2iz>:
   17eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
   17eb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   17eb4:	d30f      	bcc.n	17ed6 <__aeabi_f2iz+0x2a>
   17eb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   17eba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   17ebe:	d90d      	bls.n	17edc <__aeabi_f2iz+0x30>
   17ec0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   17ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17ec8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17ecc:	fa23 f002 	lsr.w	r0, r3, r2
   17ed0:	bf18      	it	ne
   17ed2:	4240      	negne	r0, r0
   17ed4:	4770      	bx	lr
   17ed6:	f04f 0000 	mov.w	r0, #0
   17eda:	4770      	bx	lr
   17edc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   17ee0:	d101      	bne.n	17ee6 <__aeabi_f2iz+0x3a>
   17ee2:	0242      	lsls	r2, r0, #9
   17ee4:	d105      	bne.n	17ef2 <__aeabi_f2iz+0x46>
   17ee6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   17eea:	bf08      	it	eq
   17eec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17ef0:	4770      	bx	lr
   17ef2:	f04f 0000 	mov.w	r0, #0
   17ef6:	4770      	bx	lr

00017ef8 <memcpy>:
   17ef8:	2a0f      	cmp	r2, #15
   17efa:	b4f0      	push	{r4, r5, r6, r7}
   17efc:	d945      	bls.n	17f8a <memcpy+0x92>
   17efe:	ea40 0301 	orr.w	r3, r0, r1
   17f02:	079b      	lsls	r3, r3, #30
   17f04:	d145      	bne.n	17f92 <memcpy+0x9a>
   17f06:	f1a2 0710 	sub.w	r7, r2, #16
   17f0a:	460c      	mov	r4, r1
   17f0c:	4603      	mov	r3, r0
   17f0e:	093f      	lsrs	r7, r7, #4
   17f10:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   17f14:	3610      	adds	r6, #16
   17f16:	6825      	ldr	r5, [r4, #0]
   17f18:	3310      	adds	r3, #16
   17f1a:	3410      	adds	r4, #16
   17f1c:	f843 5c10 	str.w	r5, [r3, #-16]
   17f20:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   17f24:	f843 5c0c 	str.w	r5, [r3, #-12]
   17f28:	f854 5c08 	ldr.w	r5, [r4, #-8]
   17f2c:	f843 5c08 	str.w	r5, [r3, #-8]
   17f30:	f854 5c04 	ldr.w	r5, [r4, #-4]
   17f34:	f843 5c04 	str.w	r5, [r3, #-4]
   17f38:	42b3      	cmp	r3, r6
   17f3a:	d1ec      	bne.n	17f16 <memcpy+0x1e>
   17f3c:	1c7b      	adds	r3, r7, #1
   17f3e:	f002 0c0f 	and.w	ip, r2, #15
   17f42:	f1bc 0f03 	cmp.w	ip, #3
   17f46:	ea4f 1303 	mov.w	r3, r3, lsl #4
   17f4a:	4419      	add	r1, r3
   17f4c:	4403      	add	r3, r0
   17f4e:	d922      	bls.n	17f96 <memcpy+0x9e>
   17f50:	460e      	mov	r6, r1
   17f52:	461d      	mov	r5, r3
   17f54:	4664      	mov	r4, ip
   17f56:	f856 7b04 	ldr.w	r7, [r6], #4
   17f5a:	3c04      	subs	r4, #4
   17f5c:	2c03      	cmp	r4, #3
   17f5e:	f845 7b04 	str.w	r7, [r5], #4
   17f62:	d8f8      	bhi.n	17f56 <memcpy+0x5e>
   17f64:	f1ac 0404 	sub.w	r4, ip, #4
   17f68:	f002 0203 	and.w	r2, r2, #3
   17f6c:	f024 0403 	bic.w	r4, r4, #3
   17f70:	3404      	adds	r4, #4
   17f72:	4423      	add	r3, r4
   17f74:	4421      	add	r1, r4
   17f76:	b132      	cbz	r2, 17f86 <memcpy+0x8e>
   17f78:	440a      	add	r2, r1
   17f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   17f7e:	4291      	cmp	r1, r2
   17f80:	f803 4b01 	strb.w	r4, [r3], #1
   17f84:	d1f9      	bne.n	17f7a <memcpy+0x82>
   17f86:	bcf0      	pop	{r4, r5, r6, r7}
   17f88:	4770      	bx	lr
   17f8a:	4603      	mov	r3, r0
   17f8c:	2a00      	cmp	r2, #0
   17f8e:	d1f3      	bne.n	17f78 <memcpy+0x80>
   17f90:	e7f9      	b.n	17f86 <memcpy+0x8e>
   17f92:	4603      	mov	r3, r0
   17f94:	e7f0      	b.n	17f78 <memcpy+0x80>
   17f96:	4662      	mov	r2, ip
   17f98:	2a00      	cmp	r2, #0
   17f9a:	d1ed      	bne.n	17f78 <memcpy+0x80>
   17f9c:	e7f3      	b.n	17f86 <memcpy+0x8e>
   17f9e:	bf00      	nop

00017fa0 <memset>:
   17fa0:	0783      	lsls	r3, r0, #30
   17fa2:	b4f0      	push	{r4, r5, r6, r7}
   17fa4:	d048      	beq.n	18038 <memset+0x98>
   17fa6:	1e54      	subs	r4, r2, #1
   17fa8:	2a00      	cmp	r2, #0
   17faa:	d043      	beq.n	18034 <memset+0x94>
   17fac:	b2cd      	uxtb	r5, r1
   17fae:	4603      	mov	r3, r0
   17fb0:	e002      	b.n	17fb8 <memset+0x18>
   17fb2:	2c00      	cmp	r4, #0
   17fb4:	d03e      	beq.n	18034 <memset+0x94>
   17fb6:	4614      	mov	r4, r2
   17fb8:	f803 5b01 	strb.w	r5, [r3], #1
   17fbc:	f013 0f03 	tst.w	r3, #3
   17fc0:	f104 32ff 	add.w	r2, r4, #4294967295
   17fc4:	d1f5      	bne.n	17fb2 <memset+0x12>
   17fc6:	2c03      	cmp	r4, #3
   17fc8:	d92d      	bls.n	18026 <memset+0x86>
   17fca:	b2cd      	uxtb	r5, r1
   17fcc:	2c0f      	cmp	r4, #15
   17fce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   17fd2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   17fd6:	d918      	bls.n	1800a <memset+0x6a>
   17fd8:	f1a4 0710 	sub.w	r7, r4, #16
   17fdc:	f103 0610 	add.w	r6, r3, #16
   17fe0:	461a      	mov	r2, r3
   17fe2:	093f      	lsrs	r7, r7, #4
   17fe4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   17fe8:	6015      	str	r5, [r2, #0]
   17fea:	3210      	adds	r2, #16
   17fec:	f842 5c0c 	str.w	r5, [r2, #-12]
   17ff0:	f842 5c08 	str.w	r5, [r2, #-8]
   17ff4:	f842 5c04 	str.w	r5, [r2, #-4]
   17ff8:	42b2      	cmp	r2, r6
   17ffa:	d1f5      	bne.n	17fe8 <memset+0x48>
   17ffc:	f004 040f 	and.w	r4, r4, #15
   18000:	3701      	adds	r7, #1
   18002:	2c03      	cmp	r4, #3
   18004:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18008:	d90d      	bls.n	18026 <memset+0x86>
   1800a:	461e      	mov	r6, r3
   1800c:	4622      	mov	r2, r4
   1800e:	3a04      	subs	r2, #4
   18010:	f846 5b04 	str.w	r5, [r6], #4
   18014:	2a03      	cmp	r2, #3
   18016:	d8fa      	bhi.n	1800e <memset+0x6e>
   18018:	1f22      	subs	r2, r4, #4
   1801a:	f004 0403 	and.w	r4, r4, #3
   1801e:	f022 0203 	bic.w	r2, r2, #3
   18022:	3204      	adds	r2, #4
   18024:	4413      	add	r3, r2
   18026:	b12c      	cbz	r4, 18034 <memset+0x94>
   18028:	b2c9      	uxtb	r1, r1
   1802a:	441c      	add	r4, r3
   1802c:	f803 1b01 	strb.w	r1, [r3], #1
   18030:	42a3      	cmp	r3, r4
   18032:	d1fb      	bne.n	1802c <memset+0x8c>
   18034:	bcf0      	pop	{r4, r5, r6, r7}
   18036:	4770      	bx	lr
   18038:	4614      	mov	r4, r2
   1803a:	4603      	mov	r3, r0
   1803c:	e7c3      	b.n	17fc6 <memset+0x26>
   1803e:	bf00      	nop

00018040 <strncpy>:
   18040:	ea40 0301 	orr.w	r3, r0, r1
   18044:	079b      	lsls	r3, r3, #30
   18046:	b470      	push	{r4, r5, r6}
   18048:	d12b      	bne.n	180a2 <strncpy+0x62>
   1804a:	2a03      	cmp	r2, #3
   1804c:	bf84      	itt	hi
   1804e:	460b      	movhi	r3, r1
   18050:	4605      	movhi	r5, r0
   18052:	d926      	bls.n	180a2 <strncpy+0x62>
   18054:	4619      	mov	r1, r3
   18056:	f853 4b04 	ldr.w	r4, [r3], #4
   1805a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1805e:	ea26 0604 	bic.w	r6, r6, r4
   18062:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18066:	d105      	bne.n	18074 <strncpy+0x34>
   18068:	3a04      	subs	r2, #4
   1806a:	f845 4b04 	str.w	r4, [r5], #4
   1806e:	2a03      	cmp	r2, #3
   18070:	4619      	mov	r1, r3
   18072:	d8ef      	bhi.n	18054 <strncpy+0x14>
   18074:	b19a      	cbz	r2, 1809e <strncpy+0x5e>
   18076:	780c      	ldrb	r4, [r1, #0]
   18078:	3a01      	subs	r2, #1
   1807a:	1c6b      	adds	r3, r5, #1
   1807c:	702c      	strb	r4, [r5, #0]
   1807e:	b13c      	cbz	r4, 18090 <strncpy+0x50>
   18080:	b16a      	cbz	r2, 1809e <strncpy+0x5e>
   18082:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18086:	3a01      	subs	r2, #1
   18088:	f803 4b01 	strb.w	r4, [r3], #1
   1808c:	2c00      	cmp	r4, #0
   1808e:	d1f7      	bne.n	18080 <strncpy+0x40>
   18090:	b12a      	cbz	r2, 1809e <strncpy+0x5e>
   18092:	441a      	add	r2, r3
   18094:	2100      	movs	r1, #0
   18096:	f803 1b01 	strb.w	r1, [r3], #1
   1809a:	4293      	cmp	r3, r2
   1809c:	d1fb      	bne.n	18096 <strncpy+0x56>
   1809e:	bc70      	pop	{r4, r5, r6}
   180a0:	4770      	bx	lr
   180a2:	4605      	mov	r5, r0
   180a4:	e7e6      	b.n	18074 <strncpy+0x34>
   180a6:	bf00      	nop

000180a8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   180a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   180aa:	e003      	b.n	180b4 <LoopCopyDataInit>

000180ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   180ac:	4b0a      	ldr	r3, [pc, #40]	; (180d8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   180ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   180b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   180b2:	3104      	adds	r1, #4

000180b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   180b4:	4809      	ldr	r0, [pc, #36]	; (180dc <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   180b6:	4b0a      	ldr	r3, [pc, #40]	; (180e0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   180b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   180ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   180bc:	d3f6      	bcc.n	180ac <CopyDataInit>
	ldr	r2, =_sbss
   180be:	4a09      	ldr	r2, [pc, #36]	; (180e4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   180c0:	e002      	b.n	180c8 <LoopFillZerobss>

000180c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   180c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   180c4:	f842 3b04 	str.w	r3, [r2], #4

000180c8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   180c8:	4b07      	ldr	r3, [pc, #28]	; (180e8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   180ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
   180cc:	d3f9      	bcc.n	180c2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   180ce:	f7e8 f935 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   180d2:	f7fe fe5d 	bl	16d90 <main>
	bx	lr    
   180d6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   180d8:	00018248 	.word	0x00018248
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   180dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   180e0:	20000120 	.word	0x20000120
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   180e4:	20000120 	.word	0x20000120
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   180e8:	2000ae94 	.word	0x2000ae94

000180ec <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   180ec:	e7fe      	b.n	180ec <ADC1_2_IRQHandler>
   180ee:	0000      	movs	r0, r0
   180f0:	6c6c616d 	.word	0x6c6c616d
   180f4:	6620636f 	.word	0x6620636f
   180f8:	6520726f 	.word	0x6520726f
   180fc:	746e6576 	.word	0x746e6576
   18100:	61747320 	.word	0x61747320
   18104:	66206b63 	.word	0x66206b63
   18108:	656c6961 	.word	0x656c6961
   1810c:	000d0a64 	.word	0x000d0a64
   18110:	72656874 	.word	0x72656874
   18114:	72612065 	.word	0x72612065
   18118:	65732065 	.word	0x65732065
   1811c:	726f736e 	.word	0x726f736e
   18120:	73696d20 	.word	0x73696d20
   18124:	676e6973 	.word	0x676e6973
   18128:	61656420 	.word	0x61656420
   1812c:	6e696c64 	.word	0x6e696c64
   18130:	000d0a65 	.word	0x000d0a65
   18134:	72656874 	.word	0x72656874
   18138:	72612065 	.word	0x72612065
   1813c:	65732065 	.word	0x65732065
   18140:	6e617672 	.word	0x6e617672
   18144:	6d207374 	.word	0x6d207374
   18148:	69737369 	.word	0x69737369
   1814c:	6420676e 	.word	0x6420676e
   18150:	6c646165 	.word	0x6c646165
   18154:	0a656e69 	.word	0x0a656e69
   18158:	0000000d 	.word	0x0000000d
   1815c:	6f727245 	.word	0x6f727245
   18160:	54203a72 	.word	0x54203a72
   18164:	20736968 	.word	0x20736968
   18168:	6e657665 	.word	0x6e657665
   1816c:	61682074 	.word	0x61682074
   18170:	72612073 	.word	0x72612073
   18174:	65766972 	.word	0x65766972
   18178:	0a212164 	.word	0x0a212164
   1817c:	0000000d 	.word	0x0000000d
   18180:	454c4449 	.word	0x454c4449
   18184:	00000000 	.word	0x00000000

00018188 <ulKernelPriority>:
   18188:	0000007f                                ....

0001818c <heapSTRUCT_SIZE>:
   1818c:	00010010                                         ..

0001818e <version>:
   1818e:	3d5a0001                                         ..

00018190 <utm_east0>:
   18190:	00093d5a                                Z=..

00018194 <utm_north0>:
   18194:	005875e6                                .uX.

00018198 <climb_pgain>:
   18198:	bcf5c28f                                ....

0001819c <climb_igain>:
   1819c:	3dcccccd                                ...=

000181a0 <level_gaz>:
   181a0:	3e9eb852                                R..>

000181a4 <nav_east0>:
   181a4:	00093d5a                                Z=..

000181a8 <nav_north0>:
   181a8:	005875e6                                .uX.

000181ac <nb_waypoint>:
   181ac:	00000007 33323130 37363534 42413938     ....0123456789AB
   181bc:	46454443                                CDEF

000181c0 <failsafe>:
	...
   181d4:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   181e4:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   181f4:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18204:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18214:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18224:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18234:	00000074 736e6553 0000726f 76726573     t...Sensor..serv
   18244:	00746e61                                ant.
